// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.GEN.proto

#include "TSCHArchives.GEN.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSCH {
namespace Generated {
constexpr ChartStyleArchive::ChartStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartinfoarea3dlightingpackage_(nullptr)
  , tschchartinfobar3dlightingpackage_(nullptr)
  , tschchartinfocolumn3dlightingpackage_(nullptr)
  , tschchartinfodefault3dlightingpackage_(nullptr)
  , tschchartinfoline3dlightingpackage_(nullptr)
  , tschchartinfopie3dlightingpackage_(nullptr)
  , tschchartinfodefaultbackgroundfill_(nullptr)
  , tschchartinfodefaultbackgroundstroke_(nullptr)
  , tschchartinfodefaultbordershadow_(nullptr)
  , tschchartinfodefaultborderstroke_(nullptr)
  , tschchartinfodefaultgridbackgroundfill_(nullptr)
  , tschchartinfodefaulttitlecolor_(nullptr)
  , tschchartinfodefault3dchartopacity_(0)
  , tschchartinfodefaultborderopacity_(0)
  , tschchartinfodefaultgridbackgroundopacity_(0)
  , tschchartinfodefaultinterbargap_(0)
  , tschchartinfodefaultintersetgap_(0)
  , tschchartinfodefaulttitleparagraphstyleindex_(0)
  , tschchartinfodefaultroundedcornerradius_(0)
  , tschchartinfodefaultdatasetnameparagraphstyleindex_(0)
  , tschchartinfodefaultcombinelayers_(false)
  , tschchartinfodefaultroundedcornerouterendonly_(false)
  , tschchartinfodefaultshowborder_(false){}
struct ChartStyleArchiveDefaultTypeInternal {
  constexpr ChartStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartStyleArchiveDefaultTypeInternal() {}
  union {
    ChartStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartStyleArchiveDefaultTypeInternal _ChartStyleArchive_default_instance_;
constexpr ChartNonStyleArchive::ChartNonStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartinfodefaulttitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschchartinfodefault3drotation_(nullptr)
  , tschchartinfoarea3dscale_(nullptr)
  , tschchartinfobar3dscale_(nullptr)
  , tschchartinfocolumn3dscale_(nullptr)
  , tschchartinfodefault3dscale_(nullptr)
  , tschchartinfoline3dscale_(nullptr)
  , tschchartinfopie3dscale_(nullptr)
  , tschchartinfodefault3dviewport_(nullptr)
  , tschchartinfodefault3dbarshape_(0)
  , tschchartinfodefault3dintersetdepthgap_(0)
  , tschchartinfodefaultpiestartangle_(0)
  , tschchartinfodefaultshowtitle_(false)
  , tschchartinfodefaultskiphiddendata_(false)
  , tschchartinfodefaultdatasetnamelocation_(0)
  , tschchartinfodefaultmultidatacontroltype_(0)
  , tschchartinfodefaultinnerradius_(0)
  , tschchartinfodefault3dbeveledges_(false)
  , tschchartinfodefaultdeprecatedroundedcornerouterendonly_(false)
  , tschchartinfodefaultdonutplacetitleatcenter_(false)
  , tschchartinfodefaultshowlegend_(false)
  , tschchartinfopiecalloutlinetype_(0)
  , tschchartinfoareacalloutlinetype_(0)
  , tschchartinfobarcalloutlinetype_(0)
  , tschchartinfobubblecalloutlinetype_(0)
  , tschchartinfolinecalloutlinetype_(0)
  , tschchartinfoscattercalloutlinetype_(0)
  , tschchartinfostackedareacalloutlinetype_(0)
  , tschchartinfostackedbarcalloutlinetype_(0)
  , tschchartinfodefaultcalloutlinetype_(0)
  , tschchartinfodefaultdeprecatedroundedcornerradius_(0){}
struct ChartNonStyleArchiveDefaultTypeInternal {
  constexpr ChartNonStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartNonStyleArchiveDefaultTypeInternal _ChartNonStyleArchive_default_instance_;
constexpr LegendStyleArchive::LegendStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschlegendmodeldefaultfill_(nullptr)
  , tschlegendmodeldefaultshadow_(nullptr)
  , tschlegendmodeldefaultstroke_(nullptr)
  , tschlegendmodeldefaultlabelparagraphstyleindex_(0)
  , tschlegendmodeldefaultopacity_(0){}
struct LegendStyleArchiveDefaultTypeInternal {
  constexpr LegendStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LegendStyleArchiveDefaultTypeInternal() {}
  union {
    LegendStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LegendStyleArchiveDefaultTypeInternal _LegendStyleArchive_default_instance_;
constexpr LegendNonStyleArchive::LegendNonStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LegendNonStyleArchiveDefaultTypeInternal {
  constexpr LegendNonStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LegendNonStyleArchiveDefaultTypeInternal() {}
  union {
    LegendNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LegendNonStyleArchiveDefaultTypeInternal _LegendNonStyleArchive_default_instance_;
constexpr ChartAxisStyleArchive::ChartAxisStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartaxiscategory3dgridlinestroke_(nullptr)
  , tschchartaxisvalue3dgridlinestroke_(nullptr)
  , tschchartaxiscategorymajorgridlineshadow_(nullptr)
  , tschchartaxisvaluemajorgridlineshadow_(nullptr)
  , tschchartaxiscategorymajorgridlinestroke_(nullptr)
  , tschchartaxisvaluemajorgridlinestroke_(nullptr)
  , tschchartaxiscategoryminorgridlineshadow_(nullptr)
  , tschchartaxisvalueminorgridlineshadow_(nullptr)
  , tschchartaxiscategoryminorgridlinestroke_(nullptr)
  , tschchartaxisvalueminorgridlinestroke_(nullptr)
  , tschchartaxiscategory3dgridlineopacity_(0)
  , tschchartaxisvalue3dgridlineopacity_(0)
  , tschchartaxiscategoryhorizontalspacing_(0)
  , tschchartaxiscategorylabelparagraphstyleindex_(0)
  , tschchartaxisdefaultlabelparagraphstyleindex_(0)
  , tschchartaxisvaluelabelparagraphstyleindex_(0)
  , tschchartaxiscategorylabelsorientation_(0)
  , tschchartaxisdefaultlabelsorientation_(0)
  , tschchartaxisvaluelabelsorientation_(0)
  , tschchartaxiscategorymajorgridlineopacity_(0)
  , tschchartaxisvaluemajorgridlineopacity_(0)
  , tschchartaxiscategoryminorgridlineopacity_(0)
  , tschchartaxisvalueminorgridlineopacity_(0)
  , tschchartaxiscategoryshowaxis_(false)
  , tschchartaxisvalueshowaxis_(false)
  , tschchartaxiscategoryshowlastlabel_(false)
  , tschchartaxiscategoryshowmajorgridlines_(false)
  , tschchartaxisvalueshowmajorgridlines_(false)
  , tschchartaxiscategoryshowmajortickmarks_(false)
  , tschchartaxisvalueshowmajortickmarks_(false)
  , tschchartaxisvalueshowminimumlabel_(false)
  , tschchartaxiscategoryshowminorgridlines_(false)
  , tschchartaxisvalueshowminorgridlines_(false)
  , tschchartaxiscategoryshowminortickmarks_(false)
  , tschchartaxisvalueshowminortickmarks_(false)
  , tschchartaxiscategorytickmarklocation_(0)
  , tschchartaxisvaluetickmarklocation_(0)
  , tschchartaxiscategorytitleparagraphstyleindex_(0)
  , tschchartaxisdefaulttitleparagraphstyleindex_(0)
  , tschchartaxisvaluetitleparagraphstyleindex_(0)
  , tschchartaxiscategoryverticalspacing_(0){}
struct ChartAxisStyleArchiveDefaultTypeInternal {
  constexpr ChartAxisStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartAxisStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartAxisStyleArchiveDefaultTypeInternal _ChartAxisStyleArchive_default_instance_;
constexpr ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartaxiscategorytitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschchartaxisvaluetitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschchartaxisdefault1_0numberformat_(nullptr)
  , tschchartaxisdefaultusermax_(nullptr)
  , tschchartaxisdefaultusermin_(nullptr)
  , tschchartaxisdefault1_0dateformat_(nullptr)
  , tschchartaxisdefaultdurationformat_(nullptr)
  , tschchartaxisdefaultdateformat_(nullptr)
  , tschchartaxisdefaultnumberformat_(nullptr)
  , tschchartaxisdefault3dlabelposition_(0)
  , tschchartaxisdefaultnumberformattype_(0)
  , tschchartaxisvaluenumberofdecades_(0)
  , tschchartaxisvaluenumberofmajorgridlines_(0)
  , tschchartaxisvaluenumberofminorgridlines_(0)
  , tschchartaxisvaluescale_(0)
  , tschchartaxiscategoryplottoedges_(false)
  , tschchartaxiscategoryshowlabels_(false)
  , tschchartaxisdefaultshowlabels_(false)
  , tschchartaxisvalueshowlabels_(false)
  , tschchartaxiscategoryshowserieslabels_(false)
  , tschchartaxismultidatashowserieslabels_(false)
  , tschchartaxiscategoryshowtitle_(false)
  , tschchartaxisvalueshowtitle_(false){}
struct ChartAxisNonStyleArchiveDefaultTypeInternal {
  constexpr ChartAxisNonStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartAxisNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartAxisNonStyleArchiveDefaultTypeInternal _ChartAxisNonStyleArchive_default_instance_;
constexpr ChartSeriesStyleArchive::ChartSeriesStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartseriesdefaulterrorbarlineend_(nullptr)
  , tschchartseriesdefaulterrorbarlineendscatterx_(nullptr)
  , tschchartseriesdefaulterrorbarshadow_(nullptr)
  , tschchartseriesdefaulterrorbarstroke_(nullptr)
  , tschchartseriesdefaulterrorbarstrokescatterx_(nullptr)
  , tschchartseries3dareafill_(nullptr)
  , tschchartseries3dbarfill_(nullptr)
  , tschchartseries3dcolumnfill_(nullptr)
  , tschchartseries3dlinefill_(nullptr)
  , tschchartseries3dpiefill_(nullptr)
  , tschchartseriesareafill_(nullptr)
  , tschchartseriesbarfill_(nullptr)
  , tschchartseriescolumnfill_(nullptr)
  , tschchartseriesdefaultfill_(nullptr)
  , tschchartseriesmixedareafill_(nullptr)
  , tschchartseriesmixedcolumnfill_(nullptr)
  , tschchartseriespiefill_(nullptr)
  , tschchartseries3dareashadow_(nullptr)
  , tschchartseries3dbarshadow_(nullptr)
  , tschchartseries3dcolumnshadow_(nullptr)
  , tschchartseries3dlineshadow_(nullptr)
  , tschchartseries3dpieshadow_(nullptr)
  , tschchartseriesareashadow_(nullptr)
  , tschchartseriesbarshadow_(nullptr)
  , tschchartseriesbubbleshadow_(nullptr)
  , tschchartseriesdefaultshadow_(nullptr)
  , tschchartserieslineshadow_(nullptr)
  , tschchartseriesmixedareashadow_(nullptr)
  , tschchartseriesmixedcolumnshadow_(nullptr)
  , tschchartseriesmixedlineshadow_(nullptr)
  , tschchartseriespieshadow_(nullptr)
  , tschchartseriesscattershadow_(nullptr)
  , tschchartseriesareastroke_(nullptr)
  , tschchartseriesbarstroke_(nullptr)
  , tschchartseriesbubblestroke_(nullptr)
  , tschchartserieslinestroke_(nullptr)
  , tschchartseriesmixedareastroke_(nullptr)
  , tschchartseriesmixedcolumnstroke_(nullptr)
  , tschchartseriesmixedlinestroke_(nullptr)
  , tschchartseriespiestroke_(nullptr)
  , tschchartseriesscatterstroke_(nullptr)
  , tschchartseriesareasymbolfill_(nullptr)
  , tschchartseriesbubblesymbolfill_(nullptr)
  , tschchartserieslinesymbolfill_(nullptr)
  , tschchartseriesmixedareasymbolfill_(nullptr)
  , tschchartseriesmixedlinesymbolfill_(nullptr)
  , tschchartseriesscattersymbolfill_(nullptr)
  , tschchartseriesareasymbolstroke_(nullptr)
  , tschchartseriesbubblesymbolstroke_(nullptr)
  , tschchartserieslinesymbolstroke_(nullptr)
  , tschchartseriesmixedareasymbolstroke_(nullptr)
  , tschchartseriesmixedlinesymbolstroke_(nullptr)
  , tschchartseriesscattersymbolstroke_(nullptr)
  , tschchartseriesdefaulttrendlineshadow_(nullptr)
  , tschchartseriesdefaulttrendlinestroke_(nullptr)
  , tschchartseriesdefaultcalloutlinestrokestyle_(nullptr)
  , tschchartseriesdefaultcalloutlinestartlineend_(nullptr)
  , tschchartseriesdefaultcalloutlineendlineend_(nullptr)
  , tschchartseriesarealabelparagraphstyleindex_(0)
  , tschchartseriesbarlabelparagraphstyleindex_(0)
  , tschchartseriesdefaultlabelparagraphstyleindex_(0)
  , tschchartserieslinelabelparagraphstyleindex_(0)
  , tschchartseriesmixedlabelparagraphstyleindex_(0)
  , tschchartseriespielabelparagraphstyleindex_(0)
  , tschchartseriesdefaultopacity_(0)
  , tschchartseriesareaoutsidelabelparagraphstyleindex_(0)
  , tschchartseriesbaroutsidelabelparagraphstyleindex_(0)
  , tschchartseriesdefaultoutsidelabelparagraphstyleindex_(0)
  , tschchartseriesmixedoutsidelabelparagraphstyleindex_(0)
  , tschchartseriespieoutsidelabelparagraphstyleindex_(0)
  , tschchartseriesareasymbolfilluseseriesfill_(false)
  , tschchartserieslinesymbolfilluseseriesfill_(false)
  , tschchartseriesmixedareasymbolfilluseseriesfill_(false)
  , tschchartseriesmixedlinesymbolfilluseseriesfill_(false)
  , tschchartseriesareasymbolfilluseseriesstroke_(false)
  , tschchartseriesbubblesymbolfilluseseriesstroke_(false)
  , tschchartserieslinesymbolfilluseseriesstroke_(false)
  , tschchartseriesmixedareasymbolfilluseseriesstroke_(false)
  , tschchartseriesmixedlinesymbolfilluseseriesstroke_(false)
  , tschchartseriesscattersymbolfilluseseriesstroke_(false)
  , tschchartseriesareasymbolsize_(0)
  , tschchartserieslinesymbolsize_(0)
  , tschchartseriesmixedareasymbolsize_(0)
  , tschchartseriesmixedlinesymbolsize_(0)
  , tschchartseriesscattersymbolsize_(0)
  , tschchartseriesdefaulttrendlineequationopacity_(0)
  , tschchartseriesdefaulttrendlineequationparagraphstyleindex_(0)
  , tschchartseriesdefaulttrendlinersquaredopacity_(0)
  , tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_(0)
  , tschchartseriesareavaluelabelposition_(0)
  , tschchartseriesbarvaluelabelposition_(0)
  , tschchartseriesbubblevaluelabelposition_(0)
  , tschchartseriesdefaultvaluelabelposition_(0)
  , tschchartserieslinevaluelabelposition_(0)
  , tschchartseriesmixedareavaluelabelposition_(0)
  , tschchartseriesmixedcolumnvaluelabelposition_(0)
  , tschchartseriesmixedlinevaluelabelposition_(0)
  , tschchartseriesscattervaluelabelposition_(0)
  , tschchartseriesstackedareavaluelabelposition_(0)
  , tschchartseriesstackedbarvaluelabelposition_(0)
  , tschchartseriesdefaulterrorbarspacing_(0)
  , tschchartseriesdefaulterrorbarspacingscatterx_(0)
  , tschchartseriesdefaultvaluelabelspacing_(0)
  , tschchartseriesdonutlabelparagraphstyleindex_(0)
  , tschchartseriesdonutoutsidelabelparagraphstyleindex_(0){}
struct ChartSeriesStyleArchiveDefaultTypeInternal {
  constexpr ChartSeriesStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSeriesStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSeriesStyleArchiveDefaultTypeInternal _ChartSeriesStyleArchive_default_instance_;
constexpr ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartseriesdefaulttrendlinelabelstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschchartseriesdefaulterrorbarcustomnegativedata_(nullptr)
  , tschchartseriesdefaulterrorbarcustomnegativedatascatterx_(nullptr)
  , tschchartseriesdefaulterrorbarcustompositivedata_(nullptr)
  , tschchartseriesdefaulterrorbarcustompositivedatascatterx_(nullptr)
  , tschchartseriesdefault1_0numberformat_(nullptr)
  , tschchartseriespie1_0numberformat_(nullptr)
  , tschchartseriesstackedpercentnumberformat_(nullptr)
  , tschchartseriesdefault1_0dateformat_(nullptr)
  , tschchartseriesdefaultdurationformat_(nullptr)
  , tschchartseriesdefaultdateformat_(nullptr)
  , tschchartseriesdefaultnumberformat_(nullptr)
  , tschchartseriespienumberformat_(nullptr)
  , tschchartseriesbubbleadjustmentscale_(0)
  , tschchartseriesdefaulterrorbarfixedvalue_(0)
  , tschchartseriesdefaulterrorbarfixedvaluescatterx_(0)
  , tschchartseriesdefaulterrorbarpercentvalue_(0)
  , tschchartseriesdefaulterrorbarpercentvaluescatterx_(0)
  , tschchartseriesdefaulterrorbarsetting_(0)
  , tschchartseriesdefaulterrorbarsettingscatterx_(0)
  , tschchartseriesdefaulterrorbarstddevvalue_(0)
  , tschchartseriesdefaulterrorbarstddevvaluescatterx_(0)
  , tschchartseriesdefaulterrorbartype_(0)
  , tschchartseriesdefaulterrorbartypescatterx_(0)
  , tschchartseriespie2_3labelexplosion_(0)
  , tschchartseriesbubblelinetype_(0)
  , tschchartserieslinelinetype_(0)
  , tschchartseriesmixedlinelinetype_(0)
  , tschchartseriesscatterlinetype_(0)
  , tschchartseriesdefaultnumberformattype_(0)
  , tschchartseriespienumberformattype_(0)
  , tschchartseriesdefaultseriestype_(0)
  , tschchartseriesmixedlineshowsymbol_(false)
  , tschchartseriesscattershowsymbol_(false)
  , tschchartseriesdefaultshowtrendline_(false)
  , tschchartseriesareashowvaluelabels_(false)
  , tschchartseriesscattershowline_(false)
  , tschchartseriesbubbleshownegativedata_(false)
  , tschchartseriesbubbleshowserieslabels_(false)
  , tschchartseriespieshowserieslabels_(false)
  , tschchartseriesbarshowvaluelabels_(false)
  , tschchartseriesbubbleshowvaluelabels_(false)
  , tschchartseriesdefaultshowvaluelabels_(false)
  , tschchartserieslineshowvaluelabels_(false)
  , tschchartseriesscattershowserieslabels_(false)
  , tschchartseriesareashowsymbol_(false)
  , tschchartserieslineshowsymbol_(false)
  , tschchartseriesmixedareashowsymbol_(false)
  , tschchartseriesbubblesizedimension_(0)
  , tschchartseriesareasymboltype_(0)
  , tschchartserieslinesymboltype_(0)
  , tschchartseriesmixedareasymboltype_(0)
  , tschchartseriesmixedlinesymboltype_(0)
  , tschchartseriesscattersymboltype_(0)
  , tschchartseriesdefaulttrendlineequationoffsetx_(0)
  , tschchartseriesdefaulttrendlineequationoffsety_(0)
  , tschchartseriesdefaulttrendlineorder_(0)
  , tschchartseriesdefaulttrendlineperiod_(0)
  , tschchartseriesdefaulttrendlinersquaredoffsetx_(0)
  , tschchartseriesdefaulttrendlinersquaredoffsety_(0)
  , tschchartseriesdefaulttrendlineshowequation_(false)
  , tschchartseriesdefaulttrendlineshowlabel_(false)
  , tschchartseriesdefaulttrendlineshowr2value_(false)
  , tschchartseriesdefaulttrendlinetype_(0)
  , tschchartseriespiewedgeexplosion_(0)
  , tschchartseriesdefaultyaxisordinal_(0)
  , tschchartseriesdefaultshowerrorbar_(false)
  , tschchartseriesdefaultshowerrorbarscatterx_(false)
  , tschchartseriesbubbleshowlabelsinfront_(false)
  , tschchartseriesdefaultshowlabelsinfront_(false)
  , tschchartseriesbubblevaluelabelsaxis_(0)
  , tschchartseriesmixedshowvaluelabels_(false)
  , tschchartseriespieshowvaluelabels_(false)
  , tschchartseriesscattershowvaluelabels_(false)
  , tschchartseriesareastacklabels_(false)
  , tschchartseriesscattervaluelabelsaxis_(0)
  , tschchartseriespieenablecalloutline_(0)
  , tschchartseriespielabelexplosion_(0)
  , tschchartseriesareaenablecalloutline_(0)
  , tschchartseriesbarenablecalloutline_(0)
  , tschchartseriesbubbleenablecalloutline_(0)
  , tschchartserieslineenablecalloutline_(0)
  , tschchartseriesscatterenablecalloutline_(0)
  , tschchartseriesstackedareaenablecalloutline_(0)
  , tschchartseriesstackedbarenablecalloutline_(0)
  , tschchartseriesdefaultenablecalloutline_(0)
  , tschchartseriesbarstacklabels_(false)
  , tschchartseriesbubblestacklabels_(false)
  , tschchartseriesdefaultstacklabels_(false)
  , tschchartserieslinestacklabels_(false)
  , tschchartseriespiestacklabels_(false)
  , tschchartseriesscatterstacklabels_(false)
  , tschchartseriesstackedareastacklabels_(false)
  , tschchartseriesstackedbarstacklabels_(false){}
struct ChartSeriesNonStyleArchiveDefaultTypeInternal {
  constexpr ChartSeriesNonStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSeriesNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSeriesNonStyleArchiveDefaultTypeInternal _ChartSeriesNonStyleArchive_default_instance_;
constexpr ReferenceLineStyleArchive::ReferenceLineStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschreferencelinedefaultstroke_(nullptr)
  , tschreferencelinedefaultshadow_(nullptr)
  , tschreferencelinedefaultlabelparagraphstyleindex_(0)
  , tschreferencelinedefaultvaluelabelparagraphstyleindex_(0){}
struct ReferenceLineStyleArchiveDefaultTypeInternal {
  constexpr ReferenceLineStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceLineStyleArchiveDefaultTypeInternal() {}
  union {
    ReferenceLineStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceLineStyleArchiveDefaultTypeInternal _ReferenceLineStyleArchive_default_instance_;
constexpr ReferenceLineNonStyleArchive::ReferenceLineNonStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschreferencelinedefaultlabel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschreferencelinedefaultcustomvalue_(nullptr)
  , tschreferencelinedefaulttype_(0)
  , tschreferencelinedefaultshowlabel_(false)
  , tschreferencelinedefaultshowline_(false)
  , tschreferencelinedefaultshowvaluelabel_(false){}
struct ReferenceLineNonStyleArchiveDefaultTypeInternal {
  constexpr ReferenceLineNonStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceLineNonStyleArchiveDefaultTypeInternal() {}
  union {
    ReferenceLineNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceLineNonStyleArchiveDefaultTypeInternal _ReferenceLineNonStyleArchive_default_instance_;
constexpr ChartGenericPropertyMapArchive::ChartGenericPropertyMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartinfotitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschchartinfo3dlightingpackage_(nullptr)
  , tschchartinfo3drotation_(nullptr)
  , tschchartinfo3dscale_(nullptr)
  , tschchartinfo3dviewport_(nullptr)
  , tschchartinfobackgroundfill_(nullptr)
  , tschchartinfobackgroundstroke_(nullptr)
  , tschchartinfobordershadow_(nullptr)
  , tschchartinfoborderstroke_(nullptr)
  , tschchartinfogridbackgroundfill_(nullptr)
  , tschchartinfotitlecolor_(nullptr)
  , tschchartinfo3dbarshape_(0)
  , tschchartinfo3dchartopacity_(0)
  , tschchartinfo3dintersetdepthgap_(0)
  , tschchartinfoborderopacity_(0)
  , tschchartinfo3dbeveledges_(false)
  , tschchartinfocombinelayers_(false)
  , tschchartinfodeprecatedroundedcornerouterendonly_(false)
  , tschchartinfodonutplacetitleatcenter_(false)
  , tschchartinfocalloutlinetype_(0)
  , tschchartinfodeprecatedroundedcornerradius_(0)
  , tschchartinfodatasetnamelocation_(0)
  , tschchartinfodatasetnameparagraphstyleindex_(0)
  , tschchartinfogridbackgroundopacity_(0)
  , tschchartinfoinnerradius_(0)
  , tschchartinfointerbargap_(0)
  , tschchartinfointersetgap_(0)
  , tschchartinfomultidatacontroltype_(0)
  , tschchartinfopiestartangle_(0)
  , tschchartinforoundedcornerradius_(0)
  , tschchartinforoundedcornerouterendonly_(false)
  , tschchartinfoshowborder_(false)
  , tschchartinfoshowlegend_(false)
  , tschchartinfoshowtitle_(false)
  , tschchartinfoskiphiddendata_(false)
  , tschchartinfotitleparagraphstyleindex_(0){}
struct ChartGenericPropertyMapArchiveDefaultTypeInternal {
  constexpr ChartGenericPropertyMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    ChartGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartGenericPropertyMapArchiveDefaultTypeInternal _ChartGenericPropertyMapArchive_default_instance_;
constexpr LegendGenericPropertyMapArchive::LegendGenericPropertyMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschlegendmodelfill_(nullptr)
  , tschlegendmodelshadow_(nullptr)
  , tschlegendmodelstroke_(nullptr)
  , tschlegendmodellabelparagraphstyleindex_(0)
  , tschlegendmodelopacity_(0){}
struct LegendGenericPropertyMapArchiveDefaultTypeInternal {
  constexpr LegendGenericPropertyMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LegendGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    LegendGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LegendGenericPropertyMapArchiveDefaultTypeInternal _LegendGenericPropertyMapArchive_default_instance_;
constexpr ChartAxisGenericPropertyMapArchive::ChartAxisGenericPropertyMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartaxistitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschchartaxis1_0dateformat_(nullptr)
  , tschchartaxis1_0numberformat_(nullptr)
  , tschchartaxis3dgridlinestroke_(nullptr)
  , tschchartaxisdateformat_(nullptr)
  , tschchartaxisdurationformat_(nullptr)
  , tschchartaxismajorgridlineshadow_(nullptr)
  , tschchartaxismajorgridlinestroke_(nullptr)
  , tschchartaxisminorgridlineshadow_(nullptr)
  , tschchartaxisminorgridlinestroke_(nullptr)
  , tschchartaxisnumberformat_(nullptr)
  , tschchartaxisusermax_(nullptr)
  , tschchartaxisusermin_(nullptr)
  , tschchartaxis3dgridlineopacity_(0)
  , tschchartaxis3dlabelposition_(0)
  , tschchartaxishorizontalspacing_(0)
  , tschchartaxislabelparagraphstyleindex_(0)
  , tschchartaxislabelsorientation_(0)
  , tschchartaxismajorgridlineopacity_(0)
  , tschchartaxisminorgridlineopacity_(0)
  , tschchartaxisnumberformattype_(0)
  , tschchartaxisnumberofdecades_(0)
  , tschchartaxisnumberofmajorgridlines_(0)
  , tschchartaxisnumberofminorgridlines_(0)
  , tschchartaxisscale_(0)
  , tschchartaxisplottoedges_(false)
  , tschchartaxisshowaxis_(false)
  , tschchartaxisshowlabels_(false)
  , tschchartaxisshowlastlabel_(false)
  , tschchartaxisshowmajorgridlines_(false)
  , tschchartaxisshowmajortickmarks_(false)
  , tschchartaxisshowminimumlabel_(false)
  , tschchartaxisshowminorgridlines_(false)
  , tschchartaxisshowminortickmarks_(false)
  , tschchartaxisshowserieslabels_(false)
  , tschchartaxisshowtitle_(false)
  , tschchartaxistickmarklocation_(0)
  , tschchartaxistitleparagraphstyleindex_(0)
  , tschchartaxisverticalspacing_(0){}
struct ChartAxisGenericPropertyMapArchiveDefaultTypeInternal {
  constexpr ChartAxisGenericPropertyMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartAxisGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    ChartAxisGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartAxisGenericPropertyMapArchiveDefaultTypeInternal _ChartAxisGenericPropertyMapArchive_default_instance_;
constexpr ChartSeriesGenericPropertyMapArchive::ChartSeriesGenericPropertyMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartseriestrendlinelabelstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschchartseries1_0dateformat_(nullptr)
  , tschchartseries1_0numberformat_(nullptr)
  , tschchartseriescalloutlineendlineend_(nullptr)
  , tschchartseriescalloutlinestartlineend_(nullptr)
  , tschchartseriescalloutlinestrokestyle_(nullptr)
  , tschchartseriesdateformat_(nullptr)
  , tschchartseriesdurationformat_(nullptr)
  , tschchartserieserrorbarcustomnegativedata_(nullptr)
  , tschchartserieserrorbarcustomnegativedatascatterx_(nullptr)
  , tschchartserieserrorbarcustompositivedata_(nullptr)
  , tschchartserieserrorbarcustompositivedatascatterx_(nullptr)
  , tschchartserieserrorbarlineend_(nullptr)
  , tschchartserieserrorbarlineendscatterx_(nullptr)
  , tschchartserieserrorbarshadow_(nullptr)
  , tschchartserieserrorbarstroke_(nullptr)
  , tschchartserieserrorbarstrokescatterx_(nullptr)
  , tschchartseriesfill_(nullptr)
  , tschchartseriesnumberformat_(nullptr)
  , tschchartseriespercentnumberformat_(nullptr)
  , tschchartseriesshadow_(nullptr)
  , tschchartseriesstroke_(nullptr)
  , tschchartseriessymbolfill_(nullptr)
  , tschchartseriessymbolstroke_(nullptr)
  , tschchartseriestrendlineshadow_(nullptr)
  , tschchartseriestrendlinestroke_(nullptr)
  , tschchartseries2_3labelexplosion_(0)
  , tschchartseriesadjustmentscale_(0)
  , tschchartseriesenablecalloutline_(0)
  , tschchartserieserrorbarfixedvalue_(0)
  , tschchartserieserrorbarfixedvaluescatterx_(0)
  , tschchartserieserrorbarpercentvalue_(0)
  , tschchartserieserrorbarpercentvaluescatterx_(0)
  , tschchartserieserrorbarsetting_(0)
  , tschchartserieserrorbarsettingscatterx_(0)
  , tschchartserieserrorbarspacing_(0)
  , tschchartserieserrorbarspacingscatterx_(0)
  , tschchartserieserrorbarstddevvalue_(0)
  , tschchartserieserrorbarstddevvaluescatterx_(0)
  , tschchartserieserrorbartype_(0)
  , tschchartserieserrorbartypescatterx_(0)
  , tschchartserieslabelexplosion_(0)
  , tschchartserieslabelparagraphstyleindex_(0)
  , tschchartserieslinetype_(0)
  , tschchartseriesnumberformattype_(0)
  , tschchartseriesopacity_(0)
  , tschchartseriesoutsidelabelparagraphstyleindex_(0)
  , tschchartseriesseriestype_(0)
  , tschchartseriesshowerrorbar_(false)
  , tschchartseriesshowerrorbarscatterx_(false)
  , tschchartseriesshowlabelsinfront_(false)
  , tschchartseriesshowline_(false)
  , tschchartseriesshownegativedata_(false)
  , tschchartseriesshowserieslabels_(false)
  , tschchartseriesshowsymbol_(false)
  , tschchartseriesshowtrendline_(false)
  , tschchartseriessizedimension_(0)
  , tschchartseriesshowvaluelabels_(false)
  , tschchartseriesstacklabels_(false)
  , tschchartseriessymbolfilluseseriesfill_(false)
  , tschchartseriessymbolfilluseseriesstroke_(false)
  , tschchartseriessymbolsize_(0)
  , tschchartseriessymboltype_(0)
  , tschchartseriestrendlineequationoffsetx_(0)
  , tschchartseriestrendlineequationoffsety_(0)
  , tschchartseriestrendlineorder_(0)
  , tschchartseriestrendlineperiod_(0)
  , tschchartseriestrendlinersquaredoffsetx_(0)
  , tschchartseriestrendlinersquaredoffsety_(0)
  , tschchartseriestrendlineshowequation_(false)
  , tschchartseriestrendlineshowlabel_(false)
  , tschchartseriestrendlineshowr2value_(false)
  , tschchartseriestrendlinetype_(0)
  , tschchartseriestrendlineequationopacity_(0)
  , tschchartseriestrendlineequationparagraphstyleindex_(0)
  , tschchartseriestrendlinersquaredopacity_(0)
  , tschchartseriestrendlinersquaredparagraphstyleindex_(0)
  , tschchartseriesvaluelabelposition_(0)
  , tschchartseriesvaluelabelspacing_(0)
  , tschchartseriesvaluelabelsaxis_(0)
  , tschchartserieswedgeexplosion_(0)
  , tschchartseriesyaxisordinal_(0){}
struct ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal {
  constexpr ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal _ChartSeriesGenericPropertyMapArchive_default_instance_;
constexpr ReferenceLineGenericPropertyMapArchive::ReferenceLineGenericPropertyMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschreferencelinelabel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschreferencelinecustomvalue_(nullptr)
  , tschreferencelineshadow_(nullptr)
  , tschreferencelinestroke_(nullptr)
  , tschreferencelinelabelparagraphstyleindex_(0)
  , tschreferencelineshowlabel_(false)
  , tschreferencelineshowline_(false)
  , tschreferencelineshowvaluelabel_(false)
  , tschreferencelinetype_(0)
  , tschreferencelinevaluelabelparagraphstyleindex_(0){}
struct ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal {
  constexpr ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    ReferenceLineGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal _ReferenceLineGenericPropertyMapArchive_default_instance_;
}  // namespace Generated
}  // namespace TSCH
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSCHArchives_2eGEN_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TSCHArchives_2eGEN_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSCHArchives_2eGEN_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSCHArchives_2eGEN_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefault3dchartopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfoarea3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfobar3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfocolumn3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefault3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfoline3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfopie3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultbackgroundstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultborderopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultbordershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultborderstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultcombinelayers_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultdatasetnameparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultgridbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultgridbackgroundopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultinterbargap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultintersetgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultroundedcornerouterendonly_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultroundedcornerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaultshowborder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaulttitlecolor_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, tschchartinfodefaulttitleparagraphstyleindex_),
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  13,
  8,
  9,
  20,
  19,
  10,
  14,
  15,
  16,
  21,
  18,
  22,
  11,
  17,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefault3dbarshape_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefault3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefault3dintersetdepthgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefault3drotation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfoarea3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfobar3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfocolumn3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefault3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfoline3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfopie3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefault3dviewport_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfoareacalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfobarcalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfobubblecalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultcalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfolinecalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfopiecalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfoscattercalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfostackedareacalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfostackedbarcalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultdeprecatedroundedcornerouterendonly_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultdeprecatedroundedcornerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultdatasetnamelocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultdonutplacetitleatcenter_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultinnerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultmultidatacontroltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultpiestartangle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultshowlegend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaultskiphiddendata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, tschchartinfodefaulttitle_),
  9,
  17,
  10,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  22,
  23,
  24,
  29,
  25,
  21,
  26,
  27,
  28,
  18,
  30,
  14,
  19,
  16,
  15,
  11,
  20,
  12,
  13,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, tschlegendmodeldefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, tschlegendmodeldefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, tschlegendmodeldefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, tschlegendmodeldefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, tschlegendmodeldefaultstroke_),
  0,
  3,
  4,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategory3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalue3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategory3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalue3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryhorizontalspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategorylabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvaluelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategorylabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisdefaultlabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvaluelabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategorymajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvaluemajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategorymajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvaluemajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategorymajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvaluemajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalueminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalueminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalueminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalueshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryshowlastlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalueshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalueshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalueshowminimumlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalueshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvalueshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategorytickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvaluetickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategorytitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisdefaulttitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxisvaluetitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, tschchartaxiscategoryverticalspacing_),
  10,
  11,
  0,
  1,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  2,
  3,
  4,
  5,
  21,
  22,
  6,
  7,
  8,
  9,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefault1_0dateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefault1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefault3dlabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefaultdateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefaultdurationformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisvaluenumberofdecades_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisvaluenumberofmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisvaluenumberofminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxiscategoryplottoedges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisvaluescale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxiscategoryshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefaultshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisvalueshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxiscategoryshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxismultidatashowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxiscategoryshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisvalueshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxiscategorytitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisvaluetitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefaultusermax_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, tschchartaxisdefaultusermin_),
  5,
  2,
  9,
  7,
  6,
  8,
  10,
  11,
  12,
  13,
  15,
  14,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultcalloutlineendlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultcalloutlinestartlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultcalloutlinestrokestyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarlineendscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarspacingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarstrokescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dlinefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dpiefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriescolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriespiefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesarealabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbarlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdonutlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartserieslinelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriespielabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareaoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbaroutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdonutoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriespieoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseries3dpieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbubbleshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartserieslineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriespieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesscattershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbubblestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartserieslinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedcolumnstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriespiestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesscatterstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbubblesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartserieslinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesscattersymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartserieslinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbubblesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartserieslinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesscattersymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartserieslinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesscattersymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbubblesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartserieslinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesscattersymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineequationopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineequationparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinersquaredopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbarvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesbubblevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartserieslinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedcolumnvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesmixedlinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesscattervaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesstackedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesstackedbarvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, tschchartseriesdefaultvaluelabelspacing_),
  57,
  56,
  55,
  0,
  1,
  2,
  100,
  101,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  58,
  59,
  60,
  103,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  104,
  68,
  69,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  102,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefault1_0dateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefault1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespie1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespie2_3labelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubbleadjustmentscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultdateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultdurationformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesareaenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbarenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubbleenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartserieslineenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespieenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesscatterenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesstackedareaenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesstackedbarenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustomnegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustomnegativedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustompositivedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustompositivedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarfixedvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarfixedvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarpercentvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarpercentvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarsetting_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarsettingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarstddevvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarstddevvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbartype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbartypescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespielabelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubblelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartserieslinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesmixedlinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesscatterlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespienumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespienumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesstackedpercentnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultseriestype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultshowerrorbar_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultshowerrorbarscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubbleshowlabelsinfront_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultshowlabelsinfront_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesscattershowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubbleshownegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubbleshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespieshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesscattershowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartserieslineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesmixedareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesmixedlineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesscattershowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultshowtrendline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesareashowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbarshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubbleshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartserieslineshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesmixedshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespieshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesscattershowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubblesizedimension_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesareastacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbarstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubblestacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartserieslinestacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespiestacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesscatterstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesstackedareastacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesstackedbarstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartserieslinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesmixedareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesmixedlinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesscattersymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineequationoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineequationoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinelabelstring_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineorder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineperiod_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinersquaredoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinersquaredoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowequation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowr2value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesbubblevaluelabelsaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesscattervaluelabelsaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriespiewedgeexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, tschchartseriesdefaultyaxisordinal_),
  8,
  5,
  6,
  24,
  13,
  10,
  9,
  78,
  79,
  80,
  85,
  81,
  76,
  82,
  83,
  84,
  1,
  2,
  3,
  4,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  77,
  25,
  26,
  27,
  28,
  11,
  12,
  29,
  30,
  7,
  31,
  66,
  67,
  68,
  69,
  36,
  37,
  38,
  39,
  44,
  45,
  46,
  47,
  32,
  33,
  34,
  35,
  40,
  41,
  42,
  43,
  71,
  72,
  73,
  48,
  74,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  0,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  70,
  75,
  64,
  65,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, tschreferencelinedefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, tschreferencelinedefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, tschreferencelinedefaultstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, tschreferencelinedefaultvaluelabelparagraphstyleindex_),
  2,
  1,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, tschreferencelinedefaultcustomvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, tschreferencelinedefaultlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, tschreferencelinedefaultshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, tschreferencelinedefaultshowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, tschreferencelinedefaultshowvaluelabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, tschreferencelinedefaulttype_),
  1,
  0,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfo3dbarshape_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfo3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfo3dchartopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfo3dintersetdepthgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfo3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfo3drotation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfo3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfo3dviewport_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfobackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfobackgroundstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfoborderopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfobordershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfoborderstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfocalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfocombinelayers_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfodeprecatedroundedcornerouterendonly_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfodeprecatedroundedcornerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfodatasetnamelocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfodatasetnameparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfodonutplacetitleatcenter_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfogridbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfogridbackgroundopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfoinnerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfointerbargap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfointersetgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfomultidatacontroltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfopiestartangle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinforoundedcornerouterendonly_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinforoundedcornerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfoshowborder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfoshowlegend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfoshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfoskiphiddendata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfotitlecolor_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfotitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, tschchartinfotitleparagraphstyleindex_),
  11,
  15,
  12,
  13,
  1,
  2,
  3,
  4,
  5,
  6,
  14,
  7,
  8,
  19,
  16,
  17,
  20,
  21,
  22,
  18,
  9,
  23,
  24,
  25,
  26,
  27,
  28,
  30,
  29,
  31,
  32,
  33,
  34,
  10,
  0,
  35,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, tschlegendmodelfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, tschlegendmodellabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, tschlegendmodelopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, tschlegendmodelshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, tschlegendmodelstroke_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxis1_0dateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxis1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxis3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxis3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxis3dlabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisdateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisdurationformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxishorizontalspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxislabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxislabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxismajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxismajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxismajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisnumberofdecades_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisnumberofmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisnumberofminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisplottoedges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowlastlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowminimumlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxistickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxistitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxistitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisusermax_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisusermin_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, tschchartaxisverticalspacing_),
  1,
  2,
  13,
  3,
  14,
  4,
  5,
  15,
  16,
  17,
  18,
  6,
  7,
  19,
  8,
  9,
  10,
  20,
  21,
  22,
  23,
  25,
  24,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  0,
  37,
  11,
  12,
  38,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseries1_0dateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseries1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseries2_3labelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesadjustmentscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriescalloutlineendlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriescalloutlinestartlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriescalloutlinestrokestyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesdateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesdurationformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarcustomnegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarcustomnegativedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarcustompositivedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarcustompositivedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarfixedvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarfixedvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarlineendscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarpercentvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarpercentvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarsetting_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarsettingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarspacingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarstddevvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarstddevvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarstrokescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbartype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbartypescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieslabelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieslabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieslinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriespercentnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesseriestype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshowerrorbar_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshowerrorbarscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshowlabelsinfront_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshownegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshowtrendline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriessizedimension_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriessymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineequationoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineequationoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinelabelstring_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineorder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineperiod_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinersquaredoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinersquaredoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineshowequation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineshowr2value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineequationopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineequationparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinersquaredopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinersquaredparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesvaluelabelspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesvaluelabelsaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartserieswedgeexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, tschchartseriesyaxisordinal_),
  1,
  2,
  26,
  27,
  3,
  4,
  5,
  6,
  7,
  28,
  8,
  9,
  10,
  11,
  29,
  30,
  12,
  13,
  31,
  32,
  33,
  34,
  14,
  35,
  36,
  37,
  38,
  15,
  16,
  39,
  40,
  17,
  41,
  42,
  43,
  18,
  44,
  45,
  46,
  19,
  47,
  20,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  57,
  56,
  58,
  21,
  22,
  59,
  60,
  61,
  23,
  62,
  63,
  64,
  0,
  65,
  66,
  67,
  68,
  24,
  69,
  70,
  71,
  25,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelinecustomvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelinelabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelinelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelineshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelineshowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelineshowvaluelabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, tschreferencelinevaluelabelparagraphstyleindex_),
  1,
  0,
  4,
  2,
  5,
  6,
  7,
  3,
  8,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::TSCH::Generated::ChartStyleArchive)},
  { 51, 87, sizeof(::TSCH::Generated::ChartNonStyleArchive)},
  { 118, 128, sizeof(::TSCH::Generated::LegendStyleArchive)},
  { 133, -1, sizeof(::TSCH::Generated::LegendNonStyleArchive)},
  { 138, 184, sizeof(::TSCH::Generated::ChartAxisStyleArchive)},
  { 225, 253, sizeof(::TSCH::Generated::ChartAxisNonStyleArchive)},
  { 276, 386, sizeof(::TSCH::Generated::ChartSeriesStyleArchive)},
  { 491, 590, sizeof(::TSCH::Generated::ChartSeriesNonStyleArchive)},
  { 684, 693, sizeof(::TSCH::Generated::ReferenceLineStyleArchive)},
  { 697, 708, sizeof(::TSCH::Generated::ReferenceLineNonStyleArchive)},
  { 714, 755, sizeof(::TSCH::Generated::ChartGenericPropertyMapArchive)},
  { 791, 801, sizeof(::TSCH::Generated::LegendGenericPropertyMapArchive)},
  { 806, 850, sizeof(::TSCH::Generated::ChartAxisGenericPropertyMapArchive)},
  { 889, 976, sizeof(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive)},
  { 1058, 1073, sizeof(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ChartStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ChartNonStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_LegendStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_LegendNonStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ChartAxisStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ChartAxisNonStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ChartSeriesStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ChartSeriesNonStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ReferenceLineStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ReferenceLineNonStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ChartGenericPropertyMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_LegendGenericPropertyMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ChartAxisGenericPropertyMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ChartSeriesGenericPropertyMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::Generated::_ReferenceLineGenericPropertyMapArchive_default_instance_),
};

const char descriptor_table_protodef_TSCHArchives_2eGEN_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026TSCHArchives.GEN.proto\022\016TSCH.Generated"
  "\032\021TSPMessages.proto\032\021TSKArchives.proto\032\021"
  "TSDArchives.proto\032\021TSSArchives.proto\032\031TS"
  "CHArchives.Common.proto\032\024TSCH3DArchives."
  "proto\"\305\013\n\021ChartStyleArchive\022*\n\"tschchart"
  "infodefault3dchartopacity\030\001 \001(\002\022O\n\"tschc"
  "hartinfoarea3dlightingpackage\030\002 \001(\0132#.TS"
  "CH.Chart3DLightingPackageArchive\022N\n!tsch"
  "chartinfobar3dlightingpackage\030\003 \001(\0132#.TS"
  "CH.Chart3DLightingPackageArchive\022Q\n$tsch"
  "chartinfocolumn3dlightingpackage\030\004 \001(\0132#"
  ".TSCH.Chart3DLightingPackageArchive\022R\n%t"
  "schchartinfodefault3dlightingpackage\030\005 \001"
  "(\0132#.TSCH.Chart3DLightingPackageArchive\022"
  "O\n\"tschchartinfoline3dlightingpackage\030\006 "
  "\001(\0132#.TSCH.Chart3DLightingPackageArchive"
  "\022N\n!tschchartinfopie3dlightingpackage\030\007 "
  "\001(\0132#.TSCH.Chart3DLightingPackageArchive"
  "\022<\n\"tschchartinfodefaultbackgroundfill\030\010"
  " \001(\0132\020.TSD.FillArchive\022@\n$tschchartinfod"
  "efaultbackgroundstroke\030\t \001(\0132\022.TSD.Strok"
  "eArchive\022)\n!tschchartinfodefaultborderop"
  "acity\030\n \001(\002\022<\n tschchartinfodefaultborde"
  "rshadow\030\013 \001(\0132\022.TSD.ShadowArchive\022<\n tsc"
  "hchartinfodefaultborderstroke\030\014 \001(\0132\022.TS"
  "D.StrokeArchive\022)\n!tschchartinfodefaultc"
  "ombinelayers\030\r \001(\010\022:\n2tschchartinfodefau"
  "ltdatasetnameparagraphstyleindex\030\025 \001(\005\022@"
  "\n&tschchartinfodefaultgridbackgroundfill"
  "\030\016 \001(\0132\020.TSD.FillArchive\0221\n)tschchartinf"
  "odefaultgridbackgroundopacity\030\017 \001(\002\022\'\n\037t"
  "schchartinfodefaultinterbargap\030\020 \001(\002\022\'\n\037"
  "tschchartinfodefaultintersetgap\030\021 \001(\002\0225\n"
  "-tschchartinfodefaultroundedcorneroutere"
  "ndonly\030{ \001(\010\022/\n\'tschchartinfodefaultroun"
  "dedcornerradius\030z \001(\002\022&\n\036tschchartinfode"
  "faultshowborder\030\022 \001(\010\0222\n\036tschchartinfode"
  "faulttitlecolor\030\023 \001(\0132\n.TSP.Color\0224\n,tsc"
  "hchartinfodefaulttitleparagraphstyleinde"
  "x\030\024 \001(\0052L\n\007current\022\027.TSCH.ChartStyleArch"
  "ive\030\220N \001(\0132!.TSCH.Generated.ChartStyleAr"
  "chive\"\376\014\n\024ChartNonStyleArchive\022&\n\036tschch"
  "artinfodefault3dbarshape\030\001 \001(\005\022(\n tschch"
  "artinfodefault3dbeveledges\030\002 \001(\010\022.\n&tsch"
  "chartinfodefault3dintersetdepthgap\030\003 \001(\002"
  "\022B\n\036tschchartinfodefault3drotation\030\004 \001(\013"
  "2\032.TSCH.Chart3DVectorArchive\022<\n\030tschchar"
  "tinfoarea3dscale\030\005 \001(\0132\032.TSCH.Chart3DVec"
  "torArchive\022;\n\027tschchartinfobar3dscale\030\006 "
  "\001(\0132\032.TSCH.Chart3DVectorArchive\022>\n\032tschc"
  "hartinfocolumn3dscale\030\007 \001(\0132\032.TSCH.Chart"
  "3DVectorArchive\022\?\n\033tschchartinfodefault3"
  "dscale\030\010 \001(\0132\032.TSCH.Chart3DVectorArchive"
  "\022<\n\030tschchartinfoline3dscale\030\t \001(\0132\032.TSC"
  "H.Chart3DVectorArchive\022;\n\027tschchartinfop"
  "ie3dscale\030\n \001(\0132\032.TSCH.Chart3DVectorArch"
  "ive\022B\n\036tschchartinfodefault3dviewport\030\013 "
  "\001(\0132\032.TSCH.Chart3DVectorArchive\022(\n tschc"
  "hartinfoareacalloutlinetype\030p \001(\005\022\'\n\037tsc"
  "hchartinfobarcalloutlinetype\030q \001(\005\022*\n\"ts"
  "chchartinfobubblecalloutlinetype\030r \001(\005\022+"
  "\n#tschchartinfodefaultcalloutlinetype\030w "
  "\001(\005\022(\n tschchartinfolinecalloutlinetype\030"
  "s \001(\005\022\'\n\037tschchartinfopiecalloutlinetype"
  "\030o \001(\005\022+\n#tschchartinfoscattercalloutlin"
  "etype\030t \001(\005\022/\n\'tschchartinfostackedareac"
  "alloutlinetype\030u \001(\005\022.\n&tschchartinfosta"
  "ckedbarcalloutlinetype\030v \001(\005\022\?\n7tschchar"
  "tinfodefaultdeprecatedroundedcornerouter"
  "endonly\030y \001(\010\0229\n1tschchartinfodefaultdep"
  "recatedroundedcornerradius\030x \001(\002\022/\n\'tsch"
  "chartinfodefaultdatasetnamelocation\030\030 \001("
  "\005\0223\n+tschchartinfodefaultdonutplacetitle"
  "atcenter\030\034 \001(\010\022\'\n\037tschchartinfodefaultin"
  "nerradius\030\033 \001(\002\0220\n(tschchartinfodefaultm"
  "ultidatacontroltype\030\031 \001(\005\022)\n!tschchartin"
  "fodefaultpiestartangle\030\023 \001(\002\022&\n\036tschchar"
  "tinfodefaultshowlegend\030\024 \001(\010\022%\n\035tschchar"
  "tinfodefaultshowtitle\030\025 \001(\010\022*\n\"tschchart"
  "infodefaultskiphiddendata\030\026 \001(\010\022!\n\031tschc"
  "hartinfodefaulttitle\030\027 \001(\t2R\n\007current\022\032."
  "TSCH.ChartNonStyleArchive\030\220N \001(\0132$.TSCH."
  "Generated.ChartNonStyleArchive\"\355\002\n\022Legen"
  "dStyleArchive\0224\n\032tschlegendmodeldefaultf"
  "ill\030\001 \001(\0132\020.TSD.FillArchive\0226\n.tschlegen"
  "dmodeldefaultlabelparagraphstyleindex\030\002 "
  "\001(\005\022%\n\035tschlegendmodeldefaultopacity\030\003 \001"
  "(\002\0228\n\034tschlegendmodeldefaultshadow\030\004 \001(\013"
  "2\022.TSD.ShadowArchive\0228\n\034tschlegendmodeld"
  "efaultstroke\030\005 \001(\0132\022.TSD.StrokeArchive2N"
  "\n\007current\022\030.TSCH.LegendStyleArchive\030\220N \001"
  "(\0132\".TSCH.Generated.LegendStyleArchive\"m"
  "\n\025LegendNonStyleArchive2T\n\007current\022\033.TSC"
  "H.LegendNonStyleArchive\030\220N \001(\0132%.TSCH.Ge"
  "nerated.LegendNonStyleArchive\"\335\021\n\025ChartA"
  "xisStyleArchive\022.\n&tschchartaxiscategory"
  "3dgridlineopacity\030\001 \001(\002\022+\n#tschchartaxis"
  "value3dgridlineopacity\030\002 \001(\002\022A\n%tschchar"
  "taxiscategory3dgridlinestroke\030\003 \001(\0132\022.TS"
  "D.StrokeArchive\022>\n\"tschchartaxisvalue3dg"
  "ridlinestroke\030\004 \001(\0132\022.TSD.StrokeArchive\022"
  ".\n&tschchartaxiscategoryhorizontalspacin"
  "g\030\005 \001(\005\0225\n-tschchartaxiscategorylabelpar"
  "agraphstyleindex\030\006 \001(\005\0224\n,tschchartaxisd"
  "efaultlabelparagraphstyleindex\030\007 \001(\005\0222\n*"
  "tschchartaxisvaluelabelparagraphstyleind"
  "ex\030\010 \001(\005\022.\n&tschchartaxiscategorylabelso"
  "rientation\030\t \001(\002\022-\n%tschchartaxisdefault"
  "labelsorientation\030\n \001(\002\022+\n#tschchartaxis"
  "valuelabelsorientation\030\013 \001(\002\0221\n)tschchar"
  "taxiscategorymajorgridlineopacity\030\014 \001(\002\022"
  ".\n&tschchartaxisvaluemajorgridlineopacit"
  "y\030\r \001(\002\022D\n(tschchartaxiscategorymajorgri"
  "dlineshadow\030\016 \001(\0132\022.TSD.ShadowArchive\022A\n"
  "%tschchartaxisvaluemajorgridlineshadow\030\017"
  " \001(\0132\022.TSD.ShadowArchive\022D\n(tschchartaxi"
  "scategorymajorgridlinestroke\030\020 \001(\0132\022.TSD"
  ".StrokeArchive\022A\n%tschchartaxisvaluemajo"
  "rgridlinestroke\030\021 \001(\0132\022.TSD.StrokeArchiv"
  "e\0221\n)tschchartaxiscategoryminorgridlineo"
  "pacity\030\022 \001(\002\022.\n&tschchartaxisvalueminorg"
  "ridlineopacity\030\023 \001(\002\022D\n(tschchartaxiscat"
  "egoryminorgridlineshadow\030\024 \001(\0132\022.TSD.Sha"
  "dowArchive\022A\n%tschchartaxisvalueminorgri"
  "dlineshadow\030\025 \001(\0132\022.TSD.ShadowArchive\022D\n"
  "(tschchartaxiscategoryminorgridlinestrok"
  "e\030\026 \001(\0132\022.TSD.StrokeArchive\022A\n%tschchart"
  "axisvalueminorgridlinestroke\030\027 \001(\0132\022.TSD"
  ".StrokeArchive\022%\n\035tschchartaxiscategorys"
  "howaxis\030\030 \001(\010\022\"\n\032tschchartaxisvalueshowa"
  "xis\030\031 \001(\010\022*\n\"tschchartaxiscategoryshowla"
  "stlabel\030\032 \001(\010\022/\n\'tschchartaxiscategorysh"
  "owmajorgridlines\030\033 \001(\010\022,\n$tschchartaxisv"
  "alueshowmajorgridlines\030\034 \001(\010\022/\n\'tschchar"
  "taxiscategoryshowmajortickmarks\030\035 \001(\010\022,\n"
  "$tschchartaxisvalueshowmajortickmarks\030\036 "
  "\001(\010\022*\n\"tschchartaxisvalueshowminimumlabe"
  "l\030\037 \001(\010\022/\n\'tschchartaxiscategoryshowmino"
  "rgridlines\030  \001(\010\022,\n$tschchartaxisvaluesh"
  "owminorgridlines\030! \001(\010\022/\n\'tschchartaxisc"
  "ategoryshowminortickmarks\030\" \001(\010\022,\n$tschc"
  "hartaxisvalueshowminortickmarks\030# \001(\010\022-\n"
  "%tschchartaxiscategorytickmarklocation\030$"
  " \001(\005\022*\n\"tschchartaxisvaluetickmarklocati"
  "on\030% \001(\005\0225\n-tschchartaxiscategorytitlepa"
  "ragraphstyleindex\030& \001(\005\0224\n,tschchartaxis"
  "defaulttitleparagraphstyleindex\030\' \001(\005\0222\n"
  "*tschchartaxisvaluetitleparagraphstylein"
  "dex\030( \001(\005\022,\n$tschchartaxiscategoryvertic"
  "alspacing\030) \001(\0052T\n\007current\022\033.TSCH.ChartA"
  "xisStyleArchive\030\220N \001(\0132%.TSCH.Generated."
  "ChartAxisStyleArchive\"\373\t\n\030ChartAxisNonSt"
  "yleArchive\022C\n!tschchartaxisdefault1_0dat"
  "eformat\030\024 \001(\0132\030.TSK.FormatStructArchive\022"
  "E\n#tschchartaxisdefault1_0numberformat\030\002"
  " \001(\0132\030.TSK.FormatStructArchive\022+\n#tschch"
  "artaxisdefault3dlabelposition\030\001 \001(\005\022@\n\036t"
  "schchartaxisdefaultdateformat\030\026 \001(\0132\030.TS"
  "K.FormatStructArchive\022D\n\"tschchartaxisde"
  "faultdurationformat\030\025 \001(\0132\030.TSK.FormatSt"
  "ructArchive\022B\n tschchartaxisdefaultnumbe"
  "rformat\030* \001(\0132\030.TSK.FormatStructArchive\022"
  ",\n$tschchartaxisdefaultnumberformattype\030"
  "\003 \001(\005\022)\n!tschchartaxisvaluenumberofdecad"
  "es\030\004 \001(\005\0220\n(tschchartaxisvaluenumberofma"
  "jorgridlines\030\005 \001(\005\0220\n(tschchartaxisvalue"
  "numberofminorgridlines\030\006 \001(\005\022(\n tschchar"
  "taxiscategoryplottoedges\030\007 \001(\010\022\037\n\027tschch"
  "artaxisvaluescale\030\010 \001(\005\022\'\n\037tschchartaxis"
  "categoryshowlabels\030\t \001(\010\022&\n\036tschchartaxi"
  "sdefaultshowlabels\030\n \001(\010\022$\n\034tschchartaxi"
  "svalueshowlabels\030\013 \001(\010\022-\n%tschchartaxisc"
  "ategoryshowserieslabels\030\014 \001(\010\022.\n&tschcha"
  "rtaxismultidatashowserieslabels\030\023 \001(\010\022&\n"
  "\036tschchartaxiscategoryshowtitle\030\r \001(\010\022#\n"
  "\033tschchartaxisvalueshowtitle\030\016 \001(\010\022\"\n\032ts"
  "chchartaxiscategorytitle\030\017 \001(\t\022\037\n\027tschch"
  "artaxisvaluetitle\030\020 \001(\t\022F\n\033tschchartaxis"
  "defaultusermax\030\021 \001(\0132!.TSCH.ChartsNSNumb"
  "erDoubleArchive\022F\n\033tschchartaxisdefaultu"
  "sermin\030\022 \001(\0132!.TSCH.ChartsNSNumberDouble"
  "Archive2Z\n\007current\022\036.TSCH.ChartAxisNonSt"
  "yleArchive\030\220N \001(\0132(.TSCH.Generated.Chart"
  "AxisNonStyleArchive\"\266/\n\027ChartSeriesStyle"
  "Archive\022I\n+tschchartseriesdefaultcallout"
  "lineendlineend\030\202\001 \001(\0132\023.TSD.LineEndArchi"
  "ve\022K\n-tschchartseriesdefaultcalloutlines"
  "tartlineend\030\201\001 \001(\0132\023.TSD.LineEndArchive\022"
  "I\n,tschchartseriesdefaultcalloutlinestro"
  "kestyle\030\200\001 \001(\0132\022.TSD.StrokeArchive\022B\n%ts"
  "chchartseriesdefaulterrorbarlineend\030\001 \001("
  "\0132\023.TSD.LineEndArchive\022J\n-tschchartserie"
  "sdefaulterrorbarlineendscatterx\030\002 \001(\0132\023."
  "TSD.LineEndArchive\022@\n$tschchartseriesdef"
  "aulterrorbarshadow\030\003 \001(\0132\022.TSD.ShadowArc"
  "hive\022-\n%tschchartseriesdefaulterrorbarsp"
  "acing\030b \001(\005\0225\n-tschchartseriesdefaulterr"
  "orbarspacingscatterx\030c \001(\005\022@\n$tschcharts"
  "eriesdefaulterrorbarstroke\030\004 \001(\0132\022.TSD.S"
  "trokeArchive\022H\n,tschchartseriesdefaulter"
  "rorbarstrokescatterx\030\005 \001(\0132\022.TSD.StrokeA"
  "rchive\0223\n\031tschchartseries3dareafill\030\006 \001("
  "\0132\020.TSD.FillArchive\0222\n\030tschchartseries3d"
  "barfill\030\007 \001(\0132\020.TSD.FillArchive\0225\n\033tschc"
  "hartseries3dcolumnfill\030\010 \001(\0132\020.TSD.FillA"
  "rchive\0223\n\031tschchartseries3dlinefill\030\t \001("
  "\0132\020.TSD.FillArchive\0222\n\030tschchartseries3d"
  "piefill\030\n \001(\0132\020.TSD.FillArchive\0221\n\027tschc"
  "hartseriesareafill\030\013 \001(\0132\020.TSD.FillArchi"
  "ve\0220\n\026tschchartseriesbarfill\030\014 \001(\0132\020.TSD"
  ".FillArchive\0223\n\031tschchartseriescolumnfil"
  "l\030\r \001(\0132\020.TSD.FillArchive\0224\n\032tschchartse"
  "riesdefaultfill\030\016 \001(\0132\020.TSD.FillArchive\022"
  "6\n\034tschchartseriesmixedareafill\030\017 \001(\0132\020."
  "TSD.FillArchive\0228\n\036tschchartseriesmixedc"
  "olumnfill\030\020 \001(\0132\020.TSD.FillArchive\0220\n\026tsc"
  "hchartseriespiefill\030\021 \001(\0132\020.TSD.FillArch"
  "ive\0223\n+tschchartseriesarealabelparagraph"
  "styleindex\030\022 \001(\005\0222\n*tschchartseriesbarla"
  "belparagraphstyleindex\030\023 \001(\005\0226\n.tschchar"
  "tseriesdefaultlabelparagraphstyleindex\030\024"
  " \001(\005\0225\n,tschchartseriesdonutlabelparagra"
  "phstyleindex\030\230\001 \001(\005\0223\n+tschchartseriesli"
  "nelabelparagraphstyleindex\030\025 \001(\005\0224\n,tsch"
  "chartseriesmixedlabelparagraphstyleindex"
  "\030\026 \001(\005\0222\n*tschchartseriespielabelparagra"
  "phstyleindex\030\027 \001(\005\022%\n\035tschchartseriesdef"
  "aultopacity\030\030 \001(\002\022:\n2tschchartseriesarea"
  "outsidelabelparagraphstyleindex\030\031 \001(\005\0229\n"
  "1tschchartseriesbaroutsidelabelparagraph"
  "styleindex\030\032 \001(\005\022=\n5tschchartseriesdefau"
  "ltoutsidelabelparagraphstyleindex\030\033 \001(\005\022"
  "<\n3tschchartseriesdonutoutsidelabelparag"
  "raphstyleindex\030\231\001 \001(\005\022;\n3tschchartseries"
  "mixedoutsidelabelparagraphstyleindex\030\034 \001"
  "(\005\0229\n1tschchartseriespieoutsidelabelpara"
  "graphstyleindex\030\035 \001(\005\0227\n\033tschchartseries"
  "3dareashadow\030\036 \001(\0132\022.TSD.ShadowArchive\0226"
  "\n\032tschchartseries3dbarshadow\030\037 \001(\0132\022.TSD"
  ".ShadowArchive\0229\n\035tschchartseries3dcolum"
  "nshadow\030  \001(\0132\022.TSD.ShadowArchive\0227\n\033tsc"
  "hchartseries3dlineshadow\030! \001(\0132\022.TSD.Sha"
  "dowArchive\0226\n\032tschchartseries3dpieshadow"
  "\030\" \001(\0132\022.TSD.ShadowArchive\0225\n\031tschcharts"
  "eriesareashadow\030# \001(\0132\022.TSD.ShadowArchiv"
  "e\0224\n\030tschchartseriesbarshadow\030$ \001(\0132\022.TS"
  "D.ShadowArchive\0227\n\033tschchartseriesbubble"
  "shadow\030% \001(\0132\022.TSD.ShadowArchive\0228\n\034tsch"
  "chartseriesdefaultshadow\030& \001(\0132\022.TSD.Sha"
  "dowArchive\0225\n\031tschchartserieslineshadow\030"
  "\' \001(\0132\022.TSD.ShadowArchive\022:\n\036tschchartse"
  "riesmixedareashadow\030( \001(\0132\022.TSD.ShadowAr"
  "chive\022<\n tschchartseriesmixedcolumnshado"
  "w\030) \001(\0132\022.TSD.ShadowArchive\022:\n\036tschchart"
  "seriesmixedlineshadow\030* \001(\0132\022.TSD.Shadow"
  "Archive\0224\n\030tschchartseriespieshadow\030+ \001("
  "\0132\022.TSD.ShadowArchive\0228\n\034tschchartseries"
  "scattershadow\030, \001(\0132\022.TSD.ShadowArchive\022"
  "5\n\031tschchartseriesareastroke\030- \001(\0132\022.TSD"
  ".StrokeArchive\0224\n\030tschchartseriesbarstro"
  "ke\030. \001(\0132\022.TSD.StrokeArchive\0227\n\033tschchar"
  "tseriesbubblestroke\030/ \001(\0132\022.TSD.StrokeAr"
  "chive\0225\n\031tschchartserieslinestroke\0300 \001(\013"
  "2\022.TSD.StrokeArchive\022:\n\036tschchartseriesm"
  "ixedareastroke\0301 \001(\0132\022.TSD.StrokeArchive"
  "\022<\n tschchartseriesmixedcolumnstroke\0302 \001"
  "(\0132\022.TSD.StrokeArchive\022:\n\036tschchartserie"
  "smixedlinestroke\0303 \001(\0132\022.TSD.StrokeArchi"
  "ve\0224\n\030tschchartseriespiestroke\0304 \001(\0132\022.T"
  "SD.StrokeArchive\0228\n\034tschchartseriesscatt"
  "erstroke\0305 \001(\0132\022.TSD.StrokeArchive\0227\n\035ts"
  "chchartseriesareasymbolfill\0306 \001(\0132\020.TSD."
  "FillArchive\0229\n\037tschchartseriesbubblesymb"
  "olfill\0307 \001(\0132\020.TSD.FillArchive\0227\n\035tschch"
  "artserieslinesymbolfill\0308 \001(\0132\020.TSD.Fill"
  "Archive\022<\n\"tschchartseriesmixedareasymbo"
  "lfill\0309 \001(\0132\020.TSD.FillArchive\022<\n\"tschcha"
  "rtseriesmixedlinesymbolfill\030: \001(\0132\020.TSD."
  "FillArchive\022:\n tschchartseriesscattersym"
  "bolfill\030; \001(\0132\020.TSD.FillArchive\0222\n*tschc"
  "hartseriesareasymbolfilluseseriesfill\030< "
  "\001(\010\0222\n*tschchartserieslinesymbolfilluses"
  "eriesfill\030= \001(\010\0227\n/tschchartseriesmixeda"
  "reasymbolfilluseseriesfill\030> \001(\010\0227\n/tsch"
  "chartseriesmixedlinesymbolfilluseseriesf"
  "ill\030\? \001(\010\0224\n,tschchartseriesareasymbolfi"
  "lluseseriesstroke\030@ \001(\010\0226\n.tschchartseri"
  "esbubblesymbolfilluseseriesstroke\030A \001(\010\022"
  "4\n,tschchartserieslinesymbolfilluseserie"
  "sstroke\030B \001(\010\0229\n1tschchartseriesmixedare"
  "asymbolfilluseseriesstroke\030C \001(\010\0229\n1tsch"
  "chartseriesmixedlinesymbolfilluseseriess"
  "troke\030D \001(\010\0227\n/tschchartseriesscattersym"
  "bolfilluseseriesstroke\030E \001(\010\022%\n\035tschchar"
  "tseriesareasymbolsize\030F \001(\002\022%\n\035tschchart"
  "serieslinesymbolsize\030G \001(\002\022*\n\"tschcharts"
  "eriesmixedareasymbolsize\030H \001(\002\022*\n\"tschch"
  "artseriesmixedlinesymbolsize\030I \001(\002\022(\n ts"
  "chchartseriesscattersymbolsize\030J \001(\002\022;\n\037"
  "tschchartseriesareasymbolstroke\030K \001(\0132\022."
  "TSD.StrokeArchive\022=\n!tschchartseriesbubb"
  "lesymbolstroke\030L \001(\0132\022.TSD.StrokeArchive"
  "\022;\n\037tschchartserieslinesymbolstroke\030M \001("
  "\0132\022.TSD.StrokeArchive\022@\n$tschchartseries"
  "mixedareasymbolstroke\030N \001(\0132\022.TSD.Stroke"
  "Archive\022@\n$tschchartseriesmixedlinesymbo"
  "lstroke\030O \001(\0132\022.TSD.StrokeArchive\022>\n\"tsc"
  "hchartseriesscattersymbolstroke\030P \001(\0132\022."
  "TSD.StrokeArchive\022A\n%tschchartseriesdefa"
  "ulttrendlineshadow\030U \001(\0132\022.TSD.ShadowArc"
  "hive\022A\n%tschchartseriesdefaulttrendlines"
  "troke\030V \001(\0132\022.TSD.StrokeArchive\0226\n.tschc"
  "hartseriesdefaulttrendlineequationopacit"
  "y\030Q \001(\002\022B\n:tschchartseriesdefaulttrendli"
  "neequationparagraphstyleindex\030R \001(\005\0226\n.t"
  "schchartseriesdefaulttrendlinersquaredop"
  "acity\030S \001(\002\022B\n:tschchartseriesdefaulttre"
  "ndlinersquaredparagraphstyleindex\030T \001(\005\022"
  "-\n%tschchartseriesareavaluelabelposition"
  "\030W \001(\005\022,\n$tschchartseriesbarvaluelabelpo"
  "sition\030X \001(\005\022/\n\'tschchartseriesbubbleval"
  "uelabelposition\030Y \001(\005\0220\n(tschchartseries"
  "defaultvaluelabelposition\030Z \001(\005\022-\n%tschc"
  "hartserieslinevaluelabelposition\030[ \001(\005\0222"
  "\n*tschchartseriesmixedareavaluelabelposi"
  "tion\030\\ \001(\005\0224\n,tschchartseriesmixedcolumn"
  "valuelabelposition\030] \001(\005\0222\n*tschchartser"
  "iesmixedlinevaluelabelposition\030^ \001(\005\0220\n("
  "tschchartseriesscattervaluelabelposition"
  "\030_ \001(\005\0224\n,tschchartseriesstackedareavalu"
  "elabelposition\030` \001(\005\0223\n+tschchartseriess"
  "tackedbarvaluelabelposition\030a \001(\005\022/\n\'tsc"
  "hchartseriesdefaultvaluelabelspacing\030d \001"
  "(\0052X\n\007current\022\035.TSCH.ChartSeriesStyleArc"
  "hive\030\220N \001(\0132\'.TSCH.Generated.ChartSeries"
  "StyleArchive\"\270&\n\032ChartSeriesNonStyleArch"
  "ive\022E\n#tschchartseriesdefault1_0dateform"
  "at\030E \001(\0132\030.TSK.FormatStructArchive\022G\n%ts"
  "chchartseriesdefault1_0numberformat\030\025 \001("
  "\0132\030.TSK.FormatStructArchive\022C\n!tschchart"
  "seriespie1_0numberformat\030\026 \001(\0132\030.TSK.For"
  "matStructArchive\022+\n#tschchartseriespie2_"
  "3labelexplosion\030\020 \001(\002\022,\n$tschchartseries"
  "bubbleadjustmentscale\030\001 \001(\002\022B\n tschchart"
  "seriesdefaultdateformat\030G \001(\0132\030.TSK.Form"
  "atStructArchive\022F\n$tschchartseriesdefaul"
  "tdurationformat\030F \001(\0132\030.TSK.FormatStruct"
  "Archive\022,\n$tschchartseriesareaenablecall"
  "outline\030g \001(\005\022+\n#tschchartseriesbarenabl"
  "ecalloutline\030h \001(\005\022.\n&tschchartseriesbub"
  "bleenablecalloutline\030i \001(\005\022/\n\'tschcharts"
  "eriesdefaultenablecalloutline\030n \001(\005\022,\n$t"
  "schchartserieslineenablecalloutline\030j \001("
  "\005\022+\n#tschchartseriespieenablecalloutline"
  "\030f \001(\005\022/\n\'tschchartseriesscatterenableca"
  "lloutline\030k \001(\005\0223\n+tschchartseriesstacke"
  "dareaenablecalloutline\030l \001(\005\0222\n*tschchar"
  "tseriesstackedbarenablecalloutline\030m \001(\005"
  "\022d\n0tschchartseriesdefaulterrorbarcustom"
  "negativedata\030\002 \001(\0132*.TSCH.ChartsNSArrayO"
  "fNSNumberDoubleArchive\022l\n8tschchartserie"
  "sdefaulterrorbarcustomnegativedatascatte"
  "rx\030\003 \001(\0132*.TSCH.ChartsNSArrayOfNSNumberD"
  "oubleArchive\022d\n0tschchartseriesdefaulter"
  "rorbarcustompositivedata\030\004 \001(\0132*.TSCH.Ch"
  "artsNSArrayOfNSNumberDoubleArchive\022l\n8ts"
  "chchartseriesdefaulterrorbarcustompositi"
  "vedatascatterx\030\005 \001(\0132*.TSCH.ChartsNSArra"
  "yOfNSNumberDoubleArchive\0220\n(tschchartser"
  "iesdefaulterrorbarfixedvalue\030\006 \001(\002\0228\n0ts"
  "chchartseriesdefaulterrorbarfixedvaluesc"
  "atterx\030\007 \001(\002\0222\n*tschchartseriesdefaulter"
  "rorbarpercentvalue\030\010 \001(\002\022:\n2tschchartser"
  "iesdefaulterrorbarpercentvaluescatterx\030\t"
  " \001(\002\022-\n%tschchartseriesdefaulterrorbarse"
  "tting\030\n \001(\005\0225\n-tschchartseriesdefaulterr"
  "orbarsettingscatterx\030\013 \001(\005\0221\n)tschcharts"
  "eriesdefaulterrorbarstddevvalue\030\014 \001(\002\0229\n"
  "1tschchartseriesdefaulterrorbarstddevval"
  "uescatterx\030\r \001(\002\022*\n\"tschchartseriesdefau"
  "lterrorbartype\030\016 \001(\005\0222\n*tschchartseriesd"
  "efaulterrorbartypescatterx\030\017 \001(\005\022)\n tsch"
  "chartseriespielabelexplosion\030\223\001 \001(\002\022%\n\035t"
  "schchartseriesbubblelinetype\030\021 \001(\005\022#\n\033ts"
  "chchartserieslinelinetype\030\022 \001(\005\022(\n tschc"
  "hartseriesmixedlinelinetype\030\023 \001(\005\022&\n\036tsc"
  "hchartseriesscatterlinetype\030\024 \001(\005\022D\n\"tsc"
  "hchartseriesdefaultnumberformat\030b \001(\0132\030."
  "TSK.FormatStructArchive\022@\n\036tschchartseri"
  "espienumberformat\030c \001(\0132\030.TSK.FormatStru"
  "ctArchive\022.\n&tschchartseriesdefaultnumbe"
  "rformattype\030\027 \001(\005\022*\n\"tschchartseriespien"
  "umberformattype\030\030 \001(\005\022K\n)tschchartseries"
  "stackedpercentnumberformat\030\031 \001(\0132\030.TSK.F"
  "ormatStructArchive\022(\n tschchartseriesdef"
  "aultseriestype\030\032 \001(\005\022*\n\"tschchartseriesd"
  "efaultshowerrorbar\030\033 \001(\010\0222\n*tschchartser"
  "iesdefaultshowerrorbarscatterx\030\034 \001(\010\022.\n&"
  "tschchartseriesbubbleshowlabelsinfront\030e"
  " \001(\010\022/\n\'tschchartseriesdefaultshowlabels"
  "infront\030d \001(\010\022&\n\036tschchartseriesscatters"
  "howline\030\035 \001(\010\022-\n%tschchartseriesbubblesh"
  "ownegativedata\030\036 \001(\010\022-\n%tschchartseriesb"
  "ubbleshowserieslabels\030A \001(\010\022*\n\"tschchart"
  "seriespieshowserieslabels\030\037 \001(\010\022.\n&tschc"
  "hartseriesscattershowserieslabels\030C \001(\010\022"
  "%\n\035tschchartseriesareashowsymbol\030  \001(\010\022%"
  "\n\035tschchartserieslineshowsymbol\030! \001(\010\022*\n"
  "\"tschchartseriesmixedareashowsymbol\030\" \001("
  "\010\022*\n\"tschchartseriesmixedlineshowsymbol\030"
  "# \001(\010\022(\n tschchartseriesscattershowsymbo"
  "l\030$ \001(\010\022+\n#tschchartseriesdefaultshowtre"
  "ndline\030% \001(\010\022*\n\"tschchartseriesareashowv"
  "aluelabels\030& \001(\010\022)\n!tschchartseriesbarsh"
  "owvaluelabels\030\' \001(\010\022,\n$tschchartseriesbu"
  "bbleshowvaluelabels\030( \001(\010\022-\n%tschchartse"
  "riesdefaultshowvaluelabels\030) \001(\010\022*\n\"tsch"
  "chartserieslineshowvaluelabels\030* \001(\010\022+\n#"
  "tschchartseriesmixedshowvaluelabels\030+ \001("
  "\010\022)\n!tschchartseriespieshowvaluelabels\030,"
  " \001(\010\022-\n%tschchartseriesscattershowvaluel"
  "abels\030- \001(\010\022*\n\"tschchartseriesbubblesize"
  "dimension\030. \001(\005\022\'\n\036tschchartseriesareast"
  "acklabels\030\213\001 \001(\010\022&\n\035tschchartseriesbarst"
  "acklabels\030\214\001 \001(\010\022)\n tschchartseriesbubbl"
  "estacklabels\030\215\001 \001(\010\022*\n!tschchartseriesde"
  "faultstacklabels\030\222\001 \001(\010\022\'\n\036tschchartseri"
  "eslinestacklabels\030\216\001 \001(\010\022&\n\035tschchartser"
  "iespiestacklabels\030\212\001 \001(\010\022*\n!tschchartser"
  "iesscatterstacklabels\030\217\001 \001(\010\022.\n%tschchar"
  "tseriesstackedareastacklabels\030\220\001 \001(\010\022-\n$"
  "tschchartseriesstackedbarstacklabels\030\221\001 "
  "\001(\010\022%\n\035tschchartseriesareasymboltype\030/ \001"
  "(\005\022%\n\035tschchartserieslinesymboltype\0300 \001("
  "\005\022*\n\"tschchartseriesmixedareasymboltype\030"
  "1 \001(\005\022*\n\"tschchartseriesmixedlinesymbolt"
  "ype\0302 \001(\005\022(\n tschchartseriesscattersymbo"
  "ltype\0303 \001(\005\0226\n.tschchartseriesdefaulttre"
  "ndlineequationoffsetx\0304 \001(\002\0226\n.tschchart"
  "seriesdefaulttrendlineequationoffsety\0305 "
  "\001(\002\0222\n*tschchartseriesdefaulttrendlinela"
  "belstring\0306 \001(\t\022,\n$tschchartseriesdefaul"
  "ttrendlineorder\0307 \001(\005\022-\n%tschchartseries"
  "defaulttrendlineperiod\0308 \001(\005\0226\n.tschchar"
  "tseriesdefaulttrendlinersquaredoffsetx\0309"
  " \001(\002\0226\n.tschchartseriesdefaulttrendliner"
  "squaredoffsety\030: \001(\002\0223\n+tschchartseriesd"
  "efaulttrendlineshowequation\030; \001(\010\0220\n(tsc"
  "hchartseriesdefaulttrendlineshowlabel\030< "
  "\001(\010\0222\n*tschchartseriesdefaulttrendlinesh"
  "owr2value\030= \001(\010\022+\n#tschchartseriesdefaul"
  "ttrendlinetype\030> \001(\005\022,\n$tschchartseriesb"
  "ubblevaluelabelsaxis\030B \001(\005\022-\n%tschcharts"
  "eriesscattervaluelabelsaxis\030D \001(\005\022(\n tsc"
  "hchartseriespiewedgeexplosion\030\? \001(\002\022*\n\"t"
  "schchartseriesdefaultyaxisordinal\030@ \001(\0052"
  "^\n\007current\022 .TSCH.ChartSeriesNonStyleArc"
  "hive\030\220N \001(\0132*.TSCH.Generated.ChartSeries"
  "NonStyleArchive\"\352\002\n\031ReferenceLineStyleAr"
  "chive\0228\n0tschreferencelinedefaultlabelpa"
  "ragraphstyleindex\030\003 \001(\005\022:\n\036tschreference"
  "linedefaultshadow\030\002 \001(\0132\022.TSD.ShadowArch"
  "ive\022:\n\036tschreferencelinedefaultstroke\030\001 "
  "\001(\0132\022.TSD.StrokeArchive\022=\n5tschreference"
  "linedefaultvaluelabelparagraphstyleindex"
  "\030\004 \001(\0052\\\n\007current\022\037.TSCH.ReferenceLineSt"
  "yleArchive\030\220N \001(\0132).TSCH.Generated.Refer"
  "enceLineStyleArchive\"\244\003\n\034ReferenceLineNo"
  "nStyleArchive\022N\n#tschreferencelinedefaul"
  "tcustomvalue\030\006 \001(\0132!.TSCH.ChartsNSNumber"
  "DoubleArchive\022%\n\035tschreferencelinedefaul"
  "tlabel\030\005 \001(\t\022)\n!tschreferencelinedefault"
  "showlabel\030\003 \001(\010\022(\n tschreferencelinedefa"
  "ultshowline\030\002 \001(\010\022.\n&tschreferencelinede"
  "faultshowvaluelabel\030\004 \001(\010\022$\n\034tschreferen"
  "celinedefaulttype\030\001 \001(\0052b\n\007current\022\".TSC"
  "H.ReferenceLineNonStyleArchive\030\220N \001(\0132,."
  "TSCH.Generated.ReferenceLineNonStyleArch"
  "ive\"\361\014\n\036ChartGenericPropertyMapArchive\022\037"
  "\n\027tschchartinfo3dbarshape\030\001 \001(\005\022!\n\031tschc"
  "hartinfo3dbeveledges\030\002 \001(\010\022#\n\033tschcharti"
  "nfo3dchartopacity\030\003 \001(\002\022\'\n\037tschchartinfo"
  "3dintersetdepthgap\030\004 \001(\002\022K\n\036tschchartinf"
  "o3dlightingpackage\030\005 \001(\0132#.TSCH.Chart3DL"
  "ightingPackageArchive\022;\n\027tschchartinfo3d"
  "rotation\030\006 \001(\0132\032.TSCH.Chart3DVectorArchi"
  "ve\0228\n\024tschchartinfo3dscale\030\007 \001(\0132\032.TSCH."
  "Chart3DVectorArchive\022;\n\027tschchartinfo3dv"
  "iewport\030\010 \001(\0132\032.TSCH.Chart3DVectorArchiv"
  "e\0225\n\033tschchartinfobackgroundfill\030\t \001(\0132\020"
  ".TSD.FillArchive\0229\n\035tschchartinfobackgro"
  "undstroke\030\n \001(\0132\022.TSD.StrokeArchive\022\"\n\032t"
  "schchartinfoborderopacity\030\013 \001(\002\0225\n\031tschc"
  "hartinfobordershadow\030\014 \001(\0132\022.TSD.ShadowA"
  "rchive\0225\n\031tschchartinfoborderstroke\030\r \001("
  "\0132\022.TSD.StrokeArchive\022$\n\034tschchartinfoca"
  "lloutlinetype\030\016 \001(\005\022\"\n\032tschchartinfocomb"
  "inelayers\030\017 \001(\010\0228\n0tschchartinfodeprecat"
  "edroundedcornerouterendonly\030\020 \001(\010\0222\n*tsc"
  "hchartinfodeprecatedroundedcornerradius\030"
  "\021 \001(\002\022(\n tschchartinfodatasetnamelocatio"
  "n\030\022 \001(\005\0223\n+tschchartinfodatasetnameparag"
  "raphstyleindex\030\023 \001(\005\022,\n$tschchartinfodon"
  "utplacetitleatcenter\030\024 \001(\010\0229\n\037tschcharti"
  "nfogridbackgroundfill\030\025 \001(\0132\020.TSD.FillAr"
  "chive\022*\n\"tschchartinfogridbackgroundopac"
  "ity\030\026 \001(\002\022 \n\030tschchartinfoinnerradius\030\027 "
  "\001(\002\022 \n\030tschchartinfointerbargap\030\030 \001(\002\022 \n"
  "\030tschchartinfointersetgap\030\031 \001(\002\022)\n!tschc"
  "hartinfomultidatacontroltype\030\032 \001(\005\022\"\n\032ts"
  "chchartinfopiestartangle\030\033 \001(\002\022.\n&tschch"
  "artinforoundedcornerouterendonly\030\034 \001(\010\022("
  "\n tschchartinforoundedcornerradius\030\035 \001(\002"
  "\022\037\n\027tschchartinfoshowborder\030\036 \001(\010\022\037\n\027tsc"
  "hchartinfoshowlegend\030\037 \001(\010\022\036\n\026tschcharti"
  "nfoshowtitle\030  \001(\010\022#\n\033tschchartinfoskiph"
  "iddendata\030! \001(\010\022+\n\027tschchartinfotitlecol"
  "or\030\" \001(\0132\n.TSP.Color\022\032\n\022tschchartinfotit"
  "le\030# \001(\t\022-\n%tschchartinfotitleparagraphs"
  "tyleindex\030$ \001(\005\"\207\002\n\037LegendGenericPropert"
  "yMapArchive\022-\n\023tschlegendmodelfill\030\001 \001(\013"
  "2\020.TSD.FillArchive\022/\n\'tschlegendmodellab"
  "elparagraphstyleindex\030\002 \001(\005\022\036\n\026tschlegen"
  "dmodelopacity\030\003 \001(\002\0221\n\025tschlegendmodelsh"
  "adow\030\004 \001(\0132\022.TSD.ShadowArchive\0221\n\025tschle"
  "gendmodelstroke\030\005 \001(\0132\022.TSD.StrokeArchiv"
  "e\"\244\016\n\"ChartAxisGenericPropertyMapArchive"
  "\022<\n\032tschchartaxis1_0dateformat\030\001 \001(\0132\030.T"
  "SK.FormatStructArchive\022>\n\034tschchartaxis1"
  "_0numberformat\030\002 \001(\0132\030.TSK.FormatStructA"
  "rchive\022&\n\036tschchartaxis3dgridlineopacity"
  "\030\003 \001(\002\0229\n\035tschchartaxis3dgridlinestroke\030"
  "\004 \001(\0132\022.TSD.StrokeArchive\022$\n\034tschchartax"
  "is3dlabelposition\030\005 \001(\005\0229\n\027tschchartaxis"
  "dateformat\030\006 \001(\0132\030.TSK.FormatStructArchi"
  "ve\022=\n\033tschchartaxisdurationformat\030\007 \001(\0132"
  "\030.TSK.FormatStructArchive\022&\n\036tschchartax"
  "ishorizontalspacing\030\010 \001(\005\022-\n%tschchartax"
  "islabelparagraphstyleindex\030\t \001(\005\022&\n\036tsch"
  "chartaxislabelsorientation\030\n \001(\002\022)\n!tsch"
  "chartaxismajorgridlineopacity\030\013 \001(\002\022<\n t"
  "schchartaxismajorgridlineshadow\030\014 \001(\0132\022."
  "TSD.ShadowArchive\022<\n tschchartaxismajorg"
  "ridlinestroke\030\r \001(\0132\022.TSD.StrokeArchive\022"
  ")\n!tschchartaxisminorgridlineopacity\030\016 \001"
  "(\002\022<\n tschchartaxisminorgridlineshadow\030\017"
  " \001(\0132\022.TSD.ShadowArchive\022<\n tschchartaxi"
  "sminorgridlinestroke\030\020 \001(\0132\022.TSD.StrokeA"
  "rchive\022;\n\031tschchartaxisnumberformat\030\021 \001("
  "\0132\030.TSK.FormatStructArchive\022%\n\035tschchart"
  "axisnumberformattype\030\022 \001(\005\022$\n\034tschcharta"
  "xisnumberofdecades\030\023 \001(\005\022+\n#tschchartaxi"
  "snumberofmajorgridlines\030\024 \001(\005\022+\n#tschcha"
  "rtaxisnumberofminorgridlines\030\025 \001(\005\022 \n\030ts"
  "chchartaxisplottoedges\030\026 \001(\010\022\032\n\022tschchar"
  "taxisscale\030\027 \001(\005\022\035\n\025tschchartaxisshowaxi"
  "s\030\030 \001(\010\022\037\n\027tschchartaxisshowlabels\030\031 \001(\010"
  "\022\"\n\032tschchartaxisshowlastlabel\030\032 \001(\010\022\'\n\037"
  "tschchartaxisshowmajorgridlines\030\033 \001(\010\022\'\n"
  "\037tschchartaxisshowmajortickmarks\030\034 \001(\010\022%"
  "\n\035tschchartaxisshowminimumlabel\030\035 \001(\010\022\'\n"
  "\037tschchartaxisshowminorgridlines\030\036 \001(\010\022\'"
  "\n\037tschchartaxisshowminortickmarks\030\037 \001(\010\022"
  "%\n\035tschchartaxisshowserieslabels\030  \001(\010\022\036"
  "\n\026tschchartaxisshowtitle\030! \001(\010\022%\n\035tschch"
  "artaxistickmarklocation\030\" \001(\005\022\032\n\022tschcha"
  "rtaxistitle\030# \001(\t\022-\n%tschchartaxistitlep"
  "aragraphstyleindex\030$ \001(\005\022\?\n\024tschchartaxi"
  "susermax\030% \001(\0132!.TSCH.ChartsNSNumberDoub"
  "leArchive\022\?\n\024tschchartaxisusermin\030& \001(\0132"
  "!.TSCH.ChartsNSNumberDoubleArchive\022$\n\034ts"
  "chchartaxisverticalspacing\030\' \001(\005\"\326 \n$Cha"
  "rtSeriesGenericPropertyMapArchive\022>\n\034tsc"
  "hchartseries1_0dateformat\030\001 \001(\0132\030.TSK.Fo"
  "rmatStructArchive\022@\n\036tschchartseries1_0n"
  "umberformat\030\002 \001(\0132\030.TSK.FormatStructArch"
  "ive\022(\n tschchartseries2_3labelexplosion\030"
  "\003 \001(\002\022&\n\036tschchartseriesadjustmentscale\030"
  "\004 \001(\002\022A\n$tschchartseriescalloutlineendli"
  "neend\030\005 \001(\0132\023.TSD.LineEndArchive\022C\n&tsch"
  "chartseriescalloutlinestartlineend\030\006 \001(\013"
  "2\023.TSD.LineEndArchive\022A\n%tschchartseries"
  "calloutlinestrokestyle\030\007 \001(\0132\022.TSD.Strok"
  "eArchive\022;\n\031tschchartseriesdateformat\030\010 "
  "\001(\0132\030.TSK.FormatStructArchive\022\?\n\035tschcha"
  "rtseriesdurationformat\030\t \001(\0132\030.TSK.Forma"
  "tStructArchive\022(\n tschchartseriesenablec"
  "alloutline\030\n \001(\005\022]\n)tschchartserieserror"
  "barcustomnegativedata\030\013 \001(\0132*.TSCH.Chart"
  "sNSArrayOfNSNumberDoubleArchive\022e\n1tschc"
  "hartserieserrorbarcustomnegativedatascat"
  "terx\030\014 \001(\0132*.TSCH.ChartsNSArrayOfNSNumbe"
  "rDoubleArchive\022]\n)tschchartserieserrorba"
  "rcustompositivedata\030\r \001(\0132*.TSCH.ChartsN"
  "SArrayOfNSNumberDoubleArchive\022e\n1tschcha"
  "rtserieserrorbarcustompositivedatascatte"
  "rx\030\016 \001(\0132*.TSCH.ChartsNSArrayOfNSNumberD"
  "oubleArchive\022)\n!tschchartserieserrorbarf"
  "ixedvalue\030\017 \001(\002\0221\n)tschchartserieserrorb"
  "arfixedvaluescatterx\030\020 \001(\002\022;\n\036tschcharts"
  "erieserrorbarlineend\030\021 \001(\0132\023.TSD.LineEnd"
  "Archive\022C\n&tschchartserieserrorbarlineen"
  "dscatterx\030\022 \001(\0132\023.TSD.LineEndArchive\022+\n#"
  "tschchartserieserrorbarpercentvalue\030\023 \001("
  "\002\0223\n+tschchartserieserrorbarpercentvalue"
  "scatterx\030\024 \001(\002\022&\n\036tschchartserieserrorba"
  "rsetting\030\025 \001(\005\022.\n&tschchartserieserrorba"
  "rsettingscatterx\030\026 \001(\005\0229\n\035tschchartserie"
  "serrorbarshadow\030\027 \001(\0132\022.TSD.ShadowArchiv"
  "e\022&\n\036tschchartserieserrorbarspacing\030\030 \001("
  "\005\022.\n&tschchartserieserrorbarspacingscatt"
  "erx\030\031 \001(\005\022*\n\"tschchartserieserrorbarstdd"
  "evvalue\030\032 \001(\002\0222\n*tschchartserieserrorbar"
  "stddevvaluescatterx\030\033 \001(\002\0229\n\035tschchartse"
  "rieserrorbarstroke\030\034 \001(\0132\022.TSD.StrokeArc"
  "hive\022A\n%tschchartserieserrorbarstrokesca"
  "tterx\030\035 \001(\0132\022.TSD.StrokeArchive\022#\n\033tschc"
  "hartserieserrorbartype\030\036 \001(\005\022+\n#tschchar"
  "tserieserrorbartypescatterx\030\037 \001(\005\022-\n\023tsc"
  "hchartseriesfill\030  \001(\0132\020.TSD.FillArchive"
  "\022%\n\035tschchartserieslabelexplosion\030! \001(\002\022"
  "/\n\'tschchartserieslabelparagraphstyleind"
  "ex\030\" \001(\005\022\037\n\027tschchartserieslinetype\030# \001("
  "\005\022=\n\033tschchartseriesnumberformat\030$ \001(\0132\030"
  ".TSK.FormatStructArchive\022\'\n\037tschchartser"
  "iesnumberformattype\030% \001(\005\022\036\n\026tschchartse"
  "riesopacity\030& \001(\002\0226\n.tschchartseriesouts"
  "idelabelparagraphstyleindex\030\' \001(\005\022D\n\"tsc"
  "hchartseriespercentnumberformat\030( \001(\0132\030."
  "TSK.FormatStructArchive\022!\n\031tschchartseri"
  "esseriestype\030) \001(\005\0221\n\025tschchartseriessha"
  "dow\030* \001(\0132\022.TSD.ShadowArchive\022#\n\033tschcha"
  "rtseriesshowerrorbar\030+ \001(\010\022+\n#tschcharts"
  "eriesshowerrorbarscatterx\030, \001(\010\022(\n tschc"
  "hartseriesshowlabelsinfront\030- \001(\010\022\037\n\027tsc"
  "hchartseriesshowline\030. \001(\010\022\'\n\037tschcharts"
  "eriesshownegativedata\030/ \001(\010\022\'\n\037tschchart"
  "seriesshowserieslabels\0300 \001(\010\022!\n\031tschchar"
  "tseriesshowsymbol\0301 \001(\010\022$\n\034tschchartseri"
  "esshowtrendline\0302 \001(\010\022&\n\036tschchartseries"
  "showvaluelabels\0303 \001(\010\022$\n\034tschchartseries"
  "sizedimension\0304 \001(\005\022\"\n\032tschchartseriesst"
  "acklabels\0305 \001(\010\0221\n\025tschchartseriesstroke"
  "\0306 \001(\0132\022.TSD.StrokeArchive\0223\n\031tschcharts"
  "eriessymbolfill\0307 \001(\0132\020.TSD.FillArchive\022"
  ".\n&tschchartseriessymbolfilluseseriesfil"
  "l\0308 \001(\010\0220\n(tschchartseriessymbolfilluses"
  "eriesstroke\0309 \001(\010\022!\n\031tschchartseriessymb"
  "olsize\030: \001(\002\0227\n\033tschchartseriessymbolstr"
  "oke\030; \001(\0132\022.TSD.StrokeArchive\022!\n\031tschcha"
  "rtseriessymboltype\030< \001(\005\022/\n\'tschchartser"
  "iestrendlineequationoffsetx\030= \001(\002\022/\n\'tsc"
  "hchartseriestrendlineequationoffsety\030> \001"
  "(\002\022+\n#tschchartseriestrendlinelabelstrin"
  "g\030\? \001(\t\022%\n\035tschchartseriestrendlineorder"
  "\030@ \001(\005\022&\n\036tschchartseriestrendlineperiod"
  "\030A \001(\005\022/\n\'tschchartseriestrendlinersquar"
  "edoffsetx\030B \001(\002\022/\n\'tschchartseriestrendl"
  "inersquaredoffsety\030C \001(\002\022:\n\036tschchartser"
  "iestrendlineshadow\030D \001(\0132\022.TSD.ShadowArc"
  "hive\022,\n$tschchartseriestrendlineshowequa"
  "tion\030E \001(\010\022)\n!tschchartseriestrendlinesh"
  "owlabel\030F \001(\010\022+\n#tschchartseriestrendlin"
  "eshowr2value\030G \001(\010\022:\n\036tschchartseriestre"
  "ndlinestroke\030H \001(\0132\022.TSD.StrokeArchive\022$"
  "\n\034tschchartseriestrendlinetype\030I \001(\005\022/\n\'"
  "tschchartseriestrendlineequationopacity\030"
  "J \001(\002\022;\n3tschchartseriestrendlineequatio"
  "nparagraphstyleindex\030K \001(\005\022/\n\'tschcharts"
  "eriestrendlinersquaredopacity\030L \001(\002\022;\n3t"
  "schchartseriestrendlinersquaredparagraph"
  "styleindex\030M \001(\005\022)\n!tschchartseriesvalue"
  "labelposition\030N \001(\005\022(\n tschchartseriesva"
  "luelabelspacing\030O \001(\005\022&\n\036tschchartseries"
  "valuelabelsaxis\030P \001(\005\022%\n\035tschchartseries"
  "wedgeexplosion\030Q \001(\002\022#\n\033tschchartseriesy"
  "axisordinal\030R \001(\005\"\365\003\n&ReferenceLineGener"
  "icPropertyMapArchive\022G\n\034tschreferencelin"
  "ecustomvalue\030\001 \001(\0132!.TSCH.ChartsNSNumber"
  "DoubleArchive\022\036\n\026tschreferencelinelabel\030"
  "\002 \001(\t\0221\n)tschreferencelinelabelparagraph"
  "styleindex\030\003 \001(\005\0223\n\027tschreferencelinesha"
  "dow\030\004 \001(\0132\022.TSD.ShadowArchive\022\"\n\032tschref"
  "erencelineshowlabel\030\005 \001(\010\022!\n\031tschreferen"
  "celineshowline\030\006 \001(\010\022\'\n\037tschreferencelin"
  "eshowvaluelabel\030\007 \001(\010\0223\n\027tschreferenceli"
  "nestroke\030\010 \001(\0132\022.TSD.StrokeArchive\022\035\n\025ts"
  "chreferencelinetype\030\t \001(\005\0226\n.tschreferen"
  "celinevaluelabelparagraphstyleindex\030\n \001("
  "\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSCHArchives_2eGEN_2eproto_deps[6] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSCHArchives_2eGEN_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHArchives_2eGEN_2eproto = {
  false, false, 27561, descriptor_table_protodef_TSCHArchives_2eGEN_2eproto, "TSCHArchives.GEN.proto", 
  &descriptor_table_TSCHArchives_2eGEN_2eproto_once, descriptor_table_TSCHArchives_2eGEN_2eproto_deps, 6, 15,
  schemas, file_default_instances, TableStruct_TSCHArchives_2eGEN_2eproto::offsets,
  file_level_metadata_TSCHArchives_2eGEN_2eproto, file_level_enum_descriptors_TSCHArchives_2eGEN_2eproto, file_level_service_descriptors_TSCHArchives_2eGEN_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSCHArchives_2eGEN_2eproto_getter() {
  return &descriptor_table_TSCHArchives_2eGEN_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSCHArchives_2eGEN_2eproto(&descriptor_table_TSCHArchives_2eGEN_2eproto);
namespace TSCH {
namespace Generated {

// ===================================================================

class ChartStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartStyleArchive>()._has_bits_);
  static void set_has_tschchartinfodefault3dchartopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoarea3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfobar3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefault3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoline3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfopie3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartinfodefaultborderopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::ShadowArchive& tschchartinfodefaultbordershadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbordershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultborderstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultborderstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfodefaultcombinelayers(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodefaultdatasetnameparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultgridbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartinfodefaultgridbackgroundopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartinfodefaultinterbargap(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartinfodefaultintersetgap(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartinfodefaultroundedcornerouterendonly(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfodefaultroundedcornerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartinfodefaultshowborder(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSP::Color& tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaulttitlecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartinfodefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfoarea3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfobar3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfocolumn3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefault3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfoline3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfopie3dlightingpackage_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultbackgroundfill_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultbackgroundstroke_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbordershadow(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultbordershadow_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultborderstroke(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultborderstroke_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultgridbackgroundfill_;
}
const ::TSP::Color&
ChartStyleArchive::_Internal::tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaulttitlecolor_;
}
void ChartStyleArchive::clear_tschchartinfoarea3dlightingpackage() {
  if (tschchartinfoarea3dlightingpackage_ != nullptr) tschchartinfoarea3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartStyleArchive::clear_tschchartinfobar3dlightingpackage() {
  if (tschchartinfobar3dlightingpackage_ != nullptr) tschchartinfobar3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartStyleArchive::clear_tschchartinfocolumn3dlightingpackage() {
  if (tschchartinfocolumn3dlightingpackage_ != nullptr) tschchartinfocolumn3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartStyleArchive::clear_tschchartinfodefault3dlightingpackage() {
  if (tschchartinfodefault3dlightingpackage_ != nullptr) tschchartinfodefault3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartStyleArchive::clear_tschchartinfoline3dlightingpackage() {
  if (tschchartinfoline3dlightingpackage_ != nullptr) tschchartinfoline3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartStyleArchive::clear_tschchartinfopie3dlightingpackage() {
  if (tschchartinfopie3dlightingpackage_ != nullptr) tschchartinfopie3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundfill() {
  if (tschchartinfodefaultbackgroundfill_ != nullptr) tschchartinfodefaultbackgroundfill_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundstroke() {
  if (tschchartinfodefaultbackgroundstroke_ != nullptr) tschchartinfodefaultbackgroundstroke_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbordershadow() {
  if (tschchartinfodefaultbordershadow_ != nullptr) tschchartinfodefaultbordershadow_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartStyleArchive::clear_tschchartinfodefaultborderstroke() {
  if (tschchartinfodefaultborderstroke_ != nullptr) tschchartinfodefaultborderstroke_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundfill() {
  if (tschchartinfodefaultgridbackgroundfill_ != nullptr) tschchartinfodefaultgridbackgroundfill_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ChartStyleArchive::clear_tschchartinfodefaulttitlecolor() {
  if (tschchartinfodefaulttitlecolor_ != nullptr) tschchartinfodefaulttitlecolor_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
ChartStyleArchive::ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartStyleArchive)
}
ChartStyleArchive::ChartStyleArchive(const ChartStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschchartinfoarea3dlightingpackage()) {
    tschchartinfoarea3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfoarea3dlightingpackage_);
  } else {
    tschchartinfoarea3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfobar3dlightingpackage()) {
    tschchartinfobar3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfobar3dlightingpackage_);
  } else {
    tschchartinfobar3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfocolumn3dlightingpackage()) {
    tschchartinfocolumn3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfocolumn3dlightingpackage_);
  } else {
    tschchartinfocolumn3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefault3dlightingpackage()) {
    tschchartinfodefault3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfodefault3dlightingpackage_);
  } else {
    tschchartinfodefault3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfoline3dlightingpackage()) {
    tschchartinfoline3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfoline3dlightingpackage_);
  } else {
    tschchartinfoline3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfopie3dlightingpackage()) {
    tschchartinfopie3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfopie3dlightingpackage_);
  } else {
    tschchartinfopie3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultbackgroundfill()) {
    tschchartinfodefaultbackgroundfill_ = new ::TSD::FillArchive(*from.tschchartinfodefaultbackgroundfill_);
  } else {
    tschchartinfodefaultbackgroundfill_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultbackgroundstroke()) {
    tschchartinfodefaultbackgroundstroke_ = new ::TSD::StrokeArchive(*from.tschchartinfodefaultbackgroundstroke_);
  } else {
    tschchartinfodefaultbackgroundstroke_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultbordershadow()) {
    tschchartinfodefaultbordershadow_ = new ::TSD::ShadowArchive(*from.tschchartinfodefaultbordershadow_);
  } else {
    tschchartinfodefaultbordershadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultborderstroke()) {
    tschchartinfodefaultborderstroke_ = new ::TSD::StrokeArchive(*from.tschchartinfodefaultborderstroke_);
  } else {
    tschchartinfodefaultborderstroke_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultgridbackgroundfill()) {
    tschchartinfodefaultgridbackgroundfill_ = new ::TSD::FillArchive(*from.tschchartinfodefaultgridbackgroundfill_);
  } else {
    tschchartinfodefaultgridbackgroundfill_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaulttitlecolor()) {
    tschchartinfodefaulttitlecolor_ = new ::TSP::Color(*from.tschchartinfodefaulttitlecolor_);
  } else {
    tschchartinfodefaulttitlecolor_ = nullptr;
  }
  ::memcpy(&tschchartinfodefault3dchartopacity_, &from.tschchartinfodefault3dchartopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfodefaultshowborder_) -
    reinterpret_cast<char*>(&tschchartinfodefault3dchartopacity_)) + sizeof(tschchartinfodefaultshowborder_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartStyleArchive)
}

inline void ChartStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschchartinfoarea3dlightingpackage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfodefaultshowborder_) -
    reinterpret_cast<char*>(&tschchartinfoarea3dlightingpackage_)) + sizeof(tschchartinfodefaultshowborder_));
}

ChartStyleArchive::~ChartStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tschchartinfoarea3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfobar3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfocolumn3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfodefault3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfoline3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfopie3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfodefaultbackgroundfill_;
  if (this != internal_default_instance()) delete tschchartinfodefaultbackgroundstroke_;
  if (this != internal_default_instance()) delete tschchartinfodefaultbordershadow_;
  if (this != internal_default_instance()) delete tschchartinfodefaultborderstroke_;
  if (this != internal_default_instance()) delete tschchartinfodefaultgridbackgroundfill_;
  if (this != internal_default_instance()) delete tschchartinfodefaulttitlecolor_;
}

void ChartStyleArchive::ArenaDtor(void* object) {
  ChartStyleArchive* _this = reinterpret_cast< ChartStyleArchive* >(object);
  (void)_this;
}
void ChartStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tschchartinfoarea3dlightingpackage_ != nullptr);
      tschchartinfoarea3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartinfobar3dlightingpackage_ != nullptr);
      tschchartinfobar3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartinfocolumn3dlightingpackage_ != nullptr);
      tschchartinfocolumn3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartinfodefault3dlightingpackage_ != nullptr);
      tschchartinfodefault3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartinfoline3dlightingpackage_ != nullptr);
      tschchartinfoline3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartinfopie3dlightingpackage_ != nullptr);
      tschchartinfopie3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartinfodefaultbackgroundfill_ != nullptr);
      tschchartinfodefaultbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartinfodefaultbackgroundstroke_ != nullptr);
      tschchartinfodefaultbackgroundstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartinfodefaultbordershadow_ != nullptr);
      tschchartinfodefaultbordershadow_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartinfodefaultborderstroke_ != nullptr);
      tschchartinfodefaultborderstroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartinfodefaultgridbackgroundfill_ != nullptr);
      tschchartinfodefaultgridbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartinfodefaulttitlecolor_ != nullptr);
      tschchartinfodefaulttitlecolor_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&tschchartinfodefault3dchartopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfodefaultinterbargap_) -
        reinterpret_cast<char*>(&tschchartinfodefault3dchartopacity_)) + sizeof(tschchartinfodefaultinterbargap_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&tschchartinfodefaultintersetgap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfodefaultshowborder_) -
        reinterpret_cast<char*>(&tschchartinfodefaultintersetgap_)) + sizeof(tschchartinfodefaultshowborder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float tschchartinfodefault3dchartopacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_tschchartinfodefault3dchartopacity(&has_bits);
          tschchartinfodefault3dchartopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultborderopacity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_tschchartinfodefaultborderopacity(&has_bits);
          tschchartinfodefaultborderopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbordershadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultborderstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultcombinelayers = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartinfodefaultcombinelayers(&has_bits);
          tschchartinfodefaultcombinelayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultgridbackgroundfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultgridbackgroundopacity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_tschchartinfodefaultgridbackgroundopacity(&has_bits);
          tschchartinfodefaultgridbackgroundopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultinterbargap = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_tschchartinfodefaultinterbargap(&has_bits);
          tschchartinfodefaultinterbargap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultintersetgap = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_tschchartinfodefaultintersetgap(&has_bits);
          tschchartinfodefaultintersetgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowborder = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartinfodefaultshowborder(&has_bits);
          tschchartinfodefaultshowborder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaulttitlecolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartinfodefaulttitleparagraphstyleindex(&has_bits);
          tschchartinfodefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartinfodefaultdatasetnameparagraphstyleindex(&has_bits);
          tschchartinfodefaultdatasetnameparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultroundedcornerradius = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_tschchartinfodefaultroundedcornerradius(&has_bits);
          tschchartinfodefaultroundedcornerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultroundedcornerouterendonly = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartinfodefaultroundedcornerouterendonly(&has_bits);
          tschchartinfodefaultroundedcornerouterendonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float tschchartinfodefault3dchartopacity = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_tschchartinfodefault3dchartopacity(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tschchartinfoarea3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tschchartinfobar3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tschchartinfocolumn3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tschchartinfodefault3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tschchartinfoline3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tschchartinfopie3dlightingpackage(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tschchartinfodefaultbackgroundfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tschchartinfodefaultbackgroundstroke(this), target, stream);
  }

  // optional float tschchartinfodefaultborderopacity = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_tschchartinfodefaultborderopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tschchartinfodefaultbordershadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tschchartinfodefaultborderstroke(this), target, stream);
  }

  // optional bool tschchartinfodefaultcombinelayers = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_tschchartinfodefaultcombinelayers(), target);
  }

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::tschchartinfodefaultgridbackgroundfill(this), target, stream);
  }

  // optional float tschchartinfodefaultgridbackgroundopacity = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_tschchartinfodefaultgridbackgroundopacity(), target);
  }

  // optional float tschchartinfodefaultinterbargap = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_tschchartinfodefaultinterbargap(), target);
  }

  // optional float tschchartinfodefaultintersetgap = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_tschchartinfodefaultintersetgap(), target);
  }

  // optional bool tschchartinfodefaultshowborder = 18;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_tschchartinfodefaultshowborder(), target);
  }

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::tschchartinfodefaulttitlecolor(this), target, stream);
  }

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartinfodefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartinfodefaultdatasetnameparagraphstyleindex(), target);
  }

  // optional float tschchartinfodefaultroundedcornerradius = 122;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(122, this->_internal_tschchartinfodefaultroundedcornerradius(), target);
  }

  // optional bool tschchartinfodefaultroundedcornerouterendonly = 123;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(123, this->_internal_tschchartinfodefaultroundedcornerouterendonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartStyleArchive)
  return target;
}

size_t ChartStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoarea3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfobar3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfocolumn3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefault3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoline3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfopie3dlightingpackage_);
    }

    // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultbackgroundfill_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultbackgroundstroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultbordershadow_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultborderstroke_);
    }

    // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultgridbackgroundfill_);
    }

    // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaulttitlecolor_);
    }

    // optional float tschchartinfodefault3dchartopacity = 1;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultborderopacity = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultgridbackgroundopacity = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultinterbargap = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional float tschchartinfodefaultintersetgap = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaulttitleparagraphstyleindex());
    }

    // optional float tschchartinfodefaultroundedcornerradius = 122;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdatasetnameparagraphstyleindex());
    }

    // optional bool tschchartinfodefaultcombinelayers = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodefaultroundedcornerouterendonly = 123;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultshowborder = 18;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartStyleArchive::GetClassData() const { return &_class_data_; }

void ChartStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartStyleArchive *>(to)->MergeFrom(
      static_cast<const ChartStyleArchive &>(from));
}


void ChartStyleArchive::MergeFrom(const ChartStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tschchartinfoarea3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfoarea3dlightingpackage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartinfobar3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfobar3dlightingpackage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartinfocolumn3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfocolumn3dlightingpackage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartinfodefault3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfodefault3dlightingpackage());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartinfoline3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfoline3dlightingpackage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartinfopie3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfopie3dlightingpackage());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartinfodefaultbackgroundfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartinfodefaultbackgroundfill());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartinfodefaultbackgroundstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartinfodefaultbackgroundstroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartinfodefaultbordershadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfodefaultbordershadow());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartinfodefaultborderstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartinfodefaultborderstroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartinfodefaultgridbackgroundfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartinfodefaultgridbackgroundfill());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartinfodefaulttitlecolor()->::TSP::Color::MergeFrom(from._internal_tschchartinfodefaulttitlecolor());
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartinfodefault3dchartopacity_ = from.tschchartinfodefault3dchartopacity_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartinfodefaultborderopacity_ = from.tschchartinfodefaultborderopacity_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartinfodefaultgridbackgroundopacity_ = from.tschchartinfodefaultgridbackgroundopacity_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartinfodefaultinterbargap_ = from.tschchartinfodefaultinterbargap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartinfodefaultintersetgap_ = from.tschchartinfodefaultintersetgap_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartinfodefaulttitleparagraphstyleindex_ = from.tschchartinfodefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartinfodefaultroundedcornerradius_ = from.tschchartinfodefaultroundedcornerradius_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartinfodefaultdatasetnameparagraphstyleindex_ = from.tschchartinfodefaultdatasetnameparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartinfodefaultcombinelayers_ = from.tschchartinfodefaultcombinelayers_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartinfodefaultroundedcornerouterendonly_ = from.tschchartinfodefaultroundedcornerouterendonly_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartinfodefaultshowborder_ = from.tschchartinfodefaultshowborder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartStyleArchive::CopyFrom(const ChartStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartinfoarea3dlightingpackage()) {
    if (!tschchartinfoarea3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dlightingpackage()) {
    if (!tschchartinfobar3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dlightingpackage()) {
    if (!tschchartinfocolumn3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dlightingpackage()) {
    if (!tschchartinfodefault3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dlightingpackage()) {
    if (!tschchartinfoline3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dlightingpackage()) {
    if (!tschchartinfopie3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundfill()) {
    if (!tschchartinfodefaultbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundstroke()) {
    if (!tschchartinfodefaultbackgroundstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbordershadow()) {
    if (!tschchartinfodefaultbordershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultborderstroke()) {
    if (!tschchartinfodefaultborderstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultgridbackgroundfill()) {
    if (!tschchartinfodefaultgridbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaulttitlecolor()) {
    if (!tschchartinfodefaulttitlecolor_->IsInitialized()) return false;
  }
  return true;
}

void ChartStyleArchive::InternalSwap(ChartStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultshowborder_)
      + sizeof(ChartStyleArchive::tschchartinfodefaultshowborder_)
      - PROTOBUF_FIELD_OFFSET(ChartStyleArchive, tschchartinfoarea3dlightingpackage_)>(
          reinterpret_cast<char*>(&tschchartinfoarea3dlightingpackage_),
          reinterpret_cast<char*>(&other->tschchartinfoarea3dlightingpackage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[0]);
}

// ===================================================================

class ChartNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartNonStyleArchive>()._has_bits_);
  static void set_has_tschchartinfodefault3dbarshape(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfodefault3dbeveledges(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartinfodefault3dintersetdepthgap(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3drotation(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3drotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoarea3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoarea3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfobar3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfobar3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoline3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoline3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfopie3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfopie3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dviewport(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartinfoareacalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartinfobarcalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartinfobubblecalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartinfodefaultcalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartinfolinecalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartinfopiecalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfoscattercalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartinfostackedareacalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartinfostackedbarcalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartinfodefaultdeprecatedroundedcornerouterendonly(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartinfodefaultdeprecatedroundedcornerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartinfodefaultdatasetnamelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartinfodefaultdonutplacetitleatcenter(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartinfodefaultinnerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartinfodefaultmultidatacontroltype(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartinfodefaultpiestartangle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartinfodefaultshowlegend(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodefaultshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartinfodefaultskiphiddendata(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartinfodefaulttitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3drotation(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfodefault3drotation_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoarea3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfoarea3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfobar3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfobar3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfocolumn3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfodefault3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoline3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfoline3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfopie3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfopie3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfodefault3dviewport_;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3drotation() {
  if (tschchartinfodefault3drotation_ != nullptr) tschchartinfodefault3drotation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartNonStyleArchive::clear_tschchartinfoarea3dscale() {
  if (tschchartinfoarea3dscale_ != nullptr) tschchartinfoarea3dscale_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartNonStyleArchive::clear_tschchartinfobar3dscale() {
  if (tschchartinfobar3dscale_ != nullptr) tschchartinfobar3dscale_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartNonStyleArchive::clear_tschchartinfocolumn3dscale() {
  if (tschchartinfocolumn3dscale_ != nullptr) tschchartinfocolumn3dscale_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dscale() {
  if (tschchartinfodefault3dscale_ != nullptr) tschchartinfodefault3dscale_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartNonStyleArchive::clear_tschchartinfoline3dscale() {
  if (tschchartinfoline3dscale_ != nullptr) tschchartinfoline3dscale_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartNonStyleArchive::clear_tschchartinfopie3dscale() {
  if (tschchartinfopie3dscale_ != nullptr) tschchartinfopie3dscale_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dviewport() {
  if (tschchartinfodefault3dviewport_ != nullptr) tschchartinfodefault3dviewport_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
ChartNonStyleArchive::ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartNonStyleArchive)
}
ChartNonStyleArchive::ChartNonStyleArchive(const ChartNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartinfodefaulttitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartinfodefaulttitle()) {
    tschchartinfodefaulttitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartinfodefaulttitle(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tschchartinfodefault3drotation()) {
    tschchartinfodefault3drotation_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfodefault3drotation_);
  } else {
    tschchartinfodefault3drotation_ = nullptr;
  }
  if (from._internal_has_tschchartinfoarea3dscale()) {
    tschchartinfoarea3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfoarea3dscale_);
  } else {
    tschchartinfoarea3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfobar3dscale()) {
    tschchartinfobar3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfobar3dscale_);
  } else {
    tschchartinfobar3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfocolumn3dscale()) {
    tschchartinfocolumn3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfocolumn3dscale_);
  } else {
    tschchartinfocolumn3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefault3dscale()) {
    tschchartinfodefault3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfodefault3dscale_);
  } else {
    tschchartinfodefault3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfoline3dscale()) {
    tschchartinfoline3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfoline3dscale_);
  } else {
    tschchartinfoline3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfopie3dscale()) {
    tschchartinfopie3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfopie3dscale_);
  } else {
    tschchartinfopie3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefault3dviewport()) {
    tschchartinfodefault3dviewport_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfodefault3dviewport_);
  } else {
    tschchartinfodefault3dviewport_ = nullptr;
  }
  ::memcpy(&tschchartinfodefault3dbarshape_, &from.tschchartinfodefault3dbarshape_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfodefaultdeprecatedroundedcornerradius_) -
    reinterpret_cast<char*>(&tschchartinfodefault3dbarshape_)) + sizeof(tschchartinfodefaultdeprecatedroundedcornerradius_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartNonStyleArchive)
}

inline void ChartNonStyleArchive::SharedCtor() {
tschchartinfodefaulttitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschchartinfodefault3drotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfodefaultdeprecatedroundedcornerradius_) -
    reinterpret_cast<char*>(&tschchartinfodefault3drotation_)) + sizeof(tschchartinfodefaultdeprecatedroundedcornerradius_));
}

ChartNonStyleArchive::~ChartNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartNonStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tschchartinfodefaulttitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tschchartinfodefault3drotation_;
  if (this != internal_default_instance()) delete tschchartinfoarea3dscale_;
  if (this != internal_default_instance()) delete tschchartinfobar3dscale_;
  if (this != internal_default_instance()) delete tschchartinfocolumn3dscale_;
  if (this != internal_default_instance()) delete tschchartinfodefault3dscale_;
  if (this != internal_default_instance()) delete tschchartinfoline3dscale_;
  if (this != internal_default_instance()) delete tschchartinfopie3dscale_;
  if (this != internal_default_instance()) delete tschchartinfodefault3dviewport_;
}

void ChartNonStyleArchive::ArenaDtor(void* object) {
  ChartNonStyleArchive* _this = reinterpret_cast< ChartNonStyleArchive* >(object);
  (void)_this;
}
void ChartNonStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartNonStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartinfodefaulttitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartinfodefault3drotation_ != nullptr);
      tschchartinfodefault3drotation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartinfoarea3dscale_ != nullptr);
      tschchartinfoarea3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartinfobar3dscale_ != nullptr);
      tschchartinfobar3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartinfocolumn3dscale_ != nullptr);
      tschchartinfocolumn3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartinfodefault3dscale_ != nullptr);
      tschchartinfodefault3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartinfoline3dscale_ != nullptr);
      tschchartinfoline3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartinfopie3dscale_ != nullptr);
      tschchartinfopie3dscale_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(tschchartinfodefault3dviewport_ != nullptr);
    tschchartinfodefault3dviewport_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&tschchartinfodefault3dbarshape_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfodefaultmultidatacontroltype_) -
        reinterpret_cast<char*>(&tschchartinfodefault3dbarshape_)) + sizeof(tschchartinfodefaultmultidatacontroltype_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartinfodefaultinnerradius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfobarcalloutlinetype_) -
        reinterpret_cast<char*>(&tschchartinfodefaultinnerradius_)) + sizeof(tschchartinfobarcalloutlinetype_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&tschchartinfobubblecalloutlinetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfodefaultdeprecatedroundedcornerradius_) -
        reinterpret_cast<char*>(&tschchartinfobubblecalloutlinetype_)) + sizeof(tschchartinfodefaultdeprecatedroundedcornerradius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartNonStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschchartinfodefault3dbarshape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartinfodefault3dbarshape(&has_bits);
          tschchartinfodefault3dbarshape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefault3dbeveledges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartinfodefault3dbeveledges(&has_bits);
          tschchartinfodefault3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefault3dintersetdepthgap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tschchartinfodefault3dintersetdepthgap(&has_bits);
          tschchartinfodefault3dintersetdepthgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3drotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dviewport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultpiestartangle = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_tschchartinfodefaultpiestartangle(&has_bits);
          tschchartinfodefaultpiestartangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowlegend = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartinfodefaultshowlegend(&has_bits);
          tschchartinfodefaultshowlegend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowtitle = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartinfodefaultshowtitle(&has_bits);
          tschchartinfodefaultshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultskiphiddendata = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartinfodefaultskiphiddendata(&has_bits);
          tschchartinfodefaultskiphiddendata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartinfodefaulttitle = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_tschchartinfodefaulttitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartinfodefaultdatasetnamelocation(&has_bits);
          tschchartinfodefaultdatasetnamelocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartinfodefaultmultidatacontroltype(&has_bits);
          tschchartinfodefaultmultidatacontroltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultinnerradius = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_tschchartinfodefaultinnerradius(&has_bits);
          tschchartinfodefaultinnerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultdonutplacetitleatcenter = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartinfodefaultdonutplacetitleatcenter(&has_bits);
          tschchartinfodefaultdonutplacetitleatcenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfopiecalloutlinetype = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartinfopiecalloutlinetype(&has_bits);
          tschchartinfopiecalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfoareacalloutlinetype = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartinfoareacalloutlinetype(&has_bits);
          tschchartinfoareacalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfobarcalloutlinetype = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tschchartinfobarcalloutlinetype(&has_bits);
          tschchartinfobarcalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfobubblecalloutlinetype = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartinfobubblecalloutlinetype(&has_bits);
          tschchartinfobubblecalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfolinecalloutlinetype = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartinfolinecalloutlinetype(&has_bits);
          tschchartinfolinecalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfoscattercalloutlinetype = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartinfoscattercalloutlinetype(&has_bits);
          tschchartinfoscattercalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfostackedareacalloutlinetype = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartinfostackedareacalloutlinetype(&has_bits);
          tschchartinfostackedareacalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfostackedbarcalloutlinetype = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartinfostackedbarcalloutlinetype(&has_bits);
          tschchartinfostackedbarcalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultcalloutlinetype = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartinfodefaultcalloutlinetype(&has_bits);
          tschchartinfodefaultcalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultdeprecatedroundedcornerradius = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedroundedcornerradius(&has_bits);
          tschchartinfodefaultdeprecatedroundedcornerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultdeprecatedroundedcornerouterendonly = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedroundedcornerouterendonly(&has_bits);
          tschchartinfodefaultdeprecatedroundedcornerouterendonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartNonStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tschchartinfodefault3dbarshape = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschchartinfodefault3dbarshape(), target);
  }

  // optional bool tschchartinfodefault3dbeveledges = 2;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_tschchartinfodefault3dbeveledges(), target);
  }

  // optional float tschchartinfodefault3dintersetdepthgap = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tschchartinfodefault3dintersetdepthgap(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tschchartinfodefault3drotation(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tschchartinfoarea3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tschchartinfobar3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tschchartinfocolumn3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tschchartinfodefault3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tschchartinfoline3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tschchartinfopie3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tschchartinfodefault3dviewport(this), target, stream);
  }

  // optional float tschchartinfodefaultpiestartangle = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartinfodefaultpiestartangle(), target);
  }

  // optional bool tschchartinfodefaultshowlegend = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_tschchartinfodefaultshowlegend(), target);
  }

  // optional bool tschchartinfodefaultshowtitle = 21;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_tschchartinfodefaultshowtitle(), target);
  }

  // optional bool tschchartinfodefaultskiphiddendata = 22;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_tschchartinfodefaultskiphiddendata(), target);
  }

  // optional string tschchartinfodefaulttitle = 23;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartinfodefaulttitle().data(), static_cast<int>(this->_internal_tschchartinfodefaulttitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_tschchartinfodefaulttitle(), target);
  }

  // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_tschchartinfodefaultdatasetnamelocation(), target);
  }

  // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartinfodefaultmultidatacontroltype(), target);
  }

  // optional float tschchartinfodefaultinnerradius = 27;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_tschchartinfodefaultinnerradius(), target);
  }

  // optional bool tschchartinfodefaultdonutplacetitleatcenter = 28;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartinfodefaultdonutplacetitleatcenter(), target);
  }

  // optional int32 tschchartinfopiecalloutlinetype = 111;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(111, this->_internal_tschchartinfopiecalloutlinetype(), target);
  }

  // optional int32 tschchartinfoareacalloutlinetype = 112;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(112, this->_internal_tschchartinfoareacalloutlinetype(), target);
  }

  // optional int32 tschchartinfobarcalloutlinetype = 113;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(113, this->_internal_tschchartinfobarcalloutlinetype(), target);
  }

  // optional int32 tschchartinfobubblecalloutlinetype = 114;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(114, this->_internal_tschchartinfobubblecalloutlinetype(), target);
  }

  // optional int32 tschchartinfolinecalloutlinetype = 115;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(115, this->_internal_tschchartinfolinecalloutlinetype(), target);
  }

  // optional int32 tschchartinfoscattercalloutlinetype = 116;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(116, this->_internal_tschchartinfoscattercalloutlinetype(), target);
  }

  // optional int32 tschchartinfostackedareacalloutlinetype = 117;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(117, this->_internal_tschchartinfostackedareacalloutlinetype(), target);
  }

  // optional int32 tschchartinfostackedbarcalloutlinetype = 118;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(118, this->_internal_tschchartinfostackedbarcalloutlinetype(), target);
  }

  // optional int32 tschchartinfodefaultcalloutlinetype = 119;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(119, this->_internal_tschchartinfodefaultcalloutlinetype(), target);
  }

  // optional float tschchartinfodefaultdeprecatedroundedcornerradius = 120;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(120, this->_internal_tschchartinfodefaultdeprecatedroundedcornerradius(), target);
  }

  // optional bool tschchartinfodefaultdeprecatedroundedcornerouterendonly = 121;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(121, this->_internal_tschchartinfodefaultdeprecatedroundedcornerouterendonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartNonStyleArchive)
  return target;
}

size_t ChartNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartNonStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartinfodefaulttitle = 23;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartinfodefaulttitle());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefault3drotation_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoarea3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfobar3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfocolumn3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefault3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoline3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfopie3dscale_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefault3dviewport_);
    }

    // optional int32 tschchartinfodefault3dbarshape = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefault3dbarshape());
    }

    // optional float tschchartinfodefault3dintersetdepthgap = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultpiestartangle = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfodefaultshowtitle = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultskiphiddendata = 22;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdatasetnamelocation());
    }

    // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultmultidatacontroltype());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartinfodefaultinnerradius = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfodefault3dbeveledges = 2;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodefaultdeprecatedroundedcornerouterendonly = 121;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultdonutplacetitleatcenter = 28;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultshowlegend = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfopiecalloutlinetype = 111;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfopiecalloutlinetype());
    }

    // optional int32 tschchartinfoareacalloutlinetype = 112;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfoareacalloutlinetype());
    }

    // optional int32 tschchartinfobarcalloutlinetype = 113;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfobarcalloutlinetype());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional int32 tschchartinfobubblecalloutlinetype = 114;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfobubblecalloutlinetype());
    }

    // optional int32 tschchartinfolinecalloutlinetype = 115;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfolinecalloutlinetype());
    }

    // optional int32 tschchartinfoscattercalloutlinetype = 116;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfoscattercalloutlinetype());
    }

    // optional int32 tschchartinfostackedareacalloutlinetype = 117;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfostackedareacalloutlinetype());
    }

    // optional int32 tschchartinfostackedbarcalloutlinetype = 118;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfostackedbarcalloutlinetype());
    }

    // optional int32 tschchartinfodefaultcalloutlinetype = 119;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultcalloutlinetype());
    }

    // optional float tschchartinfodefaultdeprecatedroundedcornerradius = 120;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartNonStyleArchive::GetClassData() const { return &_class_data_; }

void ChartNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartNonStyleArchive *>(to)->MergeFrom(
      static_cast<const ChartNonStyleArchive &>(from));
}


void ChartNonStyleArchive::MergeFrom(const ChartNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartinfodefaulttitle(from._internal_tschchartinfodefaulttitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartinfodefault3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfodefault3drotation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartinfoarea3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfoarea3dscale());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartinfobar3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfobar3dscale());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartinfocolumn3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfocolumn3dscale());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartinfodefault3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfodefault3dscale());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartinfoline3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfoline3dscale());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartinfopie3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfopie3dscale());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartinfodefault3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfodefault3dviewport());
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartinfodefault3dbarshape_ = from.tschchartinfodefault3dbarshape_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartinfodefault3dintersetdepthgap_ = from.tschchartinfodefault3dintersetdepthgap_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartinfodefaultpiestartangle_ = from.tschchartinfodefaultpiestartangle_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartinfodefaultshowtitle_ = from.tschchartinfodefaultshowtitle_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartinfodefaultskiphiddendata_ = from.tschchartinfodefaultskiphiddendata_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartinfodefaultdatasetnamelocation_ = from.tschchartinfodefaultdatasetnamelocation_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartinfodefaultmultidatacontroltype_ = from.tschchartinfodefaultmultidatacontroltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartinfodefaultinnerradius_ = from.tschchartinfodefaultinnerradius_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartinfodefault3dbeveledges_ = from.tschchartinfodefault3dbeveledges_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartinfodefaultdeprecatedroundedcornerouterendonly_ = from.tschchartinfodefaultdeprecatedroundedcornerouterendonly_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartinfodefaultdonutplacetitleatcenter_ = from.tschchartinfodefaultdonutplacetitleatcenter_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartinfodefaultshowlegend_ = from.tschchartinfodefaultshowlegend_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartinfopiecalloutlinetype_ = from.tschchartinfopiecalloutlinetype_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartinfoareacalloutlinetype_ = from.tschchartinfoareacalloutlinetype_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartinfobarcalloutlinetype_ = from.tschchartinfobarcalloutlinetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartinfobubblecalloutlinetype_ = from.tschchartinfobubblecalloutlinetype_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartinfolinecalloutlinetype_ = from.tschchartinfolinecalloutlinetype_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartinfoscattercalloutlinetype_ = from.tschchartinfoscattercalloutlinetype_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartinfostackedareacalloutlinetype_ = from.tschchartinfostackedareacalloutlinetype_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartinfostackedbarcalloutlinetype_ = from.tschchartinfostackedbarcalloutlinetype_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartinfodefaultcalloutlinetype_ = from.tschchartinfodefaultcalloutlinetype_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartinfodefaultdeprecatedroundedcornerradius_ = from.tschchartinfodefaultdeprecatedroundedcornerradius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartNonStyleArchive::CopyFrom(const ChartNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartNonStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartinfodefault3drotation()) {
    if (!tschchartinfodefault3drotation_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoarea3dscale()) {
    if (!tschchartinfoarea3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dscale()) {
    if (!tschchartinfobar3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dscale()) {
    if (!tschchartinfocolumn3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dscale()) {
    if (!tschchartinfodefault3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dscale()) {
    if (!tschchartinfoline3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dscale()) {
    if (!tschchartinfopie3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dviewport()) {
    if (!tschchartinfodefault3dviewport_->IsInitialized()) return false;
  }
  return true;
}

void ChartNonStyleArchive::InternalSwap(ChartNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tschchartinfodefaulttitle_, GetArenaForAllocation(),
      &other->tschchartinfodefaulttitle_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultdeprecatedroundedcornerradius_)
      + sizeof(ChartNonStyleArchive::tschchartinfodefaultdeprecatedroundedcornerradius_)
      - PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3drotation_)>(
          reinterpret_cast<char*>(&tschchartinfodefault3drotation_),
          reinterpret_cast<char*>(&other->tschchartinfodefault3drotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartNonStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[1]);
}

// ===================================================================

class LegendStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendStyleArchive>()._has_bits_);
  static const ::TSD::FillArchive& tschlegendmodeldefaultfill(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschlegendmodeldefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschlegendmodeldefaultopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschlegendmodeldefaultshadow(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschlegendmodeldefaultstroke(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSD::FillArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultfill(const LegendStyleArchive* msg) {
  return *msg->tschlegendmodeldefaultfill_;
}
const ::TSD::ShadowArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultshadow(const LegendStyleArchive* msg) {
  return *msg->tschlegendmodeldefaultshadow_;
}
const ::TSD::StrokeArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultstroke(const LegendStyleArchive* msg) {
  return *msg->tschlegendmodeldefaultstroke_;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultfill() {
  if (tschlegendmodeldefaultfill_ != nullptr) tschlegendmodeldefaultfill_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultshadow() {
  if (tschlegendmodeldefaultshadow_ != nullptr) tschlegendmodeldefaultshadow_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultstroke() {
  if (tschlegendmodeldefaultstroke_ != nullptr) tschlegendmodeldefaultstroke_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
LegendStyleArchive::LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.LegendStyleArchive)
}
LegendStyleArchive::LegendStyleArchive(const LegendStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschlegendmodeldefaultfill()) {
    tschlegendmodeldefaultfill_ = new ::TSD::FillArchive(*from.tschlegendmodeldefaultfill_);
  } else {
    tschlegendmodeldefaultfill_ = nullptr;
  }
  if (from._internal_has_tschlegendmodeldefaultshadow()) {
    tschlegendmodeldefaultshadow_ = new ::TSD::ShadowArchive(*from.tschlegendmodeldefaultshadow_);
  } else {
    tschlegendmodeldefaultshadow_ = nullptr;
  }
  if (from._internal_has_tschlegendmodeldefaultstroke()) {
    tschlegendmodeldefaultstroke_ = new ::TSD::StrokeArchive(*from.tschlegendmodeldefaultstroke_);
  } else {
    tschlegendmodeldefaultstroke_ = nullptr;
  }
  ::memcpy(&tschlegendmodeldefaultlabelparagraphstyleindex_, &from.tschlegendmodeldefaultlabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschlegendmodeldefaultopacity_) -
    reinterpret_cast<char*>(&tschlegendmodeldefaultlabelparagraphstyleindex_)) + sizeof(tschlegendmodeldefaultopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.LegendStyleArchive)
}

inline void LegendStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschlegendmodeldefaultfill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschlegendmodeldefaultopacity_) -
    reinterpret_cast<char*>(&tschlegendmodeldefaultfill_)) + sizeof(tschlegendmodeldefaultopacity_));
}

LegendStyleArchive::~LegendStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.LegendStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LegendStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tschlegendmodeldefaultfill_;
  if (this != internal_default_instance()) delete tschlegendmodeldefaultshadow_;
  if (this != internal_default_instance()) delete tschlegendmodeldefaultstroke_;
}

void LegendStyleArchive::ArenaDtor(void* object) {
  LegendStyleArchive* _this = reinterpret_cast< LegendStyleArchive* >(object);
  (void)_this;
}
void LegendStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LegendStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LegendStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.LegendStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tschlegendmodeldefaultfill_ != nullptr);
      tschlegendmodeldefaultfill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschlegendmodeldefaultshadow_ != nullptr);
      tschlegendmodeldefaultshadow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschlegendmodeldefaultstroke_ != nullptr);
      tschlegendmodeldefaultstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&tschlegendmodeldefaultlabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschlegendmodeldefaultopacity_) -
        reinterpret_cast<char*>(&tschlegendmodeldefaultlabelparagraphstyleindex_)) + sizeof(tschlegendmodeldefaultopacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschlegendmodeldefaultlabelparagraphstyleindex(&has_bits);
          tschlegendmodeldefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschlegendmodeldefaultopacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tschlegendmodeldefaultopacity(&has_bits);
          tschlegendmodeldefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LegendStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.LegendStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tschlegendmodeldefaultfill(this), target, stream);
  }

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex(), target);
  }

  // optional float tschlegendmodeldefaultopacity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tschlegendmodeldefaultopacity(), target);
  }

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tschlegendmodeldefaultshadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tschlegendmodeldefaultstroke(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.LegendStyleArchive)
  return target;
}

size_t LegendStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.LegendStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschlegendmodeldefaultfill_);
    }

    // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschlegendmodeldefaultshadow_);
    }

    // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschlegendmodeldefaultstroke_);
    }

    // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex());
    }

    // optional float tschlegendmodeldefaultopacity = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LegendStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendStyleArchive::GetClassData() const { return &_class_data_; }

void LegendStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LegendStyleArchive *>(to)->MergeFrom(
      static_cast<const LegendStyleArchive &>(from));
}


void LegendStyleArchive::MergeFrom(const LegendStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.LegendStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tschlegendmodeldefaultfill()->::TSD::FillArchive::MergeFrom(from._internal_tschlegendmodeldefaultfill());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschlegendmodeldefaultshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschlegendmodeldefaultshadow());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschlegendmodeldefaultstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschlegendmodeldefaultstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      tschlegendmodeldefaultlabelparagraphstyleindex_ = from.tschlegendmodeldefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschlegendmodeldefaultopacity_ = from.tschlegendmodeldefaultopacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LegendStyleArchive::CopyFrom(const LegendStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.LegendStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendStyleArchive::IsInitialized() const {
  if (_internal_has_tschlegendmodeldefaultfill()) {
    if (!tschlegendmodeldefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultshadow()) {
    if (!tschlegendmodeldefaultshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultstroke()) {
    if (!tschlegendmodeldefaultstroke_->IsInitialized()) return false;
  }
  return true;
}

void LegendStyleArchive::InternalSwap(LegendStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultopacity_)
      + sizeof(LegendStyleArchive::tschlegendmodeldefaultopacity_)
      - PROTOBUF_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultfill_)>(
          reinterpret_cast<char*>(&tschlegendmodeldefaultfill_),
          reinterpret_cast<char*>(&other->tschlegendmodeldefaultfill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[2]);
}

// ===================================================================

class LegendNonStyleArchive::_Internal {
 public:
};

LegendNonStyleArchive::LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.LegendNonStyleArchive)
}
LegendNonStyleArchive::LegendNonStyleArchive(const LegendNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.LegendNonStyleArchive)
}

inline void LegendNonStyleArchive::SharedCtor() {
}

LegendNonStyleArchive::~LegendNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.LegendNonStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LegendNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LegendNonStyleArchive::ArenaDtor(void* object) {
  LegendNonStyleArchive* _this = reinterpret_cast< LegendNonStyleArchive* >(object);
  (void)_this;
}
void LegendNonStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LegendNonStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LegendNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.LegendNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendNonStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LegendNonStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.LegendNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.LegendNonStyleArchive)
  return target;
}

size_t LegendNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.LegendNonStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LegendNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendNonStyleArchive::GetClassData() const { return &_class_data_; }

void LegendNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LegendNonStyleArchive *>(to)->MergeFrom(
      static_cast<const LegendNonStyleArchive &>(from));
}


void LegendNonStyleArchive::MergeFrom(const LegendNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.LegendNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LegendNonStyleArchive::CopyFrom(const LegendNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.LegendNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendNonStyleArchive::IsInitialized() const {
  return true;
}

void LegendNonStyleArchive::InternalSwap(LegendNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendNonStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[3]);
}

// ===================================================================

class ChartAxisStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisStyleArchive>()._has_bits_);
  static void set_has_tschchartaxiscategory3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisvalue3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategory3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalue3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschchartaxiscategoryhorizontalspacing(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxiscategorylabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxisdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxisvaluelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxiscategorylabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxisdefaultlabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisvaluelabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxiscategorymajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartaxisvaluemajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschchartaxiscategoryminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartaxisvalueminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartaxiscategoryshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartaxisvalueshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartaxiscategoryshowlastlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartaxiscategoryshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartaxisvalueshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartaxiscategoryshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartaxisvalueshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartaxisvalueshowminimumlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartaxiscategoryshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartaxisvalueshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartaxiscategoryshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartaxisvalueshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartaxiscategorytickmarklocation(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartaxisvaluetickmarklocation(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartaxiscategorytitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartaxisdefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartaxisvaluetitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartaxiscategoryverticalspacing(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
};

const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategory3dgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvalue3dgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategorymajorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvaluemajorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategorymajorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvaluemajorgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategoryminorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvalueminorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategoryminorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvalueminorgridlinestroke_;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlinestroke() {
  if (tschchartaxiscategory3dgridlinestroke_ != nullptr) tschchartaxiscategory3dgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlinestroke() {
  if (tschchartaxisvalue3dgridlinestroke_ != nullptr) tschchartaxisvalue3dgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineshadow() {
  if (tschchartaxiscategorymajorgridlineshadow_ != nullptr) tschchartaxiscategorymajorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineshadow() {
  if (tschchartaxisvaluemajorgridlineshadow_ != nullptr) tschchartaxisvaluemajorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlinestroke() {
  if (tschchartaxiscategorymajorgridlinestroke_ != nullptr) tschchartaxiscategorymajorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlinestroke() {
  if (tschchartaxisvaluemajorgridlinestroke_ != nullptr) tschchartaxisvaluemajorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineshadow() {
  if (tschchartaxiscategoryminorgridlineshadow_ != nullptr) tschchartaxiscategoryminorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineshadow() {
  if (tschchartaxisvalueminorgridlineshadow_ != nullptr) tschchartaxisvalueminorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlinestroke() {
  if (tschchartaxiscategoryminorgridlinestroke_ != nullptr) tschchartaxiscategoryminorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlinestroke() {
  if (tschchartaxisvalueminorgridlinestroke_ != nullptr) tschchartaxisvalueminorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
ChartAxisStyleArchive::ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartAxisStyleArchive)
}
ChartAxisStyleArchive::ChartAxisStyleArchive(const ChartAxisStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschchartaxiscategory3dgridlinestroke()) {
    tschchartaxiscategory3dgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxiscategory3dgridlinestroke_);
  } else {
    tschchartaxiscategory3dgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvalue3dgridlinestroke()) {
    tschchartaxisvalue3dgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxisvalue3dgridlinestroke_);
  } else {
    tschchartaxisvalue3dgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    tschchartaxiscategorymajorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxiscategorymajorgridlineshadow_);
  } else {
    tschchartaxiscategorymajorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    tschchartaxisvaluemajorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxisvaluemajorgridlineshadow_);
  } else {
    tschchartaxisvaluemajorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    tschchartaxiscategorymajorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxiscategorymajorgridlinestroke_);
  } else {
    tschchartaxiscategorymajorgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    tschchartaxisvaluemajorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxisvaluemajorgridlinestroke_);
  } else {
    tschchartaxisvaluemajorgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    tschchartaxiscategoryminorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxiscategoryminorgridlineshadow_);
  } else {
    tschchartaxiscategoryminorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvalueminorgridlineshadow()) {
    tschchartaxisvalueminorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxisvalueminorgridlineshadow_);
  } else {
    tschchartaxisvalueminorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    tschchartaxiscategoryminorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxiscategoryminorgridlinestroke_);
  } else {
    tschchartaxiscategoryminorgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvalueminorgridlinestroke()) {
    tschchartaxisvalueminorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxisvalueminorgridlinestroke_);
  } else {
    tschchartaxisvalueminorgridlinestroke_ = nullptr;
  }
  ::memcpy(&tschchartaxiscategory3dgridlineopacity_, &from.tschchartaxiscategory3dgridlineopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxiscategoryverticalspacing_) -
    reinterpret_cast<char*>(&tschchartaxiscategory3dgridlineopacity_)) + sizeof(tschchartaxiscategoryverticalspacing_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartAxisStyleArchive)
}

inline void ChartAxisStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschchartaxiscategory3dgridlinestroke_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxiscategoryverticalspacing_) -
    reinterpret_cast<char*>(&tschchartaxiscategory3dgridlinestroke_)) + sizeof(tschchartaxiscategoryverticalspacing_));
}

ChartAxisStyleArchive::~ChartAxisStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartAxisStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartAxisStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tschchartaxiscategory3dgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxisvalue3dgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxiscategorymajorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxisvaluemajorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxiscategorymajorgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxisvaluemajorgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxiscategoryminorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxisvalueminorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxiscategoryminorgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxisvalueminorgridlinestroke_;
}

void ChartAxisStyleArchive::ArenaDtor(void* object) {
  ChartAxisStyleArchive* _this = reinterpret_cast< ChartAxisStyleArchive* >(object);
  (void)_this;
}
void ChartAxisStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartAxisStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartAxisStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartAxisStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tschchartaxiscategory3dgridlinestroke_ != nullptr);
      tschchartaxiscategory3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartaxisvalue3dgridlinestroke_ != nullptr);
      tschchartaxisvalue3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartaxiscategorymajorgridlineshadow_ != nullptr);
      tschchartaxiscategorymajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartaxisvaluemajorgridlineshadow_ != nullptr);
      tschchartaxisvaluemajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartaxiscategorymajorgridlinestroke_ != nullptr);
      tschchartaxiscategorymajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartaxisvaluemajorgridlinestroke_ != nullptr);
      tschchartaxisvaluemajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartaxiscategoryminorgridlineshadow_ != nullptr);
      tschchartaxiscategoryminorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartaxisvalueminorgridlineshadow_ != nullptr);
      tschchartaxisvalueminorgridlineshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartaxiscategoryminorgridlinestroke_ != nullptr);
      tschchartaxiscategoryminorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartaxisvalueminorgridlinestroke_ != nullptr);
      tschchartaxisvalueminorgridlinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&tschchartaxiscategory3dgridlineopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxisvaluelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschchartaxiscategory3dgridlineopacity_)) + sizeof(tschchartaxisvaluelabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartaxiscategorylabelsorientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxiscategoryshowaxis_) -
        reinterpret_cast<char*>(&tschchartaxiscategorylabelsorientation_)) + sizeof(tschchartaxiscategoryshowaxis_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartaxisvalueshowaxis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxiscategoryshowminorgridlines_) -
        reinterpret_cast<char*>(&tschchartaxisvalueshowaxis_)) + sizeof(tschchartaxiscategoryshowminorgridlines_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartaxisvalueshowminorgridlines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxisvaluetitleparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschchartaxisvalueshowminorgridlines_)) + sizeof(tschchartaxisvaluetitleparagraphstyleindex_));
  }
  tschchartaxiscategoryverticalspacing_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float tschchartaxiscategory3dgridlineopacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_tschchartaxiscategory3dgridlineopacity(&_has_bits_);
          tschchartaxiscategory3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisvalue3dgridlineopacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_tschchartaxisvalue3dgridlineopacity(&_has_bits_);
          tschchartaxisvalue3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategory3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalue3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartaxiscategoryhorizontalspacing(&_has_bits_);
          tschchartaxiscategoryhorizontalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartaxiscategorylabelparagraphstyleindex(&_has_bits_);
          tschchartaxiscategorylabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartaxisdefaultlabelparagraphstyleindex(&_has_bits_);
          tschchartaxisdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tschchartaxisvaluelabelparagraphstyleindex(&_has_bits_);
          tschchartaxisvaluelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorylabelsorientation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_tschchartaxiscategorylabelsorientation(&_has_bits_);
          tschchartaxiscategorylabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisdefaultlabelsorientation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_tschchartaxisdefaultlabelsorientation(&_has_bits_);
          tschchartaxisdefaultlabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluelabelsorientation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_tschchartaxisvaluelabelsorientation(&_has_bits_);
          tschchartaxisvaluelabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorymajorgridlineopacity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_tschchartaxiscategorymajorgridlineopacity(&_has_bits_);
          tschchartaxiscategorymajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluemajorgridlineopacity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_tschchartaxisvaluemajorgridlineopacity(&_has_bits_);
          tschchartaxisvaluemajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxiscategoryminorgridlineopacity = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_tschchartaxiscategoryminorgridlineopacity(&_has_bits_);
          tschchartaxiscategoryminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisvalueminorgridlineopacity = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_tschchartaxisvalueminorgridlineopacity(&_has_bits_);
          tschchartaxisvalueminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowaxis = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartaxiscategoryshowaxis(&_has_bits_);
          tschchartaxiscategoryshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowaxis = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartaxisvalueshowaxis(&_has_bits_);
          tschchartaxisvalueshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlastlabel = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartaxiscategoryshowlastlabel(&_has_bits_);
          tschchartaxiscategoryshowlastlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartaxiscategoryshowmajorgridlines(&_has_bits_);
          tschchartaxiscategoryshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajorgridlines = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartaxisvalueshowmajorgridlines(&_has_bits_);
          tschchartaxisvalueshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartaxiscategoryshowmajortickmarks(&_has_bits_);
          tschchartaxiscategoryshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajortickmarks = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartaxisvalueshowmajortickmarks(&_has_bits_);
          tschchartaxisvalueshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminimumlabel = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartaxisvalueshowminimumlabel(&_has_bits_);
          tschchartaxisvalueshowminimumlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminorgridlines = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartaxiscategoryshowminorgridlines(&_has_bits_);
          tschchartaxiscategoryshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminorgridlines = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartaxisvalueshowminorgridlines(&_has_bits_);
          tschchartaxisvalueshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminortickmarks = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartaxiscategoryshowminortickmarks(&_has_bits_);
          tschchartaxiscategoryshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminortickmarks = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschchartaxisvalueshowminortickmarks(&_has_bits_);
          tschchartaxisvalueshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytickmarklocation = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartaxiscategorytickmarklocation(&_has_bits_);
          tschchartaxiscategorytickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetickmarklocation = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartaxisvaluetickmarklocation(&_has_bits_);
          tschchartaxisvaluetickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartaxiscategorytitleparagraphstyleindex(&_has_bits_);
          tschchartaxiscategorytitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartaxisdefaulttitleparagraphstyleindex(&_has_bits_);
          tschchartaxisdefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tschchartaxisvaluetitleparagraphstyleindex(&_has_bits_);
          tschchartaxisvaluetitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryverticalspacing = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschchartaxiscategoryverticalspacing(&_has_bits_);
          tschchartaxiscategoryverticalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartAxisStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartAxisStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float tschchartaxiscategory3dgridlineopacity = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_tschchartaxiscategory3dgridlineopacity(), target);
  }

  // optional float tschchartaxisvalue3dgridlineopacity = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_tschchartaxisvalue3dgridlineopacity(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tschchartaxiscategory3dgridlinestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tschchartaxisvalue3dgridlinestroke(this), target, stream);
  }

  // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tschchartaxiscategoryhorizontalspacing(), target);
  }

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_tschchartaxiscategorylabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_tschchartaxisdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_tschchartaxisvaluelabelparagraphstyleindex(), target);
  }

  // optional float tschchartaxiscategorylabelsorientation = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_tschchartaxiscategorylabelsorientation(), target);
  }

  // optional float tschchartaxisdefaultlabelsorientation = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_tschchartaxisdefaultlabelsorientation(), target);
  }

  // optional float tschchartaxisvaluelabelsorientation = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_tschchartaxisvaluelabelsorientation(), target);
  }

  // optional float tschchartaxiscategorymajorgridlineopacity = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_tschchartaxiscategorymajorgridlineopacity(), target);
  }

  // optional float tschchartaxisvaluemajorgridlineopacity = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_tschchartaxisvaluemajorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::tschchartaxiscategorymajorgridlineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::tschchartaxisvaluemajorgridlineshadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::tschchartaxiscategorymajorgridlinestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::tschchartaxisvaluemajorgridlinestroke(this), target, stream);
  }

  // optional float tschchartaxiscategoryminorgridlineopacity = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_tschchartaxiscategoryminorgridlineopacity(), target);
  }

  // optional float tschchartaxisvalueminorgridlineopacity = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartaxisvalueminorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::tschchartaxiscategoryminorgridlineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::tschchartaxisvalueminorgridlineshadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::tschchartaxiscategoryminorgridlinestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::tschchartaxisvalueminorgridlinestroke(this), target, stream);
  }

  // optional bool tschchartaxiscategoryshowaxis = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_tschchartaxiscategoryshowaxis(), target);
  }

  // optional bool tschchartaxisvalueshowaxis = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_tschchartaxisvalueshowaxis(), target);
  }

  // optional bool tschchartaxiscategoryshowlastlabel = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_tschchartaxiscategoryshowlastlabel(), target);
  }

  // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartaxiscategoryshowmajorgridlines(), target);
  }

  // optional bool tschchartaxisvalueshowmajorgridlines = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartaxisvalueshowmajorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_tschchartaxiscategoryshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowmajortickmarks = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartaxisvalueshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminimumlabel = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_tschchartaxisvalueshowminimumlabel(), target);
  }

  // optional bool tschchartaxiscategoryshowminorgridlines = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartaxiscategoryshowminorgridlines(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartaxisvalueshowminorgridlines = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartaxisvalueshowminorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowminortickmarks = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_tschchartaxiscategoryshowminortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminortickmarks = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_tschchartaxisvalueshowminortickmarks(), target);
  }

  // optional int32 tschchartaxiscategorytickmarklocation = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_tschchartaxiscategorytickmarklocation(), target);
  }

  // optional int32 tschchartaxisvaluetickmarklocation = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_tschchartaxisvaluetickmarklocation(), target);
  }

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_tschchartaxiscategorytitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_tschchartaxisdefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_tschchartaxisvaluetitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_tschchartaxiscategoryverticalspacing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartAxisStyleArchive)
  return target;
}

size_t ChartAxisStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartAxisStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategory3dgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvalue3dgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategorymajorgridlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvaluemajorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategorymajorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvaluemajorgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategoryminorgridlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvalueminorgridlineshadow_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategoryminorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvalueminorgridlinestroke_);
    }

    // optional float tschchartaxiscategory3dgridlineopacity = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvalue3dgridlineopacity = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategoryhorizontalspacing());
    }

    // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorylabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluelabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartaxiscategorylabelsorientation = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisdefaultlabelsorientation = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvaluelabelsorientation = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxiscategorymajorgridlineopacity = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvaluemajorgridlineopacity = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxiscategoryminorgridlineopacity = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisvalueminorgridlineopacity = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartaxiscategoryshowaxis = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool tschchartaxisvalueshowaxis = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowlastlabel = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowmajorgridlines = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowmajortickmarks = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowminimumlabel = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminorgridlines = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool tschchartaxisvalueshowminorgridlines = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminortickmarks = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowminortickmarks = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxiscategorytickmarklocation = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytickmarklocation());
    }

    // optional int32 tschchartaxisvaluetickmarklocation = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluetickmarklocation());
    }

    // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluetitleparagraphstyleindex());
    }

  }
  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tschchartaxiscategoryverticalspacing());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartAxisStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisStyleArchive::GetClassData() const { return &_class_data_; }

void ChartAxisStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartAxisStyleArchive *>(to)->MergeFrom(
      static_cast<const ChartAxisStyleArchive &>(from));
}


void ChartAxisStyleArchive::MergeFrom(const ChartAxisStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartAxisStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tschchartaxiscategory3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxiscategory3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartaxisvalue3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxisvalue3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartaxiscategorymajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxiscategorymajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartaxisvaluemajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxisvaluemajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartaxiscategorymajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxiscategorymajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartaxisvaluemajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxisvaluemajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartaxiscategoryminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxiscategoryminorgridlineshadow());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartaxisvalueminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxisvalueminorgridlineshadow());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartaxiscategoryminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxiscategoryminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartaxisvalueminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxisvalueminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartaxiscategory3dgridlineopacity_ = from.tschchartaxiscategory3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartaxisvalue3dgridlineopacity_ = from.tschchartaxisvalue3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartaxiscategoryhorizontalspacing_ = from.tschchartaxiscategoryhorizontalspacing_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartaxiscategorylabelparagraphstyleindex_ = from.tschchartaxiscategorylabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartaxisdefaultlabelparagraphstyleindex_ = from.tschchartaxisdefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartaxisvaluelabelparagraphstyleindex_ = from.tschchartaxisvaluelabelparagraphstyleindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartaxiscategorylabelsorientation_ = from.tschchartaxiscategorylabelsorientation_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartaxisdefaultlabelsorientation_ = from.tschchartaxisdefaultlabelsorientation_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartaxisvaluelabelsorientation_ = from.tschchartaxisvaluelabelsorientation_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartaxiscategorymajorgridlineopacity_ = from.tschchartaxiscategorymajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartaxisvaluemajorgridlineopacity_ = from.tschchartaxisvaluemajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartaxiscategoryminorgridlineopacity_ = from.tschchartaxiscategoryminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartaxisvalueminorgridlineopacity_ = from.tschchartaxisvalueminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartaxiscategoryshowaxis_ = from.tschchartaxiscategoryshowaxis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartaxisvalueshowaxis_ = from.tschchartaxisvalueshowaxis_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartaxiscategoryshowlastlabel_ = from.tschchartaxiscategoryshowlastlabel_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartaxiscategoryshowmajorgridlines_ = from.tschchartaxiscategoryshowmajorgridlines_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartaxisvalueshowmajorgridlines_ = from.tschchartaxisvalueshowmajorgridlines_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartaxiscategoryshowmajortickmarks_ = from.tschchartaxiscategoryshowmajortickmarks_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartaxisvalueshowmajortickmarks_ = from.tschchartaxisvalueshowmajortickmarks_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartaxisvalueshowminimumlabel_ = from.tschchartaxisvalueshowminimumlabel_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartaxiscategoryshowminorgridlines_ = from.tschchartaxiscategoryshowminorgridlines_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartaxisvalueshowminorgridlines_ = from.tschchartaxisvalueshowminorgridlines_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartaxiscategoryshowminortickmarks_ = from.tschchartaxiscategoryshowminortickmarks_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartaxisvalueshowminortickmarks_ = from.tschchartaxisvalueshowminortickmarks_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartaxiscategorytickmarklocation_ = from.tschchartaxiscategorytickmarklocation_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartaxisvaluetickmarklocation_ = from.tschchartaxisvaluetickmarklocation_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartaxiscategorytitleparagraphstyleindex_ = from.tschchartaxiscategorytitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartaxisdefaulttitleparagraphstyleindex_ = from.tschchartaxisdefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartaxisvaluetitleparagraphstyleindex_ = from.tschchartaxisvaluetitleparagraphstyleindex_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_tschchartaxiscategoryverticalspacing(from._internal_tschchartaxiscategoryverticalspacing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisStyleArchive::CopyFrom(const ChartAxisStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartAxisStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartaxiscategory3dgridlinestroke()) {
    if (!tschchartaxiscategory3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalue3dgridlinestroke()) {
    if (!tschchartaxisvalue3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    if (!tschchartaxiscategorymajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    if (!tschchartaxisvaluemajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    if (!tschchartaxiscategorymajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    if (!tschchartaxisvaluemajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    if (!tschchartaxiscategoryminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlineshadow()) {
    if (!tschchartaxisvalueminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    if (!tschchartaxiscategoryminorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlinestroke()) {
    if (!tschchartaxisvalueminorgridlinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisStyleArchive::InternalSwap(ChartAxisStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryverticalspacing_)
      + sizeof(ChartAxisStyleArchive::tschchartaxiscategoryverticalspacing_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategory3dgridlinestroke_)>(
          reinterpret_cast<char*>(&tschchartaxiscategory3dgridlinestroke_),
          reinterpret_cast<char*>(&other->tschchartaxiscategory3dgridlinestroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[4]);
}

// ===================================================================

class ChartAxisNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisNonStyleArchive>()._has_bits_);
  static const ::TSK::FormatStructArchive& tschchartaxisdefault1_0dateformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefault1_0dateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdefault1_0numberformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefault1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartaxisdefault3dlabelposition(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdefaultdateformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultdateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdefaultdurationformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultdurationformat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartaxisdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisvaluenumberofdecades(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartaxisvaluenumberofmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxisvaluenumberofminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxiscategoryplottoedges(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxisvaluescale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxiscategoryshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxisdefaultshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisvalueshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxiscategoryshowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartaxismultidatashowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartaxiscategoryshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartaxisvalueshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartaxiscategorytitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartaxisvaluetitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefault1_0dateformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefault1_0dateformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefault1_0numberformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefault1_0numberformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultdateformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefaultdateformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultdurationformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefaultdurationformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefaultnumberformat_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefaultusermax_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefaultusermin_;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefault1_0dateformat() {
  if (tschchartaxisdefault1_0dateformat_ != nullptr) tschchartaxisdefault1_0dateformat_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefault1_0numberformat() {
  if (tschchartaxisdefault1_0numberformat_ != nullptr) tschchartaxisdefault1_0numberformat_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultdateformat() {
  if (tschchartaxisdefaultdateformat_ != nullptr) tschchartaxisdefaultdateformat_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultdurationformat() {
  if (tschchartaxisdefaultdurationformat_ != nullptr) tschchartaxisdefaultdurationformat_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultnumberformat() {
  if (tschchartaxisdefaultnumberformat_ != nullptr) tschchartaxisdefaultnumberformat_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermax() {
  if (tschchartaxisdefaultusermax_ != nullptr) tschchartaxisdefaultusermax_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermin() {
  if (tschchartaxisdefaultusermin_ != nullptr) tschchartaxisdefaultusermin_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartAxisNonStyleArchive)
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartaxiscategorytitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartaxiscategorytitle()) {
    tschchartaxiscategorytitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartaxiscategorytitle(), 
      GetArenaForAllocation());
  }
  tschchartaxisvaluetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartaxisvaluetitle()) {
    tschchartaxisvaluetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartaxisvaluetitle(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tschchartaxisdefault1_0numberformat()) {
    tschchartaxisdefault1_0numberformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxisdefault1_0numberformat_);
  } else {
    tschchartaxisdefault1_0numberformat_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdefaultusermax()) {
    tschchartaxisdefaultusermax_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from.tschchartaxisdefaultusermax_);
  } else {
    tschchartaxisdefaultusermax_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdefaultusermin()) {
    tschchartaxisdefaultusermin_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from.tschchartaxisdefaultusermin_);
  } else {
    tschchartaxisdefaultusermin_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdefault1_0dateformat()) {
    tschchartaxisdefault1_0dateformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxisdefault1_0dateformat_);
  } else {
    tschchartaxisdefault1_0dateformat_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdefaultdurationformat()) {
    tschchartaxisdefaultdurationformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxisdefaultdurationformat_);
  } else {
    tschchartaxisdefaultdurationformat_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdefaultdateformat()) {
    tschchartaxisdefaultdateformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxisdefaultdateformat_);
  } else {
    tschchartaxisdefaultdateformat_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdefaultnumberformat()) {
    tschchartaxisdefaultnumberformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxisdefaultnumberformat_);
  } else {
    tschchartaxisdefaultnumberformat_ = nullptr;
  }
  ::memcpy(&tschchartaxisdefault3dlabelposition_, &from.tschchartaxisdefault3dlabelposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxisvalueshowtitle_) -
    reinterpret_cast<char*>(&tschchartaxisdefault3dlabelposition_)) + sizeof(tschchartaxisvalueshowtitle_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartAxisNonStyleArchive)
}

inline void ChartAxisNonStyleArchive::SharedCtor() {
tschchartaxiscategorytitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tschchartaxisvaluetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschchartaxisdefault1_0numberformat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxisvalueshowtitle_) -
    reinterpret_cast<char*>(&tschchartaxisdefault1_0numberformat_)) + sizeof(tschchartaxisvalueshowtitle_));
}

ChartAxisNonStyleArchive::~ChartAxisNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartAxisNonStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartAxisNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tschchartaxiscategorytitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tschchartaxisvaluetitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tschchartaxisdefault1_0numberformat_;
  if (this != internal_default_instance()) delete tschchartaxisdefaultusermax_;
  if (this != internal_default_instance()) delete tschchartaxisdefaultusermin_;
  if (this != internal_default_instance()) delete tschchartaxisdefault1_0dateformat_;
  if (this != internal_default_instance()) delete tschchartaxisdefaultdurationformat_;
  if (this != internal_default_instance()) delete tschchartaxisdefaultdateformat_;
  if (this != internal_default_instance()) delete tschchartaxisdefaultnumberformat_;
}

void ChartAxisNonStyleArchive::ArenaDtor(void* object) {
  ChartAxisNonStyleArchive* _this = reinterpret_cast< ChartAxisNonStyleArchive* >(object);
  (void)_this;
}
void ChartAxisNonStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartAxisNonStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartAxisNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartAxisNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartaxiscategorytitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartaxisvaluetitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartaxisdefault1_0numberformat_ != nullptr);
      tschchartaxisdefault1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartaxisdefaultusermax_ != nullptr);
      tschchartaxisdefaultusermax_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartaxisdefaultusermin_ != nullptr);
      tschchartaxisdefaultusermin_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartaxisdefault1_0dateformat_ != nullptr);
      tschchartaxisdefault1_0dateformat_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartaxisdefaultdurationformat_ != nullptr);
      tschchartaxisdefaultdurationformat_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartaxisdefaultdateformat_ != nullptr);
      tschchartaxisdefaultdateformat_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(tschchartaxisdefaultnumberformat_ != nullptr);
    tschchartaxisdefaultnumberformat_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&tschchartaxisdefault3dlabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxiscategoryplottoedges_) -
        reinterpret_cast<char*>(&tschchartaxisdefault3dlabelposition_)) + sizeof(tschchartaxiscategoryplottoedges_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&tschchartaxiscategoryshowlabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxisvalueshowtitle_) -
        reinterpret_cast<char*>(&tschchartaxiscategoryshowlabels_)) + sizeof(tschchartaxisvalueshowtitle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisNonStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschchartaxisdefault3dlabelposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartaxisdefault3dlabelposition(&has_bits);
          tschchartaxisdefault3dlabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefault1_0numberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultnumberformattype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschchartaxisdefaultnumberformattype(&has_bits);
          tschchartaxisdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofdecades = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartaxisvaluenumberofdecades(&has_bits);
          tschchartaxisvaluenumberofdecades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartaxisvaluenumberofmajorgridlines(&has_bits);
          tschchartaxisvaluenumberofmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartaxisvaluenumberofminorgridlines(&has_bits);
          tschchartaxisvaluenumberofminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryplottoedges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartaxiscategoryplottoedges(&has_bits);
          tschchartaxiscategoryplottoedges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluescale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tschchartaxisvaluescale(&has_bits);
          tschchartaxisvaluescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlabels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschchartaxiscategoryshowlabels(&has_bits);
          tschchartaxiscategoryshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisdefaultshowlabels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartaxisdefaultshowlabels(&has_bits);
          tschchartaxisdefaultshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowlabels = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartaxisvalueshowlabels(&has_bits);
          tschchartaxisvalueshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowserieslabels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tschchartaxiscategoryshowserieslabels(&has_bits);
          tschchartaxiscategoryshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowtitle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartaxiscategoryshowtitle(&has_bits);
          tschchartaxiscategoryshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowtitle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartaxisvalueshowtitle(&has_bits);
          tschchartaxisvalueshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartaxiscategorytitle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_tschchartaxiscategorytitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartaxisvaluetitle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_tschchartaxisvaluetitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxismultidatashowserieslabels = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartaxismultidatashowserieslabels(&has_bits);
          tschchartaxismultidatashowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefault1_0dateformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultdurationformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultdateformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartAxisNonStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartAxisNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tschchartaxisdefault3dlabelposition = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschchartaxisdefault3dlabelposition(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tschchartaxisdefault1_0numberformat(this), target, stream);
  }

  // optional int32 tschchartaxisdefaultnumberformattype = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tschchartaxisdefaultnumberformattype(), target);
  }

  // optional int32 tschchartaxisvaluenumberofdecades = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tschchartaxisvaluenumberofdecades(), target);
  }

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tschchartaxisvaluenumberofmajorgridlines(), target);
  }

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_tschchartaxisvaluenumberofminorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryplottoedges = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_tschchartaxiscategoryplottoedges(), target);
  }

  // optional int32 tschchartaxisvaluescale = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_tschchartaxisvaluescale(), target);
  }

  // optional bool tschchartaxiscategoryshowlabels = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_tschchartaxiscategoryshowlabels(), target);
  }

  // optional bool tschchartaxisdefaultshowlabels = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_tschchartaxisdefaultshowlabels(), target);
  }

  // optional bool tschchartaxisvalueshowlabels = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_tschchartaxisvalueshowlabels(), target);
  }

  // optional bool tschchartaxiscategoryshowserieslabels = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_tschchartaxiscategoryshowserieslabels(), target);
  }

  // optional bool tschchartaxiscategoryshowtitle = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_tschchartaxiscategoryshowtitle(), target);
  }

  // optional bool tschchartaxisvalueshowtitle = 14;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_tschchartaxisvalueshowtitle(), target);
  }

  // optional string tschchartaxiscategorytitle = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxiscategorytitle().data(), static_cast<int>(this->_internal_tschchartaxiscategorytitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_tschchartaxiscategorytitle(), target);
  }

  // optional string tschchartaxisvaluetitle = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxisvaluetitle().data(), static_cast<int>(this->_internal_tschchartaxisvaluetitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_tschchartaxisvaluetitle(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::tschchartaxisdefaultusermax(this), target, stream);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::tschchartaxisdefaultusermin(this), target, stream);
  }

  // optional bool tschchartaxismultidatashowserieslabels = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_tschchartaxismultidatashowserieslabels(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::tschchartaxisdefault1_0dateformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::tschchartaxisdefaultdurationformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::tschchartaxisdefaultdateformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::tschchartaxisdefaultnumberformat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartAxisNonStyleArchive)
  return target;
}

size_t ChartAxisNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartAxisNonStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartaxiscategorytitle = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxiscategorytitle());
    }

    // optional string tschchartaxisvaluetitle = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxisvaluetitle());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefault1_0numberformat_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefaultusermax_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefaultusermin_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefault1_0dateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefaultdurationformat_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefaultdateformat_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefaultnumberformat_);
    }

    // optional int32 tschchartaxisdefault3dlabelposition = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefault3dlabelposition());
    }

    // optional int32 tschchartaxisdefaultnumberformattype = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaultnumberformattype());
    }

    // optional int32 tschchartaxisvaluenumberofdecades = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluenumberofdecades());
    }

    // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluenumberofmajorgridlines());
    }

    // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluenumberofminorgridlines());
    }

    // optional int32 tschchartaxisvaluescale = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluescale());
    }

    // optional bool tschchartaxiscategoryplottoedges = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool tschchartaxiscategoryshowlabels = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisdefaultshowlabels = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowlabels = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxiscategoryshowserieslabels = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxismultidatashowserieslabels = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowtitle = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowtitle = 14;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartAxisNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisNonStyleArchive::GetClassData() const { return &_class_data_; }

void ChartAxisNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartAxisNonStyleArchive *>(to)->MergeFrom(
      static_cast<const ChartAxisNonStyleArchive &>(from));
}


void ChartAxisNonStyleArchive::MergeFrom(const ChartAxisNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartAxisNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartaxiscategorytitle(from._internal_tschchartaxiscategorytitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tschchartaxisvaluetitle(from._internal_tschchartaxisvaluetitle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartaxisdefault1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxisdefault1_0numberformat());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartaxisdefaultusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from._internal_tschchartaxisdefaultusermax());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartaxisdefaultusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from._internal_tschchartaxisdefaultusermin());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartaxisdefault1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxisdefault1_0dateformat());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartaxisdefaultdurationformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxisdefaultdurationformat());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartaxisdefaultdateformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxisdefaultdateformat());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartaxisdefaultnumberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxisdefaultnumberformat());
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartaxisdefault3dlabelposition_ = from.tschchartaxisdefault3dlabelposition_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartaxisdefaultnumberformattype_ = from.tschchartaxisdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartaxisvaluenumberofdecades_ = from.tschchartaxisvaluenumberofdecades_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartaxisvaluenumberofmajorgridlines_ = from.tschchartaxisvaluenumberofmajorgridlines_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartaxisvaluenumberofminorgridlines_ = from.tschchartaxisvaluenumberofminorgridlines_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartaxisvaluescale_ = from.tschchartaxisvaluescale_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartaxiscategoryplottoedges_ = from.tschchartaxiscategoryplottoedges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartaxiscategoryshowlabels_ = from.tschchartaxiscategoryshowlabels_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartaxisdefaultshowlabels_ = from.tschchartaxisdefaultshowlabels_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartaxisvalueshowlabels_ = from.tschchartaxisvalueshowlabels_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartaxiscategoryshowserieslabels_ = from.tschchartaxiscategoryshowserieslabels_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartaxismultidatashowserieslabels_ = from.tschchartaxismultidatashowserieslabels_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartaxiscategoryshowtitle_ = from.tschchartaxiscategoryshowtitle_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartaxisvalueshowtitle_ = from.tschchartaxisvalueshowtitle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisNonStyleArchive::CopyFrom(const ChartAxisNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartAxisNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisNonStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartaxisdefault1_0numberformat()) {
    if (!tschchartaxisdefault1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefault1_0dateformat()) {
    if (!tschchartaxisdefault1_0dateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefaultdurationformat()) {
    if (!tschchartaxisdefaultdurationformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefaultdateformat()) {
    if (!tschchartaxisdefaultdateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefaultnumberformat()) {
    if (!tschchartaxisdefaultnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisNonStyleArchive::InternalSwap(ChartAxisNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tschchartaxiscategorytitle_, GetArenaForAllocation(),
      &other->tschchartaxiscategorytitle_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tschchartaxisvaluetitle_, GetArenaForAllocation(),
      &other->tschchartaxisvaluetitle_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvalueshowtitle_)
      + sizeof(ChartAxisNonStyleArchive::tschchartaxisvalueshowtitle_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefault1_0numberformat_)>(
          reinterpret_cast<char*>(&tschchartaxisdefault1_0numberformat_),
          reinterpret_cast<char*>(&other->tschchartaxisdefault1_0numberformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisNonStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[5]);
}

// ===================================================================

class ChartSeriesStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesStyleArchive>()._has_bits_);
  static const ::TSD::LineEndArchive& tschchartseriesdefaultcalloutlineendlineend(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultcalloutlineendlineend(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaultcalloutlinestartlineend(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultcalloutlinestartlineend(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaultcalloutlinestrokestyle(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultcalloutlinestrokestyle(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineendscatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartseriesdefaulterrorbarspacing(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_tschchartseriesdefaulterrorbarspacingscatterx(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstrokescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::FillArchive& tschchartseries3dareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::FillArchive& tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarfill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::FillArchive& tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::FillArchive& tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlinefill(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::FillArchive& tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpiefill(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::FillArchive& tschchartseriesareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::FillArchive& tschchartseriesbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::FillArchive& tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriescolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::FillArchive& tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::FillArchive& tschchartseriespiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiefill(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartseriesarealabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_tschchartseriesbarlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_tschchartseriesdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_tschchartseriesdonutlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_tschchartserieslinelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_tschchartseriesmixedlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_tschchartseriespielabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriesdefaultopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_tschchartseriesdonutoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_tschchartseriespieoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpieshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubbleshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSD::ShadowArchive& tschchartserieslineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSD::ShadowArchive& tschchartseriespieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespieshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareastroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareastroke(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartseriespiestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscatterstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSD::FillArchive& tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::TSD::FillArchive& tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSD::FillArchive& tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::TSD::FillArchive& tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_tschchartseriesbubblesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_tschchartseriesscattersymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_tschchartseriesareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_tschchartserieslinesymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_tschchartseriesmixedareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_tschchartseriesmixedlinesymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_tschchartseriesscattersymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlineshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_tschchartseriesareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_tschchartseriesbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_tschchartseriesbubblevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_tschchartseriesdefaultvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_tschchartserieslinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_tschchartseriesmixedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_tschchartseriesmixedcolumnvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_tschchartseriesmixedlinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_tschchartseriesscattervaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_tschchartseriesstackedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_tschchartseriesstackedbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_tschchartseriesdefaultvaluelabelspacing(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
};

const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultcalloutlineendlineend(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaultcalloutlineendlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultcalloutlinestartlineend(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaultcalloutlinestartlineend_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultcalloutlinestrokestyle(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaultcalloutlinestrokestyle_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarlineendscatterx_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarstrokescatterx_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dbarfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dlinefill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dpiefill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbarfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriescolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaultfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriespiefill_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dpieshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbubbleshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaultshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartserieslineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriespieshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesscattershadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareastroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbubblestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartserieslinestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareastroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedcolumnstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedlinestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriespiestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesscatterstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareasymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbubblesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartserieslinesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareasymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedlinesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesscattersymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareasymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbubblesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartserieslinesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareasymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedlinesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesscattersymbolstroke_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulttrendlineshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulttrendlinestroke_;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultcalloutlineendlineend() {
  if (tschchartseriesdefaultcalloutlineendlineend_ != nullptr) tschchartseriesdefaultcalloutlineendlineend_->Clear();
  _has_bits_[1] &= ~0x02000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultcalloutlinestartlineend() {
  if (tschchartseriesdefaultcalloutlinestartlineend_ != nullptr) tschchartseriesdefaultcalloutlinestartlineend_->Clear();
  _has_bits_[1] &= ~0x01000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultcalloutlinestrokestyle() {
  if (tschchartseriesdefaultcalloutlinestrokestyle_ != nullptr) tschchartseriesdefaultcalloutlinestrokestyle_->Clear();
  _has_bits_[1] &= ~0x00800000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineend() {
  if (tschchartseriesdefaulterrorbarlineend_ != nullptr) tschchartseriesdefaulterrorbarlineend_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineendscatterx() {
  if (tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr) tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarshadow() {
  if (tschchartseriesdefaulterrorbarshadow_ != nullptr) tschchartseriesdefaulterrorbarshadow_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstroke() {
  if (tschchartseriesdefaulterrorbarstroke_ != nullptr) tschchartseriesdefaulterrorbarstroke_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstrokescatterx() {
  if (tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr) tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareafill() {
  if (tschchartseries3dareafill_ != nullptr) tschchartseries3dareafill_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarfill() {
  if (tschchartseries3dbarfill_ != nullptr) tschchartseries3dbarfill_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnfill() {
  if (tschchartseries3dcolumnfill_ != nullptr) tschchartseries3dcolumnfill_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlinefill() {
  if (tschchartseries3dlinefill_ != nullptr) tschchartseries3dlinefill_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpiefill() {
  if (tschchartseries3dpiefill_ != nullptr) tschchartseries3dpiefill_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareafill() {
  if (tschchartseriesareafill_ != nullptr) tschchartseriesareafill_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarfill() {
  if (tschchartseriesbarfill_ != nullptr) tschchartseriesbarfill_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriescolumnfill() {
  if (tschchartseriescolumnfill_ != nullptr) tschchartseriescolumnfill_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultfill() {
  if (tschchartseriesdefaultfill_ != nullptr) tschchartseriesdefaultfill_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareafill() {
  if (tschchartseriesmixedareafill_ != nullptr) tschchartseriesmixedareafill_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnfill() {
  if (tschchartseriesmixedcolumnfill_ != nullptr) tschchartseriesmixedcolumnfill_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiefill() {
  if (tschchartseriespiefill_ != nullptr) tschchartseriespiefill_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareashadow() {
  if (tschchartseries3dareashadow_ != nullptr) tschchartseries3dareashadow_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarshadow() {
  if (tschchartseries3dbarshadow_ != nullptr) tschchartseries3dbarshadow_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnshadow() {
  if (tschchartseries3dcolumnshadow_ != nullptr) tschchartseries3dcolumnshadow_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlineshadow() {
  if (tschchartseries3dlineshadow_ != nullptr) tschchartseries3dlineshadow_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpieshadow() {
  if (tschchartseries3dpieshadow_ != nullptr) tschchartseries3dpieshadow_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareashadow() {
  if (tschchartseriesareashadow_ != nullptr) tschchartseriesareashadow_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarshadow() {
  if (tschchartseriesbarshadow_ != nullptr) tschchartseriesbarshadow_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubbleshadow() {
  if (tschchartseriesbubbleshadow_ != nullptr) tschchartseriesbubbleshadow_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultshadow() {
  if (tschchartseriesdefaultshadow_ != nullptr) tschchartseriesdefaultshadow_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslineshadow() {
  if (tschchartserieslineshadow_ != nullptr) tschchartserieslineshadow_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareashadow() {
  if (tschchartseriesmixedareashadow_ != nullptr) tschchartseriesmixedareashadow_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnshadow() {
  if (tschchartseriesmixedcolumnshadow_ != nullptr) tschchartseriesmixedcolumnshadow_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlineshadow() {
  if (tschchartseriesmixedlineshadow_ != nullptr) tschchartseriesmixedlineshadow_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespieshadow() {
  if (tschchartseriespieshadow_ != nullptr) tschchartseriespieshadow_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattershadow() {
  if (tschchartseriesscattershadow_ != nullptr) tschchartseriesscattershadow_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareastroke() {
  if (tschchartseriesareastroke_ != nullptr) tschchartseriesareastroke_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarstroke() {
  if (tschchartseriesbarstroke_ != nullptr) tschchartseriesbarstroke_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblestroke() {
  if (tschchartseriesbubblestroke_ != nullptr) tschchartseriesbubblestroke_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinestroke() {
  if (tschchartserieslinestroke_ != nullptr) tschchartserieslinestroke_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareastroke() {
  if (tschchartseriesmixedareastroke_ != nullptr) tschchartseriesmixedareastroke_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnstroke() {
  if (tschchartseriesmixedcolumnstroke_ != nullptr) tschchartseriesmixedcolumnstroke_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinestroke() {
  if (tschchartseriesmixedlinestroke_ != nullptr) tschchartseriesmixedlinestroke_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiestroke() {
  if (tschchartseriespiestroke_ != nullptr) tschchartseriespiestroke_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscatterstroke() {
  if (tschchartseriesscatterstroke_ != nullptr) tschchartseriesscatterstroke_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfill() {
  if (tschchartseriesareasymbolfill_ != nullptr) tschchartseriesareasymbolfill_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfill() {
  if (tschchartseriesbubblesymbolfill_ != nullptr) tschchartseriesbubblesymbolfill_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfill() {
  if (tschchartserieslinesymbolfill_ != nullptr) tschchartserieslinesymbolfill_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfill() {
  if (tschchartseriesmixedareasymbolfill_ != nullptr) tschchartseriesmixedareasymbolfill_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfill() {
  if (tschchartseriesmixedlinesymbolfill_ != nullptr) tschchartseriesmixedlinesymbolfill_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfill() {
  if (tschchartseriesscattersymbolfill_ != nullptr) tschchartseriesscattersymbolfill_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolstroke() {
  if (tschchartseriesareasymbolstroke_ != nullptr) tschchartseriesareasymbolstroke_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolstroke() {
  if (tschchartseriesbubblesymbolstroke_ != nullptr) tschchartseriesbubblesymbolstroke_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolstroke() {
  if (tschchartserieslinesymbolstroke_ != nullptr) tschchartserieslinesymbolstroke_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolstroke() {
  if (tschchartseriesmixedareasymbolstroke_ != nullptr) tschchartseriesmixedareasymbolstroke_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolstroke() {
  if (tschchartseriesmixedlinesymbolstroke_ != nullptr) tschchartseriesmixedlinesymbolstroke_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolstroke() {
  if (tschchartseriesscattersymbolstroke_ != nullptr) tschchartseriesscattersymbolstroke_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineshadow() {
  if (tschchartseriesdefaulttrendlineshadow_ != nullptr) tschchartseriesdefaulttrendlineshadow_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinestroke() {
  if (tschchartseriesdefaulttrendlinestroke_ != nullptr) tschchartseriesdefaulttrendlinestroke_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartSeriesStyleArchive)
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschchartseriesdefaulterrorbarlineend()) {
    tschchartseriesdefaulterrorbarlineend_ = new ::TSD::LineEndArchive(*from.tschchartseriesdefaulterrorbarlineend_);
  } else {
    tschchartseriesdefaulterrorbarlineend_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    tschchartseriesdefaulterrorbarlineendscatterx_ = new ::TSD::LineEndArchive(*from.tschchartseriesdefaulterrorbarlineendscatterx_);
  } else {
    tschchartseriesdefaulterrorbarlineendscatterx_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarshadow()) {
    tschchartseriesdefaulterrorbarshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesdefaulterrorbarshadow_);
  } else {
    tschchartseriesdefaulterrorbarshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstroke()) {
    tschchartseriesdefaulterrorbarstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesdefaulterrorbarstroke_);
  } else {
    tschchartseriesdefaulterrorbarstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    tschchartseriesdefaulterrorbarstrokescatterx_ = new ::TSD::StrokeArchive(*from.tschchartseriesdefaulterrorbarstrokescatterx_);
  } else {
    tschchartseriesdefaulterrorbarstrokescatterx_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dareafill()) {
    tschchartseries3dareafill_ = new ::TSD::FillArchive(*from.tschchartseries3dareafill_);
  } else {
    tschchartseries3dareafill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dbarfill()) {
    tschchartseries3dbarfill_ = new ::TSD::FillArchive(*from.tschchartseries3dbarfill_);
  } else {
    tschchartseries3dbarfill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dcolumnfill()) {
    tschchartseries3dcolumnfill_ = new ::TSD::FillArchive(*from.tschchartseries3dcolumnfill_);
  } else {
    tschchartseries3dcolumnfill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dlinefill()) {
    tschchartseries3dlinefill_ = new ::TSD::FillArchive(*from.tschchartseries3dlinefill_);
  } else {
    tschchartseries3dlinefill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dpiefill()) {
    tschchartseries3dpiefill_ = new ::TSD::FillArchive(*from.tschchartseries3dpiefill_);
  } else {
    tschchartseries3dpiefill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareafill()) {
    tschchartseriesareafill_ = new ::TSD::FillArchive(*from.tschchartseriesareafill_);
  } else {
    tschchartseriesareafill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbarfill()) {
    tschchartseriesbarfill_ = new ::TSD::FillArchive(*from.tschchartseriesbarfill_);
  } else {
    tschchartseriesbarfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriescolumnfill()) {
    tschchartseriescolumnfill_ = new ::TSD::FillArchive(*from.tschchartseriescolumnfill_);
  } else {
    tschchartseriescolumnfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultfill()) {
    tschchartseriesdefaultfill_ = new ::TSD::FillArchive(*from.tschchartseriesdefaultfill_);
  } else {
    tschchartseriesdefaultfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareafill()) {
    tschchartseriesmixedareafill_ = new ::TSD::FillArchive(*from.tschchartseriesmixedareafill_);
  } else {
    tschchartseriesmixedareafill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedcolumnfill()) {
    tschchartseriesmixedcolumnfill_ = new ::TSD::FillArchive(*from.tschchartseriesmixedcolumnfill_);
  } else {
    tschchartseriesmixedcolumnfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriespiefill()) {
    tschchartseriespiefill_ = new ::TSD::FillArchive(*from.tschchartseriespiefill_);
  } else {
    tschchartseriespiefill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dareashadow()) {
    tschchartseries3dareashadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dareashadow_);
  } else {
    tschchartseries3dareashadow_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dbarshadow()) {
    tschchartseries3dbarshadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dbarshadow_);
  } else {
    tschchartseries3dbarshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dcolumnshadow()) {
    tschchartseries3dcolumnshadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dcolumnshadow_);
  } else {
    tschchartseries3dcolumnshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dlineshadow()) {
    tschchartseries3dlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dlineshadow_);
  } else {
    tschchartseries3dlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dpieshadow()) {
    tschchartseries3dpieshadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dpieshadow_);
  } else {
    tschchartseries3dpieshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareashadow()) {
    tschchartseriesareashadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesareashadow_);
  } else {
    tschchartseriesareashadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbarshadow()) {
    tschchartseriesbarshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesbarshadow_);
  } else {
    tschchartseriesbarshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbubbleshadow()) {
    tschchartseriesbubbleshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesbubbleshadow_);
  } else {
    tschchartseriesbubbleshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultshadow()) {
    tschchartseriesdefaultshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesdefaultshadow_);
  } else {
    tschchartseriesdefaultshadow_ = nullptr;
  }
  if (from._internal_has_tschchartserieslineshadow()) {
    tschchartserieslineshadow_ = new ::TSD::ShadowArchive(*from.tschchartserieslineshadow_);
  } else {
    tschchartserieslineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareashadow()) {
    tschchartseriesmixedareashadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesmixedareashadow_);
  } else {
    tschchartseriesmixedareashadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedcolumnshadow()) {
    tschchartseriesmixedcolumnshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesmixedcolumnshadow_);
  } else {
    tschchartseriesmixedcolumnshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedlineshadow()) {
    tschchartseriesmixedlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesmixedlineshadow_);
  } else {
    tschchartseriesmixedlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriespieshadow()) {
    tschchartseriespieshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriespieshadow_);
  } else {
    tschchartseriespieshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesscattershadow()) {
    tschchartseriesscattershadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesscattershadow_);
  } else {
    tschchartseriesscattershadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareastroke()) {
    tschchartseriesareastroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesareastroke_);
  } else {
    tschchartseriesareastroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbarstroke()) {
    tschchartseriesbarstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesbarstroke_);
  } else {
    tschchartseriesbarstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbubblestroke()) {
    tschchartseriesbubblestroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesbubblestroke_);
  } else {
    tschchartseriesbubblestroke_ = nullptr;
  }
  if (from._internal_has_tschchartserieslinestroke()) {
    tschchartserieslinestroke_ = new ::TSD::StrokeArchive(*from.tschchartserieslinestroke_);
  } else {
    tschchartserieslinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareastroke()) {
    tschchartseriesmixedareastroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedareastroke_);
  } else {
    tschchartseriesmixedareastroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedcolumnstroke()) {
    tschchartseriesmixedcolumnstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedcolumnstroke_);
  } else {
    tschchartseriesmixedcolumnstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedlinestroke()) {
    tschchartseriesmixedlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedlinestroke_);
  } else {
    tschchartseriesmixedlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriespiestroke()) {
    tschchartseriespiestroke_ = new ::TSD::StrokeArchive(*from.tschchartseriespiestroke_);
  } else {
    tschchartseriespiestroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesscatterstroke()) {
    tschchartseriesscatterstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesscatterstroke_);
  } else {
    tschchartseriesscatterstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareasymbolfill()) {
    tschchartseriesareasymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesareasymbolfill_);
  } else {
    tschchartseriesareasymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbubblesymbolfill()) {
    tschchartseriesbubblesymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesbubblesymbolfill_);
  } else {
    tschchartseriesbubblesymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartserieslinesymbolfill()) {
    tschchartserieslinesymbolfill_ = new ::TSD::FillArchive(*from.tschchartserieslinesymbolfill_);
  } else {
    tschchartserieslinesymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareasymbolfill()) {
    tschchartseriesmixedareasymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesmixedareasymbolfill_);
  } else {
    tschchartseriesmixedareasymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolfill()) {
    tschchartseriesmixedlinesymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesmixedlinesymbolfill_);
  } else {
    tschchartseriesmixedlinesymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesscattersymbolfill()) {
    tschchartseriesscattersymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesscattersymbolfill_);
  } else {
    tschchartseriesscattersymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareasymbolstroke()) {
    tschchartseriesareasymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesareasymbolstroke_);
  } else {
    tschchartseriesareasymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbubblesymbolstroke()) {
    tschchartseriesbubblesymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesbubblesymbolstroke_);
  } else {
    tschchartseriesbubblesymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartserieslinesymbolstroke()) {
    tschchartserieslinesymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartserieslinesymbolstroke_);
  } else {
    tschchartserieslinesymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareasymbolstroke()) {
    tschchartseriesmixedareasymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedareasymbolstroke_);
  } else {
    tschchartseriesmixedareasymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolstroke()) {
    tschchartseriesmixedlinesymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedlinesymbolstroke_);
  } else {
    tschchartseriesmixedlinesymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesscattersymbolstroke()) {
    tschchartseriesscattersymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesscattersymbolstroke_);
  } else {
    tschchartseriesscattersymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulttrendlineshadow()) {
    tschchartseriesdefaulttrendlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesdefaulttrendlineshadow_);
  } else {
    tschchartseriesdefaulttrendlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulttrendlinestroke()) {
    tschchartseriesdefaulttrendlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesdefaulttrendlinestroke_);
  } else {
    tschchartseriesdefaulttrendlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultcalloutlinestrokestyle()) {
    tschchartseriesdefaultcalloutlinestrokestyle_ = new ::TSD::StrokeArchive(*from.tschchartseriesdefaultcalloutlinestrokestyle_);
  } else {
    tschchartseriesdefaultcalloutlinestrokestyle_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultcalloutlinestartlineend()) {
    tschchartseriesdefaultcalloutlinestartlineend_ = new ::TSD::LineEndArchive(*from.tschchartseriesdefaultcalloutlinestartlineend_);
  } else {
    tschchartseriesdefaultcalloutlinestartlineend_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultcalloutlineendlineend()) {
    tschchartseriesdefaultcalloutlineendlineend_ = new ::TSD::LineEndArchive(*from.tschchartseriesdefaultcalloutlineendlineend_);
  } else {
    tschchartseriesdefaultcalloutlineendlineend_ = nullptr;
  }
  ::memcpy(&tschchartseriesarealabelparagraphstyleindex_, &from.tschchartseriesarealabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesdonutoutsidelabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&tschchartseriesarealabelparagraphstyleindex_)) + sizeof(tschchartseriesdonutoutsidelabelparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartSeriesStyleArchive)
}

inline void ChartSeriesStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarlineend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesdonutoutsidelabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarlineend_)) + sizeof(tschchartseriesdonutoutsidelabelparagraphstyleindex_));
}

ChartSeriesStyleArchive::~ChartSeriesStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartSeriesStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartSeriesStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarlineend_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarlineendscatterx_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarshadow_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarstroke_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarstrokescatterx_;
  if (this != internal_default_instance()) delete tschchartseries3dareafill_;
  if (this != internal_default_instance()) delete tschchartseries3dbarfill_;
  if (this != internal_default_instance()) delete tschchartseries3dcolumnfill_;
  if (this != internal_default_instance()) delete tschchartseries3dlinefill_;
  if (this != internal_default_instance()) delete tschchartseries3dpiefill_;
  if (this != internal_default_instance()) delete tschchartseriesareafill_;
  if (this != internal_default_instance()) delete tschchartseriesbarfill_;
  if (this != internal_default_instance()) delete tschchartseriescolumnfill_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultfill_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareafill_;
  if (this != internal_default_instance()) delete tschchartseriesmixedcolumnfill_;
  if (this != internal_default_instance()) delete tschchartseriespiefill_;
  if (this != internal_default_instance()) delete tschchartseries3dareashadow_;
  if (this != internal_default_instance()) delete tschchartseries3dbarshadow_;
  if (this != internal_default_instance()) delete tschchartseries3dcolumnshadow_;
  if (this != internal_default_instance()) delete tschchartseries3dlineshadow_;
  if (this != internal_default_instance()) delete tschchartseries3dpieshadow_;
  if (this != internal_default_instance()) delete tschchartseriesareashadow_;
  if (this != internal_default_instance()) delete tschchartseriesbarshadow_;
  if (this != internal_default_instance()) delete tschchartseriesbubbleshadow_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultshadow_;
  if (this != internal_default_instance()) delete tschchartserieslineshadow_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareashadow_;
  if (this != internal_default_instance()) delete tschchartseriesmixedcolumnshadow_;
  if (this != internal_default_instance()) delete tschchartseriesmixedlineshadow_;
  if (this != internal_default_instance()) delete tschchartseriespieshadow_;
  if (this != internal_default_instance()) delete tschchartseriesscattershadow_;
  if (this != internal_default_instance()) delete tschchartseriesareastroke_;
  if (this != internal_default_instance()) delete tschchartseriesbarstroke_;
  if (this != internal_default_instance()) delete tschchartseriesbubblestroke_;
  if (this != internal_default_instance()) delete tschchartserieslinestroke_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareastroke_;
  if (this != internal_default_instance()) delete tschchartseriesmixedcolumnstroke_;
  if (this != internal_default_instance()) delete tschchartseriesmixedlinestroke_;
  if (this != internal_default_instance()) delete tschchartseriespiestroke_;
  if (this != internal_default_instance()) delete tschchartseriesscatterstroke_;
  if (this != internal_default_instance()) delete tschchartseriesareasymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesbubblesymbolfill_;
  if (this != internal_default_instance()) delete tschchartserieslinesymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareasymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesmixedlinesymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesscattersymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesareasymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesbubblesymbolstroke_;
  if (this != internal_default_instance()) delete tschchartserieslinesymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareasymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesmixedlinesymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesscattersymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulttrendlineshadow_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulttrendlinestroke_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultcalloutlinestrokestyle_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultcalloutlinestartlineend_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultcalloutlineendlineend_;
}

void ChartSeriesStyleArchive::ArenaDtor(void* object) {
  ChartSeriesStyleArchive* _this = reinterpret_cast< ChartSeriesStyleArchive* >(object);
  (void)_this;
}
void ChartSeriesStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSeriesStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSeriesStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartSeriesStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarlineend_ != nullptr);
      tschchartseriesdefaulterrorbarlineend_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr);
      tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarshadow_ != nullptr);
      tschchartseriesdefaulterrorbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarstroke_ != nullptr);
      tschchartseriesdefaulterrorbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr);
      tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartseries3dareafill_ != nullptr);
      tschchartseries3dareafill_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartseries3dbarfill_ != nullptr);
      tschchartseries3dbarfill_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartseries3dcolumnfill_ != nullptr);
      tschchartseries3dcolumnfill_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartseries3dlinefill_ != nullptr);
      tschchartseries3dlinefill_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartseries3dpiefill_ != nullptr);
      tschchartseries3dpiefill_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartseriesareafill_ != nullptr);
      tschchartseriesareafill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartseriesbarfill_ != nullptr);
      tschchartseriesbarfill_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tschchartseriescolumnfill_ != nullptr);
      tschchartseriescolumnfill_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(tschchartseriesdefaultfill_ != nullptr);
      tschchartseriesdefaultfill_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(tschchartseriesmixedareafill_ != nullptr);
      tschchartseriesmixedareafill_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(tschchartseriesmixedcolumnfill_ != nullptr);
      tschchartseriesmixedcolumnfill_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(tschchartseriespiefill_ != nullptr);
      tschchartseriespiefill_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(tschchartseries3dareashadow_ != nullptr);
      tschchartseries3dareashadow_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(tschchartseries3dbarshadow_ != nullptr);
      tschchartseries3dbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(tschchartseries3dcolumnshadow_ != nullptr);
      tschchartseries3dcolumnshadow_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(tschchartseries3dlineshadow_ != nullptr);
      tschchartseries3dlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(tschchartseries3dpieshadow_ != nullptr);
      tschchartseries3dpieshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(tschchartseriesareashadow_ != nullptr);
      tschchartseriesareashadow_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(tschchartseriesbarshadow_ != nullptr);
      tschchartseriesbarshadow_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(tschchartseriesbubbleshadow_ != nullptr);
      tschchartseriesbubbleshadow_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(tschchartseriesdefaultshadow_ != nullptr);
      tschchartseriesdefaultshadow_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(tschchartserieslineshadow_ != nullptr);
      tschchartserieslineshadow_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(tschchartseriesmixedareashadow_ != nullptr);
      tschchartseriesmixedareashadow_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(tschchartseriesmixedcolumnshadow_ != nullptr);
      tschchartseriesmixedcolumnshadow_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(tschchartseriesmixedlineshadow_ != nullptr);
      tschchartseriesmixedlineshadow_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(tschchartseriespieshadow_ != nullptr);
      tschchartseriespieshadow_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(tschchartseriesscattershadow_ != nullptr);
      tschchartseriesscattershadow_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tschchartseriesareastroke_ != nullptr);
      tschchartseriesareastroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartseriesbarstroke_ != nullptr);
      tschchartseriesbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartseriesbubblestroke_ != nullptr);
      tschchartseriesbubblestroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartserieslinestroke_ != nullptr);
      tschchartserieslinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartseriesmixedareastroke_ != nullptr);
      tschchartseriesmixedareastroke_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartseriesmixedcolumnstroke_ != nullptr);
      tschchartseriesmixedcolumnstroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartseriesmixedlinestroke_ != nullptr);
      tschchartseriesmixedlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartseriespiestroke_ != nullptr);
      tschchartseriespiestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartseriesscatterstroke_ != nullptr);
      tschchartseriesscatterstroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartseriesareasymbolfill_ != nullptr);
      tschchartseriesareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartseriesbubblesymbolfill_ != nullptr);
      tschchartseriesbubblesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartserieslinesymbolfill_ != nullptr);
      tschchartserieslinesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tschchartseriesmixedareasymbolfill_ != nullptr);
      tschchartseriesmixedareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(tschchartseriesmixedlinesymbolfill_ != nullptr);
      tschchartseriesmixedlinesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(tschchartseriesscattersymbolfill_ != nullptr);
      tschchartseriesscattersymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(tschchartseriesareasymbolstroke_ != nullptr);
      tschchartseriesareasymbolstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(tschchartseriesbubblesymbolstroke_ != nullptr);
      tschchartseriesbubblesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(tschchartserieslinesymbolstroke_ != nullptr);
      tschchartserieslinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(tschchartseriesmixedareasymbolstroke_ != nullptr);
      tschchartseriesmixedareasymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(tschchartseriesmixedlinesymbolstroke_ != nullptr);
      tschchartseriesmixedlinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(tschchartseriesscattersymbolstroke_ != nullptr);
      tschchartseriesscattersymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(tschchartseriesdefaulttrendlineshadow_ != nullptr);
      tschchartseriesdefaulttrendlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(tschchartseriesdefaulttrendlinestroke_ != nullptr);
      tschchartseriesdefaulttrendlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(tschchartseriesdefaultcalloutlinestrokestyle_ != nullptr);
      tschchartseriesdefaultcalloutlinestrokestyle_->Clear();
    }
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(tschchartseriesdefaultcalloutlinestartlineend_ != nullptr);
      tschchartseriesdefaultcalloutlinestartlineend_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(tschchartseriesdefaultcalloutlineendlineend_ != nullptr);
      tschchartseriesdefaultcalloutlineendlineend_->Clear();
    }
  }
  if (cached_has_bits & 0xfc000000u) {
    ::memset(&tschchartseriesarealabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriespielabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschchartseriesarealabelparagraphstyleindex_)) + sizeof(tschchartseriespielabelparagraphstyleindex_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartseriesdefaultopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartserieslinesymbolfilluseseriesfill_) -
        reinterpret_cast<char*>(&tschchartseriesdefaultopacity_)) + sizeof(tschchartserieslinesymbolfilluseseriesfill_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tschchartseriesmixedareasymbolfilluseseriesfill_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesscattersymbolfilluseseriesstroke_) -
        reinterpret_cast<char*>(&tschchartseriesmixedareasymbolfilluseseriesfill_)) + sizeof(tschchartseriesscattersymbolfilluseseriesstroke_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartseriesareasymbolsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaulttrendlinersquaredopacity_) -
        reinterpret_cast<char*>(&tschchartseriesareasymbolsize_)) + sizeof(tschchartseriesdefaulttrendlinersquaredopacity_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesmixedcolumnvaluelabelposition_) -
        reinterpret_cast<char*>(&tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_)) + sizeof(tschchartseriesmixedcolumnvaluelabelposition_));
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartseriesmixedlinevaluelabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdonutlabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschchartseriesmixedlinevaluelabelposition_)) + sizeof(tschchartseriesdonutlabelparagraphstyleindex_));
  }
  tschchartseriesdonutoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dareafill = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareafill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlinefill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpiefill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareafill = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareafill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbarfill = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescolumnfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareafill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriespiefill = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiefill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartseriesarealabelparagraphstyleindex(&_has_bits_);
          tschchartseriesarealabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartseriesbarlabelparagraphstyleindex(&_has_bits_);
          tschchartseriesbarlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartseriesdefaultlabelparagraphstyleindex(&_has_bits_);
          tschchartseriesdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartserieslinelabelparagraphstyleindex(&_has_bits_);
          tschchartserieslinelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartseriesmixedlabelparagraphstyleindex(&_has_bits_);
          tschchartseriesmixedlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartseriespielabelparagraphstyleindex(&_has_bits_);
          tschchartseriespielabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaultopacity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_tschchartseriesdefaultopacity(&_has_bits_);
          tschchartseriesdefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesareaoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesbaroutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesmixedoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartseriespieoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriespieoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareashadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpieshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareashadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubbleshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareashadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespieshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattershadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareastroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareastroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscatterstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesfill(&_has_bits_);
          tschchartseriesareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesfill(&_has_bits_);
          tschchartserieslinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesfill(&_has_bits_);
          tschchartseriesmixedareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(&_has_bits_);
          tschchartseriesmixedlinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartseriesbubblesymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesbubblesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesstroke(&_has_bits_);
          tschchartserieslinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesmixedareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesmixedlinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartseriesscattersymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesscattersymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesareasymbolsize = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_tschchartseriesareasymbolsize(&_has_bits_);
          tschchartseriesareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieslinesymbolsize = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_tschchartserieslinesymbolsize(&_has_bits_);
          tschchartserieslinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedareasymbolsize = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_tschchartseriesmixedareasymbolsize(&_has_bits_);
          tschchartseriesmixedareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedlinesymbolsize = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolsize(&_has_bits_);
          tschchartseriesmixedlinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesscattersymbolsize = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_tschchartseriesscattersymbolsize(&_has_bits_);
          tschchartseriesscattersymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationopacity(&_has_bits_);
          tschchartseriesdefaulttrendlineequationopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(&_has_bits_);
          tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredopacity(&_has_bits_);
          tschchartseriesdefaulttrendlinersquaredopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(&_has_bits_);
          tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareavaluelabelposition = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartseriesareavaluelabelposition(&_has_bits_);
          tschchartseriesareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarvaluelabelposition = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartseriesbarvaluelabelposition(&_has_bits_);
          tschchartseriesbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblevaluelabelposition = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartseriesbubblevaluelabelposition(&_has_bits_);
          tschchartseriesbubblevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartseriesdefaultvaluelabelposition(&_has_bits_);
          tschchartseriesdefaultvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinevaluelabelposition = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartserieslinevaluelabelposition(&_has_bits_);
          tschchartserieslinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedareavaluelabelposition(&_has_bits_);
          tschchartseriesmixedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartseriesmixedcolumnvaluelabelposition(&_has_bits_);
          tschchartseriesmixedcolumnvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartseriesmixedlinevaluelabelposition(&_has_bits_);
          tschchartseriesmixedlinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattervaluelabelposition = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartseriesscattervaluelabelposition(&_has_bits_);
          tschchartseriesscattervaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartseriesstackedareavaluelabelposition(&_has_bits_);
          tschchartseriesstackedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartseriesstackedbarvaluelabelposition(&_has_bits_);
          tschchartseriesstackedbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarspacing = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarspacing(&_has_bits_);
          tschchartseriesdefaulterrorbarspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarspacingscatterx = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarspacingscatterx(&_has_bits_);
          tschchartseriesdefaulterrorbarspacingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultvaluelabelspacing = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartseriesdefaultvaluelabelspacing(&_has_bits_);
          tschchartseriesdefaultvaluelabelspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaultcalloutlinestrokestyle = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultcalloutlinestrokestyle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlinestartlineend = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultcalloutlinestartlineend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlineendlineend = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultcalloutlineendlineend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdonutlabelparagraphstyleindex = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartseriesdonutlabelparagraphstyleindex(&_has_bits_);
          tschchartseriesdonutlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdonutoutsidelabelparagraphstyleindex = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartseriesdonutoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesdonutoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSeriesStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartSeriesStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tschchartseriesdefaulterrorbarlineend(this), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tschchartseriesdefaulterrorbarlineendscatterx(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tschchartseriesdefaulterrorbarshadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tschchartseriesdefaulterrorbarstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tschchartseriesdefaulterrorbarstrokescatterx(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dareafill = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tschchartseries3dareafill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tschchartseries3dbarfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tschchartseries3dcolumnfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tschchartseries3dlinefill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tschchartseries3dpiefill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesareafill = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tschchartseriesareafill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesbarfill = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tschchartseriesbarfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tschchartseriescolumnfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::tschchartseriesdefaultfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::tschchartseriesmixedareafill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::tschchartseriesmixedcolumnfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriespiefill = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::tschchartseriespiefill(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_tschchartseriesarealabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartseriesbarlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartseriesdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartserieslinelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_tschchartseriesmixedlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartseriespielabelparagraphstyleindex(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float tschchartseriesdefaultopacity = 24;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_tschchartseriesdefaultopacity(), target);
  }

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::tschchartseries3dareashadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::tschchartseries3dbarshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::tschchartseries3dcolumnshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::tschchartseries3dlineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::tschchartseries3dpieshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::tschchartseriesareashadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::tschchartseriesbarshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::tschchartseriesbubbleshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::tschchartseriesdefaultshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::tschchartserieslineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::tschchartseriesmixedareashadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::tschchartseriesmixedcolumnshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::tschchartseriesmixedlineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::tschchartseriespieshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::tschchartseriesscattershadow(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::tschchartseriesareastroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::tschchartseriesbarstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::tschchartseriesbubblestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::tschchartserieslinestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::tschchartseriesmixedareastroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::tschchartseriesmixedcolumnstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::tschchartseriesmixedlinestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::tschchartseriespiestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::tschchartseriesscatterstroke(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::tschchartseriesareasymbolfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::tschchartseriesbubblesymbolfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        56, _Internal::tschchartserieslinesymbolfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        57, _Internal::tschchartseriesmixedareasymbolfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        58, _Internal::tschchartseriesmixedlinesymbolfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        59, _Internal::tschchartseriesscattersymbolfill(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartseriesareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_tschchartserieslinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(62, this->_internal_tschchartseriesmixedareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(63, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(64, this->_internal_tschchartseriesareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_tschchartseriesbubblesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(66, this->_internal_tschchartserieslinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(67, this->_internal_tschchartseriesmixedareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(68, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(69, this->_internal_tschchartseriesscattersymbolfilluseseriesstroke(), target);
  }

  // optional float tschchartseriesareasymbolsize = 70;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(70, this->_internal_tschchartseriesareasymbolsize(), target);
  }

  // optional float tschchartserieslinesymbolsize = 71;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(71, this->_internal_tschchartserieslinesymbolsize(), target);
  }

  // optional float tschchartseriesmixedareasymbolsize = 72;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(72, this->_internal_tschchartseriesmixedareasymbolsize(), target);
  }

  // optional float tschchartseriesmixedlinesymbolsize = 73;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(73, this->_internal_tschchartseriesmixedlinesymbolsize(), target);
  }

  // optional float tschchartseriesscattersymbolsize = 74;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(74, this->_internal_tschchartseriesscattersymbolsize(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        75, _Internal::tschchartseriesareasymbolstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        76, _Internal::tschchartseriesbubblesymbolstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        77, _Internal::tschchartserieslinesymbolstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        78, _Internal::tschchartseriesmixedareasymbolstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        79, _Internal::tschchartseriesmixedlinesymbolstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        80, _Internal::tschchartseriesscattersymbolstroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(81, this->_internal_tschchartseriesdefaulttrendlineequationopacity(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(82, this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(83, this->_internal_tschchartseriesdefaulttrendlinersquaredopacity(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(84, this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        85, _Internal::tschchartseriesdefaulttrendlineshadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        86, _Internal::tschchartseriesdefaulttrendlinestroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriesareavaluelabelposition = 87;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(87, this->_internal_tschchartseriesareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesbarvaluelabelposition = 88;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(88, this->_internal_tschchartseriesbarvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesbubblevaluelabelposition = 89;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(89, this->_internal_tschchartseriesbubblevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(90, this->_internal_tschchartseriesdefaultvaluelabelposition(), target);
  }

  // optional int32 tschchartserieslinevaluelabelposition = 91;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(91, this->_internal_tschchartserieslinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(92, this->_internal_tschchartseriesmixedareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(93, this->_internal_tschchartseriesmixedcolumnvaluelabelposition(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(94, this->_internal_tschchartseriesmixedlinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesscattervaluelabelposition = 95;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(95, this->_internal_tschchartseriesscattervaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(96, this->_internal_tschchartseriesstackedareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(97, this->_internal_tschchartseriesstackedbarvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarspacing = 98;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(98, this->_internal_tschchartseriesdefaulterrorbarspacing(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarspacingscatterx = 99;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(99, this->_internal_tschchartseriesdefaulterrorbarspacingscatterx(), target);
  }

  // optional int32 tschchartseriesdefaultvaluelabelspacing = 100;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_tschchartseriesdefaultvaluelabelspacing(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesdefaultcalloutlinestrokestyle = 128;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        128, _Internal::tschchartseriesdefaultcalloutlinestrokestyle(this), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlinestartlineend = 129;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        129, _Internal::tschchartseriesdefaultcalloutlinestartlineend(this), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlineendlineend = 130;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        130, _Internal::tschchartseriesdefaultcalloutlineendlineend(this), target, stream);
  }

  cached_has_bits = _has_bits_[3];
  // optional int32 tschchartseriesdonutlabelparagraphstyleindex = 152;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(152, this->_internal_tschchartseriesdonutlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdonutoutsidelabelparagraphstyleindex = 153;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(153, this->_internal_tschchartseriesdonutoutsidelabelparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartSeriesStyleArchive)
  return target;
}

size_t ChartSeriesStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartSeriesStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarlineend_);
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarlineendscatterx_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarstrokescatterx_);
    }

    // optional .TSD.FillArchive tschchartseries3dareafill = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dareafill_);
    }

    // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dbarfill_);
    }

    // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dcolumnfill_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dlinefill_);
    }

    // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dpiefill_);
    }

    // optional .TSD.FillArchive tschchartseriesareafill = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareafill_);
    }

    // optional .TSD.FillArchive tschchartseriesbarfill = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbarfill_);
    }

    // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriescolumnfill_);
    }

    // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareafill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedcolumnfill_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.FillArchive tschchartseriespiefill = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespiefill_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dbarshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dcolumnshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dpieshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbarshadow_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbubbleshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultshadow_);
    }

    // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieslineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedcolumnshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespieshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesscattershadow_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareastroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbubblestroke_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieslinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareastroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedcolumnstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespiestroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesscatterstroke_);
    }

    // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareasymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbubblesymbolfill_);
    }

    // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieslinesymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareasymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedlinesymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesscattersymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareasymbolstroke_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbubblesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieslinesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareasymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedlinesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesscattersymbolstroke_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulttrendlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulttrendlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaultcalloutlinestrokestyle = 128;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultcalloutlinestrokestyle_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlinestartlineend = 129;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultcalloutlinestartlineend_);
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlineendlineend = 130;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultcalloutlineendlineend_);
    }

    // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesarealabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespielabelparagraphstyleindex());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional float tschchartseriesdefaultopacity = 24;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex());
    }

    // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartseriesareasymbolsize = 70;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartserieslinesymbolsize = 71;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesmixedareasymbolsize = 72;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesmixedlinesymbolsize = 73;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesscattersymbolsize = 74;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex());
    }

    // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex());
    }

    // optional int32 tschchartseriesareavaluelabelposition = 87;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareavaluelabelposition());
    }

    // optional int32 tschchartseriesbarvaluelabelposition = 88;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarvaluelabelposition());
    }

    // optional int32 tschchartseriesbubblevaluelabelposition = 89;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblevaluelabelposition());
    }

    // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultvaluelabelposition());
    }

    // optional int32 tschchartserieslinevaluelabelposition = 91;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinevaluelabelposition());
    }

    // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareavaluelabelposition());
    }

    // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedcolumnvaluelabelposition());
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinevaluelabelposition());
    }

    // optional int32 tschchartseriesscattervaluelabelposition = 95;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattervaluelabelposition());
    }

    // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedareavaluelabelposition());
    }

    // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedbarvaluelabelposition());
    }

    // optional int32 tschchartseriesdefaulterrorbarspacing = 98;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarspacing());
    }

    // optional int32 tschchartseriesdefaulterrorbarspacingscatterx = 99;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarspacingscatterx());
    }

    // optional int32 tschchartseriesdefaultvaluelabelspacing = 100;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultvaluelabelspacing());
    }

    // optional int32 tschchartseriesdonutlabelparagraphstyleindex = 152;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdonutlabelparagraphstyleindex());
    }

  }
  // optional int32 tschchartseriesdonutoutsidelabelparagraphstyleindex = 153;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tschchartseriesdonutoutsidelabelparagraphstyleindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartSeriesStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesStyleArchive::GetClassData() const { return &_class_data_; }

void ChartSeriesStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartSeriesStyleArchive *>(to)->MergeFrom(
      static_cast<const ChartSeriesStyleArchive &>(from));
}


void ChartSeriesStyleArchive::MergeFrom(const ChartSeriesStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartSeriesStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tschchartseriesdefaulterrorbarlineend()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarlineend());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarlineendscatterx());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartseriesdefaulterrorbarshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarshadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartseriesdefaulterrorbarstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarstroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarstrokescatterx());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartseries3dareafill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dareafill());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartseries3dbarfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dbarfill());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartseries3dcolumnfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dcolumnfill());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartseries3dlinefill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dlinefill());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartseries3dpiefill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dpiefill());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartseriesareafill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesareafill());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartseriesbarfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesbarfill());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tschchartseriescolumnfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriescolumnfill());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_tschchartseriesdefaultfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesdefaultfill());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_tschchartseriesmixedareafill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesmixedareafill());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_tschchartseriesmixedcolumnfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesmixedcolumnfill());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_tschchartseriespiefill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriespiefill());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_tschchartseries3dareashadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dareashadow());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_tschchartseries3dbarshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dbarshadow());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_tschchartseries3dcolumnshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dcolumnshadow());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_tschchartseries3dlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dlineshadow());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_tschchartseries3dpieshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dpieshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_tschchartseriesareashadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesareashadow());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_tschchartseriesbarshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesbarshadow());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_tschchartseriesbubbleshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesbubbleshadow());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_tschchartseriesdefaultshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesdefaultshadow());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_tschchartserieslineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartserieslineshadow());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_tschchartseriesmixedareashadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesmixedareashadow());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_tschchartseriesmixedcolumnshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesmixedcolumnshadow());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_tschchartseriesmixedlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesmixedlineshadow());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_tschchartseriespieshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriespieshadow());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_tschchartseriesscattershadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesscattershadow());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tschchartseriesareastroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesareastroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartseriesbarstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesbarstroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartseriesbubblestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesbubblestroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartserieslinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartserieslinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartseriesmixedareastroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedareastroke());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartseriesmixedcolumnstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedcolumnstroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartseriesmixedlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedlinestroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartseriespiestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriespiestroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartseriesscatterstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesscatterstroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartseriesareasymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesareasymbolfill());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartseriesbubblesymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesbubblesymbolfill());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartserieslinesymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartserieslinesymbolfill());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tschchartseriesmixedareasymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesmixedareasymbolfill());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_tschchartseriesmixedlinesymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesmixedlinesymbolfill());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_tschchartseriesscattersymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesscattersymbolfill());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_tschchartseriesareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesareasymbolstroke());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_tschchartseriesbubblesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesbubblesymbolstroke());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_tschchartserieslinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartserieslinesymbolstroke());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_tschchartseriesmixedareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedareasymbolstroke());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_tschchartseriesmixedlinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedlinesymbolstroke());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_tschchartseriesscattersymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesscattersymbolstroke());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_tschchartseriesdefaulttrendlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesdefaulttrendlineshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_tschchartseriesdefaulttrendlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesdefaulttrendlinestroke());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_tschchartseriesdefaultcalloutlinestrokestyle()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesdefaultcalloutlinestrokestyle());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_tschchartseriesdefaultcalloutlinestartlineend()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartseriesdefaultcalloutlinestartlineend());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_tschchartseriesdefaultcalloutlineendlineend()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartseriesdefaultcalloutlineendlineend());
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartseriesarealabelparagraphstyleindex_ = from.tschchartseriesarealabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriesbarlabelparagraphstyleindex_ = from.tschchartseriesbarlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriesdefaultlabelparagraphstyleindex_ = from.tschchartseriesdefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartserieslinelabelparagraphstyleindex_ = from.tschchartserieslinelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartseriesmixedlabelparagraphstyleindex_ = from.tschchartseriesmixedlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartseriespielabelparagraphstyleindex_ = from.tschchartseriespielabelparagraphstyleindex_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriesdefaultopacity_ = from.tschchartseriesdefaultopacity_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartseriesareaoutsidelabelparagraphstyleindex_ = from.tschchartseriesareaoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartseriesbaroutsidelabelparagraphstyleindex_ = from.tschchartseriesbaroutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = from.tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartseriesmixedoutsidelabelparagraphstyleindex_ = from.tschchartseriesmixedoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartseriespieoutsidelabelparagraphstyleindex_ = from.tschchartseriespieoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartseriesareasymbolfilluseseriesfill_ = from.tschchartseriesareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartserieslinesymbolfilluseseriesfill_ = from.tschchartserieslinesymbolfilluseseriesfill_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tschchartseriesmixedareasymbolfilluseseriesfill_ = from.tschchartseriesmixedareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartseriesmixedlinesymbolfilluseseriesfill_ = from.tschchartseriesmixedlinesymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartseriesareasymbolfilluseseriesstroke_ = from.tschchartseriesareasymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartseriesbubblesymbolfilluseseriesstroke_ = from.tschchartseriesbubblesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartserieslinesymbolfilluseseriesstroke_ = from.tschchartserieslinesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartseriesmixedareasymbolfilluseseriesstroke_ = from.tschchartseriesmixedareasymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartseriesmixedlinesymbolfilluseseriesstroke_ = from.tschchartseriesmixedlinesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartseriesscattersymbolfilluseseriesstroke_ = from.tschchartseriesscattersymbolfilluseseriesstroke_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartseriesareasymbolsize_ = from.tschchartseriesareasymbolsize_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartserieslinesymbolsize_ = from.tschchartserieslinesymbolsize_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartseriesmixedareasymbolsize_ = from.tschchartseriesmixedareasymbolsize_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartseriesmixedlinesymbolsize_ = from.tschchartseriesmixedlinesymbolsize_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartseriesscattersymbolsize_ = from.tschchartseriesscattersymbolsize_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartseriesdefaulttrendlineequationopacity_ = from.tschchartseriesdefaulttrendlineequationopacity_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = from.tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartseriesdefaulttrendlinersquaredopacity_ = from.tschchartseriesdefaulttrendlinersquaredopacity_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = from.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartseriesareavaluelabelposition_ = from.tschchartseriesareavaluelabelposition_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartseriesbarvaluelabelposition_ = from.tschchartseriesbarvaluelabelposition_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriesbubblevaluelabelposition_ = from.tschchartseriesbubblevaluelabelposition_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriesdefaultvaluelabelposition_ = from.tschchartseriesdefaultvaluelabelposition_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartserieslinevaluelabelposition_ = from.tschchartserieslinevaluelabelposition_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartseriesmixedareavaluelabelposition_ = from.tschchartseriesmixedareavaluelabelposition_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartseriesmixedcolumnvaluelabelposition_ = from.tschchartseriesmixedcolumnvaluelabelposition_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriesmixedlinevaluelabelposition_ = from.tschchartseriesmixedlinevaluelabelposition_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartseriesscattervaluelabelposition_ = from.tschchartseriesscattervaluelabelposition_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartseriesstackedareavaluelabelposition_ = from.tschchartseriesstackedareavaluelabelposition_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartseriesstackedbarvaluelabelposition_ = from.tschchartseriesstackedbarvaluelabelposition_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartseriesdefaulterrorbarspacing_ = from.tschchartseriesdefaulterrorbarspacing_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartseriesdefaulterrorbarspacingscatterx_ = from.tschchartseriesdefaulterrorbarspacingscatterx_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartseriesdefaultvaluelabelspacing_ = from.tschchartseriesdefaultvaluelabelspacing_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartseriesdonutlabelparagraphstyleindex_ = from.tschchartseriesdonutlabelparagraphstyleindex_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_tschchartseriesdonutoutsidelabelparagraphstyleindex(from._internal_tschchartseriesdonutoutsidelabelparagraphstyleindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesStyleArchive::CopyFrom(const ChartSeriesStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartSeriesStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartseriesdefaulterrorbarlineend()) {
    if (!tschchartseriesdefaulterrorbarlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    if (!tschchartseriesdefaulterrorbarlineendscatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarshadow()) {
    if (!tschchartseriesdefaulterrorbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstroke()) {
    if (!tschchartseriesdefaulterrorbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    if (!tschchartseriesdefaulterrorbarstrokescatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareafill()) {
    if (!tschchartseries3dareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarfill()) {
    if (!tschchartseries3dbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnfill()) {
    if (!tschchartseries3dcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlinefill()) {
    if (!tschchartseries3dlinefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpiefill()) {
    if (!tschchartseries3dpiefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareafill()) {
    if (!tschchartseriesareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarfill()) {
    if (!tschchartseriesbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescolumnfill()) {
    if (!tschchartseriescolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultfill()) {
    if (!tschchartseriesdefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareafill()) {
    if (!tschchartseriesmixedareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnfill()) {
    if (!tschchartseriesmixedcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiefill()) {
    if (!tschchartseriespiefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareashadow()) {
    if (!tschchartseries3dareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarshadow()) {
    if (!tschchartseries3dbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnshadow()) {
    if (!tschchartseries3dcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlineshadow()) {
    if (!tschchartseries3dlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpieshadow()) {
    if (!tschchartseries3dpieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareashadow()) {
    if (!tschchartseriesareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarshadow()) {
    if (!tschchartseriesbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubbleshadow()) {
    if (!tschchartseriesbubbleshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultshadow()) {
    if (!tschchartseriesdefaultshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslineshadow()) {
    if (!tschchartserieslineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareashadow()) {
    if (!tschchartseriesmixedareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnshadow()) {
    if (!tschchartseriesmixedcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlineshadow()) {
    if (!tschchartseriesmixedlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespieshadow()) {
    if (!tschchartseriespieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattershadow()) {
    if (!tschchartseriesscattershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareastroke()) {
    if (!tschchartseriesareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarstroke()) {
    if (!tschchartseriesbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblestroke()) {
    if (!tschchartseriesbubblestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinestroke()) {
    if (!tschchartserieslinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareastroke()) {
    if (!tschchartseriesmixedareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnstroke()) {
    if (!tschchartseriesmixedcolumnstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinestroke()) {
    if (!tschchartseriesmixedlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiestroke()) {
    if (!tschchartseriespiestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscatterstroke()) {
    if (!tschchartseriesscatterstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolfill()) {
    if (!tschchartseriesareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolfill()) {
    if (!tschchartseriesbubblesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolfill()) {
    if (!tschchartserieslinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolfill()) {
    if (!tschchartseriesmixedareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolfill()) {
    if (!tschchartseriesmixedlinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolfill()) {
    if (!tschchartseriesscattersymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolstroke()) {
    if (!tschchartseriesareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolstroke()) {
    if (!tschchartseriesbubblesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolstroke()) {
    if (!tschchartserieslinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolstroke()) {
    if (!tschchartseriesmixedareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolstroke()) {
    if (!tschchartseriesmixedlinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolstroke()) {
    if (!tschchartseriesscattersymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlineshadow()) {
    if (!tschchartseriesdefaulttrendlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlinestroke()) {
    if (!tschchartseriesdefaulttrendlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultcalloutlinestrokestyle()) {
    if (!tschchartseriesdefaultcalloutlinestrokestyle_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultcalloutlinestartlineend()) {
    if (!tschchartseriesdefaultcalloutlinestartlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultcalloutlineendlineend()) {
    if (!tschchartseriesdefaultcalloutlineendlineend_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesStyleArchive::InternalSwap(ChartSeriesStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdonutoutsidelabelparagraphstyleindex_)
      + sizeof(ChartSeriesStyleArchive::tschchartseriesdonutoutsidelabelparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarlineend_)>(
          reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarlineend_),
          reinterpret_cast<char*>(&other->tschchartseriesdefaulterrorbarlineend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[6]);
}

// ===================================================================

class ChartSeriesNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesNonStyleArchive>()._has_bits_);
  static const ::TSK::FormatStructArchive& tschchartseriesdefault1_0dateformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefault1_0dateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdefault1_0numberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefault1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriespie1_0numberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriespie1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartseriespie2_3labelexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartseriesbubbleadjustmentscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdefaultdateformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaultdateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdefaultdurationformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaultdurationformat(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartseriesareaenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_tschchartseriesbarenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_tschchartseriesbubbleenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_tschchartseriesdefaultenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_tschchartserieslineenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_tschchartseriespieenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_tschchartseriesscatterenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_tschchartseriesstackedareaenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_tschchartseriesstackedbarenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsettingscatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaulterrorbartype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaulterrorbartypescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartseriespielabelexplosion(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_tschchartseriesbubblelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartserieslinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartseriesmixedlinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartseriesscatterlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriespienumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartseriesdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartseriespienumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesstackedpercentnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartseriesdefaultseriestype(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbar(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbarscatterx(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_tschchartseriesbubbleshowlabelsinfront(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_tschchartseriesdefaultshowlabelsinfront(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_tschchartseriesscattershowline(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartseriesbubbleshownegativedata(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartseriesbubbleshowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartseriespieshowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartseriesscattershowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_tschchartseriesareashowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartserieslineshowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_tschchartseriesmixedareashowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_tschchartseriesmixedlineshowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartseriesscattershowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartseriesdefaultshowtrendline(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartseriesareashowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartseriesbarshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tschchartseriesbubbleshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tschchartseriesdefaultshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_tschchartserieslineshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_tschchartseriesmixedshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_tschchartseriespieshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_tschchartseriesscattershowvaluelabels(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_tschchartseriesbubblesizedimension(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_tschchartseriesareastacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_tschchartseriesbarstacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_tschchartseriesbubblestacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_tschchartseriesdefaultstacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_tschchartserieslinestacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_tschchartseriespiestacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_tschchartseriesscatterstacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_tschchartseriesstackedareastacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_tschchartseriesstackedbarstacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_tschchartseriesareasymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_tschchartserieslinesymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_tschchartseriesmixedareasymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_tschchartseriesmixedlinesymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_tschchartseriesscattersymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_tschchartseriesdefaulttrendlinelabelstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartseriesdefaulttrendlineorder(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesdefaulttrendlineperiod(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowequation(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowlabel(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowr2value(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_tschchartseriesdefaulttrendlinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriesbubblevaluelabelsaxis(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_tschchartseriesscattervaluelabelsaxis(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_tschchartseriespiewedgeexplosion(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_tschchartseriesdefaultyaxisordinal(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
};

const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefault1_0dateformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefault1_0dateformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefault1_0numberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefault1_0numberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriespie1_0numberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriespie1_0numberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaultdateformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaultdateformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaultdurationformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaultdurationformat_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarcustomnegativedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarcustompositivedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaultnumberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriespienumberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesstackedpercentnumberformat_;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefault1_0dateformat() {
  if (tschchartseriesdefault1_0dateformat_ != nullptr) tschchartseriesdefault1_0dateformat_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefault1_0numberformat() {
  if (tschchartseriesdefault1_0numberformat_ != nullptr) tschchartseriesdefault1_0numberformat_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriespie1_0numberformat() {
  if (tschchartseriespie1_0numberformat_ != nullptr) tschchartseriespie1_0numberformat_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultdateformat() {
  if (tschchartseriesdefaultdateformat_ != nullptr) tschchartseriesdefaultdateformat_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultdurationformat() {
  if (tschchartseriesdefaultdurationformat_ != nullptr) tschchartseriesdefaultdurationformat_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedata() {
  if (tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr) tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr) tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedata() {
  if (tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr) tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr) tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultnumberformat() {
  if (tschchartseriesdefaultnumberformat_ != nullptr) tschchartseriesdefaultnumberformat_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriespienumberformat() {
  if (tschchartseriespienumberformat_ != nullptr) tschchartseriespienumberformat_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesstackedpercentnumberformat() {
  if (tschchartseriesstackedpercentnumberformat_ != nullptr) tschchartseriesstackedpercentnumberformat_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartSeriesNonStyleArchive)
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartseriesdefaulttrendlinelabelstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartseriesdefaulttrendlinelabelstring()) {
    tschchartseriesdefaulttrendlinelabelstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartseriesdefaulttrendlinelabelstring(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
    tschchartseriesdefaulterrorbarcustomnegativedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartseriesdefaulterrorbarcustomnegativedata_);
  } else {
    tschchartseriesdefaulterrorbarcustomnegativedata_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
    tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  } else {
    tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedata()) {
    tschchartseriesdefaulterrorbarcustompositivedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartseriesdefaulterrorbarcustompositivedata_);
  } else {
    tschchartseriesdefaulterrorbarcustompositivedata_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
    tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  } else {
    tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefault1_0numberformat()) {
    tschchartseriesdefault1_0numberformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriesdefault1_0numberformat_);
  } else {
    tschchartseriesdefault1_0numberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriespie1_0numberformat()) {
    tschchartseriespie1_0numberformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriespie1_0numberformat_);
  } else {
    tschchartseriespie1_0numberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriesstackedpercentnumberformat()) {
    tschchartseriesstackedpercentnumberformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriesstackedpercentnumberformat_);
  } else {
    tschchartseriesstackedpercentnumberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefault1_0dateformat()) {
    tschchartseriesdefault1_0dateformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriesdefault1_0dateformat_);
  } else {
    tschchartseriesdefault1_0dateformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultdurationformat()) {
    tschchartseriesdefaultdurationformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriesdefaultdurationformat_);
  } else {
    tschchartseriesdefaultdurationformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultdateformat()) {
    tschchartseriesdefaultdateformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriesdefaultdateformat_);
  } else {
    tschchartseriesdefaultdateformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultnumberformat()) {
    tschchartseriesdefaultnumberformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriesdefaultnumberformat_);
  } else {
    tschchartseriesdefaultnumberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriespienumberformat()) {
    tschchartseriespienumberformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriespienumberformat_);
  } else {
    tschchartseriespienumberformat_ = nullptr;
  }
  ::memcpy(&tschchartseriesbubbleadjustmentscale_, &from.tschchartseriesbubbleadjustmentscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesstackedbarstacklabels_) -
    reinterpret_cast<char*>(&tschchartseriesbubbleadjustmentscale_)) + sizeof(tschchartseriesstackedbarstacklabels_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartSeriesNonStyleArchive)
}

inline void ChartSeriesNonStyleArchive::SharedCtor() {
tschchartseriesdefaulttrendlinelabelstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarcustomnegativedata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesstackedbarstacklabels_) -
    reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarcustomnegativedata_)) + sizeof(tschchartseriesstackedbarstacklabels_));
}

ChartSeriesNonStyleArchive::~ChartSeriesNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartSeriesNonStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartSeriesNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tschchartseriesdefaulttrendlinelabelstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarcustomnegativedata_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarcustompositivedata_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  if (this != internal_default_instance()) delete tschchartseriesdefault1_0numberformat_;
  if (this != internal_default_instance()) delete tschchartseriespie1_0numberformat_;
  if (this != internal_default_instance()) delete tschchartseriesstackedpercentnumberformat_;
  if (this != internal_default_instance()) delete tschchartseriesdefault1_0dateformat_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultdurationformat_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultdateformat_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultnumberformat_;
  if (this != internal_default_instance()) delete tschchartseriespienumberformat_;
}

void ChartSeriesNonStyleArchive::ArenaDtor(void* object) {
  ChartSeriesNonStyleArchive* _this = reinterpret_cast< ChartSeriesNonStyleArchive* >(object);
  (void)_this;
}
void ChartSeriesNonStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSeriesNonStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSeriesNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriesdefaulttrendlinelabelstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr);
      tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr);
      tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr);
      tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr);
      tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartseriesdefault1_0numberformat_ != nullptr);
      tschchartseriesdefault1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartseriespie1_0numberformat_ != nullptr);
      tschchartseriespie1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartseriesstackedpercentnumberformat_ != nullptr);
      tschchartseriesstackedpercentnumberformat_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartseriesdefault1_0dateformat_ != nullptr);
      tschchartseriesdefault1_0dateformat_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartseriesdefaultdurationformat_ != nullptr);
      tschchartseriesdefaultdurationformat_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartseriesdefaultdateformat_ != nullptr);
      tschchartseriesdefaultdateformat_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartseriesdefaultnumberformat_ != nullptr);
      tschchartseriesdefaultnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tschchartseriespienumberformat_ != nullptr);
      tschchartseriespienumberformat_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&tschchartseriesbubbleadjustmentscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarfixedvaluescatterx_) -
        reinterpret_cast<char*>(&tschchartseriesbubbleadjustmentscale_)) + sizeof(tschchartseriesdefaulterrorbarfixedvaluescatterx_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartseriesdefaulterrorbarpercentvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaulterrorbartypescatterx_) -
        reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarpercentvalue_)) + sizeof(tschchartseriesdefaulterrorbartypescatterx_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartseriespie2_3labelexplosion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaultseriestype_) -
        reinterpret_cast<char*>(&tschchartseriespie2_3labelexplosion_)) + sizeof(tschchartseriesdefaultseriestype_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartseriesmixedlineshowsymbol_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriespieshowserieslabels_) -
        reinterpret_cast<char*>(&tschchartseriesmixedlineshowsymbol_)) + sizeof(tschchartseriespieshowserieslabels_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tschchartseriesbarshowvaluelabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesmixedareashowsymbol_) -
        reinterpret_cast<char*>(&tschchartseriesbarshowvaluelabels_)) + sizeof(tschchartseriesmixedareashowsymbol_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartseriesbubblesizedimension_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaulttrendlineequationoffsety_) -
        reinterpret_cast<char*>(&tschchartseriesbubblesizedimension_)) + sizeof(tschchartseriesdefaulttrendlineequationoffsety_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartseriesdefaulttrendlineorder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaulttrendlinetype_) -
        reinterpret_cast<char*>(&tschchartseriesdefaulttrendlineorder_)) + sizeof(tschchartseriesdefaulttrendlinetype_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartseriespiewedgeexplosion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesmixedshowvaluelabels_) -
        reinterpret_cast<char*>(&tschchartseriespiewedgeexplosion_)) + sizeof(tschchartseriesmixedshowvaluelabels_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tschchartseriespieshowvaluelabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesbarenablecalloutline_) -
        reinterpret_cast<char*>(&tschchartseriespieshowvaluelabels_)) + sizeof(tschchartseriesbarenablecalloutline_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartseriesbubbleenablecalloutline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesbubblestacklabels_) -
        reinterpret_cast<char*>(&tschchartseriesbubbleenablecalloutline_)) + sizeof(tschchartseriesbubblestacklabels_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&tschchartseriesdefaultstacklabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesstackedbarstacklabels_) -
        reinterpret_cast<char*>(&tschchartseriesdefaultstacklabels_)) + sizeof(tschchartseriesstackedbarstacklabels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesNonStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float tschchartseriesbubbleadjustmentscale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_tschchartseriesbubbleadjustmentscale(&_has_bits_);
          tschchartseriesbubbleadjustmentscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvalue(&_has_bits_);
          tschchartseriesdefaulterrorbarfixedvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(&_has_bits_);
          tschchartseriesdefaulterrorbarfixedvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvalue(&_has_bits_);
          tschchartseriesdefaulterrorbarpercentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(&_has_bits_);
          tschchartseriesdefaulterrorbarpercentvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsetting(&_has_bits_);
          tschchartseriesdefaulterrorbarsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsettingscatterx(&_has_bits_);
          tschchartseriesdefaulterrorbarsettingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvalue(&_has_bits_);
          tschchartseriesdefaulterrorbarstddevvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(&_has_bits_);
          tschchartseriesdefaulterrorbarstddevvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartype = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartype(&_has_bits_);
          tschchartseriesdefaulterrorbartype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartypescatterx(&_has_bits_);
          tschchartseriesdefaulterrorbartypescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriespie2_3labelexplosion = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_tschchartseriespie2_3labelexplosion(&_has_bits_);
          tschchartseriespie2_3labelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblelinetype = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tschchartseriesbubblelinetype(&_has_bits_);
          tschchartseriesbubblelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelinetype = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartserieslinelinetype(&_has_bits_);
          tschchartserieslinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinelinetype = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartseriesmixedlinelinetype(&_has_bits_);
          tschchartseriesmixedlinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscatterlinetype = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartseriesscatterlinetype(&_has_bits_);
          tschchartseriesscatterlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefault1_0numberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespie1_0numberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultnumberformattype = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartseriesdefaultnumberformattype(&_has_bits_);
          tschchartseriesdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriespienumberformattype = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartseriespienumberformattype(&_has_bits_);
          tschchartseriespienumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesstackedpercentnumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultseriestype = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartseriesdefaultseriestype(&_has_bits_);
          tschchartseriesdefaultseriestype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbar = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbar(&_has_bits_);
          tschchartseriesdefaultshowerrorbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbarscatterx(&_has_bits_);
          tschchartseriesdefaultshowerrorbarscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowline = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartseriesscattershowline(&_has_bits_);
          tschchartseriesscattershowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshownegativedata = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartseriesbubbleshownegativedata(&_has_bits_);
          tschchartseriesbubbleshownegativedata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowserieslabels = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartseriespieshowserieslabels(&_has_bits_);
          tschchartseriespieshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowsymbol = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartseriesareashowsymbol(&_has_bits_);
          tschchartseriesareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowsymbol = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartserieslineshowsymbol(&_has_bits_);
          tschchartserieslineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareashowsymbol = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartseriesmixedareashowsymbol(&_has_bits_);
          tschchartseriesmixedareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlineshowsymbol = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschchartseriesmixedlineshowsymbol(&_has_bits_);
          tschchartseriesmixedlineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowsymbol = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartseriesscattershowsymbol(&_has_bits_);
          tschchartseriesscattershowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowtrendline = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartseriesdefaultshowtrendline(&_has_bits_);
          tschchartseriesdefaultshowtrendline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowvaluelabels = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartseriesareashowvaluelabels(&_has_bits_);
          tschchartseriesareashowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbarshowvaluelabels = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartseriesbarshowvaluelabels(&_has_bits_);
          tschchartseriesbarshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowvaluelabels = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tschchartseriesbubbleshowvaluelabels(&_has_bits_);
          tschchartseriesbubbleshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowvaluelabels = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschchartseriesdefaultshowvaluelabels(&_has_bits_);
          tschchartseriesdefaultshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowvaluelabels = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartserieslineshowvaluelabels(&_has_bits_);
          tschchartserieslineshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedshowvaluelabels = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartseriesmixedshowvaluelabels(&_has_bits_);
          tschchartseriesmixedshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowvaluelabels = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tschchartseriespieshowvaluelabels(&_has_bits_);
          tschchartseriespieshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowvaluelabels = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartseriesscattershowvaluelabels(&_has_bits_);
          tschchartseriesscattershowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblesizedimension = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartseriesbubblesizedimension(&_has_bits_);
          tschchartseriesbubblesizedimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareasymboltype = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartseriesareasymboltype(&_has_bits_);
          tschchartseriesareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinesymboltype = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartserieslinesymboltype(&_has_bits_);
          tschchartserieslinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareasymboltype = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tschchartseriesmixedareasymboltype(&_has_bits_);
          tschchartseriesmixedareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinesymboltype = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartseriesmixedlinesymboltype(&_has_bits_);
          tschchartseriesmixedlinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattersymboltype = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartseriesscattersymboltype(&_has_bits_);
          tschchartseriesscattersymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsetx(&_has_bits_);
          tschchartseriesdefaulttrendlineequationoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsety(&_has_bits_);
          tschchartseriesdefaulttrendlineequationoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineorder = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineorder(&_has_bits_);
          tschchartseriesdefaulttrendlineorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineperiod(&_has_bits_);
          tschchartseriesdefaulttrendlineperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(&_has_bits_);
          tschchartseriesdefaulttrendlinersquaredoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsety(&_has_bits_);
          tschchartseriesdefaulttrendlinersquaredoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowequation(&_has_bits_);
          tschchartseriesdefaulttrendlineshowequation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowlabel(&_has_bits_);
          tschchartseriesdefaulttrendlineshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowr2value(&_has_bits_);
          tschchartseriesdefaulttrendlineshowr2value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinetype = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinetype(&_has_bits_);
          tschchartseriesdefaulttrendlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriespiewedgeexplosion = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_tschchartseriespiewedgeexplosion(&_has_bits_);
          tschchartseriespiewedgeexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultyaxisordinal = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartseriesdefaultyaxisordinal(&_has_bits_);
          tschchartseriesdefaultyaxisordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowserieslabels = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartseriesbubbleshowserieslabels(&_has_bits_);
          tschchartseriesbubbleshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartseriesbubblevaluelabelsaxis(&_has_bits_);
          tschchartseriesbubblevaluelabelsaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowserieslabels = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschchartseriesscattershowserieslabels(&_has_bits_);
          tschchartseriesscattershowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartseriesscattervaluelabelsaxis(&_has_bits_);
          tschchartseriesscattervaluelabelsaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefault1_0dateformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultdurationformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultdateformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespienumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartseriesdefaultshowlabelsinfront(&_has_bits_);
          tschchartseriesdefaultshowlabelsinfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartseriesbubbleshowlabelsinfront(&_has_bits_);
          tschchartseriesbubbleshowlabelsinfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriespieenablecalloutline = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartseriespieenablecalloutline(&_has_bits_);
          tschchartseriespieenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareaenablecalloutline = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartseriesareaenablecalloutline(&_has_bits_);
          tschchartseriesareaenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarenablecalloutline = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tschchartseriesbarenablecalloutline(&_has_bits_);
          tschchartseriesbarenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubbleenablecalloutline = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschchartseriesbubbleenablecalloutline(&_has_bits_);
          tschchartseriesbubbleenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslineenablecalloutline = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartserieslineenablecalloutline(&_has_bits_);
          tschchartserieslineenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscatterenablecalloutline = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartseriesscatterenablecalloutline(&_has_bits_);
          tschchartseriesscatterenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedareaenablecalloutline = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tschchartseriesstackedareaenablecalloutline(&_has_bits_);
          tschchartseriesstackedareaenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedbarenablecalloutline = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartseriesstackedbarenablecalloutline(&_has_bits_);
          tschchartseriesstackedbarenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultenablecalloutline = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartseriesdefaultenablecalloutline(&_has_bits_);
          tschchartseriesdefaultenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriespiestacklabels = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartseriespiestacklabels(&_has_bits_);
          tschchartseriespiestacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesareastacklabels = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartseriesareastacklabels(&_has_bits_);
          tschchartseriesareastacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbarstacklabels = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tschchartseriesbarstacklabels(&_has_bits_);
          tschchartseriesbarstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubblestacklabels = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartseriesbubblestacklabels(&_has_bits_);
          tschchartseriesbubblestacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartserieslinestacklabels = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartserieslinestacklabels(&_has_bits_);
          tschchartserieslinestacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscatterstacklabels = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartseriesscatterstacklabels(&_has_bits_);
          tschchartseriesscatterstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesstackedareastacklabels = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartseriesstackedareastacklabels(&_has_bits_);
          tschchartseriesstackedareastacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesstackedbarstacklabels = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tschchartseriesstackedbarstacklabels(&_has_bits_);
          tschchartseriesstackedbarstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultstacklabels = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartseriesdefaultstacklabels(&_has_bits_);
          tschchartseriesdefaultstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriespielabelexplosion = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_tschchartseriespielabelexplosion(&_has_bits_);
          tschchartseriespielabelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSeriesNonStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float tschchartseriesbubbleadjustmentscale = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_tschchartseriesbubbleadjustmentscale(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tschchartseriesdefaulterrorbarcustomnegativedata(this), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(this), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tschchartseriesdefaulterrorbarcustompositivedata(this), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(this), target, stream);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_tschchartseriesdefaulterrorbarfixedvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_tschchartseriesdefaulterrorbarfixedvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_tschchartseriesdefaulterrorbarpercentvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_tschchartseriesdefaulterrorbarpercentvaluescatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_tschchartseriesdefaulterrorbarsetting(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_tschchartseriesdefaulterrorbarsettingscatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_tschchartseriesdefaulterrorbarstddevvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_tschchartseriesdefaulterrorbarstddevvaluescatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartype = 14;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_tschchartseriesdefaulterrorbartype(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_tschchartseriesdefaulterrorbartypescatterx(), target);
  }

  // optional float tschchartseriespie2_3labelexplosion = 16;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_tschchartseriespie2_3labelexplosion(), target);
  }

  // optional int32 tschchartseriesbubblelinetype = 17;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_tschchartseriesbubblelinetype(), target);
  }

  // optional int32 tschchartserieslinelinetype = 18;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_tschchartserieslinelinetype(), target);
  }

  // optional int32 tschchartseriesmixedlinelinetype = 19;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartseriesmixedlinelinetype(), target);
  }

  // optional int32 tschchartseriesscatterlinetype = 20;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartseriesscatterlinetype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::tschchartseriesdefault1_0numberformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::tschchartseriespie1_0numberformat(this), target, stream);
  }

  // optional int32 tschchartseriesdefaultnumberformattype = 23;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartseriesdefaultnumberformattype(), target);
  }

  // optional int32 tschchartseriespienumberformattype = 24;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_tschchartseriespienumberformattype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::tschchartseriesstackedpercentnumberformat(this), target, stream);
  }

  // optional int32 tschchartseriesdefaultseriestype = 26;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_tschchartseriesdefaultseriestype(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool tschchartseriesdefaultshowerrorbar = 27;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartseriesdefaultshowerrorbar(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartseriesdefaultshowerrorbarscatterx(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartseriesscattershowline = 29;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_tschchartseriesscattershowline(), target);
  }

  // optional bool tschchartseriesbubbleshownegativedata = 30;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartseriesbubbleshownegativedata(), target);
  }

  // optional bool tschchartseriespieshowserieslabels = 31;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_tschchartseriespieshowserieslabels(), target);
  }

  // optional bool tschchartseriesareashowsymbol = 32;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartseriesareashowsymbol(), target);
  }

  // optional bool tschchartserieslineshowsymbol = 33;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartserieslineshowsymbol(), target);
  }

  // optional bool tschchartseriesmixedareashowsymbol = 34;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_tschchartseriesmixedareashowsymbol(), target);
  }

  // optional bool tschchartseriesmixedlineshowsymbol = 35;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_tschchartseriesmixedlineshowsymbol(), target);
  }

  // optional bool tschchartseriesscattershowsymbol = 36;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_tschchartseriesscattershowsymbol(), target);
  }

  // optional bool tschchartseriesdefaultshowtrendline = 37;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_tschchartseriesdefaultshowtrendline(), target);
  }

  // optional bool tschchartseriesareashowvaluelabels = 38;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_tschchartseriesareashowvaluelabels(), target);
  }

  // optional bool tschchartseriesbarshowvaluelabels = 39;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_tschchartseriesbarshowvaluelabels(), target);
  }

  // optional bool tschchartseriesbubbleshowvaluelabels = 40;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_tschchartseriesbubbleshowvaluelabels(), target);
  }

  // optional bool tschchartseriesdefaultshowvaluelabels = 41;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_tschchartseriesdefaultshowvaluelabels(), target);
  }

  // optional bool tschchartserieslineshowvaluelabels = 42;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_tschchartserieslineshowvaluelabels(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool tschchartseriesmixedshowvaluelabels = 43;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_tschchartseriesmixedshowvaluelabels(), target);
  }

  // optional bool tschchartseriespieshowvaluelabels = 44;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_tschchartseriespieshowvaluelabels(), target);
  }

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_tschchartseriesscattershowvaluelabels(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartseriesbubblesizedimension = 46;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_tschchartseriesbubblesizedimension(), target);
  }

  // optional int32 tschchartseriesareasymboltype = 47;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_tschchartseriesareasymboltype(), target);
  }

  // optional int32 tschchartserieslinesymboltype = 48;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_tschchartserieslinesymboltype(), target);
  }

  // optional int32 tschchartseriesmixedareasymboltype = 49;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->_internal_tschchartseriesmixedareasymboltype(), target);
  }

  // optional int32 tschchartseriesmixedlinesymboltype = 50;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_tschchartseriesmixedlinesymboltype(), target);
  }

  // optional int32 tschchartseriesscattersymboltype = 51;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(51, this->_internal_tschchartseriesscattersymboltype(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(52, this->_internal_tschchartseriesdefaulttrendlineequationoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(53, this->_internal_tschchartseriesdefaulttrendlineequationoffsety(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartseriesdefaulttrendlinelabelstring().data(), static_cast<int>(this->_internal_tschchartseriesdefaulttrendlinelabelstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_tschchartseriesdefaulttrendlinelabelstring(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartseriesdefaulttrendlineorder = 55;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(55, this->_internal_tschchartseriesdefaulttrendlineorder(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(56, this->_internal_tschchartseriesdefaulttrendlineperiod(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(57, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(58, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsety(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_tschchartseriesdefaulttrendlineshowequation(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartseriesdefaulttrendlineshowlabel(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_tschchartseriesdefaulttrendlineshowr2value(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinetype = 62;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(62, this->_internal_tschchartseriesdefaulttrendlinetype(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float tschchartseriespiewedgeexplosion = 63;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(63, this->_internal_tschchartseriespiewedgeexplosion(), target);
  }

  // optional int32 tschchartseriesdefaultyaxisordinal = 64;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(64, this->_internal_tschchartseriesdefaultyaxisordinal(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartseriesbubbleshowserieslabels = 65;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_tschchartseriesbubbleshowserieslabels(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(66, this->_internal_tschchartseriesbubblevaluelabelsaxis(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartseriesscattershowserieslabels = 67;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(67, this->_internal_tschchartseriesscattershowserieslabels(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(68, this->_internal_tschchartseriesscattervaluelabelsaxis(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        69, _Internal::tschchartseriesdefault1_0dateformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::tschchartseriesdefaultdurationformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        71, _Internal::tschchartseriesdefaultdateformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        98, _Internal::tschchartseriesdefaultnumberformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        99, _Internal::tschchartseriespienumberformat(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(100, this->_internal_tschchartseriesdefaultshowlabelsinfront(), target);
  }

  // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(101, this->_internal_tschchartseriesbubbleshowlabelsinfront(), target);
  }

  // optional int32 tschchartseriespieenablecalloutline = 102;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(102, this->_internal_tschchartseriespieenablecalloutline(), target);
  }

  // optional int32 tschchartseriesareaenablecalloutline = 103;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(103, this->_internal_tschchartseriesareaenablecalloutline(), target);
  }

  // optional int32 tschchartseriesbarenablecalloutline = 104;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(104, this->_internal_tschchartseriesbarenablecalloutline(), target);
  }

  // optional int32 tschchartseriesbubbleenablecalloutline = 105;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(105, this->_internal_tschchartseriesbubbleenablecalloutline(), target);
  }

  // optional int32 tschchartserieslineenablecalloutline = 106;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(106, this->_internal_tschchartserieslineenablecalloutline(), target);
  }

  // optional int32 tschchartseriesscatterenablecalloutline = 107;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(107, this->_internal_tschchartseriesscatterenablecalloutline(), target);
  }

  // optional int32 tschchartseriesstackedareaenablecalloutline = 108;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(108, this->_internal_tschchartseriesstackedareaenablecalloutline(), target);
  }

  // optional int32 tschchartseriesstackedbarenablecalloutline = 109;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(109, this->_internal_tschchartseriesstackedbarenablecalloutline(), target);
  }

  // optional int32 tschchartseriesdefaultenablecalloutline = 110;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_tschchartseriesdefaultenablecalloutline(), target);
  }

  // optional bool tschchartseriespiestacklabels = 138;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(138, this->_internal_tschchartseriespiestacklabels(), target);
  }

  // optional bool tschchartseriesareastacklabels = 139;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(139, this->_internal_tschchartseriesareastacklabels(), target);
  }

  // optional bool tschchartseriesbarstacklabels = 140;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(140, this->_internal_tschchartseriesbarstacklabels(), target);
  }

  // optional bool tschchartseriesbubblestacklabels = 141;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(141, this->_internal_tschchartseriesbubblestacklabels(), target);
  }

  // optional bool tschchartserieslinestacklabels = 142;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(142, this->_internal_tschchartserieslinestacklabels(), target);
  }

  // optional bool tschchartseriesscatterstacklabels = 143;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(143, this->_internal_tschchartseriesscatterstacklabels(), target);
  }

  // optional bool tschchartseriesstackedareastacklabels = 144;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(144, this->_internal_tschchartseriesstackedareastacklabels(), target);
  }

  // optional bool tschchartseriesstackedbarstacklabels = 145;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(145, this->_internal_tschchartseriesstackedbarstacklabels(), target);
  }

  // optional bool tschchartseriesdefaultstacklabels = 146;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(146, this->_internal_tschchartseriesdefaultstacklabels(), target);
  }

  // optional float tschchartseriespielabelexplosion = 147;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(147, this->_internal_tschchartseriespielabelexplosion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartSeriesNonStyleArchive)
  return target;
}

size_t ChartSeriesNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartseriesdefaulttrendlinelabelstring());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarcustomnegativedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarcustompositivedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefault1_0numberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespie1_0numberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesstackedpercentnumberformat_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefault1_0dateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultdurationformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultdateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultnumberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespienumberformat_);
    }

    // optional float tschchartseriesbubbleadjustmentscale = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarsetting());
    }

    // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarsettingscatterx());
    }

    // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesdefaulterrorbartype = 14;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbartype());
    }

    // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbartypescatterx());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartseriespie2_3labelexplosion = 16;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesbubblelinetype = 17;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblelinetype());
    }

    // optional int32 tschchartserieslinelinetype = 18;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelinetype());
    }

    // optional int32 tschchartseriesmixedlinelinetype = 19;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinelinetype());
    }

    // optional int32 tschchartseriesscatterlinetype = 20;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscatterlinetype());
    }

    // optional int32 tschchartseriesdefaultnumberformattype = 23;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultnumberformattype());
    }

    // optional int32 tschchartseriespienumberformattype = 24;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespienumberformattype());
    }

    // optional int32 tschchartseriesdefaultseriestype = 26;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultseriestype());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool tschchartseriesmixedlineshowsymbol = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowsymbol = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowtrendline = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowvaluelabels = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowline = 29;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshownegativedata = 30;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshowserieslabels = 65;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowserieslabels = 31;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool tschchartseriesbarshowvaluelabels = 39;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshowvaluelabels = 40;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowvaluelabels = 41;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowvaluelabels = 42;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowserieslabels = 67;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowsymbol = 32;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowsymbol = 33;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareashowsymbol = 34;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 tschchartseriesbubblesizedimension = 46;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblesizedimension());
    }

    // optional int32 tschchartseriesareasymboltype = 47;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareasymboltype());
    }

    // optional int32 tschchartserieslinesymboltype = 48;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinesymboltype());
    }

    // optional int32 tschchartseriesmixedareasymboltype = 49;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareasymboltype());
    }

    // optional int32 tschchartseriesmixedlinesymboltype = 50;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinesymboltype());
    }

    // optional int32 tschchartseriesscattersymboltype = 51;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattersymboltype());
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriesdefaulttrendlineorder = 55;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineorder());
    }

    // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineperiod());
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesdefaulttrendlinetype = 62;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinetype());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional float tschchartseriespiewedgeexplosion = 63;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaultyaxisordinal = 64;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultyaxisordinal());
    }

    // optional bool tschchartseriesdefaultshowerrorbar = 27;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblevaluelabelsaxis());
    }

    // optional bool tschchartseriesmixedshowvaluelabels = 43;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool tschchartseriespieshowvaluelabels = 44;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowvaluelabels = 45;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareastacklabels = 139;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattervaluelabelsaxis());
    }

    // optional int32 tschchartseriespieenablecalloutline = 102;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespieenablecalloutline());
    }

    // optional float tschchartseriespielabelexplosion = 147;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesareaenablecalloutline = 103;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareaenablecalloutline());
    }

    // optional int32 tschchartseriesbarenablecalloutline = 104;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarenablecalloutline());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 tschchartseriesbubbleenablecalloutline = 105;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubbleenablecalloutline());
    }

    // optional int32 tschchartserieslineenablecalloutline = 106;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslineenablecalloutline());
    }

    // optional int32 tschchartseriesscatterenablecalloutline = 107;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscatterenablecalloutline());
    }

    // optional int32 tschchartseriesstackedareaenablecalloutline = 108;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedareaenablecalloutline());
    }

    // optional int32 tschchartseriesstackedbarenablecalloutline = 109;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedbarenablecalloutline());
    }

    // optional int32 tschchartseriesdefaultenablecalloutline = 110;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultenablecalloutline());
    }

    // optional bool tschchartseriesbarstacklabels = 140;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubblestacklabels = 141;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional bool tschchartseriesdefaultstacklabels = 146;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinestacklabels = 142;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespiestacklabels = 138;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscatterstacklabels = 143;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesstackedareastacklabels = 144;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesstackedbarstacklabels = 145;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartSeriesNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesNonStyleArchive::GetClassData() const { return &_class_data_; }

void ChartSeriesNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartSeriesNonStyleArchive *>(to)->MergeFrom(
      static_cast<const ChartSeriesNonStyleArchive &>(from));
}


void ChartSeriesNonStyleArchive::MergeFrom(const ChartSeriesNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartseriesdefaulttrendlinelabelstring(from._internal_tschchartseriesdefaulttrendlinelabelstring());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarcustomnegativedata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarcustompositivedata());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartseriesdefault1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriesdefault1_0numberformat());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartseriespie1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriespie1_0numberformat());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartseriesstackedpercentnumberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriesstackedpercentnumberformat());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartseriesdefault1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriesdefault1_0dateformat());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartseriesdefaultdurationformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriesdefaultdurationformat());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartseriesdefaultdateformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriesdefaultdateformat());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartseriesdefaultnumberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriesdefaultnumberformat());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tschchartseriespienumberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriespienumberformat());
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartseriesbubbleadjustmentscale_ = from.tschchartseriesbubbleadjustmentscale_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartseriesdefaulterrorbarfixedvalue_ = from.tschchartseriesdefaulterrorbarfixedvalue_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartseriesdefaulterrorbarfixedvaluescatterx_ = from.tschchartseriesdefaulterrorbarfixedvaluescatterx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartseriesdefaulterrorbarpercentvalue_ = from.tschchartseriesdefaulterrorbarpercentvalue_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartseriesdefaulterrorbarpercentvaluescatterx_ = from.tschchartseriesdefaulterrorbarpercentvaluescatterx_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartseriesdefaulterrorbarsetting_ = from.tschchartseriesdefaulterrorbarsetting_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartseriesdefaulterrorbarsettingscatterx_ = from.tschchartseriesdefaulterrorbarsettingscatterx_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartseriesdefaulterrorbarstddevvalue_ = from.tschchartseriesdefaulterrorbarstddevvalue_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartseriesdefaulterrorbarstddevvaluescatterx_ = from.tschchartseriesdefaulterrorbarstddevvaluescatterx_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartseriesdefaulterrorbartype_ = from.tschchartseriesdefaulterrorbartype_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartseriesdefaulterrorbartypescatterx_ = from.tschchartseriesdefaulterrorbartypescatterx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartseriespie2_3labelexplosion_ = from.tschchartseriespie2_3labelexplosion_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartseriesbubblelinetype_ = from.tschchartseriesbubblelinetype_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartserieslinelinetype_ = from.tschchartserieslinelinetype_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriesmixedlinelinetype_ = from.tschchartseriesmixedlinelinetype_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriesscatterlinetype_ = from.tschchartseriesscatterlinetype_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartseriesdefaultnumberformattype_ = from.tschchartseriesdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartseriespienumberformattype_ = from.tschchartseriespienumberformattype_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartseriesdefaultseriestype_ = from.tschchartseriesdefaultseriestype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriesmixedlineshowsymbol_ = from.tschchartseriesmixedlineshowsymbol_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartseriesscattershowsymbol_ = from.tschchartseriesscattershowsymbol_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartseriesdefaultshowtrendline_ = from.tschchartseriesdefaultshowtrendline_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartseriesareashowvaluelabels_ = from.tschchartseriesareashowvaluelabels_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartseriesscattershowline_ = from.tschchartseriesscattershowline_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartseriesbubbleshownegativedata_ = from.tschchartseriesbubbleshownegativedata_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartseriesbubbleshowserieslabels_ = from.tschchartseriesbubbleshowserieslabels_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartseriespieshowserieslabels_ = from.tschchartseriespieshowserieslabels_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tschchartseriesbarshowvaluelabels_ = from.tschchartseriesbarshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartseriesbubbleshowvaluelabels_ = from.tschchartseriesbubbleshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartseriesdefaultshowvaluelabels_ = from.tschchartseriesdefaultshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartserieslineshowvaluelabels_ = from.tschchartserieslineshowvaluelabels_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartseriesscattershowserieslabels_ = from.tschchartseriesscattershowserieslabels_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartseriesareashowsymbol_ = from.tschchartseriesareashowsymbol_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartserieslineshowsymbol_ = from.tschchartserieslineshowsymbol_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartseriesmixedareashowsymbol_ = from.tschchartseriesmixedareashowsymbol_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartseriesbubblesizedimension_ = from.tschchartseriesbubblesizedimension_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartseriesareasymboltype_ = from.tschchartseriesareasymboltype_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartserieslinesymboltype_ = from.tschchartserieslinesymboltype_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartseriesmixedareasymboltype_ = from.tschchartseriesmixedareasymboltype_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartseriesmixedlinesymboltype_ = from.tschchartseriesmixedlinesymboltype_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartseriesscattersymboltype_ = from.tschchartseriesscattersymboltype_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartseriesdefaulttrendlineequationoffsetx_ = from.tschchartseriesdefaulttrendlineequationoffsetx_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartseriesdefaulttrendlineequationoffsety_ = from.tschchartseriesdefaulttrendlineequationoffsety_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartseriesdefaulttrendlineorder_ = from.tschchartseriesdefaulttrendlineorder_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartseriesdefaulttrendlineperiod_ = from.tschchartseriesdefaulttrendlineperiod_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartseriesdefaulttrendlinersquaredoffsetx_ = from.tschchartseriesdefaulttrendlinersquaredoffsetx_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriesdefaulttrendlinersquaredoffsety_ = from.tschchartseriesdefaulttrendlinersquaredoffsety_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriesdefaulttrendlineshowequation_ = from.tschchartseriesdefaulttrendlineshowequation_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartseriesdefaulttrendlineshowlabel_ = from.tschchartseriesdefaulttrendlineshowlabel_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartseriesdefaulttrendlineshowr2value_ = from.tschchartseriesdefaulttrendlineshowr2value_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartseriesdefaulttrendlinetype_ = from.tschchartseriesdefaulttrendlinetype_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriespiewedgeexplosion_ = from.tschchartseriespiewedgeexplosion_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartseriesdefaultyaxisordinal_ = from.tschchartseriesdefaultyaxisordinal_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartseriesdefaultshowerrorbar_ = from.tschchartseriesdefaultshowerrorbar_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartseriesdefaultshowerrorbarscatterx_ = from.tschchartseriesdefaultshowerrorbarscatterx_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartseriesbubbleshowlabelsinfront_ = from.tschchartseriesbubbleshowlabelsinfront_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartseriesdefaultshowlabelsinfront_ = from.tschchartseriesdefaultshowlabelsinfront_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartseriesbubblevaluelabelsaxis_ = from.tschchartseriesbubblevaluelabelsaxis_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartseriesmixedshowvaluelabels_ = from.tschchartseriesmixedshowvaluelabels_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tschchartseriespieshowvaluelabels_ = from.tschchartseriespieshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartseriesscattershowvaluelabels_ = from.tschchartseriesscattershowvaluelabels_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartseriesareastacklabels_ = from.tschchartseriesareastacklabels_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartseriesscattervaluelabelsaxis_ = from.tschchartseriesscattervaluelabelsaxis_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartseriespieenablecalloutline_ = from.tschchartseriespieenablecalloutline_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartseriespielabelexplosion_ = from.tschchartseriespielabelexplosion_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartseriesareaenablecalloutline_ = from.tschchartseriesareaenablecalloutline_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartseriesbarenablecalloutline_ = from.tschchartseriesbarenablecalloutline_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartseriesbubbleenablecalloutline_ = from.tschchartseriesbubbleenablecalloutline_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartserieslineenablecalloutline_ = from.tschchartserieslineenablecalloutline_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartseriesscatterenablecalloutline_ = from.tschchartseriesscatterenablecalloutline_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartseriesstackedareaenablecalloutline_ = from.tschchartseriesstackedareaenablecalloutline_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartseriesstackedbarenablecalloutline_ = from.tschchartseriesstackedbarenablecalloutline_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartseriesdefaultenablecalloutline_ = from.tschchartseriesdefaultenablecalloutline_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartseriesbarstacklabels_ = from.tschchartseriesbarstacklabels_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartseriesbubblestacklabels_ = from.tschchartseriesbubblestacklabels_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartseriesdefaultstacklabels_ = from.tschchartseriesdefaultstacklabels_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartserieslinestacklabels_ = from.tschchartserieslinestacklabels_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartseriespiestacklabels_ = from.tschchartseriespiestacklabels_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriesscatterstacklabels_ = from.tschchartseriesscatterstacklabels_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriesstackedareastacklabels_ = from.tschchartseriesstackedareastacklabels_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartseriesstackedbarstacklabels_ = from.tschchartseriesstackedbarstacklabels_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesNonStyleArchive::CopyFrom(const ChartSeriesNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesNonStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartseriesdefault1_0numberformat()) {
    if (!tschchartseriesdefault1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespie1_0numberformat()) {
    if (!tschchartseriespie1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesstackedpercentnumberformat()) {
    if (!tschchartseriesstackedpercentnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefault1_0dateformat()) {
    if (!tschchartseriesdefault1_0dateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultdurationformat()) {
    if (!tschchartseriesdefaultdurationformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultdateformat()) {
    if (!tschchartseriesdefaultdateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultnumberformat()) {
    if (!tschchartseriesdefaultnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespienumberformat()) {
    if (!tschchartseriespienumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesNonStyleArchive::InternalSwap(ChartSeriesNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tschchartseriesdefaulttrendlinelabelstring_, GetArenaForAllocation(),
      &other->tschchartseriesdefaulttrendlinelabelstring_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesstackedbarstacklabels_)
      + sizeof(ChartSeriesNonStyleArchive::tschchartseriesstackedbarstacklabels_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustomnegativedata_)>(
          reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarcustomnegativedata_),
          reinterpret_cast<char*>(&other->tschchartseriesdefaulterrorbarcustomnegativedata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesNonStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[7]);
}

// ===================================================================

class ReferenceLineStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineStyleArchive>()._has_bits_);
  static void set_has_tschreferencelinedefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschreferencelinedefaultshadow(const ReferenceLineStyleArchive* msg);
  static void set_has_tschreferencelinedefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschreferencelinedefaultstroke(const ReferenceLineStyleArchive* msg);
  static void set_has_tschreferencelinedefaultstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschreferencelinedefaultvaluelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSD::ShadowArchive&
ReferenceLineStyleArchive::_Internal::tschreferencelinedefaultshadow(const ReferenceLineStyleArchive* msg) {
  return *msg->tschreferencelinedefaultshadow_;
}
const ::TSD::StrokeArchive&
ReferenceLineStyleArchive::_Internal::tschreferencelinedefaultstroke(const ReferenceLineStyleArchive* msg) {
  return *msg->tschreferencelinedefaultstroke_;
}
void ReferenceLineStyleArchive::clear_tschreferencelinedefaultshadow() {
  if (tschreferencelinedefaultshadow_ != nullptr) tschreferencelinedefaultshadow_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineStyleArchive::clear_tschreferencelinedefaultstroke() {
  if (tschreferencelinedefaultstroke_ != nullptr) tschreferencelinedefaultstroke_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ReferenceLineStyleArchive::ReferenceLineStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ReferenceLineStyleArchive)
}
ReferenceLineStyleArchive::ReferenceLineStyleArchive(const ReferenceLineStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschreferencelinedefaultstroke()) {
    tschreferencelinedefaultstroke_ = new ::TSD::StrokeArchive(*from.tschreferencelinedefaultstroke_);
  } else {
    tschreferencelinedefaultstroke_ = nullptr;
  }
  if (from._internal_has_tschreferencelinedefaultshadow()) {
    tschreferencelinedefaultshadow_ = new ::TSD::ShadowArchive(*from.tschreferencelinedefaultshadow_);
  } else {
    tschreferencelinedefaultshadow_ = nullptr;
  }
  ::memcpy(&tschreferencelinedefaultlabelparagraphstyleindex_, &from.tschreferencelinedefaultlabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschreferencelinedefaultvaluelabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&tschreferencelinedefaultlabelparagraphstyleindex_)) + sizeof(tschreferencelinedefaultvaluelabelparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ReferenceLineStyleArchive)
}

inline void ReferenceLineStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschreferencelinedefaultstroke_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschreferencelinedefaultvaluelabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&tschreferencelinedefaultstroke_)) + sizeof(tschreferencelinedefaultvaluelabelparagraphstyleindex_));
}

ReferenceLineStyleArchive::~ReferenceLineStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ReferenceLineStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReferenceLineStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tschreferencelinedefaultstroke_;
  if (this != internal_default_instance()) delete tschreferencelinedefaultshadow_;
}

void ReferenceLineStyleArchive::ArenaDtor(void* object) {
  ReferenceLineStyleArchive* _this = reinterpret_cast< ReferenceLineStyleArchive* >(object);
  (void)_this;
}
void ReferenceLineStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceLineStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceLineStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ReferenceLineStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tschreferencelinedefaultstroke_ != nullptr);
      tschreferencelinedefaultstroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschreferencelinedefaultshadow_ != nullptr);
      tschreferencelinedefaultshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&tschreferencelinedefaultlabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschreferencelinedefaultvaluelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschreferencelinedefaultlabelparagraphstyleindex_)) + sizeof(tschreferencelinedefaultvaluelabelparagraphstyleindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokeArchive tschreferencelinedefaultstroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinedefaultstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschreferencelinedefaultshadow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinedefaultshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschreferencelinedefaultlabelparagraphstyleindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschreferencelinedefaultlabelparagraphstyleindex(&has_bits);
          tschreferencelinedefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschreferencelinedefaultvaluelabelparagraphstyleindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschreferencelinedefaultvaluelabelparagraphstyleindex(&has_bits);
          tschreferencelinedefaultvaluelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceLineStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ReferenceLineStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive tschreferencelinedefaultstroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tschreferencelinedefaultstroke(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschreferencelinedefaultshadow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tschreferencelinedefaultshadow(this), target, stream);
  }

  // optional int32 tschreferencelinedefaultlabelparagraphstyleindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tschreferencelinedefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschreferencelinedefaultvaluelabelparagraphstyleindex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tschreferencelinedefaultvaluelabelparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ReferenceLineStyleArchive)
  return target;
}

size_t ReferenceLineStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ReferenceLineStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSD.StrokeArchive tschreferencelinedefaultstroke = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschreferencelinedefaultstroke_);
    }

    // optional .TSD.ShadowArchive tschreferencelinedefaultshadow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschreferencelinedefaultshadow_);
    }

    // optional int32 tschreferencelinedefaultlabelparagraphstyleindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschreferencelinedefaultlabelparagraphstyleindex());
    }

    // optional int32 tschreferencelinedefaultvaluelabelparagraphstyleindex = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschreferencelinedefaultvaluelabelparagraphstyleindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReferenceLineStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineStyleArchive::GetClassData() const { return &_class_data_; }

void ReferenceLineStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReferenceLineStyleArchive *>(to)->MergeFrom(
      static_cast<const ReferenceLineStyleArchive &>(from));
}


void ReferenceLineStyleArchive::MergeFrom(const ReferenceLineStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ReferenceLineStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tschreferencelinedefaultstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschreferencelinedefaultstroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschreferencelinedefaultshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschreferencelinedefaultshadow());
    }
    if (cached_has_bits & 0x00000004u) {
      tschreferencelinedefaultlabelparagraphstyleindex_ = from.tschreferencelinedefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschreferencelinedefaultvaluelabelparagraphstyleindex_ = from.tschreferencelinedefaultvaluelabelparagraphstyleindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineStyleArchive::CopyFrom(const ReferenceLineStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ReferenceLineStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineStyleArchive::IsInitialized() const {
  if (_internal_has_tschreferencelinedefaultstroke()) {
    if (!tschreferencelinedefaultstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschreferencelinedefaultshadow()) {
    if (!tschreferencelinedefaultshadow_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceLineStyleArchive::InternalSwap(ReferenceLineStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLineStyleArchive, tschreferencelinedefaultvaluelabelparagraphstyleindex_)
      + sizeof(ReferenceLineStyleArchive::tschreferencelinedefaultvaluelabelparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLineStyleArchive, tschreferencelinedefaultstroke_)>(
          reinterpret_cast<char*>(&tschreferencelinedefaultstroke_),
          reinterpret_cast<char*>(&other->tschreferencelinedefaultstroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[8]);
}

// ===================================================================

class ReferenceLineNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineNonStyleArchive>()._has_bits_);
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschreferencelinedefaultcustomvalue(const ReferenceLineNonStyleArchive* msg);
  static void set_has_tschreferencelinedefaultcustomvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschreferencelinedefaultlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschreferencelinedefaultshowlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschreferencelinedefaultshowline(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschreferencelinedefaultshowvaluelabel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschreferencelinedefaulttype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSCH::ChartsNSNumberDoubleArchive&
ReferenceLineNonStyleArchive::_Internal::tschreferencelinedefaultcustomvalue(const ReferenceLineNonStyleArchive* msg) {
  return *msg->tschreferencelinedefaultcustomvalue_;
}
void ReferenceLineNonStyleArchive::clear_tschreferencelinedefaultcustomvalue() {
  if (tschreferencelinedefaultcustomvalue_ != nullptr) tschreferencelinedefaultcustomvalue_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ReferenceLineNonStyleArchive::ReferenceLineNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ReferenceLineNonStyleArchive)
}
ReferenceLineNonStyleArchive::ReferenceLineNonStyleArchive(const ReferenceLineNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschreferencelinedefaultlabel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschreferencelinedefaultlabel()) {
    tschreferencelinedefaultlabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschreferencelinedefaultlabel(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tschreferencelinedefaultcustomvalue()) {
    tschreferencelinedefaultcustomvalue_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from.tschreferencelinedefaultcustomvalue_);
  } else {
    tschreferencelinedefaultcustomvalue_ = nullptr;
  }
  ::memcpy(&tschreferencelinedefaulttype_, &from.tschreferencelinedefaulttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschreferencelinedefaultshowvaluelabel_) -
    reinterpret_cast<char*>(&tschreferencelinedefaulttype_)) + sizeof(tschreferencelinedefaultshowvaluelabel_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ReferenceLineNonStyleArchive)
}

inline void ReferenceLineNonStyleArchive::SharedCtor() {
tschreferencelinedefaultlabel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschreferencelinedefaultcustomvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschreferencelinedefaultshowvaluelabel_) -
    reinterpret_cast<char*>(&tschreferencelinedefaultcustomvalue_)) + sizeof(tschreferencelinedefaultshowvaluelabel_));
}

ReferenceLineNonStyleArchive::~ReferenceLineNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ReferenceLineNonStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReferenceLineNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tschreferencelinedefaultlabel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tschreferencelinedefaultcustomvalue_;
}

void ReferenceLineNonStyleArchive::ArenaDtor(void* object) {
  ReferenceLineNonStyleArchive* _this = reinterpret_cast< ReferenceLineNonStyleArchive* >(object);
  (void)_this;
}
void ReferenceLineNonStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceLineNonStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceLineNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tschreferencelinedefaultlabel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschreferencelinedefaultcustomvalue_ != nullptr);
      tschreferencelinedefaultcustomvalue_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&tschreferencelinedefaulttype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschreferencelinedefaultshowvaluelabel_) -
        reinterpret_cast<char*>(&tschreferencelinedefaulttype_)) + sizeof(tschreferencelinedefaultshowvaluelabel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineNonStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschreferencelinedefaulttype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschreferencelinedefaulttype(&has_bits);
          tschreferencelinedefaulttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschreferencelinedefaultshowline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschreferencelinedefaultshowline(&has_bits);
          tschreferencelinedefaultshowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschreferencelinedefaultshowlabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschreferencelinedefaultshowlabel(&has_bits);
          tschreferencelinedefaultshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschreferencelinedefaultshowvaluelabel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschreferencelinedefaultshowvaluelabel(&has_bits);
          tschreferencelinedefaultshowvaluelabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschreferencelinedefaultlabel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tschreferencelinedefaultlabel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultlabel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinedefaultcustomvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinedefaultcustomvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceLineNonStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tschreferencelinedefaulttype = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschreferencelinedefaulttype(), target);
  }

  // optional bool tschreferencelinedefaultshowline = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_tschreferencelinedefaultshowline(), target);
  }

  // optional bool tschreferencelinedefaultshowlabel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_tschreferencelinedefaultshowlabel(), target);
  }

  // optional bool tschreferencelinedefaultshowvaluelabel = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_tschreferencelinedefaultshowvaluelabel(), target);
  }

  // optional string tschreferencelinedefaultlabel = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschreferencelinedefaultlabel().data(), static_cast<int>(this->_internal_tschreferencelinedefaultlabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultlabel");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tschreferencelinedefaultlabel(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinedefaultcustomvalue = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tschreferencelinedefaultcustomvalue(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ReferenceLineNonStyleArchive)
  return target;
}

size_t ReferenceLineNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string tschreferencelinedefaultlabel = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschreferencelinedefaultlabel());
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinedefaultcustomvalue = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschreferencelinedefaultcustomvalue_);
    }

    // optional int32 tschreferencelinedefaulttype = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschreferencelinedefaulttype());
    }

    // optional bool tschreferencelinedefaultshowlabel = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool tschreferencelinedefaultshowline = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool tschreferencelinedefaultshowvaluelabel = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReferenceLineNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineNonStyleArchive::GetClassData() const { return &_class_data_; }

void ReferenceLineNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReferenceLineNonStyleArchive *>(to)->MergeFrom(
      static_cast<const ReferenceLineNonStyleArchive &>(from));
}


void ReferenceLineNonStyleArchive::MergeFrom(const ReferenceLineNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschreferencelinedefaultlabel(from._internal_tschreferencelinedefaultlabel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschreferencelinedefaultcustomvalue()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from._internal_tschreferencelinedefaultcustomvalue());
    }
    if (cached_has_bits & 0x00000004u) {
      tschreferencelinedefaulttype_ = from.tschreferencelinedefaulttype_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschreferencelinedefaultshowlabel_ = from.tschreferencelinedefaultshowlabel_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschreferencelinedefaultshowline_ = from.tschreferencelinedefaultshowline_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschreferencelinedefaultshowvaluelabel_ = from.tschreferencelinedefaultshowvaluelabel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineNonStyleArchive::CopyFrom(const ReferenceLineNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineNonStyleArchive::IsInitialized() const {
  return true;
}

void ReferenceLineNonStyleArchive::InternalSwap(ReferenceLineNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tschreferencelinedefaultlabel_, GetArenaForAllocation(),
      &other->tschreferencelinedefaultlabel_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLineNonStyleArchive, tschreferencelinedefaultshowvaluelabel_)
      + sizeof(ReferenceLineNonStyleArchive::tschreferencelinedefaultshowvaluelabel_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLineNonStyleArchive, tschreferencelinedefaultcustomvalue_)>(
          reinterpret_cast<char*>(&tschreferencelinedefaultcustomvalue_),
          reinterpret_cast<char*>(&other->tschreferencelinedefaultcustomvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineNonStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[9]);
}

// ===================================================================

class ChartGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGenericPropertyMapArchive>()._has_bits_);
  static void set_has_tschchartinfo3dbarshape(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartinfo3dbeveledges(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartinfo3dchartopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartinfo3dintersetdepthgap(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfo3dlightingpackage(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfo3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfo3drotation(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfo3drotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfo3dscale(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfo3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfo3dviewport(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfo3dviewport(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::FillArchive& tschchartinfobackgroundfill(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfobackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartinfobackgroundstroke(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfobackgroundstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartinfoborderopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSD::ShadowArchive& tschchartinfobordershadow(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfobordershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartinfoborderstroke(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfoborderstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartinfocalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartinfocombinelayers(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartinfodeprecatedroundedcornerouterendonly(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartinfodeprecatedroundedcornerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodatasetnamelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfodatasetnameparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartinfodonutplacetitleatcenter(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSD::FillArchive& tschchartinfogridbackgroundfill(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfogridbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfogridbackgroundopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartinfoinnerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartinfointerbargap(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartinfointersetgap(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartinfomultidatacontroltype(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartinfopiestartangle(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartinforoundedcornerouterendonly(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartinforoundedcornerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartinfoshowborder(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartinfoshowlegend(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartinfoshowtitle(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartinfoskiphiddendata(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSP::Color& tschchartinfotitlecolor(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfotitlecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartinfotitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartinfotitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
};

const ::TSCH::Chart3DLightingPackageArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfo3dlightingpackage(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfo3dlightingpackage_;
}
const ::TSCH::Chart3DVectorArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfo3drotation(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfo3drotation_;
}
const ::TSCH::Chart3DVectorArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfo3dscale(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfo3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfo3dviewport(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfo3dviewport_;
}
const ::TSD::FillArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfobackgroundfill(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfobackgroundfill_;
}
const ::TSD::StrokeArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfobackgroundstroke(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfobackgroundstroke_;
}
const ::TSD::ShadowArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfobordershadow(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfobordershadow_;
}
const ::TSD::StrokeArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfoborderstroke(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfoborderstroke_;
}
const ::TSD::FillArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfogridbackgroundfill(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfogridbackgroundfill_;
}
const ::TSP::Color&
ChartGenericPropertyMapArchive::_Internal::tschchartinfotitlecolor(const ChartGenericPropertyMapArchive* msg) {
  return *msg->tschchartinfotitlecolor_;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfo3dlightingpackage() {
  if (tschchartinfo3dlightingpackage_ != nullptr) tschchartinfo3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfo3drotation() {
  if (tschchartinfo3drotation_ != nullptr) tschchartinfo3drotation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfo3dscale() {
  if (tschchartinfo3dscale_ != nullptr) tschchartinfo3dscale_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfo3dviewport() {
  if (tschchartinfo3dviewport_ != nullptr) tschchartinfo3dviewport_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfobackgroundfill() {
  if (tschchartinfobackgroundfill_ != nullptr) tschchartinfobackgroundfill_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfobackgroundstroke() {
  if (tschchartinfobackgroundstroke_ != nullptr) tschchartinfobackgroundstroke_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfobordershadow() {
  if (tschchartinfobordershadow_ != nullptr) tschchartinfobordershadow_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfoborderstroke() {
  if (tschchartinfoborderstroke_ != nullptr) tschchartinfoborderstroke_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfogridbackgroundfill() {
  if (tschchartinfogridbackgroundfill_ != nullptr) tschchartinfogridbackgroundfill_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfotitlecolor() {
  if (tschchartinfotitlecolor_ != nullptr) tschchartinfotitlecolor_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
ChartGenericPropertyMapArchive::ChartGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartGenericPropertyMapArchive)
}
ChartGenericPropertyMapArchive::ChartGenericPropertyMapArchive(const ChartGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartinfotitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartinfotitle()) {
    tschchartinfotitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartinfotitle(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tschchartinfo3dlightingpackage()) {
    tschchartinfo3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfo3dlightingpackage_);
  } else {
    tschchartinfo3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfo3drotation()) {
    tschchartinfo3drotation_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfo3drotation_);
  } else {
    tschchartinfo3drotation_ = nullptr;
  }
  if (from._internal_has_tschchartinfo3dscale()) {
    tschchartinfo3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfo3dscale_);
  } else {
    tschchartinfo3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfo3dviewport()) {
    tschchartinfo3dviewport_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfo3dviewport_);
  } else {
    tschchartinfo3dviewport_ = nullptr;
  }
  if (from._internal_has_tschchartinfobackgroundfill()) {
    tschchartinfobackgroundfill_ = new ::TSD::FillArchive(*from.tschchartinfobackgroundfill_);
  } else {
    tschchartinfobackgroundfill_ = nullptr;
  }
  if (from._internal_has_tschchartinfobackgroundstroke()) {
    tschchartinfobackgroundstroke_ = new ::TSD::StrokeArchive(*from.tschchartinfobackgroundstroke_);
  } else {
    tschchartinfobackgroundstroke_ = nullptr;
  }
  if (from._internal_has_tschchartinfobordershadow()) {
    tschchartinfobordershadow_ = new ::TSD::ShadowArchive(*from.tschchartinfobordershadow_);
  } else {
    tschchartinfobordershadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfoborderstroke()) {
    tschchartinfoborderstroke_ = new ::TSD::StrokeArchive(*from.tschchartinfoborderstroke_);
  } else {
    tschchartinfoborderstroke_ = nullptr;
  }
  if (from._internal_has_tschchartinfogridbackgroundfill()) {
    tschchartinfogridbackgroundfill_ = new ::TSD::FillArchive(*from.tschchartinfogridbackgroundfill_);
  } else {
    tschchartinfogridbackgroundfill_ = nullptr;
  }
  if (from._internal_has_tschchartinfotitlecolor()) {
    tschchartinfotitlecolor_ = new ::TSP::Color(*from.tschchartinfotitlecolor_);
  } else {
    tschchartinfotitlecolor_ = nullptr;
  }
  ::memcpy(&tschchartinfo3dbarshape_, &from.tschchartinfo3dbarshape_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfotitleparagraphstyleindex_) -
    reinterpret_cast<char*>(&tschchartinfo3dbarshape_)) + sizeof(tschchartinfotitleparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartGenericPropertyMapArchive)
}

inline void ChartGenericPropertyMapArchive::SharedCtor() {
tschchartinfotitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschchartinfo3dlightingpackage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfotitleparagraphstyleindex_) -
    reinterpret_cast<char*>(&tschchartinfo3dlightingpackage_)) + sizeof(tschchartinfotitleparagraphstyleindex_));
}

ChartGenericPropertyMapArchive::~ChartGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartGenericPropertyMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tschchartinfotitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tschchartinfo3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfo3drotation_;
  if (this != internal_default_instance()) delete tschchartinfo3dscale_;
  if (this != internal_default_instance()) delete tschchartinfo3dviewport_;
  if (this != internal_default_instance()) delete tschchartinfobackgroundfill_;
  if (this != internal_default_instance()) delete tschchartinfobackgroundstroke_;
  if (this != internal_default_instance()) delete tschchartinfobordershadow_;
  if (this != internal_default_instance()) delete tschchartinfoborderstroke_;
  if (this != internal_default_instance()) delete tschchartinfogridbackgroundfill_;
  if (this != internal_default_instance()) delete tschchartinfotitlecolor_;
}

void ChartGenericPropertyMapArchive::ArenaDtor(void* object) {
  ChartGenericPropertyMapArchive* _this = reinterpret_cast< ChartGenericPropertyMapArchive* >(object);
  (void)_this;
}
void ChartGenericPropertyMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartGenericPropertyMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartinfotitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartinfo3dlightingpackage_ != nullptr);
      tschchartinfo3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartinfo3drotation_ != nullptr);
      tschchartinfo3drotation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartinfo3dscale_ != nullptr);
      tschchartinfo3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartinfo3dviewport_ != nullptr);
      tschchartinfo3dviewport_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartinfobackgroundfill_ != nullptr);
      tschchartinfobackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartinfobackgroundstroke_ != nullptr);
      tschchartinfobackgroundstroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartinfobordershadow_ != nullptr);
      tschchartinfobordershadow_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartinfoborderstroke_ != nullptr);
      tschchartinfoborderstroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartinfogridbackgroundfill_ != nullptr);
      tschchartinfogridbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartinfotitlecolor_ != nullptr);
      tschchartinfotitlecolor_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&tschchartinfo3dbarshape_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfo3dbeveledges_) -
        reinterpret_cast<char*>(&tschchartinfo3dbarshape_)) + sizeof(tschchartinfo3dbeveledges_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartinfocombinelayers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfogridbackgroundopacity_) -
        reinterpret_cast<char*>(&tschchartinfocombinelayers_)) + sizeof(tschchartinfogridbackgroundopacity_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartinfoinnerradius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfoshowborder_) -
        reinterpret_cast<char*>(&tschchartinfoinnerradius_)) + sizeof(tschchartinfoshowborder_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&tschchartinfoshowlegend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfotitleparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschchartinfoshowlegend_)) + sizeof(tschchartinfotitleparagraphstyleindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGenericPropertyMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschchartinfo3dbarshape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartinfo3dbarshape(&_has_bits_);
          tschchartinfo3dbarshape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfo3dbeveledges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartinfo3dbeveledges(&_has_bits_);
          tschchartinfo3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfo3dchartopacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tschchartinfo3dchartopacity(&_has_bits_);
          tschchartinfo3dchartopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfo3dintersetdepthgap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_tschchartinfo3dintersetdepthgap(&_has_bits_);
          tschchartinfo3dintersetdepthgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfo3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfo3drotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfo3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfo3dviewport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfobackgroundfill = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobackgroundfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobackgroundstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfoborderopacity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_tschchartinfoborderopacity(&_has_bits_);
          tschchartinfoborderopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfobordershadow = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobordershadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfoborderstroke = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoborderstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfocalloutlinetype = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartinfocalloutlinetype(&_has_bits_);
          tschchartinfocalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfocombinelayers = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartinfocombinelayers(&_has_bits_);
          tschchartinfocombinelayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodeprecatedroundedcornerouterendonly = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartinfodeprecatedroundedcornerouterendonly(&_has_bits_);
          tschchartinfodeprecatedroundedcornerouterendonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodeprecatedroundedcornerradius = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_tschchartinfodeprecatedroundedcornerradius(&_has_bits_);
          tschchartinfodeprecatedroundedcornerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodatasetnamelocation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartinfodatasetnamelocation(&_has_bits_);
          tschchartinfodatasetnamelocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodatasetnameparagraphstyleindex = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartinfodatasetnameparagraphstyleindex(&_has_bits_);
          tschchartinfodatasetnameparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodonutplacetitleatcenter = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartinfodonutplacetitleatcenter(&_has_bits_);
          tschchartinfodonutplacetitleatcenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfogridbackgroundfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfogridbackgroundopacity = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_tschchartinfogridbackgroundopacity(&_has_bits_);
          tschchartinfogridbackgroundopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfoinnerradius = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_tschchartinfoinnerradius(&_has_bits_);
          tschchartinfoinnerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfointerbargap = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_tschchartinfointerbargap(&_has_bits_);
          tschchartinfointerbargap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfointersetgap = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_tschchartinfointersetgap(&_has_bits_);
          tschchartinfointersetgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfomultidatacontroltype = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartinfomultidatacontroltype(&_has_bits_);
          tschchartinfomultidatacontroltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfopiestartangle = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_tschchartinfopiestartangle(&_has_bits_);
          tschchartinfopiestartangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinforoundedcornerouterendonly = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartinforoundedcornerouterendonly(&_has_bits_);
          tschchartinforoundedcornerouterendonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinforoundedcornerradius = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_tschchartinforoundedcornerradius(&_has_bits_);
          tschchartinforoundedcornerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfoshowborder = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartinfoshowborder(&_has_bits_);
          tschchartinfoshowborder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfoshowlegend = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartinfoshowlegend(&_has_bits_);
          tschchartinfoshowlegend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfoshowtitle = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartinfoshowtitle(&_has_bits_);
          tschchartinfoshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfoskiphiddendata = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartinfoskiphiddendata(&_has_bits_);
          tschchartinfoskiphiddendata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color tschchartinfotitlecolor = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfotitlecolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartinfotitle = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tschchartinfotitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfotitleparagraphstyleindex = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartinfotitleparagraphstyleindex(&_has_bits_);
          tschchartinfotitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartGenericPropertyMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tschchartinfo3dbarshape = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschchartinfo3dbarshape(), target);
  }

  // optional bool tschchartinfo3dbeveledges = 2;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_tschchartinfo3dbeveledges(), target);
  }

  // optional float tschchartinfo3dchartopacity = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tschchartinfo3dchartopacity(), target);
  }

  // optional float tschchartinfo3dintersetdepthgap = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_tschchartinfo3dintersetdepthgap(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tschchartinfo3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tschchartinfo3drotation(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tschchartinfo3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tschchartinfo3dviewport(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartinfobackgroundfill = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tschchartinfobackgroundfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tschchartinfobackgroundstroke(this), target, stream);
  }

  // optional float tschchartinfoborderopacity = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_tschchartinfoborderopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfobordershadow = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tschchartinfobordershadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfoborderstroke = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tschchartinfoborderstroke(this), target, stream);
  }

  // optional int32 tschchartinfocalloutlinetype = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_tschchartinfocalloutlinetype(), target);
  }

  // optional bool tschchartinfocombinelayers = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_tschchartinfocombinelayers(), target);
  }

  // optional bool tschchartinfodeprecatedroundedcornerouterendonly = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_tschchartinfodeprecatedroundedcornerouterendonly(), target);
  }

  // optional float tschchartinfodeprecatedroundedcornerradius = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_tschchartinfodeprecatedroundedcornerradius(), target);
  }

  // optional int32 tschchartinfodatasetnamelocation = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_tschchartinfodatasetnamelocation(), target);
  }

  // optional int32 tschchartinfodatasetnameparagraphstyleindex = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartinfodatasetnameparagraphstyleindex(), target);
  }

  // optional bool tschchartinfodonutplacetitleatcenter = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_tschchartinfodonutplacetitleatcenter(), target);
  }

  // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::tschchartinfogridbackgroundfill(this), target, stream);
  }

  // optional float tschchartinfogridbackgroundopacity = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_tschchartinfogridbackgroundopacity(), target);
  }

  // optional float tschchartinfoinnerradius = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_tschchartinfoinnerradius(), target);
  }

  // optional float tschchartinfointerbargap = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_tschchartinfointerbargap(), target);
  }

  // optional float tschchartinfointersetgap = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_tschchartinfointersetgap(), target);
  }

  // optional int32 tschchartinfomultidatacontroltype = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_tschchartinfomultidatacontroltype(), target);
  }

  // optional float tschchartinfopiestartangle = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_tschchartinfopiestartangle(), target);
  }

  // optional bool tschchartinforoundedcornerouterendonly = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartinforoundedcornerouterendonly(), target);
  }

  // optional float tschchartinforoundedcornerradius = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_tschchartinforoundedcornerradius(), target);
  }

  // optional bool tschchartinfoshowborder = 30;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartinfoshowborder(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartinfoshowlegend = 31;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_tschchartinfoshowlegend(), target);
  }

  // optional bool tschchartinfoshowtitle = 32;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartinfoshowtitle(), target);
  }

  // optional bool tschchartinfoskiphiddendata = 33;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartinfoskiphiddendata(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Color tschchartinfotitlecolor = 34;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::tschchartinfotitlecolor(this), target, stream);
  }

  // optional string tschchartinfotitle = 35;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartinfotitle().data(), static_cast<int>(this->_internal_tschchartinfotitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitle");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_tschchartinfotitle(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartinfotitleparagraphstyleindex = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_tschchartinfotitleparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartGenericPropertyMapArchive)
  return target;
}

size_t ChartGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartinfotitle = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartinfotitle());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfo3dlightingpackage_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfo3drotation_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfo3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfo3dviewport_);
    }

    // optional .TSD.FillArchive tschchartinfobackgroundfill = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfobackgroundfill_);
    }

    // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfobackgroundstroke_);
    }

    // optional .TSD.ShadowArchive tschchartinfobordershadow = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfobordershadow_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.StrokeArchive tschchartinfoborderstroke = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoborderstroke_);
    }

    // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfogridbackgroundfill_);
    }

    // optional .TSP.Color tschchartinfotitlecolor = 34;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfotitlecolor_);
    }

    // optional int32 tschchartinfo3dbarshape = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfo3dbarshape());
    }

    // optional float tschchartinfo3dchartopacity = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfo3dintersetdepthgap = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfoborderopacity = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional bool tschchartinfo3dbeveledges = 2;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool tschchartinfocombinelayers = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodeprecatedroundedcornerouterendonly = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodonutplacetitleatcenter = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfocalloutlinetype = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfocalloutlinetype());
    }

    // optional float tschchartinfodeprecatedroundedcornerradius = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodatasetnamelocation = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodatasetnamelocation());
    }

    // optional int32 tschchartinfodatasetnameparagraphstyleindex = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodatasetnameparagraphstyleindex());
    }

    // optional float tschchartinfogridbackgroundopacity = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartinfoinnerradius = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfointerbargap = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfointersetgap = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfomultidatacontroltype = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfomultidatacontroltype());
    }

    // optional float tschchartinfopiestartangle = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinforoundedcornerradius = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinforoundedcornerouterendonly = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfoshowborder = 30;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool tschchartinfoshowlegend = 31;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfoshowtitle = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfoskiphiddendata = 33;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfotitleparagraphstyleindex = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfotitleparagraphstyleindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }

void ChartGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartGenericPropertyMapArchive *>(to)->MergeFrom(
      static_cast<const ChartGenericPropertyMapArchive &>(from));
}


void ChartGenericPropertyMapArchive::MergeFrom(const ChartGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartinfotitle(from._internal_tschchartinfotitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartinfo3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfo3dlightingpackage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartinfo3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfo3drotation());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartinfo3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfo3dscale());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartinfo3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfo3dviewport());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartinfobackgroundfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartinfobackgroundfill());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartinfobackgroundstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartinfobackgroundstroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartinfobordershadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfobordershadow());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartinfoborderstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartinfoborderstroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartinfogridbackgroundfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartinfogridbackgroundfill());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartinfotitlecolor()->::TSP::Color::MergeFrom(from._internal_tschchartinfotitlecolor());
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartinfo3dbarshape_ = from.tschchartinfo3dbarshape_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartinfo3dchartopacity_ = from.tschchartinfo3dchartopacity_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartinfo3dintersetdepthgap_ = from.tschchartinfo3dintersetdepthgap_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartinfoborderopacity_ = from.tschchartinfoborderopacity_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartinfo3dbeveledges_ = from.tschchartinfo3dbeveledges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartinfocombinelayers_ = from.tschchartinfocombinelayers_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartinfodeprecatedroundedcornerouterendonly_ = from.tschchartinfodeprecatedroundedcornerouterendonly_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartinfodonutplacetitleatcenter_ = from.tschchartinfodonutplacetitleatcenter_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartinfocalloutlinetype_ = from.tschchartinfocalloutlinetype_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartinfodeprecatedroundedcornerradius_ = from.tschchartinfodeprecatedroundedcornerradius_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartinfodatasetnamelocation_ = from.tschchartinfodatasetnamelocation_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartinfodatasetnameparagraphstyleindex_ = from.tschchartinfodatasetnameparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartinfogridbackgroundopacity_ = from.tschchartinfogridbackgroundopacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartinfoinnerradius_ = from.tschchartinfoinnerradius_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartinfointerbargap_ = from.tschchartinfointerbargap_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartinfointersetgap_ = from.tschchartinfointersetgap_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartinfomultidatacontroltype_ = from.tschchartinfomultidatacontroltype_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartinfopiestartangle_ = from.tschchartinfopiestartangle_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartinforoundedcornerradius_ = from.tschchartinforoundedcornerradius_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartinforoundedcornerouterendonly_ = from.tschchartinforoundedcornerouterendonly_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartinfoshowborder_ = from.tschchartinfoshowborder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartinfoshowlegend_ = from.tschchartinfoshowlegend_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartinfoshowtitle_ = from.tschchartinfoshowtitle_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartinfoskiphiddendata_ = from.tschchartinfoskiphiddendata_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartinfotitleparagraphstyleindex_ = from.tschchartinfotitleparagraphstyleindex_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGenericPropertyMapArchive::CopyFrom(const ChartGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschchartinfo3dlightingpackage()) {
    if (!tschchartinfo3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfo3drotation()) {
    if (!tschchartinfo3drotation_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfo3dscale()) {
    if (!tschchartinfo3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfo3dviewport()) {
    if (!tschchartinfo3dviewport_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobackgroundfill()) {
    if (!tschchartinfobackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobackgroundstroke()) {
    if (!tschchartinfobackgroundstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobordershadow()) {
    if (!tschchartinfobordershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoborderstroke()) {
    if (!tschchartinfoborderstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfogridbackgroundfill()) {
    if (!tschchartinfogridbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfotitlecolor()) {
    if (!tschchartinfotitlecolor_->IsInitialized()) return false;
  }
  return true;
}

void ChartGenericPropertyMapArchive::InternalSwap(ChartGenericPropertyMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tschchartinfotitle_, GetArenaForAllocation(),
      &other->tschchartinfotitle_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfotitleparagraphstyleindex_)
      + sizeof(ChartGenericPropertyMapArchive::tschchartinfotitleparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfo3dlightingpackage_)>(
          reinterpret_cast<char*>(&tschchartinfo3dlightingpackage_),
          reinterpret_cast<char*>(&other->tschchartinfo3dlightingpackage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGenericPropertyMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[10]);
}

// ===================================================================

class LegendGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendGenericPropertyMapArchive>()._has_bits_);
  static const ::TSD::FillArchive& tschlegendmodelfill(const LegendGenericPropertyMapArchive* msg);
  static void set_has_tschlegendmodelfill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschlegendmodellabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschlegendmodelopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschlegendmodelshadow(const LegendGenericPropertyMapArchive* msg);
  static void set_has_tschlegendmodelshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschlegendmodelstroke(const LegendGenericPropertyMapArchive* msg);
  static void set_has_tschlegendmodelstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSD::FillArchive&
LegendGenericPropertyMapArchive::_Internal::tschlegendmodelfill(const LegendGenericPropertyMapArchive* msg) {
  return *msg->tschlegendmodelfill_;
}
const ::TSD::ShadowArchive&
LegendGenericPropertyMapArchive::_Internal::tschlegendmodelshadow(const LegendGenericPropertyMapArchive* msg) {
  return *msg->tschlegendmodelshadow_;
}
const ::TSD::StrokeArchive&
LegendGenericPropertyMapArchive::_Internal::tschlegendmodelstroke(const LegendGenericPropertyMapArchive* msg) {
  return *msg->tschlegendmodelstroke_;
}
void LegendGenericPropertyMapArchive::clear_tschlegendmodelfill() {
  if (tschlegendmodelfill_ != nullptr) tschlegendmodelfill_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LegendGenericPropertyMapArchive::clear_tschlegendmodelshadow() {
  if (tschlegendmodelshadow_ != nullptr) tschlegendmodelshadow_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LegendGenericPropertyMapArchive::clear_tschlegendmodelstroke() {
  if (tschlegendmodelstroke_ != nullptr) tschlegendmodelstroke_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
LegendGenericPropertyMapArchive::LegendGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.LegendGenericPropertyMapArchive)
}
LegendGenericPropertyMapArchive::LegendGenericPropertyMapArchive(const LegendGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschlegendmodelfill()) {
    tschlegendmodelfill_ = new ::TSD::FillArchive(*from.tschlegendmodelfill_);
  } else {
    tschlegendmodelfill_ = nullptr;
  }
  if (from._internal_has_tschlegendmodelshadow()) {
    tschlegendmodelshadow_ = new ::TSD::ShadowArchive(*from.tschlegendmodelshadow_);
  } else {
    tschlegendmodelshadow_ = nullptr;
  }
  if (from._internal_has_tschlegendmodelstroke()) {
    tschlegendmodelstroke_ = new ::TSD::StrokeArchive(*from.tschlegendmodelstroke_);
  } else {
    tschlegendmodelstroke_ = nullptr;
  }
  ::memcpy(&tschlegendmodellabelparagraphstyleindex_, &from.tschlegendmodellabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschlegendmodelopacity_) -
    reinterpret_cast<char*>(&tschlegendmodellabelparagraphstyleindex_)) + sizeof(tschlegendmodelopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.LegendGenericPropertyMapArchive)
}

inline void LegendGenericPropertyMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschlegendmodelfill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschlegendmodelopacity_) -
    reinterpret_cast<char*>(&tschlegendmodelfill_)) + sizeof(tschlegendmodelopacity_));
}

LegendGenericPropertyMapArchive::~LegendGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.LegendGenericPropertyMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LegendGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tschlegendmodelfill_;
  if (this != internal_default_instance()) delete tschlegendmodelshadow_;
  if (this != internal_default_instance()) delete tschlegendmodelstroke_;
}

void LegendGenericPropertyMapArchive::ArenaDtor(void* object) {
  LegendGenericPropertyMapArchive* _this = reinterpret_cast< LegendGenericPropertyMapArchive* >(object);
  (void)_this;
}
void LegendGenericPropertyMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LegendGenericPropertyMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LegendGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tschlegendmodelfill_ != nullptr);
      tschlegendmodelfill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschlegendmodelshadow_ != nullptr);
      tschlegendmodelshadow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschlegendmodelstroke_ != nullptr);
      tschlegendmodelstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&tschlegendmodellabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschlegendmodelopacity_) -
        reinterpret_cast<char*>(&tschlegendmodellabelparagraphstyleindex_)) + sizeof(tschlegendmodelopacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendGenericPropertyMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive tschlegendmodelfill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodelfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschlegendmodellabelparagraphstyleindex(&has_bits);
          tschlegendmodellabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschlegendmodelopacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tschlegendmodelopacity(&has_bits);
          tschlegendmodelopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodelshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodelstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LegendGenericPropertyMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschlegendmodelfill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tschlegendmodelfill(this), target, stream);
  }

  // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tschlegendmodellabelparagraphstyleindex(), target);
  }

  // optional float tschlegendmodelopacity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tschlegendmodelopacity(), target);
  }

  // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tschlegendmodelshadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tschlegendmodelstroke(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.LegendGenericPropertyMapArchive)
  return target;
}

size_t LegendGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSD.FillArchive tschlegendmodelfill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschlegendmodelfill_);
    }

    // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschlegendmodelshadow_);
    }

    // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschlegendmodelstroke_);
    }

    // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschlegendmodellabelparagraphstyleindex());
    }

    // optional float tschlegendmodelopacity = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LegendGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }

void LegendGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LegendGenericPropertyMapArchive *>(to)->MergeFrom(
      static_cast<const LegendGenericPropertyMapArchive &>(from));
}


void LegendGenericPropertyMapArchive::MergeFrom(const LegendGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tschlegendmodelfill()->::TSD::FillArchive::MergeFrom(from._internal_tschlegendmodelfill());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschlegendmodelshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschlegendmodelshadow());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschlegendmodelstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschlegendmodelstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      tschlegendmodellabelparagraphstyleindex_ = from.tschlegendmodellabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschlegendmodelopacity_ = from.tschlegendmodelopacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LegendGenericPropertyMapArchive::CopyFrom(const LegendGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschlegendmodelfill()) {
    if (!tschlegendmodelfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodelshadow()) {
    if (!tschlegendmodelshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodelstroke()) {
    if (!tschlegendmodelstroke_->IsInitialized()) return false;
  }
  return true;
}

void LegendGenericPropertyMapArchive::InternalSwap(LegendGenericPropertyMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegendGenericPropertyMapArchive, tschlegendmodelopacity_)
      + sizeof(LegendGenericPropertyMapArchive::tschlegendmodelopacity_)
      - PROTOBUF_FIELD_OFFSET(LegendGenericPropertyMapArchive, tschlegendmodelfill_)>(
          reinterpret_cast<char*>(&tschlegendmodelfill_),
          reinterpret_cast<char*>(&other->tschlegendmodelfill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendGenericPropertyMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[11]);
}

// ===================================================================

class ChartAxisGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisGenericPropertyMapArchive>()._has_bits_);
  static const ::TSK::FormatStructArchive& tschchartaxis1_0dateformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxis1_0dateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxis1_0numberformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxis1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartaxis3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::StrokeArchive& tschchartaxis3dgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxis3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschchartaxis3dlabelposition(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdateformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisdateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdurationformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisdurationformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschchartaxishorizontalspacing(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxislabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxislabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxismajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSD::ShadowArchive& tschchartaxismajorgridlineshadow(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxismajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartaxismajorgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxismajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartaxisminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisminorgridlineshadow(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisminorgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisnumberformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartaxisnumberofdecades(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartaxisnumberofmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartaxisnumberofminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartaxisplottoedges(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartaxisscale(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartaxisshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartaxisshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartaxisshowlastlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartaxisshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartaxisshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartaxisshowminimumlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartaxisshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartaxisshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartaxisshowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartaxisshowtitle(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartaxistickmarklocation(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartaxistitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartaxistitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisusermax(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisusermax(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisusermin(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisusermin(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxisverticalspacing(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
};

const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxis1_0dateformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxis1_0dateformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxis1_0numberformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxis1_0numberformat_;
}
const ::TSD::StrokeArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxis3dgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxis3dgridlinestroke_;
}
const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisdateformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxisdateformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisdurationformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxisdurationformat_;
}
const ::TSD::ShadowArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxismajorgridlineshadow(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxismajorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxismajorgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxismajorgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisminorgridlineshadow(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxisminorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisminorgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxisminorgridlinestroke_;
}
const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisnumberformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxisnumberformat_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisusermax(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxisusermax_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisusermin(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->tschchartaxisusermin_;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis1_0dateformat() {
  if (tschchartaxis1_0dateformat_ != nullptr) tschchartaxis1_0dateformat_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis1_0numberformat() {
  if (tschchartaxis1_0numberformat_ != nullptr) tschchartaxis1_0numberformat_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis3dgridlinestroke() {
  if (tschchartaxis3dgridlinestroke_ != nullptr) tschchartaxis3dgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisdateformat() {
  if (tschchartaxisdateformat_ != nullptr) tschchartaxisdateformat_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisdurationformat() {
  if (tschchartaxisdurationformat_ != nullptr) tschchartaxisdurationformat_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxismajorgridlineshadow() {
  if (tschchartaxismajorgridlineshadow_ != nullptr) tschchartaxismajorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxismajorgridlinestroke() {
  if (tschchartaxismajorgridlinestroke_ != nullptr) tschchartaxismajorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisminorgridlineshadow() {
  if (tschchartaxisminorgridlineshadow_ != nullptr) tschchartaxisminorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisminorgridlinestroke() {
  if (tschchartaxisminorgridlinestroke_ != nullptr) tschchartaxisminorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberformat() {
  if (tschchartaxisnumberformat_ != nullptr) tschchartaxisnumberformat_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisusermax() {
  if (tschchartaxisusermax_ != nullptr) tschchartaxisusermax_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisusermin() {
  if (tschchartaxisusermin_ != nullptr) tschchartaxisusermin_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
ChartAxisGenericPropertyMapArchive::ChartAxisGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
}
ChartAxisGenericPropertyMapArchive::ChartAxisGenericPropertyMapArchive(const ChartAxisGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartaxistitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartaxistitle()) {
    tschchartaxistitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartaxistitle(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tschchartaxis1_0dateformat()) {
    tschchartaxis1_0dateformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxis1_0dateformat_);
  } else {
    tschchartaxis1_0dateformat_ = nullptr;
  }
  if (from._internal_has_tschchartaxis1_0numberformat()) {
    tschchartaxis1_0numberformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxis1_0numberformat_);
  } else {
    tschchartaxis1_0numberformat_ = nullptr;
  }
  if (from._internal_has_tschchartaxis3dgridlinestroke()) {
    tschchartaxis3dgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxis3dgridlinestroke_);
  } else {
    tschchartaxis3dgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdateformat()) {
    tschchartaxisdateformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxisdateformat_);
  } else {
    tschchartaxisdateformat_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdurationformat()) {
    tschchartaxisdurationformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxisdurationformat_);
  } else {
    tschchartaxisdurationformat_ = nullptr;
  }
  if (from._internal_has_tschchartaxismajorgridlineshadow()) {
    tschchartaxismajorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxismajorgridlineshadow_);
  } else {
    tschchartaxismajorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxismajorgridlinestroke()) {
    tschchartaxismajorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxismajorgridlinestroke_);
  } else {
    tschchartaxismajorgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxisminorgridlineshadow()) {
    tschchartaxisminorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxisminorgridlineshadow_);
  } else {
    tschchartaxisminorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxisminorgridlinestroke()) {
    tschchartaxisminorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxisminorgridlinestroke_);
  } else {
    tschchartaxisminorgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxisnumberformat()) {
    tschchartaxisnumberformat_ = new ::TSK::FormatStructArchive(*from.tschchartaxisnumberformat_);
  } else {
    tschchartaxisnumberformat_ = nullptr;
  }
  if (from._internal_has_tschchartaxisusermax()) {
    tschchartaxisusermax_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from.tschchartaxisusermax_);
  } else {
    tschchartaxisusermax_ = nullptr;
  }
  if (from._internal_has_tschchartaxisusermin()) {
    tschchartaxisusermin_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from.tschchartaxisusermin_);
  } else {
    tschchartaxisusermin_ = nullptr;
  }
  ::memcpy(&tschchartaxis3dgridlineopacity_, &from.tschchartaxis3dgridlineopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxisverticalspacing_) -
    reinterpret_cast<char*>(&tschchartaxis3dgridlineopacity_)) + sizeof(tschchartaxisverticalspacing_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
}

inline void ChartAxisGenericPropertyMapArchive::SharedCtor() {
tschchartaxistitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschchartaxis1_0dateformat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxisverticalspacing_) -
    reinterpret_cast<char*>(&tschchartaxis1_0dateformat_)) + sizeof(tschchartaxisverticalspacing_));
}

ChartAxisGenericPropertyMapArchive::~ChartAxisGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartAxisGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tschchartaxistitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tschchartaxis1_0dateformat_;
  if (this != internal_default_instance()) delete tschchartaxis1_0numberformat_;
  if (this != internal_default_instance()) delete tschchartaxis3dgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxisdateformat_;
  if (this != internal_default_instance()) delete tschchartaxisdurationformat_;
  if (this != internal_default_instance()) delete tschchartaxismajorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxismajorgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxisminorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxisminorgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxisnumberformat_;
  if (this != internal_default_instance()) delete tschchartaxisusermax_;
  if (this != internal_default_instance()) delete tschchartaxisusermin_;
}

void ChartAxisGenericPropertyMapArchive::ArenaDtor(void* object) {
  ChartAxisGenericPropertyMapArchive* _this = reinterpret_cast< ChartAxisGenericPropertyMapArchive* >(object);
  (void)_this;
}
void ChartAxisGenericPropertyMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartAxisGenericPropertyMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartAxisGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartaxistitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartaxis1_0dateformat_ != nullptr);
      tschchartaxis1_0dateformat_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartaxis1_0numberformat_ != nullptr);
      tschchartaxis1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartaxis3dgridlinestroke_ != nullptr);
      tschchartaxis3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartaxisdateformat_ != nullptr);
      tschchartaxisdateformat_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartaxisdurationformat_ != nullptr);
      tschchartaxisdurationformat_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartaxismajorgridlineshadow_ != nullptr);
      tschchartaxismajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartaxismajorgridlinestroke_ != nullptr);
      tschchartaxismajorgridlinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartaxisminorgridlineshadow_ != nullptr);
      tschchartaxisminorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartaxisminorgridlinestroke_ != nullptr);
      tschchartaxisminorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartaxisnumberformat_ != nullptr);
      tschchartaxisnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartaxisusermax_ != nullptr);
      tschchartaxisusermax_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tschchartaxisusermin_ != nullptr);
      tschchartaxisusermin_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&tschchartaxis3dgridlineopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxishorizontalspacing_) -
        reinterpret_cast<char*>(&tschchartaxis3dgridlineopacity_)) + sizeof(tschchartaxishorizontalspacing_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartaxislabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxisnumberofminorgridlines_) -
        reinterpret_cast<char*>(&tschchartaxislabelparagraphstyleindex_)) + sizeof(tschchartaxisnumberofminorgridlines_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartaxisscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxisshowminimumlabel_) -
        reinterpret_cast<char*>(&tschchartaxisscale_)) + sizeof(tschchartaxisshowminimumlabel_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&tschchartaxisshowminorgridlines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxisverticalspacing_) -
        reinterpret_cast<char*>(&tschchartaxisshowminorgridlines_)) + sizeof(tschchartaxisverticalspacing_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisGenericPropertyMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxis1_0dateformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxis1_0numberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxis3dgridlineopacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tschchartaxis3dgridlineopacity(&_has_bits_);
          tschchartaxis3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxis3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxis3dlabelposition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartaxis3dlabelposition(&_has_bits_);
          tschchartaxis3dlabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdateformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdurationformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxishorizontalspacing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tschchartaxishorizontalspacing(&_has_bits_);
          tschchartaxishorizontalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxislabelparagraphstyleindex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschchartaxislabelparagraphstyleindex(&_has_bits_);
          tschchartaxislabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxislabelsorientation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_tschchartaxislabelsorientation(&_has_bits_);
          tschchartaxislabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxismajorgridlineopacity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_tschchartaxismajorgridlineopacity(&_has_bits_);
          tschchartaxismajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxismajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxismajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisminorgridlineopacity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_tschchartaxisminorgridlineopacity(&_has_bits_);
          tschchartaxisminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisnumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisnumberformattype = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartaxisnumberformattype(&_has_bits_);
          tschchartaxisnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisnumberofdecades = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartaxisnumberofdecades(&_has_bits_);
          tschchartaxisnumberofdecades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisnumberofmajorgridlines = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartaxisnumberofmajorgridlines(&_has_bits_);
          tschchartaxisnumberofmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisnumberofminorgridlines = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartaxisnumberofminorgridlines(&_has_bits_);
          tschchartaxisnumberofminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisplottoedges = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartaxisplottoedges(&_has_bits_);
          tschchartaxisplottoedges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisscale = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartaxisscale(&_has_bits_);
          tschchartaxisscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowaxis = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartaxisshowaxis(&_has_bits_);
          tschchartaxisshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowlabels = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartaxisshowlabels(&_has_bits_);
          tschchartaxisshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowlastlabel = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartaxisshowlastlabel(&_has_bits_);
          tschchartaxisshowlastlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowmajorgridlines = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartaxisshowmajorgridlines(&_has_bits_);
          tschchartaxisshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowmajortickmarks = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartaxisshowmajortickmarks(&_has_bits_);
          tschchartaxisshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowminimumlabel = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartaxisshowminimumlabel(&_has_bits_);
          tschchartaxisshowminimumlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowminorgridlines = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartaxisshowminorgridlines(&_has_bits_);
          tschchartaxisshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowminortickmarks = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartaxisshowminortickmarks(&_has_bits_);
          tschchartaxisshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowserieslabels = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartaxisshowserieslabels(&_has_bits_);
          tschchartaxisshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowtitle = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartaxisshowtitle(&_has_bits_);
          tschchartaxisshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxistickmarklocation = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartaxistickmarklocation(&_has_bits_);
          tschchartaxistickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartaxistitle = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tschchartaxistitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxistitleparagraphstyleindex = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartaxistitleparagraphstyleindex(&_has_bits_);
          tschchartaxistitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisusermax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisusermin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisverticalspacing = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartaxisverticalspacing(&_has_bits_);
          tschchartaxisverticalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartAxisGenericPropertyMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tschchartaxis1_0dateformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tschchartaxis1_0numberformat(this), target, stream);
  }

  // optional float tschchartaxis3dgridlineopacity = 3;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tschchartaxis3dgridlineopacity(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tschchartaxis3dgridlinestroke(this), target, stream);
  }

  // optional int32 tschchartaxis3dlabelposition = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tschchartaxis3dlabelposition(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tschchartaxisdateformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tschchartaxisdurationformat(this), target, stream);
  }

  // optional int32 tschchartaxishorizontalspacing = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_tschchartaxishorizontalspacing(), target);
  }

  // optional int32 tschchartaxislabelparagraphstyleindex = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_tschchartaxislabelparagraphstyleindex(), target);
  }

  // optional float tschchartaxislabelsorientation = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_tschchartaxislabelsorientation(), target);
  }

  // optional float tschchartaxismajorgridlineopacity = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_tschchartaxismajorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tschchartaxismajorgridlineshadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tschchartaxismajorgridlinestroke(this), target, stream);
  }

  // optional float tschchartaxisminorgridlineopacity = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_tschchartaxisminorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::tschchartaxisminorgridlineshadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::tschchartaxisminorgridlinestroke(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::tschchartaxisnumberformat(this), target, stream);
  }

  // optional int32 tschchartaxisnumberformattype = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_tschchartaxisnumberformattype(), target);
  }

  // optional int32 tschchartaxisnumberofdecades = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartaxisnumberofdecades(), target);
  }

  // optional int32 tschchartaxisnumberofmajorgridlines = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartaxisnumberofmajorgridlines(), target);
  }

  // optional int32 tschchartaxisnumberofminorgridlines = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartaxisnumberofminorgridlines(), target);
  }

  // optional bool tschchartaxisplottoedges = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_tschchartaxisplottoedges(), target);
  }

  // optional int32 tschchartaxisscale = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartaxisscale(), target);
  }

  // optional bool tschchartaxisshowaxis = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_tschchartaxisshowaxis(), target);
  }

  // optional bool tschchartaxisshowlabels = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_tschchartaxisshowlabels(), target);
  }

  // optional bool tschchartaxisshowlastlabel = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_tschchartaxisshowlastlabel(), target);
  }

  // optional bool tschchartaxisshowmajorgridlines = 27;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartaxisshowmajorgridlines(), target);
  }

  // optional bool tschchartaxisshowmajortickmarks = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartaxisshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisshowminimumlabel = 29;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_tschchartaxisshowminimumlabel(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartaxisshowminorgridlines = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartaxisshowminorgridlines(), target);
  }

  // optional bool tschchartaxisshowminortickmarks = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_tschchartaxisshowminortickmarks(), target);
  }

  // optional bool tschchartaxisshowserieslabels = 32;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartaxisshowserieslabels(), target);
  }

  // optional bool tschchartaxisshowtitle = 33;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartaxisshowtitle(), target);
  }

  // optional int32 tschchartaxistickmarklocation = 34;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_tschchartaxistickmarklocation(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string tschchartaxistitle = 35;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxistitle().data(), static_cast<int>(this->_internal_tschchartaxistitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitle");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_tschchartaxistitle(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartaxistitleparagraphstyleindex = 36;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_tschchartaxistitleparagraphstyleindex(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 37;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::tschchartaxisusermax(this), target, stream);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 38;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::tschchartaxisusermin(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartaxisverticalspacing = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_tschchartaxisverticalspacing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  return target;
}

size_t ChartAxisGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartaxistitle = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxistitle());
    }

    // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxis1_0dateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxis1_0numberformat_);
    }

    // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxis3dgridlinestroke_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdurationformat_);
    }

    // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxismajorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxismajorgridlinestroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisminorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisminorgridlinestroke_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisnumberformat_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 37;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisusermax_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 38;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisusermin_);
    }

    // optional float tschchartaxis3dgridlineopacity = 3;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartaxis3dlabelposition = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxis3dlabelposition());
    }

    // optional int32 tschchartaxishorizontalspacing = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxishorizontalspacing());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 tschchartaxislabelparagraphstyleindex = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxislabelparagraphstyleindex());
    }

    // optional float tschchartaxislabelsorientation = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxismajorgridlineopacity = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisminorgridlineopacity = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartaxisnumberformattype = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisnumberformattype());
    }

    // optional int32 tschchartaxisnumberofdecades = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisnumberofdecades());
    }

    // optional int32 tschchartaxisnumberofmajorgridlines = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisnumberofmajorgridlines());
    }

    // optional int32 tschchartaxisnumberofminorgridlines = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisnumberofminorgridlines());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartaxisscale = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisscale());
    }

    // optional bool tschchartaxisplottoedges = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowaxis = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowlabels = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowlastlabel = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowmajorgridlines = 27;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowmajortickmarks = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowminimumlabel = 29;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool tschchartaxisshowminorgridlines = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowminortickmarks = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowserieslabels = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowtitle = 33;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxistickmarklocation = 34;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxistickmarklocation());
    }

    // optional int32 tschchartaxistitleparagraphstyleindex = 36;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxistitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisverticalspacing = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisverticalspacing());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartAxisGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }

void ChartAxisGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartAxisGenericPropertyMapArchive *>(to)->MergeFrom(
      static_cast<const ChartAxisGenericPropertyMapArchive &>(from));
}


void ChartAxisGenericPropertyMapArchive::MergeFrom(const ChartAxisGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartaxistitle(from._internal_tschchartaxistitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartaxis1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxis1_0dateformat());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartaxis1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxis1_0numberformat());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartaxis3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxis3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartaxisdateformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxisdateformat());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartaxisdurationformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxisdurationformat());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartaxismajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxismajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartaxismajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxismajorgridlinestroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartaxisminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxisminorgridlineshadow());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartaxisminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxisminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartaxisnumberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartaxisnumberformat());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartaxisusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from._internal_tschchartaxisusermax());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tschchartaxisusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from._internal_tschchartaxisusermin());
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartaxis3dgridlineopacity_ = from.tschchartaxis3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartaxis3dlabelposition_ = from.tschchartaxis3dlabelposition_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartaxishorizontalspacing_ = from.tschchartaxishorizontalspacing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartaxislabelparagraphstyleindex_ = from.tschchartaxislabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartaxislabelsorientation_ = from.tschchartaxislabelsorientation_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartaxismajorgridlineopacity_ = from.tschchartaxismajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartaxisminorgridlineopacity_ = from.tschchartaxisminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartaxisnumberformattype_ = from.tschchartaxisnumberformattype_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartaxisnumberofdecades_ = from.tschchartaxisnumberofdecades_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartaxisnumberofmajorgridlines_ = from.tschchartaxisnumberofmajorgridlines_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartaxisnumberofminorgridlines_ = from.tschchartaxisnumberofminorgridlines_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartaxisscale_ = from.tschchartaxisscale_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartaxisplottoedges_ = from.tschchartaxisplottoedges_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartaxisshowaxis_ = from.tschchartaxisshowaxis_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartaxisshowlabels_ = from.tschchartaxisshowlabels_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartaxisshowlastlabel_ = from.tschchartaxisshowlastlabel_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartaxisshowmajorgridlines_ = from.tschchartaxisshowmajorgridlines_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartaxisshowmajortickmarks_ = from.tschchartaxisshowmajortickmarks_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartaxisshowminimumlabel_ = from.tschchartaxisshowminimumlabel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartaxisshowminorgridlines_ = from.tschchartaxisshowminorgridlines_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartaxisshowminortickmarks_ = from.tschchartaxisshowminortickmarks_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartaxisshowserieslabels_ = from.tschchartaxisshowserieslabels_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartaxisshowtitle_ = from.tschchartaxisshowtitle_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartaxistickmarklocation_ = from.tschchartaxistickmarklocation_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartaxistitleparagraphstyleindex_ = from.tschchartaxistitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartaxisverticalspacing_ = from.tschchartaxisverticalspacing_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisGenericPropertyMapArchive::CopyFrom(const ChartAxisGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschchartaxis1_0dateformat()) {
    if (!tschchartaxis1_0dateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxis1_0numberformat()) {
    if (!tschchartaxis1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxis3dgridlinestroke()) {
    if (!tschchartaxis3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdateformat()) {
    if (!tschchartaxisdateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdurationformat()) {
    if (!tschchartaxisdurationformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxismajorgridlineshadow()) {
    if (!tschchartaxismajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxismajorgridlinestroke()) {
    if (!tschchartaxismajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisminorgridlineshadow()) {
    if (!tschchartaxisminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisminorgridlinestroke()) {
    if (!tschchartaxisminorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisnumberformat()) {
    if (!tschchartaxisnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisGenericPropertyMapArchive::InternalSwap(ChartAxisGenericPropertyMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tschchartaxistitle_, GetArenaForAllocation(),
      &other->tschchartaxistitle_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisverticalspacing_)
      + sizeof(ChartAxisGenericPropertyMapArchive::tschchartaxisverticalspacing_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxis1_0dateformat_)>(
          reinterpret_cast<char*>(&tschchartaxis1_0dateformat_),
          reinterpret_cast<char*>(&other->tschchartaxis1_0dateformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisGenericPropertyMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[12]);
}

// ===================================================================

class ChartSeriesGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesGenericPropertyMapArchive>()._has_bits_);
  static const ::TSK::FormatStructArchive& tschchartseries1_0dateformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseries1_0dateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& tschchartseries1_0numberformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseries1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartseries2_3labelexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartseriesadjustmentscale(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSD::LineEndArchive& tschchartseriescalloutlineendlineend(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriescalloutlineendlineend(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::LineEndArchive& tschchartseriescalloutlinestartlineend(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriescalloutlinestartlineend(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartseriescalloutlinestrokestyle(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriescalloutlinestrokestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdateformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesdateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdurationformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesdurationformat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartseriesenablecalloutline(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustomnegativedata(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarcustomnegativedata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustomnegativedatascatterx(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarcustomnegativedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustompositivedata(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarcustompositivedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustompositivedatascatterx(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarcustompositivedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartserieserrorbarfixedvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartserieserrorbarfixedvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSD::LineEndArchive& tschchartserieserrorbarlineend(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarlineend(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::LineEndArchive& tschchartserieserrorbarlineendscatterx(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarlineendscatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartserieserrorbarpercentvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartserieserrorbarpercentvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartserieserrorbarsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartserieserrorbarsettingscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschchartserieserrorbarshadow(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartserieserrorbarspacing(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartserieserrorbarspacingscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartserieserrorbarstddevvalue(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartserieserrorbarstddevvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartserieserrorbarstroke(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::StrokeArchive& tschchartserieserrorbarstrokescatterx(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarstrokescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartserieserrorbartype(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartserieserrorbartypescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSD::FillArchive& tschchartseriesfill(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesfill(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartserieslabelexplosion(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tschchartserieslabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_tschchartserieslinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesnumberformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartseriesnumberformattype(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_tschchartseriesopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartseriesoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriespercentnumberformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriespercentnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartseriesseriestype(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesshadow(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartseriesshowerrorbar(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_tschchartseriesshowerrorbarscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_tschchartseriesshowlabelsinfront(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_tschchartseriesshowline(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_tschchartseriesshownegativedata(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_tschchartseriesshowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_tschchartseriesshowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesshowtrendline(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_tschchartseriesshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_tschchartseriessizedimension(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesstacklabels(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesstroke(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSD::FillArchive& tschchartseriessymbolfill(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriessymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartseriessymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_tschchartseriessymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_tschchartseriessymbolsize(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::TSD::StrokeArchive& tschchartseriessymbolstroke(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriessymbolstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartseriessymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_tschchartseriestrendlineequationoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriestrendlineequationoffsety(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_tschchartseriestrendlinelabelstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartseriestrendlineorder(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_tschchartseriestrendlineperiod(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_tschchartseriestrendlinersquaredoffsetx(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_tschchartseriestrendlinersquaredoffsety(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschchartseriestrendlineshadow(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriestrendlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartseriestrendlineshowequation(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_tschchartseriestrendlineshowlabel(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_tschchartseriestrendlineshowr2value(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartseriestrendlinestroke(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriestrendlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartseriestrendlinetype(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_tschchartseriestrendlineequationopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_tschchartseriestrendlineequationparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_tschchartseriestrendlinersquaredopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_tschchartseriestrendlinersquaredparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_tschchartseriesvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_tschchartseriesvaluelabelspacing(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_tschchartseriesvaluelabelsaxis(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_tschchartserieswedgeexplosion(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_tschchartseriesyaxisordinal(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
};

const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseries1_0dateformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseries1_0dateformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseries1_0numberformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseries1_0numberformat_;
}
const ::TSD::LineEndArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriescalloutlineendlineend(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriescalloutlineendlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriescalloutlinestartlineend(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriescalloutlinestartlineend_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriescalloutlinestrokestyle(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriescalloutlinestrokestyle_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesdateformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriesdateformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesdurationformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriesdurationformat_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarcustomnegativedata(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartserieserrorbarcustomnegativedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarcustomnegativedatascatterx(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartserieserrorbarcustomnegativedatascatterx_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarcustompositivedata(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartserieserrorbarcustompositivedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarcustompositivedatascatterx(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartserieserrorbarcustompositivedatascatterx_;
}
const ::TSD::LineEndArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarlineend(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartserieserrorbarlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarlineendscatterx(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartserieserrorbarlineendscatterx_;
}
const ::TSD::ShadowArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarshadow(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartserieserrorbarshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarstroke(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartserieserrorbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarstrokescatterx(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartserieserrorbarstrokescatterx_;
}
const ::TSD::FillArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesfill(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriesfill_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesnumberformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriesnumberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriespercentnumberformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriespercentnumberformat_;
}
const ::TSD::ShadowArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesshadow(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriesshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesstroke(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriesstroke_;
}
const ::TSD::FillArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriessymbolfill(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriessymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriessymbolstroke(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriessymbolstroke_;
}
const ::TSD::ShadowArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriestrendlineshadow(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriestrendlineshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriestrendlinestroke(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->tschchartseriestrendlinestroke_;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseries1_0dateformat() {
  if (tschchartseries1_0dateformat_ != nullptr) tschchartseries1_0dateformat_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseries1_0numberformat() {
  if (tschchartseries1_0numberformat_ != nullptr) tschchartseries1_0numberformat_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriescalloutlineendlineend() {
  if (tschchartseriescalloutlineendlineend_ != nullptr) tschchartseriescalloutlineendlineend_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriescalloutlinestartlineend() {
  if (tschchartseriescalloutlinestartlineend_ != nullptr) tschchartseriescalloutlinestartlineend_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriescalloutlinestrokestyle() {
  if (tschchartseriescalloutlinestrokestyle_ != nullptr) tschchartseriescalloutlinestrokestyle_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesdateformat() {
  if (tschchartseriesdateformat_ != nullptr) tschchartseriesdateformat_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesdurationformat() {
  if (tschchartseriesdurationformat_ != nullptr) tschchartseriesdurationformat_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustomnegativedata() {
  if (tschchartserieserrorbarcustomnegativedata_ != nullptr) tschchartserieserrorbarcustomnegativedata_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustomnegativedatascatterx() {
  if (tschchartserieserrorbarcustomnegativedatascatterx_ != nullptr) tschchartserieserrorbarcustomnegativedatascatterx_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustompositivedata() {
  if (tschchartserieserrorbarcustompositivedata_ != nullptr) tschchartserieserrorbarcustompositivedata_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustompositivedatascatterx() {
  if (tschchartserieserrorbarcustompositivedatascatterx_ != nullptr) tschchartserieserrorbarcustompositivedatascatterx_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarlineend() {
  if (tschchartserieserrorbarlineend_ != nullptr) tschchartserieserrorbarlineend_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarlineendscatterx() {
  if (tschchartserieserrorbarlineendscatterx_ != nullptr) tschchartserieserrorbarlineendscatterx_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarshadow() {
  if (tschchartserieserrorbarshadow_ != nullptr) tschchartserieserrorbarshadow_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstroke() {
  if (tschchartserieserrorbarstroke_ != nullptr) tschchartserieserrorbarstroke_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstrokescatterx() {
  if (tschchartserieserrorbarstrokescatterx_ != nullptr) tschchartserieserrorbarstrokescatterx_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesfill() {
  if (tschchartseriesfill_ != nullptr) tschchartseriesfill_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesnumberformat() {
  if (tschchartseriesnumberformat_ != nullptr) tschchartseriesnumberformat_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriespercentnumberformat() {
  if (tschchartseriespercentnumberformat_ != nullptr) tschchartseriespercentnumberformat_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshadow() {
  if (tschchartseriesshadow_ != nullptr) tschchartseriesshadow_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesstroke() {
  if (tschchartseriesstroke_ != nullptr) tschchartseriesstroke_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolfill() {
  if (tschchartseriessymbolfill_ != nullptr) tschchartseriessymbolfill_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolstroke() {
  if (tschchartseriessymbolstroke_ != nullptr) tschchartseriessymbolstroke_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineshadow() {
  if (tschchartseriestrendlineshadow_ != nullptr) tschchartseriestrendlineshadow_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinestroke() {
  if (tschchartseriestrendlinestroke_ != nullptr) tschchartseriestrendlinestroke_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
ChartSeriesGenericPropertyMapArchive::ChartSeriesGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
}
ChartSeriesGenericPropertyMapArchive::ChartSeriesGenericPropertyMapArchive(const ChartSeriesGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartseriestrendlinelabelstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartseriestrendlinelabelstring()) {
    tschchartseriestrendlinelabelstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartseriestrendlinelabelstring(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tschchartseries1_0dateformat()) {
    tschchartseries1_0dateformat_ = new ::TSK::FormatStructArchive(*from.tschchartseries1_0dateformat_);
  } else {
    tschchartseries1_0dateformat_ = nullptr;
  }
  if (from._internal_has_tschchartseries1_0numberformat()) {
    tschchartseries1_0numberformat_ = new ::TSK::FormatStructArchive(*from.tschchartseries1_0numberformat_);
  } else {
    tschchartseries1_0numberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriescalloutlineendlineend()) {
    tschchartseriescalloutlineendlineend_ = new ::TSD::LineEndArchive(*from.tschchartseriescalloutlineendlineend_);
  } else {
    tschchartseriescalloutlineendlineend_ = nullptr;
  }
  if (from._internal_has_tschchartseriescalloutlinestartlineend()) {
    tschchartseriescalloutlinestartlineend_ = new ::TSD::LineEndArchive(*from.tschchartseriescalloutlinestartlineend_);
  } else {
    tschchartseriescalloutlinestartlineend_ = nullptr;
  }
  if (from._internal_has_tschchartseriescalloutlinestrokestyle()) {
    tschchartseriescalloutlinestrokestyle_ = new ::TSD::StrokeArchive(*from.tschchartseriescalloutlinestrokestyle_);
  } else {
    tschchartseriescalloutlinestrokestyle_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdateformat()) {
    tschchartseriesdateformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriesdateformat_);
  } else {
    tschchartseriesdateformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdurationformat()) {
    tschchartseriesdurationformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriesdurationformat_);
  } else {
    tschchartseriesdurationformat_ = nullptr;
  }
  if (from._internal_has_tschchartserieserrorbarcustomnegativedata()) {
    tschchartserieserrorbarcustomnegativedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartserieserrorbarcustomnegativedata_);
  } else {
    tschchartserieserrorbarcustomnegativedata_ = nullptr;
  }
  if (from._internal_has_tschchartserieserrorbarcustomnegativedatascatterx()) {
    tschchartserieserrorbarcustomnegativedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartserieserrorbarcustomnegativedatascatterx_);
  } else {
    tschchartserieserrorbarcustomnegativedatascatterx_ = nullptr;
  }
  if (from._internal_has_tschchartserieserrorbarcustompositivedata()) {
    tschchartserieserrorbarcustompositivedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartserieserrorbarcustompositivedata_);
  } else {
    tschchartserieserrorbarcustompositivedata_ = nullptr;
  }
  if (from._internal_has_tschchartserieserrorbarcustompositivedatascatterx()) {
    tschchartserieserrorbarcustompositivedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartserieserrorbarcustompositivedatascatterx_);
  } else {
    tschchartserieserrorbarcustompositivedatascatterx_ = nullptr;
  }
  if (from._internal_has_tschchartserieserrorbarlineend()) {
    tschchartserieserrorbarlineend_ = new ::TSD::LineEndArchive(*from.tschchartserieserrorbarlineend_);
  } else {
    tschchartserieserrorbarlineend_ = nullptr;
  }
  if (from._internal_has_tschchartserieserrorbarlineendscatterx()) {
    tschchartserieserrorbarlineendscatterx_ = new ::TSD::LineEndArchive(*from.tschchartserieserrorbarlineendscatterx_);
  } else {
    tschchartserieserrorbarlineendscatterx_ = nullptr;
  }
  if (from._internal_has_tschchartserieserrorbarshadow()) {
    tschchartserieserrorbarshadow_ = new ::TSD::ShadowArchive(*from.tschchartserieserrorbarshadow_);
  } else {
    tschchartserieserrorbarshadow_ = nullptr;
  }
  if (from._internal_has_tschchartserieserrorbarstroke()) {
    tschchartserieserrorbarstroke_ = new ::TSD::StrokeArchive(*from.tschchartserieserrorbarstroke_);
  } else {
    tschchartserieserrorbarstroke_ = nullptr;
  }
  if (from._internal_has_tschchartserieserrorbarstrokescatterx()) {
    tschchartserieserrorbarstrokescatterx_ = new ::TSD::StrokeArchive(*from.tschchartserieserrorbarstrokescatterx_);
  } else {
    tschchartserieserrorbarstrokescatterx_ = nullptr;
  }
  if (from._internal_has_tschchartseriesfill()) {
    tschchartseriesfill_ = new ::TSD::FillArchive(*from.tschchartseriesfill_);
  } else {
    tschchartseriesfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesnumberformat()) {
    tschchartseriesnumberformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriesnumberformat_);
  } else {
    tschchartseriesnumberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriespercentnumberformat()) {
    tschchartseriespercentnumberformat_ = new ::TSK::FormatStructArchive(*from.tschchartseriespercentnumberformat_);
  } else {
    tschchartseriespercentnumberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriesshadow()) {
    tschchartseriesshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesshadow_);
  } else {
    tschchartseriesshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesstroke()) {
    tschchartseriesstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesstroke_);
  } else {
    tschchartseriesstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriessymbolfill()) {
    tschchartseriessymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriessymbolfill_);
  } else {
    tschchartseriessymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriessymbolstroke()) {
    tschchartseriessymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriessymbolstroke_);
  } else {
    tschchartseriessymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriestrendlineshadow()) {
    tschchartseriestrendlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriestrendlineshadow_);
  } else {
    tschchartseriestrendlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriestrendlinestroke()) {
    tschchartseriestrendlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartseriestrendlinestroke_);
  } else {
    tschchartseriestrendlinestroke_ = nullptr;
  }
  ::memcpy(&tschchartseries2_3labelexplosion_, &from.tschchartseries2_3labelexplosion_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesyaxisordinal_) -
    reinterpret_cast<char*>(&tschchartseries2_3labelexplosion_)) + sizeof(tschchartseriesyaxisordinal_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
}

inline void ChartSeriesGenericPropertyMapArchive::SharedCtor() {
tschchartseriestrendlinelabelstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschchartseries1_0dateformat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesyaxisordinal_) -
    reinterpret_cast<char*>(&tschchartseries1_0dateformat_)) + sizeof(tschchartseriesyaxisordinal_));
}

ChartSeriesGenericPropertyMapArchive::~ChartSeriesGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartSeriesGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tschchartseriestrendlinelabelstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tschchartseries1_0dateformat_;
  if (this != internal_default_instance()) delete tschchartseries1_0numberformat_;
  if (this != internal_default_instance()) delete tschchartseriescalloutlineendlineend_;
  if (this != internal_default_instance()) delete tschchartseriescalloutlinestartlineend_;
  if (this != internal_default_instance()) delete tschchartseriescalloutlinestrokestyle_;
  if (this != internal_default_instance()) delete tschchartseriesdateformat_;
  if (this != internal_default_instance()) delete tschchartseriesdurationformat_;
  if (this != internal_default_instance()) delete tschchartserieserrorbarcustomnegativedata_;
  if (this != internal_default_instance()) delete tschchartserieserrorbarcustomnegativedatascatterx_;
  if (this != internal_default_instance()) delete tschchartserieserrorbarcustompositivedata_;
  if (this != internal_default_instance()) delete tschchartserieserrorbarcustompositivedatascatterx_;
  if (this != internal_default_instance()) delete tschchartserieserrorbarlineend_;
  if (this != internal_default_instance()) delete tschchartserieserrorbarlineendscatterx_;
  if (this != internal_default_instance()) delete tschchartserieserrorbarshadow_;
  if (this != internal_default_instance()) delete tschchartserieserrorbarstroke_;
  if (this != internal_default_instance()) delete tschchartserieserrorbarstrokescatterx_;
  if (this != internal_default_instance()) delete tschchartseriesfill_;
  if (this != internal_default_instance()) delete tschchartseriesnumberformat_;
  if (this != internal_default_instance()) delete tschchartseriespercentnumberformat_;
  if (this != internal_default_instance()) delete tschchartseriesshadow_;
  if (this != internal_default_instance()) delete tschchartseriesstroke_;
  if (this != internal_default_instance()) delete tschchartseriessymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriessymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriestrendlineshadow_;
  if (this != internal_default_instance()) delete tschchartseriestrendlinestroke_;
}

void ChartSeriesGenericPropertyMapArchive::ArenaDtor(void* object) {
  ChartSeriesGenericPropertyMapArchive* _this = reinterpret_cast< ChartSeriesGenericPropertyMapArchive* >(object);
  (void)_this;
}
void ChartSeriesGenericPropertyMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSeriesGenericPropertyMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSeriesGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriestrendlinelabelstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartseries1_0dateformat_ != nullptr);
      tschchartseries1_0dateformat_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartseries1_0numberformat_ != nullptr);
      tschchartseries1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartseriescalloutlineendlineend_ != nullptr);
      tschchartseriescalloutlineendlineend_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartseriescalloutlinestartlineend_ != nullptr);
      tschchartseriescalloutlinestartlineend_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartseriescalloutlinestrokestyle_ != nullptr);
      tschchartseriescalloutlinestrokestyle_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartseriesdateformat_ != nullptr);
      tschchartseriesdateformat_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartseriesdurationformat_ != nullptr);
      tschchartseriesdurationformat_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartserieserrorbarcustomnegativedata_ != nullptr);
      tschchartserieserrorbarcustomnegativedata_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartserieserrorbarcustomnegativedatascatterx_ != nullptr);
      tschchartserieserrorbarcustomnegativedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartserieserrorbarcustompositivedata_ != nullptr);
      tschchartserieserrorbarcustompositivedata_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartserieserrorbarcustompositivedatascatterx_ != nullptr);
      tschchartserieserrorbarcustompositivedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tschchartserieserrorbarlineend_ != nullptr);
      tschchartserieserrorbarlineend_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(tschchartserieserrorbarlineendscatterx_ != nullptr);
      tschchartserieserrorbarlineendscatterx_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(tschchartserieserrorbarshadow_ != nullptr);
      tschchartserieserrorbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(tschchartserieserrorbarstroke_ != nullptr);
      tschchartserieserrorbarstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(tschchartserieserrorbarstrokescatterx_ != nullptr);
      tschchartserieserrorbarstrokescatterx_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(tschchartseriesfill_ != nullptr);
      tschchartseriesfill_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(tschchartseriesnumberformat_ != nullptr);
      tschchartseriesnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(tschchartseriespercentnumberformat_ != nullptr);
      tschchartseriespercentnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(tschchartseriesshadow_ != nullptr);
      tschchartseriesshadow_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(tschchartseriesstroke_ != nullptr);
      tschchartseriesstroke_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(tschchartseriessymbolfill_ != nullptr);
      tschchartseriessymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(tschchartseriessymbolstroke_ != nullptr);
      tschchartseriessymbolstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(tschchartseriestrendlineshadow_ != nullptr);
      tschchartseriestrendlineshadow_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(tschchartseriestrendlinestroke_ != nullptr);
      tschchartseriestrendlinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0xfc000000u) {
    ::memset(&tschchartseries2_3labelexplosion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartserieserrorbarpercentvalue_) -
        reinterpret_cast<char*>(&tschchartseries2_3labelexplosion_)) + sizeof(tschchartserieserrorbarpercentvalue_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartserieserrorbarpercentvaluescatterx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartserieserrorbartype_) -
        reinterpret_cast<char*>(&tschchartserieserrorbarpercentvaluescatterx_)) + sizeof(tschchartserieserrorbartype_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tschchartserieserrorbartypescatterx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesseriestype_) -
        reinterpret_cast<char*>(&tschchartserieserrorbartypescatterx_)) + sizeof(tschchartseriesseriestype_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartseriesshowerrorbar_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesshowtrendline_) -
        reinterpret_cast<char*>(&tschchartseriesshowerrorbar_)) + sizeof(tschchartseriesshowtrendline_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartseriessizedimension_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriestrendlineequationoffsetx_) -
        reinterpret_cast<char*>(&tschchartseriessizedimension_)) + sizeof(tschchartseriestrendlineequationoffsetx_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartseriestrendlineequationoffsety_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriestrendlineshowr2value_) -
        reinterpret_cast<char*>(&tschchartseriestrendlineequationoffsety_)) + sizeof(tschchartseriestrendlineshowr2value_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tschchartseriestrendlinetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesvaluelabelsaxis_) -
        reinterpret_cast<char*>(&tschchartseriestrendlinetype_)) + sizeof(tschchartseriesvaluelabelsaxis_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&tschchartserieswedgeexplosion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesyaxisordinal_) -
        reinterpret_cast<char*>(&tschchartserieswedgeexplosion_)) + sizeof(tschchartseriesyaxisordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesGenericPropertyMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries1_0dateformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries1_0numberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseries2_3labelexplosion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tschchartseries2_3labelexplosion(&_has_bits_);
          tschchartseries2_3labelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesadjustmentscale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_tschchartseriesadjustmentscale(&_has_bits_);
          tschchartseriesadjustmentscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriescalloutlineendlineend = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescalloutlineendlineend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriescalloutlinestartlineend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescalloutlinestartlineend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriescalloutlinestrokestyle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescalloutlinestrokestyle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdateformat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdateformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdurationformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesenablecalloutline = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartseriesenablecalloutline(&_has_bits_);
          tschchartseriesenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarcustomnegativedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarcustomnegativedatascatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarcustompositivedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarcustompositivedatascatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarfixedvalue = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_tschchartserieserrorbarfixedvalue(&_has_bits_);
          tschchartserieserrorbarfixedvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarfixedvaluescatterx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_tschchartserieserrorbarfixedvaluescatterx(&_has_bits_);
          tschchartserieserrorbarfixedvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarlineend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarlineendscatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarpercentvalue = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_tschchartserieserrorbarpercentvalue(&_has_bits_);
          tschchartserieserrorbarpercentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarpercentvaluescatterx = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_tschchartserieserrorbarpercentvaluescatterx(&_has_bits_);
          tschchartserieserrorbarpercentvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbarsetting = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartserieserrorbarsetting(&_has_bits_);
          tschchartserieserrorbarsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbarsettingscatterx = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartserieserrorbarsettingscatterx(&_has_bits_);
          tschchartserieserrorbarsettingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbarspacing = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartserieserrorbarspacing(&_has_bits_);
          tschchartserieserrorbarspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbarspacingscatterx = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartserieserrorbarspacingscatterx(&_has_bits_);
          tschchartserieserrorbarspacingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarstddevvalue = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_tschchartserieserrorbarstddevvalue(&_has_bits_);
          tschchartserieserrorbarstddevvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarstddevvaluescatterx = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_tschchartserieserrorbarstddevvaluescatterx(&_has_bits_);
          tschchartserieserrorbarstddevvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarstrokescatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbartype = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartserieserrorbartype(&_has_bits_);
          tschchartserieserrorbartype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbartypescatterx = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartserieserrorbartypescatterx(&_has_bits_);
          tschchartserieserrorbartypescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesfill = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieslabelexplosion = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_tschchartserieslabelexplosion(&_has_bits_);
          tschchartserieslabelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslabelparagraphstyleindex = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartserieslabelparagraphstyleindex(&_has_bits_);
          tschchartserieslabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinetype = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschchartserieslinetype(&_has_bits_);
          tschchartserieslinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesnumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesnumberformattype = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartseriesnumberformattype(&_has_bits_);
          tschchartseriesnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesopacity = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_tschchartseriesopacity(&_has_bits_);
          tschchartseriesopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartseriesoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespercentnumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesseriestype = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschchartseriesseriestype(&_has_bits_);
          tschchartseriesseriestype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesshadow = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowerrorbar = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartseriesshowerrorbar(&_has_bits_);
          tschchartseriesshowerrorbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowerrorbarscatterx = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tschchartseriesshowerrorbarscatterx(&_has_bits_);
          tschchartseriesshowerrorbarscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowlabelsinfront = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartseriesshowlabelsinfront(&_has_bits_);
          tschchartseriesshowlabelsinfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowline = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartseriesshowline(&_has_bits_);
          tschchartseriesshowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesshownegativedata = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartseriesshownegativedata(&_has_bits_);
          tschchartseriesshownegativedata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowserieslabels = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartseriesshowserieslabels(&_has_bits_);
          tschchartseriesshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowsymbol = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tschchartseriesshowsymbol(&_has_bits_);
          tschchartseriesshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowtrendline = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartseriesshowtrendline(&_has_bits_);
          tschchartseriesshowtrendline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowvaluelabels = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartseriesshowvaluelabels(&_has_bits_);
          tschchartseriesshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriessizedimension = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartseriessizedimension(&_has_bits_);
          tschchartseriessizedimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesstacklabels = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartseriesstacklabels(&_has_bits_);
          tschchartseriesstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesstroke = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriessymbolfill = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriessymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriessymbolfilluseseriesfill = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartseriessymbolfilluseseriesfill(&_has_bits_);
          tschchartseriessymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriessymbolfilluseseriesstroke = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartseriessymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriessymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriessymbolsize = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_tschchartseriessymbolsize(&_has_bits_);
          tschchartseriessymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriessymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriessymboltype = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriessymboltype(&_has_bits_);
          tschchartseriessymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlineequationoffsetx = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_tschchartseriestrendlineequationoffsetx(&_has_bits_);
          tschchartseriestrendlineequationoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlineequationoffsety = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_tschchartseriestrendlineequationoffsety(&_has_bits_);
          tschchartseriestrendlineequationoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string tschchartseriestrendlinelabelstring = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_tschchartseriestrendlinelabelstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinelabelstring");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlineorder = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartseriestrendlineorder(&_has_bits_);
          tschchartseriestrendlineorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlineperiod = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartseriestrendlineperiod(&_has_bits_);
          tschchartseriestrendlineperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlinersquaredoffsetx = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_tschchartseriestrendlinersquaredoffsetx(&_has_bits_);
          tschchartseriestrendlinersquaredoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlinersquaredoffsety = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tschchartseriestrendlinersquaredoffsety(&_has_bits_);
          tschchartseriestrendlinersquaredoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriestrendlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriestrendlineshowequation = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartseriestrendlineshowequation(&_has_bits_);
          tschchartseriestrendlineshowequation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriestrendlineshowlabel = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartseriestrendlineshowlabel(&_has_bits_);
          tschchartseriestrendlineshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriestrendlineshowr2value = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartseriestrendlineshowr2value(&_has_bits_);
          tschchartseriestrendlineshowr2value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriestrendlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlinetype = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschchartseriestrendlinetype(&_has_bits_);
          tschchartseriestrendlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlineequationopacity = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_tschchartseriestrendlineequationopacity(&_has_bits_);
          tschchartseriestrendlineequationopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartseriestrendlineequationparagraphstyleindex(&_has_bits_);
          tschchartseriestrendlineequationparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlinersquaredopacity = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_tschchartseriestrendlinersquaredopacity(&_has_bits_);
          tschchartseriestrendlinersquaredopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartseriestrendlinersquaredparagraphstyleindex(&_has_bits_);
          tschchartseriestrendlinersquaredparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesvaluelabelposition = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartseriesvaluelabelposition(&_has_bits_);
          tschchartseriesvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesvaluelabelspacing = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartseriesvaluelabelspacing(&_has_bits_);
          tschchartseriesvaluelabelspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesvaluelabelsaxis = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartseriesvaluelabelsaxis(&_has_bits_);
          tschchartseriesvaluelabelsaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieswedgeexplosion = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_tschchartserieswedgeexplosion(&_has_bits_);
          tschchartserieswedgeexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesyaxisordinal = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartseriesyaxisordinal(&_has_bits_);
          tschchartseriesyaxisordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSeriesGenericPropertyMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tschchartseries1_0dateformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tschchartseries1_0numberformat(this), target, stream);
  }

  // optional float tschchartseries2_3labelexplosion = 3;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tschchartseries2_3labelexplosion(), target);
  }

  // optional float tschchartseriesadjustmentscale = 4;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_tschchartseriesadjustmentscale(), target);
  }

  // optional .TSD.LineEndArchive tschchartseriescalloutlineendlineend = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tschchartseriescalloutlineendlineend(this), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriescalloutlinestartlineend = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tschchartseriescalloutlinestartlineend(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriescalloutlinestrokestyle = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tschchartseriescalloutlinestrokestyle(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdateformat = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tschchartseriesdateformat(this), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tschchartseriesdurationformat(this), target, stream);
  }

  // optional int32 tschchartseriesenablecalloutline = 10;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_tschchartseriesenablecalloutline(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tschchartserieserrorbarcustomnegativedata(this), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tschchartserieserrorbarcustomnegativedatascatterx(this), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tschchartserieserrorbarcustompositivedata(this), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::tschchartserieserrorbarcustompositivedatascatterx(this), target, stream);
  }

  // optional float tschchartserieserrorbarfixedvalue = 15;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_tschchartserieserrorbarfixedvalue(), target);
  }

  // optional float tschchartserieserrorbarfixedvaluescatterx = 16;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_tschchartserieserrorbarfixedvaluescatterx(), target);
  }

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::tschchartserieserrorbarlineend(this), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::tschchartserieserrorbarlineendscatterx(this), target, stream);
  }

  // optional float tschchartserieserrorbarpercentvalue = 19;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartserieserrorbarpercentvalue(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float tschchartserieserrorbarpercentvaluescatterx = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_tschchartserieserrorbarpercentvaluescatterx(), target);
  }

  // optional int32 tschchartserieserrorbarsetting = 21;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartserieserrorbarsetting(), target);
  }

  // optional int32 tschchartserieserrorbarsettingscatterx = 22;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_tschchartserieserrorbarsettingscatterx(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 23;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::tschchartserieserrorbarshadow(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartserieserrorbarspacing = 24;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_tschchartserieserrorbarspacing(), target);
  }

  // optional int32 tschchartserieserrorbarspacingscatterx = 25;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartserieserrorbarspacingscatterx(), target);
  }

  // optional float tschchartserieserrorbarstddevvalue = 26;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_tschchartserieserrorbarstddevvalue(), target);
  }

  // optional float tschchartserieserrorbarstddevvaluescatterx = 27;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_tschchartserieserrorbarstddevvaluescatterx(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 28;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::tschchartserieserrorbarstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 29;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::tschchartserieserrorbarstrokescatterx(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartserieserrorbartype = 30;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_tschchartserieserrorbartype(), target);
  }

  // optional int32 tschchartserieserrorbartypescatterx = 31;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_tschchartserieserrorbartypescatterx(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesfill = 32;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::tschchartseriesfill(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional float tschchartserieslabelexplosion = 33;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_tschchartserieslabelexplosion(), target);
  }

  // optional int32 tschchartserieslabelparagraphstyleindex = 34;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_tschchartserieslabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartserieslinetype = 35;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_tschchartserieslinetype(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 36;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::tschchartseriesnumberformat(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartseriesnumberformattype = 37;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_tschchartseriesnumberformattype(), target);
  }

  // optional float tschchartseriesopacity = 38;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_tschchartseriesopacity(), target);
  }

  // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 39;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_tschchartseriesoutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 40;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::tschchartseriespercentnumberformat(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartseriesseriestype = 41;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_tschchartseriesseriestype(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.ShadowArchive tschchartseriesshadow = 42;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::tschchartseriesshadow(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartseriesshowerrorbar = 43;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_tschchartseriesshowerrorbar(), target);
  }

  // optional bool tschchartseriesshowerrorbarscatterx = 44;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_tschchartseriesshowerrorbarscatterx(), target);
  }

  // optional bool tschchartseriesshowlabelsinfront = 45;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_tschchartseriesshowlabelsinfront(), target);
  }

  // optional bool tschchartseriesshowline = 46;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_tschchartseriesshowline(), target);
  }

  // optional bool tschchartseriesshownegativedata = 47;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_tschchartseriesshownegativedata(), target);
  }

  // optional bool tschchartseriesshowserieslabels = 48;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(48, this->_internal_tschchartseriesshowserieslabels(), target);
  }

  // optional bool tschchartseriesshowsymbol = 49;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(49, this->_internal_tschchartseriesshowsymbol(), target);
  }

  // optional bool tschchartseriesshowtrendline = 50;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_tschchartseriesshowtrendline(), target);
  }

  // optional bool tschchartseriesshowvaluelabels = 51;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_tschchartseriesshowvaluelabels(), target);
  }

  // optional int32 tschchartseriessizedimension = 52;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(52, this->_internal_tschchartseriessizedimension(), target);
  }

  // optional bool tschchartseriesstacklabels = 53;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(53, this->_internal_tschchartseriesstacklabels(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive tschchartseriesstroke = 54;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::tschchartseriesstroke(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriessymbolfill = 55;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::tschchartseriessymbolfill(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartseriessymbolfilluseseriesfill = 56;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_tschchartseriessymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriessymbolfilluseseriesstroke = 57;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_tschchartseriessymbolfilluseseriesstroke(), target);
  }

  // optional float tschchartseriessymbolsize = 58;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(58, this->_internal_tschchartseriessymbolsize(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 59;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        59, _Internal::tschchartseriessymbolstroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartseriessymboltype = 60;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_tschchartseriessymboltype(), target);
  }

  // optional float tschchartseriestrendlineequationoffsetx = 61;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(61, this->_internal_tschchartseriestrendlineequationoffsetx(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float tschchartseriestrendlineequationoffsety = 62;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(62, this->_internal_tschchartseriestrendlineequationoffsety(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string tschchartseriestrendlinelabelstring = 63;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartseriestrendlinelabelstring().data(), static_cast<int>(this->_internal_tschchartseriestrendlinelabelstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinelabelstring");
    target = stream->WriteStringMaybeAliased(
        63, this->_internal_tschchartseriestrendlinelabelstring(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriestrendlineorder = 64;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(64, this->_internal_tschchartseriestrendlineorder(), target);
  }

  // optional int32 tschchartseriestrendlineperiod = 65;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(65, this->_internal_tschchartseriestrendlineperiod(), target);
  }

  // optional float tschchartseriestrendlinersquaredoffsetx = 66;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(66, this->_internal_tschchartseriestrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriestrendlinersquaredoffsety = 67;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(67, this->_internal_tschchartseriestrendlinersquaredoffsety(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 68;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        68, _Internal::tschchartseriestrendlineshadow(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool tschchartseriestrendlineshowequation = 69;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(69, this->_internal_tschchartseriestrendlineshowequation(), target);
  }

  // optional bool tschchartseriestrendlineshowlabel = 70;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(70, this->_internal_tschchartseriestrendlineshowlabel(), target);
  }

  // optional bool tschchartseriestrendlineshowr2value = 71;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(71, this->_internal_tschchartseriestrendlineshowr2value(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 72;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        72, _Internal::tschchartseriestrendlinestroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriestrendlinetype = 73;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(73, this->_internal_tschchartseriestrendlinetype(), target);
  }

  // optional float tschchartseriestrendlineequationopacity = 74;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(74, this->_internal_tschchartseriestrendlineequationopacity(), target);
  }

  // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 75;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(75, this->_internal_tschchartseriestrendlineequationparagraphstyleindex(), target);
  }

  // optional float tschchartseriestrendlinersquaredopacity = 76;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(76, this->_internal_tschchartseriestrendlinersquaredopacity(), target);
  }

  // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 77;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(77, this->_internal_tschchartseriestrendlinersquaredparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesvaluelabelposition = 78;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(78, this->_internal_tschchartseriesvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesvaluelabelspacing = 79;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(79, this->_internal_tschchartseriesvaluelabelspacing(), target);
  }

  // optional int32 tschchartseriesvaluelabelsaxis = 80;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(80, this->_internal_tschchartseriesvaluelabelsaxis(), target);
  }

  // optional float tschchartserieswedgeexplosion = 81;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(81, this->_internal_tschchartserieswedgeexplosion(), target);
  }

  // optional int32 tschchartseriesyaxisordinal = 82;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(82, this->_internal_tschchartseriesyaxisordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  return target;
}

size_t ChartSeriesGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartseriestrendlinelabelstring = 63;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartseriestrendlinelabelstring());
    }

    // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries1_0dateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries1_0numberformat_);
    }

    // optional .TSD.LineEndArchive tschchartseriescalloutlineendlineend = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriescalloutlineendlineend_);
    }

    // optional .TSD.LineEndArchive tschchartseriescalloutlinestartlineend = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriescalloutlinestartlineend_);
    }

    // optional .TSD.StrokeArchive tschchartseriescalloutlinestrokestyle = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriescalloutlinestrokestyle_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdateformat = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdurationformat_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieserrorbarcustomnegativedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieserrorbarcustomnegativedatascatterx_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieserrorbarcustompositivedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieserrorbarcustompositivedatascatterx_);
    }

    // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieserrorbarlineend_);
    }

    // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieserrorbarlineendscatterx_);
    }

    // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieserrorbarshadow_);
    }

    // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 28;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieserrorbarstroke_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 29;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieserrorbarstrokescatterx_);
    }

    // optional .TSD.FillArchive tschchartseriesfill = 32;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesfill_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 36;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesnumberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 40;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespercentnumberformat_);
    }

    // optional .TSD.ShadowArchive tschchartseriesshadow = 42;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesstroke = 54;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesstroke_);
    }

    // optional .TSD.FillArchive tschchartseriessymbolfill = 55;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriessymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 59;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriessymbolstroke_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 68;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriestrendlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 72;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriestrendlinestroke_);
    }

    // optional float tschchartseries2_3labelexplosion = 3;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesadjustmentscale = 4;
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesenablecalloutline = 10;
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesenablecalloutline());
    }

    // optional float tschchartserieserrorbarfixedvalue = 15;
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartserieserrorbarfixedvaluescatterx = 16;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartserieserrorbarpercentvalue = 19;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float tschchartserieserrorbarpercentvaluescatterx = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartserieserrorbarsetting = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbarsetting());
    }

    // optional int32 tschchartserieserrorbarsettingscatterx = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbarsettingscatterx());
    }

    // optional int32 tschchartserieserrorbarspacing = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbarspacing());
    }

    // optional int32 tschchartserieserrorbarspacingscatterx = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbarspacingscatterx());
    }

    // optional float tschchartserieserrorbarstddevvalue = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float tschchartserieserrorbarstddevvaluescatterx = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartserieserrorbartype = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbartype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartserieserrorbartypescatterx = 31;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbartypescatterx());
    }

    // optional float tschchartserieslabelexplosion = 33;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartserieslabelparagraphstyleindex = 34;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslabelparagraphstyleindex());
    }

    // optional int32 tschchartserieslinetype = 35;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinetype());
    }

    // optional int32 tschchartseriesnumberformattype = 37;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesnumberformattype());
    }

    // optional float tschchartseriesopacity = 38;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 39;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesseriestype = 41;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesseriestype());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool tschchartseriesshowerrorbar = 43;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowerrorbarscatterx = 44;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowlabelsinfront = 45;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowline = 46;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshownegativedata = 47;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowserieslabels = 48;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowsymbol = 49;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowtrendline = 50;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriessizedimension = 52;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriessizedimension());
    }

    // optional bool tschchartseriesshowvaluelabels = 51;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesstacklabels = 53;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriessymbolfilluseseriesfill = 56;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriessymbolfilluseseriesstroke = 57;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriessymbolsize = 58;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriessymboltype = 60;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriessymboltype());
    }

    // optional float tschchartseriestrendlineequationoffsetx = 61;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional float tschchartseriestrendlineequationoffsety = 62;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriestrendlineorder = 64;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlineorder());
    }

    // optional int32 tschchartseriestrendlineperiod = 65;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlineperiod());
    }

    // optional float tschchartseriestrendlinersquaredoffsetx = 66;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriestrendlinersquaredoffsety = 67;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriestrendlineshowequation = 69;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriestrendlineshowlabel = 70;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriestrendlineshowr2value = 71;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartseriestrendlinetype = 73;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlinetype());
    }

    // optional float tschchartseriestrendlineequationopacity = 74;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 75;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlineequationparagraphstyleindex());
    }

    // optional float tschchartseriestrendlinersquaredopacity = 76;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 77;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlinersquaredparagraphstyleindex());
    }

    // optional int32 tschchartseriesvaluelabelposition = 78;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesvaluelabelposition());
    }

    // optional int32 tschchartseriesvaluelabelspacing = 79;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesvaluelabelspacing());
    }

    // optional int32 tschchartseriesvaluelabelsaxis = 80;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesvaluelabelsaxis());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional float tschchartserieswedgeexplosion = 81;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesyaxisordinal = 82;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesyaxisordinal());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartSeriesGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }

void ChartSeriesGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartSeriesGenericPropertyMapArchive *>(to)->MergeFrom(
      static_cast<const ChartSeriesGenericPropertyMapArchive &>(from));
}


void ChartSeriesGenericPropertyMapArchive::MergeFrom(const ChartSeriesGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartseriestrendlinelabelstring(from._internal_tschchartseriestrendlinelabelstring());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartseries1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseries1_0dateformat());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartseries1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseries1_0numberformat());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartseriescalloutlineendlineend()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartseriescalloutlineendlineend());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartseriescalloutlinestartlineend()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartseriescalloutlinestartlineend());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartseriescalloutlinestrokestyle()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriescalloutlinestrokestyle());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartseriesdateformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriesdateformat());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartseriesdurationformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriesdurationformat());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartserieserrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartserieserrorbarcustomnegativedata());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartserieserrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartserieserrorbarcustomnegativedatascatterx());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartserieserrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartserieserrorbarcustompositivedata());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartserieserrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartserieserrorbarcustompositivedatascatterx());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tschchartserieserrorbarlineend()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartserieserrorbarlineend());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_tschchartserieserrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartserieserrorbarlineendscatterx());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_tschchartserieserrorbarshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartserieserrorbarshadow());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_tschchartserieserrorbarstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartserieserrorbarstroke());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_tschchartserieserrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartserieserrorbarstrokescatterx());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_tschchartseriesfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesfill());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_tschchartseriesnumberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriesnumberformat());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_tschchartseriespercentnumberformat()->::TSK::FormatStructArchive::MergeFrom(from._internal_tschchartseriespercentnumberformat());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_tschchartseriesshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesshadow());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_tschchartseriesstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesstroke());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_tschchartseriessymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriessymbolfill());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_tschchartseriessymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriessymbolstroke());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_tschchartseriestrendlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriestrendlineshadow());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_tschchartseriestrendlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriestrendlinestroke());
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartseries2_3labelexplosion_ = from.tschchartseries2_3labelexplosion_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriesadjustmentscale_ = from.tschchartseriesadjustmentscale_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriesenablecalloutline_ = from.tschchartseriesenablecalloutline_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartserieserrorbarfixedvalue_ = from.tschchartserieserrorbarfixedvalue_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartserieserrorbarfixedvaluescatterx_ = from.tschchartserieserrorbarfixedvaluescatterx_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartserieserrorbarpercentvalue_ = from.tschchartserieserrorbarpercentvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartserieserrorbarpercentvaluescatterx_ = from.tschchartserieserrorbarpercentvaluescatterx_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartserieserrorbarsetting_ = from.tschchartserieserrorbarsetting_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartserieserrorbarsettingscatterx_ = from.tschchartserieserrorbarsettingscatterx_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartserieserrorbarspacing_ = from.tschchartserieserrorbarspacing_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartserieserrorbarspacingscatterx_ = from.tschchartserieserrorbarspacingscatterx_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartserieserrorbarstddevvalue_ = from.tschchartserieserrorbarstddevvalue_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartserieserrorbarstddevvaluescatterx_ = from.tschchartserieserrorbarstddevvaluescatterx_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartserieserrorbartype_ = from.tschchartserieserrorbartype_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tschchartserieserrorbartypescatterx_ = from.tschchartserieserrorbartypescatterx_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartserieslabelexplosion_ = from.tschchartserieslabelexplosion_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartserieslabelparagraphstyleindex_ = from.tschchartserieslabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartserieslinetype_ = from.tschchartserieslinetype_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartseriesnumberformattype_ = from.tschchartseriesnumberformattype_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartseriesopacity_ = from.tschchartseriesopacity_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartseriesoutsidelabelparagraphstyleindex_ = from.tschchartseriesoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartseriesseriestype_ = from.tschchartseriesseriestype_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartseriesshowerrorbar_ = from.tschchartseriesshowerrorbar_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartseriesshowerrorbarscatterx_ = from.tschchartseriesshowerrorbarscatterx_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartseriesshowlabelsinfront_ = from.tschchartseriesshowlabelsinfront_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartseriesshowline_ = from.tschchartseriesshowline_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartseriesshownegativedata_ = from.tschchartseriesshownegativedata_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartseriesshowserieslabels_ = from.tschchartseriesshowserieslabels_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartseriesshowsymbol_ = from.tschchartseriesshowsymbol_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartseriesshowtrendline_ = from.tschchartseriesshowtrendline_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartseriessizedimension_ = from.tschchartseriessizedimension_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartseriesshowvaluelabels_ = from.tschchartseriesshowvaluelabels_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartseriesstacklabels_ = from.tschchartseriesstacklabels_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriessymbolfilluseseriesfill_ = from.tschchartseriessymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriessymbolfilluseseriesstroke_ = from.tschchartseriessymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartseriessymbolsize_ = from.tschchartseriessymbolsize_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartseriessymboltype_ = from.tschchartseriessymboltype_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartseriestrendlineequationoffsetx_ = from.tschchartseriestrendlineequationoffsetx_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriestrendlineequationoffsety_ = from.tschchartseriestrendlineequationoffsety_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartseriestrendlineorder_ = from.tschchartseriestrendlineorder_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartseriestrendlineperiod_ = from.tschchartseriestrendlineperiod_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartseriestrendlinersquaredoffsetx_ = from.tschchartseriestrendlinersquaredoffsetx_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartseriestrendlinersquaredoffsety_ = from.tschchartseriestrendlinersquaredoffsety_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartseriestrendlineshowequation_ = from.tschchartseriestrendlineshowequation_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartseriestrendlineshowlabel_ = from.tschchartseriestrendlineshowlabel_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartseriestrendlineshowr2value_ = from.tschchartseriestrendlineshowr2value_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tschchartseriestrendlinetype_ = from.tschchartseriestrendlinetype_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartseriestrendlineequationopacity_ = from.tschchartseriestrendlineequationopacity_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartseriestrendlineequationparagraphstyleindex_ = from.tschchartseriestrendlineequationparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartseriestrendlinersquaredopacity_ = from.tschchartseriestrendlinersquaredopacity_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartseriestrendlinersquaredparagraphstyleindex_ = from.tschchartseriestrendlinersquaredparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartseriesvaluelabelposition_ = from.tschchartseriesvaluelabelposition_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartseriesvaluelabelspacing_ = from.tschchartseriesvaluelabelspacing_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartseriesvaluelabelsaxis_ = from.tschchartseriesvaluelabelsaxis_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartserieswedgeexplosion_ = from.tschchartserieswedgeexplosion_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartseriesyaxisordinal_ = from.tschchartseriesyaxisordinal_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesGenericPropertyMapArchive::CopyFrom(const ChartSeriesGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschchartseries1_0dateformat()) {
    if (!tschchartseries1_0dateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries1_0numberformat()) {
    if (!tschchartseries1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescalloutlineendlineend()) {
    if (!tschchartseriescalloutlineendlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescalloutlinestartlineend()) {
    if (!tschchartseriescalloutlinestartlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescalloutlinestrokestyle()) {
    if (!tschchartseriescalloutlinestrokestyle_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdateformat()) {
    if (!tschchartseriesdateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdurationformat()) {
    if (!tschchartseriesdurationformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarlineend()) {
    if (!tschchartserieserrorbarlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarlineendscatterx()) {
    if (!tschchartserieserrorbarlineendscatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarshadow()) {
    if (!tschchartserieserrorbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarstroke()) {
    if (!tschchartserieserrorbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarstrokescatterx()) {
    if (!tschchartserieserrorbarstrokescatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesfill()) {
    if (!tschchartseriesfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesnumberformat()) {
    if (!tschchartseriesnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespercentnumberformat()) {
    if (!tschchartseriespercentnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesshadow()) {
    if (!tschchartseriesshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesstroke()) {
    if (!tschchartseriesstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriessymbolfill()) {
    if (!tschchartseriessymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriessymbolstroke()) {
    if (!tschchartseriessymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriestrendlineshadow()) {
    if (!tschchartseriestrendlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriestrendlinestroke()) {
    if (!tschchartseriestrendlinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesGenericPropertyMapArchive::InternalSwap(ChartSeriesGenericPropertyMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tschchartseriestrendlinelabelstring_, GetArenaForAllocation(),
      &other->tschchartseriestrendlinelabelstring_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesyaxisordinal_)
      + sizeof(ChartSeriesGenericPropertyMapArchive::tschchartseriesyaxisordinal_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseries1_0dateformat_)>(
          reinterpret_cast<char*>(&tschchartseries1_0dateformat_),
          reinterpret_cast<char*>(&other->tschchartseries1_0dateformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesGenericPropertyMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[13]);
}

// ===================================================================

class ReferenceLineGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineGenericPropertyMapArchive>()._has_bits_);
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschreferencelinecustomvalue(const ReferenceLineGenericPropertyMapArchive* msg);
  static void set_has_tschreferencelinecustomvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschreferencelinelabel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschreferencelinelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschreferencelineshadow(const ReferenceLineGenericPropertyMapArchive* msg);
  static void set_has_tschreferencelineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschreferencelineshowlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschreferencelineshowline(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschreferencelineshowvaluelabel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschreferencelinestroke(const ReferenceLineGenericPropertyMapArchive* msg);
  static void set_has_tschreferencelinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschreferencelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschreferencelinevaluelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::TSCH::ChartsNSNumberDoubleArchive&
ReferenceLineGenericPropertyMapArchive::_Internal::tschreferencelinecustomvalue(const ReferenceLineGenericPropertyMapArchive* msg) {
  return *msg->tschreferencelinecustomvalue_;
}
const ::TSD::ShadowArchive&
ReferenceLineGenericPropertyMapArchive::_Internal::tschreferencelineshadow(const ReferenceLineGenericPropertyMapArchive* msg) {
  return *msg->tschreferencelineshadow_;
}
const ::TSD::StrokeArchive&
ReferenceLineGenericPropertyMapArchive::_Internal::tschreferencelinestroke(const ReferenceLineGenericPropertyMapArchive* msg) {
  return *msg->tschreferencelinestroke_;
}
void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelinecustomvalue() {
  if (tschreferencelinecustomvalue_ != nullptr) tschreferencelinecustomvalue_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelineshadow() {
  if (tschreferencelineshadow_ != nullptr) tschreferencelineshadow_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelinestroke() {
  if (tschreferencelinestroke_ != nullptr) tschreferencelinestroke_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ReferenceLineGenericPropertyMapArchive::ReferenceLineGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
}
ReferenceLineGenericPropertyMapArchive::ReferenceLineGenericPropertyMapArchive(const ReferenceLineGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschreferencelinelabel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschreferencelinelabel()) {
    tschreferencelinelabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschreferencelinelabel(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tschreferencelinecustomvalue()) {
    tschreferencelinecustomvalue_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from.tschreferencelinecustomvalue_);
  } else {
    tschreferencelinecustomvalue_ = nullptr;
  }
  if (from._internal_has_tschreferencelineshadow()) {
    tschreferencelineshadow_ = new ::TSD::ShadowArchive(*from.tschreferencelineshadow_);
  } else {
    tschreferencelineshadow_ = nullptr;
  }
  if (from._internal_has_tschreferencelinestroke()) {
    tschreferencelinestroke_ = new ::TSD::StrokeArchive(*from.tschreferencelinestroke_);
  } else {
    tschreferencelinestroke_ = nullptr;
  }
  ::memcpy(&tschreferencelinelabelparagraphstyleindex_, &from.tschreferencelinelabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschreferencelinevaluelabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&tschreferencelinelabelparagraphstyleindex_)) + sizeof(tschreferencelinevaluelabelparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
}

inline void ReferenceLineGenericPropertyMapArchive::SharedCtor() {
tschreferencelinelabel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tschreferencelinecustomvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschreferencelinevaluelabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&tschreferencelinecustomvalue_)) + sizeof(tschreferencelinevaluelabelparagraphstyleindex_));
}

ReferenceLineGenericPropertyMapArchive::~ReferenceLineGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReferenceLineGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tschreferencelinelabel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tschreferencelinecustomvalue_;
  if (this != internal_default_instance()) delete tschreferencelineshadow_;
  if (this != internal_default_instance()) delete tschreferencelinestroke_;
}

void ReferenceLineGenericPropertyMapArchive::ArenaDtor(void* object) {
  ReferenceLineGenericPropertyMapArchive* _this = reinterpret_cast< ReferenceLineGenericPropertyMapArchive* >(object);
  (void)_this;
}
void ReferenceLineGenericPropertyMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceLineGenericPropertyMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceLineGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tschreferencelinelabel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschreferencelinecustomvalue_ != nullptr);
      tschreferencelinecustomvalue_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschreferencelineshadow_ != nullptr);
      tschreferencelineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschreferencelinestroke_ != nullptr);
      tschreferencelinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&tschreferencelinelabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschreferencelineshowvaluelabel_) -
        reinterpret_cast<char*>(&tschreferencelinelabelparagraphstyleindex_)) + sizeof(tschreferencelineshowvaluelabel_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&tschreferencelinetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschreferencelinevaluelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschreferencelinetype_)) + sizeof(tschreferencelinevaluelabelparagraphstyleindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineGenericPropertyMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinecustomvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinecustomvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschreferencelinelabel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tschreferencelinelabel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschreferencelinelabelparagraphstyleindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschreferencelinelabelparagraphstyleindex(&has_bits);
          tschreferencelinelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschreferencelineshadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschreferencelineshowlabel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschreferencelineshowlabel(&has_bits);
          tschreferencelineshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschreferencelineshowline = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschreferencelineshowline(&has_bits);
          tschreferencelineshowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschreferencelineshowvaluelabel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschreferencelineshowvaluelabel(&has_bits);
          tschreferencelineshowvaluelabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschreferencelinestroke = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschreferencelinetype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschreferencelinetype(&has_bits);
          tschreferencelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschreferencelinevaluelabelparagraphstyleindex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschreferencelinevaluelabelparagraphstyleindex(&has_bits);
          tschreferencelinevaluelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceLineGenericPropertyMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinecustomvalue = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tschreferencelinecustomvalue(this), target, stream);
  }

  // optional string tschreferencelinelabel = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschreferencelinelabel().data(), static_cast<int>(this->_internal_tschreferencelinelabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tschreferencelinelabel(), target);
  }

  // optional int32 tschreferencelinelabelparagraphstyleindex = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tschreferencelinelabelparagraphstyleindex(), target);
  }

  // optional .TSD.ShadowArchive tschreferencelineshadow = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tschreferencelineshadow(this), target, stream);
  }

  // optional bool tschreferencelineshowlabel = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_tschreferencelineshowlabel(), target);
  }

  // optional bool tschreferencelineshowline = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_tschreferencelineshowline(), target);
  }

  // optional bool tschreferencelineshowvaluelabel = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_tschreferencelineshowvaluelabel(), target);
  }

  // optional .TSD.StrokeArchive tschreferencelinestroke = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tschreferencelinestroke(this), target, stream);
  }

  // optional int32 tschreferencelinetype = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_tschreferencelinetype(), target);
  }

  // optional int32 tschreferencelinevaluelabelparagraphstyleindex = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_tschreferencelinevaluelabelparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  return target;
}

size_t ReferenceLineGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschreferencelinelabel = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschreferencelinelabel());
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinecustomvalue = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschreferencelinecustomvalue_);
    }

    // optional .TSD.ShadowArchive tschreferencelineshadow = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschreferencelineshadow_);
    }

    // optional .TSD.StrokeArchive tschreferencelinestroke = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschreferencelinestroke_);
    }

    // optional int32 tschreferencelinelabelparagraphstyleindex = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschreferencelinelabelparagraphstyleindex());
    }

    // optional bool tschreferencelineshowlabel = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool tschreferencelineshowline = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool tschreferencelineshowvaluelabel = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 tschreferencelinetype = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschreferencelinetype());
    }

    // optional int32 tschreferencelinevaluelabelparagraphstyleindex = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschreferencelinevaluelabelparagraphstyleindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReferenceLineGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }

void ReferenceLineGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReferenceLineGenericPropertyMapArchive *>(to)->MergeFrom(
      static_cast<const ReferenceLineGenericPropertyMapArchive &>(from));
}


void ReferenceLineGenericPropertyMapArchive::MergeFrom(const ReferenceLineGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschreferencelinelabel(from._internal_tschreferencelinelabel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschreferencelinecustomvalue()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from._internal_tschreferencelinecustomvalue());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschreferencelineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschreferencelineshadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschreferencelinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschreferencelinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      tschreferencelinelabelparagraphstyleindex_ = from.tschreferencelinelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschreferencelineshowlabel_ = from.tschreferencelineshowlabel_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschreferencelineshowline_ = from.tschreferencelineshowline_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschreferencelineshowvaluelabel_ = from.tschreferencelineshowvaluelabel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      tschreferencelinetype_ = from.tschreferencelinetype_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschreferencelinevaluelabelparagraphstyleindex_ = from.tschreferencelinevaluelabelparagraphstyleindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineGenericPropertyMapArchive::CopyFrom(const ReferenceLineGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschreferencelineshadow()) {
    if (!tschreferencelineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschreferencelinestroke()) {
    if (!tschreferencelinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceLineGenericPropertyMapArchive::InternalSwap(ReferenceLineGenericPropertyMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tschreferencelinelabel_, GetArenaForAllocation(),
      &other->tschreferencelinelabel_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLineGenericPropertyMapArchive, tschreferencelinevaluelabelparagraphstyleindex_)
      + sizeof(ReferenceLineGenericPropertyMapArchive::tschreferencelinevaluelabelparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLineGenericPropertyMapArchive, tschreferencelinecustomvalue_)>(
          reinterpret_cast<char*>(&tschreferencelinecustomvalue_),
          reinterpret_cast<char*>(&other->tschreferencelinecustomvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineGenericPropertyMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[14]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartStyleArchive >, 11, false >
  ChartStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartStyleArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartNonStyleArchive >, 11, false >
  ChartNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartNonStyleArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegendStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendStyleArchive >, 11, false >
  LegendStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::LegendStyleArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegendNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendNonStyleArchive >, 11, false >
  LegendNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::LegendNonStyleArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartAxisStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisStyleArchive >, 11, false >
  ChartAxisStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartAxisStyleArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartAxisNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisNonStyleArchive >, 11, false >
  ChartAxisNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartAxisNonStyleArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartSeriesStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesStyleArchive >, 11, false >
  ChartSeriesStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartSeriesStyleArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartSeriesNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesNonStyleArchive >, 11, false >
  ChartSeriesNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartSeriesNonStyleArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ReferenceLineStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ReferenceLineStyleArchive >, 11, false >
  ReferenceLineStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ReferenceLineStyleArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ReferenceLineNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ReferenceLineNonStyleArchive >, 11, false >
  ReferenceLineNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ReferenceLineNonStyleArchive::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace Generated
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ChartStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartNonStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ChartNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::LegendStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::LegendStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::LegendStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::LegendNonStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::LegendNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::LegendNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartAxisStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ChartAxisStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartAxisStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartAxisNonStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ChartAxisNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartAxisNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartSeriesStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ChartSeriesStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartSeriesStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartSeriesNonStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ChartSeriesNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartSeriesNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ReferenceLineStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ReferenceLineStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ReferenceLineStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ReferenceLineNonStyleArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ReferenceLineNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ReferenceLineNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartGenericPropertyMapArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ChartGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartGenericPropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::LegendGenericPropertyMapArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::LegendGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::LegendGenericPropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ChartAxisGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartAxisGenericPropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* Arena::CreateMaybeMessage< ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
