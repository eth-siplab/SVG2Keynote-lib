// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSDArchives.sos.proto

#include "TSDArchives.sos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSDSOS {
constexpr SpecSetFillArchive::SpecSetFillArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fill_(nullptr)
  , unset_(false){}
struct SpecSetFillArchiveDefaultTypeInternal {
  constexpr SpecSetFillArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetFillArchiveDefaultTypeInternal() {}
  union {
    SpecSetFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetFillArchiveDefaultTypeInternal _SpecSetFillArchive_default_instance_;
constexpr SpecSetLineEndArchive::SpecSetLineEndArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_end_(nullptr)
  , unset_(false){}
struct SpecSetLineEndArchiveDefaultTypeInternal {
  constexpr SpecSetLineEndArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetLineEndArchiveDefaultTypeInternal() {}
  union {
    SpecSetLineEndArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetLineEndArchiveDefaultTypeInternal _SpecSetLineEndArchive_default_instance_;
constexpr SpecSetReflectionArchive::SpecSetReflectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reflection_(nullptr)
  , unset_(false){}
struct SpecSetReflectionArchiveDefaultTypeInternal {
  constexpr SpecSetReflectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetReflectionArchiveDefaultTypeInternal() {}
  union {
    SpecSetReflectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetReflectionArchiveDefaultTypeInternal _SpecSetReflectionArchive_default_instance_;
constexpr SpecSetShadowArchive::SpecSetShadowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shadow_(nullptr)
  , unset_(false){}
struct SpecSetShadowArchiveDefaultTypeInternal {
  constexpr SpecSetShadowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetShadowArchiveDefaultTypeInternal() {}
  union {
    SpecSetShadowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetShadowArchiveDefaultTypeInternal _SpecSetShadowArchive_default_instance_;
constexpr SpecSetStrokeArchive::SpecSetStrokeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stroke_(nullptr)
  , unset_(false){}
struct SpecSetStrokeArchiveDefaultTypeInternal {
  constexpr SpecSetStrokeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetStrokeArchiveDefaultTypeInternal() {}
  union {
    SpecSetStrokeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetStrokeArchiveDefaultTypeInternal _SpecSetStrokeArchive_default_instance_;
constexpr SpecFillArchive::SpecFillArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_color_fill_set_color_(nullptr)
  , spec_gradient_fill_set_angle_(nullptr)
  , spec_image_fill_set_technique_(nullptr)
  , spec_set_fill_(nullptr){}
struct SpecFillArchiveDefaultTypeInternal {
  constexpr SpecFillArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecFillArchiveDefaultTypeInternal() {}
  union {
    SpecFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecFillArchiveDefaultTypeInternal _SpecFillArchive_default_instance_;
constexpr SpecLineEndArchive::SpecLineEndArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_set_line_end_(nullptr){}
struct SpecLineEndArchiveDefaultTypeInternal {
  constexpr SpecLineEndArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecLineEndArchiveDefaultTypeInternal() {}
  union {
    SpecLineEndArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecLineEndArchiveDefaultTypeInternal _SpecLineEndArchive_default_instance_;
constexpr SpecReflectionArchive::SpecReflectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_reflection_set_opacity_(nullptr)
  , spec_set_reflection_(nullptr){}
struct SpecReflectionArchiveDefaultTypeInternal {
  constexpr SpecReflectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecReflectionArchiveDefaultTypeInternal() {}
  union {
    SpecReflectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecReflectionArchiveDefaultTypeInternal _SpecReflectionArchive_default_instance_;
constexpr SpecShadowArchive::SpecShadowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_set_shadow_(nullptr)
  , spec_shadow_set_angle_(nullptr)
  , spec_shadow_set_color_(nullptr)
  , spec_shadow_set_offset_(nullptr)
  , spec_shadow_set_opacity_(nullptr)
  , spec_shadow_set_radius_(nullptr){}
struct SpecShadowArchiveDefaultTypeInternal {
  constexpr SpecShadowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecShadowArchiveDefaultTypeInternal() {}
  union {
    SpecShadowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecShadowArchiveDefaultTypeInternal _SpecShadowArchive_default_instance_;
constexpr SpecStrokeArchive::SpecStrokeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_frame_set_asset_scale_(nullptr)
  , spec_set_stroke_(nullptr)
  , spec_stroke_set_color_(nullptr)
  , spec_stroke_set_pattern_(nullptr)
  , spec_stroke_set_width_(nullptr){}
struct SpecStrokeArchiveDefaultTypeInternal {
  constexpr SpecStrokeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecStrokeArchiveDefaultTypeInternal() {}
  union {
    SpecStrokeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecStrokeArchiveDefaultTypeInternal _SpecStrokeArchive_default_instance_;
constexpr BaseShapeStylePropertyChangeSetArchive::BaseShapeStylePropertyChangeSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fill_(nullptr)
  , stroke_(nullptr)
  , opacity_(nullptr)
  , shadow_(nullptr)
  , reflection_(nullptr)
  , head_line_end_(nullptr)
  , tail_line_end_(nullptr)
  , fill_undefined_(false)
  , stroke_undefined_(false)
  , opacity_undefined_(false)
  , shadow_undefined_(false)
  , reflection_undefined_(false)
  , head_line_end_undefined_(false)
  , tail_line_end_undefined_(false){}
struct BaseShapeStylePropertyChangeSetArchiveDefaultTypeInternal {
  constexpr BaseShapeStylePropertyChangeSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseShapeStylePropertyChangeSetArchiveDefaultTypeInternal() {}
  union {
    BaseShapeStylePropertyChangeSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseShapeStylePropertyChangeSetArchiveDefaultTypeInternal _BaseShapeStylePropertyChangeSetArchive_default_instance_;
constexpr MediaStylePropertyChangeSetArchive::MediaStylePropertyChangeSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stroke_(nullptr)
  , opacity_(nullptr)
  , shadow_(nullptr)
  , reflection_(nullptr)
  , stroke_undefined_(false)
  , opacity_undefined_(false)
  , shadow_undefined_(false)
  , reflection_undefined_(false){}
struct MediaStylePropertyChangeSetArchiveDefaultTypeInternal {
  constexpr MediaStylePropertyChangeSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaStylePropertyChangeSetArchiveDefaultTypeInternal() {}
  union {
    MediaStylePropertyChangeSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaStylePropertyChangeSetArchiveDefaultTypeInternal _MediaStylePropertyChangeSetArchive_default_instance_;
}  // namespace TSDSOS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSDArchives_2esos_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TSDArchives_2esos_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSDArchives_2esos_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSDArchives_2esos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetFillArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetFillArchive, fill_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetFillArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetLineEndArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetLineEndArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetLineEndArchive, line_end_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetLineEndArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetReflectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetReflectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetReflectionArchive, reflection_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetReflectionArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetShadowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetShadowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetShadowArchive, shadow_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetShadowArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetStrokeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetStrokeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetStrokeArchive, stroke_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecSetStrokeArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, spec_color_fill_set_color_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, spec_gradient_fill_set_angle_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, spec_image_fill_set_technique_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecFillArchive, spec_set_fill_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecLineEndArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecLineEndArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecLineEndArchive, spec_set_line_end_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecReflectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecReflectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecReflectionArchive, spec_reflection_set_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecReflectionArchive, spec_set_reflection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, spec_set_shadow_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, spec_shadow_set_angle_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, spec_shadow_set_color_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, spec_shadow_set_offset_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, spec_shadow_set_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecShadowArchive, spec_shadow_set_radius_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, spec_frame_set_asset_scale_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, spec_set_stroke_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, spec_stroke_set_color_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, spec_stroke_set_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::SpecStrokeArchive, spec_stroke_set_width_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, fill_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, fill_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, stroke_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, stroke_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, opacity_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, opacity_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, shadow_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, shadow_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, reflection_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, reflection_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, head_line_end_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, head_line_end_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, tail_line_end_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::BaseShapeStylePropertyChangeSetArchive, tail_line_end_undefined_),
  0,
  7,
  1,
  8,
  2,
  9,
  3,
  10,
  4,
  11,
  5,
  12,
  6,
  13,
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, stroke_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, stroke_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, opacity_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, opacity_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, shadow_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, shadow_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, reflection_),
  PROTOBUF_FIELD_OFFSET(::TSDSOS::MediaStylePropertyChangeSetArchive, reflection_undefined_),
  0,
  4,
  1,
  5,
  2,
  6,
  3,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TSDSOS::SpecSetFillArchive)},
  { 9, 16, sizeof(::TSDSOS::SpecSetLineEndArchive)},
  { 18, 25, sizeof(::TSDSOS::SpecSetReflectionArchive)},
  { 27, 34, sizeof(::TSDSOS::SpecSetShadowArchive)},
  { 36, 43, sizeof(::TSDSOS::SpecSetStrokeArchive)},
  { 45, 54, sizeof(::TSDSOS::SpecFillArchive)},
  { 58, 64, sizeof(::TSDSOS::SpecLineEndArchive)},
  { 65, 72, sizeof(::TSDSOS::SpecReflectionArchive)},
  { 74, 85, sizeof(::TSDSOS::SpecShadowArchive)},
  { 91, 101, sizeof(::TSDSOS::SpecStrokeArchive)},
  { 106, 125, sizeof(::TSDSOS::BaseShapeStylePropertyChangeSetArchive)},
  { 139, 152, sizeof(::TSDSOS::MediaStylePropertyChangeSetArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecSetFillArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecSetLineEndArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecSetReflectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecSetShadowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecSetStrokeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecFillArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecLineEndArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecReflectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecShadowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_SpecStrokeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_BaseShapeStylePropertyChangeSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSDSOS::_MediaStylePropertyChangeSetArchive_default_instance_),
};

const char descriptor_table_protodef_TSDArchives_2esos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025TSDArchives.sos.proto\022\006TSDSOS\032\021TSDArch"
  "ives.proto\032\025TSSArchives.sos.proto\"C\n\022Spe"
  "cSetFillArchive\022\036\n\004fill\030\001 \001(\0132\020.TSD.Fill"
  "Archive\022\r\n\005unset\030\002 \002(\010\"M\n\025SpecSetLineEnd"
  "Archive\022%\n\010line_end\030\001 \001(\0132\023.TSD.LineEndA"
  "rchive\022\r\n\005unset\030\002 \002(\010\"U\n\030SpecSetReflecti"
  "onArchive\022*\n\nreflection\030\001 \001(\0132\026.TSD.Refl"
  "ectionArchive\022\r\n\005unset\030\002 \002(\010\"I\n\024SpecSetS"
  "hadowArchive\022\"\n\006shadow\030\001 \001(\0132\022.TSD.Shado"
  "wArchive\022\r\n\005unset\030\002 \002(\010\"I\n\024SpecSetStroke"
  "Archive\022\"\n\006stroke\030\001 \001(\0132\022.TSD.StrokeArch"
  "ive\022\r\n\005unset\030\002 \002(\010\"\244\002\n\017SpecFillArchive\022D"
  "\n\031spec_color_fill_set_color\030\001 \001(\0132!.TSD."
  "SpecColorFillSetColorArchive\022J\n\034spec_gra"
  "dient_fill_set_angle\030\002 \001(\0132$.TSD.SpecGra"
  "dientFillSetAngleArchive\022L\n\035spec_image_f"
  "ill_set_technique\030\003 \001(\0132%.TSD.SpecImageF"
  "illSetTechniqueArchive\0221\n\rspec_set_fill\030"
  "\004 \001(\0132\032.TSDSOS.SpecSetFillArchive\"N\n\022Spe"
  "cLineEndArchive\0228\n\021spec_set_line_end\030\001 \001"
  "(\0132\035.TSDSOS.SpecSetLineEndArchive\"\241\001\n\025Sp"
  "ecReflectionArchive\022I\n\033spec_reflection_s"
  "et_opacity\030\001 \001(\0132$.TSD.SpecReflectionSet"
  "OpacityArchive\022=\n\023spec_set_reflection\030\002 "
  "\001(\0132 .TSDSOS.SpecSetReflectionArchive\"\215\003"
  "\n\021SpecShadowArchive\0225\n\017spec_set_shadow\030\001"
  " \001(\0132\034.TSDSOS.SpecSetShadowArchive\022=\n\025sp"
  "ec_shadow_set_angle\030\002 \001(\0132\036.TSD.SpecShad"
  "owSetAngleArchive\022=\n\025spec_shadow_set_col"
  "or\030\003 \001(\0132\036.TSD.SpecShadowSetColorArchive"
  "\022\?\n\026spec_shadow_set_offset\030\004 \001(\0132\037.TSD.S"
  "pecShadowSetOffsetArchive\022A\n\027spec_shadow"
  "_set_opacity\030\005 \001(\0132 .TSD.SpecShadowSetOp"
  "acityArchive\022\?\n\026spec_shadow_set_radius\030\006"
  " \001(\0132\037.TSD.SpecShadowSetRadiusArchive\"\323\002"
  "\n\021SpecStrokeArchive\022F\n\032spec_frame_set_as"
  "set_scale\030\001 \001(\0132\".TSD.SpecFrameSetAssetS"
  "caleArchive\0225\n\017spec_set_stroke\030\002 \001(\0132\034.T"
  "SDSOS.SpecSetStrokeArchive\022=\n\025spec_strok"
  "e_set_color\030\003 \001(\0132\036.TSD.SpecStrokeSetCol"
  "orArchive\022A\n\027spec_stroke_set_pattern\030\004 \001"
  "(\0132 .TSD.SpecStrokeSetPatternArchive\022=\n\025"
  "spec_stroke_set_width\030\005 \001(\0132\036.TSD.SpecSt"
  "rokeSetWidthArchive\"\261\004\n&BaseShapeStylePr"
  "opertyChangeSetArchive\022%\n\004fill\030\001 \001(\0132\027.T"
  "SDSOS.SpecFillArchive\022\026\n\016fill_undefined\030"
  "\002 \001(\010\022)\n\006stroke\030\003 \001(\0132\031.TSDSOS.SpecStrok"
  "eArchive\022\030\n\020stroke_undefined\030\004 \001(\010\022*\n\007op"
  "acity\030\005 \001(\0132\031.TSSSOS.SpecDoubleArchive\022\031"
  "\n\021opacity_undefined\030\006 \001(\010\022)\n\006shadow\030\007 \001("
  "\0132\031.TSDSOS.SpecShadowArchive\022\030\n\020shadow_u"
  "ndefined\030\010 \001(\010\0221\n\nreflection\030\t \001(\0132\035.TSD"
  "SOS.SpecReflectionArchive\022\034\n\024reflection_"
  "undefined\030\n \001(\010\0221\n\rhead_line_end\030\013 \001(\0132\032"
  ".TSDSOS.SpecLineEndArchive\022\037\n\027head_line_"
  "end_undefined\030\014 \001(\010\0221\n\rtail_line_end\030\r \001"
  "(\0132\032.TSDSOS.SpecLineEndArchive\022\037\n\027tail_l"
  "ine_end_undefined\030\016 \001(\010\"\306\002\n\"MediaStylePr"
  "opertyChangeSetArchive\022)\n\006stroke\030\001 \001(\0132\031"
  ".TSDSOS.SpecStrokeArchive\022\030\n\020stroke_unde"
  "fined\030\002 \001(\010\022*\n\007opacity\030\003 \001(\0132\031.TSSSOS.Sp"
  "ecDoubleArchive\022\031\n\021opacity_undefined\030\004 \001"
  "(\010\022)\n\006shadow\030\005 \001(\0132\031.TSDSOS.SpecShadowAr"
  "chive\022\030\n\020shadow_undefined\030\006 \001(\010\0221\n\nrefle"
  "ction\030\007 \001(\0132\035.TSDSOS.SpecReflectionArchi"
  "ve\022\034\n\024reflection_undefined\030\010 \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSDArchives_2esos_2eproto_deps[2] = {
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSSArchives_2esos_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSDArchives_2esos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSDArchives_2esos_2eproto = {
  false, false, 2632, descriptor_table_protodef_TSDArchives_2esos_2eproto, "TSDArchives.sos.proto", 
  &descriptor_table_TSDArchives_2esos_2eproto_once, descriptor_table_TSDArchives_2esos_2eproto_deps, 2, 12,
  schemas, file_default_instances, TableStruct_TSDArchives_2esos_2eproto::offsets,
  file_level_metadata_TSDArchives_2esos_2eproto, file_level_enum_descriptors_TSDArchives_2esos_2eproto, file_level_service_descriptors_TSDArchives_2esos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSDArchives_2esos_2eproto_getter() {
  return &descriptor_table_TSDArchives_2esos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSDArchives_2esos_2eproto(&descriptor_table_TSDArchives_2esos_2eproto);
namespace TSDSOS {

// ===================================================================

class SpecSetFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetFillArchive>()._has_bits_);
  static const ::TSD::FillArchive& fill(const SpecSetFillArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::FillArchive&
SpecSetFillArchive::_Internal::fill(const SpecSetFillArchive* msg) {
  return *msg->fill_;
}
void SpecSetFillArchive::clear_fill() {
  if (fill_ != nullptr) fill_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecSetFillArchive::SpecSetFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetFillArchive)
}
SpecSetFillArchive::SpecSetFillArchive(const SpecSetFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    fill_ = new ::TSD::FillArchive(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  unset_ = from.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetFillArchive)
}

void SpecSetFillArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&fill_)) + sizeof(unset_));
}

SpecSetFillArchive::~SpecSetFillArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetFillArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecSetFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fill_;
}

void SpecSetFillArchive::ArenaDtor(void* object) {
  SpecSetFillArchive* _this = reinterpret_cast< SpecSetFillArchive* >(object);
  (void)_this;
}
void SpecSetFillArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetFillArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fill_ != nullptr);
    fill_->Clear();
  }
  unset_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetFillArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetFillArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fill(this), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetFillArchive)
  return target;
}

size_t SpecSetFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetFillArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.FillArchive fill = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecSetFillArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecSetFillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecSetFillArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecSetFillArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecSetFillArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecSetFillArchive)
    MergeFrom(*source);
  }
}

void SpecSetFillArchive::MergeFrom(const SpecSetFillArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetFillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fill()->::TSD::FillArchive::MergeFrom(from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecSetFillArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecSetFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecSetFillArchive::CopyFrom(const SpecSetFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetFillArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_fill()) {
    if (!fill_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetFillArchive::InternalSwap(SpecSetFillArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetFillArchive, unset_)
      + sizeof(SpecSetFillArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetFillArchive, fill_)>(
          reinterpret_cast<char*>(&fill_),
          reinterpret_cast<char*>(&other->fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetFillArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[0]);
}

// ===================================================================

class SpecSetLineEndArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetLineEndArchive>()._has_bits_);
  static const ::TSD::LineEndArchive& line_end(const SpecSetLineEndArchive* msg);
  static void set_has_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::LineEndArchive&
SpecSetLineEndArchive::_Internal::line_end(const SpecSetLineEndArchive* msg) {
  return *msg->line_end_;
}
void SpecSetLineEndArchive::clear_line_end() {
  if (line_end_ != nullptr) line_end_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecSetLineEndArchive::SpecSetLineEndArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetLineEndArchive)
}
SpecSetLineEndArchive::SpecSetLineEndArchive(const SpecSetLineEndArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_line_end()) {
    line_end_ = new ::TSD::LineEndArchive(*from.line_end_);
  } else {
    line_end_ = nullptr;
  }
  unset_ = from.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetLineEndArchive)
}

void SpecSetLineEndArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_end_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&line_end_)) + sizeof(unset_));
}

SpecSetLineEndArchive::~SpecSetLineEndArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetLineEndArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecSetLineEndArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete line_end_;
}

void SpecSetLineEndArchive::ArenaDtor(void* object) {
  SpecSetLineEndArchive* _this = reinterpret_cast< SpecSetLineEndArchive* >(object);
  (void)_this;
}
void SpecSetLineEndArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetLineEndArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetLineEndArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetLineEndArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(line_end_ != nullptr);
    line_end_->Clear();
  }
  unset_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetLineEndArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.LineEndArchive line_end = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetLineEndArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetLineEndArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.LineEndArchive line_end = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::line_end(this), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetLineEndArchive)
  return target;
}

size_t SpecSetLineEndArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetLineEndArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.LineEndArchive line_end = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *line_end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecSetLineEndArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecSetLineEndArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecSetLineEndArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecSetLineEndArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecSetLineEndArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecSetLineEndArchive)
    MergeFrom(*source);
  }
}

void SpecSetLineEndArchive::MergeFrom(const SpecSetLineEndArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetLineEndArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_line_end()->::TSD::LineEndArchive::MergeFrom(from._internal_line_end());
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecSetLineEndArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecSetLineEndArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecSetLineEndArchive::CopyFrom(const SpecSetLineEndArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetLineEndArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetLineEndArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_line_end()) {
    if (!line_end_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetLineEndArchive::InternalSwap(SpecSetLineEndArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetLineEndArchive, unset_)
      + sizeof(SpecSetLineEndArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetLineEndArchive, line_end_)>(
          reinterpret_cast<char*>(&line_end_),
          reinterpret_cast<char*>(&other->line_end_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetLineEndArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[1]);
}

// ===================================================================

class SpecSetReflectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetReflectionArchive>()._has_bits_);
  static const ::TSD::ReflectionArchive& reflection(const SpecSetReflectionArchive* msg);
  static void set_has_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::ReflectionArchive&
SpecSetReflectionArchive::_Internal::reflection(const SpecSetReflectionArchive* msg) {
  return *msg->reflection_;
}
void SpecSetReflectionArchive::clear_reflection() {
  if (reflection_ != nullptr) reflection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecSetReflectionArchive::SpecSetReflectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetReflectionArchive)
}
SpecSetReflectionArchive::SpecSetReflectionArchive(const SpecSetReflectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reflection()) {
    reflection_ = new ::TSD::ReflectionArchive(*from.reflection_);
  } else {
    reflection_ = nullptr;
  }
  unset_ = from.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetReflectionArchive)
}

void SpecSetReflectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reflection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&reflection_)) + sizeof(unset_));
}

SpecSetReflectionArchive::~SpecSetReflectionArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetReflectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecSetReflectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reflection_;
}

void SpecSetReflectionArchive::ArenaDtor(void* object) {
  SpecSetReflectionArchive* _this = reinterpret_cast< SpecSetReflectionArchive* >(object);
  (void)_this;
}
void SpecSetReflectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetReflectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetReflectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetReflectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reflection_ != nullptr);
    reflection_->Clear();
  }
  unset_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetReflectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.ReflectionArchive reflection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reflection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetReflectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetReflectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.ReflectionArchive reflection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reflection(this), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetReflectionArchive)
  return target;
}

size_t SpecSetReflectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetReflectionArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.ReflectionArchive reflection = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reflection_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecSetReflectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecSetReflectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecSetReflectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecSetReflectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecSetReflectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecSetReflectionArchive)
    MergeFrom(*source);
  }
}

void SpecSetReflectionArchive::MergeFrom(const SpecSetReflectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetReflectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_reflection()->::TSD::ReflectionArchive::MergeFrom(from._internal_reflection());
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecSetReflectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecSetReflectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecSetReflectionArchive::CopyFrom(const SpecSetReflectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetReflectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetReflectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecSetReflectionArchive::InternalSwap(SpecSetReflectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetReflectionArchive, unset_)
      + sizeof(SpecSetReflectionArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetReflectionArchive, reflection_)>(
          reinterpret_cast<char*>(&reflection_),
          reinterpret_cast<char*>(&other->reflection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetReflectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[2]);
}

// ===================================================================

class SpecSetShadowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetShadowArchive>()._has_bits_);
  static const ::TSD::ShadowArchive& shadow(const SpecSetShadowArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::ShadowArchive&
SpecSetShadowArchive::_Internal::shadow(const SpecSetShadowArchive* msg) {
  return *msg->shadow_;
}
void SpecSetShadowArchive::clear_shadow() {
  if (shadow_ != nullptr) shadow_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecSetShadowArchive::SpecSetShadowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetShadowArchive)
}
SpecSetShadowArchive::SpecSetShadowArchive(const SpecSetShadowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shadow()) {
    shadow_ = new ::TSD::ShadowArchive(*from.shadow_);
  } else {
    shadow_ = nullptr;
  }
  unset_ = from.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetShadowArchive)
}

void SpecSetShadowArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shadow_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&shadow_)) + sizeof(unset_));
}

SpecSetShadowArchive::~SpecSetShadowArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetShadowArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecSetShadowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shadow_;
}

void SpecSetShadowArchive::ArenaDtor(void* object) {
  SpecSetShadowArchive* _this = reinterpret_cast< SpecSetShadowArchive* >(object);
  (void)_this;
}
void SpecSetShadowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetShadowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetShadowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shadow_ != nullptr);
    shadow_->Clear();
  }
  unset_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetShadowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.ShadowArchive shadow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetShadowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.ShadowArchive shadow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shadow(this), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetShadowArchive)
  return target;
}

size_t SpecSetShadowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetShadowArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.ShadowArchive shadow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shadow_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecSetShadowArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecSetShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecSetShadowArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecSetShadowArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecSetShadowArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecSetShadowArchive)
    MergeFrom(*source);
  }
}

void SpecSetShadowArchive::MergeFrom(const SpecSetShadowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shadow()->::TSD::ShadowArchive::MergeFrom(from._internal_shadow());
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecSetShadowArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecSetShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecSetShadowArchive::CopyFrom(const SpecSetShadowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetShadowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_shadow()) {
    if (!shadow_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetShadowArchive::InternalSwap(SpecSetShadowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetShadowArchive, unset_)
      + sizeof(SpecSetShadowArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetShadowArchive, shadow_)>(
          reinterpret_cast<char*>(&shadow_),
          reinterpret_cast<char*>(&other->shadow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetShadowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[3]);
}

// ===================================================================

class SpecSetStrokeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetStrokeArchive>()._has_bits_);
  static const ::TSD::StrokeArchive& stroke(const SpecSetStrokeArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSD::StrokeArchive&
SpecSetStrokeArchive::_Internal::stroke(const SpecSetStrokeArchive* msg) {
  return *msg->stroke_;
}
void SpecSetStrokeArchive::clear_stroke() {
  if (stroke_ != nullptr) stroke_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecSetStrokeArchive::SpecSetStrokeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecSetStrokeArchive)
}
SpecSetStrokeArchive::SpecSetStrokeArchive(const SpecSetStrokeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    stroke_ = new ::TSD::StrokeArchive(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  unset_ = from.unset_;
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecSetStrokeArchive)
}

void SpecSetStrokeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stroke_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&stroke_)) + sizeof(unset_));
}

SpecSetStrokeArchive::~SpecSetStrokeArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecSetStrokeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecSetStrokeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stroke_;
}

void SpecSetStrokeArchive::ArenaDtor(void* object) {
  SpecSetStrokeArchive* _this = reinterpret_cast< SpecSetStrokeArchive* >(object);
  (void)_this;
}
void SpecSetStrokeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetStrokeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetStrokeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecSetStrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stroke_ != nullptr);
    stroke_->Clear();
  }
  unset_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetStrokeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokeArchive stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetStrokeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecSetStrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stroke(this), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecSetStrokeArchive)
  return target;
}

size_t SpecSetStrokeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecSetStrokeArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.StrokeArchive stroke = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stroke_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecSetStrokeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecSetStrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecSetStrokeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecSetStrokeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecSetStrokeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecSetStrokeArchive)
    MergeFrom(*source);
  }
}

void SpecSetStrokeArchive::MergeFrom(const SpecSetStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecSetStrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecSetStrokeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecSetStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecSetStrokeArchive::CopyFrom(const SpecSetStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecSetStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetStrokeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stroke()) {
    if (!stroke_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetStrokeArchive::InternalSwap(SpecSetStrokeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetStrokeArchive, unset_)
      + sizeof(SpecSetStrokeArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetStrokeArchive, stroke_)>(
          reinterpret_cast<char*>(&stroke_),
          reinterpret_cast<char*>(&other->stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetStrokeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[4]);
}

// ===================================================================

class SpecFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecFillArchive>()._has_bits_);
  static const ::TSD::SpecColorFillSetColorArchive& spec_color_fill_set_color(const SpecFillArchive* msg);
  static void set_has_spec_color_fill_set_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::SpecGradientFillSetAngleArchive& spec_gradient_fill_set_angle(const SpecFillArchive* msg);
  static void set_has_spec_gradient_fill_set_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::SpecImageFillSetTechniqueArchive& spec_image_fill_set_technique(const SpecFillArchive* msg);
  static void set_has_spec_image_fill_set_technique(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSDSOS::SpecSetFillArchive& spec_set_fill(const SpecFillArchive* msg);
  static void set_has_spec_set_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSD::SpecColorFillSetColorArchive&
SpecFillArchive::_Internal::spec_color_fill_set_color(const SpecFillArchive* msg) {
  return *msg->spec_color_fill_set_color_;
}
const ::TSD::SpecGradientFillSetAngleArchive&
SpecFillArchive::_Internal::spec_gradient_fill_set_angle(const SpecFillArchive* msg) {
  return *msg->spec_gradient_fill_set_angle_;
}
const ::TSD::SpecImageFillSetTechniqueArchive&
SpecFillArchive::_Internal::spec_image_fill_set_technique(const SpecFillArchive* msg) {
  return *msg->spec_image_fill_set_technique_;
}
const ::TSDSOS::SpecSetFillArchive&
SpecFillArchive::_Internal::spec_set_fill(const SpecFillArchive* msg) {
  return *msg->spec_set_fill_;
}
void SpecFillArchive::clear_spec_color_fill_set_color() {
  if (spec_color_fill_set_color_ != nullptr) spec_color_fill_set_color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SpecFillArchive::clear_spec_gradient_fill_set_angle() {
  if (spec_gradient_fill_set_angle_ != nullptr) spec_gradient_fill_set_angle_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SpecFillArchive::clear_spec_image_fill_set_technique() {
  if (spec_image_fill_set_technique_ != nullptr) spec_image_fill_set_technique_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SpecFillArchive::SpecFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecFillArchive)
}
SpecFillArchive::SpecFillArchive(const SpecFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_color_fill_set_color()) {
    spec_color_fill_set_color_ = new ::TSD::SpecColorFillSetColorArchive(*from.spec_color_fill_set_color_);
  } else {
    spec_color_fill_set_color_ = nullptr;
  }
  if (from._internal_has_spec_gradient_fill_set_angle()) {
    spec_gradient_fill_set_angle_ = new ::TSD::SpecGradientFillSetAngleArchive(*from.spec_gradient_fill_set_angle_);
  } else {
    spec_gradient_fill_set_angle_ = nullptr;
  }
  if (from._internal_has_spec_image_fill_set_technique()) {
    spec_image_fill_set_technique_ = new ::TSD::SpecImageFillSetTechniqueArchive(*from.spec_image_fill_set_technique_);
  } else {
    spec_image_fill_set_technique_ = nullptr;
  }
  if (from._internal_has_spec_set_fill()) {
    spec_set_fill_ = new ::TSDSOS::SpecSetFillArchive(*from.spec_set_fill_);
  } else {
    spec_set_fill_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecFillArchive)
}

void SpecFillArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_color_fill_set_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_set_fill_) -
    reinterpret_cast<char*>(&spec_color_fill_set_color_)) + sizeof(spec_set_fill_));
}

SpecFillArchive::~SpecFillArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecFillArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spec_color_fill_set_color_;
  if (this != internal_default_instance()) delete spec_gradient_fill_set_angle_;
  if (this != internal_default_instance()) delete spec_image_fill_set_technique_;
  if (this != internal_default_instance()) delete spec_set_fill_;
}

void SpecFillArchive::ArenaDtor(void* object) {
  SpecFillArchive* _this = reinterpret_cast< SpecFillArchive* >(object);
  (void)_this;
}
void SpecFillArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecFillArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(spec_color_fill_set_color_ != nullptr);
      spec_color_fill_set_color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_gradient_fill_set_angle_ != nullptr);
      spec_gradient_fill_set_angle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(spec_image_fill_set_technique_ != nullptr);
      spec_image_fill_set_technique_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(spec_set_fill_ != nullptr);
      spec_set_fill_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecFillArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.SpecColorFillSetColorArchive spec_color_fill_set_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_color_fill_set_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecGradientFillSetAngleArchive spec_gradient_fill_set_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_gradient_fill_set_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecImageFillSetTechniqueArchive spec_image_fill_set_technique = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_image_fill_set_technique(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecSetFillArchive spec_set_fill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecFillArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.SpecColorFillSetColorArchive spec_color_fill_set_color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_color_fill_set_color(this), target, stream);
  }

  // optional .TSD.SpecGradientFillSetAngleArchive spec_gradient_fill_set_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec_gradient_fill_set_angle(this), target, stream);
  }

  // optional .TSD.SpecImageFillSetTechniqueArchive spec_image_fill_set_technique = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec_image_fill_set_technique(this), target, stream);
  }

  // optional .TSDSOS.SpecSetFillArchive spec_set_fill = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::spec_set_fill(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecFillArchive)
  return target;
}

size_t SpecFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecFillArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSD.SpecColorFillSetColorArchive spec_color_fill_set_color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_color_fill_set_color_);
    }

    // optional .TSD.SpecGradientFillSetAngleArchive spec_gradient_fill_set_angle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_gradient_fill_set_angle_);
    }

    // optional .TSD.SpecImageFillSetTechniqueArchive spec_image_fill_set_technique = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_image_fill_set_technique_);
    }

    // optional .TSDSOS.SpecSetFillArchive spec_set_fill = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_set_fill_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecFillArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecFillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecFillArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecFillArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecFillArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecFillArchive)
    MergeFrom(*source);
  }
}

void SpecFillArchive::MergeFrom(const SpecFillArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecFillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_spec_color_fill_set_color()->::TSD::SpecColorFillSetColorArchive::MergeFrom(from._internal_spec_color_fill_set_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec_gradient_fill_set_angle()->::TSD::SpecGradientFillSetAngleArchive::MergeFrom(from._internal_spec_gradient_fill_set_angle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_spec_image_fill_set_technique()->::TSD::SpecImageFillSetTechniqueArchive::MergeFrom(from._internal_spec_image_fill_set_technique());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_spec_set_fill()->::TSDSOS::SpecSetFillArchive::MergeFrom(from._internal_spec_set_fill());
    }
  }
}

void SpecFillArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecFillArchive::CopyFrom(const SpecFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecFillArchive::IsInitialized() const {
  if (_internal_has_spec_color_fill_set_color()) {
    if (!spec_color_fill_set_color_->IsInitialized()) return false;
  }
  if (_internal_has_spec_gradient_fill_set_angle()) {
    if (!spec_gradient_fill_set_angle_->IsInitialized()) return false;
  }
  if (_internal_has_spec_image_fill_set_technique()) {
    if (!spec_image_fill_set_technique_->IsInitialized()) return false;
  }
  if (_internal_has_spec_set_fill()) {
    if (!spec_set_fill_->IsInitialized()) return false;
  }
  return true;
}

void SpecFillArchive::InternalSwap(SpecFillArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecFillArchive, spec_set_fill_)
      + sizeof(SpecFillArchive::spec_set_fill_)
      - PROTOBUF_FIELD_OFFSET(SpecFillArchive, spec_color_fill_set_color_)>(
          reinterpret_cast<char*>(&spec_color_fill_set_color_),
          reinterpret_cast<char*>(&other->spec_color_fill_set_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecFillArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[5]);
}

// ===================================================================

class SpecLineEndArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecLineEndArchive>()._has_bits_);
  static const ::TSDSOS::SpecSetLineEndArchive& spec_set_line_end(const SpecLineEndArchive* msg);
  static void set_has_spec_set_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSDSOS::SpecSetLineEndArchive&
SpecLineEndArchive::_Internal::spec_set_line_end(const SpecLineEndArchive* msg) {
  return *msg->spec_set_line_end_;
}
SpecLineEndArchive::SpecLineEndArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecLineEndArchive)
}
SpecLineEndArchive::SpecLineEndArchive(const SpecLineEndArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_line_end()) {
    spec_set_line_end_ = new ::TSDSOS::SpecSetLineEndArchive(*from.spec_set_line_end_);
  } else {
    spec_set_line_end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecLineEndArchive)
}

void SpecLineEndArchive::SharedCtor() {
spec_set_line_end_ = nullptr;
}

SpecLineEndArchive::~SpecLineEndArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecLineEndArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecLineEndArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spec_set_line_end_;
}

void SpecLineEndArchive::ArenaDtor(void* object) {
  SpecLineEndArchive* _this = reinterpret_cast< SpecLineEndArchive* >(object);
  (void)_this;
}
void SpecLineEndArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecLineEndArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecLineEndArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecLineEndArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_set_line_end_ != nullptr);
    spec_set_line_end_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecLineEndArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSDSOS.SpecSetLineEndArchive spec_set_line_end = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_line_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecLineEndArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecLineEndArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSDSOS.SpecSetLineEndArchive spec_set_line_end = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_set_line_end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecLineEndArchive)
  return target;
}

size_t SpecLineEndArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecLineEndArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSDSOS.SpecSetLineEndArchive spec_set_line_end = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_set_line_end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecLineEndArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecLineEndArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecLineEndArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecLineEndArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecLineEndArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecLineEndArchive)
    MergeFrom(*source);
  }
}

void SpecLineEndArchive::MergeFrom(const SpecLineEndArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecLineEndArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec_set_line_end()) {
    _internal_mutable_spec_set_line_end()->::TSDSOS::SpecSetLineEndArchive::MergeFrom(from._internal_spec_set_line_end());
  }
}

void SpecLineEndArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecLineEndArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecLineEndArchive::CopyFrom(const SpecLineEndArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecLineEndArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecLineEndArchive::IsInitialized() const {
  if (_internal_has_spec_set_line_end()) {
    if (!spec_set_line_end_->IsInitialized()) return false;
  }
  return true;
}

void SpecLineEndArchive::InternalSwap(SpecLineEndArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spec_set_line_end_, other->spec_set_line_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecLineEndArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[6]);
}

// ===================================================================

class SpecReflectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecReflectionArchive>()._has_bits_);
  static const ::TSD::SpecReflectionSetOpacityArchive& spec_reflection_set_opacity(const SpecReflectionArchive* msg);
  static void set_has_spec_reflection_set_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSDSOS::SpecSetReflectionArchive& spec_set_reflection(const SpecReflectionArchive* msg);
  static void set_has_spec_set_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSD::SpecReflectionSetOpacityArchive&
SpecReflectionArchive::_Internal::spec_reflection_set_opacity(const SpecReflectionArchive* msg) {
  return *msg->spec_reflection_set_opacity_;
}
const ::TSDSOS::SpecSetReflectionArchive&
SpecReflectionArchive::_Internal::spec_set_reflection(const SpecReflectionArchive* msg) {
  return *msg->spec_set_reflection_;
}
void SpecReflectionArchive::clear_spec_reflection_set_opacity() {
  if (spec_reflection_set_opacity_ != nullptr) spec_reflection_set_opacity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecReflectionArchive::SpecReflectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecReflectionArchive)
}
SpecReflectionArchive::SpecReflectionArchive(const SpecReflectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_reflection_set_opacity()) {
    spec_reflection_set_opacity_ = new ::TSD::SpecReflectionSetOpacityArchive(*from.spec_reflection_set_opacity_);
  } else {
    spec_reflection_set_opacity_ = nullptr;
  }
  if (from._internal_has_spec_set_reflection()) {
    spec_set_reflection_ = new ::TSDSOS::SpecSetReflectionArchive(*from.spec_set_reflection_);
  } else {
    spec_set_reflection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecReflectionArchive)
}

void SpecReflectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_reflection_set_opacity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_set_reflection_) -
    reinterpret_cast<char*>(&spec_reflection_set_opacity_)) + sizeof(spec_set_reflection_));
}

SpecReflectionArchive::~SpecReflectionArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecReflectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecReflectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spec_reflection_set_opacity_;
  if (this != internal_default_instance()) delete spec_set_reflection_;
}

void SpecReflectionArchive::ArenaDtor(void* object) {
  SpecReflectionArchive* _this = reinterpret_cast< SpecReflectionArchive* >(object);
  (void)_this;
}
void SpecReflectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecReflectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecReflectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecReflectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(spec_reflection_set_opacity_ != nullptr);
      spec_reflection_set_opacity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_set_reflection_ != nullptr);
      spec_set_reflection_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecReflectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.SpecReflectionSetOpacityArchive spec_reflection_set_opacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_reflection_set_opacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecSetReflectionArchive spec_set_reflection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_reflection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecReflectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecReflectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.SpecReflectionSetOpacityArchive spec_reflection_set_opacity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_reflection_set_opacity(this), target, stream);
  }

  // optional .TSDSOS.SpecSetReflectionArchive spec_set_reflection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec_set_reflection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecReflectionArchive)
  return target;
}

size_t SpecReflectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecReflectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSD.SpecReflectionSetOpacityArchive spec_reflection_set_opacity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_reflection_set_opacity_);
    }

    // optional .TSDSOS.SpecSetReflectionArchive spec_set_reflection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_set_reflection_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecReflectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecReflectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecReflectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecReflectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecReflectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecReflectionArchive)
    MergeFrom(*source);
  }
}

void SpecReflectionArchive::MergeFrom(const SpecReflectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecReflectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_spec_reflection_set_opacity()->::TSD::SpecReflectionSetOpacityArchive::MergeFrom(from._internal_spec_reflection_set_opacity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec_set_reflection()->::TSDSOS::SpecSetReflectionArchive::MergeFrom(from._internal_spec_set_reflection());
    }
  }
}

void SpecReflectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecReflectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecReflectionArchive::CopyFrom(const SpecReflectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecReflectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecReflectionArchive::IsInitialized() const {
  if (_internal_has_spec_reflection_set_opacity()) {
    if (!spec_reflection_set_opacity_->IsInitialized()) return false;
  }
  if (_internal_has_spec_set_reflection()) {
    if (!spec_set_reflection_->IsInitialized()) return false;
  }
  return true;
}

void SpecReflectionArchive::InternalSwap(SpecReflectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecReflectionArchive, spec_set_reflection_)
      + sizeof(SpecReflectionArchive::spec_set_reflection_)
      - PROTOBUF_FIELD_OFFSET(SpecReflectionArchive, spec_reflection_set_opacity_)>(
          reinterpret_cast<char*>(&spec_reflection_set_opacity_),
          reinterpret_cast<char*>(&other->spec_reflection_set_opacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecReflectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[7]);
}

// ===================================================================

class SpecShadowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecShadowArchive>()._has_bits_);
  static const ::TSDSOS::SpecSetShadowArchive& spec_set_shadow(const SpecShadowArchive* msg);
  static void set_has_spec_set_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::SpecShadowSetAngleArchive& spec_shadow_set_angle(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::SpecShadowSetColorArchive& spec_shadow_set_color(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::SpecShadowSetOffsetArchive& spec_shadow_set_offset(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::SpecShadowSetOpacityArchive& spec_shadow_set_opacity(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::SpecShadowSetRadiusArchive& spec_shadow_set_radius(const SpecShadowArchive* msg);
  static void set_has_spec_shadow_set_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSDSOS::SpecSetShadowArchive&
SpecShadowArchive::_Internal::spec_set_shadow(const SpecShadowArchive* msg) {
  return *msg->spec_set_shadow_;
}
const ::TSD::SpecShadowSetAngleArchive&
SpecShadowArchive::_Internal::spec_shadow_set_angle(const SpecShadowArchive* msg) {
  return *msg->spec_shadow_set_angle_;
}
const ::TSD::SpecShadowSetColorArchive&
SpecShadowArchive::_Internal::spec_shadow_set_color(const SpecShadowArchive* msg) {
  return *msg->spec_shadow_set_color_;
}
const ::TSD::SpecShadowSetOffsetArchive&
SpecShadowArchive::_Internal::spec_shadow_set_offset(const SpecShadowArchive* msg) {
  return *msg->spec_shadow_set_offset_;
}
const ::TSD::SpecShadowSetOpacityArchive&
SpecShadowArchive::_Internal::spec_shadow_set_opacity(const SpecShadowArchive* msg) {
  return *msg->spec_shadow_set_opacity_;
}
const ::TSD::SpecShadowSetRadiusArchive&
SpecShadowArchive::_Internal::spec_shadow_set_radius(const SpecShadowArchive* msg) {
  return *msg->spec_shadow_set_radius_;
}
void SpecShadowArchive::clear_spec_shadow_set_angle() {
  if (spec_shadow_set_angle_ != nullptr) spec_shadow_set_angle_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SpecShadowArchive::clear_spec_shadow_set_color() {
  if (spec_shadow_set_color_ != nullptr) spec_shadow_set_color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SpecShadowArchive::clear_spec_shadow_set_offset() {
  if (spec_shadow_set_offset_ != nullptr) spec_shadow_set_offset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SpecShadowArchive::clear_spec_shadow_set_opacity() {
  if (spec_shadow_set_opacity_ != nullptr) spec_shadow_set_opacity_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SpecShadowArchive::clear_spec_shadow_set_radius() {
  if (spec_shadow_set_radius_ != nullptr) spec_shadow_set_radius_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
SpecShadowArchive::SpecShadowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecShadowArchive)
}
SpecShadowArchive::SpecShadowArchive(const SpecShadowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_shadow()) {
    spec_set_shadow_ = new ::TSDSOS::SpecSetShadowArchive(*from.spec_set_shadow_);
  } else {
    spec_set_shadow_ = nullptr;
  }
  if (from._internal_has_spec_shadow_set_angle()) {
    spec_shadow_set_angle_ = new ::TSD::SpecShadowSetAngleArchive(*from.spec_shadow_set_angle_);
  } else {
    spec_shadow_set_angle_ = nullptr;
  }
  if (from._internal_has_spec_shadow_set_color()) {
    spec_shadow_set_color_ = new ::TSD::SpecShadowSetColorArchive(*from.spec_shadow_set_color_);
  } else {
    spec_shadow_set_color_ = nullptr;
  }
  if (from._internal_has_spec_shadow_set_offset()) {
    spec_shadow_set_offset_ = new ::TSD::SpecShadowSetOffsetArchive(*from.spec_shadow_set_offset_);
  } else {
    spec_shadow_set_offset_ = nullptr;
  }
  if (from._internal_has_spec_shadow_set_opacity()) {
    spec_shadow_set_opacity_ = new ::TSD::SpecShadowSetOpacityArchive(*from.spec_shadow_set_opacity_);
  } else {
    spec_shadow_set_opacity_ = nullptr;
  }
  if (from._internal_has_spec_shadow_set_radius()) {
    spec_shadow_set_radius_ = new ::TSD::SpecShadowSetRadiusArchive(*from.spec_shadow_set_radius_);
  } else {
    spec_shadow_set_radius_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecShadowArchive)
}

void SpecShadowArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_set_shadow_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_shadow_set_radius_) -
    reinterpret_cast<char*>(&spec_set_shadow_)) + sizeof(spec_shadow_set_radius_));
}

SpecShadowArchive::~SpecShadowArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecShadowArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecShadowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spec_set_shadow_;
  if (this != internal_default_instance()) delete spec_shadow_set_angle_;
  if (this != internal_default_instance()) delete spec_shadow_set_color_;
  if (this != internal_default_instance()) delete spec_shadow_set_offset_;
  if (this != internal_default_instance()) delete spec_shadow_set_opacity_;
  if (this != internal_default_instance()) delete spec_shadow_set_radius_;
}

void SpecShadowArchive::ArenaDtor(void* object) {
  SpecShadowArchive* _this = reinterpret_cast< SpecShadowArchive* >(object);
  (void)_this;
}
void SpecShadowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecShadowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecShadowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(spec_set_shadow_ != nullptr);
      spec_set_shadow_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_shadow_set_angle_ != nullptr);
      spec_shadow_set_angle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(spec_shadow_set_color_ != nullptr);
      spec_shadow_set_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(spec_shadow_set_offset_ != nullptr);
      spec_shadow_set_offset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(spec_shadow_set_opacity_ != nullptr);
      spec_shadow_set_opacity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(spec_shadow_set_radius_ != nullptr);
      spec_shadow_set_radius_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecShadowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSDSOS.SpecSetShadowArchive spec_set_shadow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_shadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetAngleArchive spec_shadow_set_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetColorArchive spec_shadow_set_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetOffsetArchive spec_shadow_set_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetOpacityArchive spec_shadow_set_opacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_opacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecShadowSetRadiusArchive spec_shadow_set_radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_shadow_set_radius(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecShadowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSDSOS.SpecSetShadowArchive spec_set_shadow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_set_shadow(this), target, stream);
  }

  // optional .TSD.SpecShadowSetAngleArchive spec_shadow_set_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec_shadow_set_angle(this), target, stream);
  }

  // optional .TSD.SpecShadowSetColorArchive spec_shadow_set_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec_shadow_set_color(this), target, stream);
  }

  // optional .TSD.SpecShadowSetOffsetArchive spec_shadow_set_offset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::spec_shadow_set_offset(this), target, stream);
  }

  // optional .TSD.SpecShadowSetOpacityArchive spec_shadow_set_opacity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::spec_shadow_set_opacity(this), target, stream);
  }

  // optional .TSD.SpecShadowSetRadiusArchive spec_shadow_set_radius = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::spec_shadow_set_radius(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecShadowArchive)
  return target;
}

size_t SpecShadowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecShadowArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSDSOS.SpecSetShadowArchive spec_set_shadow = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_set_shadow_);
    }

    // optional .TSD.SpecShadowSetAngleArchive spec_shadow_set_angle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_shadow_set_angle_);
    }

    // optional .TSD.SpecShadowSetColorArchive spec_shadow_set_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_shadow_set_color_);
    }

    // optional .TSD.SpecShadowSetOffsetArchive spec_shadow_set_offset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_shadow_set_offset_);
    }

    // optional .TSD.SpecShadowSetOpacityArchive spec_shadow_set_opacity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_shadow_set_opacity_);
    }

    // optional .TSD.SpecShadowSetRadiusArchive spec_shadow_set_radius = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_shadow_set_radius_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecShadowArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecShadowArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecShadowArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecShadowArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecShadowArchive)
    MergeFrom(*source);
  }
}

void SpecShadowArchive::MergeFrom(const SpecShadowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_spec_set_shadow()->::TSDSOS::SpecSetShadowArchive::MergeFrom(from._internal_spec_set_shadow());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec_shadow_set_angle()->::TSD::SpecShadowSetAngleArchive::MergeFrom(from._internal_spec_shadow_set_angle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_spec_shadow_set_color()->::TSD::SpecShadowSetColorArchive::MergeFrom(from._internal_spec_shadow_set_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_spec_shadow_set_offset()->::TSD::SpecShadowSetOffsetArchive::MergeFrom(from._internal_spec_shadow_set_offset());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_spec_shadow_set_opacity()->::TSD::SpecShadowSetOpacityArchive::MergeFrom(from._internal_spec_shadow_set_opacity());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_spec_shadow_set_radius()->::TSD::SpecShadowSetRadiusArchive::MergeFrom(from._internal_spec_shadow_set_radius());
    }
  }
}

void SpecShadowArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecShadowArchive::CopyFrom(const SpecShadowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecShadowArchive::IsInitialized() const {
  if (_internal_has_spec_set_shadow()) {
    if (!spec_set_shadow_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_angle()) {
    if (!spec_shadow_set_angle_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_color()) {
    if (!spec_shadow_set_color_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_offset()) {
    if (!spec_shadow_set_offset_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_opacity()) {
    if (!spec_shadow_set_opacity_->IsInitialized()) return false;
  }
  if (_internal_has_spec_shadow_set_radius()) {
    if (!spec_shadow_set_radius_->IsInitialized()) return false;
  }
  return true;
}

void SpecShadowArchive::InternalSwap(SpecShadowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecShadowArchive, spec_shadow_set_radius_)
      + sizeof(SpecShadowArchive::spec_shadow_set_radius_)
      - PROTOBUF_FIELD_OFFSET(SpecShadowArchive, spec_set_shadow_)>(
          reinterpret_cast<char*>(&spec_set_shadow_),
          reinterpret_cast<char*>(&other->spec_set_shadow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecShadowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[8]);
}

// ===================================================================

class SpecStrokeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecStrokeArchive>()._has_bits_);
  static const ::TSD::SpecFrameSetAssetScaleArchive& spec_frame_set_asset_scale(const SpecStrokeArchive* msg);
  static void set_has_spec_frame_set_asset_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSDSOS::SpecSetStrokeArchive& spec_set_stroke(const SpecStrokeArchive* msg);
  static void set_has_spec_set_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::SpecStrokeSetColorArchive& spec_stroke_set_color(const SpecStrokeArchive* msg);
  static void set_has_spec_stroke_set_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::SpecStrokeSetPatternArchive& spec_stroke_set_pattern(const SpecStrokeArchive* msg);
  static void set_has_spec_stroke_set_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::SpecStrokeSetWidthArchive& spec_stroke_set_width(const SpecStrokeArchive* msg);
  static void set_has_spec_stroke_set_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSD::SpecFrameSetAssetScaleArchive&
SpecStrokeArchive::_Internal::spec_frame_set_asset_scale(const SpecStrokeArchive* msg) {
  return *msg->spec_frame_set_asset_scale_;
}
const ::TSDSOS::SpecSetStrokeArchive&
SpecStrokeArchive::_Internal::spec_set_stroke(const SpecStrokeArchive* msg) {
  return *msg->spec_set_stroke_;
}
const ::TSD::SpecStrokeSetColorArchive&
SpecStrokeArchive::_Internal::spec_stroke_set_color(const SpecStrokeArchive* msg) {
  return *msg->spec_stroke_set_color_;
}
const ::TSD::SpecStrokeSetPatternArchive&
SpecStrokeArchive::_Internal::spec_stroke_set_pattern(const SpecStrokeArchive* msg) {
  return *msg->spec_stroke_set_pattern_;
}
const ::TSD::SpecStrokeSetWidthArchive&
SpecStrokeArchive::_Internal::spec_stroke_set_width(const SpecStrokeArchive* msg) {
  return *msg->spec_stroke_set_width_;
}
void SpecStrokeArchive::clear_spec_frame_set_asset_scale() {
  if (spec_frame_set_asset_scale_ != nullptr) spec_frame_set_asset_scale_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SpecStrokeArchive::clear_spec_stroke_set_color() {
  if (spec_stroke_set_color_ != nullptr) spec_stroke_set_color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SpecStrokeArchive::clear_spec_stroke_set_pattern() {
  if (spec_stroke_set_pattern_ != nullptr) spec_stroke_set_pattern_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SpecStrokeArchive::clear_spec_stroke_set_width() {
  if (spec_stroke_set_width_ != nullptr) spec_stroke_set_width_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
SpecStrokeArchive::SpecStrokeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.SpecStrokeArchive)
}
SpecStrokeArchive::SpecStrokeArchive(const SpecStrokeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_frame_set_asset_scale()) {
    spec_frame_set_asset_scale_ = new ::TSD::SpecFrameSetAssetScaleArchive(*from.spec_frame_set_asset_scale_);
  } else {
    spec_frame_set_asset_scale_ = nullptr;
  }
  if (from._internal_has_spec_set_stroke()) {
    spec_set_stroke_ = new ::TSDSOS::SpecSetStrokeArchive(*from.spec_set_stroke_);
  } else {
    spec_set_stroke_ = nullptr;
  }
  if (from._internal_has_spec_stroke_set_color()) {
    spec_stroke_set_color_ = new ::TSD::SpecStrokeSetColorArchive(*from.spec_stroke_set_color_);
  } else {
    spec_stroke_set_color_ = nullptr;
  }
  if (from._internal_has_spec_stroke_set_pattern()) {
    spec_stroke_set_pattern_ = new ::TSD::SpecStrokeSetPatternArchive(*from.spec_stroke_set_pattern_);
  } else {
    spec_stroke_set_pattern_ = nullptr;
  }
  if (from._internal_has_spec_stroke_set_width()) {
    spec_stroke_set_width_ = new ::TSD::SpecStrokeSetWidthArchive(*from.spec_stroke_set_width_);
  } else {
    spec_stroke_set_width_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSDSOS.SpecStrokeArchive)
}

void SpecStrokeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_frame_set_asset_scale_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_stroke_set_width_) -
    reinterpret_cast<char*>(&spec_frame_set_asset_scale_)) + sizeof(spec_stroke_set_width_));
}

SpecStrokeArchive::~SpecStrokeArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.SpecStrokeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecStrokeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spec_frame_set_asset_scale_;
  if (this != internal_default_instance()) delete spec_set_stroke_;
  if (this != internal_default_instance()) delete spec_stroke_set_color_;
  if (this != internal_default_instance()) delete spec_stroke_set_pattern_;
  if (this != internal_default_instance()) delete spec_stroke_set_width_;
}

void SpecStrokeArchive::ArenaDtor(void* object) {
  SpecStrokeArchive* _this = reinterpret_cast< SpecStrokeArchive* >(object);
  (void)_this;
}
void SpecStrokeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecStrokeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecStrokeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.SpecStrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(spec_frame_set_asset_scale_ != nullptr);
      spec_frame_set_asset_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_set_stroke_ != nullptr);
      spec_set_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(spec_stroke_set_color_ != nullptr);
      spec_stroke_set_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(spec_stroke_set_pattern_ != nullptr);
      spec_stroke_set_pattern_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(spec_stroke_set_width_ != nullptr);
      spec_stroke_set_width_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecStrokeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.SpecFrameSetAssetScaleArchive spec_frame_set_asset_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_frame_set_asset_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecSetStrokeArchive spec_set_stroke = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecStrokeSetColorArchive spec_stroke_set_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_stroke_set_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecStrokeSetPatternArchive spec_stroke_set_pattern = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_stroke_set_pattern(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SpecStrokeSetWidthArchive spec_stroke_set_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_stroke_set_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecStrokeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.SpecStrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.SpecFrameSetAssetScaleArchive spec_frame_set_asset_scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_frame_set_asset_scale(this), target, stream);
  }

  // optional .TSDSOS.SpecSetStrokeArchive spec_set_stroke = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec_set_stroke(this), target, stream);
  }

  // optional .TSD.SpecStrokeSetColorArchive spec_stroke_set_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec_stroke_set_color(this), target, stream);
  }

  // optional .TSD.SpecStrokeSetPatternArchive spec_stroke_set_pattern = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::spec_stroke_set_pattern(this), target, stream);
  }

  // optional .TSD.SpecStrokeSetWidthArchive spec_stroke_set_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::spec_stroke_set_width(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.SpecStrokeArchive)
  return target;
}

size_t SpecStrokeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.SpecStrokeArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSD.SpecFrameSetAssetScaleArchive spec_frame_set_asset_scale = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_frame_set_asset_scale_);
    }

    // optional .TSDSOS.SpecSetStrokeArchive spec_set_stroke = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_set_stroke_);
    }

    // optional .TSD.SpecStrokeSetColorArchive spec_stroke_set_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_stroke_set_color_);
    }

    // optional .TSD.SpecStrokeSetPatternArchive spec_stroke_set_pattern = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_stroke_set_pattern_);
    }

    // optional .TSD.SpecStrokeSetWidthArchive spec_stroke_set_width = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_stroke_set_width_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecStrokeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.SpecStrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecStrokeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecStrokeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.SpecStrokeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.SpecStrokeArchive)
    MergeFrom(*source);
  }
}

void SpecStrokeArchive::MergeFrom(const SpecStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.SpecStrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_spec_frame_set_asset_scale()->::TSD::SpecFrameSetAssetScaleArchive::MergeFrom(from._internal_spec_frame_set_asset_scale());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec_set_stroke()->::TSDSOS::SpecSetStrokeArchive::MergeFrom(from._internal_spec_set_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_spec_stroke_set_color()->::TSD::SpecStrokeSetColorArchive::MergeFrom(from._internal_spec_stroke_set_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_spec_stroke_set_pattern()->::TSD::SpecStrokeSetPatternArchive::MergeFrom(from._internal_spec_stroke_set_pattern());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_spec_stroke_set_width()->::TSD::SpecStrokeSetWidthArchive::MergeFrom(from._internal_spec_stroke_set_width());
    }
  }
}

void SpecStrokeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.SpecStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecStrokeArchive::CopyFrom(const SpecStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.SpecStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecStrokeArchive::IsInitialized() const {
  if (_internal_has_spec_frame_set_asset_scale()) {
    if (!spec_frame_set_asset_scale_->IsInitialized()) return false;
  }
  if (_internal_has_spec_set_stroke()) {
    if (!spec_set_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_spec_stroke_set_color()) {
    if (!spec_stroke_set_color_->IsInitialized()) return false;
  }
  if (_internal_has_spec_stroke_set_pattern()) {
    if (!spec_stroke_set_pattern_->IsInitialized()) return false;
  }
  if (_internal_has_spec_stroke_set_width()) {
    if (!spec_stroke_set_width_->IsInitialized()) return false;
  }
  return true;
}

void SpecStrokeArchive::InternalSwap(SpecStrokeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecStrokeArchive, spec_stroke_set_width_)
      + sizeof(SpecStrokeArchive::spec_stroke_set_width_)
      - PROTOBUF_FIELD_OFFSET(SpecStrokeArchive, spec_frame_set_asset_scale_)>(
          reinterpret_cast<char*>(&spec_frame_set_asset_scale_),
          reinterpret_cast<char*>(&other->spec_frame_set_asset_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecStrokeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[9]);
}

// ===================================================================

class BaseShapeStylePropertyChangeSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseShapeStylePropertyChangeSetArchive>()._has_bits_);
  static const ::TSDSOS::SpecFillArchive& fill(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fill_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSDSOS::SpecStrokeArchive& stroke(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stroke_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSSSOS::SpecDoubleArchive& opacity(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opacity_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSDSOS::SpecShadowArchive& shadow(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shadow_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSDSOS::SpecReflectionArchive& reflection(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reflection_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSDSOS::SpecLineEndArchive& head_line_end(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_head_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_head_line_end_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSDSOS::SpecLineEndArchive& tail_line_end(const BaseShapeStylePropertyChangeSetArchive* msg);
  static void set_has_tail_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tail_line_end_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::TSDSOS::SpecFillArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::fill(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->fill_;
}
const ::TSDSOS::SpecStrokeArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::stroke(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->stroke_;
}
const ::TSSSOS::SpecDoubleArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::opacity(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->opacity_;
}
const ::TSDSOS::SpecShadowArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::shadow(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->shadow_;
}
const ::TSDSOS::SpecReflectionArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::reflection(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->reflection_;
}
const ::TSDSOS::SpecLineEndArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::head_line_end(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->head_line_end_;
}
const ::TSDSOS::SpecLineEndArchive&
BaseShapeStylePropertyChangeSetArchive::_Internal::tail_line_end(const BaseShapeStylePropertyChangeSetArchive* msg) {
  return *msg->tail_line_end_;
}
void BaseShapeStylePropertyChangeSetArchive::clear_opacity() {
  if (opacity_ != nullptr) opacity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BaseShapeStylePropertyChangeSetArchive::BaseShapeStylePropertyChangeSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
}
BaseShapeStylePropertyChangeSetArchive::BaseShapeStylePropertyChangeSetArchive(const BaseShapeStylePropertyChangeSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    fill_ = new ::TSDSOS::SpecFillArchive(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  if (from._internal_has_stroke()) {
    stroke_ = new ::TSDSOS::SpecStrokeArchive(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  if (from._internal_has_opacity()) {
    opacity_ = new ::TSSSOS::SpecDoubleArchive(*from.opacity_);
  } else {
    opacity_ = nullptr;
  }
  if (from._internal_has_shadow()) {
    shadow_ = new ::TSDSOS::SpecShadowArchive(*from.shadow_);
  } else {
    shadow_ = nullptr;
  }
  if (from._internal_has_reflection()) {
    reflection_ = new ::TSDSOS::SpecReflectionArchive(*from.reflection_);
  } else {
    reflection_ = nullptr;
  }
  if (from._internal_has_head_line_end()) {
    head_line_end_ = new ::TSDSOS::SpecLineEndArchive(*from.head_line_end_);
  } else {
    head_line_end_ = nullptr;
  }
  if (from._internal_has_tail_line_end()) {
    tail_line_end_ = new ::TSDSOS::SpecLineEndArchive(*from.tail_line_end_);
  } else {
    tail_line_end_ = nullptr;
  }
  ::memcpy(&fill_undefined_, &from.fill_undefined_,
    static_cast<size_t>(reinterpret_cast<char*>(&tail_line_end_undefined_) -
    reinterpret_cast<char*>(&fill_undefined_)) + sizeof(tail_line_end_undefined_));
  // @@protoc_insertion_point(copy_constructor:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
}

void BaseShapeStylePropertyChangeSetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tail_line_end_undefined_) -
    reinterpret_cast<char*>(&fill_)) + sizeof(tail_line_end_undefined_));
}

BaseShapeStylePropertyChangeSetArchive::~BaseShapeStylePropertyChangeSetArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseShapeStylePropertyChangeSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fill_;
  if (this != internal_default_instance()) delete stroke_;
  if (this != internal_default_instance()) delete opacity_;
  if (this != internal_default_instance()) delete shadow_;
  if (this != internal_default_instance()) delete reflection_;
  if (this != internal_default_instance()) delete head_line_end_;
  if (this != internal_default_instance()) delete tail_line_end_;
}

void BaseShapeStylePropertyChangeSetArchive::ArenaDtor(void* object) {
  BaseShapeStylePropertyChangeSetArchive* _this = reinterpret_cast< BaseShapeStylePropertyChangeSetArchive* >(object);
  (void)_this;
}
void BaseShapeStylePropertyChangeSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseShapeStylePropertyChangeSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseShapeStylePropertyChangeSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fill_ != nullptr);
      fill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stroke_ != nullptr);
      stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(opacity_ != nullptr);
      opacity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(shadow_ != nullptr);
      shadow_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reflection_ != nullptr);
      reflection_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(head_line_end_ != nullptr);
      head_line_end_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tail_line_end_ != nullptr);
      tail_line_end_->Clear();
    }
  }
  fill_undefined_ = false;
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&stroke_undefined_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tail_line_end_undefined_) -
        reinterpret_cast<char*>(&stroke_undefined_)) + sizeof(tail_line_end_undefined_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseShapeStylePropertyChangeSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSDSOS.SpecFillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fill_undefined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fill_undefined(&has_bits);
          fill_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecStrokeArchive stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stroke_undefined = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stroke_undefined(&has_bits);
          stroke_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSSSOS.SpecDoubleArchive opacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_opacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool opacity_undefined = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_opacity_undefined(&has_bits);
          opacity_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecShadowArchive shadow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shadow_undefined = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_shadow_undefined(&has_bits);
          shadow_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecReflectionArchive reflection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_reflection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reflection_undefined = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_reflection_undefined(&has_bits);
          reflection_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecLineEndArchive head_line_end = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_line_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool head_line_end_undefined = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_head_line_end_undefined(&has_bits);
          head_line_end_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecLineEndArchive tail_line_end = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_line_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tail_line_end_undefined = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tail_line_end_undefined(&has_bits);
          tail_line_end_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseShapeStylePropertyChangeSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSDSOS.SpecFillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fill(this), target, stream);
  }

  // optional bool fill_undefined = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_fill_undefined(), target);
  }

  // optional .TSDSOS.SpecStrokeArchive stroke = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stroke(this), target, stream);
  }

  // optional bool stroke_undefined = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_stroke_undefined(), target);
  }

  // optional .TSSSOS.SpecDoubleArchive opacity = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::opacity(this), target, stream);
  }

  // optional bool opacity_undefined = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_opacity_undefined(), target);
  }

  // optional .TSDSOS.SpecShadowArchive shadow = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::shadow(this), target, stream);
  }

  // optional bool shadow_undefined = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_shadow_undefined(), target);
  }

  // optional .TSDSOS.SpecReflectionArchive reflection = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::reflection(this), target, stream);
  }

  // optional bool reflection_undefined = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_reflection_undefined(), target);
  }

  // optional .TSDSOS.SpecLineEndArchive head_line_end = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::head_line_end(this), target, stream);
  }

  // optional bool head_line_end_undefined = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_head_line_end_undefined(), target);
  }

  // optional .TSDSOS.SpecLineEndArchive tail_line_end = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tail_line_end(this), target, stream);
  }

  // optional bool tail_line_end_undefined = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_tail_line_end_undefined(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  return target;
}

size_t BaseShapeStylePropertyChangeSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSDSOS.SpecFillArchive fill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fill_);
    }

    // optional .TSDSOS.SpecStrokeArchive stroke = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stroke_);
    }

    // optional .TSSSOS.SpecDoubleArchive opacity = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *opacity_);
    }

    // optional .TSDSOS.SpecShadowArchive shadow = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shadow_);
    }

    // optional .TSDSOS.SpecReflectionArchive reflection = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reflection_);
    }

    // optional .TSDSOS.SpecLineEndArchive head_line_end = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *head_line_end_);
    }

    // optional .TSDSOS.SpecLineEndArchive tail_line_end = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tail_line_end_);
    }

    // optional bool fill_undefined = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool stroke_undefined = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool opacity_undefined = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool shadow_undefined = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool reflection_undefined = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool head_line_end_undefined = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool tail_line_end_undefined = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseShapeStylePropertyChangeSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseShapeStylePropertyChangeSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseShapeStylePropertyChangeSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
    MergeFrom(*source);
  }
}

void BaseShapeStylePropertyChangeSetArchive::MergeFrom(const BaseShapeStylePropertyChangeSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fill()->::TSDSOS::SpecFillArchive::MergeFrom(from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stroke()->::TSDSOS::SpecStrokeArchive::MergeFrom(from._internal_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_opacity()->::TSSSOS::SpecDoubleArchive::MergeFrom(from._internal_opacity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_shadow()->::TSDSOS::SpecShadowArchive::MergeFrom(from._internal_shadow());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_reflection()->::TSDSOS::SpecReflectionArchive::MergeFrom(from._internal_reflection());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_head_line_end()->::TSDSOS::SpecLineEndArchive::MergeFrom(from._internal_head_line_end());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tail_line_end()->::TSDSOS::SpecLineEndArchive::MergeFrom(from._internal_tail_line_end());
    }
    if (cached_has_bits & 0x00000080u) {
      fill_undefined_ = from.fill_undefined_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      stroke_undefined_ = from.stroke_undefined_;
    }
    if (cached_has_bits & 0x00000200u) {
      opacity_undefined_ = from.opacity_undefined_;
    }
    if (cached_has_bits & 0x00000400u) {
      shadow_undefined_ = from.shadow_undefined_;
    }
    if (cached_has_bits & 0x00000800u) {
      reflection_undefined_ = from.reflection_undefined_;
    }
    if (cached_has_bits & 0x00001000u) {
      head_line_end_undefined_ = from.head_line_end_undefined_;
    }
    if (cached_has_bits & 0x00002000u) {
      tail_line_end_undefined_ = from.tail_line_end_undefined_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BaseShapeStylePropertyChangeSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseShapeStylePropertyChangeSetArchive::CopyFrom(const BaseShapeStylePropertyChangeSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.BaseShapeStylePropertyChangeSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseShapeStylePropertyChangeSetArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!fill_->IsInitialized()) return false;
  }
  if (_internal_has_stroke()) {
    if (!stroke_->IsInitialized()) return false;
  }
  if (_internal_has_opacity()) {
    if (!opacity_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!shadow_->IsInitialized()) return false;
  }
  if (_internal_has_reflection()) {
    if (!reflection_->IsInitialized()) return false;
  }
  if (_internal_has_head_line_end()) {
    if (!head_line_end_->IsInitialized()) return false;
  }
  if (_internal_has_tail_line_end()) {
    if (!tail_line_end_->IsInitialized()) return false;
  }
  return true;
}

void BaseShapeStylePropertyChangeSetArchive::InternalSwap(BaseShapeStylePropertyChangeSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseShapeStylePropertyChangeSetArchive, tail_line_end_undefined_)
      + sizeof(BaseShapeStylePropertyChangeSetArchive::tail_line_end_undefined_)
      - PROTOBUF_FIELD_OFFSET(BaseShapeStylePropertyChangeSetArchive, fill_)>(
          reinterpret_cast<char*>(&fill_),
          reinterpret_cast<char*>(&other->fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseShapeStylePropertyChangeSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[10]);
}

// ===================================================================

class MediaStylePropertyChangeSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaStylePropertyChangeSetArchive>()._has_bits_);
  static const ::TSDSOS::SpecStrokeArchive& stroke(const MediaStylePropertyChangeSetArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stroke_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSSSOS::SpecDoubleArchive& opacity(const MediaStylePropertyChangeSetArchive* msg);
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opacity_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSDSOS::SpecShadowArchive& shadow(const MediaStylePropertyChangeSetArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shadow_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSDSOS::SpecReflectionArchive& reflection(const MediaStylePropertyChangeSetArchive* msg);
  static void set_has_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reflection_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::TSDSOS::SpecStrokeArchive&
MediaStylePropertyChangeSetArchive::_Internal::stroke(const MediaStylePropertyChangeSetArchive* msg) {
  return *msg->stroke_;
}
const ::TSSSOS::SpecDoubleArchive&
MediaStylePropertyChangeSetArchive::_Internal::opacity(const MediaStylePropertyChangeSetArchive* msg) {
  return *msg->opacity_;
}
const ::TSDSOS::SpecShadowArchive&
MediaStylePropertyChangeSetArchive::_Internal::shadow(const MediaStylePropertyChangeSetArchive* msg) {
  return *msg->shadow_;
}
const ::TSDSOS::SpecReflectionArchive&
MediaStylePropertyChangeSetArchive::_Internal::reflection(const MediaStylePropertyChangeSetArchive* msg) {
  return *msg->reflection_;
}
void MediaStylePropertyChangeSetArchive::clear_opacity() {
  if (opacity_ != nullptr) opacity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MediaStylePropertyChangeSetArchive::MediaStylePropertyChangeSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSDSOS.MediaStylePropertyChangeSetArchive)
}
MediaStylePropertyChangeSetArchive::MediaStylePropertyChangeSetArchive(const MediaStylePropertyChangeSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    stroke_ = new ::TSDSOS::SpecStrokeArchive(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  if (from._internal_has_opacity()) {
    opacity_ = new ::TSSSOS::SpecDoubleArchive(*from.opacity_);
  } else {
    opacity_ = nullptr;
  }
  if (from._internal_has_shadow()) {
    shadow_ = new ::TSDSOS::SpecShadowArchive(*from.shadow_);
  } else {
    shadow_ = nullptr;
  }
  if (from._internal_has_reflection()) {
    reflection_ = new ::TSDSOS::SpecReflectionArchive(*from.reflection_);
  } else {
    reflection_ = nullptr;
  }
  ::memcpy(&stroke_undefined_, &from.stroke_undefined_,
    static_cast<size_t>(reinterpret_cast<char*>(&reflection_undefined_) -
    reinterpret_cast<char*>(&stroke_undefined_)) + sizeof(reflection_undefined_));
  // @@protoc_insertion_point(copy_constructor:TSDSOS.MediaStylePropertyChangeSetArchive)
}

void MediaStylePropertyChangeSetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stroke_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reflection_undefined_) -
    reinterpret_cast<char*>(&stroke_)) + sizeof(reflection_undefined_));
}

MediaStylePropertyChangeSetArchive::~MediaStylePropertyChangeSetArchive() {
  // @@protoc_insertion_point(destructor:TSDSOS.MediaStylePropertyChangeSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaStylePropertyChangeSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stroke_;
  if (this != internal_default_instance()) delete opacity_;
  if (this != internal_default_instance()) delete shadow_;
  if (this != internal_default_instance()) delete reflection_;
}

void MediaStylePropertyChangeSetArchive::ArenaDtor(void* object) {
  MediaStylePropertyChangeSetArchive* _this = reinterpret_cast< MediaStylePropertyChangeSetArchive* >(object);
  (void)_this;
}
void MediaStylePropertyChangeSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaStylePropertyChangeSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaStylePropertyChangeSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stroke_ != nullptr);
      stroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(opacity_ != nullptr);
      opacity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(shadow_ != nullptr);
      shadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reflection_ != nullptr);
      reflection_->Clear();
    }
  }
  ::memset(&stroke_undefined_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reflection_undefined_) -
      reinterpret_cast<char*>(&stroke_undefined_)) + sizeof(reflection_undefined_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaStylePropertyChangeSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSDSOS.SpecStrokeArchive stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stroke_undefined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stroke_undefined(&has_bits);
          stroke_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSSSOS.SpecDoubleArchive opacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_opacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool opacity_undefined = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_opacity_undefined(&has_bits);
          opacity_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecShadowArchive shadow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shadow_undefined = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_shadow_undefined(&has_bits);
          shadow_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.SpecReflectionArchive reflection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reflection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reflection_undefined = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_reflection_undefined(&has_bits);
          reflection_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaStylePropertyChangeSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSDSOS.SpecStrokeArchive stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stroke(this), target, stream);
  }

  // optional bool stroke_undefined = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stroke_undefined(), target);
  }

  // optional .TSSSOS.SpecDoubleArchive opacity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::opacity(this), target, stream);
  }

  // optional bool opacity_undefined = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_opacity_undefined(), target);
  }

  // optional .TSDSOS.SpecShadowArchive shadow = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::shadow(this), target, stream);
  }

  // optional bool shadow_undefined = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_shadow_undefined(), target);
  }

  // optional .TSDSOS.SpecReflectionArchive reflection = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reflection(this), target, stream);
  }

  // optional bool reflection_undefined = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_reflection_undefined(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSDSOS.MediaStylePropertyChangeSetArchive)
  return target;
}

size_t MediaStylePropertyChangeSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSDSOS.SpecStrokeArchive stroke = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stroke_);
    }

    // optional .TSSSOS.SpecDoubleArchive opacity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *opacity_);
    }

    // optional .TSDSOS.SpecShadowArchive shadow = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shadow_);
    }

    // optional .TSDSOS.SpecReflectionArchive reflection = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reflection_);
    }

    // optional bool stroke_undefined = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool opacity_undefined = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool shadow_undefined = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool reflection_undefined = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaStylePropertyChangeSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaStylePropertyChangeSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaStylePropertyChangeSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSDSOS.MediaStylePropertyChangeSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSDSOS.MediaStylePropertyChangeSetArchive)
    MergeFrom(*source);
  }
}

void MediaStylePropertyChangeSetArchive::MergeFrom(const MediaStylePropertyChangeSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stroke()->::TSDSOS::SpecStrokeArchive::MergeFrom(from._internal_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_opacity()->::TSSSOS::SpecDoubleArchive::MergeFrom(from._internal_opacity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_shadow()->::TSDSOS::SpecShadowArchive::MergeFrom(from._internal_shadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reflection()->::TSDSOS::SpecReflectionArchive::MergeFrom(from._internal_reflection());
    }
    if (cached_has_bits & 0x00000010u) {
      stroke_undefined_ = from.stroke_undefined_;
    }
    if (cached_has_bits & 0x00000020u) {
      opacity_undefined_ = from.opacity_undefined_;
    }
    if (cached_has_bits & 0x00000040u) {
      shadow_undefined_ = from.shadow_undefined_;
    }
    if (cached_has_bits & 0x00000080u) {
      reflection_undefined_ = from.reflection_undefined_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaStylePropertyChangeSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaStylePropertyChangeSetArchive::CopyFrom(const MediaStylePropertyChangeSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSDSOS.MediaStylePropertyChangeSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStylePropertyChangeSetArchive::IsInitialized() const {
  if (_internal_has_stroke()) {
    if (!stroke_->IsInitialized()) return false;
  }
  if (_internal_has_opacity()) {
    if (!opacity_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!shadow_->IsInitialized()) return false;
  }
  if (_internal_has_reflection()) {
    if (!reflection_->IsInitialized()) return false;
  }
  return true;
}

void MediaStylePropertyChangeSetArchive::InternalSwap(MediaStylePropertyChangeSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaStylePropertyChangeSetArchive, reflection_undefined_)
      + sizeof(MediaStylePropertyChangeSetArchive::reflection_undefined_)
      - PROTOBUF_FIELD_OFFSET(MediaStylePropertyChangeSetArchive, stroke_)>(
          reinterpret_cast<char*>(&stroke_),
          reinterpret_cast<char*>(&other->stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaStylePropertyChangeSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2esos_2eproto_getter, &descriptor_table_TSDArchives_2esos_2eproto_once,
      file_level_metadata_TSDArchives_2esos_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSDSOS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetFillArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecSetFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetFillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetLineEndArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecSetLineEndArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetLineEndArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetReflectionArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecSetReflectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetReflectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetShadowArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecSetShadowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetShadowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecSetStrokeArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecSetStrokeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecSetStrokeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecFillArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecFillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecLineEndArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecLineEndArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecLineEndArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecReflectionArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecReflectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecReflectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecShadowArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecShadowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecShadowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::SpecStrokeArchive* Arena::CreateMaybeMessage< ::TSDSOS::SpecStrokeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::SpecStrokeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* Arena::CreateMaybeMessage< ::TSDSOS::BaseShapeStylePropertyChangeSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::BaseShapeStylePropertyChangeSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSDSOS::MediaStylePropertyChangeSetArchive* Arena::CreateMaybeMessage< ::TSDSOS::MediaStylePropertyChangeSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSDSOS::MediaStylePropertyChangeSetArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
