// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHCommandArchives.proto

#include "TSCHCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSCH {
constexpr StyleOwnerPath::StyleOwnerPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuids_(){}
struct StyleOwnerPathDefaultTypeInternal {
  constexpr StyleOwnerPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleOwnerPathDefaultTypeInternal() {}
  union {
    StyleOwnerPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleOwnerPathDefaultTypeInternal _StyleOwnerPath_default_instance_;
constexpr CommandSetChartTypeArchive::CommandSetChartTypeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_ids_()
  , column_ids_()
  , old_row_ids_()
  , old_column_ids_()
  , rollback_row_ids_()
  , rollback_column_ids_()
  , super_(nullptr)
  , new_chart_type_(0)

  , old_chart_type_(0)

  , rollback_chart_type_(0)

  , uses_captured_data_(false)
  , use_default_data_(false){}
struct CommandSetChartTypeArchiveDefaultTypeInternal {
  constexpr CommandSetChartTypeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetChartTypeArchiveDefaultTypeInternal() {}
  union {
    CommandSetChartTypeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetChartTypeArchiveDefaultTypeInternal _CommandSetChartTypeArchive_default_instance_;
constexpr StyleSwapUndoTupleArchive::StyleSwapUndoTupleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chart_info_(nullptr)
  , old_value_(nullptr)
  , new_value_(nullptr)
  , ref_line_uuid_(nullptr)
  , index_(0u)
  , swap_type_(1)
{}
struct StyleSwapUndoTupleArchiveDefaultTypeInternal {
  constexpr StyleSwapUndoTupleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleSwapUndoTupleArchiveDefaultTypeInternal() {}
  union {
    StyleSwapUndoTupleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleSwapUndoTupleArchiveDefaultTypeInternal _StyleSwapUndoTupleArchive_default_instance_;
constexpr StyleSwapUndoTuplesArchive::StyleSwapUndoTuplesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : swap_tuples_(){}
struct StyleSwapUndoTuplesArchiveDefaultTypeInternal {
  constexpr StyleSwapUndoTuplesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleSwapUndoTuplesArchiveDefaultTypeInternal() {}
  union {
    StyleSwapUndoTuplesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleSwapUndoTuplesArchiveDefaultTypeInternal _StyleSwapUndoTuplesArchive_default_instance_;
constexpr CommandStyleSwapArchive::CommandStyleSwapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : undo_tuples_()
  , super_(nullptr){}
struct CommandStyleSwapArchiveDefaultTypeInternal {
  constexpr CommandStyleSwapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandStyleSwapArchiveDefaultTypeInternal() {}
  union {
    CommandStyleSwapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandStyleSwapArchiveDefaultTypeInternal _CommandStyleSwapArchive_default_instance_;
constexpr CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chart_map_(nullptr)
  , legend_map_(nullptr)
  , axis_map_(nullptr)
  , series_map_(nullptr)
  , reference_line_map_(nullptr){}
struct CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnionDefaultTypeInternal {
  constexpr CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnionDefaultTypeInternal() {}
  union {
    CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnionDefaultTypeInternal _CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion_default_instance_;
constexpr CommandMutatePropertiesArchive_GenericPropertyDeltaMap::CommandMutatePropertiesArchive_GenericPropertyDeltaMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : style_owner_path_(nullptr)
  , forward_map_(nullptr)
  , reverse_map_(nullptr){}
struct CommandMutatePropertiesArchive_GenericPropertyDeltaMapDefaultTypeInternal {
  constexpr CommandMutatePropertiesArchive_GenericPropertyDeltaMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMutatePropertiesArchive_GenericPropertyDeltaMapDefaultTypeInternal() {}
  union {
    CommandMutatePropertiesArchive_GenericPropertyDeltaMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMutatePropertiesArchive_GenericPropertyDeltaMapDefaultTypeInternal _CommandMutatePropertiesArchive_GenericPropertyDeltaMap_default_instance_;
constexpr CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : char_properties_(nullptr)
  , para_properties_(nullptr){}
struct CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal {
  constexpr CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal() {}
  union {
    CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal _CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive_default_instance_;
constexpr CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : style_owner_path_(nullptr)
  , forward_map_(nullptr)
  , reverse_map_(nullptr)
  , paragraph_style_index_property_(0u){}
struct CommandMutatePropertiesArchive_ParagraphStyleDeltaMapDefaultTypeInternal {
  constexpr CommandMutatePropertiesArchive_ParagraphStyleDeltaMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMutatePropertiesArchive_ParagraphStyleDeltaMapDefaultTypeInternal() {}
  union {
    CommandMutatePropertiesArchive_ParagraphStyleDeltaMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMutatePropertiesArchive_ParagraphStyleDeltaMapDefaultTypeInternal _CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_default_instance_;
constexpr CommandMutatePropertiesArchive::CommandMutatePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : generic_property_delta_maps_()
  , paragraph_style_delta_maps_()
  , super_(nullptr)
  , rollback_cmd_(nullptr)
  , initiatedonweb_(false){}
struct CommandMutatePropertiesArchiveDefaultTypeInternal {
  constexpr CommandMutatePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMutatePropertiesArchiveDefaultTypeInternal() {}
  union {
    CommandMutatePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMutatePropertiesArchiveDefaultTypeInternal _CommandMutatePropertiesArchive_default_instance_;
constexpr CommandScaleAllTextArchive::CommandScaleAllTextArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , rollback_cmd_(nullptr)
  , scale_factor_(0){}
struct CommandScaleAllTextArchiveDefaultTypeInternal {
  constexpr CommandScaleAllTextArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandScaleAllTextArchiveDefaultTypeInternal() {}
  union {
    CommandScaleAllTextArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandScaleAllTextArchiveDefaultTypeInternal _CommandScaleAllTextArchive_default_instance_;
constexpr CommandSetFontFamilyArchive_StyleSemanticTag::CommandSetFontFamilyArchive_StyleSemanticTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0u)
  , swap_type_(1)
{}
struct CommandSetFontFamilyArchive_StyleSemanticTagDefaultTypeInternal {
  constexpr CommandSetFontFamilyArchive_StyleSemanticTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetFontFamilyArchive_StyleSemanticTagDefaultTypeInternal() {}
  union {
    CommandSetFontFamilyArchive_StyleSemanticTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetFontFamilyArchive_StyleSemanticTagDefaultTypeInternal _CommandSetFontFamilyArchive_StyleSemanticTag_default_instance_;
constexpr CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : char_properties_(nullptr)
  , para_properties_(nullptr){}
struct CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal {
  constexpr CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal() {}
  union {
    CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal _CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive_default_instance_;
constexpr CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : style_semantic_tag_(nullptr)
  , forward_map_(nullptr)
  , reverse_map_(nullptr)
  , paragraph_style_index_property_(0u){}
struct CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMapDefaultTypeInternal {
  constexpr CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMapDefaultTypeInternal() {}
  union {
    CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMapDefaultTypeInternal _CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_default_instance_;
constexpr CommandSetFontFamilyArchive::CommandSetFontFamilyArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paragraph_style_delta_maps_()
  , new_font_family_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , old_font_family_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , rollback_cmd_(nullptr)
  , is_bold_(false)
  , is_italic_(false){}
struct CommandSetFontFamilyArchiveDefaultTypeInternal {
  constexpr CommandSetFontFamilyArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetFontFamilyArchiveDefaultTypeInternal() {}
  union {
    CommandSetFontFamilyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetFontFamilyArchiveDefaultTypeInternal _CommandSetFontFamilyArchive_default_instance_;
constexpr CommandApplyFillSetArchive::CommandApplyFillSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prior_last_applied_fill_set_lookup_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , fill_set_(nullptr)
  , old_fill_set_(nullptr)
  , rollback_cmd_(nullptr)
  , chart_type_(0)
{}
struct CommandApplyFillSetArchiveDefaultTypeInternal {
  constexpr CommandApplyFillSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandApplyFillSetArchiveDefaultTypeInternal() {}
  union {
    CommandApplyFillSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandApplyFillSetArchiveDefaultTypeInternal _CommandApplyFillSetArchive_default_instance_;
constexpr CommandSetSeriesNameArchive::CommandSetSeriesNameArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oldname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , newname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , seriesindex_(0u){}
struct CommandSetSeriesNameArchiveDefaultTypeInternal {
  constexpr CommandSetSeriesNameArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetSeriesNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetSeriesNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetSeriesNameArchiveDefaultTypeInternal _CommandSetSeriesNameArchive_default_instance_;
constexpr CommandSetCategoryNameArchive::CommandSetCategoryNameArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oldname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , newname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , categoryindex_(0u)
  , ismultidataindex_(false){}
struct CommandSetCategoryNameArchiveDefaultTypeInternal {
  constexpr CommandSetCategoryNameArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetCategoryNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetCategoryNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetCategoryNameArchiveDefaultTypeInternal _CommandSetCategoryNameArchive_default_instance_;
constexpr CommandAddGridRowsArchive::CommandAddGridRowsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_id_list_()
  , row_name_list_()
  , super_(nullptr)
  , row_id_(nullptr)
  , undo_deletion_start_id_(nullptr)
  , undo_deletion_end_id_(nullptr){}
struct CommandAddGridRowsArchiveDefaultTypeInternal {
  constexpr CommandAddGridRowsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandAddGridRowsArchiveDefaultTypeInternal() {}
  union {
    CommandAddGridRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandAddGridRowsArchiveDefaultTypeInternal _CommandAddGridRowsArchive_default_instance_;
constexpr CommandAddGridColumnsArchive::CommandAddGridColumnsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_id_list_()
  , column_name_list_()
  , super_(nullptr)
  , column_id_(nullptr)
  , undo_deletion_start_id_(nullptr)
  , undo_deletion_end_id_(nullptr){}
struct CommandAddGridColumnsArchiveDefaultTypeInternal {
  constexpr CommandAddGridColumnsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandAddGridColumnsArchiveDefaultTypeInternal() {}
  union {
    CommandAddGridColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandAddGridColumnsArchiveDefaultTypeInternal _CommandAddGridColumnsArchive_default_instance_;
constexpr CommandMoveGridRowsArchive::CommandMoveGridRowsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , start_row_id_(nullptr)
  , end_row_id_(nullptr)
  , after_row_id_(nullptr)
  , undo_after_row_id_(nullptr){}
struct CommandMoveGridRowsArchiveDefaultTypeInternal {
  constexpr CommandMoveGridRowsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMoveGridRowsArchiveDefaultTypeInternal() {}
  union {
    CommandMoveGridRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMoveGridRowsArchiveDefaultTypeInternal _CommandMoveGridRowsArchive_default_instance_;
constexpr CommandMoveGridColumnsArchive::CommandMoveGridColumnsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , start_column_id_(nullptr)
  , end_column_id_(nullptr)
  , after_column_id_(nullptr)
  , undo_after_column_id_(nullptr){}
struct CommandMoveGridColumnsArchiveDefaultTypeInternal {
  constexpr CommandMoveGridColumnsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMoveGridColumnsArchiveDefaultTypeInternal() {}
  union {
    CommandMoveGridColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMoveGridColumnsArchiveDefaultTypeInternal _CommandMoveGridColumnsArchive_default_instance_;
constexpr CommandDeleteGridRowsArchive::CommandDeleteGridRowsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cut_row_names_()
  , cut_values_()
  , undo_row_id_list_()
  , cut_column_names_()
  , undo_column_id_list_()
  , super_(nullptr)
  , start_row_id_(nullptr)
  , end_row_id_(nullptr)
  , undo_column_insertion_id_(nullptr)
  , undo_row_insertion_id_(nullptr)
  , undo_discards_values_(false){}
struct CommandDeleteGridRowsArchiveDefaultTypeInternal {
  constexpr CommandDeleteGridRowsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDeleteGridRowsArchiveDefaultTypeInternal() {}
  union {
    CommandDeleteGridRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDeleteGridRowsArchiveDefaultTypeInternal _CommandDeleteGridRowsArchive_default_instance_;
constexpr CommandDeleteGridColumnsArchive::CommandDeleteGridColumnsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cut_names_()
  , cut_values_()
  , undo_column_id_list_()
  , cut_row_names_()
  , undo_row_id_list_()
  , super_(nullptr)
  , start_column_id_(nullptr)
  , end_column_id_(nullptr)
  , undo_column_insertion_id_(nullptr)
  , undo_row_insertion_id_(nullptr)
  , undo_discards_values_(false){}
struct CommandDeleteGridColumnsArchiveDefaultTypeInternal {
  constexpr CommandDeleteGridColumnsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDeleteGridColumnsArchiveDefaultTypeInternal() {}
  union {
    CommandDeleteGridColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDeleteGridColumnsArchiveDefaultTypeInternal _CommandDeleteGridColumnsArchive_default_instance_;
constexpr CommandSetGridValueArchive::CommandSetGridValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , rowindex_(0u)
  , columnindex_(0u)
  , oldvalue_(0)
  , newvalue_(0){}
struct CommandSetGridValueArchiveDefaultTypeInternal {
  constexpr CommandSetGridValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetGridValueArchiveDefaultTypeInternal() {}
  union {
    CommandSetGridValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetGridValueArchiveDefaultTypeInternal _CommandSetGridValueArchive_default_instance_;
constexpr CommandSetGridDirectionArchive::CommandSetGridDirectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_direction_(0u)
  , new_direction_(0u){}
struct CommandSetGridDirectionArchiveDefaultTypeInternal {
  constexpr CommandSetGridDirectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetGridDirectionArchiveDefaultTypeInternal() {}
  union {
    CommandSetGridDirectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetGridDirectionArchiveDefaultTypeInternal _CommandSetGridDirectionArchive_default_instance_;
constexpr CommandSetSeriesTypeArchive::CommandSetSeriesTypeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , seriesindex_(0u)
  , oldtype_(0u)
  , newtype_(0u){}
struct CommandSetSeriesTypeArchiveDefaultTypeInternal {
  constexpr CommandSetSeriesTypeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetSeriesTypeArchiveDefaultTypeInternal() {}
  union {
    CommandSetSeriesTypeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetSeriesTypeArchiveDefaultTypeInternal _CommandSetSeriesTypeArchive_default_instance_;
constexpr CommandSetScatterFormatArchive::CommandSetScatterFormatArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , oldformat_(0u)
  , newformat_(0u){}
struct CommandSetScatterFormatArchiveDefaultTypeInternal {
  constexpr CommandSetScatterFormatArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetScatterFormatArchiveDefaultTypeInternal() {}
  union {
    CommandSetScatterFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetScatterFormatArchiveDefaultTypeInternal _CommandSetScatterFormatArchive_default_instance_;
constexpr CommandSetMultiDataSetIndexArchive::CommandSetMultiDataSetIndexArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , oldindex_(0u)
  , newindex_(0u){}
struct CommandSetMultiDataSetIndexArchiveDefaultTypeInternal {
  constexpr CommandSetMultiDataSetIndexArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetMultiDataSetIndexArchiveDefaultTypeInternal() {}
  union {
    CommandSetMultiDataSetIndexArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetMultiDataSetIndexArchiveDefaultTypeInternal _CommandSetMultiDataSetIndexArchive_default_instance_;
constexpr CommandSetLegendFrameArchive::CommandSetLegendFrameArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_legend_frame_(nullptr)
  , new_legend_frame_(nullptr){}
struct CommandSetLegendFrameArchiveDefaultTypeInternal {
  constexpr CommandSetLegendFrameArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetLegendFrameArchiveDefaultTypeInternal() {}
  union {
    CommandSetLegendFrameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetLegendFrameArchiveDefaultTypeInternal _CommandSetLegendFrameArchive_default_instance_;
constexpr CommandSetPieWedgeExplosion::CommandSetPieWedgeExplosion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : series_indices_()
  , wedge_explosions_()
  , old_series_indices_()
  , old_wedge_explosions_()
  , super_(nullptr)
  , rollback_cmd_(nullptr){}
struct CommandSetPieWedgeExplosionDefaultTypeInternal {
  constexpr CommandSetPieWedgeExplosionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetPieWedgeExplosionDefaultTypeInternal() {}
  union {
    CommandSetPieWedgeExplosion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetPieWedgeExplosionDefaultTypeInternal _CommandSetPieWedgeExplosion_default_instance_;
constexpr CommandChartApplyTheme::CommandChartApplyTheme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , info_(nullptr)
  , swap_command_(nullptr)
  , preset_(nullptr){}
struct CommandChartApplyThemeDefaultTypeInternal {
  constexpr CommandChartApplyThemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChartApplyThemeDefaultTypeInternal() {}
  union {
    CommandChartApplyTheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChartApplyThemeDefaultTypeInternal _CommandChartApplyTheme_default_instance_;
constexpr CommandChartApplyPreset::CommandChartApplyPreset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : swap_tuples_()
  , inverse_swap_tuples_()
  , rollback_swap_tuples_()
  , super_(nullptr)
  , preset_(nullptr)
  , old_preset_(nullptr)
  , rollback_preset_(nullptr)
  , should_apply_swap_tuples_(false)
  , are_swap_tuples_valid_(false)
  , behavior_(1)
{}
struct CommandChartApplyPresetDefaultTypeInternal {
  constexpr CommandChartApplyPresetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChartApplyPresetDefaultTypeInternal() {}
  union {
    CommandChartApplyPreset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChartApplyPresetDefaultTypeInternal _CommandChartApplyPreset_default_instance_;
constexpr CommandCleanupGeometryArchive::CommandCleanupGeometryArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , info_geometry_command_(nullptr)
  , anchor_attachment_command_(nullptr)
  , original_legend_rect_(nullptr){}
struct CommandCleanupGeometryArchiveDefaultTypeInternal {
  constexpr CommandCleanupGeometryArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandCleanupGeometryArchiveDefaultTypeInternal() {}
  union {
    CommandCleanupGeometryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandCleanupGeometryArchiveDefaultTypeInternal _CommandCleanupGeometryArchive_default_instance_;
constexpr ChartCommandArchive::ChartCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , chart_info_(nullptr)
  , chart_info_id_path_(nullptr)
  , original_dirty_state_(false)
  , is_for_forward_undo_redo_(false){}
struct ChartCommandArchiveDefaultTypeInternal {
  constexpr ChartCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartCommandArchiveDefaultTypeInternal() {}
  union {
    ChartCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartCommandArchiveDefaultTypeInternal _ChartCommandArchive_default_instance_;
constexpr CommandReplaceGridValuesArchive::CommandReplaceGridValuesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_data_rows_()
  , new_data_rows_()
  , old_row_names_()
  , new_row_names_()
  , old_col_names_()
  , new_col_names_()
  , update_row_uuids_()
  , update_column_uuids_()
  , add_row_uuids_()
  , add_column_uuids_()
  , delete_row_uuids_()
  , delete_column_uuids_()
  , super_(nullptr)
  , set_series_direction_(false)
  , new_series_direction_(0u){}
struct CommandReplaceGridValuesArchiveDefaultTypeInternal {
  constexpr CommandReplaceGridValuesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandReplaceGridValuesArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceGridValuesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandReplaceGridValuesArchiveDefaultTypeInternal _CommandReplaceGridValuesArchive_default_instance_;
constexpr CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CommandReplaceThemePresetArchive_StyleAndIdentifierPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(nullptr){}
struct CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal {
  constexpr CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal() {}
  union {
    CommandReplaceThemePresetArchive_StyleAndIdentifierPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal _CommandReplaceThemePresetArchive_StyleAndIdentifierPair_default_instance_;
constexpr CommandReplaceThemePresetArchive::CommandReplaceThemePresetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiers_()
  , super_(nullptr)
  , theme_(nullptr)
  , old_preset_(nullptr)
  , new_preset_(nullptr)
  , old_preset_index_(PROTOBUF_ULONGLONG(0)){}
struct CommandReplaceThemePresetArchiveDefaultTypeInternal {
  constexpr CommandReplaceThemePresetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandReplaceThemePresetArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceThemePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandReplaceThemePresetArchiveDefaultTypeInternal _CommandReplaceThemePresetArchive_default_instance_;
constexpr CommandInvalidateWPCaches::CommandInvalidateWPCaches(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct CommandInvalidateWPCachesDefaultTypeInternal {
  constexpr CommandInvalidateWPCachesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandInvalidateWPCachesDefaultTypeInternal() {}
  union {
    CommandInvalidateWPCaches _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandInvalidateWPCachesDefaultTypeInternal _CommandInvalidateWPCaches_default_instance_;
constexpr CommandReplaceCustomFormatArchive_FormatObjectMutation::CommandReplaceCustomFormatArchive_FormatObjectMutation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_object_(nullptr)
  , style_owner_index_(0u)
  , format_object_property_(0u)
  , style_owner_type_(1)
{}
struct CommandReplaceCustomFormatArchive_FormatObjectMutationDefaultTypeInternal {
  constexpr CommandReplaceCustomFormatArchive_FormatObjectMutationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandReplaceCustomFormatArchive_FormatObjectMutationDefaultTypeInternal() {}
  union {
    CommandReplaceCustomFormatArchive_FormatObjectMutation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandReplaceCustomFormatArchive_FormatObjectMutationDefaultTypeInternal _CommandReplaceCustomFormatArchive_FormatObjectMutation_default_instance_;
constexpr CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_mutations_()
  , reverse_mutations_()
  , super_(nullptr)
  , rollback_cmd_(nullptr)
  , old_format_object_(nullptr)
  , new_format_object_(nullptr){}
struct CommandReplaceCustomFormatArchiveDefaultTypeInternal {
  constexpr CommandReplaceCustomFormatArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandReplaceCustomFormatArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceCustomFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandReplaceCustomFormatArchiveDefaultTypeInternal _CommandReplaceCustomFormatArchive_default_instance_;
constexpr CommandAddReferenceLineArchive::CommandAddReferenceLineArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paragraph_styles_()
  , rollback_commands_()
  , super_(nullptr)
  , axis_id_(nullptr)
  , uuid_(nullptr)
  , non_style_(nullptr)
  , style_(nullptr){}
struct CommandAddReferenceLineArchiveDefaultTypeInternal {
  constexpr CommandAddReferenceLineArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandAddReferenceLineArchiveDefaultTypeInternal() {}
  union {
    CommandAddReferenceLineArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandAddReferenceLineArchiveDefaultTypeInternal _CommandAddReferenceLineArchive_default_instance_;
constexpr CommandDeleteReferenceLineArchive::CommandDeleteReferenceLineArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paragraph_styles_()
  , super_(nullptr)
  , axis_id_(nullptr)
  , uuid_(nullptr)
  , non_style_(nullptr)
  , style_(nullptr)
  , style_swap_command_(nullptr){}
struct CommandDeleteReferenceLineArchiveDefaultTypeInternal {
  constexpr CommandDeleteReferenceLineArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDeleteReferenceLineArchiveDefaultTypeInternal() {}
  union {
    CommandDeleteReferenceLineArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDeleteReferenceLineArchiveDefaultTypeInternal _CommandDeleteReferenceLineArchive_default_instance_;
constexpr CommandPasteStyleArchive::CommandPasteStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subselection_()
  , super_(nullptr)
  , style_swap_command_(nullptr)
  , inverse_chart_style_state_(nullptr)
  , chart_style_state_(nullptr)
  , shape_style_(nullptr){}
struct CommandPasteStyleArchiveDefaultTypeInternal {
  constexpr CommandPasteStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandPasteStyleArchiveDefaultTypeInternal() {}
  union {
    CommandPasteStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandPasteStyleArchiveDefaultTypeInternal _CommandPasteStyleArchive_default_instance_;
constexpr CommandReplaceImageDataArchive::CommandReplaceImageDataArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , style_swap_command_(nullptr)
  , inverse_chart_style_state_(nullptr)
  , chart_style_state_(nullptr){}
struct CommandReplaceImageDataArchiveDefaultTypeInternal {
  constexpr CommandReplaceImageDataArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandReplaceImageDataArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceImageDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandReplaceImageDataArchiveDefaultTypeInternal _CommandReplaceImageDataArchive_default_instance_;
constexpr CommandInducedReplaceChartGrid::CommandInducedReplaceChartGrid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct CommandInducedReplaceChartGridDefaultTypeInternal {
  constexpr CommandInducedReplaceChartGridDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandInducedReplaceChartGridDefaultTypeInternal() {}
  union {
    CommandInducedReplaceChartGrid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandInducedReplaceChartGridDefaultTypeInternal _CommandInducedReplaceChartGrid_default_instance_;
constexpr CommandInduced3DChartGeometry::CommandInduced3DChartGeometry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct CommandInduced3DChartGeometryDefaultTypeInternal {
  constexpr CommandInduced3DChartGeometryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandInduced3DChartGeometryDefaultTypeInternal() {}
  union {
    CommandInduced3DChartGeometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandInduced3DChartGeometryDefaultTypeInternal _CommandInduced3DChartGeometry_default_instance_;
constexpr ChartTextSelectionTransformerArchive::ChartTextSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_(nullptr){}
struct ChartTextSelectionTransformerArchiveDefaultTypeInternal {
  constexpr ChartTextSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartTextSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ChartTextSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartTextSelectionTransformerArchiveDefaultTypeInternal _ChartTextSelectionTransformerArchive_default_instance_;
constexpr ChartDrawableSelectionTransformerArchive::ChartDrawableSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ChartDrawableSelectionTransformerArchiveDefaultTypeInternal {
  constexpr ChartDrawableSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartDrawableSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ChartDrawableSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartDrawableSelectionTransformerArchiveDefaultTypeInternal _ChartDrawableSelectionTransformerArchive_default_instance_;
constexpr ChartSubselectionTransformerHelperArchive::ChartSubselectionTransformerHelperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_(nullptr){}
struct ChartSubselectionTransformerHelperArchiveDefaultTypeInternal {
  constexpr ChartSubselectionTransformerHelperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSubselectionTransformerHelperArchiveDefaultTypeInternal() {}
  union {
    ChartSubselectionTransformerHelperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSubselectionTransformerHelperArchiveDefaultTypeInternal _ChartSubselectionTransformerHelperArchive_default_instance_;
constexpr ChartRefLineSubselectionTransformerHelperArchive::ChartRefLineSubselectionTransformerHelperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selected_reference_line_uuids_()
  , super_(nullptr){}
struct ChartRefLineSubselectionTransformerHelperArchiveDefaultTypeInternal {
  constexpr ChartRefLineSubselectionTransformerHelperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartRefLineSubselectionTransformerHelperArchiveDefaultTypeInternal() {}
  union {
    ChartRefLineSubselectionTransformerHelperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartRefLineSubselectionTransformerHelperArchiveDefaultTypeInternal _ChartRefLineSubselectionTransformerHelperArchive_default_instance_;
constexpr ChartSubselectionIdentityTransformerHelperArchive::ChartSubselectionIdentityTransformerHelperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ChartSubselectionIdentityTransformerHelperArchiveDefaultTypeInternal {
  constexpr ChartSubselectionIdentityTransformerHelperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSubselectionIdentityTransformerHelperArchiveDefaultTypeInternal() {}
  union {
    ChartSubselectionIdentityTransformerHelperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSubselectionIdentityTransformerHelperArchiveDefaultTypeInternal _ChartSubselectionIdentityTransformerHelperArchive_default_instance_;
constexpr ChartSubselectionTransformerArchive::ChartSubselectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_(nullptr)
  , helper_(nullptr){}
struct ChartSubselectionTransformerArchiveDefaultTypeInternal {
  constexpr ChartSubselectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSubselectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ChartSubselectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSubselectionTransformerArchiveDefaultTypeInternal _ChartSubselectionTransformerArchive_default_instance_;
constexpr CDESelectionTransformerArchive::CDESelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cde_selection_(nullptr){}
struct CDESelectionTransformerArchiveDefaultTypeInternal {
  constexpr CDESelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDESelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    CDESelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDESelectionTransformerArchiveDefaultTypeInternal _CDESelectionTransformerArchive_default_instance_;
}  // namespace TSCH
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSCHCommandArchives_2eproto[54];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSCHCommandArchives_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSCHCommandArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSCHCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleOwnerPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleOwnerPath, uuids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, new_chart_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, old_chart_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, rollback_chart_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, row_ids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, column_ids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, old_row_ids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, old_column_ids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, rollback_row_ids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, rollback_column_ids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, uses_captured_data_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, use_default_data_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, chart_info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, swap_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, old_value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, new_value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, ref_line_uuid_),
  0,
  5,
  4,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTuplesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTuplesArchive, swap_tuples_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandStyleSwapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandStyleSwapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandStyleSwapArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandStyleSwapArchive, undo_tuples_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion, chart_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion, legend_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion, axis_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion, series_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion, reference_line_map_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap, style_owner_path_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap, forward_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap, reverse_map_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive, char_properties_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive, para_properties_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap, style_owner_path_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap, paragraph_style_index_property_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap, forward_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap, reverse_map_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive, rollback_cmd_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive, generic_property_delta_maps_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive, paragraph_style_delta_maps_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMutatePropertiesArchive, initiatedonweb_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandScaleAllTextArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandScaleAllTextArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandScaleAllTextArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandScaleAllTextArchive, rollback_cmd_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandScaleAllTextArchive, scale_factor_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag, swap_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag, index_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive, char_properties_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive, para_properties_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap, style_semantic_tag_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap, paragraph_style_index_property_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap, forward_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap, reverse_map_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive, rollback_cmd_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive, new_font_family_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive, old_font_family_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive, paragraph_style_delta_maps_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive, is_bold_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetFontFamilyArchive, is_italic_),
  2,
  3,
  0,
  1,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandApplyFillSetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandApplyFillSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandApplyFillSetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandApplyFillSetArchive, chart_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandApplyFillSetArchive, fill_set_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandApplyFillSetArchive, old_fill_set_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandApplyFillSetArchive, prior_last_applied_fill_set_lookup_string_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandApplyFillSetArchive, rollback_cmd_),
  1,
  5,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, seriesindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, oldname_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, newname_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, categoryindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, oldname_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, newname_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, ismultidataindex_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, row_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, row_id_list_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, row_name_list_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, undo_deletion_start_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, undo_deletion_end_id_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, column_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, column_id_list_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, column_name_list_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, undo_deletion_start_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, undo_deletion_end_id_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, start_row_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, end_row_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, after_row_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, undo_after_row_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, start_column_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, end_column_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, after_column_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, undo_after_column_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, start_row_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, end_row_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, cut_row_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, cut_values_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, undo_discards_values_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, undo_column_insertion_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, undo_row_insertion_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, undo_row_id_list_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, cut_column_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, undo_column_id_list_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  5,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, start_column_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, end_column_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, cut_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, cut_values_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, undo_discards_values_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, undo_column_insertion_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, undo_row_insertion_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, undo_column_id_list_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, cut_row_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, undo_row_id_list_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  5,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, rowindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, columnindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, oldvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, newvalue_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, old_direction_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, new_direction_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, seriesindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, oldtype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, newtype_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, oldformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, newformat_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, oldindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, newindex_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, old_legend_frame_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, new_legend_frame_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, series_indices_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, wedge_explosions_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, old_series_indices_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, old_wedge_explosions_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, rollback_cmd_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, swap_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, preset_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, behavior_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, old_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, should_apply_swap_tuples_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, are_swap_tuples_valid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, swap_tuples_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, inverse_swap_tuples_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, rollback_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, rollback_swap_tuples_),
  0,
  6,
  1,
  2,
  4,
  5,
  ~0u,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, info_geometry_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, anchor_attachment_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, original_legend_rect_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, chart_info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, original_dirty_state_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, chart_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, is_for_forward_undo_redo_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, old_data_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, new_data_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, old_row_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, new_row_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, old_col_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, new_col_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, update_row_uuids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, update_column_uuids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, add_row_uuids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, add_column_uuids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, delete_row_uuids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, delete_column_uuids_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, set_series_direction_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, new_series_direction_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair, style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair, identifier_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, old_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, new_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, identifiers_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, old_preset_index_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInvalidateWPCaches, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInvalidateWPCaches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInvalidateWPCaches, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation, style_owner_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation, style_owner_index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation, format_object_property_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation, format_object_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive, rollback_cmd_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive, old_format_object_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive, new_format_object_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive, forward_mutations_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceCustomFormatArchive, reverse_mutations_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddReferenceLineArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddReferenceLineArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddReferenceLineArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddReferenceLineArchive, axis_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddReferenceLineArchive, uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddReferenceLineArchive, non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddReferenceLineArchive, style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddReferenceLineArchive, paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddReferenceLineArchive, rollback_commands_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteReferenceLineArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteReferenceLineArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteReferenceLineArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteReferenceLineArchive, axis_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteReferenceLineArchive, uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteReferenceLineArchive, non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteReferenceLineArchive, style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteReferenceLineArchive, paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteReferenceLineArchive, style_swap_command_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandPasteStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandPasteStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandPasteStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandPasteStyleArchive, style_swap_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandPasteStyleArchive, inverse_chart_style_state_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandPasteStyleArchive, chart_style_state_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandPasteStyleArchive, shape_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandPasteStyleArchive, subselection_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceImageDataArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceImageDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceImageDataArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceImageDataArchive, style_swap_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceImageDataArchive, inverse_chart_style_state_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceImageDataArchive, chart_style_state_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInducedReplaceChartGrid, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInducedReplaceChartGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInducedReplaceChartGrid, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInduced3DChartGeometry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInduced3DChartGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInduced3DChartGeometry, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartTextSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartTextSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartTextSelectionTransformerArchive, selection_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableSelectionTransformerArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionTransformerHelperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionTransformerHelperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionTransformerHelperArchive, selection_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartRefLineSubselectionTransformerHelperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartRefLineSubselectionTransformerHelperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartRefLineSubselectionTransformerHelperArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartRefLineSubselectionTransformerHelperArchive, selected_reference_line_uuids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionIdentityTransformerHelperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionIdentityTransformerHelperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionIdentityTransformerHelperArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionTransformerArchive, selection_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSubselectionTransformerArchive, helper_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::CDESelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CDESelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::CDESelectionTransformerArchive, cde_selection_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TSCH::StyleOwnerPath)},
  { 6, 23, sizeof(::TSCH::CommandSetChartTypeArchive)},
  { 35, 46, sizeof(::TSCH::StyleSwapUndoTupleArchive)},
  { 52, -1, sizeof(::TSCH::StyleSwapUndoTuplesArchive)},
  { 58, 65, sizeof(::TSCH::CommandStyleSwapArchive)},
  { 67, 77, sizeof(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion)},
  { 82, 90, sizeof(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap)},
  { 93, 100, sizeof(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive)},
  { 102, 111, sizeof(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap)},
  { 115, 125, sizeof(::TSCH::CommandMutatePropertiesArchive)},
  { 130, 138, sizeof(::TSCH::CommandScaleAllTextArchive)},
  { 141, 148, sizeof(::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag)},
  { 150, 157, sizeof(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive)},
  { 159, 168, sizeof(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap)},
  { 172, 184, sizeof(::TSCH::CommandSetFontFamilyArchive)},
  { 191, 202, sizeof(::TSCH::CommandApplyFillSetArchive)},
  { 208, 217, sizeof(::TSCH::CommandSetSeriesNameArchive)},
  { 221, 231, sizeof(::TSCH::CommandSetCategoryNameArchive)},
  { 236, 247, sizeof(::TSCH::CommandAddGridRowsArchive)},
  { 253, 264, sizeof(::TSCH::CommandAddGridColumnsArchive)},
  { 270, 280, sizeof(::TSCH::CommandMoveGridRowsArchive)},
  { 285, 295, sizeof(::TSCH::CommandMoveGridColumnsArchive)},
  { 300, 316, sizeof(::TSCH::CommandDeleteGridRowsArchive)},
  { 327, 343, sizeof(::TSCH::CommandDeleteGridColumnsArchive)},
  { 354, 364, sizeof(::TSCH::CommandSetGridValueArchive)},
  { 369, 377, sizeof(::TSCH::CommandSetGridDirectionArchive)},
  { 380, 389, sizeof(::TSCH::CommandSetSeriesTypeArchive)},
  { 393, 401, sizeof(::TSCH::CommandSetScatterFormatArchive)},
  { 404, 412, sizeof(::TSCH::CommandSetMultiDataSetIndexArchive)},
  { 415, 423, sizeof(::TSCH::CommandSetLegendFrameArchive)},
  { 426, 437, sizeof(::TSCH::CommandSetPieWedgeExplosion)},
  { 443, 452, sizeof(::TSCH::CommandChartApplyTheme)},
  { 456, 471, sizeof(::TSCH::CommandChartApplyPreset)},
  { 481, 490, sizeof(::TSCH::CommandCleanupGeometryArchive)},
  { 494, 504, sizeof(::TSCH::ChartCommandArchive)},
  { 509, 529, sizeof(::TSCH::CommandReplaceGridValuesArchive)},
  { 544, 551, sizeof(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair)},
  { 553, 564, sizeof(::TSCH::CommandReplaceThemePresetArchive)},
  { 570, 576, sizeof(::TSCH::CommandInvalidateWPCaches)},
  { 577, 586, sizeof(::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation)},
  { 590, 601, sizeof(::TSCH::CommandReplaceCustomFormatArchive)},
  { 607, 619, sizeof(::TSCH::CommandAddReferenceLineArchive)},
  { 626, 638, sizeof(::TSCH::CommandDeleteReferenceLineArchive)},
  { 645, 656, sizeof(::TSCH::CommandPasteStyleArchive)},
  { 662, 671, sizeof(::TSCH::CommandReplaceImageDataArchive)},
  { 675, 681, sizeof(::TSCH::CommandInducedReplaceChartGrid)},
  { 682, 688, sizeof(::TSCH::CommandInduced3DChartGeometry)},
  { 689, 695, sizeof(::TSCH::ChartTextSelectionTransformerArchive)},
  { 696, 702, sizeof(::TSCH::ChartDrawableSelectionTransformerArchive)},
  { 703, 709, sizeof(::TSCH::ChartSubselectionTransformerHelperArchive)},
  { 710, 717, sizeof(::TSCH::ChartRefLineSubselectionTransformerHelperArchive)},
  { 719, 725, sizeof(::TSCH::ChartSubselectionIdentityTransformerHelperArchive)},
  { 726, 733, sizeof(::TSCH::ChartSubselectionTransformerArchive)},
  { 735, 741, sizeof(::TSCH::CDESelectionTransformerArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_StyleOwnerPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetChartTypeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_StyleSwapUndoTupleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_StyleSwapUndoTuplesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandStyleSwapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandMutatePropertiesArchive_GenericPropertyDeltaMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandMutatePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandScaleAllTextArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetFontFamilyArchive_StyleSemanticTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetFontFamilyArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandApplyFillSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetSeriesNameArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetCategoryNameArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandAddGridRowsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandAddGridColumnsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandMoveGridRowsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandMoveGridColumnsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandDeleteGridRowsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandDeleteGridColumnsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetGridValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetGridDirectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetSeriesTypeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetScatterFormatArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetMultiDataSetIndexArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetLegendFrameArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandSetPieWedgeExplosion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandChartApplyTheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandChartApplyPreset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandCleanupGeometryArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandReplaceGridValuesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandReplaceThemePresetArchive_StyleAndIdentifierPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandReplaceThemePresetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandInvalidateWPCaches_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandReplaceCustomFormatArchive_FormatObjectMutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandReplaceCustomFormatArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandAddReferenceLineArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandDeleteReferenceLineArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandPasteStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandReplaceImageDataArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandInducedReplaceChartGrid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CommandInduced3DChartGeometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartTextSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartDrawableSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSubselectionTransformerHelperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartRefLineSubselectionTransformerHelperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSubselectionIdentityTransformerHelperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSubselectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_CDESelectionTransformerArchive_default_instance_),
};

const char descriptor_table_protodef_TSCHCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031TSCHCommandArchives.proto\022\004TSCH\032\024TSCH3"
  "DArchives.proto\032\031TSCHArchives.Common.pro"
  "to\032\026TSCHArchives.GEN.proto\032\022TSCHArchives"
  ".proto\032\021TSDArchives.proto\032\030TSDCommandArc"
  "hives.proto\032\021TSKArchives.proto\032\021TSPMessa"
  "ges.proto\032\021TSSArchives.proto\032\022TSWPArchiv"
  "es.proto\"*\n\016StyleOwnerPath\022\030\n\005uuids\030\001 \003("
  "\0132\t.TSP.UUID\"\307\003\n\032CommandSetChartTypeArch"
  "ive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandAr"
  "chive\022\'\n\016new_chart_type\030\002 \001(\0162\017.TSCH.Cha"
  "rtType\022\'\n\016old_chart_type\030\003 \001(\0162\017.TSCH.Ch"
  "artType\022,\n\023rollback_chart_type\030\004 \001(\0162\017.T"
  "SCH.ChartType\022\032\n\007row_ids\030\005 \003(\0132\t.TSP.UUI"
  "D\022\035\n\ncolumn_ids\030\006 \003(\0132\t.TSP.UUID\022\036\n\013old_"
  "row_ids\030\007 \003(\0132\t.TSP.UUID\022!\n\016old_column_i"
  "ds\030\010 \003(\0132\t.TSP.UUID\022#\n\020rollback_row_ids\030"
  "\t \003(\0132\t.TSP.UUID\022&\n\023rollback_column_ids\030"
  "\n \003(\0132\t.TSP.UUID\022\032\n\022uses_captured_data\030\013"
  " \001(\010\022\030\n\020use_default_data\030\014 \001(\010\"\336\001\n\031Style"
  "SwapUndoTupleArchive\022\"\n\nchart_info\030\001 \001(\013"
  "2\016.TSP.Reference\022&\n\tswap_type\030\002 \001(\0162\023.TS"
  "CH.StyleSwapType\022\r\n\005index\030\003 \001(\r\022!\n\told_v"
  "alue\030\004 \001(\0132\016.TSP.Reference\022!\n\tnew_value\030"
  "\005 \001(\0132\016.TSP.Reference\022 \n\rref_line_uuid\030\006"
  " \001(\0132\t.TSP.UUID\"R\n\032StyleSwapUndoTuplesAr"
  "chive\0224\n\013swap_tuples\030\001 \003(\0132\037.TSCH.StyleS"
  "wapUndoTupleArchive\"y\n\027CommandStyleSwapA"
  "rchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComman"
  "dArchive\0224\n\013undo_tuples\030\002 \003(\0132\037.TSCH.Sty"
  "leSwapUndoTupleArchive\"\334\013\n\036CommandMutate"
  "PropertiesArchive\022(\n\005super\030\001 \002(\0132\031.TSCH."
  "ChartCommandArchive\022$\n\014rollback_cmd\030\002 \001("
  "\0132\016.TSP.Reference\022a\n\033generic_property_de"
  "lta_maps\030\003 \003(\0132<.TSCH.CommandMutatePrope"
  "rtiesArchive.GenericPropertyDeltaMap\022_\n\032"
  "paragraph_style_delta_maps\030\004 \003(\0132;.TSCH."
  "CommandMutatePropertiesArchive.Paragraph"
  "StyleDeltaMap\022\026\n\016initiatedOnWeb\030\005 \001(\010\032\217\005"
  "\n\027GenericPropertyDeltaMap\022.\n\020style_owner"
  "_path\030\001 \001(\0132\024.TSCH.StyleOwnerPath\022a\n\013for"
  "ward_map\030\002 \001(\0132L.TSCH.CommandMutatePrope"
  "rtiesArchive.GenericPropertyDeltaMap.Gen"
  "ericMapUnion\022a\n\013reverse_map\030\003 \001(\0132L.TSCH"
  ".CommandMutatePropertiesArchive.GenericP"
  "ropertyDeltaMap.GenericMapUnion\032\375\002\n\017Gene"
  "ricMapUnion\022A\n\tchart_map\030\002 \001(\0132..TSCH.Ge"
  "nerated.ChartGenericPropertyMapArchive\022C"
  "\n\nlegend_map\030\003 \001(\0132/.TSCH.Generated.Lege"
  "ndGenericPropertyMapArchive\022D\n\010axis_map\030"
  "\004 \001(\01322.TSCH.Generated.ChartAxisGenericP"
  "ropertyMapArchive\022H\n\nseries_map\030\005 \001(\01324."
  "TSCH.Generated.ChartSeriesGenericPropert"
  "yMapArchive\022R\n\022reference_line_map\030\006 \001(\0132"
  "6.TSCH.Generated.ReferenceLineGenericPro"
  "pertyMapArchive\032\373\003\n\026ParagraphStyleDeltaM"
  "ap\022.\n\020style_owner_path\030\001 \001(\0132\024.TSCH.Styl"
  "eOwnerPath\022&\n\036paragraph_style_index_prop"
  "erty\030\002 \001(\r\022q\n\013forward_map\030\003 \001(\0132\\.TSCH.C"
  "ommandMutatePropertiesArchive.ParagraphS"
  "tyleDeltaMap.ParagraphStylePropertyMapAr"
  "chive\022q\n\013reverse_map\030\004 \001(\0132\\.TSCH.Comman"
  "dMutatePropertiesArchive.ParagraphStyleD"
  "eltaMap.ParagraphStylePropertyMapArchive"
  "\032\242\001\n ParagraphStylePropertyMapArchive\022>\n"
  "\017char_properties\030\001 \001(\0132%.TSWP.CharacterS"
  "tylePropertiesArchive\022>\n\017para_properties"
  "\030\002 \001(\0132%.TSWP.ParagraphStylePropertiesAr"
  "chive\"\202\001\n\032CommandScaleAllTextArchive\022(\n\005"
  "super\030\001 \002(\0132\031.TSCH.ChartCommandArchive\022$"
  "\n\014rollback_cmd\030\002 \001(\0132\016.TSP.Reference\022\024\n\014"
  "scale_factor\030\003 \001(\001\"\260\007\n\033CommandSetFontFam"
  "ilyArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCo"
  "mmandArchive\022$\n\014rollback_cmd\030\002 \001(\0132\016.TSP"
  ".Reference\022\027\n\017new_font_family\030\003 \001(\t\022\027\n\017o"
  "ld_font_family\030\004 \001(\t\022g\n\032paragraph_style_"
  "delta_maps\030\005 \003(\0132C.TSCH.CommandSetFontFa"
  "milyArchive.SemanticParagraphStyleMutati"
  "onMap\022\017\n\007is_bold\030\006 \002(\010\022\021\n\tis_italic\030\007 \002("
  "\010\032I\n\020StyleSemanticTag\022&\n\tswap_type\030\001 \001(\016"
  "2\023.TSCH.StyleSwapType\022\r\n\005index\030\002 \001(\r\032\266\004\n"
  "!SemanticParagraphStyleMutationMap\022N\n\022st"
  "yle_semantic_tag\030\001 \001(\01322.TSCH.CommandSet"
  "FontFamilyArchive.StyleSemanticTag\022&\n\036pa"
  "ragraph_style_index_property\030\002 \001(\r\022y\n\013fo"
  "rward_map\030\003 \001(\0132d.TSCH.CommandSetFontFam"
  "ilyArchive.SemanticParagraphStyleMutatio"
  "nMap.ParagraphStylePropertyMapArchive\022y\n"
  "\013reverse_map\030\004 \001(\0132d.TSCH.CommandSetFont"
  "FamilyArchive.SemanticParagraphStyleMuta"
  "tionMap.ParagraphStylePropertyMapArchive"
  "\032\242\001\n ParagraphStylePropertyMapArchive\022>\n"
  "\017char_properties\030\001 \001(\0132%.TSWP.CharacterS"
  "tylePropertiesArchive\022>\n\017para_properties"
  "\030\002 \001(\0132%.TSWP.ParagraphStylePropertiesAr"
  "chive\"\242\002\n\032CommandApplyFillSetArchive\022(\n\005"
  "super\030\001 \002(\0132\031.TSCH.ChartCommandArchive\022#"
  "\n\nchart_type\030\002 \002(\0162\017.TSCH.ChartType\022+\n\010f"
  "ill_set\030\003 \002(\0132\031.TSCH.ChartFillSetArchive"
  "\022/\n\014old_fill_set\030\004 \001(\0132\031.TSCH.ChartFillS"
  "etArchive\0221\n)prior_last_applied_fill_set"
  "_lookup_string\030\005 \001(\t\022$\n\014rollback_cmd\030\006 \001"
  "(\0132\016.TSP.Reference\"~\n\033CommandSetSeriesNa"
  "meArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCom"
  "mandArchive\022\023\n\013seriesIndex\030\002 \002(\r\022\017\n\007oldN"
  "ame\030\003 \001(\t\022\017\n\007newName\030\004 \002(\t\"\234\001\n\035CommandSe"
  "tCategoryNameArchive\022(\n\005super\030\001 \002(\0132\031.TS"
  "CH.ChartCommandArchive\022\025\n\rcategoryIndex\030"
  "\002 \002(\r\022\017\n\007oldName\030\003 \001(\t\022\017\n\007newName\030\004 \002(\t\022"
  "\030\n\020isMultiDataIndex\030\005 \001(\010\"\353\001\n\031CommandAdd"
  "GridRowsArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Ch"
  "artCommandArchive\022\031\n\006row_id\030\002 \001(\0132\t.TSP."
  "UUID\022\036\n\013row_id_list\030\003 \003(\0132\t.TSP.UUID\022\025\n\r"
  "row_name_list\030\004 \003(\t\022)\n\026undo_deletion_sta"
  "rt_id\030\005 \001(\0132\t.TSP.UUID\022\'\n\024undo_deletion_"
  "end_id\030\006 \001(\0132\t.TSP.UUID\"\367\001\n\034CommandAddGr"
  "idColumnsArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.C"
  "hartCommandArchive\022\034\n\tcolumn_id\030\002 \001(\0132\t."
  "TSP.UUID\022!\n\016column_id_list\030\003 \003(\0132\t.TSP.U"
  "UID\022\030\n\020column_name_list\030\004 \003(\t\022)\n\026undo_de"
  "letion_start_id\030\005 \001(\0132\t.TSP.UUID\022\'\n\024undo"
  "_deletion_end_id\030\006 \001(\0132\t.TSP.UUID\"\315\001\n\032Co"
  "mmandMoveGridRowsArchive\022(\n\005super\030\001 \002(\0132"
  "\031.TSCH.ChartCommandArchive\022\037\n\014start_row_"
  "id\030\002 \002(\0132\t.TSP.UUID\022\035\n\nend_row_id\030\003 \002(\0132"
  "\t.TSP.UUID\022\037\n\014after_row_id\030\004 \001(\0132\t.TSP.U"
  "UID\022$\n\021undo_after_row_id\030\005 \001(\0132\t.TSP.UUI"
  "D\"\334\001\n\035CommandMoveGridColumnsArchive\022(\n\005s"
  "uper\030\001 \002(\0132\031.TSCH.ChartCommandArchive\022\"\n"
  "\017start_column_id\030\002 \002(\0132\t.TSP.UUID\022 \n\rend"
  "_column_id\030\003 \002(\0132\t.TSP.UUID\022\"\n\017after_col"
  "umn_id\030\004 \001(\0132\t.TSP.UUID\022\'\n\024undo_after_co"
  "lumn_id\030\005 \001(\0132\t.TSP.UUID\"\236\003\n\034CommandDele"
  "teGridRowsArchive\022(\n\005super\030\001 \002(\0132\031.TSCH."
  "ChartCommandArchive\022\037\n\014start_row_id\030\002 \002("
  "\0132\t.TSP.UUID\022\035\n\nend_row_id\030\003 \002(\0132\t.TSP.U"
  "UID\022\025\n\rcut_row_names\030\004 \003(\t\022!\n\ncut_values"
  "\030\005 \003(\0132\r.TSCH.GridRow\022\034\n\024undo_discards_v"
  "alues\030\006 \001(\010\022+\n\030undo_column_insertion_id\030"
  "\007 \001(\0132\t.TSP.UUID\022(\n\025undo_row_insertion_i"
  "d\030\010 \001(\0132\t.TSP.UUID\022#\n\020undo_row_id_list\030\t"
  " \003(\0132\t.TSP.UUID\022\030\n\020cut_column_names\030\013 \003("
  "\t\022&\n\023undo_column_id_list\030\014 \003(\0132\t.TSP.UUI"
  "D\"\240\003\n\037CommandDeleteGridColumnsArchive\022(\n"
  "\005super\030\001 \002(\0132\031.TSCH.ChartCommandArchive\022"
  "\"\n\017start_column_id\030\002 \002(\0132\t.TSP.UUID\022 \n\re"
  "nd_column_id\030\003 \002(\0132\t.TSP.UUID\022\021\n\tcut_nam"
  "es\030\004 \003(\t\022!\n\ncut_values\030\005 \003(\0132\r.TSCH.Grid"
  "Row\022\034\n\024undo_discards_values\030\006 \001(\010\022+\n\030und"
  "o_column_insertion_id\030\007 \001(\0132\t.TSP.UUID\022("
  "\n\025undo_row_insertion_id\030\010 \001(\0132\t.TSP.UUID"
  "\022&\n\023undo_column_id_list\030\t \003(\0132\t.TSP.UUID"
  "\022\025\n\rcut_row_names\030\013 \003(\t\022#\n\020undo_row_id_l"
  "ist\030\014 \003(\0132\t.TSP.UUID\"\221\001\n\032CommandSetGridV"
  "alueArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartC"
  "ommandArchive\022\020\n\010rowindex\030\002 \002(\r\022\023\n\013colum"
  "nindex\030\003 \002(\r\022\020\n\010oldvalue\030\004 \002(\001\022\020\n\010newval"
  "ue\030\005 \002(\001\"x\n\036CommandSetGridDirectionArchi"
  "ve\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArc"
  "hive\022\025\n\rold_direction\030\002 \002(\r\022\025\n\rnew_direc"
  "tion\030\003 \002(\r\"~\n\033CommandSetSeriesTypeArchiv"
  "e\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArch"
  "ive\022\023\n\013seriesindex\030\002 \002(\r\022\017\n\007oldtype\030\003 \002("
  "\r\022\017\n\007newtype\030\004 \002(\r\"p\n\036CommandSetScatterF"
  "ormatArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Chart"
  "CommandArchive\022\021\n\toldformat\030\003 \002(\r\022\021\n\tnew"
  "format\030\004 \002(\r\"r\n\"CommandSetMultiDataSetIn"
  "dexArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCo"
  "mmandArchive\022\020\n\010oldindex\030\002 \002(\r\022\020\n\010newind"
  "ex\030\003 \002(\r\"\242\001\n\034CommandSetLegendFrameArchiv"
  "e\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArch"
  "ive\022+\n\020old_legend_frame\030\002 \002(\0132\021.TSCH.Rec"
  "tArchive\022+\n\020new_legend_frame\030\003 \002(\0132\021.TSC"
  "H.RectArchive\"\331\001\n\033CommandSetPieWedgeExpl"
  "osion\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommand"
  "Archive\022\026\n\016series_indices\030\002 \003(\r\022\030\n\020wedge"
  "_explosions\030\003 \003(\001\022\032\n\022old_series_indices\030"
  "\005 \003(\r\022\034\n\024old_wedge_explosions\030\006 \003(\001\022$\n\014r"
  "ollback_cmd\030\007 \001(\0132\016.TSP.Reference\"\257\001\n\026Co"
  "mmandChartApplyTheme\0221\n\005super\030\001 \002(\0132\".TS"
  "S.ApplyThemeChildCommandArchive\022\034\n\004info\030"
  "\002 \002(\0132\016.TSP.Reference\022$\n\014swap_command\030\003 "
  "\001(\0132\016.TSP.Reference\022\036\n\006preset\030\004 \001(\0132\016.TS"
  "P.Reference\"\343\003\n\027CommandChartApplyPreset\022"
  "(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArchiv"
  "e\022=\n\010behavior\030\002 \001(\0162\031.TSCH.ApplyPresetBe"
  "havior:\020remove_overrides\022\036\n\006preset\030\003 \001(\013"
  "2\016.TSP.Reference\022\"\n\nold_preset\030\004 \001(\0132\016.T"
  "SP.Reference\022 \n\030should_apply_swap_tuples"
  "\030\005 \001(\010\022\035\n\025are_swap_tuples_valid\030\006 \001(\010\0224\n"
  "\013swap_tuples\030\007 \003(\0132\037.TSCH.StyleSwapUndoT"
  "upleArchive\022<\n\023inverse_swap_tuples\030\010 \003(\013"
  "2\037.TSCH.StyleSwapUndoTupleArchive\022\'\n\017rol"
  "lback_preset\030\t \001(\0132\016.TSP.Reference\022=\n\024ro"
  "llback_swap_tuples\030\n \003(\0132\037.TSCH.StyleSwa"
  "pUndoTupleArchive\"\334\001\n\035CommandCleanupGeom"
  "etryArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartC"
  "ommandArchive\022-\n\025info_geometry_command\030\002"
  " \001(\0132\016.TSP.Reference\0221\n\031anchor_attachmen"
  "t_command\030\003 \001(\0132\016.TSP.Reference\022/\n\024origi"
  "nal_legend_rect\030\004 \001(\0132\021.TSCH.RectArchive"
  "\"\310\001\n\023ChartCommandArchive\022\"\n\005super\030\001 \002(\0132"
  "\023.TSK.CommandArchive\022\"\n\nchart_info\030\002 \001(\013"
  "2\016.TSP.Reference\022\034\n\024original_dirty_state"
  "\030\003 \001(\010\022)\n\022chart_info_id_path\030\004 \001(\0132\r.TSP"
  ".UUIDPath\022 \n\030is_for_forward_undo_redo\030\005 "
  "\001(\010\"\220\004\n\037CommandReplaceGridValuesArchive\022"
  "(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArchiv"
  "e\022$\n\rold_data_rows\030\004 \003(\0132\r.TSCH.GridRow\022"
  "$\n\rnew_data_rows\030\005 \003(\0132\r.TSCH.GridRow\022\025\n"
  "\rold_row_names\030\006 \003(\t\022\025\n\rnew_row_names\030\007 "
  "\003(\t\022\025\n\rold_col_names\030\010 \003(\t\022\025\n\rnew_col_na"
  "mes\030\t \003(\t\022#\n\020update_row_uuids\030\n \003(\0132\t.TS"
  "P.UUID\022&\n\023update_column_uuids\030\013 \003(\0132\t.TS"
  "P.UUID\022 \n\radd_row_uuids\030\014 \003(\0132\t.TSP.UUID"
  "\022#\n\020add_column_uuids\030\r \003(\0132\t.TSP.UUID\022#\n"
  "\020delete_row_uuids\030\016 \003(\0132\t.TSP.UUID\022&\n\023de"
  "lete_column_uuids\030\017 \003(\0132\t.TSP.UUID\022\034\n\024se"
  "t_series_direction\030\020 \001(\010\022\034\n\024new_series_d"
  "irection\030\021 \001(\r\"\350\002\n CommandReplaceThemePr"
  "esetArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
  "Archive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Reference\022\""
  "\n\nold_preset\030\003 \001(\0132\016.TSP.Reference\022\"\n\nne"
  "w_preset\030\004 \001(\0132\016.TSP.Reference\022R\n\013identi"
  "fiers\030\005 \003(\0132=.TSCH.CommandReplaceThemePr"
  "esetArchive.StyleAndIdentifierPair\022\030\n\020ol"
  "d_preset_index\030\006 \001(\004\032K\n\026StyleAndIdentifi"
  "erPair\022\035\n\005style\030\001 \002(\0132\016.TSP.Reference\022\022\n"
  "\nidentifier\030\002 \002(\t\"\?\n\031CommandInvalidateWP"
  "Caches\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
  "ve\"\304\004\n!CommandReplaceCustomFormatArchive"
  "\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArchi"
  "ve\022$\n\014rollback_cmd\030\002 \001(\0132\016.TSP.Reference"
  "\0223\n\021old_format_object\030\003 \001(\0132\030.TSK.Format"
  "StructArchive\0223\n\021new_format_object\030\004 \001(\013"
  "2\030.TSK.FormatStructArchive\022W\n\021forward_mu"
  "tations\030\005 \003(\0132<.TSCH.CommandReplaceCusto"
  "mFormatArchive.FormatObjectMutation\022W\n\021r"
  "everse_mutations\030\006 \003(\0132<.TSCH.CommandRep"
  "laceCustomFormatArchive.FormatObjectMuta"
  "tion\032\262\001\n\024FormatObjectMutation\022.\n\020style_o"
  "wner_type\030\001 \001(\0162\024.TSCH.StyleOwnerType\022\031\n"
  "\021style_owner_index\030\002 \001(\r\022\036\n\026format_objec"
  "t_property\030\003 \001(\r\022/\n\rformat_object\030\004 \001(\0132"
  "\030.TSK.FormatStructArchive\"\245\002\n\036CommandAdd"
  "ReferenceLineArchive\022(\n\005super\030\001 \002(\0132\031.TS"
  "CH.ChartCommandArchive\022)\n\007axis_id\030\002 \002(\0132"
  "\030.TSCH.ChartAxisIDArchive\022\027\n\004uuid\030\003 \001(\0132"
  "\t.TSP.UUID\022!\n\tnon_style\030\004 \002(\0132\016.TSP.Refe"
  "rence\022\035\n\005style\030\005 \001(\0132\016.TSP.Reference\022(\n\020"
  "paragraph_styles\030\006 \003(\0132\016.TSP.Reference\022)"
  "\n\021rollback_commands\030\007 \003(\0132\016.TSP.Referenc"
  "e\"\251\002\n!CommandDeleteReferenceLineArchive\022"
  "(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArchiv"
  "e\022)\n\007axis_id\030\002 \002(\0132\030.TSCH.ChartAxisIDArc"
  "hive\022\027\n\004uuid\030\003 \002(\0132\t.TSP.UUID\022!\n\tnon_sty"
  "le\030\004 \001(\0132\016.TSP.Reference\022\035\n\005style\030\005 \001(\0132"
  "\016.TSP.Reference\022(\n\020paragraph_styles\030\006 \003("
  "\0132\016.TSP.Reference\022*\n\022style_swap_command\030"
  "\007 \001(\0132\016.TSP.Reference\"\342\002\n\030CommandPasteSt"
  "yleArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCo"
  "mmandArchive\022*\n\022style_swap_command\030\002 \001(\013"
  "2\016.TSP.Reference\022M\n\031inverse_chart_style_"
  "state\030\003 \001(\0132*.TSCH.PropertyValueStorageC"
  "ontainerArchive\022E\n\021chart_style_state\030\004 \001"
  "(\0132*.TSCH.PropertyValueStorageContainerA"
  "rchive\022#\n\013shape_style\030\005 \001(\0132\016.TSP.Refere"
  "nce\0225\n\014subselection\030\006 \003(\0132\037.TSCH.ChartSe"
  "lectionPathArchive\"\214\002\n\036CommandReplaceIma"
  "geDataArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Char"
  "tCommandArchive\022*\n\022style_swap_command\030\002 "
  "\001(\0132\016.TSP.Reference\022M\n\031inverse_chart_sty"
  "le_state\030\003 \001(\0132*.TSCH.PropertyValueStora"
  "geContainerArchive\022E\n\021chart_style_state\030"
  "\004 \001(\0132*.TSCH.PropertyValueStorageContain"
  "erArchive\"D\n\036CommandInducedReplaceChartG"
  "rid\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\""
  "C\n\035CommandInduced3DChartGeometry\022\"\n\005supe"
  "r\030\001 \002(\0132\023.TSK.CommandArchive\"I\n$ChartTex"
  "tSelectionTransformerArchive\022!\n\tselectio"
  "n\030\001 \001(\0132\016.TSP.Reference\"c\n(ChartDrawable"
  "SelectionTransformerArchive\0227\n\005super\030\001 \002"
  "(\0132(.TSD.DrawableSelectionTransformerArc"
  "hive\"N\n)ChartSubselectionTransformerHelp"
  "erArchive\022!\n\tselection\030\001 \001(\0132\016.TSP.Refer"
  "ence\"\244\001\n0ChartRefLineSubselectionTransfo"
  "rmerHelperArchive\022>\n\005super\030\001 \002(\0132/.TSCH."
  "ChartSubselectionTransformerHelperArchiv"
  "e\0220\n\035selected_reference_line_uuids\030\002 \003(\013"
  "2\t.TSP.UUID\"s\n1ChartSubselectionIdentity"
  "TransformerHelperArchive\022>\n\005super\030\001 \002(\0132"
  "/.TSCH.ChartSubselectionTransformerHelpe"
  "rArchive\"h\n#ChartSubselectionTransformer"
  "Archive\022!\n\tselection\030\001 \001(\0132\016.TSP.Referen"
  "ce\022\036\n\006helper\030\002 \001(\0132\016.TSP.Reference\"G\n\036CD"
  "ESelectionTransformerArchive\022%\n\rcde_sele"
  "ction\030\001 \001(\0132\016.TSP.Reference*h\n\016StyleOwne"
  "rType\022\016\n\nchart_info\020\001\022\020\n\014legend_model\020\002\022"
  "\016\n\nchart_axis\020\003\022\020\n\014chart_series\020\004\022\022\n\016ref"
  "erence_line\020\005*\370\002\n\rStyleSwapType\022\017\n\013chart"
  "_style\020\001\022\023\n\017chart_non_style\020\002\022\020\n\014legend_"
  "style\020\003\022\024\n\020legend_non_style\020\004\022\024\n\020value_a"
  "xis_style\020\005\022\030\n\024value_axis_non_style\020\006\022\027\n"
  "\023category_axis_style\020\007\022\033\n\027category_axis_"
  "non_style\020\010\022\026\n\022series_theme_style\020\t\022\030\n\024s"
  "eries_private_style\020\n\022\024\n\020series_non_styl"
  "e\020\013\022\023\n\017paragraph_style\020\014\022\030\n\024reference_li"
  "ne_style\020\r\022\034\n\030reference_line_non_style\020\016"
  "\022\036\n\032reference_line_theme_style\020\017*\\\n\023Appl"
  "yPresetBehavior\022\024\n\020remove_overrides\020\001\022\026\n"
  "\022preserve_overrides\020\002\022\027\n\023preserve_appear"
  "ance\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSCHCommandArchives_2eproto_deps[10] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSCHArchives_2eGEN_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDCommandArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSCHCommandArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHCommandArchives_2eproto = {
  false, false, 12406, descriptor_table_protodef_TSCHCommandArchives_2eproto, "TSCHCommandArchives.proto", 
  &descriptor_table_TSCHCommandArchives_2eproto_once, descriptor_table_TSCHCommandArchives_2eproto_deps, 10, 54,
  schemas, file_default_instances, TableStruct_TSCHCommandArchives_2eproto::offsets,
  file_level_metadata_TSCHCommandArchives_2eproto, file_level_enum_descriptors_TSCHCommandArchives_2eproto, file_level_service_descriptors_TSCHCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSCHCommandArchives_2eproto_getter() {
  return &descriptor_table_TSCHCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSCHCommandArchives_2eproto(&descriptor_table_TSCHCommandArchives_2eproto);
namespace TSCH {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleOwnerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCHCommandArchives_2eproto);
  return file_level_enum_descriptors_TSCHCommandArchives_2eproto[0];
}
bool StyleOwnerType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleSwapType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCHCommandArchives_2eproto);
  return file_level_enum_descriptors_TSCHCommandArchives_2eproto[1];
}
bool StyleSwapType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplyPresetBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCHCommandArchives_2eproto);
  return file_level_enum_descriptors_TSCHCommandArchives_2eproto[2];
}
bool ApplyPresetBehavior_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StyleOwnerPath::_Internal {
 public:
};

void StyleOwnerPath::clear_uuids() {
  uuids_.Clear();
}
StyleOwnerPath::StyleOwnerPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uuids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.StyleOwnerPath)
}
StyleOwnerPath::StyleOwnerPath(const StyleOwnerPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uuids_(from.uuids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.StyleOwnerPath)
}

void StyleOwnerPath::SharedCtor() {
}

StyleOwnerPath::~StyleOwnerPath() {
  // @@protoc_insertion_point(destructor:TSCH.StyleOwnerPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleOwnerPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StyleOwnerPath::ArenaDtor(void* object) {
  StyleOwnerPath* _this = reinterpret_cast< StyleOwnerPath* >(object);
  (void)_this;
}
void StyleOwnerPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleOwnerPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleOwnerPath::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.StyleOwnerPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleOwnerPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uuids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleOwnerPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.StyleOwnerPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uuids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.StyleOwnerPath)
  return target;
}

size_t StyleOwnerPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.StyleOwnerPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  total_size += 1UL * this->_internal_uuids_size();
  for (const auto& msg : this->uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleOwnerPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.StyleOwnerPath)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleOwnerPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleOwnerPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.StyleOwnerPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.StyleOwnerPath)
    MergeFrom(*source);
  }
}

void StyleOwnerPath::MergeFrom(const StyleOwnerPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.StyleOwnerPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuids_.MergeFrom(from.uuids_);
}

void StyleOwnerPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.StyleOwnerPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleOwnerPath::CopyFrom(const StyleOwnerPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.StyleOwnerPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleOwnerPath::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uuids_)) return false;
  return true;
}

void StyleOwnerPath::InternalSwap(StyleOwnerPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uuids_.InternalSwap(&other->uuids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleOwnerPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[0]);
}

// ===================================================================

class CommandSetChartTypeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetChartTypeArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetChartTypeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_chart_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_chart_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rollback_chart_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uses_captured_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_default_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetChartTypeArchive::_Internal::super(const CommandSetChartTypeArchive* msg) {
  return *msg->super_;
}
void CommandSetChartTypeArchive::clear_row_ids() {
  row_ids_.Clear();
}
void CommandSetChartTypeArchive::clear_column_ids() {
  column_ids_.Clear();
}
void CommandSetChartTypeArchive::clear_old_row_ids() {
  old_row_ids_.Clear();
}
void CommandSetChartTypeArchive::clear_old_column_ids() {
  old_column_ids_.Clear();
}
void CommandSetChartTypeArchive::clear_rollback_row_ids() {
  rollback_row_ids_.Clear();
}
void CommandSetChartTypeArchive::clear_rollback_column_ids() {
  rollback_column_ids_.Clear();
}
CommandSetChartTypeArchive::CommandSetChartTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_ids_(arena),
  column_ids_(arena),
  old_row_ids_(arena),
  old_column_ids_(arena),
  rollback_row_ids_(arena),
  rollback_column_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetChartTypeArchive)
}
CommandSetChartTypeArchive::CommandSetChartTypeArchive(const CommandSetChartTypeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      row_ids_(from.row_ids_),
      column_ids_(from.column_ids_),
      old_row_ids_(from.old_row_ids_),
      old_column_ids_(from.old_column_ids_),
      rollback_row_ids_(from.rollback_row_ids_),
      rollback_column_ids_(from.rollback_column_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&new_chart_type_, &from.new_chart_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_default_data_) -
    reinterpret_cast<char*>(&new_chart_type_)) + sizeof(use_default_data_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetChartTypeArchive)
}

void CommandSetChartTypeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_default_data_) -
    reinterpret_cast<char*>(&super_)) + sizeof(use_default_data_));
}

CommandSetChartTypeArchive::~CommandSetChartTypeArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetChartTypeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetChartTypeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetChartTypeArchive::ArenaDtor(void* object) {
  CommandSetChartTypeArchive* _this = reinterpret_cast< CommandSetChartTypeArchive* >(object);
  (void)_this;
}
void CommandSetChartTypeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetChartTypeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetChartTypeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetChartTypeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_ids_.Clear();
  column_ids_.Clear();
  old_row_ids_.Clear();
  old_column_ids_.Clear();
  rollback_row_ids_.Clear();
  rollback_column_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&new_chart_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_default_data_) -
        reinterpret_cast<char*>(&new_chart_type_)) + sizeof(use_default_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetChartTypeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartType new_chart_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_new_chart_type(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartType old_chart_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_old_chart_type(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartType rollback_chart_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_rollback_chart_type(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID column_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID old_row_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_row_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID old_column_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_column_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID rollback_row_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_row_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID rollback_column_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_column_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool uses_captured_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_uses_captured_data(&has_bits);
          uses_captured_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_default_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_use_default_data(&has_bits);
          use_default_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetChartTypeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetChartTypeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSCH.ChartType new_chart_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_new_chart_type(), target);
  }

  // optional .TSCH.ChartType old_chart_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_old_chart_type(), target);
  }

  // optional .TSCH.ChartType rollback_chart_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rollback_chart_type(), target);
  }

  // repeated .TSP.UUID row_ids = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_row_ids(i), target, stream);
  }

  // repeated .TSP.UUID column_ids = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_column_ids(i), target, stream);
  }

  // repeated .TSP.UUID old_row_ids = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_row_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_old_row_ids(i), target, stream);
  }

  // repeated .TSP.UUID old_column_ids = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_column_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_old_column_ids(i), target, stream);
  }

  // repeated .TSP.UUID rollback_row_ids = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rollback_row_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_rollback_row_ids(i), target, stream);
  }

  // repeated .TSP.UUID rollback_column_ids = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rollback_column_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_rollback_column_ids(i), target, stream);
  }

  // optional bool uses_captured_data = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_uses_captured_data(), target);
  }

  // optional bool use_default_data = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_use_default_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetChartTypeArchive)
  return target;
}

size_t CommandSetChartTypeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetChartTypeArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_ids = 5;
  total_size += 1UL * this->_internal_row_ids_size();
  for (const auto& msg : this->row_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID column_ids = 6;
  total_size += 1UL * this->_internal_column_ids_size();
  for (const auto& msg : this->column_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID old_row_ids = 7;
  total_size += 1UL * this->_internal_old_row_ids_size();
  for (const auto& msg : this->old_row_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID old_column_ids = 8;
  total_size += 1UL * this->_internal_old_column_ids_size();
  for (const auto& msg : this->old_column_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID rollback_row_ids = 9;
  total_size += 1UL * this->_internal_rollback_row_ids_size();
  for (const auto& msg : this->rollback_row_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID rollback_column_ids = 10;
  total_size += 1UL * this->_internal_rollback_column_ids_size();
  for (const auto& msg : this->rollback_column_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSCH.ChartType new_chart_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_chart_type());
    }

    // optional .TSCH.ChartType old_chart_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_old_chart_type());
    }

    // optional .TSCH.ChartType rollback_chart_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rollback_chart_type());
    }

    // optional bool uses_captured_data = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool use_default_data = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetChartTypeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetChartTypeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetChartTypeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetChartTypeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetChartTypeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetChartTypeArchive)
    MergeFrom(*source);
  }
}

void CommandSetChartTypeArchive::MergeFrom(const CommandSetChartTypeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetChartTypeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_ids_.MergeFrom(from.row_ids_);
  column_ids_.MergeFrom(from.column_ids_);
  old_row_ids_.MergeFrom(from.old_row_ids_);
  old_column_ids_.MergeFrom(from.old_column_ids_);
  rollback_row_ids_.MergeFrom(from.rollback_row_ids_);
  rollback_column_ids_.MergeFrom(from.rollback_column_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      new_chart_type_ = from.new_chart_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      old_chart_type_ = from.old_chart_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rollback_chart_type_ = from.rollback_chart_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      uses_captured_data_ = from.uses_captured_data_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_default_data_ = from.use_default_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetChartTypeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetChartTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetChartTypeArchive::CopyFrom(const CommandSetChartTypeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetChartTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetChartTypeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_ids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(column_ids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_row_ids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_column_ids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rollback_row_ids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rollback_column_ids_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetChartTypeArchive::InternalSwap(CommandSetChartTypeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_ids_.InternalSwap(&other->row_ids_);
  column_ids_.InternalSwap(&other->column_ids_);
  old_row_ids_.InternalSwap(&other->old_row_ids_);
  old_column_ids_.InternalSwap(&other->old_column_ids_);
  rollback_row_ids_.InternalSwap(&other->rollback_row_ids_);
  rollback_column_ids_.InternalSwap(&other->rollback_column_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetChartTypeArchive, use_default_data_)
      + sizeof(CommandSetChartTypeArchive::use_default_data_)
      - PROTOBUF_FIELD_OFFSET(CommandSetChartTypeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetChartTypeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[1]);
}

// ===================================================================

class StyleSwapUndoTupleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleSwapUndoTupleArchive>()._has_bits_);
  static const ::TSP::Reference& chart_info(const StyleSwapUndoTupleArchive* msg);
  static void set_has_chart_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_swap_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& old_value(const StyleSwapUndoTupleArchive* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_value(const StyleSwapUndoTupleArchive* msg);
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& ref_line_uuid(const StyleSwapUndoTupleArchive* msg);
  static void set_has_ref_line_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Reference&
StyleSwapUndoTupleArchive::_Internal::chart_info(const StyleSwapUndoTupleArchive* msg) {
  return *msg->chart_info_;
}
const ::TSP::Reference&
StyleSwapUndoTupleArchive::_Internal::old_value(const StyleSwapUndoTupleArchive* msg) {
  return *msg->old_value_;
}
const ::TSP::Reference&
StyleSwapUndoTupleArchive::_Internal::new_value(const StyleSwapUndoTupleArchive* msg) {
  return *msg->new_value_;
}
const ::TSP::UUID&
StyleSwapUndoTupleArchive::_Internal::ref_line_uuid(const StyleSwapUndoTupleArchive* msg) {
  return *msg->ref_line_uuid_;
}
void StyleSwapUndoTupleArchive::clear_chart_info() {
  if (chart_info_ != nullptr) chart_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StyleSwapUndoTupleArchive::clear_old_value() {
  if (old_value_ != nullptr) old_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StyleSwapUndoTupleArchive::clear_new_value() {
  if (new_value_ != nullptr) new_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void StyleSwapUndoTupleArchive::clear_ref_line_uuid() {
  if (ref_line_uuid_ != nullptr) ref_line_uuid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
StyleSwapUndoTupleArchive::StyleSwapUndoTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.StyleSwapUndoTupleArchive)
}
StyleSwapUndoTupleArchive::StyleSwapUndoTupleArchive(const StyleSwapUndoTupleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart_info()) {
    chart_info_ = new ::TSP::Reference(*from.chart_info_);
  } else {
    chart_info_ = nullptr;
  }
  if (from._internal_has_old_value()) {
    old_value_ = new ::TSP::Reference(*from.old_value_);
  } else {
    old_value_ = nullptr;
  }
  if (from._internal_has_new_value()) {
    new_value_ = new ::TSP::Reference(*from.new_value_);
  } else {
    new_value_ = nullptr;
  }
  if (from._internal_has_ref_line_uuid()) {
    ref_line_uuid_ = new ::TSP::UUID(*from.ref_line_uuid_);
  } else {
    ref_line_uuid_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&swap_type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(swap_type_));
  // @@protoc_insertion_point(copy_constructor:TSCH.StyleSwapUndoTupleArchive)
}

void StyleSwapUndoTupleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chart_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&chart_info_)) + sizeof(index_));
swap_type_ = 1;
}

StyleSwapUndoTupleArchive::~StyleSwapUndoTupleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.StyleSwapUndoTupleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleSwapUndoTupleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete chart_info_;
  if (this != internal_default_instance()) delete old_value_;
  if (this != internal_default_instance()) delete new_value_;
  if (this != internal_default_instance()) delete ref_line_uuid_;
}

void StyleSwapUndoTupleArchive::ArenaDtor(void* object) {
  StyleSwapUndoTupleArchive* _this = reinterpret_cast< StyleSwapUndoTupleArchive* >(object);
  (void)_this;
}
void StyleSwapUndoTupleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleSwapUndoTupleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleSwapUndoTupleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.StyleSwapUndoTupleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(chart_info_ != nullptr);
      chart_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_value_ != nullptr);
      old_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_value_ != nullptr);
      new_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ref_line_uuid_ != nullptr);
      ref_line_uuid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    index_ = 0u;
    swap_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleSwapUndoTupleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.StyleSwapType swap_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::StyleSwapType_IsValid(val))) {
            _internal_set_swap_type(static_cast<::TSCH::StyleSwapType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference new_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID ref_line_uuid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref_line_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleSwapUndoTupleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.StyleSwapUndoTupleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference chart_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chart_info(this), target, stream);
  }

  // optional .TSCH.StyleSwapType swap_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_swap_type(), target);
  }

  // optional uint32 index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // optional .TSP.Reference old_value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_value(this), target, stream);
  }

  // optional .TSP.Reference new_value = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::new_value(this), target, stream);
  }

  // optional .TSP.UUID ref_line_uuid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ref_line_uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.StyleSwapUndoTupleArchive)
  return target;
}

size_t StyleSwapUndoTupleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.StyleSwapUndoTupleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSP.Reference chart_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_info_);
    }

    // optional .TSP.Reference old_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_value_);
    }

    // optional .TSP.Reference new_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_value_);
    }

    // optional .TSP.UUID ref_line_uuid = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ref_line_uuid_);
    }

    // optional uint32 index = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional .TSCH.StyleSwapType swap_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swap_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleSwapUndoTupleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.StyleSwapUndoTupleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleSwapUndoTupleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleSwapUndoTupleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.StyleSwapUndoTupleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.StyleSwapUndoTupleArchive)
    MergeFrom(*source);
  }
}

void StyleSwapUndoTupleArchive::MergeFrom(const StyleSwapUndoTupleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.StyleSwapUndoTupleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_chart_info()->::TSP::Reference::MergeFrom(from._internal_chart_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_value()->::TSP::Reference::MergeFrom(from._internal_old_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_value()->::TSP::Reference::MergeFrom(from._internal_new_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ref_line_uuid()->::TSP::UUID::MergeFrom(from._internal_ref_line_uuid());
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000020u) {
      swap_type_ = from.swap_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StyleSwapUndoTupleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.StyleSwapUndoTupleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleSwapUndoTupleArchive::CopyFrom(const StyleSwapUndoTupleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.StyleSwapUndoTupleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleSwapUndoTupleArchive::IsInitialized() const {
  if (_internal_has_chart_info()) {
    if (!chart_info_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!old_value_->IsInitialized()) return false;
  }
  if (_internal_has_new_value()) {
    if (!new_value_->IsInitialized()) return false;
  }
  if (_internal_has_ref_line_uuid()) {
    if (!ref_line_uuid_->IsInitialized()) return false;
  }
  return true;
}

void StyleSwapUndoTupleArchive::InternalSwap(StyleSwapUndoTupleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleSwapUndoTupleArchive, index_)
      + sizeof(StyleSwapUndoTupleArchive::index_)
      - PROTOBUF_FIELD_OFFSET(StyleSwapUndoTupleArchive, chart_info_)>(
          reinterpret_cast<char*>(&chart_info_),
          reinterpret_cast<char*>(&other->chart_info_));
  swap(swap_type_, other->swap_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleSwapUndoTupleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[2]);
}

// ===================================================================

class StyleSwapUndoTuplesArchive::_Internal {
 public:
};

StyleSwapUndoTuplesArchive::StyleSwapUndoTuplesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  swap_tuples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.StyleSwapUndoTuplesArchive)
}
StyleSwapUndoTuplesArchive::StyleSwapUndoTuplesArchive(const StyleSwapUndoTuplesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      swap_tuples_(from.swap_tuples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.StyleSwapUndoTuplesArchive)
}

void StyleSwapUndoTuplesArchive::SharedCtor() {
}

StyleSwapUndoTuplesArchive::~StyleSwapUndoTuplesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.StyleSwapUndoTuplesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleSwapUndoTuplesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StyleSwapUndoTuplesArchive::ArenaDtor(void* object) {
  StyleSwapUndoTuplesArchive* _this = reinterpret_cast< StyleSwapUndoTuplesArchive* >(object);
  (void)_this;
}
void StyleSwapUndoTuplesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleSwapUndoTuplesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleSwapUndoTuplesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.StyleSwapUndoTuplesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  swap_tuples_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleSwapUndoTuplesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_swap_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleSwapUndoTuplesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.StyleSwapUndoTuplesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_swap_tuples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_swap_tuples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.StyleSwapUndoTuplesArchive)
  return target;
}

size_t StyleSwapUndoTuplesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.StyleSwapUndoTuplesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 1;
  total_size += 1UL * this->_internal_swap_tuples_size();
  for (const auto& msg : this->swap_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleSwapUndoTuplesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.StyleSwapUndoTuplesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleSwapUndoTuplesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleSwapUndoTuplesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.StyleSwapUndoTuplesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.StyleSwapUndoTuplesArchive)
    MergeFrom(*source);
  }
}

void StyleSwapUndoTuplesArchive::MergeFrom(const StyleSwapUndoTuplesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.StyleSwapUndoTuplesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  swap_tuples_.MergeFrom(from.swap_tuples_);
}

void StyleSwapUndoTuplesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.StyleSwapUndoTuplesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleSwapUndoTuplesArchive::CopyFrom(const StyleSwapUndoTuplesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.StyleSwapUndoTuplesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleSwapUndoTuplesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(swap_tuples_)) return false;
  return true;
}

void StyleSwapUndoTuplesArchive::InternalSwap(StyleSwapUndoTuplesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap_tuples_.InternalSwap(&other->swap_tuples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleSwapUndoTuplesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[3]);
}

// ===================================================================

class CommandStyleSwapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStyleSwapArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandStyleSwapArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandStyleSwapArchive::_Internal::super(const CommandStyleSwapArchive* msg) {
  return *msg->super_;
}
CommandStyleSwapArchive::CommandStyleSwapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  undo_tuples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandStyleSwapArchive)
}
CommandStyleSwapArchive::CommandStyleSwapArchive(const CommandStyleSwapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      undo_tuples_(from.undo_tuples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandStyleSwapArchive)
}

void CommandStyleSwapArchive::SharedCtor() {
super_ = nullptr;
}

CommandStyleSwapArchive::~CommandStyleSwapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandStyleSwapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStyleSwapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandStyleSwapArchive::ArenaDtor(void* object) {
  CommandStyleSwapArchive* _this = reinterpret_cast< CommandStyleSwapArchive* >(object);
  (void)_this;
}
void CommandStyleSwapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStyleSwapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandStyleSwapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandStyleSwapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  undo_tuples_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStyleSwapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStyleSwapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandStyleSwapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_tuples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_undo_tuples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandStyleSwapArchive)
  return target;
}

size_t CommandStyleSwapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandStyleSwapArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  total_size += 1UL * this->_internal_undo_tuples_size();
  for (const auto& msg : this->undo_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStyleSwapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandStyleSwapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStyleSwapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStyleSwapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandStyleSwapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandStyleSwapArchive)
    MergeFrom(*source);
  }
}

void CommandStyleSwapArchive::MergeFrom(const CommandStyleSwapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandStyleSwapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  undo_tuples_.MergeFrom(from.undo_tuples_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
  }
}

void CommandStyleSwapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandStyleSwapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStyleSwapArchive::CopyFrom(const CommandStyleSwapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandStyleSwapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStyleSwapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_tuples_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandStyleSwapArchive::InternalSwap(CommandStyleSwapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  undo_tuples_.InternalSwap(&other->undo_tuples_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStyleSwapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[4]);
}

// ===================================================================

class CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion>()._has_bits_);
  static const ::TSCH::Generated::ChartGenericPropertyMapArchive& chart_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg);
  static void set_has_chart_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::Generated::LegendGenericPropertyMapArchive& legend_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg);
  static void set_has_legend_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Generated::ChartAxisGenericPropertyMapArchive& axis_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg);
  static void set_has_axis_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive& series_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg);
  static void set_has_series_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive& reference_line_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg);
  static void set_has_reference_line_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSCH::Generated::ChartGenericPropertyMapArchive&
CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_Internal::chart_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg) {
  return *msg->chart_map_;
}
const ::TSCH::Generated::LegendGenericPropertyMapArchive&
CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_Internal::legend_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg) {
  return *msg->legend_map_;
}
const ::TSCH::Generated::ChartAxisGenericPropertyMapArchive&
CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_Internal::axis_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg) {
  return *msg->axis_map_;
}
const ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive&
CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_Internal::series_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg) {
  return *msg->series_map_;
}
const ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive&
CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_Internal::reference_line_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* msg) {
  return *msg->reference_line_map_;
}
void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::clear_chart_map() {
  if (chart_map_ != nullptr) chart_map_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::clear_legend_map() {
  if (legend_map_ != nullptr) legend_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::clear_axis_map() {
  if (axis_map_ != nullptr) axis_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::clear_series_map() {
  if (series_map_ != nullptr) series_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::clear_reference_line_map() {
  if (reference_line_map_ != nullptr) reference_line_map_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
}
CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart_map()) {
    chart_map_ = new ::TSCH::Generated::ChartGenericPropertyMapArchive(*from.chart_map_);
  } else {
    chart_map_ = nullptr;
  }
  if (from._internal_has_legend_map()) {
    legend_map_ = new ::TSCH::Generated::LegendGenericPropertyMapArchive(*from.legend_map_);
  } else {
    legend_map_ = nullptr;
  }
  if (from._internal_has_axis_map()) {
    axis_map_ = new ::TSCH::Generated::ChartAxisGenericPropertyMapArchive(*from.axis_map_);
  } else {
    axis_map_ = nullptr;
  }
  if (from._internal_has_series_map()) {
    series_map_ = new ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive(*from.series_map_);
  } else {
    series_map_ = nullptr;
  }
  if (from._internal_has_reference_line_map()) {
    reference_line_map_ = new ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive(*from.reference_line_map_);
  } else {
    reference_line_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chart_map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reference_line_map_) -
    reinterpret_cast<char*>(&chart_map_)) + sizeof(reference_line_map_));
}

CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::~CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion() {
  // @@protoc_insertion_point(destructor:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete chart_map_;
  if (this != internal_default_instance()) delete legend_map_;
  if (this != internal_default_instance()) delete axis_map_;
  if (this != internal_default_instance()) delete series_map_;
  if (this != internal_default_instance()) delete reference_line_map_;
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::ArenaDtor(void* object) {
  CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* _this = reinterpret_cast< CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* >(object);
  (void)_this;
}
void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(chart_map_ != nullptr);
      chart_map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(legend_map_ != nullptr);
      legend_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(axis_map_ != nullptr);
      axis_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(series_map_ != nullptr);
      series_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reference_line_map_ != nullptr);
      reference_line_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.Generated.ChartGenericPropertyMapArchive chart_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Generated.LegendGenericPropertyMapArchive legend_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Generated.ChartAxisGenericPropertyMapArchive axis_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Generated.ChartSeriesGenericPropertyMapArchive series_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Generated.ReferenceLineGenericPropertyMapArchive reference_line_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_line_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.Generated.ChartGenericPropertyMapArchive chart_map = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chart_map(this), target, stream);
  }

  // optional .TSCH.Generated.LegendGenericPropertyMapArchive legend_map = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::legend_map(this), target, stream);
  }

  // optional .TSCH.Generated.ChartAxisGenericPropertyMapArchive axis_map = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::axis_map(this), target, stream);
  }

  // optional .TSCH.Generated.ChartSeriesGenericPropertyMapArchive series_map = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::series_map(this), target, stream);
  }

  // optional .TSCH.Generated.ReferenceLineGenericPropertyMapArchive reference_line_map = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::reference_line_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
  return target;
}

size_t CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSCH.Generated.ChartGenericPropertyMapArchive chart_map = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_map_);
    }

    // optional .TSCH.Generated.LegendGenericPropertyMapArchive legend_map = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legend_map_);
    }

    // optional .TSCH.Generated.ChartAxisGenericPropertyMapArchive axis_map = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *axis_map_);
    }

    // optional .TSCH.Generated.ChartSeriesGenericPropertyMapArchive series_map = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *series_map_);
    }

    // optional .TSCH.Generated.ReferenceLineGenericPropertyMapArchive reference_line_map = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_line_map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
    MergeFrom(*source);
  }
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::MergeFrom(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_chart_map()->::TSCH::Generated::ChartGenericPropertyMapArchive::MergeFrom(from._internal_chart_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_legend_map()->::TSCH::Generated::LegendGenericPropertyMapArchive::MergeFrom(from._internal_legend_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_axis_map()->::TSCH::Generated::ChartAxisGenericPropertyMapArchive::MergeFrom(from._internal_axis_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_series_map()->::TSCH::Generated::ChartSeriesGenericPropertyMapArchive::MergeFrom(from._internal_series_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_reference_line_map()->::TSCH::Generated::ReferenceLineGenericPropertyMapArchive::MergeFrom(from._internal_reference_line_map());
    }
  }
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::CopyFrom(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::IsInitialized() const {
  if (_internal_has_chart_map()) {
    if (!chart_map_->IsInitialized()) return false;
  }
  if (_internal_has_legend_map()) {
    if (!legend_map_->IsInitialized()) return false;
  }
  if (_internal_has_axis_map()) {
    if (!axis_map_->IsInitialized()) return false;
  }
  if (_internal_has_series_map()) {
    if (!series_map_->IsInitialized()) return false;
  }
  if (_internal_has_reference_line_map()) {
    if (!reference_line_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::InternalSwap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion, reference_line_map_)
      + sizeof(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::reference_line_map_)
      - PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion, chart_map_)>(
          reinterpret_cast<char*>(&chart_map_),
          reinterpret_cast<char*>(&other->chart_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[5]);
}

// ===================================================================

class CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMutatePropertiesArchive_GenericPropertyDeltaMap>()._has_bits_);
  static const ::TSCH::StyleOwnerPath& style_owner_path(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap* msg);
  static void set_has_style_owner_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& forward_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap* msg);
  static void set_has_forward_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& reverse_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap* msg);
  static void set_has_reverse_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSCH::StyleOwnerPath&
CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_Internal::style_owner_path(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap* msg) {
  return *msg->style_owner_path_;
}
const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion&
CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_Internal::forward_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap* msg) {
  return *msg->forward_map_;
}
const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion&
CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_Internal::reverse_map(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap* msg) {
  return *msg->reverse_map_;
}
CommandMutatePropertiesArchive_GenericPropertyDeltaMap::CommandMutatePropertiesArchive_GenericPropertyDeltaMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
}
CommandMutatePropertiesArchive_GenericPropertyDeltaMap::CommandMutatePropertiesArchive_GenericPropertyDeltaMap(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_style_owner_path()) {
    style_owner_path_ = new ::TSCH::StyleOwnerPath(*from.style_owner_path_);
  } else {
    style_owner_path_ = nullptr;
  }
  if (from._internal_has_forward_map()) {
    forward_map_ = new ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(*from.forward_map_);
  } else {
    forward_map_ = nullptr;
  }
  if (from._internal_has_reverse_map()) {
    reverse_map_ = new ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(*from.reverse_map_);
  } else {
    reverse_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&style_owner_path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reverse_map_) -
    reinterpret_cast<char*>(&style_owner_path_)) + sizeof(reverse_map_));
}

CommandMutatePropertiesArchive_GenericPropertyDeltaMap::~CommandMutatePropertiesArchive_GenericPropertyDeltaMap() {
  // @@protoc_insertion_point(destructor:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete style_owner_path_;
  if (this != internal_default_instance()) delete forward_map_;
  if (this != internal_default_instance()) delete reverse_map_;
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::ArenaDtor(void* object) {
  CommandMutatePropertiesArchive_GenericPropertyDeltaMap* _this = reinterpret_cast< CommandMutatePropertiesArchive_GenericPropertyDeltaMap* >(object);
  (void)_this;
}
void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(style_owner_path_ != nullptr);
      style_owner_path_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(forward_map_ != nullptr);
      forward_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reverse_map_ != nullptr);
      reverse_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.StyleOwnerPath style_owner_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_owner_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion forward_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion reverse_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.StyleOwnerPath style_owner_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::style_owner_path(this), target, stream);
  }

  // optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion forward_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::forward_map(this), target, stream);
  }

  // optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion reverse_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reverse_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
  return target;
}

size_t CommandMutatePropertiesArchive_GenericPropertyDeltaMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSCH.StyleOwnerPath style_owner_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_owner_path_);
    }

    // optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion forward_map = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_map_);
    }

    // optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion reverse_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMutatePropertiesArchive_GenericPropertyDeltaMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMutatePropertiesArchive_GenericPropertyDeltaMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
    MergeFrom(*source);
  }
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::MergeFrom(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_style_owner_path()->::TSCH::StyleOwnerPath::MergeFrom(from._internal_style_owner_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_forward_map()->::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::MergeFrom(from._internal_forward_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reverse_map()->::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::MergeFrom(from._internal_reverse_map());
    }
  }
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::CopyFrom(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap::IsInitialized() const {
  if (_internal_has_style_owner_path()) {
    if (!style_owner_path_->IsInitialized()) return false;
  }
  if (_internal_has_forward_map()) {
    if (!forward_map_->IsInitialized()) return false;
  }
  if (_internal_has_reverse_map()) {
    if (!reverse_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::InternalSwap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive_GenericPropertyDeltaMap, reverse_map_)
      + sizeof(CommandMutatePropertiesArchive_GenericPropertyDeltaMap::reverse_map_)
      - PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive_GenericPropertyDeltaMap, style_owner_path_)>(
          reinterpret_cast<char*>(&style_owner_path_),
          reinterpret_cast<char*>(&other->style_owner_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMutatePropertiesArchive_GenericPropertyDeltaMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[6]);
}

// ===================================================================

class CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive>()._has_bits_);
  static const ::TSWP::CharacterStylePropertiesArchive& char_properties(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* msg);
  static void set_has_char_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWP::ParagraphStylePropertiesArchive& para_properties(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* msg);
  static void set_has_para_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::CharacterStylePropertiesArchive&
CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_Internal::char_properties(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* msg) {
  return *msg->char_properties_;
}
const ::TSWP::ParagraphStylePropertiesArchive&
CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_Internal::para_properties(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* msg) {
  return *msg->para_properties_;
}
void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::clear_char_properties() {
  if (char_properties_ != nullptr) char_properties_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::clear_para_properties() {
  if (para_properties_ != nullptr) para_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
}
CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_char_properties()) {
    char_properties_ = new ::TSWP::CharacterStylePropertiesArchive(*from.char_properties_);
  } else {
    char_properties_ = nullptr;
  }
  if (from._internal_has_para_properties()) {
    para_properties_ = new ::TSWP::ParagraphStylePropertiesArchive(*from.para_properties_);
  } else {
    para_properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&char_properties_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&para_properties_) -
    reinterpret_cast<char*>(&char_properties_)) + sizeof(para_properties_));
}

CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::~CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete char_properties_;
  if (this != internal_default_instance()) delete para_properties_;
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::ArenaDtor(void* object) {
  CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* _this = reinterpret_cast< CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* >(object);
  (void)_this;
}
void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(char_properties_ != nullptr);
      char_properties_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(para_properties_ != nullptr);
      para_properties_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_para_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::char_properties(this), target, stream);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::para_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
  return target;
}

size_t CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *char_properties_);
    }

    // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *para_properties_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
    MergeFrom(*source);
  }
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::MergeFrom(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_char_properties()->::TSWP::CharacterStylePropertiesArchive::MergeFrom(from._internal_char_properties());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_para_properties()->::TSWP::ParagraphStylePropertiesArchive::MergeFrom(from._internal_para_properties());
    }
  }
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::CopyFrom(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::IsInitialized() const {
  if (_internal_has_char_properties()) {
    if (!char_properties_->IsInitialized()) return false;
  }
  if (_internal_has_para_properties()) {
    if (!para_properties_->IsInitialized()) return false;
  }
  return true;
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::InternalSwap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive, para_properties_)
      + sizeof(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::para_properties_)
      - PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive, char_properties_)>(
          reinterpret_cast<char*>(&char_properties_),
          reinterpret_cast<char*>(&other->char_properties_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[7]);
}

// ===================================================================

class CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMutatePropertiesArchive_ParagraphStyleDeltaMap>()._has_bits_);
  static const ::TSCH::StyleOwnerPath& style_owner_path(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* msg);
  static void set_has_style_owner_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paragraph_style_index_property(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& forward_map(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* msg);
  static void set_has_forward_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& reverse_map(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* msg);
  static void set_has_reverse_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSCH::StyleOwnerPath&
CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_Internal::style_owner_path(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* msg) {
  return *msg->style_owner_path_;
}
const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive&
CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_Internal::forward_map(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* msg) {
  return *msg->forward_map_;
}
const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive&
CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_Internal::reverse_map(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* msg) {
  return *msg->reverse_map_;
}
CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
}
CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_style_owner_path()) {
    style_owner_path_ = new ::TSCH::StyleOwnerPath(*from.style_owner_path_);
  } else {
    style_owner_path_ = nullptr;
  }
  if (from._internal_has_forward_map()) {
    forward_map_ = new ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(*from.forward_map_);
  } else {
    forward_map_ = nullptr;
  }
  if (from._internal_has_reverse_map()) {
    reverse_map_ = new ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(*from.reverse_map_);
  } else {
    reverse_map_ = nullptr;
  }
  paragraph_style_index_property_ = from.paragraph_style_index_property_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&style_owner_path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&paragraph_style_index_property_) -
    reinterpret_cast<char*>(&style_owner_path_)) + sizeof(paragraph_style_index_property_));
}

CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::~CommandMutatePropertiesArchive_ParagraphStyleDeltaMap() {
  // @@protoc_insertion_point(destructor:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete style_owner_path_;
  if (this != internal_default_instance()) delete forward_map_;
  if (this != internal_default_instance()) delete reverse_map_;
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::ArenaDtor(void* object) {
  CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* _this = reinterpret_cast< CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* >(object);
  (void)_this;
}
void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(style_owner_path_ != nullptr);
      style_owner_path_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(forward_map_ != nullptr);
      forward_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reverse_map_ != nullptr);
      reverse_map_->Clear();
    }
  }
  paragraph_style_index_property_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.StyleOwnerPath style_owner_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_owner_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paragraph_style_index_property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_paragraph_style_index_property(&has_bits);
          paragraph_style_index_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive forward_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive reverse_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.StyleOwnerPath style_owner_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::style_owner_path(this), target, stream);
  }

  // optional uint32 paragraph_style_index_property = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_paragraph_style_index_property(), target);
  }

  // optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive forward_map = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forward_map(this), target, stream);
  }

  // optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive reverse_map = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reverse_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
  return target;
}

size_t CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSCH.StyleOwnerPath style_owner_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_owner_path_);
    }

    // optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive forward_map = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_map_);
    }

    // optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive reverse_map = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_map_);
    }

    // optional uint32 paragraph_style_index_property = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paragraph_style_index_property());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMutatePropertiesArchive_ParagraphStyleDeltaMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
    MergeFrom(*source);
  }
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::MergeFrom(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_style_owner_path()->::TSCH::StyleOwnerPath::MergeFrom(from._internal_style_owner_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_forward_map()->::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::MergeFrom(from._internal_forward_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reverse_map()->::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::MergeFrom(from._internal_reverse_map());
    }
    if (cached_has_bits & 0x00000008u) {
      paragraph_style_index_property_ = from.paragraph_style_index_property_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::CopyFrom(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::IsInitialized() const {
  if (_internal_has_style_owner_path()) {
    if (!style_owner_path_->IsInitialized()) return false;
  }
  if (_internal_has_forward_map()) {
    if (!forward_map_->IsInitialized()) return false;
  }
  if (_internal_has_reverse_map()) {
    if (!reverse_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::InternalSwap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap, paragraph_style_index_property_)
      + sizeof(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::paragraph_style_index_property_)
      - PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap, style_owner_path_)>(
          reinterpret_cast<char*>(&style_owner_path_),
          reinterpret_cast<char*>(&other->style_owner_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[8]);
}

// ===================================================================

class CommandMutatePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMutatePropertiesArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandMutatePropertiesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& rollback_cmd(const CommandMutatePropertiesArchive* msg);
  static void set_has_rollback_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initiatedonweb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandMutatePropertiesArchive::_Internal::super(const CommandMutatePropertiesArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandMutatePropertiesArchive::_Internal::rollback_cmd(const CommandMutatePropertiesArchive* msg) {
  return *msg->rollback_cmd_;
}
void CommandMutatePropertiesArchive::clear_rollback_cmd() {
  if (rollback_cmd_ != nullptr) rollback_cmd_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandMutatePropertiesArchive::CommandMutatePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  generic_property_delta_maps_(arena),
  paragraph_style_delta_maps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandMutatePropertiesArchive)
}
CommandMutatePropertiesArchive::CommandMutatePropertiesArchive(const CommandMutatePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      generic_property_delta_maps_(from.generic_property_delta_maps_),
      paragraph_style_delta_maps_(from.paragraph_style_delta_maps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rollback_cmd()) {
    rollback_cmd_ = new ::TSP::Reference(*from.rollback_cmd_);
  } else {
    rollback_cmd_ = nullptr;
  }
  initiatedonweb_ = from.initiatedonweb_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandMutatePropertiesArchive)
}

void CommandMutatePropertiesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initiatedonweb_) -
    reinterpret_cast<char*>(&super_)) + sizeof(initiatedonweb_));
}

CommandMutatePropertiesArchive::~CommandMutatePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandMutatePropertiesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMutatePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rollback_cmd_;
}

void CommandMutatePropertiesArchive::ArenaDtor(void* object) {
  CommandMutatePropertiesArchive* _this = reinterpret_cast< CommandMutatePropertiesArchive* >(object);
  (void)_this;
}
void CommandMutatePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMutatePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMutatePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandMutatePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  generic_property_delta_maps_.Clear();
  paragraph_style_delta_maps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rollback_cmd_ != nullptr);
      rollback_cmd_->Clear();
    }
  }
  initiatedonweb_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMutatePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap generic_property_delta_maps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_generic_property_delta_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap paragraph_style_delta_maps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraph_style_delta_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool initiatedOnWeb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_initiatedonweb(&has_bits);
          initiatedonweb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMutatePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandMutatePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference rollback_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rollback_cmd(this), target, stream);
  }

  // repeated .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap generic_property_delta_maps = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_generic_property_delta_maps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_generic_property_delta_maps(i), target, stream);
  }

  // repeated .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap paragraph_style_delta_maps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paragraph_style_delta_maps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_paragraph_style_delta_maps(i), target, stream);
  }

  // optional bool initiatedOnWeb = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_initiatedonweb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandMutatePropertiesArchive)
  return target;
}

size_t CommandMutatePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandMutatePropertiesArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap generic_property_delta_maps = 3;
  total_size += 1UL * this->_internal_generic_property_delta_maps_size();
  for (const auto& msg : this->generic_property_delta_maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap paragraph_style_delta_maps = 4;
  total_size += 1UL * this->_internal_paragraph_style_delta_maps_size();
  for (const auto& msg : this->paragraph_style_delta_maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference rollback_cmd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rollback_cmd_);
    }

    // optional bool initiatedOnWeb = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMutatePropertiesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandMutatePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMutatePropertiesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMutatePropertiesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandMutatePropertiesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandMutatePropertiesArchive)
    MergeFrom(*source);
  }
}

void CommandMutatePropertiesArchive::MergeFrom(const CommandMutatePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandMutatePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  generic_property_delta_maps_.MergeFrom(from.generic_property_delta_maps_);
  paragraph_style_delta_maps_.MergeFrom(from.paragraph_style_delta_maps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rollback_cmd()->::TSP::Reference::MergeFrom(from._internal_rollback_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      initiatedonweb_ = from.initiatedonweb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandMutatePropertiesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandMutatePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMutatePropertiesArchive::CopyFrom(const CommandMutatePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandMutatePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMutatePropertiesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(generic_property_delta_maps_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(paragraph_style_delta_maps_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_cmd()) {
    if (!rollback_cmd_->IsInitialized()) return false;
  }
  return true;
}

void CommandMutatePropertiesArchive::InternalSwap(CommandMutatePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  generic_property_delta_maps_.InternalSwap(&other->generic_property_delta_maps_);
  paragraph_style_delta_maps_.InternalSwap(&other->paragraph_style_delta_maps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive, initiatedonweb_)
      + sizeof(CommandMutatePropertiesArchive::initiatedonweb_)
      - PROTOBUF_FIELD_OFFSET(CommandMutatePropertiesArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMutatePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[9]);
}

// ===================================================================

class CommandScaleAllTextArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandScaleAllTextArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandScaleAllTextArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& rollback_cmd(const CommandScaleAllTextArchive* msg);
  static void set_has_rollback_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandScaleAllTextArchive::_Internal::super(const CommandScaleAllTextArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandScaleAllTextArchive::_Internal::rollback_cmd(const CommandScaleAllTextArchive* msg) {
  return *msg->rollback_cmd_;
}
void CommandScaleAllTextArchive::clear_rollback_cmd() {
  if (rollback_cmd_ != nullptr) rollback_cmd_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandScaleAllTextArchive::CommandScaleAllTextArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandScaleAllTextArchive)
}
CommandScaleAllTextArchive::CommandScaleAllTextArchive(const CommandScaleAllTextArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rollback_cmd()) {
    rollback_cmd_ = new ::TSP::Reference(*from.rollback_cmd_);
  } else {
    rollback_cmd_ = nullptr;
  }
  scale_factor_ = from.scale_factor_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandScaleAllTextArchive)
}

void CommandScaleAllTextArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scale_factor_) -
    reinterpret_cast<char*>(&super_)) + sizeof(scale_factor_));
}

CommandScaleAllTextArchive::~CommandScaleAllTextArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandScaleAllTextArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandScaleAllTextArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rollback_cmd_;
}

void CommandScaleAllTextArchive::ArenaDtor(void* object) {
  CommandScaleAllTextArchive* _this = reinterpret_cast< CommandScaleAllTextArchive* >(object);
  (void)_this;
}
void CommandScaleAllTextArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandScaleAllTextArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandScaleAllTextArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandScaleAllTextArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rollback_cmd_ != nullptr);
      rollback_cmd_->Clear();
    }
  }
  scale_factor_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandScaleAllTextArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double scale_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_scale_factor(&has_bits);
          scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandScaleAllTextArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandScaleAllTextArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference rollback_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rollback_cmd(this), target, stream);
  }

  // optional double scale_factor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_scale_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandScaleAllTextArchive)
  return target;
}

size_t CommandScaleAllTextArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandScaleAllTextArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference rollback_cmd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rollback_cmd_);
    }

    // optional double scale_factor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandScaleAllTextArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandScaleAllTextArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandScaleAllTextArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandScaleAllTextArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandScaleAllTextArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandScaleAllTextArchive)
    MergeFrom(*source);
  }
}

void CommandScaleAllTextArchive::MergeFrom(const CommandScaleAllTextArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandScaleAllTextArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rollback_cmd()->::TSP::Reference::MergeFrom(from._internal_rollback_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      scale_factor_ = from.scale_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandScaleAllTextArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandScaleAllTextArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandScaleAllTextArchive::CopyFrom(const CommandScaleAllTextArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandScaleAllTextArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandScaleAllTextArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_cmd()) {
    if (!rollback_cmd_->IsInitialized()) return false;
  }
  return true;
}

void CommandScaleAllTextArchive::InternalSwap(CommandScaleAllTextArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandScaleAllTextArchive, scale_factor_)
      + sizeof(CommandScaleAllTextArchive::scale_factor_)
      - PROTOBUF_FIELD_OFFSET(CommandScaleAllTextArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandScaleAllTextArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[10]);
}

// ===================================================================

class CommandSetFontFamilyArchive_StyleSemanticTag::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFontFamilyArchive_StyleSemanticTag>()._has_bits_);
  static void set_has_swap_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommandSetFontFamilyArchive_StyleSemanticTag::CommandSetFontFamilyArchive_StyleSemanticTag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
}
CommandSetFontFamilyArchive_StyleSemanticTag::CommandSetFontFamilyArchive_StyleSemanticTag(const CommandSetFontFamilyArchive_StyleSemanticTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&swap_type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(swap_type_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
}

void CommandSetFontFamilyArchive_StyleSemanticTag::SharedCtor() {
index_ = 0u;
swap_type_ = 1;
}

CommandSetFontFamilyArchive_StyleSemanticTag::~CommandSetFontFamilyArchive_StyleSemanticTag() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetFontFamilyArchive_StyleSemanticTag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommandSetFontFamilyArchive_StyleSemanticTag::ArenaDtor(void* object) {
  CommandSetFontFamilyArchive_StyleSemanticTag* _this = reinterpret_cast< CommandSetFontFamilyArchive_StyleSemanticTag* >(object);
  (void)_this;
}
void CommandSetFontFamilyArchive_StyleSemanticTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetFontFamilyArchive_StyleSemanticTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetFontFamilyArchive_StyleSemanticTag::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    index_ = 0u;
    swap_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFontFamilyArchive_StyleSemanticTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.StyleSwapType swap_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::StyleSwapType_IsValid(val))) {
            _internal_set_swap_type(static_cast<::TSCH::StyleSwapType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetFontFamilyArchive_StyleSemanticTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.StyleSwapType swap_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_swap_type(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
  return target;
}

size_t CommandSetFontFamilyArchive_StyleSemanticTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional .TSCH.StyleSwapType swap_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swap_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetFontFamilyArchive_StyleSemanticTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetFontFamilyArchive_StyleSemanticTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetFontFamilyArchive_StyleSemanticTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
    MergeFrom(*source);
  }
}

void CommandSetFontFamilyArchive_StyleSemanticTag::MergeFrom(const CommandSetFontFamilyArchive_StyleSemanticTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      swap_type_ = from.swap_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetFontFamilyArchive_StyleSemanticTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFontFamilyArchive_StyleSemanticTag::CopyFrom(const CommandSetFontFamilyArchive_StyleSemanticTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFontFamilyArchive_StyleSemanticTag::IsInitialized() const {
  return true;
}

void CommandSetFontFamilyArchive_StyleSemanticTag::InternalSwap(CommandSetFontFamilyArchive_StyleSemanticTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(index_, other->index_);
  swap(swap_type_, other->swap_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFontFamilyArchive_StyleSemanticTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[11]);
}

// ===================================================================

class CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive>()._has_bits_);
  static const ::TSWP::CharacterStylePropertiesArchive& char_properties(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* msg);
  static void set_has_char_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWP::ParagraphStylePropertiesArchive& para_properties(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* msg);
  static void set_has_para_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::CharacterStylePropertiesArchive&
CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_Internal::char_properties(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* msg) {
  return *msg->char_properties_;
}
const ::TSWP::ParagraphStylePropertiesArchive&
CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_Internal::para_properties(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* msg) {
  return *msg->para_properties_;
}
void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::clear_char_properties() {
  if (char_properties_ != nullptr) char_properties_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::clear_para_properties() {
  if (para_properties_ != nullptr) para_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
}
CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_char_properties()) {
    char_properties_ = new ::TSWP::CharacterStylePropertiesArchive(*from.char_properties_);
  } else {
    char_properties_ = nullptr;
  }
  if (from._internal_has_para_properties()) {
    para_properties_ = new ::TSWP::ParagraphStylePropertiesArchive(*from.para_properties_);
  } else {
    para_properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&char_properties_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&para_properties_) -
    reinterpret_cast<char*>(&char_properties_)) + sizeof(para_properties_));
}

CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::~CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete char_properties_;
  if (this != internal_default_instance()) delete para_properties_;
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::ArenaDtor(void* object) {
  CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* _this = reinterpret_cast< CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* >(object);
  (void)_this;
}
void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(char_properties_ != nullptr);
      char_properties_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(para_properties_ != nullptr);
      para_properties_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_para_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::char_properties(this), target, stream);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::para_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
  return target;
}

size_t CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *char_properties_);
    }

    // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *para_properties_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
    MergeFrom(*source);
  }
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::MergeFrom(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_char_properties()->::TSWP::CharacterStylePropertiesArchive::MergeFrom(from._internal_char_properties());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_para_properties()->::TSWP::ParagraphStylePropertiesArchive::MergeFrom(from._internal_para_properties());
    }
  }
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::CopyFrom(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::IsInitialized() const {
  if (_internal_has_char_properties()) {
    if (!char_properties_->IsInitialized()) return false;
  }
  if (_internal_has_para_properties()) {
    if (!para_properties_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::InternalSwap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive, para_properties_)
      + sizeof(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::para_properties_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive, char_properties_)>(
          reinterpret_cast<char*>(&char_properties_),
          reinterpret_cast<char*>(&other->char_properties_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[12]);
}

// ===================================================================

class CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap>()._has_bits_);
  static const ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag& style_semantic_tag(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* msg);
  static void set_has_style_semantic_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paragraph_style_index_property(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& forward_map(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* msg);
  static void set_has_forward_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& reverse_map(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* msg);
  static void set_has_reverse_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag&
CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_Internal::style_semantic_tag(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* msg) {
  return *msg->style_semantic_tag_;
}
const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive&
CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_Internal::forward_map(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* msg) {
  return *msg->forward_map_;
}
const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive&
CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_Internal::reverse_map(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* msg) {
  return *msg->reverse_map_;
}
CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
}
CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_style_semantic_tag()) {
    style_semantic_tag_ = new ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag(*from.style_semantic_tag_);
  } else {
    style_semantic_tag_ = nullptr;
  }
  if (from._internal_has_forward_map()) {
    forward_map_ = new ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(*from.forward_map_);
  } else {
    forward_map_ = nullptr;
  }
  if (from._internal_has_reverse_map()) {
    reverse_map_ = new ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(*from.reverse_map_);
  } else {
    reverse_map_ = nullptr;
  }
  paragraph_style_index_property_ = from.paragraph_style_index_property_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&style_semantic_tag_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&paragraph_style_index_property_) -
    reinterpret_cast<char*>(&style_semantic_tag_)) + sizeof(paragraph_style_index_property_));
}

CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::~CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete style_semantic_tag_;
  if (this != internal_default_instance()) delete forward_map_;
  if (this != internal_default_instance()) delete reverse_map_;
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::ArenaDtor(void* object) {
  CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* _this = reinterpret_cast< CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* >(object);
  (void)_this;
}
void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(style_semantic_tag_ != nullptr);
      style_semantic_tag_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(forward_map_ != nullptr);
      forward_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reverse_map_ != nullptr);
      reverse_map_->Clear();
    }
  }
  paragraph_style_index_property_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.CommandSetFontFamilyArchive.StyleSemanticTag style_semantic_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_semantic_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paragraph_style_index_property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_paragraph_style_index_property(&has_bits);
          paragraph_style_index_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive forward_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive reverse_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.CommandSetFontFamilyArchive.StyleSemanticTag style_semantic_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::style_semantic_tag(this), target, stream);
  }

  // optional uint32 paragraph_style_index_property = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_paragraph_style_index_property(), target);
  }

  // optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive forward_map = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forward_map(this), target, stream);
  }

  // optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive reverse_map = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reverse_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
  return target;
}

size_t CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSCH.CommandSetFontFamilyArchive.StyleSemanticTag style_semantic_tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_semantic_tag_);
    }

    // optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive forward_map = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_map_);
    }

    // optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive reverse_map = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_map_);
    }

    // optional uint32 paragraph_style_index_property = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paragraph_style_index_property());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
    MergeFrom(*source);
  }
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::MergeFrom(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_style_semantic_tag()->::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag::MergeFrom(from._internal_style_semantic_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_forward_map()->::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::MergeFrom(from._internal_forward_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reverse_map()->::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::MergeFrom(from._internal_reverse_map());
    }
    if (cached_has_bits & 0x00000008u) {
      paragraph_style_index_property_ = from.paragraph_style_index_property_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::CopyFrom(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::IsInitialized() const {
  if (_internal_has_forward_map()) {
    if (!forward_map_->IsInitialized()) return false;
  }
  if (_internal_has_reverse_map()) {
    if (!reverse_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::InternalSwap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap, paragraph_style_index_property_)
      + sizeof(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::paragraph_style_index_property_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap, style_semantic_tag_)>(
          reinterpret_cast<char*>(&style_semantic_tag_),
          reinterpret_cast<char*>(&other->style_semantic_tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[13]);
}

// ===================================================================

class CommandSetFontFamilyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFontFamilyArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetFontFamilyArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& rollback_cmd(const CommandSetFontFamilyArchive* msg);
  static void set_has_rollback_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_font_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_font_family(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_bold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_italic(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000034) ^ 0x00000034) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetFontFamilyArchive::_Internal::super(const CommandSetFontFamilyArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetFontFamilyArchive::_Internal::rollback_cmd(const CommandSetFontFamilyArchive* msg) {
  return *msg->rollback_cmd_;
}
void CommandSetFontFamilyArchive::clear_rollback_cmd() {
  if (rollback_cmd_ != nullptr) rollback_cmd_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSetFontFamilyArchive::CommandSetFontFamilyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paragraph_style_delta_maps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetFontFamilyArchive)
}
CommandSetFontFamilyArchive::CommandSetFontFamilyArchive(const CommandSetFontFamilyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      paragraph_style_delta_maps_(from.paragraph_style_delta_maps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_font_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_new_font_family()) {
    new_font_family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_font_family(), 
      GetArena());
  }
  old_font_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_old_font_family()) {
    old_font_family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_font_family(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rollback_cmd()) {
    rollback_cmd_ = new ::TSP::Reference(*from.rollback_cmd_);
  } else {
    rollback_cmd_ = nullptr;
  }
  ::memcpy(&is_bold_, &from.is_bold_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_italic_) -
    reinterpret_cast<char*>(&is_bold_)) + sizeof(is_italic_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetFontFamilyArchive)
}

void CommandSetFontFamilyArchive::SharedCtor() {
new_font_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
old_font_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_italic_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_italic_));
}

CommandSetFontFamilyArchive::~CommandSetFontFamilyArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetFontFamilyArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetFontFamilyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_font_family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_font_family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rollback_cmd_;
}

void CommandSetFontFamilyArchive::ArenaDtor(void* object) {
  CommandSetFontFamilyArchive* _this = reinterpret_cast< CommandSetFontFamilyArchive* >(object);
  (void)_this;
}
void CommandSetFontFamilyArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetFontFamilyArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetFontFamilyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetFontFamilyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paragraph_style_delta_maps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      new_font_family_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      old_font_family_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rollback_cmd_ != nullptr);
      rollback_cmd_->Clear();
    }
  }
  ::memset(&is_bold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_italic_) -
      reinterpret_cast<char*>(&is_bold_)) + sizeof(is_italic_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFontFamilyArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string new_font_family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_font_family();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandSetFontFamilyArchive.new_font_family");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string old_font_family = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_old_font_family();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandSetFontFamilyArchive.old_font_family");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap paragraph_style_delta_maps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraph_style_delta_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool is_bold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_bold(&has_bits);
          is_bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_italic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_italic(&has_bits);
          is_italic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetFontFamilyArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetFontFamilyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference rollback_cmd = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rollback_cmd(this), target, stream);
  }

  // optional string new_font_family = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_new_font_family().data(), static_cast<int>(this->_internal_new_font_family().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetFontFamilyArchive.new_font_family");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_new_font_family(), target);
  }

  // optional string old_font_family = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_font_family().data(), static_cast<int>(this->_internal_old_font_family().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetFontFamilyArchive.old_font_family");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_old_font_family(), target);
  }

  // repeated .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap paragraph_style_delta_maps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paragraph_style_delta_maps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_paragraph_style_delta_maps(i), target, stream);
  }

  // required bool is_bold = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_bold(), target);
  }

  // required bool is_italic = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_italic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetFontFamilyArchive)
  return target;
}

size_t CommandSetFontFamilyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetFontFamilyArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_is_bold()) {
    // required bool is_bold = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_is_italic()) {
    // required bool is_italic = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetFontFamilyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetFontFamilyArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000034) ^ 0x00000034) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool is_bold = 6;
    total_size += 1 + 1;

    // required bool is_italic = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap paragraph_style_delta_maps = 5;
  total_size += 1UL * this->_internal_paragraph_style_delta_maps_size();
  for (const auto& msg : this->paragraph_style_delta_maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string new_font_family = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_font_family());
    }

    // optional string old_font_family = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_font_family());
    }

  }
  // optional .TSP.Reference rollback_cmd = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rollback_cmd_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetFontFamilyArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetFontFamilyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetFontFamilyArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetFontFamilyArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetFontFamilyArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetFontFamilyArchive)
    MergeFrom(*source);
  }
}

void CommandSetFontFamilyArchive::MergeFrom(const CommandSetFontFamilyArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetFontFamilyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paragraph_style_delta_maps_.MergeFrom(from.paragraph_style_delta_maps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_new_font_family(from._internal_new_font_family());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_old_font_family(from._internal_old_font_family());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rollback_cmd()->::TSP::Reference::MergeFrom(from._internal_rollback_cmd());
    }
    if (cached_has_bits & 0x00000010u) {
      is_bold_ = from.is_bold_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_italic_ = from.is_italic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetFontFamilyArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetFontFamilyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFontFamilyArchive::CopyFrom(const CommandSetFontFamilyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetFontFamilyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFontFamilyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(paragraph_style_delta_maps_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_cmd()) {
    if (!rollback_cmd_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFontFamilyArchive::InternalSwap(CommandSetFontFamilyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paragraph_style_delta_maps_.InternalSwap(&other->paragraph_style_delta_maps_);
  new_font_family_.Swap(&other->new_font_family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_font_family_.Swap(&other->old_font_family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFontFamilyArchive, is_italic_)
      + sizeof(CommandSetFontFamilyArchive::is_italic_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFontFamilyArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFontFamilyArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[14]);
}

// ===================================================================

class CommandApplyFillSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyFillSetArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandApplyFillSetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chart_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::ChartFillSetArchive& fill_set(const CommandApplyFillSetArchive* msg);
  static void set_has_fill_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::ChartFillSetArchive& old_fill_set(const CommandApplyFillSetArchive* msg);
  static void set_has_old_fill_set(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prior_last_applied_fill_set_lookup_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& rollback_cmd(const CommandApplyFillSetArchive* msg);
  static void set_has_rollback_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000026) ^ 0x00000026) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandApplyFillSetArchive::_Internal::super(const CommandApplyFillSetArchive* msg) {
  return *msg->super_;
}
const ::TSCH::ChartFillSetArchive&
CommandApplyFillSetArchive::_Internal::fill_set(const CommandApplyFillSetArchive* msg) {
  return *msg->fill_set_;
}
const ::TSCH::ChartFillSetArchive&
CommandApplyFillSetArchive::_Internal::old_fill_set(const CommandApplyFillSetArchive* msg) {
  return *msg->old_fill_set_;
}
const ::TSP::Reference&
CommandApplyFillSetArchive::_Internal::rollback_cmd(const CommandApplyFillSetArchive* msg) {
  return *msg->rollback_cmd_;
}
void CommandApplyFillSetArchive::clear_fill_set() {
  if (fill_set_ != nullptr) fill_set_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandApplyFillSetArchive::clear_old_fill_set() {
  if (old_fill_set_ != nullptr) old_fill_set_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandApplyFillSetArchive::clear_rollback_cmd() {
  if (rollback_cmd_ != nullptr) rollback_cmd_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandApplyFillSetArchive::CommandApplyFillSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandApplyFillSetArchive)
}
CommandApplyFillSetArchive::CommandApplyFillSetArchive(const CommandApplyFillSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prior_last_applied_fill_set_lookup_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prior_last_applied_fill_set_lookup_string()) {
    prior_last_applied_fill_set_lookup_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prior_last_applied_fill_set_lookup_string(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_fill_set()) {
    fill_set_ = new ::TSCH::ChartFillSetArchive(*from.fill_set_);
  } else {
    fill_set_ = nullptr;
  }
  if (from._internal_has_old_fill_set()) {
    old_fill_set_ = new ::TSCH::ChartFillSetArchive(*from.old_fill_set_);
  } else {
    old_fill_set_ = nullptr;
  }
  if (from._internal_has_rollback_cmd()) {
    rollback_cmd_ = new ::TSP::Reference(*from.rollback_cmd_);
  } else {
    rollback_cmd_ = nullptr;
  }
  chart_type_ = from.chart_type_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandApplyFillSetArchive)
}

void CommandApplyFillSetArchive::SharedCtor() {
prior_last_applied_fill_set_lookup_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chart_type_) -
    reinterpret_cast<char*>(&super_)) + sizeof(chart_type_));
}

CommandApplyFillSetArchive::~CommandApplyFillSetArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandApplyFillSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandApplyFillSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prior_last_applied_fill_set_lookup_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete fill_set_;
  if (this != internal_default_instance()) delete old_fill_set_;
  if (this != internal_default_instance()) delete rollback_cmd_;
}

void CommandApplyFillSetArchive::ArenaDtor(void* object) {
  CommandApplyFillSetArchive* _this = reinterpret_cast< CommandApplyFillSetArchive* >(object);
  (void)_this;
}
void CommandApplyFillSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandApplyFillSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandApplyFillSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandApplyFillSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      prior_last_applied_fill_set_lookup_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fill_set_ != nullptr);
      fill_set_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_fill_set_ != nullptr);
      old_fill_set_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rollback_cmd_ != nullptr);
      rollback_cmd_->Clear();
    }
  }
  chart_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyFillSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.ChartType chart_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_chart_type(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSCH.ChartFillSetArchive fill_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartFillSetArchive old_fill_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_fill_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string prior_last_applied_fill_set_lookup_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_prior_last_applied_fill_set_lookup_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandApplyFillSetArchive.prior_last_applied_fill_set_lookup_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandApplyFillSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandApplyFillSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCH.ChartType chart_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_chart_type(), target);
  }

  // required .TSCH.ChartFillSetArchive fill_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fill_set(this), target, stream);
  }

  // optional .TSCH.ChartFillSetArchive old_fill_set = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_fill_set(this), target, stream);
  }

  // optional string prior_last_applied_fill_set_lookup_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prior_last_applied_fill_set_lookup_string().data(), static_cast<int>(this->_internal_prior_last_applied_fill_set_lookup_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandApplyFillSetArchive.prior_last_applied_fill_set_lookup_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_prior_last_applied_fill_set_lookup_string(), target);
  }

  // optional .TSP.Reference rollback_cmd = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::rollback_cmd(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandApplyFillSetArchive)
  return target;
}

size_t CommandApplyFillSetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandApplyFillSetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_fill_set()) {
    // required .TSCH.ChartFillSetArchive fill_set = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_set_);
  }

  if (_internal_has_chart_type()) {
    // required .TSCH.ChartType chart_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chart_type());
  }

  return total_size;
}
size_t CommandApplyFillSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandApplyFillSetArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000026) ^ 0x00000026) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCH.ChartFillSetArchive fill_set = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_set_);

    // required .TSCH.ChartType chart_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chart_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string prior_last_applied_fill_set_lookup_string = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prior_last_applied_fill_set_lookup_string());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional .TSCH.ChartFillSetArchive old_fill_set = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_fill_set_);
    }

    // optional .TSP.Reference rollback_cmd = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rollback_cmd_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandApplyFillSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandApplyFillSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandApplyFillSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandApplyFillSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandApplyFillSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandApplyFillSetArchive)
    MergeFrom(*source);
  }
}

void CommandApplyFillSetArchive::MergeFrom(const CommandApplyFillSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandApplyFillSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_prior_last_applied_fill_set_lookup_string(from._internal_prior_last_applied_fill_set_lookup_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_fill_set()->::TSCH::ChartFillSetArchive::MergeFrom(from._internal_fill_set());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_fill_set()->::TSCH::ChartFillSetArchive::MergeFrom(from._internal_old_fill_set());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rollback_cmd()->::TSP::Reference::MergeFrom(from._internal_rollback_cmd());
    }
    if (cached_has_bits & 0x00000020u) {
      chart_type_ = from.chart_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandApplyFillSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandApplyFillSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandApplyFillSetArchive::CopyFrom(const CommandApplyFillSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandApplyFillSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyFillSetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_fill_set()) {
    if (!fill_set_->IsInitialized()) return false;
  }
  if (_internal_has_old_fill_set()) {
    if (!old_fill_set_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_cmd()) {
    if (!rollback_cmd_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyFillSetArchive::InternalSwap(CommandApplyFillSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prior_last_applied_fill_set_lookup_string_.Swap(&other->prior_last_applied_fill_set_lookup_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyFillSetArchive, chart_type_)
      + sizeof(CommandApplyFillSetArchive::chart_type_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyFillSetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyFillSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[15]);
}

// ===================================================================

class CommandSetSeriesNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSeriesNameArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetSeriesNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seriesindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oldname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetSeriesNameArchive::_Internal::super(const CommandSetSeriesNameArchive* msg) {
  return *msg->super_;
}
CommandSetSeriesNameArchive::CommandSetSeriesNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetSeriesNameArchive)
}
CommandSetSeriesNameArchive::CommandSetSeriesNameArchive(const CommandSetSeriesNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_oldname()) {
    oldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oldname(), 
      GetArena());
  }
  newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_newname()) {
    newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newname(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  seriesindex_ = from.seriesindex_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetSeriesNameArchive)
}

void CommandSetSeriesNameArchive::SharedCtor() {
oldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seriesindex_) -
    reinterpret_cast<char*>(&super_)) + sizeof(seriesindex_));
}

CommandSetSeriesNameArchive::~CommandSetSeriesNameArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetSeriesNameArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetSeriesNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  oldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void CommandSetSeriesNameArchive::ArenaDtor(void* object) {
  CommandSetSeriesNameArchive* _this = reinterpret_cast< CommandSetSeriesNameArchive* >(object);
  (void)_this;
}
void CommandSetSeriesNameArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetSeriesNameArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetSeriesNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetSeriesNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      oldname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      newname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  seriesindex_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSeriesNameArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 seriesIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seriesindex(&has_bits);
          seriesindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string oldName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_oldname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandSetSeriesNameArchive.oldName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string newName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_newname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandSetSeriesNameArchive.newName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetSeriesNameArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetSeriesNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 seriesIndex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seriesindex(), target);
  }

  // optional string oldName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldname().data(), static_cast<int>(this->_internal_oldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetSeriesNameArchive.oldName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldname(), target);
  }

  // required string newName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetSeriesNameArchive.newName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetSeriesNameArchive)
  return target;
}

size_t CommandSetSeriesNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetSeriesNameArchive)
  size_t total_size = 0;

  if (_internal_has_newname()) {
    // required string newName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_seriesindex()) {
    // required uint32 seriesIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seriesindex());
  }

  return total_size;
}
size_t CommandSetSeriesNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetSeriesNameArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required string newName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());

    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 seriesIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seriesindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string oldName = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetSeriesNameArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetSeriesNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetSeriesNameArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetSeriesNameArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetSeriesNameArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetSeriesNameArchive)
    MergeFrom(*source);
  }
}

void CommandSetSeriesNameArchive::MergeFrom(const CommandSetSeriesNameArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetSeriesNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_oldname(from._internal_oldname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_newname(from._internal_newname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      seriesindex_ = from.seriesindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetSeriesNameArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetSeriesNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSeriesNameArchive::CopyFrom(const CommandSetSeriesNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetSeriesNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSeriesNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSeriesNameArchive::InternalSwap(CommandSetSeriesNameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  oldname_.Swap(&other->oldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newname_.Swap(&other->newname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSeriesNameArchive, seriesindex_)
      + sizeof(CommandSetSeriesNameArchive::seriesindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSeriesNameArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSeriesNameArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[16]);
}

// ===================================================================

class CommandSetCategoryNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetCategoryNameArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetCategoryNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_categoryindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oldname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ismultidataindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetCategoryNameArchive::_Internal::super(const CommandSetCategoryNameArchive* msg) {
  return *msg->super_;
}
CommandSetCategoryNameArchive::CommandSetCategoryNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetCategoryNameArchive)
}
CommandSetCategoryNameArchive::CommandSetCategoryNameArchive(const CommandSetCategoryNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_oldname()) {
    oldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oldname(), 
      GetArena());
  }
  newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_newname()) {
    newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newname(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&categoryindex_, &from.categoryindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&ismultidataindex_) -
    reinterpret_cast<char*>(&categoryindex_)) + sizeof(ismultidataindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetCategoryNameArchive)
}

void CommandSetCategoryNameArchive::SharedCtor() {
oldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ismultidataindex_) -
    reinterpret_cast<char*>(&super_)) + sizeof(ismultidataindex_));
}

CommandSetCategoryNameArchive::~CommandSetCategoryNameArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetCategoryNameArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetCategoryNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  oldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void CommandSetCategoryNameArchive::ArenaDtor(void* object) {
  CommandSetCategoryNameArchive* _this = reinterpret_cast< CommandSetCategoryNameArchive* >(object);
  (void)_this;
}
void CommandSetCategoryNameArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetCategoryNameArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetCategoryNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetCategoryNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      oldname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      newname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&categoryindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ismultidataindex_) -
        reinterpret_cast<char*>(&categoryindex_)) + sizeof(ismultidataindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetCategoryNameArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 categoryIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_categoryindex(&has_bits);
          categoryindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string oldName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_oldname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandSetCategoryNameArchive.oldName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string newName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_newname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandSetCategoryNameArchive.newName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isMultiDataIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ismultidataindex(&has_bits);
          ismultidataindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetCategoryNameArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetCategoryNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 categoryIndex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_categoryindex(), target);
  }

  // optional string oldName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldname().data(), static_cast<int>(this->_internal_oldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetCategoryNameArchive.oldName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldname(), target);
  }

  // required string newName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetCategoryNameArchive.newName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newname(), target);
  }

  // optional bool isMultiDataIndex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ismultidataindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetCategoryNameArchive)
  return target;
}

size_t CommandSetCategoryNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetCategoryNameArchive)
  size_t total_size = 0;

  if (_internal_has_newname()) {
    // required string newName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_categoryindex()) {
    // required uint32 categoryIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_categoryindex());
  }

  return total_size;
}
size_t CommandSetCategoryNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetCategoryNameArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required string newName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());

    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 categoryIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_categoryindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string oldName = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());
  }

  // optional bool isMultiDataIndex = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetCategoryNameArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetCategoryNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetCategoryNameArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetCategoryNameArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetCategoryNameArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetCategoryNameArchive)
    MergeFrom(*source);
  }
}

void CommandSetCategoryNameArchive::MergeFrom(const CommandSetCategoryNameArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetCategoryNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_oldname(from._internal_oldname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_newname(from._internal_newname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      categoryindex_ = from.categoryindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      ismultidataindex_ = from.ismultidataindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetCategoryNameArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetCategoryNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetCategoryNameArchive::CopyFrom(const CommandSetCategoryNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetCategoryNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetCategoryNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetCategoryNameArchive::InternalSwap(CommandSetCategoryNameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  oldname_.Swap(&other->oldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newname_.Swap(&other->newname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetCategoryNameArchive, ismultidataindex_)
      + sizeof(CommandSetCategoryNameArchive::ismultidataindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSetCategoryNameArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetCategoryNameArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[17]);
}

// ===================================================================

class CommandAddGridRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAddGridRowsArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandAddGridRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& row_id(const CommandAddGridRowsArchive* msg);
  static void set_has_row_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& undo_deletion_start_id(const CommandAddGridRowsArchive* msg);
  static void set_has_undo_deletion_start_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& undo_deletion_end_id(const CommandAddGridRowsArchive* msg);
  static void set_has_undo_deletion_end_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandAddGridRowsArchive::_Internal::super(const CommandAddGridRowsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandAddGridRowsArchive::_Internal::row_id(const CommandAddGridRowsArchive* msg) {
  return *msg->row_id_;
}
const ::TSP::UUID&
CommandAddGridRowsArchive::_Internal::undo_deletion_start_id(const CommandAddGridRowsArchive* msg) {
  return *msg->undo_deletion_start_id_;
}
const ::TSP::UUID&
CommandAddGridRowsArchive::_Internal::undo_deletion_end_id(const CommandAddGridRowsArchive* msg) {
  return *msg->undo_deletion_end_id_;
}
void CommandAddGridRowsArchive::clear_row_id() {
  if (row_id_ != nullptr) row_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandAddGridRowsArchive::clear_row_id_list() {
  row_id_list_.Clear();
}
void CommandAddGridRowsArchive::clear_undo_deletion_start_id() {
  if (undo_deletion_start_id_ != nullptr) undo_deletion_start_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandAddGridRowsArchive::clear_undo_deletion_end_id() {
  if (undo_deletion_end_id_ != nullptr) undo_deletion_end_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandAddGridRowsArchive::CommandAddGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_id_list_(arena),
  row_name_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandAddGridRowsArchive)
}
CommandAddGridRowsArchive::CommandAddGridRowsArchive(const CommandAddGridRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      row_id_list_(from.row_id_list_),
      row_name_list_(from.row_name_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_row_id()) {
    row_id_ = new ::TSP::UUID(*from.row_id_);
  } else {
    row_id_ = nullptr;
  }
  if (from._internal_has_undo_deletion_start_id()) {
    undo_deletion_start_id_ = new ::TSP::UUID(*from.undo_deletion_start_id_);
  } else {
    undo_deletion_start_id_ = nullptr;
  }
  if (from._internal_has_undo_deletion_end_id()) {
    undo_deletion_end_id_ = new ::TSP::UUID(*from.undo_deletion_end_id_);
  } else {
    undo_deletion_end_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandAddGridRowsArchive)
}

void CommandAddGridRowsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_deletion_end_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_deletion_end_id_));
}

CommandAddGridRowsArchive::~CommandAddGridRowsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandAddGridRowsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandAddGridRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete row_id_;
  if (this != internal_default_instance()) delete undo_deletion_start_id_;
  if (this != internal_default_instance()) delete undo_deletion_end_id_;
}

void CommandAddGridRowsArchive::ArenaDtor(void* object) {
  CommandAddGridRowsArchive* _this = reinterpret_cast< CommandAddGridRowsArchive* >(object);
  (void)_this;
}
void CommandAddGridRowsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandAddGridRowsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandAddGridRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandAddGridRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_id_list_.Clear();
  row_name_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(row_id_ != nullptr);
      row_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_deletion_start_id_ != nullptr);
      undo_deletion_start_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_deletion_end_id_ != nullptr);
      undo_deletion_end_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAddGridRowsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID row_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string row_name_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_row_name_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandAddGridRowsArchive.row_name_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_deletion_start_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_deletion_start_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_deletion_end_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_deletion_end_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandAddGridRowsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandAddGridRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUID row_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::row_id(this), target, stream);
  }

  // repeated .TSP.UUID row_id_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_row_id_list(i), target, stream);
  }

  // repeated string row_name_list = 4;
  for (int i = 0, n = this->_internal_row_name_list_size(); i < n; i++) {
    const auto& s = this->_internal_row_name_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandAddGridRowsArchive.row_name_list");
    target = stream->WriteString(4, s, target);
  }

  // optional .TSP.UUID undo_deletion_start_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_deletion_start_id(this), target, stream);
  }

  // optional .TSP.UUID undo_deletion_end_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_deletion_end_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandAddGridRowsArchive)
  return target;
}

size_t CommandAddGridRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandAddGridRowsArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_id_list = 3;
  total_size += 1UL * this->_internal_row_id_list_size();
  for (const auto& msg : this->row_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string row_name_list = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(row_name_list_.size());
  for (int i = 0, n = row_name_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      row_name_list_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.UUID row_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *row_id_);
    }

    // optional .TSP.UUID undo_deletion_start_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_deletion_start_id_);
    }

    // optional .TSP.UUID undo_deletion_end_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_deletion_end_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandAddGridRowsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandAddGridRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandAddGridRowsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandAddGridRowsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandAddGridRowsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandAddGridRowsArchive)
    MergeFrom(*source);
  }
}

void CommandAddGridRowsArchive::MergeFrom(const CommandAddGridRowsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandAddGridRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_id_list_.MergeFrom(from.row_id_list_);
  row_name_list_.MergeFrom(from.row_name_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_row_id()->::TSP::UUID::MergeFrom(from._internal_row_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_deletion_start_id()->::TSP::UUID::MergeFrom(from._internal_undo_deletion_start_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_deletion_end_id()->::TSP::UUID::MergeFrom(from._internal_undo_deletion_end_id());
    }
  }
}

void CommandAddGridRowsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandAddGridRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAddGridRowsArchive::CopyFrom(const CommandAddGridRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandAddGridRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddGridRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_id_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_row_id()) {
    if (!row_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_deletion_start_id()) {
    if (!undo_deletion_start_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_deletion_end_id()) {
    if (!undo_deletion_end_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandAddGridRowsArchive::InternalSwap(CommandAddGridRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_id_list_.InternalSwap(&other->row_id_list_);
  row_name_list_.InternalSwap(&other->row_name_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAddGridRowsArchive, undo_deletion_end_id_)
      + sizeof(CommandAddGridRowsArchive::undo_deletion_end_id_)
      - PROTOBUF_FIELD_OFFSET(CommandAddGridRowsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAddGridRowsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[18]);
}

// ===================================================================

class CommandAddGridColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAddGridColumnsArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandAddGridColumnsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& column_id(const CommandAddGridColumnsArchive* msg);
  static void set_has_column_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& undo_deletion_start_id(const CommandAddGridColumnsArchive* msg);
  static void set_has_undo_deletion_start_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& undo_deletion_end_id(const CommandAddGridColumnsArchive* msg);
  static void set_has_undo_deletion_end_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandAddGridColumnsArchive::_Internal::super(const CommandAddGridColumnsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandAddGridColumnsArchive::_Internal::column_id(const CommandAddGridColumnsArchive* msg) {
  return *msg->column_id_;
}
const ::TSP::UUID&
CommandAddGridColumnsArchive::_Internal::undo_deletion_start_id(const CommandAddGridColumnsArchive* msg) {
  return *msg->undo_deletion_start_id_;
}
const ::TSP::UUID&
CommandAddGridColumnsArchive::_Internal::undo_deletion_end_id(const CommandAddGridColumnsArchive* msg) {
  return *msg->undo_deletion_end_id_;
}
void CommandAddGridColumnsArchive::clear_column_id() {
  if (column_id_ != nullptr) column_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandAddGridColumnsArchive::clear_column_id_list() {
  column_id_list_.Clear();
}
void CommandAddGridColumnsArchive::clear_undo_deletion_start_id() {
  if (undo_deletion_start_id_ != nullptr) undo_deletion_start_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandAddGridColumnsArchive::clear_undo_deletion_end_id() {
  if (undo_deletion_end_id_ != nullptr) undo_deletion_end_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandAddGridColumnsArchive::CommandAddGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  column_id_list_(arena),
  column_name_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandAddGridColumnsArchive)
}
CommandAddGridColumnsArchive::CommandAddGridColumnsArchive(const CommandAddGridColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_id_list_(from.column_id_list_),
      column_name_list_(from.column_name_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_column_id()) {
    column_id_ = new ::TSP::UUID(*from.column_id_);
  } else {
    column_id_ = nullptr;
  }
  if (from._internal_has_undo_deletion_start_id()) {
    undo_deletion_start_id_ = new ::TSP::UUID(*from.undo_deletion_start_id_);
  } else {
    undo_deletion_start_id_ = nullptr;
  }
  if (from._internal_has_undo_deletion_end_id()) {
    undo_deletion_end_id_ = new ::TSP::UUID(*from.undo_deletion_end_id_);
  } else {
    undo_deletion_end_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandAddGridColumnsArchive)
}

void CommandAddGridColumnsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_deletion_end_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_deletion_end_id_));
}

CommandAddGridColumnsArchive::~CommandAddGridColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandAddGridColumnsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandAddGridColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete column_id_;
  if (this != internal_default_instance()) delete undo_deletion_start_id_;
  if (this != internal_default_instance()) delete undo_deletion_end_id_;
}

void CommandAddGridColumnsArchive::ArenaDtor(void* object) {
  CommandAddGridColumnsArchive* _this = reinterpret_cast< CommandAddGridColumnsArchive* >(object);
  (void)_this;
}
void CommandAddGridColumnsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandAddGridColumnsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandAddGridColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandAddGridColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_id_list_.Clear();
  column_name_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(column_id_ != nullptr);
      column_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_deletion_start_id_ != nullptr);
      undo_deletion_start_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_deletion_end_id_ != nullptr);
      undo_deletion_end_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAddGridColumnsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID column_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID column_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string column_name_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandAddGridColumnsArchive.column_name_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_deletion_start_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_deletion_start_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_deletion_end_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_deletion_end_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandAddGridColumnsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandAddGridColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUID column_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::column_id(this), target, stream);
  }

  // repeated .TSP.UUID column_id_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_column_id_list(i), target, stream);
  }

  // repeated string column_name_list = 4;
  for (int i = 0, n = this->_internal_column_name_list_size(); i < n; i++) {
    const auto& s = this->_internal_column_name_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandAddGridColumnsArchive.column_name_list");
    target = stream->WriteString(4, s, target);
  }

  // optional .TSP.UUID undo_deletion_start_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_deletion_start_id(this), target, stream);
  }

  // optional .TSP.UUID undo_deletion_end_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_deletion_end_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandAddGridColumnsArchive)
  return target;
}

size_t CommandAddGridColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandAddGridColumnsArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID column_id_list = 3;
  total_size += 1UL * this->_internal_column_id_list_size();
  for (const auto& msg : this->column_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string column_name_list = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_name_list_.size());
  for (int i = 0, n = column_name_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_name_list_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.UUID column_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *column_id_);
    }

    // optional .TSP.UUID undo_deletion_start_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_deletion_start_id_);
    }

    // optional .TSP.UUID undo_deletion_end_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_deletion_end_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandAddGridColumnsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandAddGridColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandAddGridColumnsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandAddGridColumnsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandAddGridColumnsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandAddGridColumnsArchive)
    MergeFrom(*source);
  }
}

void CommandAddGridColumnsArchive::MergeFrom(const CommandAddGridColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandAddGridColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_id_list_.MergeFrom(from.column_id_list_);
  column_name_list_.MergeFrom(from.column_name_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_column_id()->::TSP::UUID::MergeFrom(from._internal_column_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_deletion_start_id()->::TSP::UUID::MergeFrom(from._internal_undo_deletion_start_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_deletion_end_id()->::TSP::UUID::MergeFrom(from._internal_undo_deletion_end_id());
    }
  }
}

void CommandAddGridColumnsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandAddGridColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAddGridColumnsArchive::CopyFrom(const CommandAddGridColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandAddGridColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddGridColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(column_id_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_column_id()) {
    if (!column_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_deletion_start_id()) {
    if (!undo_deletion_start_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_deletion_end_id()) {
    if (!undo_deletion_end_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandAddGridColumnsArchive::InternalSwap(CommandAddGridColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  column_id_list_.InternalSwap(&other->column_id_list_);
  column_name_list_.InternalSwap(&other->column_name_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAddGridColumnsArchive, undo_deletion_end_id_)
      + sizeof(CommandAddGridColumnsArchive::undo_deletion_end_id_)
      - PROTOBUF_FIELD_OFFSET(CommandAddGridColumnsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAddGridColumnsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[19]);
}

// ===================================================================

class CommandMoveGridRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveGridRowsArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandMoveGridRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& start_row_id(const CommandMoveGridRowsArchive* msg);
  static void set_has_start_row_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& end_row_id(const CommandMoveGridRowsArchive* msg);
  static void set_has_end_row_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& after_row_id(const CommandMoveGridRowsArchive* msg);
  static void set_has_after_row_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& undo_after_row_id(const CommandMoveGridRowsArchive* msg);
  static void set_has_undo_after_row_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandMoveGridRowsArchive::_Internal::super(const CommandMoveGridRowsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandMoveGridRowsArchive::_Internal::start_row_id(const CommandMoveGridRowsArchive* msg) {
  return *msg->start_row_id_;
}
const ::TSP::UUID&
CommandMoveGridRowsArchive::_Internal::end_row_id(const CommandMoveGridRowsArchive* msg) {
  return *msg->end_row_id_;
}
const ::TSP::UUID&
CommandMoveGridRowsArchive::_Internal::after_row_id(const CommandMoveGridRowsArchive* msg) {
  return *msg->after_row_id_;
}
const ::TSP::UUID&
CommandMoveGridRowsArchive::_Internal::undo_after_row_id(const CommandMoveGridRowsArchive* msg) {
  return *msg->undo_after_row_id_;
}
void CommandMoveGridRowsArchive::clear_start_row_id() {
  if (start_row_id_ != nullptr) start_row_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandMoveGridRowsArchive::clear_end_row_id() {
  if (end_row_id_ != nullptr) end_row_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandMoveGridRowsArchive::clear_after_row_id() {
  if (after_row_id_ != nullptr) after_row_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandMoveGridRowsArchive::clear_undo_after_row_id() {
  if (undo_after_row_id_ != nullptr) undo_after_row_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandMoveGridRowsArchive::CommandMoveGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandMoveGridRowsArchive)
}
CommandMoveGridRowsArchive::CommandMoveGridRowsArchive(const CommandMoveGridRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_start_row_id()) {
    start_row_id_ = new ::TSP::UUID(*from.start_row_id_);
  } else {
    start_row_id_ = nullptr;
  }
  if (from._internal_has_end_row_id()) {
    end_row_id_ = new ::TSP::UUID(*from.end_row_id_);
  } else {
    end_row_id_ = nullptr;
  }
  if (from._internal_has_after_row_id()) {
    after_row_id_ = new ::TSP::UUID(*from.after_row_id_);
  } else {
    after_row_id_ = nullptr;
  }
  if (from._internal_has_undo_after_row_id()) {
    undo_after_row_id_ = new ::TSP::UUID(*from.undo_after_row_id_);
  } else {
    undo_after_row_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandMoveGridRowsArchive)
}

void CommandMoveGridRowsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_after_row_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_after_row_id_));
}

CommandMoveGridRowsArchive::~CommandMoveGridRowsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandMoveGridRowsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMoveGridRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete start_row_id_;
  if (this != internal_default_instance()) delete end_row_id_;
  if (this != internal_default_instance()) delete after_row_id_;
  if (this != internal_default_instance()) delete undo_after_row_id_;
}

void CommandMoveGridRowsArchive::ArenaDtor(void* object) {
  CommandMoveGridRowsArchive* _this = reinterpret_cast< CommandMoveGridRowsArchive* >(object);
  (void)_this;
}
void CommandMoveGridRowsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMoveGridRowsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMoveGridRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandMoveGridRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_row_id_ != nullptr);
      start_row_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(end_row_id_ != nullptr);
      end_row_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(after_row_id_ != nullptr);
      after_row_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_after_row_id_ != nullptr);
      undo_after_row_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveGridRowsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID start_row_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_row_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID end_row_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_row_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID after_row_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_after_row_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_after_row_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_after_row_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMoveGridRowsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandMoveGridRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID start_row_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_row_id(this), target, stream);
  }

  // required .TSP.UUID end_row_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_row_id(this), target, stream);
  }

  // optional .TSP.UUID after_row_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::after_row_id(this), target, stream);
  }

  // optional .TSP.UUID undo_after_row_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_after_row_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandMoveGridRowsArchive)
  return target;
}

size_t CommandMoveGridRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandMoveGridRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_start_row_id()) {
    // required .TSP.UUID start_row_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_row_id_);
  }

  if (_internal_has_end_row_id()) {
    // required .TSP.UUID end_row_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_row_id_);
  }

  return total_size;
}
size_t CommandMoveGridRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandMoveGridRowsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID start_row_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_row_id_);

    // required .TSP.UUID end_row_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_row_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional .TSP.UUID after_row_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *after_row_id_);
    }

    // optional .TSP.UUID undo_after_row_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_after_row_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMoveGridRowsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandMoveGridRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMoveGridRowsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMoveGridRowsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandMoveGridRowsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandMoveGridRowsArchive)
    MergeFrom(*source);
  }
}

void CommandMoveGridRowsArchive::MergeFrom(const CommandMoveGridRowsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandMoveGridRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start_row_id()->::TSP::UUID::MergeFrom(from._internal_start_row_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_end_row_id()->::TSP::UUID::MergeFrom(from._internal_end_row_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_after_row_id()->::TSP::UUID::MergeFrom(from._internal_after_row_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_after_row_id()->::TSP::UUID::MergeFrom(from._internal_undo_after_row_id());
    }
  }
}

void CommandMoveGridRowsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandMoveGridRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMoveGridRowsArchive::CopyFrom(const CommandMoveGridRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandMoveGridRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveGridRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_start_row_id()) {
    if (!start_row_id_->IsInitialized()) return false;
  }
  if (_internal_has_end_row_id()) {
    if (!end_row_id_->IsInitialized()) return false;
  }
  if (_internal_has_after_row_id()) {
    if (!after_row_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_after_row_id()) {
    if (!undo_after_row_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveGridRowsArchive::InternalSwap(CommandMoveGridRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMoveGridRowsArchive, undo_after_row_id_)
      + sizeof(CommandMoveGridRowsArchive::undo_after_row_id_)
      - PROTOBUF_FIELD_OFFSET(CommandMoveGridRowsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveGridRowsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[20]);
}

// ===================================================================

class CommandMoveGridColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveGridColumnsArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandMoveGridColumnsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& start_column_id(const CommandMoveGridColumnsArchive* msg);
  static void set_has_start_column_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& end_column_id(const CommandMoveGridColumnsArchive* msg);
  static void set_has_end_column_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& after_column_id(const CommandMoveGridColumnsArchive* msg);
  static void set_has_after_column_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& undo_after_column_id(const CommandMoveGridColumnsArchive* msg);
  static void set_has_undo_after_column_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandMoveGridColumnsArchive::_Internal::super(const CommandMoveGridColumnsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandMoveGridColumnsArchive::_Internal::start_column_id(const CommandMoveGridColumnsArchive* msg) {
  return *msg->start_column_id_;
}
const ::TSP::UUID&
CommandMoveGridColumnsArchive::_Internal::end_column_id(const CommandMoveGridColumnsArchive* msg) {
  return *msg->end_column_id_;
}
const ::TSP::UUID&
CommandMoveGridColumnsArchive::_Internal::after_column_id(const CommandMoveGridColumnsArchive* msg) {
  return *msg->after_column_id_;
}
const ::TSP::UUID&
CommandMoveGridColumnsArchive::_Internal::undo_after_column_id(const CommandMoveGridColumnsArchive* msg) {
  return *msg->undo_after_column_id_;
}
void CommandMoveGridColumnsArchive::clear_start_column_id() {
  if (start_column_id_ != nullptr) start_column_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandMoveGridColumnsArchive::clear_end_column_id() {
  if (end_column_id_ != nullptr) end_column_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandMoveGridColumnsArchive::clear_after_column_id() {
  if (after_column_id_ != nullptr) after_column_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandMoveGridColumnsArchive::clear_undo_after_column_id() {
  if (undo_after_column_id_ != nullptr) undo_after_column_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandMoveGridColumnsArchive::CommandMoveGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandMoveGridColumnsArchive)
}
CommandMoveGridColumnsArchive::CommandMoveGridColumnsArchive(const CommandMoveGridColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_start_column_id()) {
    start_column_id_ = new ::TSP::UUID(*from.start_column_id_);
  } else {
    start_column_id_ = nullptr;
  }
  if (from._internal_has_end_column_id()) {
    end_column_id_ = new ::TSP::UUID(*from.end_column_id_);
  } else {
    end_column_id_ = nullptr;
  }
  if (from._internal_has_after_column_id()) {
    after_column_id_ = new ::TSP::UUID(*from.after_column_id_);
  } else {
    after_column_id_ = nullptr;
  }
  if (from._internal_has_undo_after_column_id()) {
    undo_after_column_id_ = new ::TSP::UUID(*from.undo_after_column_id_);
  } else {
    undo_after_column_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandMoveGridColumnsArchive)
}

void CommandMoveGridColumnsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_after_column_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_after_column_id_));
}

CommandMoveGridColumnsArchive::~CommandMoveGridColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandMoveGridColumnsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMoveGridColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete start_column_id_;
  if (this != internal_default_instance()) delete end_column_id_;
  if (this != internal_default_instance()) delete after_column_id_;
  if (this != internal_default_instance()) delete undo_after_column_id_;
}

void CommandMoveGridColumnsArchive::ArenaDtor(void* object) {
  CommandMoveGridColumnsArchive* _this = reinterpret_cast< CommandMoveGridColumnsArchive* >(object);
  (void)_this;
}
void CommandMoveGridColumnsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMoveGridColumnsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMoveGridColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandMoveGridColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_column_id_ != nullptr);
      start_column_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(end_column_id_ != nullptr);
      end_column_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(after_column_id_ != nullptr);
      after_column_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_after_column_id_ != nullptr);
      undo_after_column_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveGridColumnsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID start_column_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_column_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID end_column_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_column_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID after_column_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_after_column_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_after_column_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_after_column_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMoveGridColumnsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandMoveGridColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID start_column_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_column_id(this), target, stream);
  }

  // required .TSP.UUID end_column_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_column_id(this), target, stream);
  }

  // optional .TSP.UUID after_column_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::after_column_id(this), target, stream);
  }

  // optional .TSP.UUID undo_after_column_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_after_column_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandMoveGridColumnsArchive)
  return target;
}

size_t CommandMoveGridColumnsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandMoveGridColumnsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_start_column_id()) {
    // required .TSP.UUID start_column_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_column_id_);
  }

  if (_internal_has_end_column_id()) {
    // required .TSP.UUID end_column_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_column_id_);
  }

  return total_size;
}
size_t CommandMoveGridColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandMoveGridColumnsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID start_column_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_column_id_);

    // required .TSP.UUID end_column_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_column_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional .TSP.UUID after_column_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *after_column_id_);
    }

    // optional .TSP.UUID undo_after_column_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_after_column_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMoveGridColumnsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandMoveGridColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMoveGridColumnsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMoveGridColumnsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandMoveGridColumnsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandMoveGridColumnsArchive)
    MergeFrom(*source);
  }
}

void CommandMoveGridColumnsArchive::MergeFrom(const CommandMoveGridColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandMoveGridColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start_column_id()->::TSP::UUID::MergeFrom(from._internal_start_column_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_end_column_id()->::TSP::UUID::MergeFrom(from._internal_end_column_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_after_column_id()->::TSP::UUID::MergeFrom(from._internal_after_column_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_after_column_id()->::TSP::UUID::MergeFrom(from._internal_undo_after_column_id());
    }
  }
}

void CommandMoveGridColumnsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandMoveGridColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMoveGridColumnsArchive::CopyFrom(const CommandMoveGridColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandMoveGridColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveGridColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_start_column_id()) {
    if (!start_column_id_->IsInitialized()) return false;
  }
  if (_internal_has_end_column_id()) {
    if (!end_column_id_->IsInitialized()) return false;
  }
  if (_internal_has_after_column_id()) {
    if (!after_column_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_after_column_id()) {
    if (!undo_after_column_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveGridColumnsArchive::InternalSwap(CommandMoveGridColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMoveGridColumnsArchive, undo_after_column_id_)
      + sizeof(CommandMoveGridColumnsArchive::undo_after_column_id_)
      - PROTOBUF_FIELD_OFFSET(CommandMoveGridColumnsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveGridColumnsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[21]);
}

// ===================================================================

class CommandDeleteGridRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDeleteGridRowsArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandDeleteGridRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& start_row_id(const CommandDeleteGridRowsArchive* msg);
  static void set_has_start_row_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& end_row_id(const CommandDeleteGridRowsArchive* msg);
  static void set_has_end_row_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_discards_values(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& undo_column_insertion_id(const CommandDeleteGridRowsArchive* msg);
  static void set_has_undo_column_insertion_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& undo_row_insertion_id(const CommandDeleteGridRowsArchive* msg);
  static void set_has_undo_row_insertion_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandDeleteGridRowsArchive::_Internal::super(const CommandDeleteGridRowsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandDeleteGridRowsArchive::_Internal::start_row_id(const CommandDeleteGridRowsArchive* msg) {
  return *msg->start_row_id_;
}
const ::TSP::UUID&
CommandDeleteGridRowsArchive::_Internal::end_row_id(const CommandDeleteGridRowsArchive* msg) {
  return *msg->end_row_id_;
}
const ::TSP::UUID&
CommandDeleteGridRowsArchive::_Internal::undo_column_insertion_id(const CommandDeleteGridRowsArchive* msg) {
  return *msg->undo_column_insertion_id_;
}
const ::TSP::UUID&
CommandDeleteGridRowsArchive::_Internal::undo_row_insertion_id(const CommandDeleteGridRowsArchive* msg) {
  return *msg->undo_row_insertion_id_;
}
void CommandDeleteGridRowsArchive::clear_start_row_id() {
  if (start_row_id_ != nullptr) start_row_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandDeleteGridRowsArchive::clear_end_row_id() {
  if (end_row_id_ != nullptr) end_row_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandDeleteGridRowsArchive::clear_cut_values() {
  cut_values_.Clear();
}
void CommandDeleteGridRowsArchive::clear_undo_column_insertion_id() {
  if (undo_column_insertion_id_ != nullptr) undo_column_insertion_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandDeleteGridRowsArchive::clear_undo_row_insertion_id() {
  if (undo_row_insertion_id_ != nullptr) undo_row_insertion_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandDeleteGridRowsArchive::clear_undo_row_id_list() {
  undo_row_id_list_.Clear();
}
void CommandDeleteGridRowsArchive::clear_undo_column_id_list() {
  undo_column_id_list_.Clear();
}
CommandDeleteGridRowsArchive::CommandDeleteGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cut_row_names_(arena),
  cut_values_(arena),
  undo_row_id_list_(arena),
  cut_column_names_(arena),
  undo_column_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandDeleteGridRowsArchive)
}
CommandDeleteGridRowsArchive::CommandDeleteGridRowsArchive(const CommandDeleteGridRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cut_row_names_(from.cut_row_names_),
      cut_values_(from.cut_values_),
      undo_row_id_list_(from.undo_row_id_list_),
      cut_column_names_(from.cut_column_names_),
      undo_column_id_list_(from.undo_column_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_start_row_id()) {
    start_row_id_ = new ::TSP::UUID(*from.start_row_id_);
  } else {
    start_row_id_ = nullptr;
  }
  if (from._internal_has_end_row_id()) {
    end_row_id_ = new ::TSP::UUID(*from.end_row_id_);
  } else {
    end_row_id_ = nullptr;
  }
  if (from._internal_has_undo_column_insertion_id()) {
    undo_column_insertion_id_ = new ::TSP::UUID(*from.undo_column_insertion_id_);
  } else {
    undo_column_insertion_id_ = nullptr;
  }
  if (from._internal_has_undo_row_insertion_id()) {
    undo_row_insertion_id_ = new ::TSP::UUID(*from.undo_row_insertion_id_);
  } else {
    undo_row_insertion_id_ = nullptr;
  }
  undo_discards_values_ = from.undo_discards_values_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandDeleteGridRowsArchive)
}

void CommandDeleteGridRowsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_discards_values_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_discards_values_));
}

CommandDeleteGridRowsArchive::~CommandDeleteGridRowsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandDeleteGridRowsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandDeleteGridRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete start_row_id_;
  if (this != internal_default_instance()) delete end_row_id_;
  if (this != internal_default_instance()) delete undo_column_insertion_id_;
  if (this != internal_default_instance()) delete undo_row_insertion_id_;
}

void CommandDeleteGridRowsArchive::ArenaDtor(void* object) {
  CommandDeleteGridRowsArchive* _this = reinterpret_cast< CommandDeleteGridRowsArchive* >(object);
  (void)_this;
}
void CommandDeleteGridRowsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDeleteGridRowsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandDeleteGridRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandDeleteGridRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cut_row_names_.Clear();
  cut_values_.Clear();
  undo_row_id_list_.Clear();
  cut_column_names_.Clear();
  undo_column_id_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_row_id_ != nullptr);
      start_row_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(end_row_id_ != nullptr);
      end_row_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_column_insertion_id_ != nullptr);
      undo_column_insertion_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_row_insertion_id_ != nullptr);
      undo_row_insertion_id_->Clear();
    }
  }
  undo_discards_values_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteGridRowsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID start_row_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_row_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID end_row_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_row_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cut_row_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cut_row_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandDeleteGridRowsArchive.cut_row_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.GridRow cut_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cut_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool undo_discards_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_undo_discards_values(&has_bits);
          undo_discards_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_column_insertion_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_column_insertion_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_row_insertion_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_row_insertion_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_row_id_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_row_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string cut_column_names = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cut_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandDeleteGridRowsArchive.cut_column_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_column_id_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_column_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDeleteGridRowsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandDeleteGridRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID start_row_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_row_id(this), target, stream);
  }

  // required .TSP.UUID end_row_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_row_id(this), target, stream);
  }

  // repeated string cut_row_names = 4;
  for (int i = 0, n = this->_internal_cut_row_names_size(); i < n; i++) {
    const auto& s = this->_internal_cut_row_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandDeleteGridRowsArchive.cut_row_names");
    target = stream->WriteString(4, s, target);
  }

  // repeated .TSCH.GridRow cut_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cut_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_cut_values(i), target, stream);
  }

  // optional bool undo_discards_values = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_undo_discards_values(), target);
  }

  // optional .TSP.UUID undo_column_insertion_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::undo_column_insertion_id(this), target, stream);
  }

  // optional .TSP.UUID undo_row_insertion_id = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::undo_row_insertion_id(this), target, stream);
  }

  // repeated .TSP.UUID undo_row_id_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_row_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_undo_row_id_list(i), target, stream);
  }

  // repeated string cut_column_names = 11;
  for (int i = 0, n = this->_internal_cut_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_cut_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandDeleteGridRowsArchive.cut_column_names");
    target = stream->WriteString(11, s, target);
  }

  // repeated .TSP.UUID undo_column_id_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_column_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_undo_column_id_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandDeleteGridRowsArchive)
  return target;
}

size_t CommandDeleteGridRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandDeleteGridRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_start_row_id()) {
    // required .TSP.UUID start_row_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_row_id_);
  }

  if (_internal_has_end_row_id()) {
    // required .TSP.UUID end_row_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_row_id_);
  }

  return total_size;
}
size_t CommandDeleteGridRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandDeleteGridRowsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID start_row_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_row_id_);

    // required .TSP.UUID end_row_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_row_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cut_row_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cut_row_names_.size());
  for (int i = 0, n = cut_row_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cut_row_names_.Get(i));
  }

  // repeated .TSCH.GridRow cut_values = 5;
  total_size += 1UL * this->_internal_cut_values_size();
  for (const auto& msg : this->cut_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_row_id_list = 9;
  total_size += 1UL * this->_internal_undo_row_id_list_size();
  for (const auto& msg : this->undo_row_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string cut_column_names = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cut_column_names_.size());
  for (int i = 0, n = cut_column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cut_column_names_.Get(i));
  }

  // repeated .TSP.UUID undo_column_id_list = 12;
  total_size += 1UL * this->_internal_undo_column_id_list_size();
  for (const auto& msg : this->undo_column_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional .TSP.UUID undo_column_insertion_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_column_insertion_id_);
    }

    // optional .TSP.UUID undo_row_insertion_id = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_row_insertion_id_);
    }

    // optional bool undo_discards_values = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandDeleteGridRowsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandDeleteGridRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandDeleteGridRowsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandDeleteGridRowsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandDeleteGridRowsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandDeleteGridRowsArchive)
    MergeFrom(*source);
  }
}

void CommandDeleteGridRowsArchive::MergeFrom(const CommandDeleteGridRowsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandDeleteGridRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cut_row_names_.MergeFrom(from.cut_row_names_);
  cut_values_.MergeFrom(from.cut_values_);
  undo_row_id_list_.MergeFrom(from.undo_row_id_list_);
  cut_column_names_.MergeFrom(from.cut_column_names_);
  undo_column_id_list_.MergeFrom(from.undo_column_id_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start_row_id()->::TSP::UUID::MergeFrom(from._internal_start_row_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_end_row_id()->::TSP::UUID::MergeFrom(from._internal_end_row_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_column_insertion_id()->::TSP::UUID::MergeFrom(from._internal_undo_column_insertion_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_row_insertion_id()->::TSP::UUID::MergeFrom(from._internal_undo_row_insertion_id());
    }
    if (cached_has_bits & 0x00000020u) {
      undo_discards_values_ = from.undo_discards_values_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandDeleteGridRowsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandDeleteGridRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteGridRowsArchive::CopyFrom(const CommandDeleteGridRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandDeleteGridRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_row_id_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_column_id_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_start_row_id()) {
    if (!start_row_id_->IsInitialized()) return false;
  }
  if (_internal_has_end_row_id()) {
    if (!end_row_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_column_insertion_id()) {
    if (!undo_column_insertion_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_row_insertion_id()) {
    if (!undo_row_insertion_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteGridRowsArchive::InternalSwap(CommandDeleteGridRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cut_row_names_.InternalSwap(&other->cut_row_names_);
  cut_values_.InternalSwap(&other->cut_values_);
  undo_row_id_list_.InternalSwap(&other->undo_row_id_list_);
  cut_column_names_.InternalSwap(&other->cut_column_names_);
  undo_column_id_list_.InternalSwap(&other->undo_column_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDeleteGridRowsArchive, undo_discards_values_)
      + sizeof(CommandDeleteGridRowsArchive::undo_discards_values_)
      - PROTOBUF_FIELD_OFFSET(CommandDeleteGridRowsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteGridRowsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[22]);
}

// ===================================================================

class CommandDeleteGridColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDeleteGridColumnsArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandDeleteGridColumnsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& start_column_id(const CommandDeleteGridColumnsArchive* msg);
  static void set_has_start_column_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& end_column_id(const CommandDeleteGridColumnsArchive* msg);
  static void set_has_end_column_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_discards_values(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& undo_column_insertion_id(const CommandDeleteGridColumnsArchive* msg);
  static void set_has_undo_column_insertion_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& undo_row_insertion_id(const CommandDeleteGridColumnsArchive* msg);
  static void set_has_undo_row_insertion_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandDeleteGridColumnsArchive::_Internal::super(const CommandDeleteGridColumnsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandDeleteGridColumnsArchive::_Internal::start_column_id(const CommandDeleteGridColumnsArchive* msg) {
  return *msg->start_column_id_;
}
const ::TSP::UUID&
CommandDeleteGridColumnsArchive::_Internal::end_column_id(const CommandDeleteGridColumnsArchive* msg) {
  return *msg->end_column_id_;
}
const ::TSP::UUID&
CommandDeleteGridColumnsArchive::_Internal::undo_column_insertion_id(const CommandDeleteGridColumnsArchive* msg) {
  return *msg->undo_column_insertion_id_;
}
const ::TSP::UUID&
CommandDeleteGridColumnsArchive::_Internal::undo_row_insertion_id(const CommandDeleteGridColumnsArchive* msg) {
  return *msg->undo_row_insertion_id_;
}
void CommandDeleteGridColumnsArchive::clear_start_column_id() {
  if (start_column_id_ != nullptr) start_column_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandDeleteGridColumnsArchive::clear_end_column_id() {
  if (end_column_id_ != nullptr) end_column_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandDeleteGridColumnsArchive::clear_cut_values() {
  cut_values_.Clear();
}
void CommandDeleteGridColumnsArchive::clear_undo_column_insertion_id() {
  if (undo_column_insertion_id_ != nullptr) undo_column_insertion_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandDeleteGridColumnsArchive::clear_undo_row_insertion_id() {
  if (undo_row_insertion_id_ != nullptr) undo_row_insertion_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandDeleteGridColumnsArchive::clear_undo_column_id_list() {
  undo_column_id_list_.Clear();
}
void CommandDeleteGridColumnsArchive::clear_undo_row_id_list() {
  undo_row_id_list_.Clear();
}
CommandDeleteGridColumnsArchive::CommandDeleteGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cut_names_(arena),
  cut_values_(arena),
  undo_column_id_list_(arena),
  cut_row_names_(arena),
  undo_row_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandDeleteGridColumnsArchive)
}
CommandDeleteGridColumnsArchive::CommandDeleteGridColumnsArchive(const CommandDeleteGridColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cut_names_(from.cut_names_),
      cut_values_(from.cut_values_),
      undo_column_id_list_(from.undo_column_id_list_),
      cut_row_names_(from.cut_row_names_),
      undo_row_id_list_(from.undo_row_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_start_column_id()) {
    start_column_id_ = new ::TSP::UUID(*from.start_column_id_);
  } else {
    start_column_id_ = nullptr;
  }
  if (from._internal_has_end_column_id()) {
    end_column_id_ = new ::TSP::UUID(*from.end_column_id_);
  } else {
    end_column_id_ = nullptr;
  }
  if (from._internal_has_undo_column_insertion_id()) {
    undo_column_insertion_id_ = new ::TSP::UUID(*from.undo_column_insertion_id_);
  } else {
    undo_column_insertion_id_ = nullptr;
  }
  if (from._internal_has_undo_row_insertion_id()) {
    undo_row_insertion_id_ = new ::TSP::UUID(*from.undo_row_insertion_id_);
  } else {
    undo_row_insertion_id_ = nullptr;
  }
  undo_discards_values_ = from.undo_discards_values_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandDeleteGridColumnsArchive)
}

void CommandDeleteGridColumnsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_discards_values_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_discards_values_));
}

CommandDeleteGridColumnsArchive::~CommandDeleteGridColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandDeleteGridColumnsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandDeleteGridColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete start_column_id_;
  if (this != internal_default_instance()) delete end_column_id_;
  if (this != internal_default_instance()) delete undo_column_insertion_id_;
  if (this != internal_default_instance()) delete undo_row_insertion_id_;
}

void CommandDeleteGridColumnsArchive::ArenaDtor(void* object) {
  CommandDeleteGridColumnsArchive* _this = reinterpret_cast< CommandDeleteGridColumnsArchive* >(object);
  (void)_this;
}
void CommandDeleteGridColumnsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDeleteGridColumnsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandDeleteGridColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandDeleteGridColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cut_names_.Clear();
  cut_values_.Clear();
  undo_column_id_list_.Clear();
  cut_row_names_.Clear();
  undo_row_id_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_column_id_ != nullptr);
      start_column_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(end_column_id_ != nullptr);
      end_column_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_column_insertion_id_ != nullptr);
      undo_column_insertion_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_row_insertion_id_ != nullptr);
      undo_row_insertion_id_->Clear();
    }
  }
  undo_discards_values_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteGridColumnsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID start_column_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_column_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID end_column_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_column_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cut_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cut_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandDeleteGridColumnsArchive.cut_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.GridRow cut_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cut_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool undo_discards_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_undo_discards_values(&has_bits);
          undo_discards_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_column_insertion_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_column_insertion_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_row_insertion_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_row_insertion_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_column_id_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_column_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string cut_row_names = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cut_row_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandDeleteGridColumnsArchive.cut_row_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_row_id_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_row_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDeleteGridColumnsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandDeleteGridColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID start_column_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_column_id(this), target, stream);
  }

  // required .TSP.UUID end_column_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_column_id(this), target, stream);
  }

  // repeated string cut_names = 4;
  for (int i = 0, n = this->_internal_cut_names_size(); i < n; i++) {
    const auto& s = this->_internal_cut_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandDeleteGridColumnsArchive.cut_names");
    target = stream->WriteString(4, s, target);
  }

  // repeated .TSCH.GridRow cut_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cut_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_cut_values(i), target, stream);
  }

  // optional bool undo_discards_values = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_undo_discards_values(), target);
  }

  // optional .TSP.UUID undo_column_insertion_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::undo_column_insertion_id(this), target, stream);
  }

  // optional .TSP.UUID undo_row_insertion_id = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::undo_row_insertion_id(this), target, stream);
  }

  // repeated .TSP.UUID undo_column_id_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_column_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_undo_column_id_list(i), target, stream);
  }

  // repeated string cut_row_names = 11;
  for (int i = 0, n = this->_internal_cut_row_names_size(); i < n; i++) {
    const auto& s = this->_internal_cut_row_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandDeleteGridColumnsArchive.cut_row_names");
    target = stream->WriteString(11, s, target);
  }

  // repeated .TSP.UUID undo_row_id_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_row_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_undo_row_id_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandDeleteGridColumnsArchive)
  return target;
}

size_t CommandDeleteGridColumnsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandDeleteGridColumnsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_start_column_id()) {
    // required .TSP.UUID start_column_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_column_id_);
  }

  if (_internal_has_end_column_id()) {
    // required .TSP.UUID end_column_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_column_id_);
  }

  return total_size;
}
size_t CommandDeleteGridColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandDeleteGridColumnsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID start_column_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_column_id_);

    // required .TSP.UUID end_column_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_column_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cut_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cut_names_.size());
  for (int i = 0, n = cut_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cut_names_.Get(i));
  }

  // repeated .TSCH.GridRow cut_values = 5;
  total_size += 1UL * this->_internal_cut_values_size();
  for (const auto& msg : this->cut_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_column_id_list = 9;
  total_size += 1UL * this->_internal_undo_column_id_list_size();
  for (const auto& msg : this->undo_column_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string cut_row_names = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cut_row_names_.size());
  for (int i = 0, n = cut_row_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cut_row_names_.Get(i));
  }

  // repeated .TSP.UUID undo_row_id_list = 12;
  total_size += 1UL * this->_internal_undo_row_id_list_size();
  for (const auto& msg : this->undo_row_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional .TSP.UUID undo_column_insertion_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_column_insertion_id_);
    }

    // optional .TSP.UUID undo_row_insertion_id = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_row_insertion_id_);
    }

    // optional bool undo_discards_values = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandDeleteGridColumnsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandDeleteGridColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandDeleteGridColumnsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandDeleteGridColumnsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandDeleteGridColumnsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandDeleteGridColumnsArchive)
    MergeFrom(*source);
  }
}

void CommandDeleteGridColumnsArchive::MergeFrom(const CommandDeleteGridColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandDeleteGridColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cut_names_.MergeFrom(from.cut_names_);
  cut_values_.MergeFrom(from.cut_values_);
  undo_column_id_list_.MergeFrom(from.undo_column_id_list_);
  cut_row_names_.MergeFrom(from.cut_row_names_);
  undo_row_id_list_.MergeFrom(from.undo_row_id_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start_column_id()->::TSP::UUID::MergeFrom(from._internal_start_column_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_end_column_id()->::TSP::UUID::MergeFrom(from._internal_end_column_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_column_insertion_id()->::TSP::UUID::MergeFrom(from._internal_undo_column_insertion_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_row_insertion_id()->::TSP::UUID::MergeFrom(from._internal_undo_row_insertion_id());
    }
    if (cached_has_bits & 0x00000020u) {
      undo_discards_values_ = from.undo_discards_values_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandDeleteGridColumnsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandDeleteGridColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteGridColumnsArchive::CopyFrom(const CommandDeleteGridColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandDeleteGridColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_column_id_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_row_id_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_start_column_id()) {
    if (!start_column_id_->IsInitialized()) return false;
  }
  if (_internal_has_end_column_id()) {
    if (!end_column_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_column_insertion_id()) {
    if (!undo_column_insertion_id_->IsInitialized()) return false;
  }
  if (_internal_has_undo_row_insertion_id()) {
    if (!undo_row_insertion_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteGridColumnsArchive::InternalSwap(CommandDeleteGridColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cut_names_.InternalSwap(&other->cut_names_);
  cut_values_.InternalSwap(&other->cut_values_);
  undo_column_id_list_.InternalSwap(&other->undo_column_id_list_);
  cut_row_names_.InternalSwap(&other->cut_row_names_);
  undo_row_id_list_.InternalSwap(&other->undo_row_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDeleteGridColumnsArchive, undo_discards_values_)
      + sizeof(CommandDeleteGridColumnsArchive::undo_discards_values_)
      - PROTOBUF_FIELD_OFFSET(CommandDeleteGridColumnsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteGridColumnsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[23]);
}

// ===================================================================

class CommandSetGridValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetGridValueArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetGridValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rowindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_columnindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_oldvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_newvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetGridValueArchive::_Internal::super(const CommandSetGridValueArchive* msg) {
  return *msg->super_;
}
CommandSetGridValueArchive::CommandSetGridValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetGridValueArchive)
}
CommandSetGridValueArchive::CommandSetGridValueArchive(const CommandSetGridValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&rowindex_, &from.rowindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&newvalue_) -
    reinterpret_cast<char*>(&rowindex_)) + sizeof(newvalue_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetGridValueArchive)
}

void CommandSetGridValueArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&newvalue_) -
    reinterpret_cast<char*>(&super_)) + sizeof(newvalue_));
}

CommandSetGridValueArchive::~CommandSetGridValueArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetGridValueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetGridValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetGridValueArchive::ArenaDtor(void* object) {
  CommandSetGridValueArchive* _this = reinterpret_cast< CommandSetGridValueArchive* >(object);
  (void)_this;
}
void CommandSetGridValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetGridValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetGridValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetGridValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&rowindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newvalue_) -
        reinterpret_cast<char*>(&rowindex_)) + sizeof(newvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetGridValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 rowindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rowindex(&has_bits);
          rowindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 columnindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_columnindex(&has_bits);
          columnindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double oldvalue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_oldvalue(&has_bits);
          oldvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double newvalue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_newvalue(&has_bits);
          newvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetGridValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetGridValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 rowindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rowindex(), target);
  }

  // required uint32 columnindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_columnindex(), target);
  }

  // required double oldvalue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_oldvalue(), target);
  }

  // required double newvalue = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_newvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetGridValueArchive)
  return target;
}

size_t CommandSetGridValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetGridValueArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_rowindex()) {
    // required uint32 rowindex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rowindex());
  }

  if (_internal_has_columnindex()) {
    // required uint32 columnindex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_columnindex());
  }

  if (_internal_has_oldvalue()) {
    // required double oldvalue = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_newvalue()) {
    // required double newvalue = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CommandSetGridValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetGridValueArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 rowindex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rowindex());

    // required uint32 columnindex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_columnindex());

    // required double oldvalue = 4;
    total_size += 1 + 8;

    // required double newvalue = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetGridValueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetGridValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetGridValueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetGridValueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetGridValueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetGridValueArchive)
    MergeFrom(*source);
  }
}

void CommandSetGridValueArchive::MergeFrom(const CommandSetGridValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetGridValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      rowindex_ = from.rowindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      columnindex_ = from.columnindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      oldvalue_ = from.oldvalue_;
    }
    if (cached_has_bits & 0x00000010u) {
      newvalue_ = from.newvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetGridValueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetGridValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetGridValueArchive::CopyFrom(const CommandSetGridValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetGridValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetGridValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetGridValueArchive::InternalSwap(CommandSetGridValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetGridValueArchive, newvalue_)
      + sizeof(CommandSetGridValueArchive::newvalue_)
      - PROTOBUF_FIELD_OFFSET(CommandSetGridValueArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetGridValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[24]);
}

// ===================================================================

class CommandSetGridDirectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetGridDirectionArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetGridDirectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetGridDirectionArchive::_Internal::super(const CommandSetGridDirectionArchive* msg) {
  return *msg->super_;
}
CommandSetGridDirectionArchive::CommandSetGridDirectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetGridDirectionArchive)
}
CommandSetGridDirectionArchive::CommandSetGridDirectionArchive(const CommandSetGridDirectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&old_direction_, &from.old_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_direction_) -
    reinterpret_cast<char*>(&old_direction_)) + sizeof(new_direction_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetGridDirectionArchive)
}

void CommandSetGridDirectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_direction_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_direction_));
}

CommandSetGridDirectionArchive::~CommandSetGridDirectionArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetGridDirectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetGridDirectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetGridDirectionArchive::ArenaDtor(void* object) {
  CommandSetGridDirectionArchive* _this = reinterpret_cast< CommandSetGridDirectionArchive* >(object);
  (void)_this;
}
void CommandSetGridDirectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetGridDirectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetGridDirectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetGridDirectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&old_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_direction_) -
        reinterpret_cast<char*>(&old_direction_)) + sizeof(new_direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetGridDirectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 old_direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_old_direction(&has_bits);
          old_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 new_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_new_direction(&has_bits);
          new_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetGridDirectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetGridDirectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 old_direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_old_direction(), target);
  }

  // required uint32 new_direction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_new_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetGridDirectionArchive)
  return target;
}

size_t CommandSetGridDirectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetGridDirectionArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_old_direction()) {
    // required uint32 old_direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_direction());
  }

  if (_internal_has_new_direction()) {
    // required uint32 new_direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_direction());
  }

  return total_size;
}
size_t CommandSetGridDirectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetGridDirectionArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 old_direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_direction());

    // required uint32 new_direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetGridDirectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetGridDirectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetGridDirectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetGridDirectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetGridDirectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetGridDirectionArchive)
    MergeFrom(*source);
  }
}

void CommandSetGridDirectionArchive::MergeFrom(const CommandSetGridDirectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetGridDirectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      old_direction_ = from.old_direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_direction_ = from.new_direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetGridDirectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetGridDirectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetGridDirectionArchive::CopyFrom(const CommandSetGridDirectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetGridDirectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetGridDirectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetGridDirectionArchive::InternalSwap(CommandSetGridDirectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetGridDirectionArchive, new_direction_)
      + sizeof(CommandSetGridDirectionArchive::new_direction_)
      - PROTOBUF_FIELD_OFFSET(CommandSetGridDirectionArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetGridDirectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[25]);
}

// ===================================================================

class CommandSetSeriesTypeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSeriesTypeArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetSeriesTypeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seriesindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_oldtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_newtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetSeriesTypeArchive::_Internal::super(const CommandSetSeriesTypeArchive* msg) {
  return *msg->super_;
}
CommandSetSeriesTypeArchive::CommandSetSeriesTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetSeriesTypeArchive)
}
CommandSetSeriesTypeArchive::CommandSetSeriesTypeArchive(const CommandSetSeriesTypeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&seriesindex_, &from.seriesindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&newtype_) -
    reinterpret_cast<char*>(&seriesindex_)) + sizeof(newtype_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetSeriesTypeArchive)
}

void CommandSetSeriesTypeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&newtype_) -
    reinterpret_cast<char*>(&super_)) + sizeof(newtype_));
}

CommandSetSeriesTypeArchive::~CommandSetSeriesTypeArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetSeriesTypeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetSeriesTypeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetSeriesTypeArchive::ArenaDtor(void* object) {
  CommandSetSeriesTypeArchive* _this = reinterpret_cast< CommandSetSeriesTypeArchive* >(object);
  (void)_this;
}
void CommandSetSeriesTypeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetSeriesTypeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetSeriesTypeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetSeriesTypeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&seriesindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newtype_) -
        reinterpret_cast<char*>(&seriesindex_)) + sizeof(newtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSeriesTypeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 seriesindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seriesindex(&has_bits);
          seriesindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 oldtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_oldtype(&has_bits);
          oldtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 newtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_newtype(&has_bits);
          newtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetSeriesTypeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetSeriesTypeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 seriesindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seriesindex(), target);
  }

  // required uint32 oldtype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oldtype(), target);
  }

  // required uint32 newtype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_newtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetSeriesTypeArchive)
  return target;
}

size_t CommandSetSeriesTypeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetSeriesTypeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_seriesindex()) {
    // required uint32 seriesindex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seriesindex());
  }

  if (_internal_has_oldtype()) {
    // required uint32 oldtype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oldtype());
  }

  if (_internal_has_newtype()) {
    // required uint32 newtype = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newtype());
  }

  return total_size;
}
size_t CommandSetSeriesTypeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetSeriesTypeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 seriesindex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seriesindex());

    // required uint32 oldtype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oldtype());

    // required uint32 newtype = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetSeriesTypeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetSeriesTypeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetSeriesTypeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetSeriesTypeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetSeriesTypeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetSeriesTypeArchive)
    MergeFrom(*source);
  }
}

void CommandSetSeriesTypeArchive::MergeFrom(const CommandSetSeriesTypeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetSeriesTypeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      seriesindex_ = from.seriesindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      oldtype_ = from.oldtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      newtype_ = from.newtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetSeriesTypeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetSeriesTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSeriesTypeArchive::CopyFrom(const CommandSetSeriesTypeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetSeriesTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSeriesTypeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSeriesTypeArchive::InternalSwap(CommandSetSeriesTypeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSeriesTypeArchive, newtype_)
      + sizeof(CommandSetSeriesTypeArchive::newtype_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSeriesTypeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSeriesTypeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[26]);
}

// ===================================================================

class CommandSetScatterFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetScatterFormatArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetScatterFormatArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oldformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_newformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetScatterFormatArchive::_Internal::super(const CommandSetScatterFormatArchive* msg) {
  return *msg->super_;
}
CommandSetScatterFormatArchive::CommandSetScatterFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetScatterFormatArchive)
}
CommandSetScatterFormatArchive::CommandSetScatterFormatArchive(const CommandSetScatterFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&oldformat_, &from.oldformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&newformat_) -
    reinterpret_cast<char*>(&oldformat_)) + sizeof(newformat_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetScatterFormatArchive)
}

void CommandSetScatterFormatArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&newformat_) -
    reinterpret_cast<char*>(&super_)) + sizeof(newformat_));
}

CommandSetScatterFormatArchive::~CommandSetScatterFormatArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetScatterFormatArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetScatterFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetScatterFormatArchive::ArenaDtor(void* object) {
  CommandSetScatterFormatArchive* _this = reinterpret_cast< CommandSetScatterFormatArchive* >(object);
  (void)_this;
}
void CommandSetScatterFormatArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetScatterFormatArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetScatterFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetScatterFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&oldformat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newformat_) -
        reinterpret_cast<char*>(&oldformat_)) + sizeof(newformat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetScatterFormatArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 oldformat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_oldformat(&has_bits);
          oldformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 newformat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_newformat(&has_bits);
          newformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetScatterFormatArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetScatterFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 oldformat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oldformat(), target);
  }

  // required uint32 newformat = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_newformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetScatterFormatArchive)
  return target;
}

size_t CommandSetScatterFormatArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetScatterFormatArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_oldformat()) {
    // required uint32 oldformat = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oldformat());
  }

  if (_internal_has_newformat()) {
    // required uint32 newformat = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newformat());
  }

  return total_size;
}
size_t CommandSetScatterFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetScatterFormatArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 oldformat = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oldformat());

    // required uint32 newformat = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newformat());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetScatterFormatArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetScatterFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetScatterFormatArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetScatterFormatArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetScatterFormatArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetScatterFormatArchive)
    MergeFrom(*source);
  }
}

void CommandSetScatterFormatArchive::MergeFrom(const CommandSetScatterFormatArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetScatterFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      oldformat_ = from.oldformat_;
    }
    if (cached_has_bits & 0x00000004u) {
      newformat_ = from.newformat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetScatterFormatArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetScatterFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetScatterFormatArchive::CopyFrom(const CommandSetScatterFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetScatterFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetScatterFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetScatterFormatArchive::InternalSwap(CommandSetScatterFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetScatterFormatArchive, newformat_)
      + sizeof(CommandSetScatterFormatArchive::newformat_)
      - PROTOBUF_FIELD_OFFSET(CommandSetScatterFormatArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetScatterFormatArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[27]);
}

// ===================================================================

class CommandSetMultiDataSetIndexArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetMultiDataSetIndexArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetMultiDataSetIndexArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oldindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_newindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetMultiDataSetIndexArchive::_Internal::super(const CommandSetMultiDataSetIndexArchive* msg) {
  return *msg->super_;
}
CommandSetMultiDataSetIndexArchive::CommandSetMultiDataSetIndexArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetMultiDataSetIndexArchive)
}
CommandSetMultiDataSetIndexArchive::CommandSetMultiDataSetIndexArchive(const CommandSetMultiDataSetIndexArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&oldindex_, &from.oldindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&newindex_) -
    reinterpret_cast<char*>(&oldindex_)) + sizeof(newindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetMultiDataSetIndexArchive)
}

void CommandSetMultiDataSetIndexArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&newindex_) -
    reinterpret_cast<char*>(&super_)) + sizeof(newindex_));
}

CommandSetMultiDataSetIndexArchive::~CommandSetMultiDataSetIndexArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetMultiDataSetIndexArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetMultiDataSetIndexArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetMultiDataSetIndexArchive::ArenaDtor(void* object) {
  CommandSetMultiDataSetIndexArchive* _this = reinterpret_cast< CommandSetMultiDataSetIndexArchive* >(object);
  (void)_this;
}
void CommandSetMultiDataSetIndexArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetMultiDataSetIndexArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetMultiDataSetIndexArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetMultiDataSetIndexArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&oldindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newindex_) -
        reinterpret_cast<char*>(&oldindex_)) + sizeof(newindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetMultiDataSetIndexArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 oldindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_oldindex(&has_bits);
          oldindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 newindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_newindex(&has_bits);
          newindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetMultiDataSetIndexArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetMultiDataSetIndexArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 oldindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_oldindex(), target);
  }

  // required uint32 newindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_newindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetMultiDataSetIndexArchive)
  return target;
}

size_t CommandSetMultiDataSetIndexArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetMultiDataSetIndexArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_oldindex()) {
    // required uint32 oldindex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oldindex());
  }

  if (_internal_has_newindex()) {
    // required uint32 newindex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newindex());
  }

  return total_size;
}
size_t CommandSetMultiDataSetIndexArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetMultiDataSetIndexArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 oldindex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oldindex());

    // required uint32 newindex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetMultiDataSetIndexArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetMultiDataSetIndexArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetMultiDataSetIndexArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetMultiDataSetIndexArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetMultiDataSetIndexArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetMultiDataSetIndexArchive)
    MergeFrom(*source);
  }
}

void CommandSetMultiDataSetIndexArchive::MergeFrom(const CommandSetMultiDataSetIndexArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetMultiDataSetIndexArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      oldindex_ = from.oldindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      newindex_ = from.newindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetMultiDataSetIndexArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetMultiDataSetIndexArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetMultiDataSetIndexArchive::CopyFrom(const CommandSetMultiDataSetIndexArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetMultiDataSetIndexArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultiDataSetIndexArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultiDataSetIndexArchive::InternalSwap(CommandSetMultiDataSetIndexArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetMultiDataSetIndexArchive, newindex_)
      + sizeof(CommandSetMultiDataSetIndexArchive::newindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSetMultiDataSetIndexArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetMultiDataSetIndexArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[28]);
}

// ===================================================================

class CommandSetLegendFrameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetLegendFrameArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetLegendFrameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::RectArchive& old_legend_frame(const CommandSetLegendFrameArchive* msg);
  static void set_has_old_legend_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::RectArchive& new_legend_frame(const CommandSetLegendFrameArchive* msg);
  static void set_has_new_legend_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetLegendFrameArchive::_Internal::super(const CommandSetLegendFrameArchive* msg) {
  return *msg->super_;
}
const ::TSCH::RectArchive&
CommandSetLegendFrameArchive::_Internal::old_legend_frame(const CommandSetLegendFrameArchive* msg) {
  return *msg->old_legend_frame_;
}
const ::TSCH::RectArchive&
CommandSetLegendFrameArchive::_Internal::new_legend_frame(const CommandSetLegendFrameArchive* msg) {
  return *msg->new_legend_frame_;
}
void CommandSetLegendFrameArchive::clear_old_legend_frame() {
  if (old_legend_frame_ != nullptr) old_legend_frame_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetLegendFrameArchive::clear_new_legend_frame() {
  if (new_legend_frame_ != nullptr) new_legend_frame_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSetLegendFrameArchive::CommandSetLegendFrameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetLegendFrameArchive)
}
CommandSetLegendFrameArchive::CommandSetLegendFrameArchive(const CommandSetLegendFrameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_legend_frame()) {
    old_legend_frame_ = new ::TSCH::RectArchive(*from.old_legend_frame_);
  } else {
    old_legend_frame_ = nullptr;
  }
  if (from._internal_has_new_legend_frame()) {
    new_legend_frame_ = new ::TSCH::RectArchive(*from.new_legend_frame_);
  } else {
    new_legend_frame_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetLegendFrameArchive)
}

void CommandSetLegendFrameArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_legend_frame_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_legend_frame_));
}

CommandSetLegendFrameArchive::~CommandSetLegendFrameArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetLegendFrameArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetLegendFrameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_legend_frame_;
  if (this != internal_default_instance()) delete new_legend_frame_;
}

void CommandSetLegendFrameArchive::ArenaDtor(void* object) {
  CommandSetLegendFrameArchive* _this = reinterpret_cast< CommandSetLegendFrameArchive* >(object);
  (void)_this;
}
void CommandSetLegendFrameArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetLegendFrameArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetLegendFrameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetLegendFrameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_legend_frame_ != nullptr);
      old_legend_frame_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_legend_frame_ != nullptr);
      new_legend_frame_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetLegendFrameArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.RectArchive old_legend_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_legend_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.RectArchive new_legend_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_legend_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetLegendFrameArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetLegendFrameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCH.RectArchive old_legend_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_legend_frame(this), target, stream);
  }

  // required .TSCH.RectArchive new_legend_frame = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_legend_frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetLegendFrameArchive)
  return target;
}

size_t CommandSetLegendFrameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetLegendFrameArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_old_legend_frame()) {
    // required .TSCH.RectArchive old_legend_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_legend_frame_);
  }

  if (_internal_has_new_legend_frame()) {
    // required .TSCH.RectArchive new_legend_frame = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_legend_frame_);
  }

  return total_size;
}
size_t CommandSetLegendFrameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetLegendFrameArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCH.RectArchive old_legend_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_legend_frame_);

    // required .TSCH.RectArchive new_legend_frame = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_legend_frame_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetLegendFrameArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetLegendFrameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetLegendFrameArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetLegendFrameArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetLegendFrameArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetLegendFrameArchive)
    MergeFrom(*source);
  }
}

void CommandSetLegendFrameArchive::MergeFrom(const CommandSetLegendFrameArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetLegendFrameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_legend_frame()->::TSCH::RectArchive::MergeFrom(from._internal_old_legend_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_legend_frame()->::TSCH::RectArchive::MergeFrom(from._internal_new_legend_frame());
    }
  }
}

void CommandSetLegendFrameArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetLegendFrameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetLegendFrameArchive::CopyFrom(const CommandSetLegendFrameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetLegendFrameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetLegendFrameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_legend_frame()) {
    if (!old_legend_frame_->IsInitialized()) return false;
  }
  if (_internal_has_new_legend_frame()) {
    if (!new_legend_frame_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetLegendFrameArchive::InternalSwap(CommandSetLegendFrameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetLegendFrameArchive, new_legend_frame_)
      + sizeof(CommandSetLegendFrameArchive::new_legend_frame_)
      - PROTOBUF_FIELD_OFFSET(CommandSetLegendFrameArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetLegendFrameArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[29]);
}

// ===================================================================

class CommandSetPieWedgeExplosion::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPieWedgeExplosion>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetPieWedgeExplosion* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& rollback_cmd(const CommandSetPieWedgeExplosion* msg);
  static void set_has_rollback_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetPieWedgeExplosion::_Internal::super(const CommandSetPieWedgeExplosion* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetPieWedgeExplosion::_Internal::rollback_cmd(const CommandSetPieWedgeExplosion* msg) {
  return *msg->rollback_cmd_;
}
void CommandSetPieWedgeExplosion::clear_rollback_cmd() {
  if (rollback_cmd_ != nullptr) rollback_cmd_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetPieWedgeExplosion::CommandSetPieWedgeExplosion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  series_indices_(arena),
  wedge_explosions_(arena),
  old_series_indices_(arena),
  old_wedge_explosions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetPieWedgeExplosion)
}
CommandSetPieWedgeExplosion::CommandSetPieWedgeExplosion(const CommandSetPieWedgeExplosion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      series_indices_(from.series_indices_),
      wedge_explosions_(from.wedge_explosions_),
      old_series_indices_(from.old_series_indices_),
      old_wedge_explosions_(from.old_wedge_explosions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rollback_cmd()) {
    rollback_cmd_ = new ::TSP::Reference(*from.rollback_cmd_);
  } else {
    rollback_cmd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetPieWedgeExplosion)
}

void CommandSetPieWedgeExplosion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rollback_cmd_) -
    reinterpret_cast<char*>(&super_)) + sizeof(rollback_cmd_));
}

CommandSetPieWedgeExplosion::~CommandSetPieWedgeExplosion() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetPieWedgeExplosion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetPieWedgeExplosion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rollback_cmd_;
}

void CommandSetPieWedgeExplosion::ArenaDtor(void* object) {
  CommandSetPieWedgeExplosion* _this = reinterpret_cast< CommandSetPieWedgeExplosion* >(object);
  (void)_this;
}
void CommandSetPieWedgeExplosion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetPieWedgeExplosion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetPieWedgeExplosion::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetPieWedgeExplosion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  series_indices_.Clear();
  wedge_explosions_.Clear();
  old_series_indices_.Clear();
  old_wedge_explosions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rollback_cmd_ != nullptr);
      rollback_cmd_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPieWedgeExplosion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 series_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_series_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_series_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double wedge_explosions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wedge_explosions(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_wedge_explosions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 old_series_indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_series_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_series_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double old_wedge_explosions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_wedge_explosions(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_old_wedge_explosions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetPieWedgeExplosion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetPieWedgeExplosion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated uint32 series_indices = 2;
  for (int i = 0, n = this->_internal_series_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_series_indices(i), target);
  }

  // repeated double wedge_explosions = 3;
  for (int i = 0, n = this->_internal_wedge_explosions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_wedge_explosions(i), target);
  }

  // repeated uint32 old_series_indices = 5;
  for (int i = 0, n = this->_internal_old_series_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_old_series_indices(i), target);
  }

  // repeated double old_wedge_explosions = 6;
  for (int i = 0, n = this->_internal_old_wedge_explosions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_old_wedge_explosions(i), target);
  }

  // optional .TSP.Reference rollback_cmd = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rollback_cmd(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetPieWedgeExplosion)
  return target;
}

size_t CommandSetPieWedgeExplosion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetPieWedgeExplosion)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 series_indices = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->series_indices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_series_indices_size());
    total_size += data_size;
  }

  // repeated double wedge_explosions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_wedge_explosions_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wedge_explosions_size());
    total_size += data_size;
  }

  // repeated uint32 old_series_indices = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->old_series_indices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_old_series_indices_size());
    total_size += data_size;
  }

  // repeated double old_wedge_explosions = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_old_wedge_explosions_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_old_wedge_explosions_size());
    total_size += data_size;
  }

  // optional .TSP.Reference rollback_cmd = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rollback_cmd_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetPieWedgeExplosion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandSetPieWedgeExplosion)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetPieWedgeExplosion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetPieWedgeExplosion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandSetPieWedgeExplosion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandSetPieWedgeExplosion)
    MergeFrom(*source);
  }
}

void CommandSetPieWedgeExplosion::MergeFrom(const CommandSetPieWedgeExplosion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetPieWedgeExplosion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  series_indices_.MergeFrom(from.series_indices_);
  wedge_explosions_.MergeFrom(from.wedge_explosions_);
  old_series_indices_.MergeFrom(from.old_series_indices_);
  old_wedge_explosions_.MergeFrom(from.old_wedge_explosions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rollback_cmd()->::TSP::Reference::MergeFrom(from._internal_rollback_cmd());
    }
  }
}

void CommandSetPieWedgeExplosion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandSetPieWedgeExplosion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetPieWedgeExplosion::CopyFrom(const CommandSetPieWedgeExplosion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetPieWedgeExplosion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPieWedgeExplosion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_cmd()) {
    if (!rollback_cmd_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPieWedgeExplosion::InternalSwap(CommandSetPieWedgeExplosion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  series_indices_.InternalSwap(&other->series_indices_);
  wedge_explosions_.InternalSwap(&other->wedge_explosions_);
  old_series_indices_.InternalSwap(&other->old_series_indices_);
  old_wedge_explosions_.InternalSwap(&other->old_wedge_explosions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPieWedgeExplosion, rollback_cmd_)
      + sizeof(CommandSetPieWedgeExplosion::rollback_cmd_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPieWedgeExplosion, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPieWedgeExplosion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[30]);
}

// ===================================================================

class CommandChartApplyTheme::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartApplyTheme>()._has_bits_);
  static const ::TSS::ApplyThemeChildCommandArchive& super(const CommandChartApplyTheme* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info(const CommandChartApplyTheme* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& swap_command(const CommandChartApplyTheme* msg);
  static void set_has_swap_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& preset(const CommandChartApplyTheme* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSS::ApplyThemeChildCommandArchive&
CommandChartApplyTheme::_Internal::super(const CommandChartApplyTheme* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandChartApplyTheme::_Internal::info(const CommandChartApplyTheme* msg) {
  return *msg->info_;
}
const ::TSP::Reference&
CommandChartApplyTheme::_Internal::swap_command(const CommandChartApplyTheme* msg) {
  return *msg->swap_command_;
}
const ::TSP::Reference&
CommandChartApplyTheme::_Internal::preset(const CommandChartApplyTheme* msg) {
  return *msg->preset_;
}
void CommandChartApplyTheme::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandChartApplyTheme::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandChartApplyTheme::clear_swap_command() {
  if (swap_command_ != nullptr) swap_command_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandChartApplyTheme::clear_preset() {
  if (preset_ != nullptr) preset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandChartApplyTheme::CommandChartApplyTheme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandChartApplyTheme)
}
CommandChartApplyTheme::CommandChartApplyTheme(const CommandChartApplyTheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::ApplyThemeChildCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::TSP::Reference(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_swap_command()) {
    swap_command_ = new ::TSP::Reference(*from.swap_command_);
  } else {
    swap_command_ = nullptr;
  }
  if (from._internal_has_preset()) {
    preset_ = new ::TSP::Reference(*from.preset_);
  } else {
    preset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandChartApplyTheme)
}

void CommandChartApplyTheme::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preset_) -
    reinterpret_cast<char*>(&super_)) + sizeof(preset_));
}

CommandChartApplyTheme::~CommandChartApplyTheme() {
  // @@protoc_insertion_point(destructor:TSCH.CommandChartApplyTheme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandChartApplyTheme::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete swap_command_;
  if (this != internal_default_instance()) delete preset_;
}

void CommandChartApplyTheme::ArenaDtor(void* object) {
  CommandChartApplyTheme* _this = reinterpret_cast< CommandChartApplyTheme* >(object);
  (void)_this;
}
void CommandChartApplyTheme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChartApplyTheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChartApplyTheme::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandChartApplyTheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(swap_command_ != nullptr);
      swap_command_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(preset_ != nullptr);
      preset_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartApplyTheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference swap_command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_swap_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChartApplyTheme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandChartApplyTheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // optional .TSP.Reference swap_command = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::swap_command(this), target, stream);
  }

  // optional .TSP.Reference preset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::preset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandChartApplyTheme)
  return target;
}

size_t CommandChartApplyTheme::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandChartApplyTheme)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_info()) {
    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return total_size;
}
size_t CommandChartApplyTheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandChartApplyTheme)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.Reference swap_command = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swap_command_);
    }

    // optional .TSP.Reference preset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preset_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandChartApplyTheme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandChartApplyTheme)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandChartApplyTheme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandChartApplyTheme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandChartApplyTheme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandChartApplyTheme)
    MergeFrom(*source);
  }
}

void CommandChartApplyTheme::MergeFrom(const CommandChartApplyTheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandChartApplyTheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_info()->::TSP::Reference::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_swap_command()->::TSP::Reference::MergeFrom(from._internal_swap_command());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_preset()->::TSP::Reference::MergeFrom(from._internal_preset());
    }
  }
}

void CommandChartApplyTheme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandChartApplyTheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartApplyTheme::CopyFrom(const CommandChartApplyTheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandChartApplyTheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartApplyTheme::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  if (_internal_has_swap_command()) {
    if (!swap_command_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!preset_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartApplyTheme::InternalSwap(CommandChartApplyTheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartApplyTheme, preset_)
      + sizeof(CommandChartApplyTheme::preset_)
      - PROTOBUF_FIELD_OFFSET(CommandChartApplyTheme, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartApplyTheme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[31]);
}

// ===================================================================

class CommandChartApplyPreset::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartApplyPreset>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandChartApplyPreset* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& preset(const CommandChartApplyPreset* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_preset(const CommandChartApplyPreset* msg);
  static void set_has_old_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_should_apply_swap_tuples(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_are_swap_tuples_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& rollback_preset(const CommandChartApplyPreset* msg);
  static void set_has_rollback_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandChartApplyPreset::_Internal::super(const CommandChartApplyPreset* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandChartApplyPreset::_Internal::preset(const CommandChartApplyPreset* msg) {
  return *msg->preset_;
}
const ::TSP::Reference&
CommandChartApplyPreset::_Internal::old_preset(const CommandChartApplyPreset* msg) {
  return *msg->old_preset_;
}
const ::TSP::Reference&
CommandChartApplyPreset::_Internal::rollback_preset(const CommandChartApplyPreset* msg) {
  return *msg->rollback_preset_;
}
void CommandChartApplyPreset::clear_preset() {
  if (preset_ != nullptr) preset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandChartApplyPreset::clear_old_preset() {
  if (old_preset_ != nullptr) old_preset_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandChartApplyPreset::clear_rollback_preset() {
  if (rollback_preset_ != nullptr) rollback_preset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandChartApplyPreset::CommandChartApplyPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  swap_tuples_(arena),
  inverse_swap_tuples_(arena),
  rollback_swap_tuples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandChartApplyPreset)
}
CommandChartApplyPreset::CommandChartApplyPreset(const CommandChartApplyPreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      swap_tuples_(from.swap_tuples_),
      inverse_swap_tuples_(from.inverse_swap_tuples_),
      rollback_swap_tuples_(from.rollback_swap_tuples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_preset()) {
    preset_ = new ::TSP::Reference(*from.preset_);
  } else {
    preset_ = nullptr;
  }
  if (from._internal_has_old_preset()) {
    old_preset_ = new ::TSP::Reference(*from.old_preset_);
  } else {
    old_preset_ = nullptr;
  }
  if (from._internal_has_rollback_preset()) {
    rollback_preset_ = new ::TSP::Reference(*from.rollback_preset_);
  } else {
    rollback_preset_ = nullptr;
  }
  ::memcpy(&should_apply_swap_tuples_, &from.should_apply_swap_tuples_,
    static_cast<size_t>(reinterpret_cast<char*>(&behavior_) -
    reinterpret_cast<char*>(&should_apply_swap_tuples_)) + sizeof(behavior_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandChartApplyPreset)
}

void CommandChartApplyPreset::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&are_swap_tuples_valid_) -
    reinterpret_cast<char*>(&super_)) + sizeof(are_swap_tuples_valid_));
behavior_ = 1;
}

CommandChartApplyPreset::~CommandChartApplyPreset() {
  // @@protoc_insertion_point(destructor:TSCH.CommandChartApplyPreset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandChartApplyPreset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete preset_;
  if (this != internal_default_instance()) delete old_preset_;
  if (this != internal_default_instance()) delete rollback_preset_;
}

void CommandChartApplyPreset::ArenaDtor(void* object) {
  CommandChartApplyPreset* _this = reinterpret_cast< CommandChartApplyPreset* >(object);
  (void)_this;
}
void CommandChartApplyPreset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChartApplyPreset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChartApplyPreset::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandChartApplyPreset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  swap_tuples_.Clear();
  inverse_swap_tuples_.Clear();
  rollback_swap_tuples_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(preset_ != nullptr);
      preset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_preset_ != nullptr);
      old_preset_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rollback_preset_ != nullptr);
      rollback_preset_->Clear();
    }
  }
  ::memset(&should_apply_swap_tuples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&are_swap_tuples_valid_) -
      reinterpret_cast<char*>(&should_apply_swap_tuples_)) + sizeof(are_swap_tuples_valid_));
  behavior_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartApplyPreset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ApplyPresetBehavior behavior = 2 [default = remove_overrides];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ApplyPresetBehavior_IsValid(val))) {
            _internal_set_behavior(static_cast<::TSCH::ApplyPresetBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_apply_swap_tuples = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_should_apply_swap_tuples(&has_bits);
          should_apply_swap_tuples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_swap_tuples_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_are_swap_tuples_valid(&has_bits);
          are_swap_tuples_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_swap_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.StyleSwapUndoTupleArchive inverse_swap_tuples = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inverse_swap_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_preset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.StyleSwapUndoTupleArchive rollback_swap_tuples = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_swap_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChartApplyPreset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandChartApplyPreset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSCH.ApplyPresetBehavior behavior = 2 [default = remove_overrides];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_behavior(), target);
  }

  // optional .TSP.Reference preset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::preset(this), target, stream);
  }

  // optional .TSP.Reference old_preset = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_preset(this), target, stream);
  }

  // optional bool should_apply_swap_tuples = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_should_apply_swap_tuples(), target);
  }

  // optional bool are_swap_tuples_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_are_swap_tuples_valid(), target);
  }

  // repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_swap_tuples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_swap_tuples(i), target, stream);
  }

  // repeated .TSCH.StyleSwapUndoTupleArchive inverse_swap_tuples = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inverse_swap_tuples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_inverse_swap_tuples(i), target, stream);
  }

  // optional .TSP.Reference rollback_preset = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::rollback_preset(this), target, stream);
  }

  // repeated .TSCH.StyleSwapUndoTupleArchive rollback_swap_tuples = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rollback_swap_tuples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_rollback_swap_tuples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandChartApplyPreset)
  return target;
}

size_t CommandChartApplyPreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandChartApplyPreset)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 7;
  total_size += 1UL * this->_internal_swap_tuples_size();
  for (const auto& msg : this->swap_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.StyleSwapUndoTupleArchive inverse_swap_tuples = 8;
  total_size += 1UL * this->_internal_inverse_swap_tuples_size();
  for (const auto& msg : this->inverse_swap_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.StyleSwapUndoTupleArchive rollback_swap_tuples = 10;
  total_size += 1UL * this->_internal_rollback_swap_tuples_size();
  for (const auto& msg : this->rollback_swap_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .TSP.Reference preset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preset_);
    }

    // optional .TSP.Reference old_preset = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_preset_);
    }

    // optional .TSP.Reference rollback_preset = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rollback_preset_);
    }

    // optional bool should_apply_swap_tuples = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool are_swap_tuples_valid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional .TSCH.ApplyPresetBehavior behavior = 2 [default = remove_overrides];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandChartApplyPreset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandChartApplyPreset)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandChartApplyPreset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandChartApplyPreset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandChartApplyPreset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandChartApplyPreset)
    MergeFrom(*source);
  }
}

void CommandChartApplyPreset::MergeFrom(const CommandChartApplyPreset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandChartApplyPreset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  swap_tuples_.MergeFrom(from.swap_tuples_);
  inverse_swap_tuples_.MergeFrom(from.inverse_swap_tuples_);
  rollback_swap_tuples_.MergeFrom(from.rollback_swap_tuples_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_preset()->::TSP::Reference::MergeFrom(from._internal_preset());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_preset()->::TSP::Reference::MergeFrom(from._internal_old_preset());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rollback_preset()->::TSP::Reference::MergeFrom(from._internal_rollback_preset());
    }
    if (cached_has_bits & 0x00000010u) {
      should_apply_swap_tuples_ = from.should_apply_swap_tuples_;
    }
    if (cached_has_bits & 0x00000020u) {
      are_swap_tuples_valid_ = from.are_swap_tuples_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      behavior_ = from.behavior_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandChartApplyPreset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandChartApplyPreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartApplyPreset::CopyFrom(const CommandChartApplyPreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandChartApplyPreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartApplyPreset::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(swap_tuples_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inverse_swap_tuples_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rollback_swap_tuples_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!preset_->IsInitialized()) return false;
  }
  if (_internal_has_old_preset()) {
    if (!old_preset_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_preset()) {
    if (!rollback_preset_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartApplyPreset::InternalSwap(CommandChartApplyPreset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap_tuples_.InternalSwap(&other->swap_tuples_);
  inverse_swap_tuples_.InternalSwap(&other->inverse_swap_tuples_);
  rollback_swap_tuples_.InternalSwap(&other->rollback_swap_tuples_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartApplyPreset, are_swap_tuples_valid_)
      + sizeof(CommandChartApplyPreset::are_swap_tuples_valid_)
      - PROTOBUF_FIELD_OFFSET(CommandChartApplyPreset, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
  swap(behavior_, other->behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartApplyPreset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[32]);
}

// ===================================================================

class CommandCleanupGeometryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCleanupGeometryArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandCleanupGeometryArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info_geometry_command(const CommandCleanupGeometryArchive* msg);
  static void set_has_info_geometry_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& anchor_attachment_command(const CommandCleanupGeometryArchive* msg);
  static void set_has_anchor_attachment_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::RectArchive& original_legend_rect(const CommandCleanupGeometryArchive* msg);
  static void set_has_original_legend_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandCleanupGeometryArchive::_Internal::super(const CommandCleanupGeometryArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandCleanupGeometryArchive::_Internal::info_geometry_command(const CommandCleanupGeometryArchive* msg) {
  return *msg->info_geometry_command_;
}
const ::TSP::Reference&
CommandCleanupGeometryArchive::_Internal::anchor_attachment_command(const CommandCleanupGeometryArchive* msg) {
  return *msg->anchor_attachment_command_;
}
const ::TSCH::RectArchive&
CommandCleanupGeometryArchive::_Internal::original_legend_rect(const CommandCleanupGeometryArchive* msg) {
  return *msg->original_legend_rect_;
}
void CommandCleanupGeometryArchive::clear_info_geometry_command() {
  if (info_geometry_command_ != nullptr) info_geometry_command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandCleanupGeometryArchive::clear_anchor_attachment_command() {
  if (anchor_attachment_command_ != nullptr) anchor_attachment_command_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandCleanupGeometryArchive::clear_original_legend_rect() {
  if (original_legend_rect_ != nullptr) original_legend_rect_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandCleanupGeometryArchive::CommandCleanupGeometryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandCleanupGeometryArchive)
}
CommandCleanupGeometryArchive::CommandCleanupGeometryArchive(const CommandCleanupGeometryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_info_geometry_command()) {
    info_geometry_command_ = new ::TSP::Reference(*from.info_geometry_command_);
  } else {
    info_geometry_command_ = nullptr;
  }
  if (from._internal_has_anchor_attachment_command()) {
    anchor_attachment_command_ = new ::TSP::Reference(*from.anchor_attachment_command_);
  } else {
    anchor_attachment_command_ = nullptr;
  }
  if (from._internal_has_original_legend_rect()) {
    original_legend_rect_ = new ::TSCH::RectArchive(*from.original_legend_rect_);
  } else {
    original_legend_rect_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandCleanupGeometryArchive)
}

void CommandCleanupGeometryArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&original_legend_rect_) -
    reinterpret_cast<char*>(&super_)) + sizeof(original_legend_rect_));
}

CommandCleanupGeometryArchive::~CommandCleanupGeometryArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandCleanupGeometryArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandCleanupGeometryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete info_geometry_command_;
  if (this != internal_default_instance()) delete anchor_attachment_command_;
  if (this != internal_default_instance()) delete original_legend_rect_;
}

void CommandCleanupGeometryArchive::ArenaDtor(void* object) {
  CommandCleanupGeometryArchive* _this = reinterpret_cast< CommandCleanupGeometryArchive* >(object);
  (void)_this;
}
void CommandCleanupGeometryArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandCleanupGeometryArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandCleanupGeometryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandCleanupGeometryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_geometry_command_ != nullptr);
      info_geometry_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(anchor_attachment_command_ != nullptr);
      anchor_attachment_command_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(original_legend_rect_ != nullptr);
      original_legend_rect_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCleanupGeometryArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference info_geometry_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_geometry_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference anchor_attachment_command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_attachment_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.RectArchive original_legend_rect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_legend_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandCleanupGeometryArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandCleanupGeometryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference info_geometry_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info_geometry_command(this), target, stream);
  }

  // optional .TSP.Reference anchor_attachment_command = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::anchor_attachment_command(this), target, stream);
  }

  // optional .TSCH.RectArchive original_legend_rect = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::original_legend_rect(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandCleanupGeometryArchive)
  return target;
}

size_t CommandCleanupGeometryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandCleanupGeometryArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference info_geometry_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_geometry_command_);
    }

    // optional .TSP.Reference anchor_attachment_command = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchor_attachment_command_);
    }

    // optional .TSCH.RectArchive original_legend_rect = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_legend_rect_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandCleanupGeometryArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandCleanupGeometryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandCleanupGeometryArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandCleanupGeometryArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandCleanupGeometryArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandCleanupGeometryArchive)
    MergeFrom(*source);
  }
}

void CommandCleanupGeometryArchive::MergeFrom(const CommandCleanupGeometryArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandCleanupGeometryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_info_geometry_command()->::TSP::Reference::MergeFrom(from._internal_info_geometry_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_anchor_attachment_command()->::TSP::Reference::MergeFrom(from._internal_anchor_attachment_command());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_original_legend_rect()->::TSCH::RectArchive::MergeFrom(from._internal_original_legend_rect());
    }
  }
}

void CommandCleanupGeometryArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandCleanupGeometryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandCleanupGeometryArchive::CopyFrom(const CommandCleanupGeometryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandCleanupGeometryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCleanupGeometryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_info_geometry_command()) {
    if (!info_geometry_command_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_attachment_command()) {
    if (!anchor_attachment_command_->IsInitialized()) return false;
  }
  if (_internal_has_original_legend_rect()) {
    if (!original_legend_rect_->IsInitialized()) return false;
  }
  return true;
}

void CommandCleanupGeometryArchive::InternalSwap(CommandCleanupGeometryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCleanupGeometryArchive, original_legend_rect_)
      + sizeof(CommandCleanupGeometryArchive::original_legend_rect_)
      - PROTOBUF_FIELD_OFFSET(CommandCleanupGeometryArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCleanupGeometryArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[33]);
}

// ===================================================================

class ChartCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ChartCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& chart_info(const ChartCommandArchive* msg);
  static void set_has_chart_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_original_dirty_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDPath& chart_info_id_path(const ChartCommandArchive* msg);
  static void set_has_chart_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_for_forward_undo_redo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ChartCommandArchive::_Internal::super(const ChartCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ChartCommandArchive::_Internal::chart_info(const ChartCommandArchive* msg) {
  return *msg->chart_info_;
}
const ::TSP::UUIDPath&
ChartCommandArchive::_Internal::chart_info_id_path(const ChartCommandArchive* msg) {
  return *msg->chart_info_id_path_;
}
void ChartCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartCommandArchive::clear_chart_info() {
  if (chart_info_ != nullptr) chart_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartCommandArchive::clear_chart_info_id_path() {
  if (chart_info_id_path_ != nullptr) chart_info_id_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ChartCommandArchive::ChartCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartCommandArchive)
}
ChartCommandArchive::ChartCommandArchive(const ChartCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_chart_info()) {
    chart_info_ = new ::TSP::Reference(*from.chart_info_);
  } else {
    chart_info_ = nullptr;
  }
  if (from._internal_has_chart_info_id_path()) {
    chart_info_id_path_ = new ::TSP::UUIDPath(*from.chart_info_id_path_);
  } else {
    chart_info_id_path_ = nullptr;
  }
  ::memcpy(&original_dirty_state_, &from.original_dirty_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_for_forward_undo_redo_) -
    reinterpret_cast<char*>(&original_dirty_state_)) + sizeof(is_for_forward_undo_redo_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartCommandArchive)
}

void ChartCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_for_forward_undo_redo_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_for_forward_undo_redo_));
}

ChartCommandArchive::~ChartCommandArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete chart_info_;
  if (this != internal_default_instance()) delete chart_info_id_path_;
}

void ChartCommandArchive::ArenaDtor(void* object) {
  ChartCommandArchive* _this = reinterpret_cast< ChartCommandArchive* >(object);
  (void)_this;
}
void ChartCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chart_info_ != nullptr);
      chart_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chart_info_id_path_ != nullptr);
      chart_info_id_path_->Clear();
    }
  }
  ::memset(&original_dirty_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_for_forward_undo_redo_) -
      reinterpret_cast<char*>(&original_dirty_state_)) + sizeof(is_for_forward_undo_redo_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool original_dirty_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_original_dirty_state(&has_bits);
          original_dirty_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath chart_info_id_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_info_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_for_forward_undo_redo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_for_forward_undo_redo(&has_bits);
          is_for_forward_undo_redo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference chart_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chart_info(this), target, stream);
  }

  // optional bool original_dirty_state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_original_dirty_state(), target);
  }

  // optional .TSP.UUIDPath chart_info_id_path = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::chart_info_id_path(this), target, stream);
  }

  // optional bool is_for_forward_undo_redo = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_for_forward_undo_redo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartCommandArchive)
  return target;
}

size_t ChartCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.Reference chart_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_info_);
    }

    // optional .TSP.UUIDPath chart_info_id_path = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_info_id_path_);
    }

    // optional bool original_dirty_state = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_for_forward_undo_redo = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartCommandArchive)
    MergeFrom(*source);
  }
}

void ChartCommandArchive::MergeFrom(const ChartCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chart_info()->::TSP::Reference::MergeFrom(from._internal_chart_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_chart_info_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_chart_info_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      original_dirty_state_ = from.original_dirty_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_for_forward_undo_redo_ = from.is_for_forward_undo_redo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartCommandArchive::CopyFrom(const ChartCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_chart_info()) {
    if (!chart_info_->IsInitialized()) return false;
  }
  if (_internal_has_chart_info_id_path()) {
    if (!chart_info_id_path_->IsInitialized()) return false;
  }
  return true;
}

void ChartCommandArchive::InternalSwap(ChartCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartCommandArchive, is_for_forward_undo_redo_)
      + sizeof(ChartCommandArchive::is_for_forward_undo_redo_)
      - PROTOBUF_FIELD_OFFSET(ChartCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[34]);
}

// ===================================================================

class CommandReplaceGridValuesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceGridValuesArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandReplaceGridValuesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_set_series_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_series_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandReplaceGridValuesArchive::_Internal::super(const CommandReplaceGridValuesArchive* msg) {
  return *msg->super_;
}
void CommandReplaceGridValuesArchive::clear_old_data_rows() {
  old_data_rows_.Clear();
}
void CommandReplaceGridValuesArchive::clear_new_data_rows() {
  new_data_rows_.Clear();
}
void CommandReplaceGridValuesArchive::clear_update_row_uuids() {
  update_row_uuids_.Clear();
}
void CommandReplaceGridValuesArchive::clear_update_column_uuids() {
  update_column_uuids_.Clear();
}
void CommandReplaceGridValuesArchive::clear_add_row_uuids() {
  add_row_uuids_.Clear();
}
void CommandReplaceGridValuesArchive::clear_add_column_uuids() {
  add_column_uuids_.Clear();
}
void CommandReplaceGridValuesArchive::clear_delete_row_uuids() {
  delete_row_uuids_.Clear();
}
void CommandReplaceGridValuesArchive::clear_delete_column_uuids() {
  delete_column_uuids_.Clear();
}
CommandReplaceGridValuesArchive::CommandReplaceGridValuesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  old_data_rows_(arena),
  new_data_rows_(arena),
  old_row_names_(arena),
  new_row_names_(arena),
  old_col_names_(arena),
  new_col_names_(arena),
  update_row_uuids_(arena),
  update_column_uuids_(arena),
  add_row_uuids_(arena),
  add_column_uuids_(arena),
  delete_row_uuids_(arena),
  delete_column_uuids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceGridValuesArchive)
}
CommandReplaceGridValuesArchive::CommandReplaceGridValuesArchive(const CommandReplaceGridValuesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      old_data_rows_(from.old_data_rows_),
      new_data_rows_(from.new_data_rows_),
      old_row_names_(from.old_row_names_),
      new_row_names_(from.new_row_names_),
      old_col_names_(from.old_col_names_),
      new_col_names_(from.new_col_names_),
      update_row_uuids_(from.update_row_uuids_),
      update_column_uuids_(from.update_column_uuids_),
      add_row_uuids_(from.add_row_uuids_),
      add_column_uuids_(from.add_column_uuids_),
      delete_row_uuids_(from.delete_row_uuids_),
      delete_column_uuids_(from.delete_column_uuids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&set_series_direction_, &from.set_series_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_series_direction_) -
    reinterpret_cast<char*>(&set_series_direction_)) + sizeof(new_series_direction_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceGridValuesArchive)
}

void CommandReplaceGridValuesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_series_direction_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_series_direction_));
}

CommandReplaceGridValuesArchive::~CommandReplaceGridValuesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceGridValuesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReplaceGridValuesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandReplaceGridValuesArchive::ArenaDtor(void* object) {
  CommandReplaceGridValuesArchive* _this = reinterpret_cast< CommandReplaceGridValuesArchive* >(object);
  (void)_this;
}
void CommandReplaceGridValuesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReplaceGridValuesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandReplaceGridValuesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceGridValuesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_data_rows_.Clear();
  new_data_rows_.Clear();
  old_row_names_.Clear();
  new_row_names_.Clear();
  old_col_names_.Clear();
  new_col_names_.Clear();
  update_row_uuids_.Clear();
  update_column_uuids_.Clear();
  add_row_uuids_.Clear();
  add_column_uuids_.Clear();
  delete_row_uuids_.Clear();
  delete_column_uuids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&set_series_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_series_direction_) -
        reinterpret_cast<char*>(&set_series_direction_)) + sizeof(new_series_direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceGridValuesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.GridRow old_data_rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_data_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.GridRow new_data_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_data_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string old_row_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_old_row_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandReplaceGridValuesArchive.old_row_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string new_row_names = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_new_row_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandReplaceGridValuesArchive.new_row_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string old_col_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_old_col_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandReplaceGridValuesArchive.old_col_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string new_col_names = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_new_col_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandReplaceGridValuesArchive.new_col_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID update_row_uuids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update_row_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID update_column_uuids = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update_column_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID add_row_uuids = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_add_row_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID add_column_uuids = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_add_column_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID delete_row_uuids = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_row_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID delete_column_uuids = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_column_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool set_series_direction = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_set_series_direction(&has_bits);
          set_series_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_series_direction = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_new_series_direction(&has_bits);
          new_series_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReplaceGridValuesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceGridValuesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSCH.GridRow old_data_rows = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_data_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_old_data_rows(i), target, stream);
  }

  // repeated .TSCH.GridRow new_data_rows = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_data_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_new_data_rows(i), target, stream);
  }

  // repeated string old_row_names = 6;
  for (int i = 0, n = this->_internal_old_row_names_size(); i < n; i++) {
    const auto& s = this->_internal_old_row_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceGridValuesArchive.old_row_names");
    target = stream->WriteString(6, s, target);
  }

  // repeated string new_row_names = 7;
  for (int i = 0, n = this->_internal_new_row_names_size(); i < n; i++) {
    const auto& s = this->_internal_new_row_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceGridValuesArchive.new_row_names");
    target = stream->WriteString(7, s, target);
  }

  // repeated string old_col_names = 8;
  for (int i = 0, n = this->_internal_old_col_names_size(); i < n; i++) {
    const auto& s = this->_internal_old_col_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceGridValuesArchive.old_col_names");
    target = stream->WriteString(8, s, target);
  }

  // repeated string new_col_names = 9;
  for (int i = 0, n = this->_internal_new_col_names_size(); i < n; i++) {
    const auto& s = this->_internal_new_col_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceGridValuesArchive.new_col_names");
    target = stream->WriteString(9, s, target);
  }

  // repeated .TSP.UUID update_row_uuids = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_row_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_update_row_uuids(i), target, stream);
  }

  // repeated .TSP.UUID update_column_uuids = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_column_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_update_column_uuids(i), target, stream);
  }

  // repeated .TSP.UUID add_row_uuids = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_add_row_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_add_row_uuids(i), target, stream);
  }

  // repeated .TSP.UUID add_column_uuids = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_add_column_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_add_column_uuids(i), target, stream);
  }

  // repeated .TSP.UUID delete_row_uuids = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete_row_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_delete_row_uuids(i), target, stream);
  }

  // repeated .TSP.UUID delete_column_uuids = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete_column_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_delete_column_uuids(i), target, stream);
  }

  // optional bool set_series_direction = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_set_series_direction(), target);
  }

  // optional uint32 new_series_direction = 17;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_new_series_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceGridValuesArchive)
  return target;
}

size_t CommandReplaceGridValuesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceGridValuesArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.GridRow old_data_rows = 4;
  total_size += 1UL * this->_internal_old_data_rows_size();
  for (const auto& msg : this->old_data_rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.GridRow new_data_rows = 5;
  total_size += 1UL * this->_internal_new_data_rows_size();
  for (const auto& msg : this->new_data_rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string old_row_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(old_row_names_.size());
  for (int i = 0, n = old_row_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      old_row_names_.Get(i));
  }

  // repeated string new_row_names = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(new_row_names_.size());
  for (int i = 0, n = new_row_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      new_row_names_.Get(i));
  }

  // repeated string old_col_names = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(old_col_names_.size());
  for (int i = 0, n = old_col_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      old_col_names_.Get(i));
  }

  // repeated string new_col_names = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(new_col_names_.size());
  for (int i = 0, n = new_col_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      new_col_names_.Get(i));
  }

  // repeated .TSP.UUID update_row_uuids = 10;
  total_size += 1UL * this->_internal_update_row_uuids_size();
  for (const auto& msg : this->update_row_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID update_column_uuids = 11;
  total_size += 1UL * this->_internal_update_column_uuids_size();
  for (const auto& msg : this->update_column_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID add_row_uuids = 12;
  total_size += 1UL * this->_internal_add_row_uuids_size();
  for (const auto& msg : this->add_row_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID add_column_uuids = 13;
  total_size += 1UL * this->_internal_add_column_uuids_size();
  for (const auto& msg : this->add_column_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID delete_row_uuids = 14;
  total_size += 1UL * this->_internal_delete_row_uuids_size();
  for (const auto& msg : this->delete_row_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID delete_column_uuids = 15;
  total_size += 1UL * this->_internal_delete_column_uuids_size();
  for (const auto& msg : this->delete_column_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool set_series_direction = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional uint32 new_series_direction = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_series_direction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReplaceGridValuesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandReplaceGridValuesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReplaceGridValuesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReplaceGridValuesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandReplaceGridValuesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandReplaceGridValuesArchive)
    MergeFrom(*source);
  }
}

void CommandReplaceGridValuesArchive::MergeFrom(const CommandReplaceGridValuesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceGridValuesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_data_rows_.MergeFrom(from.old_data_rows_);
  new_data_rows_.MergeFrom(from.new_data_rows_);
  old_row_names_.MergeFrom(from.old_row_names_);
  new_row_names_.MergeFrom(from.new_row_names_);
  old_col_names_.MergeFrom(from.old_col_names_);
  new_col_names_.MergeFrom(from.new_col_names_);
  update_row_uuids_.MergeFrom(from.update_row_uuids_);
  update_column_uuids_.MergeFrom(from.update_column_uuids_);
  add_row_uuids_.MergeFrom(from.add_row_uuids_);
  add_column_uuids_.MergeFrom(from.add_column_uuids_);
  delete_row_uuids_.MergeFrom(from.delete_row_uuids_);
  delete_column_uuids_.MergeFrom(from.delete_column_uuids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      set_series_direction_ = from.set_series_direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_series_direction_ = from.new_series_direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandReplaceGridValuesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandReplaceGridValuesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceGridValuesArchive::CopyFrom(const CommandReplaceGridValuesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceGridValuesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceGridValuesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(update_row_uuids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(update_column_uuids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(add_row_uuids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(add_column_uuids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delete_row_uuids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delete_column_uuids_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceGridValuesArchive::InternalSwap(CommandReplaceGridValuesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  old_data_rows_.InternalSwap(&other->old_data_rows_);
  new_data_rows_.InternalSwap(&other->new_data_rows_);
  old_row_names_.InternalSwap(&other->old_row_names_);
  new_row_names_.InternalSwap(&other->new_row_names_);
  old_col_names_.InternalSwap(&other->old_col_names_);
  new_col_names_.InternalSwap(&other->new_col_names_);
  update_row_uuids_.InternalSwap(&other->update_row_uuids_);
  update_column_uuids_.InternalSwap(&other->update_column_uuids_);
  add_row_uuids_.InternalSwap(&other->add_row_uuids_);
  add_column_uuids_.InternalSwap(&other->add_column_uuids_);
  delete_row_uuids_.InternalSwap(&other->delete_row_uuids_);
  delete_column_uuids_.InternalSwap(&other->delete_column_uuids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceGridValuesArchive, new_series_direction_)
      + sizeof(CommandReplaceGridValuesArchive::new_series_direction_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceGridValuesArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceGridValuesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[35]);
}

// ===================================================================

class CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceThemePresetArchive_StyleAndIdentifierPair>()._has_bits_);
  static const ::TSP::Reference& style(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_Internal::style(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair* msg) {
  return *msg->style_;
}
void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CommandReplaceThemePresetArchive_StyleAndIdentifierPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
}
CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CommandReplaceThemePresetArchive_StyleAndIdentifierPair(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
style_ = nullptr;
}

CommandReplaceThemePresetArchive_StyleAndIdentifierPair::~CommandReplaceThemePresetArchive_StyleAndIdentifierPair() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_;
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::ArenaDtor(void* object) {
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair* _this = reinterpret_cast< CommandReplaceThemePresetArchive_StyleAndIdentifierPair* >(object);
  (void)_this;
}
void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference style = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::style(this), target, stream);
  }

  // required string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  return target;
}

size_t CommandReplaceThemePresetArchive_StyleAndIdentifierPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_style()) {
    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  return total_size;
}
size_t CommandReplaceThemePresetArchive_StyleAndIdentifierPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReplaceThemePresetArchive_StyleAndIdentifierPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReplaceThemePresetArchive_StyleAndIdentifierPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
    MergeFrom(*source);
  }
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::MergeFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
  }
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CopyFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::InternalSwap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(style_, other->style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceThemePresetArchive_StyleAndIdentifierPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[36]);
}

// ===================================================================

class CommandReplaceThemePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceThemePresetArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandReplaceThemePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const CommandReplaceThemePresetArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_preset(const CommandReplaceThemePresetArchive* msg);
  static void set_has_old_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& new_preset(const CommandReplaceThemePresetArchive* msg);
  static void set_has_new_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandReplaceThemePresetArchive::_Internal::super(const CommandReplaceThemePresetArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandReplaceThemePresetArchive::_Internal::theme(const CommandReplaceThemePresetArchive* msg) {
  return *msg->theme_;
}
const ::TSP::Reference&
CommandReplaceThemePresetArchive::_Internal::old_preset(const CommandReplaceThemePresetArchive* msg) {
  return *msg->old_preset_;
}
const ::TSP::Reference&
CommandReplaceThemePresetArchive::_Internal::new_preset(const CommandReplaceThemePresetArchive* msg) {
  return *msg->new_preset_;
}
void CommandReplaceThemePresetArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandReplaceThemePresetArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandReplaceThemePresetArchive::clear_old_preset() {
  if (old_preset_ != nullptr) old_preset_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandReplaceThemePresetArchive::clear_new_preset() {
  if (new_preset_ != nullptr) new_preset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandReplaceThemePresetArchive::CommandReplaceThemePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  identifiers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceThemePresetArchive)
}
CommandReplaceThemePresetArchive::CommandReplaceThemePresetArchive(const CommandReplaceThemePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      identifiers_(from.identifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  if (from._internal_has_old_preset()) {
    old_preset_ = new ::TSP::Reference(*from.old_preset_);
  } else {
    old_preset_ = nullptr;
  }
  if (from._internal_has_new_preset()) {
    new_preset_ = new ::TSP::Reference(*from.new_preset_);
  } else {
    new_preset_ = nullptr;
  }
  old_preset_index_ = from.old_preset_index_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceThemePresetArchive)
}

void CommandReplaceThemePresetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_preset_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_preset_index_));
}

CommandReplaceThemePresetArchive::~CommandReplaceThemePresetArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceThemePresetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReplaceThemePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete theme_;
  if (this != internal_default_instance()) delete old_preset_;
  if (this != internal_default_instance()) delete new_preset_;
}

void CommandReplaceThemePresetArchive::ArenaDtor(void* object) {
  CommandReplaceThemePresetArchive* _this = reinterpret_cast< CommandReplaceThemePresetArchive* >(object);
  (void)_this;
}
void CommandReplaceThemePresetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReplaceThemePresetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandReplaceThemePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceThemePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_preset_ != nullptr);
      old_preset_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_preset_ != nullptr);
      new_preset_->Clear();
    }
  }
  old_preset_index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceThemePresetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference new_preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 old_preset_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_old_preset_index(&has_bits);
          old_preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReplaceThemePresetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceThemePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::theme(this), target, stream);
  }

  // optional .TSP.Reference old_preset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_preset(this), target, stream);
  }

  // optional .TSP.Reference new_preset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_preset(this), target, stream);
  }

  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_identifiers(i), target, stream);
  }

  // optional uint64 old_preset_index = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_old_preset_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceThemePresetArchive)
  return target;
}

size_t CommandReplaceThemePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandReplaceThemePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);
  }

  return total_size;
}
size_t CommandReplaceThemePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceThemePresetArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  total_size += 1UL * this->_internal_identifiers_size();
  for (const auto& msg : this->identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference old_preset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_preset_);
    }

    // optional .TSP.Reference new_preset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_preset_);
    }

    // optional uint64 old_preset_index = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_old_preset_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReplaceThemePresetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandReplaceThemePresetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReplaceThemePresetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReplaceThemePresetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandReplaceThemePresetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandReplaceThemePresetArchive)
    MergeFrom(*source);
  }
}

void CommandReplaceThemePresetArchive::MergeFrom(const CommandReplaceThemePresetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceThemePresetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifiers_.MergeFrom(from.identifiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_preset()->::TSP::Reference::MergeFrom(from._internal_old_preset());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_new_preset()->::TSP::Reference::MergeFrom(from._internal_new_preset());
    }
    if (cached_has_bits & 0x00000010u) {
      old_preset_index_ = from.old_preset_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandReplaceThemePresetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandReplaceThemePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceThemePresetArchive::CopyFrom(const CommandReplaceThemePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceThemePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceThemePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  if (_internal_has_old_preset()) {
    if (!old_preset_->IsInitialized()) return false;
  }
  if (_internal_has_new_preset()) {
    if (!new_preset_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceThemePresetArchive::InternalSwap(CommandReplaceThemePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifiers_.InternalSwap(&other->identifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceThemePresetArchive, old_preset_index_)
      + sizeof(CommandReplaceThemePresetArchive::old_preset_index_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceThemePresetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceThemePresetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[37]);
}

// ===================================================================

class CommandInvalidateWPCaches::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInvalidateWPCaches>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandInvalidateWPCaches* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandInvalidateWPCaches::_Internal::super(const CommandInvalidateWPCaches* msg) {
  return *msg->super_;
}
void CommandInvalidateWPCaches::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandInvalidateWPCaches::CommandInvalidateWPCaches(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandInvalidateWPCaches)
}
CommandInvalidateWPCaches::CommandInvalidateWPCaches(const CommandInvalidateWPCaches& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandInvalidateWPCaches)
}

void CommandInvalidateWPCaches::SharedCtor() {
super_ = nullptr;
}

CommandInvalidateWPCaches::~CommandInvalidateWPCaches() {
  // @@protoc_insertion_point(destructor:TSCH.CommandInvalidateWPCaches)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandInvalidateWPCaches::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandInvalidateWPCaches::ArenaDtor(void* object) {
  CommandInvalidateWPCaches* _this = reinterpret_cast< CommandInvalidateWPCaches* >(object);
  (void)_this;
}
void CommandInvalidateWPCaches::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandInvalidateWPCaches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandInvalidateWPCaches::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandInvalidateWPCaches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInvalidateWPCaches::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandInvalidateWPCaches::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandInvalidateWPCaches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandInvalidateWPCaches)
  return target;
}

size_t CommandInvalidateWPCaches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandInvalidateWPCaches)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandInvalidateWPCaches::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandInvalidateWPCaches)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandInvalidateWPCaches* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandInvalidateWPCaches>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandInvalidateWPCaches)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandInvalidateWPCaches)
    MergeFrom(*source);
  }
}

void CommandInvalidateWPCaches::MergeFrom(const CommandInvalidateWPCaches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandInvalidateWPCaches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
}

void CommandInvalidateWPCaches::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandInvalidateWPCaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInvalidateWPCaches::CopyFrom(const CommandInvalidateWPCaches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandInvalidateWPCaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInvalidateWPCaches::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandInvalidateWPCaches::InternalSwap(CommandInvalidateWPCaches* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInvalidateWPCaches::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[38]);
}

// ===================================================================

class CommandReplaceCustomFormatArchive_FormatObjectMutation::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceCustomFormatArchive_FormatObjectMutation>()._has_bits_);
  static void set_has_style_owner_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_style_owner_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format_object_property(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::FormatStructArchive& format_object(const CommandReplaceCustomFormatArchive_FormatObjectMutation* msg);
  static void set_has_format_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSK::FormatStructArchive&
CommandReplaceCustomFormatArchive_FormatObjectMutation::_Internal::format_object(const CommandReplaceCustomFormatArchive_FormatObjectMutation* msg) {
  return *msg->format_object_;
}
void CommandReplaceCustomFormatArchive_FormatObjectMutation::clear_format_object() {
  if (format_object_ != nullptr) format_object_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandReplaceCustomFormatArchive_FormatObjectMutation::CommandReplaceCustomFormatArchive_FormatObjectMutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
}
CommandReplaceCustomFormatArchive_FormatObjectMutation::CommandReplaceCustomFormatArchive_FormatObjectMutation(const CommandReplaceCustomFormatArchive_FormatObjectMutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_format_object()) {
    format_object_ = new ::TSK::FormatStructArchive(*from.format_object_);
  } else {
    format_object_ = nullptr;
  }
  ::memcpy(&style_owner_index_, &from.style_owner_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_owner_type_) -
    reinterpret_cast<char*>(&style_owner_index_)) + sizeof(style_owner_type_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
}

void CommandReplaceCustomFormatArchive_FormatObjectMutation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&format_object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&format_object_property_) -
    reinterpret_cast<char*>(&format_object_)) + sizeof(format_object_property_));
style_owner_type_ = 1;
}

CommandReplaceCustomFormatArchive_FormatObjectMutation::~CommandReplaceCustomFormatArchive_FormatObjectMutation() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReplaceCustomFormatArchive_FormatObjectMutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete format_object_;
}

void CommandReplaceCustomFormatArchive_FormatObjectMutation::ArenaDtor(void* object) {
  CommandReplaceCustomFormatArchive_FormatObjectMutation* _this = reinterpret_cast< CommandReplaceCustomFormatArchive_FormatObjectMutation* >(object);
  (void)_this;
}
void CommandReplaceCustomFormatArchive_FormatObjectMutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReplaceCustomFormatArchive_FormatObjectMutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandReplaceCustomFormatArchive_FormatObjectMutation::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(format_object_ != nullptr);
    format_object_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&style_owner_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&format_object_property_) -
        reinterpret_cast<char*>(&style_owner_index_)) + sizeof(format_object_property_));
    style_owner_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceCustomFormatArchive_FormatObjectMutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.StyleOwnerType style_owner_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::StyleOwnerType_IsValid(val))) {
            _internal_set_style_owner_type(static_cast<::TSCH::StyleOwnerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 style_owner_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_style_owner_index(&has_bits);
          style_owner_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 format_object_property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_format_object_property(&has_bits);
          format_object_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive format_object = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReplaceCustomFormatArchive_FormatObjectMutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.StyleOwnerType style_owner_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_style_owner_type(), target);
  }

  // optional uint32 style_owner_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_style_owner_index(), target);
  }

  // optional uint32 format_object_property = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_format_object_property(), target);
  }

  // optional .TSK.FormatStructArchive format_object = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::format_object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
  return target;
}

size_t CommandReplaceCustomFormatArchive_FormatObjectMutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSK.FormatStructArchive format_object = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_object_);
    }

    // optional uint32 style_owner_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style_owner_index());
    }

    // optional uint32 format_object_property = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_format_object_property());
    }

    // optional .TSCH.StyleOwnerType style_owner_type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_style_owner_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReplaceCustomFormatArchive_FormatObjectMutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReplaceCustomFormatArchive_FormatObjectMutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReplaceCustomFormatArchive_FormatObjectMutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
    MergeFrom(*source);
  }
}

void CommandReplaceCustomFormatArchive_FormatObjectMutation::MergeFrom(const CommandReplaceCustomFormatArchive_FormatObjectMutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_format_object()->::TSK::FormatStructArchive::MergeFrom(from._internal_format_object());
    }
    if (cached_has_bits & 0x00000002u) {
      style_owner_index_ = from.style_owner_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      format_object_property_ = from.format_object_property_;
    }
    if (cached_has_bits & 0x00000008u) {
      style_owner_type_ = from.style_owner_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandReplaceCustomFormatArchive_FormatObjectMutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceCustomFormatArchive_FormatObjectMutation::CopyFrom(const CommandReplaceCustomFormatArchive_FormatObjectMutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceCustomFormatArchive_FormatObjectMutation::IsInitialized() const {
  if (_internal_has_format_object()) {
    if (!format_object_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceCustomFormatArchive_FormatObjectMutation::InternalSwap(CommandReplaceCustomFormatArchive_FormatObjectMutation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceCustomFormatArchive_FormatObjectMutation, format_object_property_)
      + sizeof(CommandReplaceCustomFormatArchive_FormatObjectMutation::format_object_property_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceCustomFormatArchive_FormatObjectMutation, format_object_)>(
          reinterpret_cast<char*>(&format_object_),
          reinterpret_cast<char*>(&other->format_object_));
  swap(style_owner_type_, other->style_owner_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceCustomFormatArchive_FormatObjectMutation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[39]);
}

// ===================================================================

class CommandReplaceCustomFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceCustomFormatArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& rollback_cmd(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_rollback_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& old_format_object(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_old_format_object(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::FormatStructArchive& new_format_object(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_new_format_object(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandReplaceCustomFormatArchive::_Internal::super(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandReplaceCustomFormatArchive::_Internal::rollback_cmd(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->rollback_cmd_;
}
const ::TSK::FormatStructArchive&
CommandReplaceCustomFormatArchive::_Internal::old_format_object(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->old_format_object_;
}
const ::TSK::FormatStructArchive&
CommandReplaceCustomFormatArchive::_Internal::new_format_object(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->new_format_object_;
}
void CommandReplaceCustomFormatArchive::clear_rollback_cmd() {
  if (rollback_cmd_ != nullptr) rollback_cmd_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandReplaceCustomFormatArchive::clear_old_format_object() {
  if (old_format_object_ != nullptr) old_format_object_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandReplaceCustomFormatArchive::clear_new_format_object() {
  if (new_format_object_ != nullptr) new_format_object_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  forward_mutations_(arena),
  reverse_mutations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceCustomFormatArchive)
}
CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(const CommandReplaceCustomFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      forward_mutations_(from.forward_mutations_),
      reverse_mutations_(from.reverse_mutations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rollback_cmd()) {
    rollback_cmd_ = new ::TSP::Reference(*from.rollback_cmd_);
  } else {
    rollback_cmd_ = nullptr;
  }
  if (from._internal_has_old_format_object()) {
    old_format_object_ = new ::TSK::FormatStructArchive(*from.old_format_object_);
  } else {
    old_format_object_ = nullptr;
  }
  if (from._internal_has_new_format_object()) {
    new_format_object_ = new ::TSK::FormatStructArchive(*from.new_format_object_);
  } else {
    new_format_object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceCustomFormatArchive)
}

void CommandReplaceCustomFormatArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_format_object_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_format_object_));
}

CommandReplaceCustomFormatArchive::~CommandReplaceCustomFormatArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceCustomFormatArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReplaceCustomFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rollback_cmd_;
  if (this != internal_default_instance()) delete old_format_object_;
  if (this != internal_default_instance()) delete new_format_object_;
}

void CommandReplaceCustomFormatArchive::ArenaDtor(void* object) {
  CommandReplaceCustomFormatArchive* _this = reinterpret_cast< CommandReplaceCustomFormatArchive* >(object);
  (void)_this;
}
void CommandReplaceCustomFormatArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReplaceCustomFormatArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandReplaceCustomFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceCustomFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forward_mutations_.Clear();
  reverse_mutations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rollback_cmd_ != nullptr);
      rollback_cmd_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_format_object_ != nullptr);
      old_format_object_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_format_object_ != nullptr);
      new_format_object_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceCustomFormatArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive old_format_object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_format_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive new_format_object = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_format_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation forward_mutations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forward_mutations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation reverse_mutations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reverse_mutations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReplaceCustomFormatArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceCustomFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference rollback_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rollback_cmd(this), target, stream);
  }

  // optional .TSK.FormatStructArchive old_format_object = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_format_object(this), target, stream);
  }

  // optional .TSK.FormatStructArchive new_format_object = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_format_object(this), target, stream);
  }

  // repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation forward_mutations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_forward_mutations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_forward_mutations(i), target, stream);
  }

  // repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation reverse_mutations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reverse_mutations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_reverse_mutations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceCustomFormatArchive)
  return target;
}

size_t CommandReplaceCustomFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceCustomFormatArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation forward_mutations = 5;
  total_size += 1UL * this->_internal_forward_mutations_size();
  for (const auto& msg : this->forward_mutations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation reverse_mutations = 6;
  total_size += 1UL * this->_internal_reverse_mutations_size();
  for (const auto& msg : this->reverse_mutations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference rollback_cmd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rollback_cmd_);
    }

    // optional .TSK.FormatStructArchive old_format_object = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_format_object_);
    }

    // optional .TSK.FormatStructArchive new_format_object = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_format_object_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReplaceCustomFormatArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandReplaceCustomFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReplaceCustomFormatArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReplaceCustomFormatArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandReplaceCustomFormatArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandReplaceCustomFormatArchive)
    MergeFrom(*source);
  }
}

void CommandReplaceCustomFormatArchive::MergeFrom(const CommandReplaceCustomFormatArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceCustomFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forward_mutations_.MergeFrom(from.forward_mutations_);
  reverse_mutations_.MergeFrom(from.reverse_mutations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rollback_cmd()->::TSP::Reference::MergeFrom(from._internal_rollback_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_format_object()->::TSK::FormatStructArchive::MergeFrom(from._internal_old_format_object());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_new_format_object()->::TSK::FormatStructArchive::MergeFrom(from._internal_new_format_object());
    }
  }
}

void CommandReplaceCustomFormatArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandReplaceCustomFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceCustomFormatArchive::CopyFrom(const CommandReplaceCustomFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceCustomFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceCustomFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(forward_mutations_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reverse_mutations_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_cmd()) {
    if (!rollback_cmd_->IsInitialized()) return false;
  }
  if (_internal_has_old_format_object()) {
    if (!old_format_object_->IsInitialized()) return false;
  }
  if (_internal_has_new_format_object()) {
    if (!new_format_object_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceCustomFormatArchive::InternalSwap(CommandReplaceCustomFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  forward_mutations_.InternalSwap(&other->forward_mutations_);
  reverse_mutations_.InternalSwap(&other->reverse_mutations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceCustomFormatArchive, new_format_object_)
      + sizeof(CommandReplaceCustomFormatArchive::new_format_object_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceCustomFormatArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceCustomFormatArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[40]);
}

// ===================================================================

class CommandAddReferenceLineArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAddReferenceLineArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandAddReferenceLineArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::ChartAxisIDArchive& axis_id(const CommandAddReferenceLineArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& uuid(const CommandAddReferenceLineArchive* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& non_style(const CommandAddReferenceLineArchive* msg);
  static void set_has_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& style(const CommandAddReferenceLineArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandAddReferenceLineArchive::_Internal::super(const CommandAddReferenceLineArchive* msg) {
  return *msg->super_;
}
const ::TSCH::ChartAxisIDArchive&
CommandAddReferenceLineArchive::_Internal::axis_id(const CommandAddReferenceLineArchive* msg) {
  return *msg->axis_id_;
}
const ::TSP::UUID&
CommandAddReferenceLineArchive::_Internal::uuid(const CommandAddReferenceLineArchive* msg) {
  return *msg->uuid_;
}
const ::TSP::Reference&
CommandAddReferenceLineArchive::_Internal::non_style(const CommandAddReferenceLineArchive* msg) {
  return *msg->non_style_;
}
const ::TSP::Reference&
CommandAddReferenceLineArchive::_Internal::style(const CommandAddReferenceLineArchive* msg) {
  return *msg->style_;
}
void CommandAddReferenceLineArchive::clear_axis_id() {
  if (axis_id_ != nullptr) axis_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandAddReferenceLineArchive::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandAddReferenceLineArchive::clear_non_style() {
  if (non_style_ != nullptr) non_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandAddReferenceLineArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandAddReferenceLineArchive::clear_paragraph_styles() {
  paragraph_styles_.Clear();
}
void CommandAddReferenceLineArchive::clear_rollback_commands() {
  rollback_commands_.Clear();
}
CommandAddReferenceLineArchive::CommandAddReferenceLineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paragraph_styles_(arena),
  rollback_commands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandAddReferenceLineArchive)
}
CommandAddReferenceLineArchive::CommandAddReferenceLineArchive(const CommandAddReferenceLineArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      paragraph_styles_(from.paragraph_styles_),
      rollback_commands_(from.rollback_commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_axis_id()) {
    axis_id_ = new ::TSCH::ChartAxisIDArchive(*from.axis_id_);
  } else {
    axis_id_ = nullptr;
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::UUID(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_non_style()) {
    non_style_ = new ::TSP::Reference(*from.non_style_);
  } else {
    non_style_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandAddReferenceLineArchive)
}

void CommandAddReferenceLineArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(style_));
}

CommandAddReferenceLineArchive::~CommandAddReferenceLineArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandAddReferenceLineArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandAddReferenceLineArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete axis_id_;
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete non_style_;
  if (this != internal_default_instance()) delete style_;
}

void CommandAddReferenceLineArchive::ArenaDtor(void* object) {
  CommandAddReferenceLineArchive* _this = reinterpret_cast< CommandAddReferenceLineArchive* >(object);
  (void)_this;
}
void CommandAddReferenceLineArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandAddReferenceLineArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandAddReferenceLineArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandAddReferenceLineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paragraph_styles_.Clear();
  rollback_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(axis_id_ != nullptr);
      axis_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(non_style_ != nullptr);
      non_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAddReferenceLineArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.ChartAxisIDArchive axis_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference non_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference rollback_commands = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandAddReferenceLineArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandAddReferenceLineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCH.ChartAxisIDArchive axis_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::axis_id(this), target, stream);
  }

  // optional .TSP.UUID uuid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::uuid(this), target, stream);
  }

  // required .TSP.Reference non_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::non_style(this), target, stream);
  }

  // optional .TSP.Reference style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::style(this), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paragraph_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_paragraph_styles(i), target, stream);
  }

  // repeated .TSP.Reference rollback_commands = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rollback_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_rollback_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandAddReferenceLineArchive)
  return target;
}

size_t CommandAddReferenceLineArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandAddReferenceLineArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_axis_id()) {
    // required .TSCH.ChartAxisIDArchive axis_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *axis_id_);
  }

  if (_internal_has_non_style()) {
    // required .TSP.Reference non_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *non_style_);
  }

  return total_size;
}
size_t CommandAddReferenceLineArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandAddReferenceLineArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCH.ChartAxisIDArchive axis_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *axis_id_);

    // required .TSP.Reference non_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *non_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference paragraph_styles = 6;
  total_size += 1UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference rollback_commands = 7;
  total_size += 1UL * this->_internal_rollback_commands_size();
  for (const auto& msg : this->rollback_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUID uuid = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  // optional .TSP.Reference style = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandAddReferenceLineArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandAddReferenceLineArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandAddReferenceLineArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandAddReferenceLineArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandAddReferenceLineArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandAddReferenceLineArchive)
    MergeFrom(*source);
  }
}

void CommandAddReferenceLineArchive::MergeFrom(const CommandAddReferenceLineArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandAddReferenceLineArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paragraph_styles_.MergeFrom(from.paragraph_styles_);
  rollback_commands_.MergeFrom(from.rollback_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(from._internal_axis_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_uuid()->::TSP::UUID::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_non_style()->::TSP::Reference::MergeFrom(from._internal_non_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
  }
}

void CommandAddReferenceLineArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandAddReferenceLineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAddReferenceLineArchive::CopyFrom(const CommandAddReferenceLineArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandAddReferenceLineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddReferenceLineArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(paragraph_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rollback_commands_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_non_style()) {
    if (!non_style_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  return true;
}

void CommandAddReferenceLineArchive::InternalSwap(CommandAddReferenceLineArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paragraph_styles_.InternalSwap(&other->paragraph_styles_);
  rollback_commands_.InternalSwap(&other->rollback_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAddReferenceLineArchive, style_)
      + sizeof(CommandAddReferenceLineArchive::style_)
      - PROTOBUF_FIELD_OFFSET(CommandAddReferenceLineArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAddReferenceLineArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[41]);
}

// ===================================================================

class CommandDeleteReferenceLineArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDeleteReferenceLineArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandDeleteReferenceLineArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::ChartAxisIDArchive& axis_id(const CommandDeleteReferenceLineArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& uuid(const CommandDeleteReferenceLineArchive* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& non_style(const CommandDeleteReferenceLineArchive* msg);
  static void set_has_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& style(const CommandDeleteReferenceLineArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& style_swap_command(const CommandDeleteReferenceLineArchive* msg);
  static void set_has_style_swap_command(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandDeleteReferenceLineArchive::_Internal::super(const CommandDeleteReferenceLineArchive* msg) {
  return *msg->super_;
}
const ::TSCH::ChartAxisIDArchive&
CommandDeleteReferenceLineArchive::_Internal::axis_id(const CommandDeleteReferenceLineArchive* msg) {
  return *msg->axis_id_;
}
const ::TSP::UUID&
CommandDeleteReferenceLineArchive::_Internal::uuid(const CommandDeleteReferenceLineArchive* msg) {
  return *msg->uuid_;
}
const ::TSP::Reference&
CommandDeleteReferenceLineArchive::_Internal::non_style(const CommandDeleteReferenceLineArchive* msg) {
  return *msg->non_style_;
}
const ::TSP::Reference&
CommandDeleteReferenceLineArchive::_Internal::style(const CommandDeleteReferenceLineArchive* msg) {
  return *msg->style_;
}
const ::TSP::Reference&
CommandDeleteReferenceLineArchive::_Internal::style_swap_command(const CommandDeleteReferenceLineArchive* msg) {
  return *msg->style_swap_command_;
}
void CommandDeleteReferenceLineArchive::clear_axis_id() {
  if (axis_id_ != nullptr) axis_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandDeleteReferenceLineArchive::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandDeleteReferenceLineArchive::clear_non_style() {
  if (non_style_ != nullptr) non_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandDeleteReferenceLineArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandDeleteReferenceLineArchive::clear_paragraph_styles() {
  paragraph_styles_.Clear();
}
void CommandDeleteReferenceLineArchive::clear_style_swap_command() {
  if (style_swap_command_ != nullptr) style_swap_command_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CommandDeleteReferenceLineArchive::CommandDeleteReferenceLineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paragraph_styles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandDeleteReferenceLineArchive)
}
CommandDeleteReferenceLineArchive::CommandDeleteReferenceLineArchive(const CommandDeleteReferenceLineArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      paragraph_styles_(from.paragraph_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_axis_id()) {
    axis_id_ = new ::TSCH::ChartAxisIDArchive(*from.axis_id_);
  } else {
    axis_id_ = nullptr;
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::UUID(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_non_style()) {
    non_style_ = new ::TSP::Reference(*from.non_style_);
  } else {
    non_style_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  if (from._internal_has_style_swap_command()) {
    style_swap_command_ = new ::TSP::Reference(*from.style_swap_command_);
  } else {
    style_swap_command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandDeleteReferenceLineArchive)
}

void CommandDeleteReferenceLineArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_swap_command_) -
    reinterpret_cast<char*>(&super_)) + sizeof(style_swap_command_));
}

CommandDeleteReferenceLineArchive::~CommandDeleteReferenceLineArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandDeleteReferenceLineArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandDeleteReferenceLineArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete axis_id_;
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete non_style_;
  if (this != internal_default_instance()) delete style_;
  if (this != internal_default_instance()) delete style_swap_command_;
}

void CommandDeleteReferenceLineArchive::ArenaDtor(void* object) {
  CommandDeleteReferenceLineArchive* _this = reinterpret_cast< CommandDeleteReferenceLineArchive* >(object);
  (void)_this;
}
void CommandDeleteReferenceLineArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDeleteReferenceLineArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandDeleteReferenceLineArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandDeleteReferenceLineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paragraph_styles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(axis_id_ != nullptr);
      axis_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(non_style_ != nullptr);
      non_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(style_swap_command_ != nullptr);
      style_swap_command_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteReferenceLineArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.ChartAxisIDArchive axis_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference non_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style_swap_command = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_swap_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDeleteReferenceLineArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandDeleteReferenceLineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCH.ChartAxisIDArchive axis_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::axis_id(this), target, stream);
  }

  // required .TSP.UUID uuid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::uuid(this), target, stream);
  }

  // optional .TSP.Reference non_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::non_style(this), target, stream);
  }

  // optional .TSP.Reference style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::style(this), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paragraph_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_paragraph_styles(i), target, stream);
  }

  // optional .TSP.Reference style_swap_command = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::style_swap_command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandDeleteReferenceLineArchive)
  return target;
}

size_t CommandDeleteReferenceLineArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandDeleteReferenceLineArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_axis_id()) {
    // required .TSCH.ChartAxisIDArchive axis_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *axis_id_);
  }

  if (_internal_has_uuid()) {
    // required .TSP.UUID uuid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  return total_size;
}
size_t CommandDeleteReferenceLineArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandDeleteReferenceLineArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCH.ChartAxisIDArchive axis_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *axis_id_);

    // required .TSP.UUID uuid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference paragraph_styles = 6;
  total_size += 1UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional .TSP.Reference non_style = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *non_style_);
    }

    // optional .TSP.Reference style = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_);
    }

    // optional .TSP.Reference style_swap_command = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_swap_command_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandDeleteReferenceLineArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandDeleteReferenceLineArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandDeleteReferenceLineArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandDeleteReferenceLineArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandDeleteReferenceLineArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandDeleteReferenceLineArchive)
    MergeFrom(*source);
  }
}

void CommandDeleteReferenceLineArchive::MergeFrom(const CommandDeleteReferenceLineArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandDeleteReferenceLineArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paragraph_styles_.MergeFrom(from.paragraph_styles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(from._internal_axis_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_uuid()->::TSP::UUID::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_non_style()->::TSP::Reference::MergeFrom(from._internal_non_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_style_swap_command()->::TSP::Reference::MergeFrom(from._internal_style_swap_command());
    }
  }
}

void CommandDeleteReferenceLineArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandDeleteReferenceLineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteReferenceLineArchive::CopyFrom(const CommandDeleteReferenceLineArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandDeleteReferenceLineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteReferenceLineArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(paragraph_styles_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_non_style()) {
    if (!non_style_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  if (_internal_has_style_swap_command()) {
    if (!style_swap_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteReferenceLineArchive::InternalSwap(CommandDeleteReferenceLineArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paragraph_styles_.InternalSwap(&other->paragraph_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDeleteReferenceLineArchive, style_swap_command_)
      + sizeof(CommandDeleteReferenceLineArchive::style_swap_command_)
      - PROTOBUF_FIELD_OFFSET(CommandDeleteReferenceLineArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteReferenceLineArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[42]);
}

// ===================================================================

class CommandPasteStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPasteStyleArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandPasteStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& style_swap_command(const CommandPasteStyleArchive* msg);
  static void set_has_style_swap_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::PropertyValueStorageContainerArchive& inverse_chart_style_state(const CommandPasteStyleArchive* msg);
  static void set_has_inverse_chart_style_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::PropertyValueStorageContainerArchive& chart_style_state(const CommandPasteStyleArchive* msg);
  static void set_has_chart_style_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& shape_style(const CommandPasteStyleArchive* msg);
  static void set_has_shape_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandPasteStyleArchive::_Internal::super(const CommandPasteStyleArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandPasteStyleArchive::_Internal::style_swap_command(const CommandPasteStyleArchive* msg) {
  return *msg->style_swap_command_;
}
const ::TSCH::PropertyValueStorageContainerArchive&
CommandPasteStyleArchive::_Internal::inverse_chart_style_state(const CommandPasteStyleArchive* msg) {
  return *msg->inverse_chart_style_state_;
}
const ::TSCH::PropertyValueStorageContainerArchive&
CommandPasteStyleArchive::_Internal::chart_style_state(const CommandPasteStyleArchive* msg) {
  return *msg->chart_style_state_;
}
const ::TSP::Reference&
CommandPasteStyleArchive::_Internal::shape_style(const CommandPasteStyleArchive* msg) {
  return *msg->shape_style_;
}
void CommandPasteStyleArchive::clear_style_swap_command() {
  if (style_swap_command_ != nullptr) style_swap_command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandPasteStyleArchive::clear_inverse_chart_style_state() {
  if (inverse_chart_style_state_ != nullptr) inverse_chart_style_state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandPasteStyleArchive::clear_chart_style_state() {
  if (chart_style_state_ != nullptr) chart_style_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandPasteStyleArchive::clear_shape_style() {
  if (shape_style_ != nullptr) shape_style_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandPasteStyleArchive::clear_subselection() {
  subselection_.Clear();
}
CommandPasteStyleArchive::CommandPasteStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subselection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandPasteStyleArchive)
}
CommandPasteStyleArchive::CommandPasteStyleArchive(const CommandPasteStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      subselection_(from.subselection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_style_swap_command()) {
    style_swap_command_ = new ::TSP::Reference(*from.style_swap_command_);
  } else {
    style_swap_command_ = nullptr;
  }
  if (from._internal_has_inverse_chart_style_state()) {
    inverse_chart_style_state_ = new ::TSCH::PropertyValueStorageContainerArchive(*from.inverse_chart_style_state_);
  } else {
    inverse_chart_style_state_ = nullptr;
  }
  if (from._internal_has_chart_style_state()) {
    chart_style_state_ = new ::TSCH::PropertyValueStorageContainerArchive(*from.chart_style_state_);
  } else {
    chart_style_state_ = nullptr;
  }
  if (from._internal_has_shape_style()) {
    shape_style_ = new ::TSP::Reference(*from.shape_style_);
  } else {
    shape_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandPasteStyleArchive)
}

void CommandPasteStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shape_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(shape_style_));
}

CommandPasteStyleArchive::~CommandPasteStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandPasteStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandPasteStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete style_swap_command_;
  if (this != internal_default_instance()) delete inverse_chart_style_state_;
  if (this != internal_default_instance()) delete chart_style_state_;
  if (this != internal_default_instance()) delete shape_style_;
}

void CommandPasteStyleArchive::ArenaDtor(void* object) {
  CommandPasteStyleArchive* _this = reinterpret_cast< CommandPasteStyleArchive* >(object);
  (void)_this;
}
void CommandPasteStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandPasteStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandPasteStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandPasteStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subselection_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(style_swap_command_ != nullptr);
      style_swap_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inverse_chart_style_state_ != nullptr);
      inverse_chart_style_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(chart_style_state_ != nullptr);
      chart_style_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(shape_style_ != nullptr);
      shape_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPasteStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style_swap_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_swap_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_chart_style_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference shape_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartSelectionPathArchive subselection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subselection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandPasteStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandPasteStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference style_swap_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style_swap_command(this), target, stream);
  }

  // optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::inverse_chart_style_state(this), target, stream);
  }

  // optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::chart_style_state(this), target, stream);
  }

  // optional .TSP.Reference shape_style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::shape_style(this), target, stream);
  }

  // repeated .TSCH.ChartSelectionPathArchive subselection = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subselection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_subselection(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandPasteStyleArchive)
  return target;
}

size_t CommandPasteStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandPasteStyleArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartSelectionPathArchive subselection = 6;
  total_size += 1UL * this->_internal_subselection_size();
  for (const auto& msg : this->subselection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.Reference style_swap_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_swap_command_);
    }

    // optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inverse_chart_style_state_);
    }

    // optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_style_state_);
    }

    // optional .TSP.Reference shape_style = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandPasteStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandPasteStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandPasteStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandPasteStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandPasteStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandPasteStyleArchive)
    MergeFrom(*source);
  }
}

void CommandPasteStyleArchive::MergeFrom(const CommandPasteStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandPasteStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subselection_.MergeFrom(from.subselection_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_style_swap_command()->::TSP::Reference::MergeFrom(from._internal_style_swap_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inverse_chart_style_state()->::TSCH::PropertyValueStorageContainerArchive::MergeFrom(from._internal_inverse_chart_style_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_chart_style_state()->::TSCH::PropertyValueStorageContainerArchive::MergeFrom(from._internal_chart_style_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_shape_style()->::TSP::Reference::MergeFrom(from._internal_shape_style());
    }
  }
}

void CommandPasteStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandPasteStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPasteStyleArchive::CopyFrom(const CommandPasteStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandPasteStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPasteStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_style_swap_command()) {
    if (!style_swap_command_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_chart_style_state()) {
    if (!inverse_chart_style_state_->IsInitialized()) return false;
  }
  if (_internal_has_chart_style_state()) {
    if (!chart_style_state_->IsInitialized()) return false;
  }
  if (_internal_has_shape_style()) {
    if (!shape_style_->IsInitialized()) return false;
  }
  return true;
}

void CommandPasteStyleArchive::InternalSwap(CommandPasteStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subselection_.InternalSwap(&other->subselection_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPasteStyleArchive, shape_style_)
      + sizeof(CommandPasteStyleArchive::shape_style_)
      - PROTOBUF_FIELD_OFFSET(CommandPasteStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPasteStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[43]);
}

// ===================================================================

class CommandReplaceImageDataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceImageDataArchive>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandReplaceImageDataArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& style_swap_command(const CommandReplaceImageDataArchive* msg);
  static void set_has_style_swap_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::PropertyValueStorageContainerArchive& inverse_chart_style_state(const CommandReplaceImageDataArchive* msg);
  static void set_has_inverse_chart_style_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::PropertyValueStorageContainerArchive& chart_style_state(const CommandReplaceImageDataArchive* msg);
  static void set_has_chart_style_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandReplaceImageDataArchive::_Internal::super(const CommandReplaceImageDataArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandReplaceImageDataArchive::_Internal::style_swap_command(const CommandReplaceImageDataArchive* msg) {
  return *msg->style_swap_command_;
}
const ::TSCH::PropertyValueStorageContainerArchive&
CommandReplaceImageDataArchive::_Internal::inverse_chart_style_state(const CommandReplaceImageDataArchive* msg) {
  return *msg->inverse_chart_style_state_;
}
const ::TSCH::PropertyValueStorageContainerArchive&
CommandReplaceImageDataArchive::_Internal::chart_style_state(const CommandReplaceImageDataArchive* msg) {
  return *msg->chart_style_state_;
}
void CommandReplaceImageDataArchive::clear_style_swap_command() {
  if (style_swap_command_ != nullptr) style_swap_command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandReplaceImageDataArchive::clear_inverse_chart_style_state() {
  if (inverse_chart_style_state_ != nullptr) inverse_chart_style_state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandReplaceImageDataArchive::clear_chart_style_state() {
  if (chart_style_state_ != nullptr) chart_style_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandReplaceImageDataArchive::CommandReplaceImageDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceImageDataArchive)
}
CommandReplaceImageDataArchive::CommandReplaceImageDataArchive(const CommandReplaceImageDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_style_swap_command()) {
    style_swap_command_ = new ::TSP::Reference(*from.style_swap_command_);
  } else {
    style_swap_command_ = nullptr;
  }
  if (from._internal_has_inverse_chart_style_state()) {
    inverse_chart_style_state_ = new ::TSCH::PropertyValueStorageContainerArchive(*from.inverse_chart_style_state_);
  } else {
    inverse_chart_style_state_ = nullptr;
  }
  if (from._internal_has_chart_style_state()) {
    chart_style_state_ = new ::TSCH::PropertyValueStorageContainerArchive(*from.chart_style_state_);
  } else {
    chart_style_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceImageDataArchive)
}

void CommandReplaceImageDataArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chart_style_state_) -
    reinterpret_cast<char*>(&super_)) + sizeof(chart_style_state_));
}

CommandReplaceImageDataArchive::~CommandReplaceImageDataArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceImageDataArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReplaceImageDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete style_swap_command_;
  if (this != internal_default_instance()) delete inverse_chart_style_state_;
  if (this != internal_default_instance()) delete chart_style_state_;
}

void CommandReplaceImageDataArchive::ArenaDtor(void* object) {
  CommandReplaceImageDataArchive* _this = reinterpret_cast< CommandReplaceImageDataArchive* >(object);
  (void)_this;
}
void CommandReplaceImageDataArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReplaceImageDataArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandReplaceImageDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceImageDataArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(style_swap_command_ != nullptr);
      style_swap_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inverse_chart_style_state_ != nullptr);
      inverse_chart_style_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(chart_style_state_ != nullptr);
      chart_style_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceImageDataArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style_swap_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_swap_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_chart_style_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReplaceImageDataArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceImageDataArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference style_swap_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style_swap_command(this), target, stream);
  }

  // optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::inverse_chart_style_state(this), target, stream);
  }

  // optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::chart_style_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceImageDataArchive)
  return target;
}

size_t CommandReplaceImageDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceImageDataArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference style_swap_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_swap_command_);
    }

    // optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inverse_chart_style_state_);
    }

    // optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_style_state_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReplaceImageDataArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandReplaceImageDataArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReplaceImageDataArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReplaceImageDataArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandReplaceImageDataArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandReplaceImageDataArchive)
    MergeFrom(*source);
  }
}

void CommandReplaceImageDataArchive::MergeFrom(const CommandReplaceImageDataArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceImageDataArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_style_swap_command()->::TSP::Reference::MergeFrom(from._internal_style_swap_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inverse_chart_style_state()->::TSCH::PropertyValueStorageContainerArchive::MergeFrom(from._internal_inverse_chart_style_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_chart_style_state()->::TSCH::PropertyValueStorageContainerArchive::MergeFrom(from._internal_chart_style_state());
    }
  }
}

void CommandReplaceImageDataArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandReplaceImageDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceImageDataArchive::CopyFrom(const CommandReplaceImageDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceImageDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceImageDataArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_style_swap_command()) {
    if (!style_swap_command_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_chart_style_state()) {
    if (!inverse_chart_style_state_->IsInitialized()) return false;
  }
  if (_internal_has_chart_style_state()) {
    if (!chart_style_state_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceImageDataArchive::InternalSwap(CommandReplaceImageDataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceImageDataArchive, chart_style_state_)
      + sizeof(CommandReplaceImageDataArchive::chart_style_state_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceImageDataArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceImageDataArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[44]);
}

// ===================================================================

class CommandInducedReplaceChartGrid::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInducedReplaceChartGrid>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandInducedReplaceChartGrid* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandInducedReplaceChartGrid::_Internal::super(const CommandInducedReplaceChartGrid* msg) {
  return *msg->super_;
}
void CommandInducedReplaceChartGrid::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandInducedReplaceChartGrid::CommandInducedReplaceChartGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandInducedReplaceChartGrid)
}
CommandInducedReplaceChartGrid::CommandInducedReplaceChartGrid(const CommandInducedReplaceChartGrid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandInducedReplaceChartGrid)
}

void CommandInducedReplaceChartGrid::SharedCtor() {
super_ = nullptr;
}

CommandInducedReplaceChartGrid::~CommandInducedReplaceChartGrid() {
  // @@protoc_insertion_point(destructor:TSCH.CommandInducedReplaceChartGrid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandInducedReplaceChartGrid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandInducedReplaceChartGrid::ArenaDtor(void* object) {
  CommandInducedReplaceChartGrid* _this = reinterpret_cast< CommandInducedReplaceChartGrid* >(object);
  (void)_this;
}
void CommandInducedReplaceChartGrid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandInducedReplaceChartGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandInducedReplaceChartGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandInducedReplaceChartGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInducedReplaceChartGrid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandInducedReplaceChartGrid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandInducedReplaceChartGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandInducedReplaceChartGrid)
  return target;
}

size_t CommandInducedReplaceChartGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandInducedReplaceChartGrid)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandInducedReplaceChartGrid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandInducedReplaceChartGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandInducedReplaceChartGrid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandInducedReplaceChartGrid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandInducedReplaceChartGrid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandInducedReplaceChartGrid)
    MergeFrom(*source);
  }
}

void CommandInducedReplaceChartGrid::MergeFrom(const CommandInducedReplaceChartGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandInducedReplaceChartGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
}

void CommandInducedReplaceChartGrid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandInducedReplaceChartGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInducedReplaceChartGrid::CopyFrom(const CommandInducedReplaceChartGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandInducedReplaceChartGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInducedReplaceChartGrid::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandInducedReplaceChartGrid::InternalSwap(CommandInducedReplaceChartGrid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInducedReplaceChartGrid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[45]);
}

// ===================================================================

class CommandInduced3DChartGeometry::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInduced3DChartGeometry>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandInduced3DChartGeometry* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandInduced3DChartGeometry::_Internal::super(const CommandInduced3DChartGeometry* msg) {
  return *msg->super_;
}
void CommandInduced3DChartGeometry::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandInduced3DChartGeometry::CommandInduced3DChartGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandInduced3DChartGeometry)
}
CommandInduced3DChartGeometry::CommandInduced3DChartGeometry(const CommandInduced3DChartGeometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandInduced3DChartGeometry)
}

void CommandInduced3DChartGeometry::SharedCtor() {
super_ = nullptr;
}

CommandInduced3DChartGeometry::~CommandInduced3DChartGeometry() {
  // @@protoc_insertion_point(destructor:TSCH.CommandInduced3DChartGeometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandInduced3DChartGeometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandInduced3DChartGeometry::ArenaDtor(void* object) {
  CommandInduced3DChartGeometry* _this = reinterpret_cast< CommandInduced3DChartGeometry* >(object);
  (void)_this;
}
void CommandInduced3DChartGeometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandInduced3DChartGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandInduced3DChartGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandInduced3DChartGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInduced3DChartGeometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandInduced3DChartGeometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandInduced3DChartGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandInduced3DChartGeometry)
  return target;
}

size_t CommandInduced3DChartGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandInduced3DChartGeometry)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandInduced3DChartGeometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CommandInduced3DChartGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandInduced3DChartGeometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandInduced3DChartGeometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CommandInduced3DChartGeometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CommandInduced3DChartGeometry)
    MergeFrom(*source);
  }
}

void CommandInduced3DChartGeometry::MergeFrom(const CommandInduced3DChartGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandInduced3DChartGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
}

void CommandInduced3DChartGeometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CommandInduced3DChartGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInduced3DChartGeometry::CopyFrom(const CommandInduced3DChartGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandInduced3DChartGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInduced3DChartGeometry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandInduced3DChartGeometry::InternalSwap(CommandInduced3DChartGeometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInduced3DChartGeometry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[46]);
}

// ===================================================================

class ChartTextSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartTextSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& selection(const ChartTextSelectionTransformerArchive* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartTextSelectionTransformerArchive::_Internal::selection(const ChartTextSelectionTransformerArchive* msg) {
  return *msg->selection_;
}
void ChartTextSelectionTransformerArchive::clear_selection() {
  if (selection_ != nullptr) selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChartTextSelectionTransformerArchive::ChartTextSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartTextSelectionTransformerArchive)
}
ChartTextSelectionTransformerArchive::ChartTextSelectionTransformerArchive(const ChartTextSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selection()) {
    selection_ = new ::TSP::Reference(*from.selection_);
  } else {
    selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartTextSelectionTransformerArchive)
}

void ChartTextSelectionTransformerArchive::SharedCtor() {
selection_ = nullptr;
}

ChartTextSelectionTransformerArchive::~ChartTextSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartTextSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartTextSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selection_;
}

void ChartTextSelectionTransformerArchive::ArenaDtor(void* object) {
  ChartTextSelectionTransformerArchive* _this = reinterpret_cast< ChartTextSelectionTransformerArchive* >(object);
  (void)_this;
}
void ChartTextSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartTextSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartTextSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartTextSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(selection_ != nullptr);
    selection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartTextSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartTextSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartTextSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartTextSelectionTransformerArchive)
  return target;
}

size_t ChartTextSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartTextSelectionTransformerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference selection = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selection_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartTextSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartTextSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartTextSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartTextSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartTextSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartTextSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void ChartTextSelectionTransformerArchive::MergeFrom(const ChartTextSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartTextSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selection()) {
    _internal_mutable_selection()->::TSP::Reference::MergeFrom(from._internal_selection());
  }
}

void ChartTextSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartTextSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartTextSelectionTransformerArchive::CopyFrom(const ChartTextSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartTextSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartTextSelectionTransformerArchive::IsInitialized() const {
  if (_internal_has_selection()) {
    if (!selection_->IsInitialized()) return false;
  }
  return true;
}

void ChartTextSelectionTransformerArchive::InternalSwap(ChartTextSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(selection_, other->selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartTextSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[47]);
}

// ===================================================================

class ChartDrawableSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartDrawableSelectionTransformerArchive>()._has_bits_);
  static const ::TSD::DrawableSelectionTransformerArchive& super(const ChartDrawableSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableSelectionTransformerArchive&
ChartDrawableSelectionTransformerArchive::_Internal::super(const ChartDrawableSelectionTransformerArchive* msg) {
  return *msg->super_;
}
void ChartDrawableSelectionTransformerArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChartDrawableSelectionTransformerArchive::ChartDrawableSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartDrawableSelectionTransformerArchive)
}
ChartDrawableSelectionTransformerArchive::ChartDrawableSelectionTransformerArchive(const ChartDrawableSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableSelectionTransformerArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartDrawableSelectionTransformerArchive)
}

void ChartDrawableSelectionTransformerArchive::SharedCtor() {
super_ = nullptr;
}

ChartDrawableSelectionTransformerArchive::~ChartDrawableSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartDrawableSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartDrawableSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ChartDrawableSelectionTransformerArchive::ArenaDtor(void* object) {
  ChartDrawableSelectionTransformerArchive* _this = reinterpret_cast< ChartDrawableSelectionTransformerArchive* >(object);
  (void)_this;
}
void ChartDrawableSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartDrawableSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartDrawableSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartDrawableSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartDrawableSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableSelectionTransformerArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartDrawableSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartDrawableSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartDrawableSelectionTransformerArchive)
  return target;
}

size_t ChartDrawableSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartDrawableSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartDrawableSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartDrawableSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartDrawableSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartDrawableSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartDrawableSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartDrawableSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void ChartDrawableSelectionTransformerArchive::MergeFrom(const ChartDrawableSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartDrawableSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::DrawableSelectionTransformerArchive::MergeFrom(from._internal_super());
  }
}

void ChartDrawableSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartDrawableSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartDrawableSelectionTransformerArchive::CopyFrom(const ChartDrawableSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartDrawableSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartDrawableSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChartDrawableSelectionTransformerArchive::InternalSwap(ChartDrawableSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartDrawableSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[48]);
}

// ===================================================================

class ChartSubselectionTransformerHelperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSubselectionTransformerHelperArchive>()._has_bits_);
  static const ::TSP::Reference& selection(const ChartSubselectionTransformerHelperArchive* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartSubselectionTransformerHelperArchive::_Internal::selection(const ChartSubselectionTransformerHelperArchive* msg) {
  return *msg->selection_;
}
void ChartSubselectionTransformerHelperArchive::clear_selection() {
  if (selection_ != nullptr) selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChartSubselectionTransformerHelperArchive::ChartSubselectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSubselectionTransformerHelperArchive)
}
ChartSubselectionTransformerHelperArchive::ChartSubselectionTransformerHelperArchive(const ChartSubselectionTransformerHelperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selection()) {
    selection_ = new ::TSP::Reference(*from.selection_);
  } else {
    selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSubselectionTransformerHelperArchive)
}

void ChartSubselectionTransformerHelperArchive::SharedCtor() {
selection_ = nullptr;
}

ChartSubselectionTransformerHelperArchive::~ChartSubselectionTransformerHelperArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSubselectionTransformerHelperArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSubselectionTransformerHelperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selection_;
}

void ChartSubselectionTransformerHelperArchive::ArenaDtor(void* object) {
  ChartSubselectionTransformerHelperArchive* _this = reinterpret_cast< ChartSubselectionTransformerHelperArchive* >(object);
  (void)_this;
}
void ChartSubselectionTransformerHelperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSubselectionTransformerHelperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSubselectionTransformerHelperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSubselectionTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(selection_ != nullptr);
    selection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSubselectionTransformerHelperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSubselectionTransformerHelperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSubselectionTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSubselectionTransformerHelperArchive)
  return target;
}

size_t ChartSubselectionTransformerHelperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSubselectionTransformerHelperArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference selection = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selection_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSubselectionTransformerHelperArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSubselectionTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSubselectionTransformerHelperArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSubselectionTransformerHelperArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSubselectionTransformerHelperArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSubselectionTransformerHelperArchive)
    MergeFrom(*source);
  }
}

void ChartSubselectionTransformerHelperArchive::MergeFrom(const ChartSubselectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSubselectionTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selection()) {
    _internal_mutable_selection()->::TSP::Reference::MergeFrom(from._internal_selection());
  }
}

void ChartSubselectionTransformerHelperArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSubselectionTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSubselectionTransformerHelperArchive::CopyFrom(const ChartSubselectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSubselectionTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSubselectionTransformerHelperArchive::IsInitialized() const {
  if (_internal_has_selection()) {
    if (!selection_->IsInitialized()) return false;
  }
  return true;
}

void ChartSubselectionTransformerHelperArchive::InternalSwap(ChartSubselectionTransformerHelperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(selection_, other->selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSubselectionTransformerHelperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[49]);
}

// ===================================================================

class ChartRefLineSubselectionTransformerHelperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartRefLineSubselectionTransformerHelperArchive>()._has_bits_);
  static const ::TSCH::ChartSubselectionTransformerHelperArchive& super(const ChartRefLineSubselectionTransformerHelperArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartSubselectionTransformerHelperArchive&
ChartRefLineSubselectionTransformerHelperArchive::_Internal::super(const ChartRefLineSubselectionTransformerHelperArchive* msg) {
  return *msg->super_;
}
void ChartRefLineSubselectionTransformerHelperArchive::clear_selected_reference_line_uuids() {
  selected_reference_line_uuids_.Clear();
}
ChartRefLineSubselectionTransformerHelperArchive::ChartRefLineSubselectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  selected_reference_line_uuids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
}
ChartRefLineSubselectionTransformerHelperArchive::ChartRefLineSubselectionTransformerHelperArchive(const ChartRefLineSubselectionTransformerHelperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      selected_reference_line_uuids_(from.selected_reference_line_uuids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartSubselectionTransformerHelperArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
}

void ChartRefLineSubselectionTransformerHelperArchive::SharedCtor() {
super_ = nullptr;
}

ChartRefLineSubselectionTransformerHelperArchive::~ChartRefLineSubselectionTransformerHelperArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartRefLineSubselectionTransformerHelperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ChartRefLineSubselectionTransformerHelperArchive::ArenaDtor(void* object) {
  ChartRefLineSubselectionTransformerHelperArchive* _this = reinterpret_cast< ChartRefLineSubselectionTransformerHelperArchive* >(object);
  (void)_this;
}
void ChartRefLineSubselectionTransformerHelperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartRefLineSubselectionTransformerHelperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartRefLineSubselectionTransformerHelperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_reference_line_uuids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartRefLineSubselectionTransformerHelperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID selected_reference_line_uuids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selected_reference_line_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartRefLineSubselectionTransformerHelperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.UUID selected_reference_line_uuids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selected_reference_line_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_selected_reference_line_uuids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
  return target;
}

size_t ChartRefLineSubselectionTransformerHelperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
  size_t total_size = 0;

  // required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID selected_reference_line_uuids = 2;
  total_size += 1UL * this->_internal_selected_reference_line_uuids_size();
  for (const auto& msg : this->selected_reference_line_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartRefLineSubselectionTransformerHelperArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartRefLineSubselectionTransformerHelperArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartRefLineSubselectionTransformerHelperArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
    MergeFrom(*source);
  }
}

void ChartRefLineSubselectionTransformerHelperArchive::MergeFrom(const ChartRefLineSubselectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_reference_line_uuids_.MergeFrom(from.selected_reference_line_uuids_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSCH::ChartSubselectionTransformerHelperArchive::MergeFrom(from._internal_super());
  }
}

void ChartRefLineSubselectionTransformerHelperArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartRefLineSubselectionTransformerHelperArchive::CopyFrom(const ChartRefLineSubselectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartRefLineSubselectionTransformerHelperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(selected_reference_line_uuids_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChartRefLineSubselectionTransformerHelperArchive::InternalSwap(ChartRefLineSubselectionTransformerHelperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  selected_reference_line_uuids_.InternalSwap(&other->selected_reference_line_uuids_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartRefLineSubselectionTransformerHelperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[50]);
}

// ===================================================================

class ChartSubselectionIdentityTransformerHelperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSubselectionIdentityTransformerHelperArchive>()._has_bits_);
  static const ::TSCH::ChartSubselectionTransformerHelperArchive& super(const ChartSubselectionIdentityTransformerHelperArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartSubselectionTransformerHelperArchive&
ChartSubselectionIdentityTransformerHelperArchive::_Internal::super(const ChartSubselectionIdentityTransformerHelperArchive* msg) {
  return *msg->super_;
}
ChartSubselectionIdentityTransformerHelperArchive::ChartSubselectionIdentityTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
}
ChartSubselectionIdentityTransformerHelperArchive::ChartSubselectionIdentityTransformerHelperArchive(const ChartSubselectionIdentityTransformerHelperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartSubselectionTransformerHelperArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
}

void ChartSubselectionIdentityTransformerHelperArchive::SharedCtor() {
super_ = nullptr;
}

ChartSubselectionIdentityTransformerHelperArchive::~ChartSubselectionIdentityTransformerHelperArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSubselectionIdentityTransformerHelperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ChartSubselectionIdentityTransformerHelperArchive::ArenaDtor(void* object) {
  ChartSubselectionIdentityTransformerHelperArchive* _this = reinterpret_cast< ChartSubselectionIdentityTransformerHelperArchive* >(object);
  (void)_this;
}
void ChartSubselectionIdentityTransformerHelperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSubselectionIdentityTransformerHelperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSubselectionIdentityTransformerHelperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSubselectionIdentityTransformerHelperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSubselectionIdentityTransformerHelperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
  return target;
}

size_t ChartSubselectionIdentityTransformerHelperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
  size_t total_size = 0;

  // required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSubselectionIdentityTransformerHelperArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSubselectionIdentityTransformerHelperArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSubselectionIdentityTransformerHelperArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
    MergeFrom(*source);
  }
}

void ChartSubselectionIdentityTransformerHelperArchive::MergeFrom(const ChartSubselectionIdentityTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSCH::ChartSubselectionTransformerHelperArchive::MergeFrom(from._internal_super());
  }
}

void ChartSubselectionIdentityTransformerHelperArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSubselectionIdentityTransformerHelperArchive::CopyFrom(const ChartSubselectionIdentityTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSubselectionIdentityTransformerHelperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChartSubselectionIdentityTransformerHelperArchive::InternalSwap(ChartSubselectionIdentityTransformerHelperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSubselectionIdentityTransformerHelperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[51]);
}

// ===================================================================

class ChartSubselectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSubselectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& selection(const ChartSubselectionTransformerArchive* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& helper(const ChartSubselectionTransformerArchive* msg);
  static void set_has_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
ChartSubselectionTransformerArchive::_Internal::selection(const ChartSubselectionTransformerArchive* msg) {
  return *msg->selection_;
}
const ::TSP::Reference&
ChartSubselectionTransformerArchive::_Internal::helper(const ChartSubselectionTransformerArchive* msg) {
  return *msg->helper_;
}
void ChartSubselectionTransformerArchive::clear_selection() {
  if (selection_ != nullptr) selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartSubselectionTransformerArchive::clear_helper() {
  if (helper_ != nullptr) helper_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ChartSubselectionTransformerArchive::ChartSubselectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSubselectionTransformerArchive)
}
ChartSubselectionTransformerArchive::ChartSubselectionTransformerArchive(const ChartSubselectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selection()) {
    selection_ = new ::TSP::Reference(*from.selection_);
  } else {
    selection_ = nullptr;
  }
  if (from._internal_has_helper()) {
    helper_ = new ::TSP::Reference(*from.helper_);
  } else {
    helper_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSubselectionTransformerArchive)
}

void ChartSubselectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&selection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&helper_) -
    reinterpret_cast<char*>(&selection_)) + sizeof(helper_));
}

ChartSubselectionTransformerArchive::~ChartSubselectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSubselectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSubselectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selection_;
  if (this != internal_default_instance()) delete helper_;
}

void ChartSubselectionTransformerArchive::ArenaDtor(void* object) {
  ChartSubselectionTransformerArchive* _this = reinterpret_cast< ChartSubselectionTransformerArchive* >(object);
  (void)_this;
}
void ChartSubselectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSubselectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSubselectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSubselectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(selection_ != nullptr);
      selection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(helper_ != nullptr);
      helper_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSubselectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference helper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSubselectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSubselectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::selection(this), target, stream);
  }

  // optional .TSP.Reference helper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::helper(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSubselectionTransformerArchive)
  return target;
}

size_t ChartSubselectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSubselectionTransformerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference selection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_);
    }

    // optional .TSP.Reference helper = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *helper_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSubselectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSubselectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSubselectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSubselectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSubselectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSubselectionTransformerArchive)
    MergeFrom(*source);
  }
}

void ChartSubselectionTransformerArchive::MergeFrom(const ChartSubselectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSubselectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_selection()->::TSP::Reference::MergeFrom(from._internal_selection());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_helper()->::TSP::Reference::MergeFrom(from._internal_helper());
    }
  }
}

void ChartSubselectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSubselectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSubselectionTransformerArchive::CopyFrom(const ChartSubselectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSubselectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSubselectionTransformerArchive::IsInitialized() const {
  if (_internal_has_selection()) {
    if (!selection_->IsInitialized()) return false;
  }
  if (_internal_has_helper()) {
    if (!helper_->IsInitialized()) return false;
  }
  return true;
}

void ChartSubselectionTransformerArchive::InternalSwap(ChartSubselectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSubselectionTransformerArchive, helper_)
      + sizeof(ChartSubselectionTransformerArchive::helper_)
      - PROTOBUF_FIELD_OFFSET(ChartSubselectionTransformerArchive, selection_)>(
          reinterpret_cast<char*>(&selection_),
          reinterpret_cast<char*>(&other->selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSubselectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[52]);
}

// ===================================================================

class CDESelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CDESelectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& cde_selection(const CDESelectionTransformerArchive* msg);
  static void set_has_cde_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
CDESelectionTransformerArchive::_Internal::cde_selection(const CDESelectionTransformerArchive* msg) {
  return *msg->cde_selection_;
}
void CDESelectionTransformerArchive::clear_cde_selection() {
  if (cde_selection_ != nullptr) cde_selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDESelectionTransformerArchive::CDESelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.CDESelectionTransformerArchive)
}
CDESelectionTransformerArchive::CDESelectionTransformerArchive(const CDESelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cde_selection()) {
    cde_selection_ = new ::TSP::Reference(*from.cde_selection_);
  } else {
    cde_selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CDESelectionTransformerArchive)
}

void CDESelectionTransformerArchive::SharedCtor() {
cde_selection_ = nullptr;
}

CDESelectionTransformerArchive::~CDESelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CDESelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDESelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cde_selection_;
}

void CDESelectionTransformerArchive::ArenaDtor(void* object) {
  CDESelectionTransformerArchive* _this = reinterpret_cast< CDESelectionTransformerArchive* >(object);
  (void)_this;
}
void CDESelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDESelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDESelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CDESelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cde_selection_ != nullptr);
    cde_selection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDESelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference cde_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cde_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDESelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CDESelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference cde_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cde_selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CDESelectionTransformerArchive)
  return target;
}

size_t CDESelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CDESelectionTransformerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference cde_selection = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cde_selection_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDESelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.CDESelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CDESelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDESelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.CDESelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.CDESelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void CDESelectionTransformerArchive::MergeFrom(const CDESelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CDESelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cde_selection()) {
    _internal_mutable_cde_selection()->::TSP::Reference::MergeFrom(from._internal_cde_selection());
  }
}

void CDESelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.CDESelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDESelectionTransformerArchive::CopyFrom(const CDESelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CDESelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDESelectionTransformerArchive::IsInitialized() const {
  if (_internal_has_cde_selection()) {
    if (!cde_selection_->IsInitialized()) return false;
  }
  return true;
}

void CDESelectionTransformerArchive::InternalSwap(CDESelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cde_selection_, other->cde_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDESelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[53]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::StyleOwnerPath* Arena::CreateMaybeMessage< ::TSCH::StyleOwnerPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::StyleOwnerPath >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetChartTypeArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetChartTypeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetChartTypeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::StyleSwapUndoTupleArchive* Arena::CreateMaybeMessage< ::TSCH::StyleSwapUndoTupleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::StyleSwapUndoTupleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::StyleSwapUndoTuplesArchive* Arena::CreateMaybeMessage< ::TSCH::StyleSwapUndoTuplesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::StyleSwapUndoTuplesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandStyleSwapArchive* Arena::CreateMaybeMessage< ::TSCH::CommandStyleSwapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandStyleSwapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* Arena::CreateMaybeMessage< ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap* Arena::CreateMaybeMessage< ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* Arena::CreateMaybeMessage< ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* Arena::CreateMaybeMessage< ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandMutatePropertiesArchive* Arena::CreateMaybeMessage< ::TSCH::CommandMutatePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandMutatePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandScaleAllTextArchive* Arena::CreateMaybeMessage< ::TSCH::CommandScaleAllTextArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandScaleAllTextArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* Arena::CreateMaybeMessage< ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* Arena::CreateMaybeMessage< ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetFontFamilyArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetFontFamilyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetFontFamilyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandApplyFillSetArchive* Arena::CreateMaybeMessage< ::TSCH::CommandApplyFillSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandApplyFillSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetSeriesNameArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetSeriesNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetSeriesNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetCategoryNameArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetCategoryNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetCategoryNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandAddGridRowsArchive* Arena::CreateMaybeMessage< ::TSCH::CommandAddGridRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandAddGridRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandAddGridColumnsArchive* Arena::CreateMaybeMessage< ::TSCH::CommandAddGridColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandAddGridColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandMoveGridRowsArchive* Arena::CreateMaybeMessage< ::TSCH::CommandMoveGridRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandMoveGridRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandMoveGridColumnsArchive* Arena::CreateMaybeMessage< ::TSCH::CommandMoveGridColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandMoveGridColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandDeleteGridRowsArchive* Arena::CreateMaybeMessage< ::TSCH::CommandDeleteGridRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandDeleteGridRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandDeleteGridColumnsArchive* Arena::CreateMaybeMessage< ::TSCH::CommandDeleteGridColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandDeleteGridColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetGridValueArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetGridValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetGridValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetGridDirectionArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetGridDirectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetGridDirectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetSeriesTypeArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetSeriesTypeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetSeriesTypeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetScatterFormatArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetScatterFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetScatterFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetMultiDataSetIndexArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetMultiDataSetIndexArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetMultiDataSetIndexArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetLegendFrameArchive* Arena::CreateMaybeMessage< ::TSCH::CommandSetLegendFrameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetLegendFrameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetPieWedgeExplosion* Arena::CreateMaybeMessage< ::TSCH::CommandSetPieWedgeExplosion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetPieWedgeExplosion >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandChartApplyTheme* Arena::CreateMaybeMessage< ::TSCH::CommandChartApplyTheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandChartApplyTheme >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandChartApplyPreset* Arena::CreateMaybeMessage< ::TSCH::CommandChartApplyPreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandChartApplyPreset >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandCleanupGeometryArchive* Arena::CreateMaybeMessage< ::TSCH::CommandCleanupGeometryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandCleanupGeometryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartCommandArchive* Arena::CreateMaybeMessage< ::TSCH::ChartCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceGridValuesArchive* Arena::CreateMaybeMessage< ::TSCH::CommandReplaceGridValuesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceGridValuesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* Arena::CreateMaybeMessage< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceThemePresetArchive* Arena::CreateMaybeMessage< ::TSCH::CommandReplaceThemePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceThemePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandInvalidateWPCaches* Arena::CreateMaybeMessage< ::TSCH::CommandInvalidateWPCaches >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandInvalidateWPCaches >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* Arena::CreateMaybeMessage< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceCustomFormatArchive* Arena::CreateMaybeMessage< ::TSCH::CommandReplaceCustomFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceCustomFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandAddReferenceLineArchive* Arena::CreateMaybeMessage< ::TSCH::CommandAddReferenceLineArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandAddReferenceLineArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandDeleteReferenceLineArchive* Arena::CreateMaybeMessage< ::TSCH::CommandDeleteReferenceLineArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandDeleteReferenceLineArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandPasteStyleArchive* Arena::CreateMaybeMessage< ::TSCH::CommandPasteStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandPasteStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceImageDataArchive* Arena::CreateMaybeMessage< ::TSCH::CommandReplaceImageDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceImageDataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandInducedReplaceChartGrid* Arena::CreateMaybeMessage< ::TSCH::CommandInducedReplaceChartGrid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandInducedReplaceChartGrid >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandInduced3DChartGeometry* Arena::CreateMaybeMessage< ::TSCH::CommandInduced3DChartGeometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandInduced3DChartGeometry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartTextSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSCH::ChartTextSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartTextSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartDrawableSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSCH::ChartDrawableSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartDrawableSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSubselectionTransformerHelperArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSubselectionTransformerHelperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSubselectionTransformerHelperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartRefLineSubselectionTransformerHelperArchive* Arena::CreateMaybeMessage< ::TSCH::ChartRefLineSubselectionTransformerHelperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartRefLineSubselectionTransformerHelperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSubselectionIdentityTransformerHelperArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSubselectionIdentityTransformerHelperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSubselectionIdentityTransformerHelperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSubselectionTransformerArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSubselectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSubselectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CDESelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSCH::CDESelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CDESelectionTransformerArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
