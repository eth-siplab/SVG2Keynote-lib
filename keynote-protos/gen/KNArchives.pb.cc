// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNArchives.proto

#include "KNArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KN {
constexpr AnimationAttributesArchive::AnimationAttributesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : animation_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , effect_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_effect_timing_curve_theme_name_1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_effect_timing_curve_theme_name_2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_effect_timing_curve_theme_name_3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(nullptr)
  , custom_effect_timing_curve_1_(nullptr)
  , custom_effect_timing_curve_2_(nullptr)
  , custom_effect_timing_curve_3_(nullptr)
  , duration_(0)
  , delay_(0)
  , direction_(0u)
  , random_number_seed_(0u)
  , custom_detail_(0)
  , is_automatic_(false)
  , writing_direction_is_rtl_(false){}
struct AnimationAttributesArchiveDefaultTypeInternal {
  constexpr AnimationAttributesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnimationAttributesArchiveDefaultTypeInternal() {}
  union {
    AnimationAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnimationAttributesArchiveDefaultTypeInternal _AnimationAttributesArchive_default_instance_;
constexpr TransitionAttributesArchive::TransitionAttributesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : database_animation_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , database_effect_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , database_color_(nullptr)
  , animationattributes_(nullptr)
  , database_duration_(0)
  , database_direction_(0u)
  , database_delay_(0)
  , custom_twist_(0)
  , custom_mosaic_size_(0u)
  , custom_mosaic_type_(0u)
  , custom_bounce_(false)
  , custom_magic_move_fade_unmatched_objects_(false)
  , custom_motion_blur_(false)
  , database_is_automatic_(false)
  , custom_travel_distance_(0)
  , custom_timing_curve_(1)

  , custom_text_delivery_type_(1)
{}
struct TransitionAttributesArchiveDefaultTypeInternal {
  constexpr TransitionAttributesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransitionAttributesArchiveDefaultTypeInternal() {}
  union {
    TransitionAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransitionAttributesArchiveDefaultTypeInternal _TransitionAttributesArchive_default_instance_;
constexpr TransitionArchive::TransitionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attributes_(nullptr){}
struct TransitionArchiveDefaultTypeInternal {
  constexpr TransitionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransitionArchiveDefaultTypeInternal() {}
  union {
    TransitionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransitionArchiveDefaultTypeInternal _TransitionArchive_default_instance_;
constexpr BuildChunkArchive::BuildChunkArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : build_(nullptr)
  , build_chunk_identifier_(nullptr)
  , build_id_(nullptr)
  , delay_(0)
  , duration_(0)
  , index_(0u)
  , automatic_(false)
  , referent_(false){}
struct BuildChunkArchiveDefaultTypeInternal {
  constexpr BuildChunkArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildChunkArchiveDefaultTypeInternal() {}
  union {
    BuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildChunkArchiveDefaultTypeInternal _BuildChunkArchive_default_instance_;
constexpr BuildChunkIdentifierArchive::BuildChunkIdentifierArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : build_id_(nullptr)
  , build_chunk_id_(0){}
struct BuildChunkIdentifierArchiveDefaultTypeInternal {
  constexpr BuildChunkIdentifierArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildChunkIdentifierArchiveDefaultTypeInternal() {}
  union {
    BuildChunkIdentifierArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildChunkIdentifierArchiveDefaultTypeInternal _BuildChunkIdentifierArchive_default_instance_;
constexpr BuildAttributeValueArchive::BuildAttributeValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_source_value_(nullptr)
  , color_value_(nullptr)
  , double_value_(0)
  , integer_value_(0u)
  , bool_value_(false)
  , type_(0)
{}
struct BuildAttributeValueArchiveDefaultTypeInternal {
  constexpr BuildAttributeValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildAttributeValueArchiveDefaultTypeInternal() {}
  union {
    BuildAttributeValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildAttributeValueArchiveDefaultTypeInternal _BuildAttributeValueArchive_default_instance_;
constexpr BuildAttributeTupleArchive::BuildAttributeTupleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr)
  , build_id_(nullptr)
  , build_chunk_identifier_(nullptr){}
struct BuildAttributeTupleArchiveDefaultTypeInternal {
  constexpr BuildAttributeTupleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildAttributeTupleArchiveDefaultTypeInternal() {}
  union {
    BuildAttributeTupleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildAttributeTupleArchiveDefaultTypeInternal _BuildAttributeTupleArchive_default_instance_;
constexpr BuildAttributesArchive::BuildAttributesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : database_animationtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , database_effect_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , motionpathstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , database_color_(nullptr)
  , animationattributes_(nullptr)
  , action_motionpathsource_(nullptr)
  , database_direction_(0u)
  , eventtrigger_(0u)
  , database_delay_(0)
  , delayautomaticafter_(0)
  , delayautomaticwith_(0)
  , database_duration_(0)
  , action_rotationangle_(0)
  , action_scalesize_(0)
  , action_coloralpha_(0)
  , action_acceleration_(0)

  , curvestyle_(0)

  , chartrotation3d_(0)
  , custom_textdelivery_(0)

  , custom_deliveryoption_(0)

  , custom_action_scale_(0)
  , custom_action_repeatcount_(0u)
  , custom_bounce_(false)
  , custom_action_decay_(false)
  , custom_motion_blur_(false)
  , custom_include_endpoints_(false)
  , custom_action_jiggleintensity_(0)

  , startoffset_(0u)
  , endoffset_(0u)
  , custom_shine_(false)
  , custom_cursor_(false)
  , custom_align_to_path_(false)
  , custom_scale_amount_(0)
  , custom_travel_distance_(0)
  , action_rotationdirection_(31)
{}
struct BuildAttributesArchiveDefaultTypeInternal {
  constexpr BuildAttributesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildAttributesArchiveDefaultTypeInternal() {}
  union {
    BuildAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildAttributesArchiveDefaultTypeInternal _BuildAttributesArchive_default_instance_;
constexpr BuildArchive::BuildArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delivery_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , drawable_(nullptr)
  , attributes_(nullptr)
  , duration_(0)
  , chunk_id_seed_(0){}
struct BuildArchiveDefaultTypeInternal {
  constexpr BuildArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildArchiveDefaultTypeInternal() {}
  union {
    BuildArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildArchiveDefaultTypeInternal _BuildArchive_default_instance_;
constexpr PlaceholderArchive::PlaceholderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , kind_(0)
{}
struct PlaceholderArchiveDefaultTypeInternal {
  constexpr PlaceholderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceholderArchiveDefaultTypeInternal() {}
  union {
    PlaceholderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
constexpr NoteArchive::NoteArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : containedstorage_(nullptr){}
struct NoteArchiveDefaultTypeInternal {
  constexpr NoteArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NoteArchiveDefaultTypeInternal() {}
  union {
    NoteArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NoteArchiveDefaultTypeInternal _NoteArchive_default_instance_;
constexpr ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_to_style_map_()
  , deprecated_theme_(nullptr){}
struct ClassicStylesheetRecordArchiveDefaultTypeInternal {
  constexpr ClassicStylesheetRecordArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClassicStylesheetRecordArchiveDefaultTypeInternal() {}
  union {
    ClassicStylesheetRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClassicStylesheetRecordArchiveDefaultTypeInternal _ClassicStylesheetRecordArchive_default_instance_;
constexpr ClassicThemeRecordArchive::ClassicThemeRecordArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : templates_()
  , uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stylesheetrecord_(nullptr){}
struct ClassicThemeRecordArchiveDefaultTypeInternal {
  constexpr ClassicThemeRecordArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClassicThemeRecordArchiveDefaultTypeInternal() {}
  union {
    ClassicThemeRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClassicThemeRecordArchiveDefaultTypeInternal _ClassicThemeRecordArchive_default_instance_;
constexpr SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(nullptr){}
struct SlideArchive_SageTagMapEntryDefaultTypeInternal {
  constexpr SlideArchive_SageTagMapEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideArchive_SageTagMapEntryDefaultTypeInternal() {}
  union {
    SlideArchive_SageTagMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideArchive_SageTagMapEntryDefaultTypeInternal _SlideArchive_SageTagMapEntry_default_instance_;
constexpr SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instructional_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(nullptr){}
struct SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal {
  constexpr SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal() {}
  union {
    SlideArchive_InstructionalTextMap_InstructionalTextMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal _SlideArchive_InstructionalTextMap_InstructionalTextMapEntry_default_instance_;
constexpr SlideArchive_InstructionalTextMap::SlideArchive_InstructionalTextMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instructional_text_for_infos_(){}
struct SlideArchive_InstructionalTextMapDefaultTypeInternal {
  constexpr SlideArchive_InstructionalTextMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideArchive_InstructionalTextMapDefaultTypeInternal() {}
  union {
    SlideArchive_InstructionalTextMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideArchive_InstructionalTextMapDefaultTypeInternal _SlideArchive_InstructionalTextMap_default_instance_;
constexpr SlideArchive::SlideArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : builds_()
  , buildchunkarchives_()
  , owned_drawables_()
  , staticguides_()
  , sage_tag_to_info_map_()
  , bodyparagraphstyles_()
  , bodyliststyles_()
  , drawables_z_order_()
  , buildchunks_()
  , infos_using_object_placeholder_geometry_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnailtextfortitleplaceholder_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnailtextforbodyplaceholder_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(nullptr)
  , transition_(nullptr)
  , titleplaceholder_(nullptr)
  , bodyplaceholder_(nullptr)
  , titleplaceholdergeometry_(nullptr)
  , bodyplaceholdergeometry_(nullptr)
  , template_slide_(nullptr)
  , slidenumberplaceholder_(nullptr)
  , slidenumberplaceholdergeometry_(nullptr)
  , titlelayoutproperties_(nullptr)
  , bodylayoutproperties_(nullptr)
  , slidenumberlayoutproperties_(nullptr)
  , note_(nullptr)
  , classicstylesheetrecord_(nullptr)
  , objectplaceholder_(nullptr)
  , userdefinedguidestorage_(nullptr)
  , info_using_object_placeholder_geometry_(nullptr)
  , instructional_text_map_(nullptr)
  , titleplaceholdershapestyleindex_(0u)
  , titleplaceholdertextstyleindex_(0u)
  , bodyplaceholdershapestyleindex_(0u)
  , bodyplaceholdertextstyleindex_(0u)
  , slidenumberplaceholdershapestyleindex_(0u)
  , slidenumberplaceholdertextstyleindex_(0u)
  , slide_objects_layer_with_template_(false)
  , indocument_(false)
  , deprecated_objectplaceholdervisibleforexport_(false)
  , info_using_object_placeholder_geometry_matches_object_placeholder_geometry_(false){}
struct SlideArchiveDefaultTypeInternal {
  constexpr SlideArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideArchiveDefaultTypeInternal() {}
  union {
    SlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideArchiveDefaultTypeInternal _SlideArchive_default_instance_;
constexpr SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SlideNodeArchive_SlideSpecificHyperlinkMapEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infoorstorageidstring_()
  , slidenodeidstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal {
  constexpr SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal() {}
  union {
    SlideNodeArchive_SlideSpecificHyperlinkMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal _SlideNodeArchive_SlideSpecificHyperlinkMapEntry_default_instance_;
constexpr SlideNodeArchive::SlideNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : children_()
  , database_thumbnails_()
  , thumbnailsizes_()
  , thumbnails_()
  , slidespecifichyperlinkmap_()
  , digests_for_datas_needing_download_for_thumbnail_()
  , uniqueidentifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , copyfromslideidentifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slide_(nullptr)
  , database_thumbnail_(nullptr)
  , thumbnailsaredirty_(false)
  , ishidden_(false)
  , iscollapsed_(false)
  , iscollapsedinoutlineview_(false)
  , hasbodyinoutlineview_(false)
  , hasbuilds_(false)
  , hastransition_(false)
  , hasnote_(false)
  , slidespecifichyperlinkcount_(0u)
  , build_event_count_(0u)
  , isslidenumbervisible_(false)
  , build_event_count_is_up_to_date_(false)
  , has_explicit_builds_(false)
  , has_explicit_builds_is_up_to_date_(false)
  , build_event_count_cache_version_(0u)
  , has_explicit_builds_cache_version_(0u)
  , has_background_alpha_(false)
  , depth_(1u){}
struct SlideNodeArchiveDefaultTypeInternal {
  constexpr SlideNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideNodeArchiveDefaultTypeInternal() {}
  union {
    SlideNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideNodeArchiveDefaultTypeInternal _SlideNodeArchive_default_instance_;
constexpr DesktopUILayoutArchive::DesktopUILayoutArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sidebar_view_mode_(0)

  , sidebar_visible_(false)
  , notes_visible_(false)
  , light_table_visible_(false)
  , showing_template_slides_(false)
  , inspector_pane_view_mode_(0)

  , inspector_pane_autohidden_(false)
  , element_list_visible_(false)
  , inspector_pane_visible_(true){}
struct DesktopUILayoutArchiveDefaultTypeInternal {
  constexpr DesktopUILayoutArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DesktopUILayoutArchiveDefaultTypeInternal() {}
  union {
    DesktopUILayoutArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DesktopUILayoutArchiveDefaultTypeInternal _DesktopUILayoutArchive_default_instance_;
constexpr UIStateArchive::UIStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selectedslidenodes_()
  , chart_ui_state_()
  , collapsed_slide_nodes_()
  , outline_collapsed_slide_nodes_()
  , outline_has_body_slide_nodes_()
  , element_list_expanded_groups_()
  , slidenodetoedit_(nullptr)
  , deprecated_template_slide_node_to_apply_(nullptr)
  , deprecated_slidethumbnailsize_(nullptr)
  , canvasoffset_(nullptr)
  , iphonecanvasoffset_(nullptr)
  , iphone568canvasoffset_(nullptr)
  , desktop_ui_layout_(nullptr)
  , desktop_canvas_offset_(nullptr)
  , desktop_main_content_size_(nullptr)
  , desktop_main_window_origin_(nullptr)
  , selection_path_(nullptr)
  , freehand_drawing_toolkit_state_(nullptr)
  , selection_path_transformer_(nullptr)
  , canvasviewscale_(0)
  , iphonecanvasviewscale_(0)
  , iphone568canvasviewscale_(0)
  , desktop_canvas_view_scale_(0)
  , light_table_zoom_scale_(0)
  , desktop_slide_view_content_fits_window_(false)
  , show_slide_guides_(false)
  , show_template_guides_(false)
  , shows_comments_(false)
  , desktop_navigator_view_width_(0)
  , desktop_outline_view_width_(0)
  , desktop_presenter_notes_view_height_(0)
  , comments_printing_toggle_enabled_(false)
  , shows_ruler_(false)
  , desktop_outline_view_default_fixed_(false)
  , light_table_hides_skipped_slides_(false)
  , desktop_element_list_view_width_(0)
  , mobile_light_table_zoom_scale_(0)
  , shows_mobile_light_table_(false)
  , mobile_light_table_hides_skipped_slides_(false)
  , shows_mobile_outline_(false)
  , editing_disabled_(false){}
struct UIStateArchiveDefaultTypeInternal {
  constexpr UIStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UIStateArchiveDefaultTypeInternal() {}
  union {
    UIStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
constexpr IOSRestorableViewStateRootArchive::IOSRestorableViewStateRootArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : saved_playback_state_(nullptr){}
struct IOSRestorableViewStateRootArchiveDefaultTypeInternal {
  constexpr IOSRestorableViewStateRootArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOSRestorableViewStateRootArchiveDefaultTypeInternal() {}
  union {
    IOSRestorableViewStateRootArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOSRestorableViewStateRootArchiveDefaultTypeInternal _IOSRestorableViewStateRootArchive_default_instance_;
constexpr IOSSavedPlaybackStateArchive::IOSSavedPlaybackStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : breadcrumb_trail_()
  , slide_node_index_(0u)
  , event_index_(0u)
  , elapsed_time_start_time_(0)
  , recording_playback_current_time_(0)
  , had_external_display_(false)
  , is_elapsed_time_started_(false)
  , should_show_slide_navigator_(false)
  , presentation_type_(1)
{}
struct IOSSavedPlaybackStateArchiveDefaultTypeInternal {
  constexpr IOSSavedPlaybackStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOSSavedPlaybackStateArchiveDefaultTypeInternal() {}
  union {
    IOSSavedPlaybackStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOSSavedPlaybackStateArchiveDefaultTypeInternal _IOSSavedPlaybackStateArchive_default_instance_;
constexpr CanvasSelectionArchive::CanvasSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , database_action_ghost_indexes_()
  , action_ghost_indexes_()
  , build_chunks_()
  , non_interactive_infos_()
  , infos_for_action_ghost_indexes_(){}
struct CanvasSelectionArchiveDefaultTypeInternal {
  constexpr CanvasSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanvasSelectionArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
constexpr ActionGhostSelectionArchive::ActionGhostSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ActionGhostSelectionArchiveDefaultTypeInternal {
  constexpr ActionGhostSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionGhostSelectionArchiveDefaultTypeInternal() {}
  union {
    ActionGhostSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionGhostSelectionArchiveDefaultTypeInternal _ActionGhostSelectionArchive_default_instance_;
constexpr ThemeCustomTimingCurveArchive::ThemeCustomTimingCurveArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , curve_(nullptr){}
struct ThemeCustomTimingCurveArchiveDefaultTypeInternal {
  constexpr ThemeCustomTimingCurveArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemeCustomTimingCurveArchiveDefaultTypeInternal() {}
  union {
    ThemeCustomTimingCurveArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemeCustomTimingCurveArchiveDefaultTypeInternal _ThemeCustomTimingCurveArchive_default_instance_;
constexpr ThemeArchive::ThemeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : templates_()
  , classicthemerecords_()
  , custom_effect_timing_curves_()
  , uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , default_template_slide_node_(nullptr)
  , default_template_slide_node_reference_(nullptr)
  , default_template_slide_node_is_our_best_guess_(false){}
struct ThemeArchiveDefaultTypeInternal {
  constexpr ThemeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemeArchiveDefaultTypeInternal() {}
  union {
    ThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
constexpr SlideTreeArchive::SlideTreeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slides_()
  , rootslidenode_(nullptr){}
struct SlideTreeArchiveDefaultTypeInternal {
  constexpr SlideTreeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideTreeArchiveDefaultTypeInternal() {}
  union {
    SlideTreeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideTreeArchiveDefaultTypeInternal _SlideTreeArchive_default_instance_;
constexpr ShowArchive::ShowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uistate_(nullptr)
  , theme_(nullptr)
  , slidetree_(nullptr)
  , size_(nullptr)
  , stylesheet_(nullptr)
  , recording_(nullptr)
  , soundtrack_(nullptr)
  , slidelist_(nullptr)
  , mode_(0)

  , slidenumbersvisible_(false)
  , loop_presentation_(false)
  , idle_timer_active_(false)
  , automatically_plays_upon_open_(false)
  , autoplay_transition_delay_(5)
  , autoplay_build_delay_(2)
  , idle_timer_delay_(900){}
struct ShowArchiveDefaultTypeInternal {
  constexpr ShowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShowArchiveDefaultTypeInternal() {}
  union {
    ShowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShowArchiveDefaultTypeInternal _ShowArchive_default_instance_;
constexpr DocumentArchive::DocumentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : show_(nullptr)
  , super_(nullptr)
  , tables_custom_format_list_(nullptr){}
struct DocumentArchiveDefaultTypeInternal {
  constexpr DocumentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
constexpr SlideStylePropertiesArchive::SlideStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fill_(nullptr)
  , transition_(nullptr)
  , transition_null_(false)
  , titleplaceholdervisibility_(false)
  , bodyplaceholdervisibility_(false)
  , objectplaceholdervisibility_(false)
  , slidenumberplaceholdervisibility_(false){}
struct SlideStylePropertiesArchiveDefaultTypeInternal {
  constexpr SlideStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    SlideStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideStylePropertiesArchiveDefaultTypeInternal _SlideStylePropertiesArchive_default_instance_;
constexpr SlideStyleArchive::SlideStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , slide_properties_(nullptr)
  , override_count_(0u){}
struct SlideStyleArchiveDefaultTypeInternal {
  constexpr SlideStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideStyleArchiveDefaultTypeInternal() {}
  union {
    SlideStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideStyleArchiveDefaultTypeInternal _SlideStyleArchive_default_instance_;
constexpr PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawables_()
  , builds_()
  , buildchunks_()
  , slidenodes_()
  , titleranges_()
  , geometries_in_root_()
  , template_slide_nodes_()
  , collapsedslidenodes_()
  , outlinecollapsedslidenodes_()
  , displayed_slide_nodes_()
  , outlinehasbodyslidenodes_()
  , custom_effect_timing_curves_()
  , original_slide_node_uuids_()
  , slide_node_unique_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , originalshowsize_(nullptr)
  , transition_(nullptr)
  , slide_nodes_have_datas_needing_download_(false){}
struct PasteboardNativeStorageArchiveDefaultTypeInternal {
  constexpr PasteboardNativeStorageArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PasteboardNativeStorageArchiveDefaultTypeInternal() {}
  union {
    PasteboardNativeStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PasteboardNativeStorageArchiveDefaultTypeInternal _PasteboardNativeStorageArchive_default_instance_;
constexpr PrototypeForUndoTemplateChangeArchive::PrototypeForUndoTemplateChangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_info_id_list_()
  , placeholders_()
  , placeholder_tags_list_()
  , slide_style_(nullptr)
  , template_slide_id_(nullptr){}
struct PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal {
  constexpr PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal() {}
  union {
    PrototypeForUndoTemplateChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal _PrototypeForUndoTemplateChangeArchive_default_instance_;
constexpr RecordingArchive::RecordingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_tracks_()
  , movie_track_(nullptr)
  , modification_date_(nullptr)
  , sync_state_(nullptr)
  , correction_history_(nullptr)
  , duration_(0)
  , sync_state_enum_(0)
{}
struct RecordingArchiveDefaultTypeInternal {
  constexpr RecordingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingArchiveDefaultTypeInternal() {}
  union {
    RecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingArchiveDefaultTypeInternal _RecordingArchive_default_instance_;
constexpr RecordingSyncState::RecordingSyncState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : out_of_sync_token_(nullptr)
  , can_clear_out_of_sync_token_(false){}
struct RecordingSyncStateDefaultTypeInternal {
  constexpr RecordingSyncStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingSyncStateDefaultTypeInternal() {}
  union {
    RecordingSyncState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingSyncStateDefaultTypeInternal _RecordingSyncState_default_instance_;
constexpr RecordingCorrectionHistory::RecordingCorrectionHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : did_add_missing_events_for_radar_49654305_(false){}
struct RecordingCorrectionHistoryDefaultTypeInternal {
  constexpr RecordingCorrectionHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingCorrectionHistoryDefaultTypeInternal() {}
  union {
    RecordingCorrectionHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingCorrectionHistoryDefaultTypeInternal _RecordingCorrectionHistory_default_instance_;
constexpr RecordingEventTrackArchive::RecordingEventTrackArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RecordingEventTrackArchiveDefaultTypeInternal {
  constexpr RecordingEventTrackArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingEventTrackArchiveDefaultTypeInternal() {}
  union {
    RecordingEventTrackArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingEventTrackArchiveDefaultTypeInternal _RecordingEventTrackArchive_default_instance_;
constexpr RecordingEventArchive::RecordingEventArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : navigation_event_archive_(nullptr)
  , laser_event_archive_(nullptr)
  , pause_event_archive_(nullptr)
  , movie_event_archive_(nullptr)
  , start_time_(-1){}
struct RecordingEventArchiveDefaultTypeInternal {
  constexpr RecordingEventArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingEventArchiveDefaultTypeInternal() {}
  union {
    RecordingEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingEventArchiveDefaultTypeInternal _RecordingEventArchive_default_instance_;
constexpr RecordingNavigationEventArchive::RecordingNavigationEventArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_slide_node_reference_(nullptr)
  , target_slide_node_id_(nullptr)
  , target_event_index_(0u)
  , animation_phase_(0)
{}
struct RecordingNavigationEventArchiveDefaultTypeInternal {
  constexpr RecordingNavigationEventArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingNavigationEventArchiveDefaultTypeInternal() {}
  union {
    RecordingNavigationEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingNavigationEventArchiveDefaultTypeInternal _RecordingNavigationEventArchive_default_instance_;
constexpr RecordingLaserEventArchive::RecordingLaserEventArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unscaled_location_(nullptr)
  , unit_location_(nullptr){}
struct RecordingLaserEventArchiveDefaultTypeInternal {
  constexpr RecordingLaserEventArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingLaserEventArchiveDefaultTypeInternal() {}
  union {
    RecordingLaserEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingLaserEventArchiveDefaultTypeInternal _RecordingLaserEventArchive_default_instance_;
constexpr RecordingPauseEventArchive::RecordingPauseEventArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pause_event_type_(0)
{}
struct RecordingPauseEventArchiveDefaultTypeInternal {
  constexpr RecordingPauseEventArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingPauseEventArchiveDefaultTypeInternal() {}
  union {
    RecordingPauseEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingPauseEventArchiveDefaultTypeInternal _RecordingPauseEventArchive_default_instance_;
constexpr RecordingMovieEventArchive::RecordingMovieEventArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : movie_info_reference_(nullptr)
  , movie_info_that_played_across_slides_reference_(nullptr)
  , movie_slide_node_id_(nullptr)
  , movie_event_value_(0)
  , movie_event_type_(1)
{}
struct RecordingMovieEventArchiveDefaultTypeInternal {
  constexpr RecordingMovieEventArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingMovieEventArchiveDefaultTypeInternal() {}
  union {
    RecordingMovieEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingMovieEventArchiveDefaultTypeInternal _RecordingMovieEventArchive_default_instance_;
constexpr RecordingMovieTrackArchive::RecordingMovieTrackArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : movie_segments_()
  , is_movie_segment_data_trimmed_to_duration_(false){}
struct RecordingMovieTrackArchiveDefaultTypeInternal {
  constexpr RecordingMovieTrackArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingMovieTrackArchiveDefaultTypeInternal() {}
  union {
    RecordingMovieTrackArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingMovieTrackArchiveDefaultTypeInternal _RecordingMovieTrackArchive_default_instance_;
constexpr MovieSegmentArchive::MovieSegmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : database_movie_data_(nullptr)
  , movie_data_(nullptr)
  , start_time_(-1){}
struct MovieSegmentArchiveDefaultTypeInternal {
  constexpr MovieSegmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovieSegmentArchiveDefaultTypeInternal() {}
  union {
    MovieSegmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovieSegmentArchiveDefaultTypeInternal _MovieSegmentArchive_default_instance_;
constexpr Soundtrack::Soundtrack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : movie_media_()
  , volume_(0)
  , mode_(0)
{}
struct SoundtrackDefaultTypeInternal {
  constexpr SoundtrackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SoundtrackDefaultTypeInternal() {}
  union {
    Soundtrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SoundtrackDefaultTypeInternal _Soundtrack_default_instance_;
constexpr SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct SlideNumberAttachmentArchiveDefaultTypeInternal {
  constexpr SlideNumberAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideNumberAttachmentArchiveDefaultTypeInternal() {}
  union {
    SlideNumberAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideNumberAttachmentArchiveDefaultTypeInternal _SlideNumberAttachmentArchive_default_instance_;
constexpr SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slide_node_(nullptr)
  , selected_paragraph_indexes_(nullptr){}
struct SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal {
  constexpr SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionArchive_OutlineSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal _SlideCollectionSelectionArchive_OutlineSelection_default_instance_;
constexpr SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slide_nodes_()
  , selected_paragraph_indexes_for_slide_nodes_()
  , slide_node_to_edit_(nullptr)
  , range_in_selected_paragraph_(nullptr){}
struct SlideCollectionSelectionArchiveDefaultTypeInternal {
  constexpr SlideCollectionSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideCollectionSelectionArchiveDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideCollectionSelectionArchiveDefaultTypeInternal _SlideCollectionSelectionArchive_default_instance_;
constexpr PresenterNotesSelectionArchive::PresenterNotesSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slide_node_(nullptr){}
struct PresenterNotesSelectionArchiveDefaultTypeInternal {
  constexpr PresenterNotesSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PresenterNotesSelectionArchiveDefaultTypeInternal() {}
  union {
    PresenterNotesSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PresenterNotesSelectionArchiveDefaultTypeInternal _PresenterNotesSelectionArchive_default_instance_;
constexpr MixedIdOperationArgs::MixedIdOperationArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_types_()
  , add_args_list_()
  , show_placeholder_args_list_()
  , remove_args_list_()
  , hide_placeholder_args_list_(){}
struct MixedIdOperationArgsDefaultTypeInternal {
  constexpr MixedIdOperationArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MixedIdOperationArgsDefaultTypeInternal() {}
  union {
    MixedIdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MixedIdOperationArgsDefaultTypeInternal _MixedIdOperationArgs_default_instance_;
}  // namespace KN
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_KNArchives_2eproto[51];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_KNArchives_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_KNArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_KNArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, animation_type_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, effect_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, duration_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, direction_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, delay_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, is_automatic_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, color_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, custom_effect_timing_curve_1_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, custom_effect_timing_curve_2_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, custom_effect_timing_curve_3_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, random_number_seed_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, custom_detail_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, custom_effect_timing_curve_theme_name_1_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, custom_effect_timing_curve_theme_name_2_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, custom_effect_timing_curve_theme_name_3_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, writing_direction_is_rtl_),
  0,
  1,
  9,
  11,
  10,
  14,
  5,
  6,
  7,
  8,
  12,
  13,
  2,
  3,
  4,
  15,
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, animationattributes_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, custom_twist_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, custom_mosaic_size_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, custom_mosaic_type_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, custom_bounce_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, custom_magic_move_fade_unmatched_objects_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, custom_timing_curve_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, custom_text_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, custom_motion_blur_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, custom_travel_distance_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, database_animation_type_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, database_effect_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, database_duration_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, database_direction_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, database_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, database_is_automatic_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, database_color_),
  3,
  7,
  8,
  9,
  10,
  11,
  15,
  16,
  12,
  14,
  0,
  1,
  4,
  5,
  6,
  13,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::TransitionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::TransitionArchive, attributes_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, build_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, index_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, delay_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, duration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, automatic_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, referent_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, build_chunk_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, build_id_),
  0,
  5,
  3,
  4,
  6,
  7,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkIdentifierArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkIdentifierArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkIdentifierArchive, build_id_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkIdentifierArchive, build_chunk_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, integer_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, double_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, bool_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, string_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, path_source_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, color_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, type_),
  4,
  3,
  5,
  0,
  1,
  2,
  6,
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, property_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, build_id_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, build_chunk_identifier_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, animationattributes_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, eventtrigger_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, delayautomaticafter_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, delayautomaticwith_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, curvestyle_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, chartrotation3d_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, startoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, endoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, action_rotationangle_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, action_rotationdirection_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, action_scalesize_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, action_coloralpha_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, action_acceleration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, action_motionpathsource_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_bounce_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_textdelivery_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_deliveryoption_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_action_decay_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_action_repeatcount_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_action_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_action_jiggleintensity_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_motion_blur_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_include_endpoints_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_shine_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_scale_amount_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_travel_distance_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_cursor_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, custom_align_to_path_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, database_animationtype_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, database_effect_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, database_direction_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, database_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, database_duration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, database_color_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, motionpathstring_),
  4,
  7,
  9,
  10,
  16,
  17,
  27,
  28,
  12,
  34,
  13,
  14,
  15,
  5,
  22,
  18,
  19,
  23,
  21,
  20,
  26,
  24,
  25,
  29,
  32,
  33,
  30,
  31,
  0,
  1,
  6,
  8,
  11,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, drawable_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, delivery_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, duration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, attributes_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, chunk_id_seed_),
  1,
  0,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::NoteArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::NoteArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::NoteArchive, containedstorage_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, identifier_to_style_map_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, deprecated_theme_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, uuid_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, stylesheetrecord_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, templates_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, tag_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, info_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry, info_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry, instructional_text_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap, instructional_text_for_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, style_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, builds_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, buildchunkarchives_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, buildchunks_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, transition_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, titleplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, bodyplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, objectplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, slidenumberplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, owned_drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, drawables_z_order_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, sage_tag_to_info_map_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, instructional_text_map_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, name_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, titleplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, titleplaceholdershapestyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, titleplaceholdertextstyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, titlelayoutproperties_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, bodyplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, bodyplaceholdershapestyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, bodyplaceholdertextstyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, bodylayoutproperties_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, slidenumberplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, slidenumberplaceholdershapestyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, slidenumberplaceholdertextstyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, slidenumberlayoutproperties_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, classicstylesheetrecord_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, bodyparagraphstyles_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, bodyliststyles_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, thumbnailtextfortitleplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, thumbnailtextforbodyplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, slide_objects_layer_with_template_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, template_slide_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, staticguides_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, userdefinedguidestorage_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, indocument_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, note_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, infos_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, deprecated_objectplaceholdervisibleforexport_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, info_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, info_using_object_placeholder_geometry_matches_object_placeholder_geometry_),
  3,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  17,
  10,
  ~0u,
  ~0u,
  ~0u,
  20,
  0,
  7,
  21,
  22,
  12,
  8,
  23,
  24,
  13,
  11,
  25,
  26,
  14,
  16,
  ~0u,
  ~0u,
  1,
  2,
  27,
  9,
  ~0u,
  18,
  28,
  15,
  ~0u,
  29,
  19,
  30,
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry, slidenodeidstring_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry, infoorstorageidstring_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, children_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, slide_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, depth_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, thumbnails_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, thumbnailsizes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, thumbnailsaredirty_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, digests_for_datas_needing_download_for_thumbnail_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, ishidden_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, iscollapsed_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, iscollapsedinoutlineview_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, hasbodyinoutlineview_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, hasbuilds_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, hastransition_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, hasnote_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, isslidenumbervisible_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, uniqueidentifier_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, copyfromslideidentifier_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, slidespecifichyperlinkcount_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, build_event_count_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, build_event_count_cache_version_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, build_event_count_is_up_to_date_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, has_explicit_builds_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, has_explicit_builds_cache_version_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, has_explicit_builds_is_up_to_date_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, slidespecifichyperlinkmap_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, has_background_alpha_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, database_thumbnail_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, database_thumbnails_),
  ~0u,
  2,
  21,
  ~0u,
  ~0u,
  4,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  14,
  0,
  1,
  12,
  13,
  18,
  15,
  16,
  19,
  17,
  ~0u,
  20,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, sidebar_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, sidebar_view_mode_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, notes_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, light_table_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, inspector_pane_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, inspector_pane_view_mode_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, showing_template_slides_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, inspector_pane_autohidden_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, element_list_visible_),
  1,
  0,
  2,
  3,
  8,
  5,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, slidenodetoedit_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, deprecated_template_slide_node_to_apply_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, deprecated_slidethumbnailsize_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, canvasviewscale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, canvasoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, selectedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, iphonecanvasviewscale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, iphonecanvasoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, iphone568canvasviewscale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, iphone568canvasoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_ui_layout_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_slide_view_content_fits_window_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_canvas_view_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_canvas_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, light_table_zoom_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, chart_ui_state_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, show_slide_guides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, show_template_guides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, shows_comments_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, comments_printing_toggle_enabled_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, collapsed_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, outline_collapsed_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, outline_has_body_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, shows_ruler_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_navigator_view_width_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_outline_view_width_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_outline_view_default_fixed_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_main_content_size_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_presenter_notes_view_height_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_main_window_origin_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, light_table_hides_skipped_slides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, selection_path_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, desktop_element_list_view_width_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, element_list_expanded_groups_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, shows_mobile_light_table_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, mobile_light_table_zoom_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, mobile_light_table_hides_skipped_slides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, freehand_drawing_toolkit_state_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, selection_path_transformer_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, shows_mobile_outline_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, editing_disabled_),
  0,
  1,
  2,
  13,
  3,
  ~0u,
  14,
  4,
  15,
  5,
  6,
  18,
  16,
  7,
  17,
  ~0u,
  19,
  20,
  21,
  25,
  ~0u,
  ~0u,
  ~0u,
  26,
  22,
  23,
  27,
  8,
  24,
  9,
  28,
  10,
  29,
  ~0u,
  31,
  30,
  32,
  11,
  12,
  33,
  34,
  PROTOBUF_FIELD_OFFSET(::KN::IOSRestorableViewStateRootArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSRestorableViewStateRootArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::IOSRestorableViewStateRootArchive, saved_playback_state_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, presentation_type_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, slide_node_index_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, event_index_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, breadcrumb_trail_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, had_external_display_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, is_elapsed_time_started_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, elapsed_time_start_time_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, recording_playback_current_time_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, should_show_slide_navigator_),
  7,
  0,
  1,
  ~0u,
  4,
  5,
  2,
  3,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, non_interactive_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, infos_for_action_ghost_indexes_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, action_ghost_indexes_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, build_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, database_action_ghost_indexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::ActionGhostSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::ThemeCustomTimingCurveArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeCustomTimingCurveArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::ThemeCustomTimingCurveArchive, name_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeCustomTimingCurveArchive, curve_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, templates_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, uuid_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, classicthemerecords_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, default_template_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, default_template_slide_node_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, default_template_slide_node_is_our_best_guess_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, custom_effect_timing_curves_),
  1,
  ~0u,
  0,
  ~0u,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, rootslidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, slides_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, uistate_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, slidetree_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, size_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, stylesheet_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, slidenumbersvisible_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, recording_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, loop_presentation_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, mode_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, autoplay_transition_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, autoplay_build_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, idle_timer_active_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, idle_timer_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, soundtrack_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, automatically_plays_upon_open_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, slidelist_),
  0,
  1,
  2,
  3,
  4,
  9,
  5,
  10,
  8,
  13,
  14,
  11,
  15,
  6,
  12,
  7,
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, show_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, tables_custom_format_list_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, fill_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, transition_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, transition_null_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, titleplaceholdervisibility_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, bodyplaceholdervisibility_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, objectplaceholdervisibility_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, slidenumberplaceholdervisibility_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, slide_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, builds_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, buildchunks_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, slidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, displayed_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, template_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, collapsedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, outlinecollapsedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, outlinehasbodyslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, originalshowsize_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, titleranges_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, geometries_in_root_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, slide_node_unique_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, custom_effect_timing_curves_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, original_slide_node_uuids_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, slide_nodes_have_datas_needing_download_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, transition_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, slide_style_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, template_slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, drawable_info_id_list_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, placeholders_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, placeholder_tags_list_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, event_tracks_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, movie_track_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, duration_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, sync_state_enum_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, modification_date_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, sync_state_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, correction_history_),
  ~0u,
  0,
  4,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingSyncState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingSyncState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingSyncState, out_of_sync_token_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingSyncState, can_clear_out_of_sync_token_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingCorrectionHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingCorrectionHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingCorrectionHistory, did_add_missing_events_for_radar_49654305_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, type_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, events_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, start_time_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, navigation_event_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, laser_event_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, pause_event_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, movie_event_archive_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, target_slide_node_id_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, target_slide_node_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, target_event_index_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, animation_phase_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, unscaled_location_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, unit_location_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingPauseEventArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingPauseEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingPauseEventArchive, pause_event_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, movie_info_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, movie_event_type_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, movie_event_value_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, movie_info_that_played_across_slides_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, movie_slide_node_id_),
  0,
  4,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, movie_segments_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, is_movie_segment_data_trimmed_to_duration_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, movie_data_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, start_time_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, database_movie_data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, volume_),
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, mode_),
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, movie_media_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideNumberAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNumberAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideNumberAttachmentArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, selected_paragraph_indexes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, slide_node_to_edit_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, selected_paragraph_indexes_for_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, range_in_selected_paragraph_),
  ~0u,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::PresenterNotesSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PresenterNotesSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::PresenterNotesSelectionArchive, slide_node_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, args_list_types_),
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, add_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, show_placeholder_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, remove_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, hide_placeholder_args_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::KN::AnimationAttributesArchive)},
  { 37, 59, sizeof(::KN::TransitionAttributesArchive)},
  { 76, 82, sizeof(::KN::TransitionArchive)},
  { 83, 96, sizeof(::KN::BuildChunkArchive)},
  { 104, 111, sizeof(::KN::BuildChunkIdentifierArchive)},
  { 113, 125, sizeof(::KN::BuildAttributeValueArchive)},
  { 132, 141, sizeof(::KN::BuildAttributeTupleArchive)},
  { 145, 185, sizeof(::KN::BuildAttributesArchive)},
  { 220, 230, sizeof(::KN::BuildArchive)},
  { 235, 242, sizeof(::KN::PlaceholderArchive)},
  { 244, 250, sizeof(::KN::NoteArchive)},
  { 251, 258, sizeof(::KN::ClassicStylesheetRecordArchive)},
  { 260, 268, sizeof(::KN::ClassicThemeRecordArchive)},
  { 271, 278, sizeof(::KN::SlideArchive_SageTagMapEntry)},
  { 280, 287, sizeof(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry)},
  { 289, -1, sizeof(::KN::SlideArchive_InstructionalTextMap)},
  { 295, 341, sizeof(::KN::SlideArchive)},
  { 382, 389, sizeof(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry)},
  { 391, 424, sizeof(::KN::SlideNodeArchive)},
  { 452, 466, sizeof(::KN::DesktopUILayoutArchive)},
  { 475, 521, sizeof(::KN::UIStateArchive)},
  { 562, 568, sizeof(::KN::IOSRestorableViewStateRootArchive)},
  { 569, 583, sizeof(::KN::IOSSavedPlaybackStateArchive)},
  { 592, -1, sizeof(::KN::CanvasSelectionArchive)},
  { 603, -1, sizeof(::KN::ActionGhostSelectionArchive)},
  { 608, 615, sizeof(::KN::ThemeCustomTimingCurveArchive)},
  { 617, 630, sizeof(::KN::ThemeArchive)},
  { 638, 645, sizeof(::KN::SlideTreeArchive)},
  { 647, 668, sizeof(::KN::ShowArchive)},
  { 684, 692, sizeof(::KN::DocumentArchive)},
  { 695, 707, sizeof(::KN::SlideStylePropertiesArchive)},
  { 714, 722, sizeof(::KN::SlideStyleArchive)},
  { 725, 747, sizeof(::KN::PasteboardNativeStorageArchive)},
  { 764, 774, sizeof(::KN::PrototypeForUndoTemplateChangeArchive)},
  { 779, 791, sizeof(::KN::RecordingArchive)},
  { 798, 805, sizeof(::KN::RecordingSyncState)},
  { 807, 813, sizeof(::KN::RecordingCorrectionHistory)},
  { 814, 821, sizeof(::KN::RecordingEventTrackArchive)},
  { 823, 833, sizeof(::KN::RecordingEventArchive)},
  { 838, 847, sizeof(::KN::RecordingNavigationEventArchive)},
  { 851, 858, sizeof(::KN::RecordingLaserEventArchive)},
  { 860, 866, sizeof(::KN::RecordingPauseEventArchive)},
  { 867, 877, sizeof(::KN::RecordingMovieEventArchive)},
  { 882, 889, sizeof(::KN::RecordingMovieTrackArchive)},
  { 891, 899, sizeof(::KN::MovieSegmentArchive)},
  { 902, 910, sizeof(::KN::Soundtrack)},
  { 913, 919, sizeof(::KN::SlideNumberAttachmentArchive)},
  { 920, 927, sizeof(::KN::SlideCollectionSelectionArchive_OutlineSelection)},
  { 929, 938, sizeof(::KN::SlideCollectionSelectionArchive)},
  { 942, 948, sizeof(::KN::PresenterNotesSelectionArchive)},
  { 949, -1, sizeof(::KN::MixedIdOperationArgs)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_AnimationAttributesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_TransitionAttributesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_TransitionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_BuildChunkArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_BuildChunkIdentifierArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_BuildAttributeValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_BuildAttributeTupleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_BuildAttributesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_BuildArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_PlaceholderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_NoteArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_ClassicStylesheetRecordArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_ClassicThemeRecordArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideArchive_SageTagMapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideArchive_InstructionalTextMap_InstructionalTextMapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideArchive_InstructionalTextMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideNodeArchive_SlideSpecificHyperlinkMapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_DesktopUILayoutArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_UIStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_IOSRestorableViewStateRootArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_IOSSavedPlaybackStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CanvasSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_ActionGhostSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_ThemeCustomTimingCurveArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_ThemeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideTreeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_ShowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_DocumentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_PasteboardNativeStorageArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_PrototypeForUndoTemplateChangeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingSyncState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingCorrectionHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingEventTrackArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingEventArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingNavigationEventArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingLaserEventArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingPauseEventArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingMovieEventArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RecordingMovieTrackArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_MovieSegmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_Soundtrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideNumberAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideCollectionSelectionArchive_OutlineSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideCollectionSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_PresenterNotesSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_MixedIdOperationArgs_default_instance_),
};

const char descriptor_table_protodef_KNArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020KNArchives.proto\022\002KN\032\021TSPMessages.prot"
  "o\032\021TSKArchives.proto\032\021TSSArchives.proto\032"
  "\021TSDArchives.proto\032\022TSWPArchives.proto\032\021"
  "TSAArchives.proto\032\022TSCHArchives.proto\"\313\004"
  "\n\032AnimationAttributesArchive\022\026\n\016animatio"
  "n_type\030\001 \001(\t\022\016\n\006effect\030\002 \001(\t\022\020\n\010duration"
  "\030\003 \001(\001\022\021\n\tdirection\030\004 \001(\r\022\r\n\005delay\030\005 \001(\001"
  "\022\024\n\014is_automatic\030\006 \001(\010\022\031\n\005color\030\007 \001(\0132\n."
  "TSP.Color\022<\n\034custom_effect_timing_curve_"
  "1\030\010 \001(\0132\026.TSD.PathSourceArchive\022<\n\034custo"
  "m_effect_timing_curve_2\030\t \001(\0132\026.TSD.Path"
  "SourceArchive\022<\n\034custom_effect_timing_cu"
  "rve_3\030\n \001(\0132\026.TSD.PathSourceArchive\022\032\n\022r"
  "andom_number_seed\030\013 \001(\r\022\025\n\rcustom_detail"
  "\030\014 \001(\001\022/\n\'custom_effect_timing_curve_the"
  "me_name_1\030\r \001(\t\022/\n\'custom_effect_timing_"
  "curve_theme_name_2\030\016 \001(\t\022/\n\'custom_effec"
  "t_timing_curve_theme_name_3\030\017 \001(\t\022 \n\030wri"
  "ting_direction_is_rtl\030\020 \001(\010\"\271\n\n\033Transiti"
  "onAttributesArchive\022;\n\023animationAttribut"
  "es\030\010 \001(\0132\036.KN.AnimationAttributesArchive"
  "\022\024\n\014custom_twist\030\t \001(\002\022\032\n\022custom_mosaic_"
  "size\030\n \001(\r\022\032\n\022custom_mosaic_type\030\013 \001(\r\022\025"
  "\n\rcustom_bounce\030\014 \001(\010\0220\n(custom_magic_mo"
  "ve_fade_unmatched_objects\030\r \001(\010\022f\n\023custo"
  "m_timing_curve\030\017 \001(\0162I.KN.TransitionAttr"
  "ibutesArchive.TransitionCustomAttributes"
  "TimingCurveType\022m\n\031custom_text_delivery_"
  "type\030\020 \001(\0162J.KN.TransitionAttributesArch"
  "ive.TransitionCustomAttributesTextDelive"
  "ryType\022\032\n\022custom_motion_blur\030\021 \001(\010\022\036\n\026cu"
  "stom_travel_distance\030\022 \001(\002\022#\n\027database_a"
  "nimation_type\030\001 \001(\tB\002\030\001\022\033\n\017database_effe"
  "ct\030\002 \001(\tB\002\030\001\022\035\n\021database_duration\030\003 \001(\001B"
  "\002\030\001\022\036\n\022database_direction\030\004 \001(\rB\002\030\001\022\032\n\016d"
  "atabase_delay\030\005 \001(\002B\002\030\001\022!\n\025database_is_a"
  "utomatic\030\006 \001(\010B\002\030\001\022&\n\016database_color\030\007 \001"
  "(\0132\n.TSP.ColorB\002\030\001\"\274\002\n)TransitionCustomA"
  "ttributesTimingCurveType\0223\n/TransitionCu"
  "stomAttributesTimingCurveTypeLinear\020\001\0223\n"
  "/TransitionCustomAttributesTimingCurveTy"
  "peEaseIn\020\002\0224\n0TransitionCustomAttributes"
  "TimingCurveTypeEaseOut\020\003\022:\n6TransitionCu"
  "stomAttributesTimingCurveTypeEaseInEaseO"
  "ut\020\004\0223\n/TransitionCustomAttributesTiming"
  "CurveTypeCustom\020\005\"\213\002\n*TransitionCustomAt"
  "tributesTextDeliveryType\0226\n2TransitionCu"
  "stomAttributesTextDeliveryTypeByObject\020\001"
  "\0224\n0TransitionCustomAttributesTextDelive"
  "ryTypeByWord\020\002\0229\n5TransitionCustomAttrib"
  "utesTextDeliveryTypeByCharacter\020\003\0224\n0Tra"
  "nsitionCustomAttributesTextDeliveryTypeB"
  "yLine\020\004\"H\n\021TransitionArchive\0223\n\nattribut"
  "es\030\002 \002(\0132\037.KN.TransitionAttributesArchiv"
  "e\"\351\001\n\021BuildChunkArchive\022\035\n\005build\030\001 \001(\0132\016"
  ".TSP.Reference\022\021\n\005index\030\002 \001(\rB\002\030\001\022\r\n\005del"
  "ay\030\003 \001(\001\022\020\n\010duration\030\004 \001(\001\022\021\n\tautomatic\030"
  "\005 \001(\010\022\020\n\010referent\030\006 \001(\010\022\?\n\026build_chunk_i"
  "dentifier\030\007 \001(\0132\037.KN.BuildChunkIdentifie"
  "rArchive\022\033\n\010build_id\030\010 \001(\0132\t.TSP.UUID\"R\n"
  "\033BuildChunkIdentifierArchive\022\033\n\010build_id"
  "\030\001 \001(\0132\t.TSP.UUID\022\026\n\016build_chunk_id\030\002 \001("
  "\005\"\377\002\n\032BuildAttributeValueArchive\022\025\n\rinte"
  "ger_value\030\001 \001(\r\022\024\n\014double_value\030\002 \001(\001\022\022\n"
  "\nbool_value\030\003 \001(\010\022\024\n\014string_value\030\004 \001(\t\022"
  "1\n\021path_source_value\030\005 \001(\0132\026.TSD.PathSou"
  "rceArchive\022\037\n\013color_value\030\006 \001(\0132\n.TSP.Co"
  "lor\022D\n\004type\030\007 \001(\01626.KN.BuildAttributeVal"
  "ueArchive.BuildAttributeValueType\"p\n\027Bui"
  "ldAttributeValueType\022\r\n\tk_integer\020\000\022\014\n\010k"
  "_double\020\002\022\n\n\006k_bool\020\003\022\014\n\010k_string\020\004\022\021\n\rk"
  "_path_source\020\005\022\013\n\007k_color\020\006\"\273\001\n\032BuildAtt"
  "ributeTupleArchive\022\020\n\010property\030\001 \001(\t\022-\n\005"
  "value\030\002 \001(\0132\036.KN.BuildAttributeValueArch"
  "ive\022\033\n\010build_id\030\003 \001(\0132\t.TSP.UUID\022\?\n\026buil"
  "d_chunk_identifier\030\004 \001(\0132\037.KN.BuildChunk"
  "IdentifierArchive\"\200\021\n\026BuildAttributesArc"
  "hive\022;\n\023animationAttributes\030\022 \001(\0132\036.KN.A"
  "nimationAttributesArchive\022\024\n\014eventTrigge"
  "r\030\004 \001(\r\022\037\n\023delayAutomaticAfter\030\006 \001(\001B\002\030\001"
  "\022\036\n\022delayAutomaticWith\030\007 \001(\001B\002\030\001\022H\n\ncurv"
  "eStyle\030\016 \001(\01624.KN.BuildAttributesArchive"
  ".BuildAttributesCurveStyle\022\027\n\017ChartRotat"
  "ion3D\030\021 \001(\001\022\023\n\013startOffset\030\033 \001(\r\022\021\n\tendO"
  "ffset\030\034 \001(\r\022\034\n\024action_rotationAngle\030\t \001("
  "\001\022]\n\030action_rotationDirection\030\n \001(\0162;.KN"
  ".BuildAttributesArchive.BuildAttributesR"
  "otationDirection\022\030\n\020action_scaleSize\030\013 \001"
  "(\001\022\031\n\021action_colorAlpha\030\014 \001(\001\022S\n\023action_"
  "acceleration\030\r \001(\01626.KN.BuildAttributesA"
  "rchive.BuildAttributesAcceleration\0227\n\027ac"
  "tion_motionPathSource\030\026 \001(\0132\026.TSD.PathSo"
  "urceArchive\022\025\n\rcustom_bounce\030\023 \001(\010\022S\n\023cu"
  "stom_textDelivery\030\024 \001(\01626.KN.BuildAttrib"
  "utesArchive.BuildAttributesTextDelivery\022"
  "W\n\025custom_deliveryOption\030\025 \001(\01628.KN.Buil"
  "dAttributesArchive.BuildAttributesDelive"
  "ryOption\022\033\n\023custom_action_decay\030\027 \001(\010\022!\n"
  "\031custom_action_repeatCount\030\030 \001(\r\022\033\n\023cust"
  "om_action_scale\030\031 \001(\001\022f\n\035custom_action_j"
  "iggleIntensity\030\032 \001(\0162\?.KN.BuildAttribute"
  "sArchive.ActionBuildAttributesJiggleInte"
  "nsity\022\032\n\022custom_motion_blur\030\035 \001(\010\022 \n\030cus"
  "tom_include_endpoints\030\036 \001(\010\022\024\n\014custom_sh"
  "ine\030! \001(\010\022\033\n\023custom_scale_amount\030\" \001(\001\022\036"
  "\n\026custom_travel_distance\030# \001(\001\022\025\n\rcustom"
  "_cursor\030$ \001(\010\022\034\n\024custom_align_to_path\030% "
  "\001(\010\022\"\n\026database_animationType\030\001 \001(\tB\002\030\001\022"
  "\033\n\017database_effect\030\002 \001(\tB\002\030\001\022\036\n\022database"
  "_direction\030\003 \001(\rB\002\030\001\022\032\n\016database_delay\030\005"
  " \001(\001B\002\030\001\022\035\n\021database_duration\030\010 \001(\001B\002\030\001\022"
  "&\n\016database_color\030\020 \001(\0132\n.TSP.ColorB\002\030\001\022"
  "\034\n\020motionPathString\030\017 \001(\tB\002\030\001\"_\n\033BuildAt"
  "tributesAcceleration\022\t\n\005kNone\020\000\022\013\n\007kEase"
  "In\020\001\022\014\n\010kEaseOut\020\002\022\r\n\tkEaseBoth\020\003\022\013\n\007kCu"
  "stom\020\004\"I\n BuildAttributesRotationDirecti"
  "on\022\016\n\nkClockwise\020\037\022\025\n\021kCounterclockwise\020"
  " \"7\n\031BuildAttributesCurveStyle\022\r\n\tkStrai"
  "ght\020\000\022\013\n\007kCurved\020\001\"\244\001\n\033BuildAttributesTe"
  "xtDelivery\022\032\n\026kTextDeliveryUndefined\020\000\022\031"
  "\n\025kTextDeliveryByObject\020\001\022\027\n\023kTextDelive"
  "ryByWord\020\002\022\034\n\030kTextDeliveryByCharacter\020\003"
  "\022\027\n\023kTextDeliveryByLine\020\004\"\316\001\n\035BuildAttri"
  "butesDeliveryOption\022\034\n\030kDeliveryOptionUn"
  "defined\020\000\022\032\n\026kDeliveryOptionForward\020\001\022\033\n"
  "\027kDeliveryOptionBackward\020\002\022\035\n\031kDeliveryO"
  "ptionFromCenter\020\003\022\034\n\030kDeliveryOptionFrom"
  "Edges\020\004\022\031\n\025kDeliveryOptionRandom\020\005\"x\n$Ac"
  "tionBuildAttributesJiggleIntensity\022\031\n\025kJ"
  "iggleIntensitySmall\020\000\022\032\n\026kJiggleIntensit"
  "yMedium\020\001\022\031\n\025kJiggleIntensityLarge\020\002\"\237\001\n"
  "\014BuildArchive\022 \n\010drawable\030\001 \001(\0132\016.TSP.Re"
  "ference\022\020\n\010delivery\030\002 \002(\t\022\024\n\010duration\030\003 "
  "\001(\001B\002\030\001\022.\n\nattributes\030\004 \002(\0132\032.KN.BuildAt"
  "tributesArchive\022\025\n\rchunk_id_seed\030\005 \001(\005\"\211"
  "\002\n\022PlaceholderArchive\022%\n\005super\030\001 \002(\0132\026.T"
  "SWP.ShapeInfoArchive\022;\n\004kind\030\002 \001(\0162\033.KN."
  "PlaceholderArchive.Kind:\020kKindPlaceholde"
  "r\"\216\001\n\004Kind\022\024\n\020kKindPlaceholder\020\000\022\037\n\033kKin"
  "dSlideNumberPlaceholder\020\001\022\031\n\025kKindTitleP"
  "laceholder\020\002\022\030\n\024kKindBodyPlaceholder\020\003\022\032"
  "\n\026kKindObjectPlaceholder\020\004\"7\n\013NoteArchiv"
  "e\022(\n\020containedStorage\030\001 \002(\0132\016.TSP.Refere"
  "nce\"\234\001\n\036ClassicStylesheetRecordArchive\022L"
  "\n\027identifier_to_style_map\030\001 \003(\0132+.TSS.St"
  "ylesheetArchive.IdentifiedStyleEntry\022,\n\020"
  "deprecated_theme\030\002 \001(\0132\016.TSP.ReferenceB\002"
  "\030\001\"v\n\031ClassicThemeRecordArchive\022\014\n\004uuid\030"
  "\001 \001(\t\022(\n\020stylesheetRecord\030\002 \001(\0132\016.TSP.Re"
  "ference\022!\n\ttemplates\030\003 \003(\0132\016.TSP.Referen"
  "ce\"\277\021\n\014SlideArchive\022\035\n\005style\030\001 \002(\0132\016.TSP"
  ".Reference\022\036\n\006builds\030\002 \003(\0132\016.TSP.Referen"
  "ce\0225\n\022buildChunkArchives\030\003 \003(\0132\025.KN.Buil"
  "dChunkArchiveB\002\030\001\022#\n\013buildChunks\030+ \003(\0132\016"
  ".TSP.Reference\022)\n\ntransition\030\004 \002(\0132\025.KN."
  "TransitionArchive\022(\n\020titlePlaceholder\030\005 "
  "\001(\0132\016.TSP.Reference\022\'\n\017bodyPlaceholder\030\006"
  " \001(\0132\016.TSP.Reference\022)\n\021objectPlaceholde"
  "r\030\036 \001(\0132\016.TSP.Reference\022.\n\026slideNumberPl"
  "aceholder\030\024 \001(\0132\016.TSP.Reference\022\'\n\017owned"
  "_drawables\030\007 \003(\0132\016.TSP.Reference\022)\n\021draw"
  "ables_z_order\030* \003(\0132\016.TSP.Reference\022>\n\024s"
  "age_tag_to_info_map\030\034 \003(\0132 .KN.SlideArch"
  "ive.SageTagMapEntry\022E\n\026instructional_tex"
  "t_map\030- \001(\0132%.KN.SlideArchive.Instructio"
  "nalTextMap\022\014\n\004name\030\n \001(\t\0226\n\030titlePlaceho"
  "lderGeometry\030\013 \001(\0132\024.TSD.GeometryArchive"
  "\022\'\n\037titlePlaceholderShapeStyleIndex\030\014 \001("
  "\r\022&\n\036titlePlaceholderTextStyleIndex\030\r \001("
  "\r\022@\n\025titleLayoutProperties\030\030 \001(\0132!.TSWP."
  "ShapeStylePropertiesArchive\0225\n\027bodyPlace"
  "holderGeometry\030\016 \001(\0132\024.TSD.GeometryArchi"
  "ve\022&\n\036bodyPlaceholderShapeStyleIndex\030\017 \001"
  "(\r\022%\n\035bodyPlaceholderTextStyleIndex\030\020 \001("
  "\r\022\?\n\024bodyLayoutProperties\030\031 \001(\0132!.TSWP.S"
  "hapeStylePropertiesArchive\022<\n\036slideNumbe"
  "rPlaceholderGeometry\030\025 \001(\0132\024.TSD.Geometr"
  "yArchive\022-\n%slideNumberPlaceholderShapeS"
  "tyleIndex\030\026 \001(\r\022,\n$slideNumberPlaceholde"
  "rTextStyleIndex\030\027 \001(\r\022F\n\033slideNumberLayo"
  "utProperties\030\032 \001(\0132!.TSWP.ShapeStyleProp"
  "ertiesArchive\022/\n\027classicStylesheetRecord"
  "\030\035 \001(\0132\016.TSP.Reference\022+\n\023bodyParagraphS"
  "tyles\030\037 \003(\0132\016.TSP.Reference\022&\n\016bodyListS"
  "tyles\030# \003(\0132\016.TSP.Reference\022(\n thumbnail"
  "TextForTitlePlaceholder\030% \001(\t\022\'\n\037thumbna"
  "ilTextForBodyPlaceholder\030& \001(\t\0220\n!slide_"
  "objects_layer_with_template\030) \001(\010:\005false"
  "\022&\n\016template_slide\030\021 \001(\0132\016.TSP.Reference"
  "\022\'\n\014staticGuides\030\022 \003(\0132\021.TSD.GuideArchiv"
  "e\022/\n\027userDefinedGuideStorage\030$ \001(\0132\016.TSP"
  ".Reference\022\022\n\ninDocument\030\023 \002(\010\022\034\n\004note\030\033"
  " \001(\0132\016.TSP.Reference\022\?\n\'infos_using_obje"
  "ct_placeholder_geometry\030, \003(\0132\016.TSP.Refe"
  "rence\0224\n,deprecated_objectPlaceholderVis"
  "ibleForExport\030\" \001(\010\022>\n&info_using_object"
  "_placeholder_geometry\030\' \001(\0132\016.TSP.Refere"
  "nce\022R\nJinfo_using_object_placeholder_geo"
  "metry_matches_object_placeholder_geometr"
  "y\030( \001(\010\032<\n\017SageTagMapEntry\022\013\n\003tag\030\001 \002(\t\022"
  "\034\n\004info\030\002 \002(\0132\016.TSP.Reference\032\324\001\n\024Instru"
  "ctionalTextMap\022e\n\034instructional_text_for"
  "_infos\030\001 \003(\0132\?.KN.SlideArchive.Instructi"
  "onalTextMap.InstructionalTextMapEntry\032U\n"
  "\031InstructionalTextMapEntry\022\034\n\004info\030\001 \001(\013"
  "2\016.TSP.Reference\022\032\n\022instructional_text\030\002"
  " \002(\t\"\340\010\n\020SlideNodeArchive\022 \n\010children\030\001 "
  "\003(\0132\016.TSP.Reference\022\035\n\005slide\030\002 \001(\0132\016.TSP"
  ".Reference\022\020\n\005depth\030\025 \001(\r:\0011\022&\n\nthumbnai"
  "ls\030\020 \003(\0132\022.TSP.DataReference\022!\n\016thumbnai"
  "lSizes\030\n \003(\0132\t.TSP.Size\022\032\n\022thumbnailsAre"
  "Dirty\030\016 \001(\010\0228\n0digests_for_datas_needing"
  "_download_for_thumbnail\030\031 \003(\t\022\020\n\010isHidde"
  "n\030\004 \002(\010\022\027\n\013isCollapsed\030\005 \001(\010B\002\030\001\022$\n\030isCo"
  "llapsedInOutlineView\030\021 \001(\010B\002\030\001\022 \n\024hasBod"
  "yInOutlineView\030\023 \001(\010B\002\030\001\022\025\n\thasBuilds\030\006 "
  "\002(\010B\002\030\001\022\025\n\rhasTransition\030\007 \002(\010\022\017\n\007hasNot"
  "e\030\010 \001(\010\022#\n\024isSlideNumberVisible\030\022 \001(\010:\005f"
  "alse\022\034\n\020uniqueIdentifier\030\013 \001(\tB\002\030\001\022\037\n\027co"
  "pyFromSlideIdentifier\030\014 \001(\t\022\'\n\033slideSpec"
  "ificHyperlinkCount\030\r \001(\rB\002\030\001\022\031\n\021build_ev"
  "ent_count\030\017 \001(\r\022\'\n\037build_event_count_cac"
  "he_version\030\032 \001(\r\022+\n\037build_event_count_is"
  "_up_to_date\030\026 \001(\010B\002\030\001\022\033\n\023has_explicit_bu"
  "ilds\030\024 \001(\010\022)\n!has_explicit_builds_cache_"
  "version\030\033 \001(\r\022-\n!has_explicit_builds_is_"
  "up_to_date\030\027 \001(\010B\002\030\001\022V\n\031slideSpecificHyp"
  "erlinkMap\030\030 \003(\01323.KN.SlideNodeArchive.Sl"
  "ideSpecificHyperlinkMapEntry\022\034\n\024has_back"
  "ground_alpha\030\034 \001(\010\022.\n\022database_thumbnail"
  "\030\003 \001(\0132\016.TSP.ReferenceB\002\030\001\022/\n\023database_t"
  "humbnails\030\t \003(\0132\016.TSP.ReferenceB\002\030\001\032Z\n\036S"
  "lideSpecificHyperlinkMapEntry\022\031\n\021slideNo"
  "deIDString\030\001 \002(\t\022\035\n\025infoOrStorageIDStrin"
  "g\030\002 \003(\t\"\364\004\n\026DesktopUILayoutArchive\022\027\n\017si"
  "debar_visible\030\001 \001(\010\022E\n\021sidebar_view_mode"
  "\030\002 \001(\0162*.KN.DesktopUILayoutArchive.Sideb"
  "arViewMode\022\025\n\rnotes_visible\030\003 \001(\010\022\033\n\023lig"
  "ht_table_visible\030\005 \001(\010\022$\n\026inspector_pane"
  "_visible\030\006 \001(\010:\004true\022p\n\030inspector_pane_v"
  "iew_mode\030\007 \001(\01620.KN.DesktopUILayoutArchi"
  "ve.InspectorPaneViewMode:\034kInspectorPane"
  "ViewModeFormat\022\037\n\027showing_template_slide"
  "s\030\010 \001(\010\022!\n\031inspector_pane_autohidden\030\t \001"
  "(\010\022\034\n\024element_list_visible\030\n \001(\010\"M\n\017Side"
  "barViewMode\022\035\n\031kSidebarViewModeNavigator"
  "\020\000\022\033\n\027kSidebarViewModeOutline\020\001\"}\n\025Inspe"
  "ctorPaneViewMode\022 \n\034kInspectorPaneViewMo"
  "deFormat\020\000\022!\n\035kInspectorPaneViewModeAnim"
  "ate\020\001\022\037\n\033kInspectorPaneViewModeSetup\020\002\"\273"
  "\r\n\016UIStateArchive\022+\n\017slideNodeToEdit\030\001 \001"
  "(\0132\016.TSP.ReferenceB\002\030\001\022\?\n\'deprecated_tem"
  "plate_slide_node_to_apply\030\002 \001(\0132\016.TSP.Re"
  "ference\0220\n\035deprecated_slideThumbnailSize"
  "\030\003 \001(\0132\t.TSP.Size\022\027\n\017canvasViewScale\030\004 \001"
  "(\002\022 \n\014canvasOffset\030\005 \001(\0132\n.TSP.Point\022.\n\022"
  "selectedSlideNodes\030\006 \003(\0132\016.TSP.Reference"
  "B\002\030\001\022!\n\025iPhoneCanvasViewScale\030\007 \001(\002B\002\030\001\022"
  "*\n\022iPhoneCanvasOffset\030\010 \001(\0132\n.TSP.PointB"
  "\002\030\001\022$\n\030iPhone568CanvasViewScale\030\t \001(\002B\002\030"
  "\001\022-\n\025iPhone568CanvasOffset\030\n \001(\0132\n.TSP.P"
  "ointB\002\030\001\022)\n\021desktop_ui_layout\030\013 \001(\0132\016.TS"
  "P.Reference\022.\n&desktop_slide_view_conten"
  "t_fits_window\030\014 \001(\010\022!\n\031desktop_canvas_vi"
  "ew_scale\030\r \001(\002\022)\n\025desktop_canvas_offset\030"
  "\025 \001(\0132\n.TSP.Point\022\036\n\026light_table_zoom_sc"
  "ale\030\016 \001(\002\022*\n\016chart_ui_state\030\017 \003(\0132\022.TSCH"
  ".ChartUIState\022\031\n\021show_slide_guides\030\020 \001(\010"
  "\022\034\n\024show_template_guides\030\021 \001(\010\022\026\n\016shows_"
  "comments\030\022 \001(\010\022(\n comments_printing_togg"
  "le_enabled\030\' \001(\010\022-\n\025collapsed_slide_node"
  "s\030\023 \003(\0132\016.TSP.Reference\0225\n\035outline_colla"
  "psed_slide_nodes\030\034 \003(\0132\016.TSP.Reference\0224"
  "\n\034outline_has_body_slide_nodes\030\036 \003(\0132\016.T"
  "SP.Reference\022\023\n\013shows_ruler\030\024 \001(\010\022$\n\034des"
  "ktop_navigator_view_width\030\026 \001(\002\022\"\n\032deskt"
  "op_outline_view_width\030\027 \001(\002\022*\n\"desktop_o"
  "utline_view_default_fixed\030\037 \001(\010\022,\n\031deskt"
  "op_main_content_size\030\030 \001(\0132\t.TSP.Size\022+\n"
  "#desktop_presenter_notes_view_height\030\031 \001"
  "(\002\022.\n\032desktop_main_window_origin\030\032 \001(\0132\n"
  ".TSP.Point\022(\n light_table_hides_skipped_"
  "slides\030\033 \001(\010\0221\n\016selection_path\030\035 \001(\0132\031.T"
  "SK.SelectionPathArchive\022\'\n\037desktop_eleme"
  "nt_list_view_width\030  \001(\002\0224\n\034element_list"
  "_expanded_groups\030! \003(\0132\016.TSP.Reference\022 "
  "\n\030shows_mobile_light_table\030\" \001(\010\022%\n\035mobi"
  "le_light_table_zoom_scale\030# \001(\002\022/\n\'mobil"
  "e_light_table_hides_skipped_slides\030$ \001(\010"
  "\0226\n\036freehand_drawing_toolkit_state\030% \001(\013"
  "2\016.TSP.Reference\0222\n\032selection_path_trans"
  "former\030& \001(\0132\016.TSP.Reference\022\034\n\024shows_mo"
  "bile_outline\030( \001(\010\022\030\n\020editing_disabled\030)"
  " \001(\010\"c\n!IOSRestorableViewStateRootArchiv"
  "e\022>\n\024saved_playback_state\030\001 \001(\0132 .KN.IOS"
  "SavedPlaybackStateArchive\"\276\003\n\034IOSSavedPl"
  "aybackStateArchive\022L\n\021presentation_type\030"
  "\001 \001(\01621.KN.IOSSavedPlaybackStateArchive."
  "PresentationType\022\030\n\020slide_node_index\030\002 \001"
  "(\r\022\023\n\013event_index\030\003 \001(\r\022\030\n\020breadcrumb_tr"
  "ail\030\004 \003(\t\022\034\n\024had_external_display\030\005 \001(\010\022"
  "\037\n\027is_elapsed_time_started\030\006 \001(\010\022\037\n\027elap"
  "sed_time_start_time\030\007 \001(\001\022\'\n\037recording_p"
  "layback_current_time\030\010 \001(\001\022#\n\033should_sho"
  "w_slide_navigator\030\t \001(\010\"Y\n\020PresentationT"
  "ype\022\n\n\006Manual\020\001\022\n\n\006Record\020\002\022\021\n\rPlayRecor"
  "ding\020\003\022\014\n\010Rehearse\020\004\022\014\n\010Showcast\020\005\"\234\002\n\026C"
  "anvasSelectionArchive\022\035\n\005infos\030\001 \003(\0132\016.T"
  "SP.Reference\022-\n\025non_interactive_infos\030\005 "
  "\003(\0132\016.TSP.Reference\0226\n\036infos_for_action_"
  "ghost_indexes\030\006 \003(\0132\016.TSP.Reference\022+\n\024a"
  "ction_ghost_indexes\030\003 \003(\0132\r.TSP.IndexSet"
  "\022$\n\014build_chunks\030\004 \003(\0132\016.TSP.Reference\022)"
  "\n\035database_action_ghost_indexes\030\002 \003(\rB\002\030"
  "\001\"\035\n\033ActionGhostSelectionArchive\"T\n\035Them"
  "eCustomTimingCurveArchive\022\014\n\004name\030\001 \002(\t\022"
  "%\n\005curve\030\002 \002(\0132\026.TSD.PathSourceArchive\"\201"
  "\003\n\014ThemeArchive\022 \n\005super\030\001 \002(\0132\021.TSS.The"
  "meArchive\022!\n\ttemplates\030\002 \003(\0132\016.TSP.Refer"
  "ence\022\014\n\004uuid\030\003 \001(\t\022+\n\023classicThemeRecord"
  "s\030\004 \003(\0132\016.TSP.Reference\0223\n\033default_templ"
  "ate_slide_node\030\005 \001(\0132\016.TSP.Reference\022=\n%"
  "default_template_slide_node_reference\030\006 "
  "\001(\0132\016.TSP.Reference\0225\n-default_template_"
  "slide_node_is_our_best_guess\030\007 \001(\010\022F\n\033cu"
  "stom_effect_timing_curves\030\010 \003(\0132!.KN.The"
  "meCustomTimingCurveArchive\"]\n\020SlideTreeA"
  "rchive\022)\n\rrootSlideNode\030\001 \001(\0132\016.TSP.Refe"
  "renceB\002\030\001\022\036\n\006slides\030\002 \003(\0132\016.TSP.Referenc"
  "e\"\227\005\n\013ShowArchive\022\037\n\007uiState\030\001 \001(\0132\016.TSP"
  ".Reference\022\035\n\005theme\030\002 \002(\0132\016.TSP.Referenc"
  "e\022\'\n\tslideTree\030\003 \002(\0132\024.KN.SlideTreeArchi"
  "ve\022\027\n\004size\030\004 \002(\0132\t.TSP.Size\022\"\n\nstyleshee"
  "t\030\005 \002(\0132\016.TSP.Reference\022\033\n\023slideNumbersV"
  "isible\030\006 \001(\010\022!\n\trecording\030\007 \001(\0132\016.TSP.Re"
  "ference\022\031\n\021loop_presentation\030\010 \001(\010\022;\n\004mo"
  "de\030\t \001(\0162\032.KN.ShowArchive.KNShowMode:\021kK"
  "NShowModeNormal\022$\n\031autoplay_transition_d"
  "elay\030\n \001(\001:\0015\022\037\n\024autoplay_build_delay\030\013 "
  "\001(\001:\0012\022\031\n\021idle_timer_active\030\017 \001(\010\022\035\n\020idl"
  "e_timer_delay\030\020 \001(\001:\003900\022\"\n\nsoundtrack\030\021"
  " \001(\0132\016.TSP.Reference\022%\n\035automatically_pl"
  "ays_upon_open\030\022 \001(\010\022!\n\tslideList\030\023 \001(\0132\016"
  ".TSP.Reference\"[\n\nKNShowMode\022\025\n\021kKNShowM"
  "odeNormal\020\000\022\027\n\023kKNShowModeAutoPlay\020\001\022\035\n\031"
  "kKNShowModeHyperlinksOnly\020\002\"\207\001\n\017Document"
  "Archive\022#\n\005super\030\003 \002(\0132\024.TSA.DocumentArc"
  "hive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\0221\n\031ta"
  "bles_custom_format_list\030\004 \001(\0132\016.TSP.Refe"
  "rence\"\241\002\n\033SlideStylePropertiesArchive\022\036\n"
  "\004fill\030\001 \001(\0132\020.TSD.FillArchive\0223\n\ntransit"
  "ion\030\002 \001(\0132\037.KN.TransitionAttributesArchi"
  "ve\022\027\n\017transition_null\030\003 \001(\010\022\"\n\032titlePlac"
  "eholderVisibility\030\004 \001(\010\022!\n\031bodyPlacehold"
  "erVisibility\030\005 \001(\010\022#\n\033objectPlaceholderV"
  "isibility\030\007 \001(\010\022(\n slideNumberPlaceholde"
  "rVisibility\030\006 \001(\010\"\213\001\n\021SlideStyleArchive\022"
  " \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016ove"
  "rride_count\030\n \001(\r:\0010\0229\n\020slide_properties"
  "\030\013 \001(\0132\037.KN.SlideStylePropertiesArchive\""
  "\201\006\n\036PasteboardNativeStorageArchive\022!\n\tdr"
  "awables\030\001 \003(\0132\016.TSP.Reference\022\036\n\006builds\030"
  "\002 \003(\0132\016.TSP.Reference\022#\n\013buildChunks\030\003 \003"
  "(\0132\016.TSP.Reference\022\"\n\nslideNodes\030\004 \003(\0132\016"
  ".TSP.Reference\022-\n\025displayed_slide_nodes\030"
  "\014 \003(\0132\016.TSP.Reference\022,\n\024template_slide_"
  "nodes\030\t \003(\0132\016.TSP.Reference\022+\n\023collapsed"
  "SlideNodes\030\n \003(\0132\016.TSP.Reference\0222\n\032outl"
  "ineCollapsedSlideNodes\030\013 \003(\0132\016.TSP.Refer"
  "ence\0220\n\030outlineHasBodySlideNodes\030\r \003(\0132\016"
  ".TSP.Reference\022#\n\020originalShowSize\030\005 \001(\013"
  "2\t.TSP.Size\022\037\n\013titleRanges\030\006 \003(\0132\n.TSP.R"
  "ange\0220\n\022geometries_in_root\030\007 \003(\0132\024.TSD.G"
  "eometryArchive\022$\n\034slide_node_unique_iden"
  "tifier\030\010 \001(\t\022F\n\033custom_effect_timing_cur"
  "ves\030\016 \003(\0132!.KN.ThemeCustomTimingCurveArc"
  "hive\022!\n\031original_slide_node_UUIDs\030\017 \003(\t\022"
  "/\n\'slide_nodes_have_datas_needing_downlo"
  "ad\030\020 \001(\010\022)\n\ntransition\030\021 \001(\0132\025.KN.Transi"
  "tionArchive\"\341\001\n%PrototypeForUndoTemplate"
  "ChangeArchive\022#\n\013slide_style\030\001 \001(\0132\016.TSP"
  ".Reference\022$\n\021template_slide_id\030\002 \002(\0132\t."
  "TSP.UUID\022(\n\025drawable_info_id_list\030\003 \003(\0132"
  "\t.TSP.UUID\022$\n\014placeholders\030\004 \003(\0132\016.TSP.R"
  "eference\022\035\n\025placeholder_tags_list\030\005 \003(\t\""
  "\325\003\n\020RecordingArchive\022$\n\014event_tracks\030\001 \003"
  "(\0132\016.TSP.Reference\022#\n\013movie_track\030\002 \001(\0132"
  "\016.TSP.Reference\022\020\n\010duration\030\003 \001(\001\022k\n\017syn"
  "c_state_enum\030\004 \001(\0162+.KN.RecordingArchive"
  ".RecordingSyncStateEnum:!kRecordingSyncS"
  "tateInSyncWithShowB\002\030\001\022$\n\021modification_d"
  "ate\030\005 \001(\0132\t.TSP.Date\022*\n\nsync_state\030\006 \001(\013"
  "2\026.KN.RecordingSyncState\022:\n\022correction_h"
  "istory\030\007 \001(\0132\036.KN.RecordingCorrectionHis"
  "tory\"i\n\026RecordingSyncStateEnum\022%\n!kRecor"
  "dingSyncStateInSyncWithShow\020\000\022(\n$kRecord"
  "ingSyncStateOutOfSyncWithShow\020\001\"f\n\022Recor"
  "dingSyncState\022$\n\021out_of_sync_token\030\001 \001(\013"
  "2\t.TSP.UUID\022*\n\033can_clear_out_of_sync_tok"
  "en\030\002 \001(\010:\005false\"O\n\032RecordingCorrectionHi"
  "story\0221\n)did_add_missing_events_for_rada"
  "r_49654305\030\001 \001(\010\"U\n\032RecordingEventTrackA"
  "rchive\022\014\n\004type\030\001 \001(\t\022)\n\006events\030\002 \003(\0132\031.K"
  "N.RecordingEventArchive\"\261\002\n\025RecordingEve"
  "ntArchive\022\026\n\nstart_time\030\001 \001(\001:\002-1\022F\n\030nav"
  "igation_event_archive\030\350\007 \001(\0132#.KN.Record"
  "ingNavigationEventArchive\022<\n\023laser_event"
  "_archive\030\351\007 \001(\0132\036.KN.RecordingLaserEvent"
  "Archive\022<\n\023pause_event_archive\030\352\007 \001(\0132\036."
  "KN.RecordingPauseEventArchive\022<\n\023movie_e"
  "vent_archive\030\353\007 \001(\0132\036.KN.RecordingMovieE"
  "ventArchive\"\330\003\n\037RecordingNavigationEvent"
  "Archive\022\'\n\024target_slide_node_id\030\004 \001(\0132\t."
  "TSP.UUID\0223\n\033target_slide_node_reference\030"
  "\001 \001(\0132\016.TSP.Reference\022\032\n\022target_event_in"
  "dex\030\002 \001(\r\022\213\001\n\017animation_phase\030\003 \001(\0162J.KN"
  ".RecordingNavigationEventArchive.Recordi"
  "ngNavigationEventAnimationPhase:&kRecord"
  "ingNavigationEventAnimationNone\"\254\001\n&Reco"
  "rdingNavigationEventAnimationPhase\022*\n&kR"
  "ecordingNavigationEventAnimationNone\020\000\022+"
  "\n\'kRecordingNavigationEventAnimationStar"
  "t\020\001\022)\n%kRecordingNavigationEventAnimatio"
  "nEnd\020\002\"j\n\032RecordingLaserEventArchive\022)\n\021"
  "unscaled_location\030\001 \001(\0132\n.TSP.PointB\002\030\001\022"
  "!\n\runit_location\030\002 \001(\0132\n.TSP.Point\"\315\002\n\032R"
  "ecordingPauseEventArchive\022p\n\020pause_event"
  "_type\030\001 \001(\01626.KN.RecordingPauseEventArch"
  "ive.RecordingPauseEventType:\036kRecordingP"
  "auseEventTypeResume\"\274\001\n\027RecordingPauseEv"
  "entType\022\"\n\036kRecordingPauseEventTypeResum"
  "e\020\000\022!\n\035kRecordingPauseEventTypePause\020\001\022,"
  "\n(kRecordingPauseEventTypeConcealWithBla"
  "ck\020\002\022,\n(kRecordingPauseEventTypeConcealW"
  "ithWhite\020\003\"\325\004\n\032RecordingMovieEventArchiv"
  "e\022,\n\024movie_info_reference\030\001 \001(\0132\016.TSP.Re"
  "ference\022j\n\020movie_event_type\030\002 \001(\01626.KN.R"
  "ecordingMovieEventArchive.RecordingMovie"
  "EventType:\030kRecordingMovieEventSeek\022\031\n\021m"
  "ovie_event_value\030\003 \001(\001\022F\n.movie_info_tha"
  "t_played_across_slides_reference\030\004 \001(\0132\016"
  ".TSP.Reference\022&\n\023movie_slide_node_id\030\005 "
  "\001(\0132\t.TSP.UUID\"\221\002\n\027RecordingMovieEventTy"
  "pe\022\034\n\030kRecordingMovieEventNone\020\000\022\034\n\030kRec"
  "ordingMovieEventSeek\020\001\022\037\n\033kRecordingMovi"
  "eEventSetRate\020\002\022%\n!kRecordingMovieEventS"
  "tartPlayback\020\003\022$\n kRecordingMovieEventSt"
  "opPlayback\020\004\022&\n\"kRecordingMovieEventBegi"
  "nScrubbing\020\005\022$\n kRecordingMovieEventEndS"
  "crubbing\020\006\"\200\001\n\032RecordingMovieTrackArchiv"
  "e\022/\n\016movie_segments\030\001 \003(\0132\027.KN.MovieSegm"
  "entArchive\0221\n)is_movie_segment_data_trim"
  "med_to_duration\030\002 \001(\010\"\202\001\n\023MovieSegmentAr"
  "chive\022&\n\nmovie_data\030\003 \001(\0132\022.TSP.DataRefe"
  "rence\022\026\n\nstart_time\030\002 \001(\001:\002-1\022+\n\023databas"
  "e_movie_data\030\001 \001(\0132\016.TSP.Reference\"\371\001\n\nS"
  "oundtrack\022\016\n\006volume\030\001 \001(\001\022F\n\004mode\030\002 \001(\0162"
  "\035.KN.Soundtrack.SoundtrackMode:\031kKNSound"
  "trackModePlayOnce\022\'\n\013movie_media\030\003 \003(\0132\022"
  ".TSP.DataReference\"j\n\016SoundtrackMode\022\035\n\031"
  "kKNSoundtrackModePlayOnce\020\000\022\031\n\025kKNSoundt"
  "rackModeLoop\020\001\022\036\n\032kKNSoundtrackModeDoNot"
  "Play\020\002\"M\n\034SlideNumberAttachmentArchive\022-"
  "\n\005super\030\001 \002(\0132\036.TSWP.TextualAttachmentAr"
  "chive\"\370\002\n\037SlideCollectionSelectionArchiv"
  "e\022#\n\013slide_nodes\030\001 \003(\0132\016.TSP.Reference\022*"
  "\n\022slide_node_to_edit\030\002 \001(\0132\016.TSP.Referen"
  "ce\022h\n*selected_paragraph_indexes_for_sli"
  "de_nodes\030\003 \003(\01324.KN.SlideCollectionSelec"
  "tionArchive.OutlineSelection\022/\n\033range_in"
  "_selected_paragraph\030\004 \001(\0132\n.TSP.Range\032i\n"
  "\020OutlineSelection\022\"\n\nslide_node\030\001 \002(\0132\016."
  "TSP.Reference\0221\n\032selected_paragraph_inde"
  "xes\030\002 \002(\0132\r.TSP.IndexSet\"D\n\036PresenterNot"
  "esSelectionArchive\022\"\n\nslide_node\030\001 \001(\0132\016"
  ".TSP.Reference\"\221\003\n\024MixedIdOperationArgs\022"
  ">\n\017args_list_types\030\001 \003(\0162%.KN.MixedIdOpe"
  "rationArgs.ArgsListKind\022.\n\radd_args_list"
  "\030\002 \003(\0132\027.TSK.AddIdOperationArgs\022A\n\032show_"
  "placeholder_args_list\030\003 \003(\0132\035.TSK.IdPlac"
  "ementOperationArgs\0224\n\020remove_args_list\030\004"
  " \003(\0132\032.TSK.RemoveIdOperationArgs\022A\n\032hide"
  "_placeholder_args_list\030\005 \003(\0132\035.TSK.IdPla"
  "cementOperationArgs\"M\n\014ArgsListKind\022\007\n\003A"
  "dd\020\000\022\n\n\006Remove\020\001\022\023\n\017ShowPlaceholder\020\002\022\023\n"
  "\017HidePlaceholder\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_KNArchives_2eproto_deps[7] = {
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_KNArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KNArchives_2eproto = {
  false, false, 19418, descriptor_table_protodef_KNArchives_2eproto, "KNArchives.proto", 
  &descriptor_table_KNArchives_2eproto_once, descriptor_table_KNArchives_2eproto_deps, 7, 51,
  schemas, file_default_instances, TableStruct_KNArchives_2eproto::offsets,
  file_level_metadata_KNArchives_2eproto, file_level_enum_descriptors_KNArchives_2eproto, file_level_service_descriptors_KNArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_KNArchives_2eproto_getter() {
  return &descriptor_table_KNArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_KNArchives_2eproto(&descriptor_table_KNArchives_2eproto);
namespace KN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[0];
}
bool TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeLinear;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseIn;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseOut;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseInEaseOut;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeCustom;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_MIN;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_MAX;
constexpr int TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[1];
}
bool TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByObject;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByWord;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByCharacter;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByLine;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_MIN;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_MAX;
constexpr int TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributeValueArchive_BuildAttributeValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[2];
}
bool BuildAttributeValueArchive_BuildAttributeValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_integer;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_double;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_bool;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_string;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_path_source;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_color;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::BuildAttributeValueType_MIN;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::BuildAttributeValueType_MAX;
constexpr int BuildAttributeValueArchive::BuildAttributeValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesAcceleration_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[3];
}
bool BuildAttributesArchive_BuildAttributesAcceleration_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kNone;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseIn;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseOut;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseBoth;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kCustom;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::BuildAttributesAcceleration_MIN;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::BuildAttributesAcceleration_MAX;
constexpr int BuildAttributesArchive::BuildAttributesAcceleration_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesRotationDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[4];
}
bool BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(int value) {
  switch (value) {
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::kClockwise;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::kCounterclockwise;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::BuildAttributesRotationDirection_MIN;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::BuildAttributesRotationDirection_MAX;
constexpr int BuildAttributesArchive::BuildAttributesRotationDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesCurveStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[5];
}
bool BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::kStraight;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::kCurved;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::BuildAttributesCurveStyle_MIN;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::BuildAttributesCurveStyle_MAX;
constexpr int BuildAttributesArchive::BuildAttributesCurveStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesTextDelivery_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[6];
}
bool BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryUndefined;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByObject;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByWord;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByCharacter;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByLine;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::BuildAttributesTextDelivery_MIN;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::BuildAttributesTextDelivery_MAX;
constexpr int BuildAttributesArchive::BuildAttributesTextDelivery_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[7];
}
bool BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionUndefined;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionForward;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionBackward;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionFromCenter;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionFromEdges;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionRandom;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::BuildAttributesDeliveryOption_MIN;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::BuildAttributesDeliveryOption_MAX;
constexpr int BuildAttributesArchive::BuildAttributesDeliveryOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[8];
}
bool BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensitySmall;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensityMedium;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensityLarge;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_MIN;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_MAX;
constexpr int BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceholderArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[9];
}
bool PlaceholderArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindSlideNumberPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindTitlePlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindBodyPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindObjectPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::Kind_MIN;
constexpr PlaceholderArchive_Kind PlaceholderArchive::Kind_MAX;
constexpr int PlaceholderArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_SidebarViewMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[10];
}
bool DesktopUILayoutArchive_SidebarViewMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::kSidebarViewModeNavigator;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::kSidebarViewModeOutline;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::SidebarViewMode_MIN;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::SidebarViewMode_MAX;
constexpr int DesktopUILayoutArchive::SidebarViewMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_InspectorPaneViewMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[11];
}
bool DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeFormat;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeAnimate;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeSetup;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::InspectorPaneViewMode_MIN;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::InspectorPaneViewMode_MAX;
constexpr int DesktopUILayoutArchive::InspectorPaneViewMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOSSavedPlaybackStateArchive_PresentationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[12];
}
bool IOSSavedPlaybackStateArchive_PresentationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::Manual;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::Record;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::PlayRecording;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::Rehearse;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::Showcast;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::PresentationType_MIN;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::PresentationType_MAX;
constexpr int IOSSavedPlaybackStateArchive::PresentationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShowArchive_KNShowMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[13];
}
bool ShowArchive_KNShowMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShowArchive_KNShowMode ShowArchive::kKNShowModeNormal;
constexpr ShowArchive_KNShowMode ShowArchive::kKNShowModeAutoPlay;
constexpr ShowArchive_KNShowMode ShowArchive::kKNShowModeHyperlinksOnly;
constexpr ShowArchive_KNShowMode ShowArchive::KNShowMode_MIN;
constexpr ShowArchive_KNShowMode ShowArchive::KNShowMode_MAX;
constexpr int ShowArchive::KNShowMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingArchive_RecordingSyncStateEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[14];
}
bool RecordingArchive_RecordingSyncStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive::kRecordingSyncStateInSyncWithShow;
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive::kRecordingSyncStateOutOfSyncWithShow;
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive::RecordingSyncStateEnum_MIN;
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive::RecordingSyncStateEnum_MAX;
constexpr int RecordingArchive::RecordingSyncStateEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[15];
}
bool RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationNone;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationStart;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationEnd;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_MIN;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_MAX;
constexpr int RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingPauseEventArchive_RecordingPauseEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[16];
}
bool RecordingPauseEventArchive_RecordingPauseEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeResume;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypePause;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeConcealWithBlack;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeConcealWithWhite;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::RecordingPauseEventType_MIN;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::RecordingPauseEventType_MAX;
constexpr int RecordingPauseEventArchive::RecordingPauseEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingMovieEventArchive_RecordingMovieEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[17];
}
bool RecordingMovieEventArchive_RecordingMovieEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventNone;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventSeek;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventSetRate;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventStartPlayback;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventStopPlayback;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventBeginScrubbing;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventEndScrubbing;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::RecordingMovieEventType_MIN;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::RecordingMovieEventType_MAX;
constexpr int RecordingMovieEventArchive::RecordingMovieEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Soundtrack_SoundtrackMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[18];
}
bool Soundtrack_SoundtrackMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModePlayOnce;
constexpr Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModeLoop;
constexpr Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModeDoNotPlay;
constexpr Soundtrack_SoundtrackMode Soundtrack::SoundtrackMode_MIN;
constexpr Soundtrack_SoundtrackMode Soundtrack::SoundtrackMode_MAX;
constexpr int Soundtrack::SoundtrackMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MixedIdOperationArgs_ArgsListKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[19];
}
bool MixedIdOperationArgs_ArgsListKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::Add;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::Remove;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::ShowPlaceholder;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::HidePlaceholder;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::ArgsListKind_MIN;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::ArgsListKind_MAX;
constexpr int MixedIdOperationArgs::ArgsListKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class AnimationAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationAttributesArchive>()._has_bits_);
  static void set_has_animation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_automatic(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Color& color(const AnimationAttributesArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::PathSourceArchive& custom_effect_timing_curve_1(const AnimationAttributesArchive* msg);
  static void set_has_custom_effect_timing_curve_1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::PathSourceArchive& custom_effect_timing_curve_2(const AnimationAttributesArchive* msg);
  static void set_has_custom_effect_timing_curve_2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::PathSourceArchive& custom_effect_timing_curve_3(const AnimationAttributesArchive* msg);
  static void set_has_custom_effect_timing_curve_3(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_random_number_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_custom_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_custom_effect_timing_curve_theme_name_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_effect_timing_curve_theme_name_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_effect_timing_curve_theme_name_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_writing_direction_is_rtl(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::TSP::Color&
AnimationAttributesArchive::_Internal::color(const AnimationAttributesArchive* msg) {
  return *msg->color_;
}
const ::TSD::PathSourceArchive&
AnimationAttributesArchive::_Internal::custom_effect_timing_curve_1(const AnimationAttributesArchive* msg) {
  return *msg->custom_effect_timing_curve_1_;
}
const ::TSD::PathSourceArchive&
AnimationAttributesArchive::_Internal::custom_effect_timing_curve_2(const AnimationAttributesArchive* msg) {
  return *msg->custom_effect_timing_curve_2_;
}
const ::TSD::PathSourceArchive&
AnimationAttributesArchive::_Internal::custom_effect_timing_curve_3(const AnimationAttributesArchive* msg) {
  return *msg->custom_effect_timing_curve_3_;
}
void AnimationAttributesArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void AnimationAttributesArchive::clear_custom_effect_timing_curve_1() {
  if (custom_effect_timing_curve_1_ != nullptr) custom_effect_timing_curve_1_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void AnimationAttributesArchive::clear_custom_effect_timing_curve_2() {
  if (custom_effect_timing_curve_2_ != nullptr) custom_effect_timing_curve_2_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void AnimationAttributesArchive::clear_custom_effect_timing_curve_3() {
  if (custom_effect_timing_curve_3_ != nullptr) custom_effect_timing_curve_3_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
AnimationAttributesArchive::AnimationAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.AnimationAttributesArchive)
}
AnimationAttributesArchive::AnimationAttributesArchive(const AnimationAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  animation_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_animation_type()) {
    animation_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_animation_type(), 
      GetArenaForAllocation());
  }
  effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_effect()) {
    effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_effect(), 
      GetArenaForAllocation());
  }
  custom_effect_timing_curve_theme_name_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_effect_timing_curve_theme_name_1()) {
    custom_effect_timing_curve_theme_name_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_effect_timing_curve_theme_name_1(), 
      GetArenaForAllocation());
  }
  custom_effect_timing_curve_theme_name_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_effect_timing_curve_theme_name_2()) {
    custom_effect_timing_curve_theme_name_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_effect_timing_curve_theme_name_2(), 
      GetArenaForAllocation());
  }
  custom_effect_timing_curve_theme_name_3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_effect_timing_curve_theme_name_3()) {
    custom_effect_timing_curve_theme_name_3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_effect_timing_curve_theme_name_3(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_custom_effect_timing_curve_1()) {
    custom_effect_timing_curve_1_ = new ::TSD::PathSourceArchive(*from.custom_effect_timing_curve_1_);
  } else {
    custom_effect_timing_curve_1_ = nullptr;
  }
  if (from._internal_has_custom_effect_timing_curve_2()) {
    custom_effect_timing_curve_2_ = new ::TSD::PathSourceArchive(*from.custom_effect_timing_curve_2_);
  } else {
    custom_effect_timing_curve_2_ = nullptr;
  }
  if (from._internal_has_custom_effect_timing_curve_3()) {
    custom_effect_timing_curve_3_ = new ::TSD::PathSourceArchive(*from.custom_effect_timing_curve_3_);
  } else {
    custom_effect_timing_curve_3_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&writing_direction_is_rtl_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(writing_direction_is_rtl_));
  // @@protoc_insertion_point(copy_constructor:KN.AnimationAttributesArchive)
}

inline void AnimationAttributesArchive::SharedCtor() {
animation_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_effect_timing_curve_theme_name_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_effect_timing_curve_theme_name_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_effect_timing_curve_theme_name_3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&writing_direction_is_rtl_) -
    reinterpret_cast<char*>(&color_)) + sizeof(writing_direction_is_rtl_));
}

AnimationAttributesArchive::~AnimationAttributesArchive() {
  // @@protoc_insertion_point(destructor:KN.AnimationAttributesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnimationAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  animation_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_effect_timing_curve_theme_name_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_effect_timing_curve_theme_name_2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_effect_timing_curve_theme_name_3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete custom_effect_timing_curve_1_;
  if (this != internal_default_instance()) delete custom_effect_timing_curve_2_;
  if (this != internal_default_instance()) delete custom_effect_timing_curve_3_;
}

void AnimationAttributesArchive::ArenaDtor(void* object) {
  AnimationAttributesArchive* _this = reinterpret_cast< AnimationAttributesArchive* >(object);
  (void)_this;
}
void AnimationAttributesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimationAttributesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnimationAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.AnimationAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      animation_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_effect_timing_curve_theme_name_1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      custom_effect_timing_curve_theme_name_2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      custom_effect_timing_curve_theme_name_3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(custom_effect_timing_curve_1_ != nullptr);
      custom_effect_timing_curve_1_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(custom_effect_timing_curve_2_ != nullptr);
      custom_effect_timing_curve_2_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(custom_effect_timing_curve_3_ != nullptr);
    custom_effect_timing_curve_3_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&writing_direction_is_rtl_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(writing_direction_is_rtl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimationAttributesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string animation_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_animation_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.AnimationAttributesArchive.animation_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_effect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.AnimationAttributesArchive.effect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_automatic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_automatic(&has_bits);
          is_automatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive custom_effect_timing_curve_1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_effect_timing_curve_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive custom_effect_timing_curve_2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_effect_timing_curve_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive custom_effect_timing_curve_3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_effect_timing_curve_3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 random_number_seed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_random_number_seed(&has_bits);
          random_number_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double custom_detail = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_custom_detail(&has_bits);
          custom_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string custom_effect_timing_curve_theme_name_1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_custom_effect_timing_curve_theme_name_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_effect_timing_curve_theme_name_2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_custom_effect_timing_curve_theme_name_2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_effect_timing_curve_theme_name_3 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_custom_effect_timing_curve_theme_name_3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool writing_direction_is_rtl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_writing_direction_is_rtl(&has_bits);
          writing_direction_is_rtl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimationAttributesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.AnimationAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string animation_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_animation_type().data(), static_cast<int>(this->_internal_animation_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.animation_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_animation_type(), target);
  }

  // optional string effect = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effect().data(), static_cast<int>(this->_internal_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.effect");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_effect(), target);
  }

  // optional double duration = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // optional uint32 direction = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_direction(), target);
  }

  // optional double delay = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_delay(), target);
  }

  // optional bool is_automatic = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_automatic(), target);
  }

  // optional .TSP.Color color = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::color(this), target, stream);
  }

  // optional .TSD.PathSourceArchive custom_effect_timing_curve_1 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::custom_effect_timing_curve_1(this), target, stream);
  }

  // optional .TSD.PathSourceArchive custom_effect_timing_curve_2 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::custom_effect_timing_curve_2(this), target, stream);
  }

  // optional .TSD.PathSourceArchive custom_effect_timing_curve_3 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::custom_effect_timing_curve_3(this), target, stream);
  }

  // optional uint32 random_number_seed = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_random_number_seed(), target);
  }

  // optional double custom_detail = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_custom_detail(), target);
  }

  // optional string custom_effect_timing_curve_theme_name_1 = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_effect_timing_curve_theme_name_1().data(), static_cast<int>(this->_internal_custom_effect_timing_curve_theme_name_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_1");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_custom_effect_timing_curve_theme_name_1(), target);
  }

  // optional string custom_effect_timing_curve_theme_name_2 = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_effect_timing_curve_theme_name_2().data(), static_cast<int>(this->_internal_custom_effect_timing_curve_theme_name_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_2");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_custom_effect_timing_curve_theme_name_2(), target);
  }

  // optional string custom_effect_timing_curve_theme_name_3 = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_effect_timing_curve_theme_name_3().data(), static_cast<int>(this->_internal_custom_effect_timing_curve_theme_name_3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_3");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_custom_effect_timing_curve_theme_name_3(), target);
  }

  // optional bool writing_direction_is_rtl = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_writing_direction_is_rtl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.AnimationAttributesArchive)
  return target;
}

size_t AnimationAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.AnimationAttributesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string animation_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animation_type());
    }

    // optional string effect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_effect());
    }

    // optional string custom_effect_timing_curve_theme_name_1 = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_effect_timing_curve_theme_name_1());
    }

    // optional string custom_effect_timing_curve_theme_name_2 = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_effect_timing_curve_theme_name_2());
    }

    // optional string custom_effect_timing_curve_theme_name_3 = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_effect_timing_curve_theme_name_3());
    }

    // optional .TSP.Color color = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .TSD.PathSourceArchive custom_effect_timing_curve_1 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_effect_timing_curve_1_);
    }

    // optional .TSD.PathSourceArchive custom_effect_timing_curve_2 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_effect_timing_curve_2_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.PathSourceArchive custom_effect_timing_curve_3 = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_effect_timing_curve_3_);
    }

    // optional double duration = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double delay = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional uint32 direction = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_direction());
    }

    // optional uint32 random_number_seed = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_random_number_seed());
    }

    // optional double custom_detail = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool is_automatic = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool writing_direction_is_rtl = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnimationAttributesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnimationAttributesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnimationAttributesArchive::GetClassData() const { return &_class_data_; }

void AnimationAttributesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnimationAttributesArchive *>(to)->MergeFrom(
      static_cast<const AnimationAttributesArchive &>(from));
}


void AnimationAttributesArchive::MergeFrom(const AnimationAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.AnimationAttributesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_animation_type(from._internal_animation_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_effect(from._internal_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_custom_effect_timing_curve_theme_name_1(from._internal_custom_effect_timing_curve_theme_name_1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_custom_effect_timing_curve_theme_name_2(from._internal_custom_effect_timing_curve_theme_name_2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_custom_effect_timing_curve_theme_name_3(from._internal_custom_effect_timing_curve_theme_name_3());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_custom_effect_timing_curve_1()->::TSD::PathSourceArchive::MergeFrom(from._internal_custom_effect_timing_curve_1());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_custom_effect_timing_curve_2()->::TSD::PathSourceArchive::MergeFrom(from._internal_custom_effect_timing_curve_2());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_custom_effect_timing_curve_3()->::TSD::PathSourceArchive::MergeFrom(from._internal_custom_effect_timing_curve_3());
    }
    if (cached_has_bits & 0x00000200u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000800u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00001000u) {
      random_number_seed_ = from.random_number_seed_;
    }
    if (cached_has_bits & 0x00002000u) {
      custom_detail_ = from.custom_detail_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_automatic_ = from.is_automatic_;
    }
    if (cached_has_bits & 0x00008000u) {
      writing_direction_is_rtl_ = from.writing_direction_is_rtl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationAttributesArchive::CopyFrom(const AnimationAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.AnimationAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationAttributesArchive::IsInitialized() const {
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  if (_internal_has_custom_effect_timing_curve_1()) {
    if (!custom_effect_timing_curve_1_->IsInitialized()) return false;
  }
  if (_internal_has_custom_effect_timing_curve_2()) {
    if (!custom_effect_timing_curve_2_->IsInitialized()) return false;
  }
  if (_internal_has_custom_effect_timing_curve_3()) {
    if (!custom_effect_timing_curve_3_->IsInitialized()) return false;
  }
  return true;
}

void AnimationAttributesArchive::InternalSwap(AnimationAttributesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &animation_type_, GetArenaForAllocation(),
      &other->animation_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &effect_, GetArenaForAllocation(),
      &other->effect_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_effect_timing_curve_theme_name_1_, GetArenaForAllocation(),
      &other->custom_effect_timing_curve_theme_name_1_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_effect_timing_curve_theme_name_2_, GetArenaForAllocation(),
      &other->custom_effect_timing_curve_theme_name_2_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_effect_timing_curve_theme_name_3_, GetArenaForAllocation(),
      &other->custom_effect_timing_curve_theme_name_3_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationAttributesArchive, writing_direction_is_rtl_)
      + sizeof(AnimationAttributesArchive::writing_direction_is_rtl_)
      - PROTOBUF_FIELD_OFFSET(AnimationAttributesArchive, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationAttributesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[0]);
}

// ===================================================================

class TransitionAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TransitionAttributesArchive>()._has_bits_);
  static const ::KN::AnimationAttributesArchive& animationattributes(const TransitionAttributesArchive* msg);
  static void set_has_animationattributes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_custom_mosaic_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_custom_mosaic_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_custom_bounce(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_custom_magic_move_fade_unmatched_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_custom_timing_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_custom_text_delivery_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_custom_motion_blur(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_custom_travel_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_database_animation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_database_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_database_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_database_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_database_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_database_is_automatic(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Color& database_color(const TransitionAttributesArchive* msg);
  static void set_has_database_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::KN::AnimationAttributesArchive&
TransitionAttributesArchive::_Internal::animationattributes(const TransitionAttributesArchive* msg) {
  return *msg->animationattributes_;
}
const ::TSP::Color&
TransitionAttributesArchive::_Internal::database_color(const TransitionAttributesArchive* msg) {
  return *msg->database_color_;
}
void TransitionAttributesArchive::clear_database_color() {
  if (database_color_ != nullptr) database_color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TransitionAttributesArchive::TransitionAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.TransitionAttributesArchive)
}
TransitionAttributesArchive::TransitionAttributesArchive(const TransitionAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  database_animation_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_database_animation_type()) {
    database_animation_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database_animation_type(), 
      GetArenaForAllocation());
  }
  database_effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_database_effect()) {
    database_effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database_effect(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_database_color()) {
    database_color_ = new ::TSP::Color(*from.database_color_);
  } else {
    database_color_ = nullptr;
  }
  if (from._internal_has_animationattributes()) {
    animationattributes_ = new ::KN::AnimationAttributesArchive(*from.animationattributes_);
  } else {
    animationattributes_ = nullptr;
  }
  ::memcpy(&database_duration_, &from.database_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_text_delivery_type_) -
    reinterpret_cast<char*>(&database_duration_)) + sizeof(custom_text_delivery_type_));
  // @@protoc_insertion_point(copy_constructor:KN.TransitionAttributesArchive)
}

inline void TransitionAttributesArchive::SharedCtor() {
database_animation_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
database_effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&database_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_travel_distance_) -
    reinterpret_cast<char*>(&database_color_)) + sizeof(custom_travel_distance_));
custom_timing_curve_ = 1;
custom_text_delivery_type_ = 1;
}

TransitionAttributesArchive::~TransitionAttributesArchive() {
  // @@protoc_insertion_point(destructor:KN.TransitionAttributesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransitionAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  database_animation_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  database_effect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete database_color_;
  if (this != internal_default_instance()) delete animationattributes_;
}

void TransitionAttributesArchive::ArenaDtor(void* object) {
  TransitionAttributesArchive* _this = reinterpret_cast< TransitionAttributesArchive* >(object);
  (void)_this;
}
void TransitionAttributesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransitionAttributesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransitionAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.TransitionAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      database_animation_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      database_effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(database_color_ != nullptr);
      database_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(animationattributes_ != nullptr);
      animationattributes_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&database_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_twist_) -
        reinterpret_cast<char*>(&database_duration_)) + sizeof(custom_twist_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&custom_mosaic_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_travel_distance_) -
        reinterpret_cast<char*>(&custom_mosaic_size_)) + sizeof(custom_travel_distance_));
    custom_timing_curve_ = 1;
  }
  custom_text_delivery_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransitionAttributesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string database_animation_type = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_database_animation_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.TransitionAttributesArchive.database_animation_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string database_effect = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_database_effect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.TransitionAttributesArchive.database_effect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double database_duration = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_database_duration(&has_bits);
          database_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 database_direction = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_database_direction(&has_bits);
          database_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float database_delay = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_database_delay(&has_bits);
          database_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool database_is_automatic = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_database_is_automatic(&has_bits);
          database_is_automatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color database_color = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.AnimationAttributesArchive animationAttributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_animationattributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float custom_twist = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_custom_twist(&has_bits);
          custom_twist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_mosaic_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_custom_mosaic_size(&has_bits);
          custom_mosaic_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_mosaic_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_custom_mosaic_type(&has_bits);
          custom_mosaic_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_bounce = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_custom_bounce(&has_bits);
          custom_bounce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_magic_move_fade_unmatched_objects = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_custom_magic_move_fade_unmatched_objects(&has_bits);
          custom_magic_move_fade_unmatched_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(val))) {
            _internal_set_custom_timing_curve(static_cast<::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(val))) {
            _internal_set_custom_text_delivery_type(static_cast<::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool custom_motion_blur = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_custom_motion_blur(&has_bits);
          custom_motion_blur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float custom_travel_distance = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_custom_travel_distance(&has_bits);
          custom_travel_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransitionAttributesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.TransitionAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string database_animation_type = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_animation_type().data(), static_cast<int>(this->_internal_database_animation_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.TransitionAttributesArchive.database_animation_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database_animation_type(), target);
  }

  // optional string database_effect = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_effect().data(), static_cast<int>(this->_internal_database_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.TransitionAttributesArchive.database_effect");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_database_effect(), target);
  }

  // optional double database_duration = 3 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_database_duration(), target);
  }

  // optional uint32 database_direction = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_database_direction(), target);
  }

  // optional float database_delay = 5 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_database_delay(), target);
  }

  // optional bool database_is_automatic = 6 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_database_is_automatic(), target);
  }

  // optional .TSP.Color database_color = 7 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::database_color(this), target, stream);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::animationattributes(this), target, stream);
  }

  // optional float custom_twist = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_custom_twist(), target);
  }

  // optional uint32 custom_mosaic_size = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_custom_mosaic_size(), target);
  }

  // optional uint32 custom_mosaic_type = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_custom_mosaic_type(), target);
  }

  // optional bool custom_bounce = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_custom_bounce(), target);
  }

  // optional bool custom_magic_move_fade_unmatched_objects = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_custom_magic_move_fade_unmatched_objects(), target);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_custom_timing_curve(), target);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_custom_text_delivery_type(), target);
  }

  // optional bool custom_motion_blur = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_custom_motion_blur(), target);
  }

  // optional float custom_travel_distance = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_custom_travel_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.TransitionAttributesArchive)
  return target;
}

size_t TransitionAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.TransitionAttributesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string database_animation_type = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_animation_type());
    }

    // optional string database_effect = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_effect());
    }

    // optional .TSP.Color database_color = 7 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_color_);
    }

    // optional .KN.AnimationAttributesArchive animationAttributes = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *animationattributes_);
    }

    // optional double database_duration = 3 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 database_direction = 4 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_database_direction());
    }

    // optional float database_delay = 5 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float custom_twist = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 custom_mosaic_size = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_mosaic_size());
    }

    // optional uint32 custom_mosaic_type = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_mosaic_type());
    }

    // optional bool custom_bounce = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool custom_magic_move_fade_unmatched_objects = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool custom_motion_blur = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool database_is_automatic = 6 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional float custom_travel_distance = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_custom_timing_curve());
    }

  }
  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_custom_text_delivery_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransitionAttributesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransitionAttributesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransitionAttributesArchive::GetClassData() const { return &_class_data_; }

void TransitionAttributesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransitionAttributesArchive *>(to)->MergeFrom(
      static_cast<const TransitionAttributesArchive &>(from));
}


void TransitionAttributesArchive::MergeFrom(const TransitionAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.TransitionAttributesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_database_animation_type(from._internal_database_animation_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_database_effect(from._internal_database_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_database_color()->::TSP::Color::MergeFrom(from._internal_database_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_animationattributes()->::KN::AnimationAttributesArchive::MergeFrom(from._internal_animationattributes());
    }
    if (cached_has_bits & 0x00000010u) {
      database_duration_ = from.database_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      database_direction_ = from.database_direction_;
    }
    if (cached_has_bits & 0x00000040u) {
      database_delay_ = from.database_delay_;
    }
    if (cached_has_bits & 0x00000080u) {
      custom_twist_ = from.custom_twist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      custom_mosaic_size_ = from.custom_mosaic_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      custom_mosaic_type_ = from.custom_mosaic_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      custom_bounce_ = from.custom_bounce_;
    }
    if (cached_has_bits & 0x00000800u) {
      custom_magic_move_fade_unmatched_objects_ = from.custom_magic_move_fade_unmatched_objects_;
    }
    if (cached_has_bits & 0x00001000u) {
      custom_motion_blur_ = from.custom_motion_blur_;
    }
    if (cached_has_bits & 0x00002000u) {
      database_is_automatic_ = from.database_is_automatic_;
    }
    if (cached_has_bits & 0x00004000u) {
      custom_travel_distance_ = from.custom_travel_distance_;
    }
    if (cached_has_bits & 0x00008000u) {
      custom_timing_curve_ = from.custom_timing_curve_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_custom_text_delivery_type(from._internal_custom_text_delivery_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransitionAttributesArchive::CopyFrom(const TransitionAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.TransitionAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionAttributesArchive::IsInitialized() const {
  if (_internal_has_database_color()) {
    if (!database_color_->IsInitialized()) return false;
  }
  if (_internal_has_animationattributes()) {
    if (!animationattributes_->IsInitialized()) return false;
  }
  return true;
}

void TransitionAttributesArchive::InternalSwap(TransitionAttributesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_animation_type_, GetArenaForAllocation(),
      &other->database_animation_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_effect_, GetArenaForAllocation(),
      &other->database_effect_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransitionAttributesArchive, custom_travel_distance_)
      + sizeof(TransitionAttributesArchive::custom_travel_distance_)
      - PROTOBUF_FIELD_OFFSET(TransitionAttributesArchive, database_color_)>(
          reinterpret_cast<char*>(&database_color_),
          reinterpret_cast<char*>(&other->database_color_));
  swap(custom_timing_curve_, other->custom_timing_curve_);
  swap(custom_text_delivery_type_, other->custom_text_delivery_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransitionAttributesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[1]);
}

// ===================================================================

class TransitionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TransitionArchive>()._has_bits_);
  static const ::KN::TransitionAttributesArchive& attributes(const TransitionArchive* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::KN::TransitionAttributesArchive&
TransitionArchive::_Internal::attributes(const TransitionArchive* msg) {
  return *msg->attributes_;
}
TransitionArchive::TransitionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.TransitionArchive)
}
TransitionArchive::TransitionArchive(const TransitionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attributes()) {
    attributes_ = new ::KN::TransitionAttributesArchive(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.TransitionArchive)
}

inline void TransitionArchive::SharedCtor() {
attributes_ = nullptr;
}

TransitionArchive::~TransitionArchive() {
  // @@protoc_insertion_point(destructor:KN.TransitionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransitionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attributes_;
}

void TransitionArchive::ArenaDtor(void* object) {
  TransitionArchive* _this = reinterpret_cast< TransitionArchive* >(object);
  (void)_this;
}
void TransitionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransitionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransitionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.TransitionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(attributes_ != nullptr);
    attributes_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransitionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.TransitionAttributesArchive attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransitionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.TransitionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KN.TransitionAttributesArchive attributes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.TransitionArchive)
  return target;
}

size_t TransitionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.TransitionArchive)
  size_t total_size = 0;

  // required .KN.TransitionAttributesArchive attributes = 2;
  if (_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransitionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransitionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransitionArchive::GetClassData() const { return &_class_data_; }

void TransitionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransitionArchive *>(to)->MergeFrom(
      static_cast<const TransitionArchive &>(from));
}


void TransitionArchive::MergeFrom(const TransitionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.TransitionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attributes()) {
    _internal_mutable_attributes()->::KN::TransitionAttributesArchive::MergeFrom(from._internal_attributes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransitionArchive::CopyFrom(const TransitionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.TransitionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_attributes()) {
    if (!attributes_->IsInitialized()) return false;
  }
  return true;
}

void TransitionArchive::InternalSwap(TransitionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(attributes_, other->attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransitionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[2]);
}

// ===================================================================

class BuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildChunkArchive>()._has_bits_);
  static const ::TSP::Reference& build(const BuildChunkArchive* msg);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_automatic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_referent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::KN::BuildChunkIdentifierArchive& build_chunk_identifier(const BuildChunkArchive* msg);
  static void set_has_build_chunk_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& build_id(const BuildChunkArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
BuildChunkArchive::_Internal::build(const BuildChunkArchive* msg) {
  return *msg->build_;
}
const ::KN::BuildChunkIdentifierArchive&
BuildChunkArchive::_Internal::build_chunk_identifier(const BuildChunkArchive* msg) {
  return *msg->build_chunk_identifier_;
}
const ::TSP::UUID&
BuildChunkArchive::_Internal::build_id(const BuildChunkArchive* msg) {
  return *msg->build_id_;
}
void BuildChunkArchive::clear_build() {
  if (build_ != nullptr) build_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BuildChunkArchive::clear_build_id() {
  if (build_id_ != nullptr) build_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BuildChunkArchive::BuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.BuildChunkArchive)
}
BuildChunkArchive::BuildChunkArchive(const BuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_build()) {
    build_ = new ::TSP::Reference(*from.build_);
  } else {
    build_ = nullptr;
  }
  if (from._internal_has_build_chunk_identifier()) {
    build_chunk_identifier_ = new ::KN::BuildChunkIdentifierArchive(*from.build_chunk_identifier_);
  } else {
    build_chunk_identifier_ = nullptr;
  }
  if (from._internal_has_build_id()) {
    build_id_ = new ::TSP::UUID(*from.build_id_);
  } else {
    build_id_ = nullptr;
  }
  ::memcpy(&delay_, &from.delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&referent_) -
    reinterpret_cast<char*>(&delay_)) + sizeof(referent_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildChunkArchive)
}

inline void BuildChunkArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&build_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&referent_) -
    reinterpret_cast<char*>(&build_)) + sizeof(referent_));
}

BuildChunkArchive::~BuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildChunkArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete build_;
  if (this != internal_default_instance()) delete build_chunk_identifier_;
  if (this != internal_default_instance()) delete build_id_;
}

void BuildChunkArchive::ArenaDtor(void* object) {
  BuildChunkArchive* _this = reinterpret_cast< BuildChunkArchive* >(object);
  (void)_this;
}
void BuildChunkArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildChunkArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildChunkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(build_ != nullptr);
      build_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(build_chunk_identifier_ != nullptr);
      build_chunk_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(build_id_ != nullptr);
      build_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&referent_) -
        reinterpret_cast<char*>(&delay_)) + sizeof(referent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildChunkArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference build = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_build(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 index = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool automatic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_automatic(&has_bits);
          automatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool referent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_referent(&has_bits);
          referent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_chunk_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID build_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildChunkArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildChunkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference build = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::build(this), target, stream);
  }

  // optional uint32 index = 2 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional double delay = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_delay(), target);
  }

  // optional double duration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_duration(), target);
  }

  // optional bool automatic = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_automatic(), target);
  }

  // optional bool referent = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_referent(), target);
  }

  // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::build_chunk_identifier(this), target, stream);
  }

  // optional .TSP.UUID build_id = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::build_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildChunkArchive)
  return target;
}

size_t BuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildChunkArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference build = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *build_);
    }

    // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *build_chunk_identifier_);
    }

    // optional .TSP.UUID build_id = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *build_id_);
    }

    // optional double delay = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double duration = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 index = 2 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional bool automatic = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool referent = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildChunkArchive::GetClassData() const { return &_class_data_; }

void BuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuildChunkArchive *>(to)->MergeFrom(
      static_cast<const BuildChunkArchive &>(from));
}


void BuildChunkArchive::MergeFrom(const BuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_build()->::TSP::Reference::MergeFrom(from._internal_build());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_build_chunk_identifier()->::KN::BuildChunkIdentifierArchive::MergeFrom(from._internal_build_chunk_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_build_id()->::TSP::UUID::MergeFrom(from._internal_build_id());
    }
    if (cached_has_bits & 0x00000008u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000040u) {
      automatic_ = from.automatic_;
    }
    if (cached_has_bits & 0x00000080u) {
      referent_ = from.referent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildChunkArchive::CopyFrom(const BuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildChunkArchive::IsInitialized() const {
  if (_internal_has_build()) {
    if (!build_->IsInitialized()) return false;
  }
  if (_internal_has_build_chunk_identifier()) {
    if (!build_chunk_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_build_id()) {
    if (!build_id_->IsInitialized()) return false;
  }
  return true;
}

void BuildChunkArchive::InternalSwap(BuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildChunkArchive, referent_)
      + sizeof(BuildChunkArchive::referent_)
      - PROTOBUF_FIELD_OFFSET(BuildChunkArchive, build_)>(
          reinterpret_cast<char*>(&build_),
          reinterpret_cast<char*>(&other->build_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildChunkArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[3]);
}

// ===================================================================

class BuildChunkIdentifierArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildChunkIdentifierArchive>()._has_bits_);
  static const ::TSP::UUID& build_id(const BuildChunkIdentifierArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_build_chunk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::UUID&
BuildChunkIdentifierArchive::_Internal::build_id(const BuildChunkIdentifierArchive* msg) {
  return *msg->build_id_;
}
void BuildChunkIdentifierArchive::clear_build_id() {
  if (build_id_ != nullptr) build_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BuildChunkIdentifierArchive::BuildChunkIdentifierArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.BuildChunkIdentifierArchive)
}
BuildChunkIdentifierArchive::BuildChunkIdentifierArchive(const BuildChunkIdentifierArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_build_id()) {
    build_id_ = new ::TSP::UUID(*from.build_id_);
  } else {
    build_id_ = nullptr;
  }
  build_chunk_id_ = from.build_chunk_id_;
  // @@protoc_insertion_point(copy_constructor:KN.BuildChunkIdentifierArchive)
}

inline void BuildChunkIdentifierArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&build_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&build_chunk_id_) -
    reinterpret_cast<char*>(&build_id_)) + sizeof(build_chunk_id_));
}

BuildChunkIdentifierArchive::~BuildChunkIdentifierArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildChunkIdentifierArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuildChunkIdentifierArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete build_id_;
}

void BuildChunkIdentifierArchive::ArenaDtor(void* object) {
  BuildChunkIdentifierArchive* _this = reinterpret_cast< BuildChunkIdentifierArchive* >(object);
  (void)_this;
}
void BuildChunkIdentifierArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildChunkIdentifierArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildChunkIdentifierArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildChunkIdentifierArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(build_id_ != nullptr);
    build_id_->Clear();
  }
  build_chunk_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildChunkIdentifierArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID build_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 build_chunk_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_build_chunk_id(&has_bits);
          build_chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildChunkIdentifierArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildChunkIdentifierArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUID build_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::build_id(this), target, stream);
  }

  // optional int32 build_chunk_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_build_chunk_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildChunkIdentifierArchive)
  return target;
}

size_t BuildChunkIdentifierArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildChunkIdentifierArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.UUID build_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *build_id_);
    }

    // optional int32 build_chunk_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_build_chunk_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildChunkIdentifierArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuildChunkIdentifierArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildChunkIdentifierArchive::GetClassData() const { return &_class_data_; }

void BuildChunkIdentifierArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuildChunkIdentifierArchive *>(to)->MergeFrom(
      static_cast<const BuildChunkIdentifierArchive &>(from));
}


void BuildChunkIdentifierArchive::MergeFrom(const BuildChunkIdentifierArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildChunkIdentifierArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_build_id()->::TSP::UUID::MergeFrom(from._internal_build_id());
    }
    if (cached_has_bits & 0x00000002u) {
      build_chunk_id_ = from.build_chunk_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildChunkIdentifierArchive::CopyFrom(const BuildChunkIdentifierArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildChunkIdentifierArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildChunkIdentifierArchive::IsInitialized() const {
  if (_internal_has_build_id()) {
    if (!build_id_->IsInitialized()) return false;
  }
  return true;
}

void BuildChunkIdentifierArchive::InternalSwap(BuildChunkIdentifierArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildChunkIdentifierArchive, build_chunk_id_)
      + sizeof(BuildChunkIdentifierArchive::build_chunk_id_)
      - PROTOBUF_FIELD_OFFSET(BuildChunkIdentifierArchive, build_id_)>(
          reinterpret_cast<char*>(&build_id_),
          reinterpret_cast<char*>(&other->build_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildChunkIdentifierArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[4]);
}

// ===================================================================

class BuildAttributeValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildAttributeValueArchive>()._has_bits_);
  static void set_has_integer_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::PathSourceArchive& path_source_value(const BuildAttributeValueArchive* msg);
  static void set_has_path_source_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Color& color_value(const BuildAttributeValueArchive* msg);
  static void set_has_color_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSD::PathSourceArchive&
BuildAttributeValueArchive::_Internal::path_source_value(const BuildAttributeValueArchive* msg) {
  return *msg->path_source_value_;
}
const ::TSP::Color&
BuildAttributeValueArchive::_Internal::color_value(const BuildAttributeValueArchive* msg) {
  return *msg->color_value_;
}
void BuildAttributeValueArchive::clear_path_source_value() {
  if (path_source_value_ != nullptr) path_source_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void BuildAttributeValueArchive::clear_color_value() {
  if (color_value_ != nullptr) color_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BuildAttributeValueArchive::BuildAttributeValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.BuildAttributeValueArchive)
}
BuildAttributeValueArchive::BuildAttributeValueArchive(const BuildAttributeValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_path_source_value()) {
    path_source_value_ = new ::TSD::PathSourceArchive(*from.path_source_value_);
  } else {
    path_source_value_ = nullptr;
  }
  if (from._internal_has_color_value()) {
    color_value_ = new ::TSP::Color(*from.color_value_);
  } else {
    color_value_ = nullptr;
  }
  ::memcpy(&double_value_, &from.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&double_value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildAttributeValueArchive)
}

inline void BuildAttributeValueArchive::SharedCtor() {
string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_source_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&path_source_value_)) + sizeof(type_));
}

BuildAttributeValueArchive::~BuildAttributeValueArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildAttributeValueArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuildAttributeValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_source_value_;
  if (this != internal_default_instance()) delete color_value_;
}

void BuildAttributeValueArchive::ArenaDtor(void* object) {
  BuildAttributeValueArchive* _this = reinterpret_cast< BuildAttributeValueArchive* >(object);
  (void)_this;
}
void BuildAttributeValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAttributeValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildAttributeValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildAttributeValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      string_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(path_source_value_ != nullptr);
      path_source_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(color_value_ != nullptr);
      color_value_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&double_value_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAttributeValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 integer_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_integer_value(&has_bits);
          integer_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_double_value(&has_bits);
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bool_value(&has_bits);
          bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.BuildAttributeValueArchive.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive path_source_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_source_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color color_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildAttributeValueArchive.BuildAttributeValueType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributeValueArchive_BuildAttributeValueType_IsValid(val))) {
            _internal_set_type(static_cast<::KN::BuildAttributeValueArchive_BuildAttributeValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAttributeValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildAttributeValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 integer_value = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_integer_value(), target);
  }

  // optional double double_value = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // optional bool bool_value = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_value(), target);
  }

  // optional string string_value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributeValueArchive.string_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_value(), target);
  }

  // optional .TSD.PathSourceArchive path_source_value = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::path_source_value(this), target, stream);
  }

  // optional .TSP.Color color_value = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::color_value(this), target, stream);
  }

  // optional .KN.BuildAttributeValueArchive.BuildAttributeValueType type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildAttributeValueArchive)
  return target;
}

size_t BuildAttributeValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildAttributeValueArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string string_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional .TSD.PathSourceArchive path_source_value = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_source_value_);
    }

    // optional .TSP.Color color_value = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_value_);
    }

    // optional double double_value = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 integer_value = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_integer_value());
    }

    // optional bool bool_value = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional .KN.BuildAttributeValueArchive.BuildAttributeValueType type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildAttributeValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuildAttributeValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildAttributeValueArchive::GetClassData() const { return &_class_data_; }

void BuildAttributeValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuildAttributeValueArchive *>(to)->MergeFrom(
      static_cast<const BuildAttributeValueArchive &>(from));
}


void BuildAttributeValueArchive::MergeFrom(const BuildAttributeValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildAttributeValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_path_source_value()->::TSD::PathSourceArchive::MergeFrom(from._internal_path_source_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_color_value()->::TSP::Color::MergeFrom(from._internal_color_value());
    }
    if (cached_has_bits & 0x00000008u) {
      double_value_ = from.double_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      integer_value_ = from.integer_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      bool_value_ = from.bool_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildAttributeValueArchive::CopyFrom(const BuildAttributeValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildAttributeValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAttributeValueArchive::IsInitialized() const {
  if (_internal_has_path_source_value()) {
    if (!path_source_value_->IsInitialized()) return false;
  }
  if (_internal_has_color_value()) {
    if (!color_value_->IsInitialized()) return false;
  }
  return true;
}

void BuildAttributeValueArchive::InternalSwap(BuildAttributeValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_value_, GetArenaForAllocation(),
      &other->string_value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAttributeValueArchive, type_)
      + sizeof(BuildAttributeValueArchive::type_)
      - PROTOBUF_FIELD_OFFSET(BuildAttributeValueArchive, path_source_value_)>(
          reinterpret_cast<char*>(&path_source_value_),
          reinterpret_cast<char*>(&other->path_source_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAttributeValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[5]);
}

// ===================================================================

class BuildAttributeTupleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildAttributeTupleArchive>()._has_bits_);
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::BuildAttributeValueArchive& value(const BuildAttributeTupleArchive* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& build_id(const BuildAttributeTupleArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::BuildChunkIdentifierArchive& build_chunk_identifier(const BuildAttributeTupleArchive* msg);
  static void set_has_build_chunk_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::KN::BuildAttributeValueArchive&
BuildAttributeTupleArchive::_Internal::value(const BuildAttributeTupleArchive* msg) {
  return *msg->value_;
}
const ::TSP::UUID&
BuildAttributeTupleArchive::_Internal::build_id(const BuildAttributeTupleArchive* msg) {
  return *msg->build_id_;
}
const ::KN::BuildChunkIdentifierArchive&
BuildAttributeTupleArchive::_Internal::build_chunk_identifier(const BuildAttributeTupleArchive* msg) {
  return *msg->build_chunk_identifier_;
}
void BuildAttributeTupleArchive::clear_build_id() {
  if (build_id_ != nullptr) build_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BuildAttributeTupleArchive::BuildAttributeTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.BuildAttributeTupleArchive)
}
BuildAttributeTupleArchive::BuildAttributeTupleArchive(const BuildAttributeTupleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property()) {
    property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::KN::BuildAttributeValueArchive(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_build_id()) {
    build_id_ = new ::TSP::UUID(*from.build_id_);
  } else {
    build_id_ = nullptr;
  }
  if (from._internal_has_build_chunk_identifier()) {
    build_chunk_identifier_ = new ::KN::BuildChunkIdentifierArchive(*from.build_chunk_identifier_);
  } else {
    build_chunk_identifier_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.BuildAttributeTupleArchive)
}

inline void BuildAttributeTupleArchive::SharedCtor() {
property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&build_chunk_identifier_) -
    reinterpret_cast<char*>(&value_)) + sizeof(build_chunk_identifier_));
}

BuildAttributeTupleArchive::~BuildAttributeTupleArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildAttributeTupleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuildAttributeTupleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete build_id_;
  if (this != internal_default_instance()) delete build_chunk_identifier_;
}

void BuildAttributeTupleArchive::ArenaDtor(void* object) {
  BuildAttributeTupleArchive* _this = reinterpret_cast< BuildAttributeTupleArchive* >(object);
  (void)_this;
}
void BuildAttributeTupleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAttributeTupleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildAttributeTupleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildAttributeTupleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(build_id_ != nullptr);
      build_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(build_chunk_identifier_ != nullptr);
      build_chunk_identifier_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAttributeTupleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.BuildAttributeTupleArchive.property");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildAttributeValueArchive value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID build_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_chunk_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAttributeTupleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildAttributeTupleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string property = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributeTupleArchive.property");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_property(), target);
  }

  // optional .KN.BuildAttributeValueArchive value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  // optional .TSP.UUID build_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::build_id(this), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::build_chunk_identifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildAttributeTupleArchive)
  return target;
}

size_t BuildAttributeTupleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildAttributeTupleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string property = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_property());
    }

    // optional .KN.BuildAttributeValueArchive value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .TSP.UUID build_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *build_id_);
    }

    // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *build_chunk_identifier_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildAttributeTupleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuildAttributeTupleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildAttributeTupleArchive::GetClassData() const { return &_class_data_; }

void BuildAttributeTupleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuildAttributeTupleArchive *>(to)->MergeFrom(
      static_cast<const BuildAttributeTupleArchive &>(from));
}


void BuildAttributeTupleArchive::MergeFrom(const BuildAttributeTupleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildAttributeTupleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::KN::BuildAttributeValueArchive::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_build_id()->::TSP::UUID::MergeFrom(from._internal_build_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_build_chunk_identifier()->::KN::BuildChunkIdentifierArchive::MergeFrom(from._internal_build_chunk_identifier());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildAttributeTupleArchive::CopyFrom(const BuildAttributeTupleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildAttributeTupleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAttributeTupleArchive::IsInitialized() const {
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  if (_internal_has_build_id()) {
    if (!build_id_->IsInitialized()) return false;
  }
  if (_internal_has_build_chunk_identifier()) {
    if (!build_chunk_identifier_->IsInitialized()) return false;
  }
  return true;
}

void BuildAttributeTupleArchive::InternalSwap(BuildAttributeTupleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_, GetArenaForAllocation(),
      &other->property_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAttributeTupleArchive, build_chunk_identifier_)
      + sizeof(BuildAttributeTupleArchive::build_chunk_identifier_)
      - PROTOBUF_FIELD_OFFSET(BuildAttributeTupleArchive, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAttributeTupleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[6]);
}

// ===================================================================

class BuildAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildAttributesArchive>()._has_bits_);
  static const ::KN::AnimationAttributesArchive& animationattributes(const BuildAttributesArchive* msg);
  static void set_has_animationattributes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_eventtrigger(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_delayautomaticafter(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_delayautomaticwith(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_curvestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_chartrotation3d(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_startoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_endoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_action_rotationangle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_action_rotationdirection(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_action_scalesize(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_action_coloralpha(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_action_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::PathSourceArchive& action_motionpathsource(const BuildAttributesArchive* msg);
  static void set_has_action_motionpathsource(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_custom_bounce(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_custom_textdelivery(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_custom_deliveryoption(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_custom_action_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_custom_action_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_custom_action_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_custom_action_jiggleintensity(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_custom_motion_blur(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_custom_include_endpoints(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_custom_shine(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_custom_scale_amount(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_custom_travel_distance(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_custom_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_custom_align_to_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_database_animationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_database_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_database_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_database_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_database_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Color& database_color(const BuildAttributesArchive* msg);
  static void set_has_database_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_motionpathstring(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::KN::AnimationAttributesArchive&
BuildAttributesArchive::_Internal::animationattributes(const BuildAttributesArchive* msg) {
  return *msg->animationattributes_;
}
const ::TSD::PathSourceArchive&
BuildAttributesArchive::_Internal::action_motionpathsource(const BuildAttributesArchive* msg) {
  return *msg->action_motionpathsource_;
}
const ::TSP::Color&
BuildAttributesArchive::_Internal::database_color(const BuildAttributesArchive* msg) {
  return *msg->database_color_;
}
void BuildAttributesArchive::clear_action_motionpathsource() {
  if (action_motionpathsource_ != nullptr) action_motionpathsource_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void BuildAttributesArchive::clear_database_color() {
  if (database_color_ != nullptr) database_color_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
BuildAttributesArchive::BuildAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.BuildAttributesArchive)
}
BuildAttributesArchive::BuildAttributesArchive(const BuildAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  database_animationtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_database_animationtype()) {
    database_animationtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database_animationtype(), 
      GetArenaForAllocation());
  }
  database_effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_database_effect()) {
    database_effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database_effect(), 
      GetArenaForAllocation());
  }
  motionpathstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_motionpathstring()) {
    motionpathstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_motionpathstring(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_database_color()) {
    database_color_ = new ::TSP::Color(*from.database_color_);
  } else {
    database_color_ = nullptr;
  }
  if (from._internal_has_animationattributes()) {
    animationattributes_ = new ::KN::AnimationAttributesArchive(*from.animationattributes_);
  } else {
    animationattributes_ = nullptr;
  }
  if (from._internal_has_action_motionpathsource()) {
    action_motionpathsource_ = new ::TSD::PathSourceArchive(*from.action_motionpathsource_);
  } else {
    action_motionpathsource_ = nullptr;
  }
  ::memcpy(&database_direction_, &from.database_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_rotationdirection_) -
    reinterpret_cast<char*>(&database_direction_)) + sizeof(action_rotationdirection_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildAttributesArchive)
}

inline void BuildAttributesArchive::SharedCtor() {
database_animationtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
database_effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
motionpathstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&database_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_travel_distance_) -
    reinterpret_cast<char*>(&database_color_)) + sizeof(custom_travel_distance_));
action_rotationdirection_ = 31;
}

BuildAttributesArchive::~BuildAttributesArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildAttributesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuildAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  database_animationtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  database_effect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  motionpathstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete database_color_;
  if (this != internal_default_instance()) delete animationattributes_;
  if (this != internal_default_instance()) delete action_motionpathsource_;
}

void BuildAttributesArchive::ArenaDtor(void* object) {
  BuildAttributesArchive* _this = reinterpret_cast< BuildAttributesArchive* >(object);
  (void)_this;
}
void BuildAttributesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAttributesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      database_animationtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      database_effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      motionpathstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(database_color_ != nullptr);
      database_color_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(animationattributes_ != nullptr);
      animationattributes_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(action_motionpathsource_ != nullptr);
      action_motionpathsource_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&database_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eventtrigger_) -
        reinterpret_cast<char*>(&database_direction_)) + sizeof(eventtrigger_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&database_delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_acceleration_) -
        reinterpret_cast<char*>(&database_delay_)) + sizeof(action_acceleration_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&curvestyle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_action_decay_) -
        reinterpret_cast<char*>(&curvestyle_)) + sizeof(custom_action_decay_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&custom_motion_blur_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_align_to_path_) -
        reinterpret_cast<char*>(&custom_motion_blur_)) + sizeof(custom_align_to_path_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&custom_scale_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_travel_distance_) -
        reinterpret_cast<char*>(&custom_scale_amount_)) + sizeof(custom_travel_distance_));
    action_rotationdirection_ = 31;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAttributesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string database_animationType = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_database_animationtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.BuildAttributesArchive.database_animationType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string database_effect = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_database_effect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.BuildAttributesArchive.database_effect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 database_direction = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_database_direction(&_has_bits_);
          database_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 eventTrigger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_eventtrigger(&_has_bits_);
          eventtrigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double database_delay = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_database_delay(&_has_bits_);
          database_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double delayAutomaticAfter = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_delayautomaticafter(&_has_bits_);
          delayautomaticafter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double delayAutomaticWith = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_delayautomaticwith(&_has_bits_);
          delayautomaticwith_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double database_duration = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_database_duration(&_has_bits_);
          database_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double action_rotationAngle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_action_rotationangle(&_has_bits_);
          action_rotationangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(val))) {
            _internal_set_action_rotationdirection(static_cast<::KN::BuildAttributesArchive_BuildAttributesRotationDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double action_scaleSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_action_scalesize(&_has_bits_);
          action_scalesize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double action_colorAlpha = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_action_coloralpha(&_has_bits_);
          action_coloralpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesAcceleration_IsValid(val))) {
            _internal_set_action_acceleration(static_cast<::KN::BuildAttributesArchive_BuildAttributesAcceleration>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(val))) {
            _internal_set_curvestyle(static_cast<::KN::BuildAttributesArchive_BuildAttributesCurveStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string motionPathString = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_motionpathstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.BuildAttributesArchive.motionPathString");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color database_color = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ChartRotation3D = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_chartrotation3d(&_has_bits_);
          chartrotation3d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .KN.AnimationAttributesArchive animationAttributes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_animationattributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_bounce = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_custom_bounce(&_has_bits_);
          custom_bounce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(val))) {
            _internal_set_custom_textdelivery(static_cast<::KN::BuildAttributesArchive_BuildAttributesTextDelivery>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(val))) {
            _internal_set_custom_deliveryoption(static_cast<::KN::BuildAttributesArchive_BuildAttributesDeliveryOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive action_motionPathSource = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_motionpathsource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_action_decay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_custom_action_decay(&_has_bits_);
          custom_action_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_action_repeatCount = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_custom_action_repeatcount(&_has_bits_);
          custom_action_repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double custom_action_scale = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_custom_action_scale(&_has_bits_);
          custom_action_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(val))) {
            _internal_set_custom_action_jiggleintensity(static_cast<::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 startOffset = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_startoffset(&_has_bits_);
          startoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 endOffset = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_endoffset(&_has_bits_);
          endoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_motion_blur = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_custom_motion_blur(&_has_bits_);
          custom_motion_blur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_include_endpoints = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_custom_include_endpoints(&_has_bits_);
          custom_include_endpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_shine = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_custom_shine(&_has_bits_);
          custom_shine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double custom_scale_amount = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_custom_scale_amount(&_has_bits_);
          custom_scale_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double custom_travel_distance = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_custom_travel_distance(&_has_bits_);
          custom_travel_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool custom_cursor = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_custom_cursor(&_has_bits_);
          custom_cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_align_to_path = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_custom_align_to_path(&_has_bits_);
          custom_align_to_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAttributesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string database_animationType = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_animationtype().data(), static_cast<int>(this->_internal_database_animationtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributesArchive.database_animationType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database_animationtype(), target);
  }

  // optional string database_effect = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_effect().data(), static_cast<int>(this->_internal_database_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributesArchive.database_effect");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_database_effect(), target);
  }

  // optional uint32 database_direction = 3 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_database_direction(), target);
  }

  // optional uint32 eventTrigger = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_eventtrigger(), target);
  }

  // optional double database_delay = 5 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_database_delay(), target);
  }

  // optional double delayAutomaticAfter = 6 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_delayautomaticafter(), target);
  }

  // optional double delayAutomaticWith = 7 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_delayautomaticwith(), target);
  }

  // optional double database_duration = 8 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_database_duration(), target);
  }

  // optional double action_rotationAngle = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_action_rotationangle(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_action_rotationdirection(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double action_scaleSize = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_action_scalesize(), target);
  }

  // optional double action_colorAlpha = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_action_coloralpha(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_action_acceleration(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_curvestyle(), target);
  }

  // optional string motionPathString = 15 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_motionpathstring().data(), static_cast<int>(this->_internal_motionpathstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributesArchive.motionPathString");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_motionpathstring(), target);
  }

  // optional .TSP.Color database_color = 16 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::database_color(this), target, stream);
  }

  // optional double ChartRotation3D = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_chartrotation3d(), target);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::animationattributes(this), target, stream);
  }

  // optional bool custom_bounce = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_custom_bounce(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_custom_textdelivery(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_custom_deliveryoption(), target);
  }

  // optional .TSD.PathSourceArchive action_motionPathSource = 22;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::action_motionpathsource(this), target, stream);
  }

  // optional bool custom_action_decay = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_custom_action_decay(), target);
  }

  // optional uint32 custom_action_repeatCount = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_custom_action_repeatcount(), target);
  }

  // optional double custom_action_scale = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_custom_action_scale(), target);
  }

  // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_custom_action_jiggleintensity(), target);
  }

  // optional uint32 startOffset = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_startoffset(), target);
  }

  // optional uint32 endOffset = 28;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_endoffset(), target);
  }

  // optional bool custom_motion_blur = 29;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_custom_motion_blur(), target);
  }

  // optional bool custom_include_endpoints = 30;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_custom_include_endpoints(), target);
  }

  // optional bool custom_shine = 33;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_custom_shine(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double custom_scale_amount = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_custom_scale_amount(), target);
  }

  // optional double custom_travel_distance = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_custom_travel_distance(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool custom_cursor = 36;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_custom_cursor(), target);
  }

  // optional bool custom_align_to_path = 37;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_custom_align_to_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildAttributesArchive)
  return target;
}

size_t BuildAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildAttributesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string database_animationType = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_animationtype());
    }

    // optional string database_effect = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_effect());
    }

    // optional string motionPathString = 15 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_motionpathstring());
    }

    // optional .TSP.Color database_color = 16 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_color_);
    }

    // optional .KN.AnimationAttributesArchive animationAttributes = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *animationattributes_);
    }

    // optional .TSD.PathSourceArchive action_motionPathSource = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_motionpathsource_);
    }

    // optional uint32 database_direction = 3 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_database_direction());
    }

    // optional uint32 eventTrigger = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eventtrigger());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double database_delay = 5 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double delayAutomaticAfter = 6 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double delayAutomaticWith = 7 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double database_duration = 8 [deprecated = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double action_rotationAngle = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double action_scaleSize = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double action_colorAlpha = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action_acceleration());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_curvestyle());
    }

    // optional double ChartRotation3D = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_custom_textdelivery());
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_custom_deliveryoption());
    }

    // optional double custom_action_scale = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional uint32 custom_action_repeatCount = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_action_repeatcount());
    }

    // optional bool custom_bounce = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_action_decay = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool custom_motion_blur = 29;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_include_endpoints = 30;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_custom_action_jiggleintensity());
    }

    // optional uint32 startOffset = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_startoffset());
    }

    // optional uint32 endOffset = 28;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_endoffset());
    }

    // optional bool custom_shine = 33;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_cursor = 36;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_align_to_path = 37;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional double custom_scale_amount = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double custom_travel_distance = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action_rotationdirection());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildAttributesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuildAttributesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildAttributesArchive::GetClassData() const { return &_class_data_; }

void BuildAttributesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuildAttributesArchive *>(to)->MergeFrom(
      static_cast<const BuildAttributesArchive &>(from));
}


void BuildAttributesArchive::MergeFrom(const BuildAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildAttributesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_database_animationtype(from._internal_database_animationtype());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_database_effect(from._internal_database_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_motionpathstring(from._internal_motionpathstring());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_database_color()->::TSP::Color::MergeFrom(from._internal_database_color());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_animationattributes()->::KN::AnimationAttributesArchive::MergeFrom(from._internal_animationattributes());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_action_motionpathsource()->::TSD::PathSourceArchive::MergeFrom(from._internal_action_motionpathsource());
    }
    if (cached_has_bits & 0x00000040u) {
      database_direction_ = from.database_direction_;
    }
    if (cached_has_bits & 0x00000080u) {
      eventtrigger_ = from.eventtrigger_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      database_delay_ = from.database_delay_;
    }
    if (cached_has_bits & 0x00000200u) {
      delayautomaticafter_ = from.delayautomaticafter_;
    }
    if (cached_has_bits & 0x00000400u) {
      delayautomaticwith_ = from.delayautomaticwith_;
    }
    if (cached_has_bits & 0x00000800u) {
      database_duration_ = from.database_duration_;
    }
    if (cached_has_bits & 0x00001000u) {
      action_rotationangle_ = from.action_rotationangle_;
    }
    if (cached_has_bits & 0x00002000u) {
      action_scalesize_ = from.action_scalesize_;
    }
    if (cached_has_bits & 0x00004000u) {
      action_coloralpha_ = from.action_coloralpha_;
    }
    if (cached_has_bits & 0x00008000u) {
      action_acceleration_ = from.action_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      curvestyle_ = from.curvestyle_;
    }
    if (cached_has_bits & 0x00020000u) {
      chartrotation3d_ = from.chartrotation3d_;
    }
    if (cached_has_bits & 0x00040000u) {
      custom_textdelivery_ = from.custom_textdelivery_;
    }
    if (cached_has_bits & 0x00080000u) {
      custom_deliveryoption_ = from.custom_deliveryoption_;
    }
    if (cached_has_bits & 0x00100000u) {
      custom_action_scale_ = from.custom_action_scale_;
    }
    if (cached_has_bits & 0x00200000u) {
      custom_action_repeatcount_ = from.custom_action_repeatcount_;
    }
    if (cached_has_bits & 0x00400000u) {
      custom_bounce_ = from.custom_bounce_;
    }
    if (cached_has_bits & 0x00800000u) {
      custom_action_decay_ = from.custom_action_decay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      custom_motion_blur_ = from.custom_motion_blur_;
    }
    if (cached_has_bits & 0x02000000u) {
      custom_include_endpoints_ = from.custom_include_endpoints_;
    }
    if (cached_has_bits & 0x04000000u) {
      custom_action_jiggleintensity_ = from.custom_action_jiggleintensity_;
    }
    if (cached_has_bits & 0x08000000u) {
      startoffset_ = from.startoffset_;
    }
    if (cached_has_bits & 0x10000000u) {
      endoffset_ = from.endoffset_;
    }
    if (cached_has_bits & 0x20000000u) {
      custom_shine_ = from.custom_shine_;
    }
    if (cached_has_bits & 0x40000000u) {
      custom_cursor_ = from.custom_cursor_;
    }
    if (cached_has_bits & 0x80000000u) {
      custom_align_to_path_ = from.custom_align_to_path_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      custom_scale_amount_ = from.custom_scale_amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      custom_travel_distance_ = from.custom_travel_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_rotationdirection_ = from.action_rotationdirection_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildAttributesArchive::CopyFrom(const BuildAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAttributesArchive::IsInitialized() const {
  if (_internal_has_database_color()) {
    if (!database_color_->IsInitialized()) return false;
  }
  if (_internal_has_animationattributes()) {
    if (!animationattributes_->IsInitialized()) return false;
  }
  if (_internal_has_action_motionpathsource()) {
    if (!action_motionpathsource_->IsInitialized()) return false;
  }
  return true;
}

void BuildAttributesArchive::InternalSwap(BuildAttributesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_animationtype_, GetArenaForAllocation(),
      &other->database_animationtype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_effect_, GetArenaForAllocation(),
      &other->database_effect_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &motionpathstring_, GetArenaForAllocation(),
      &other->motionpathstring_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAttributesArchive, custom_travel_distance_)
      + sizeof(BuildAttributesArchive::custom_travel_distance_)
      - PROTOBUF_FIELD_OFFSET(BuildAttributesArchive, database_color_)>(
          reinterpret_cast<char*>(&database_color_),
          reinterpret_cast<char*>(&other->database_color_));
  swap(action_rotationdirection_, other->action_rotationdirection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAttributesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[7]);
}

// ===================================================================

class BuildArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildArchive>()._has_bits_);
  static const ::TSP::Reference& drawable(const BuildArchive* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delivery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::BuildAttributesArchive& attributes(const BuildArchive* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chunk_id_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSP::Reference&
BuildArchive::_Internal::drawable(const BuildArchive* msg) {
  return *msg->drawable_;
}
const ::KN::BuildAttributesArchive&
BuildArchive::_Internal::attributes(const BuildArchive* msg) {
  return *msg->attributes_;
}
void BuildArchive::clear_drawable() {
  if (drawable_ != nullptr) drawable_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BuildArchive::BuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.BuildArchive)
}
BuildArchive::BuildArchive(const BuildArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delivery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_delivery()) {
    delivery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delivery(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_drawable()) {
    drawable_ = new ::TSP::Reference(*from.drawable_);
  } else {
    drawable_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::KN::BuildAttributesArchive(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunk_id_seed_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(chunk_id_seed_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildArchive)
}

inline void BuildArchive::SharedCtor() {
delivery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drawable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chunk_id_seed_) -
    reinterpret_cast<char*>(&drawable_)) + sizeof(chunk_id_seed_));
}

BuildArchive::~BuildArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuildArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  delivery_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete drawable_;
  if (this != internal_default_instance()) delete attributes_;
}

void BuildArchive::ArenaDtor(void* object) {
  BuildArchive* _this = reinterpret_cast< BuildArchive* >(object);
  (void)_this;
}
void BuildArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      delivery_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(drawable_ != nullptr);
      drawable_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chunk_id_seed_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(chunk_id_seed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference drawable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string delivery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_delivery();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.BuildArchive.delivery");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double duration = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required .KN.BuildAttributesArchive attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 chunk_id_seed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_chunk_id_seed(&has_bits);
          chunk_id_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference drawable = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::drawable(this), target, stream);
  }

  // required string delivery = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_delivery().data(), static_cast<int>(this->_internal_delivery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildArchive.delivery");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_delivery(), target);
  }

  // optional double duration = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // required .KN.BuildAttributesArchive attributes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::attributes(this), target, stream);
  }

  // optional int32 chunk_id_seed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_chunk_id_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildArchive)
  return target;
}

size_t BuildArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.BuildArchive)
  size_t total_size = 0;

  if (_internal_has_delivery()) {
    // required string delivery = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery());
  }

  if (_internal_has_attributes()) {
    // required .KN.BuildAttributesArchive attributes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  return total_size;
}
size_t BuildArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string delivery = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery());

    // required .KN.BuildAttributesArchive attributes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference drawable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drawable_);
  }

  if (cached_has_bits & 0x00000018u) {
    // optional double duration = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 chunk_id_seed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chunk_id_seed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuildArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildArchive::GetClassData() const { return &_class_data_; }

void BuildArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuildArchive *>(to)->MergeFrom(
      static_cast<const BuildArchive &>(from));
}


void BuildArchive::MergeFrom(const BuildArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_delivery(from._internal_delivery());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_drawable()->::TSP::Reference::MergeFrom(from._internal_drawable());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_attributes()->::KN::BuildAttributesArchive::MergeFrom(from._internal_attributes());
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      chunk_id_seed_ = from.chunk_id_seed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildArchive::CopyFrom(const BuildArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_drawable()) {
    if (!drawable_->IsInitialized()) return false;
  }
  if (_internal_has_attributes()) {
    if (!attributes_->IsInitialized()) return false;
  }
  return true;
}

void BuildArchive::InternalSwap(BuildArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &delivery_, GetArenaForAllocation(),
      &other->delivery_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildArchive, chunk_id_seed_)
      + sizeof(BuildArchive::chunk_id_seed_)
      - PROTOBUF_FIELD_OFFSET(BuildArchive, drawable_)>(
          reinterpret_cast<char*>(&drawable_),
          reinterpret_cast<char*>(&other->drawable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[8]);
}

// ===================================================================

class PlaceholderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceholderArchive>()._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const PlaceholderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
PlaceholderArchive::_Internal::super(const PlaceholderArchive* msg) {
  return *msg->super_;
}
void PlaceholderArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PlaceholderArchive::PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.PlaceholderArchive)
}
PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::ShapeInfoArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:KN.PlaceholderArchive)
}

inline void PlaceholderArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&super_)) + sizeof(kind_));
}

PlaceholderArchive::~PlaceholderArchive() {
  // @@protoc_insertion_point(destructor:KN.PlaceholderArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlaceholderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void PlaceholderArchive::ArenaDtor(void* object) {
  PlaceholderArchive* _this = reinterpret_cast< PlaceholderArchive* >(object);
  (void)_this;
}
void PlaceholderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceholderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceholderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PlaceholderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  kind_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::PlaceholderArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::KN::PlaceholderArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceholderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PlaceholderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PlaceholderArchive)
  return target;
}

size_t PlaceholderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PlaceholderArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceholderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlaceholderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceholderArchive::GetClassData() const { return &_class_data_; }

void PlaceholderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlaceholderArchive *>(to)->MergeFrom(
      static_cast<const PlaceholderArchive &>(from));
}


void PlaceholderArchive::MergeFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.PlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::InternalSwap(PlaceholderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceholderArchive, kind_)
      + sizeof(PlaceholderArchive::kind_)
      - PROTOBUF_FIELD_OFFSET(PlaceholderArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[9]);
}

// ===================================================================

class NoteArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NoteArchive>()._has_bits_);
  static const ::TSP::Reference& containedstorage(const NoteArchive* msg);
  static void set_has_containedstorage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
NoteArchive::_Internal::containedstorage(const NoteArchive* msg) {
  return *msg->containedstorage_;
}
void NoteArchive::clear_containedstorage() {
  if (containedstorage_ != nullptr) containedstorage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NoteArchive::NoteArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.NoteArchive)
}
NoteArchive::NoteArchive(const NoteArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_containedstorage()) {
    containedstorage_ = new ::TSP::Reference(*from.containedstorage_);
  } else {
    containedstorage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.NoteArchive)
}

inline void NoteArchive::SharedCtor() {
containedstorage_ = nullptr;
}

NoteArchive::~NoteArchive() {
  // @@protoc_insertion_point(destructor:KN.NoteArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NoteArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete containedstorage_;
}

void NoteArchive::ArenaDtor(void* object) {
  NoteArchive* _this = reinterpret_cast< NoteArchive* >(object);
  (void)_this;
}
void NoteArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoteArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NoteArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.NoteArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(containedstorage_ != nullptr);
    containedstorage_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference containedStorage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_containedstorage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoteArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.NoteArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference containedStorage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::containedstorage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.NoteArchive)
  return target;
}

size_t NoteArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.NoteArchive)
  size_t total_size = 0;

  // required .TSP.Reference containedStorage = 1;
  if (_internal_has_containedstorage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *containedstorage_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NoteArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteArchive::GetClassData() const { return &_class_data_; }

void NoteArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NoteArchive *>(to)->MergeFrom(
      static_cast<const NoteArchive &>(from));
}


void NoteArchive::MergeFrom(const NoteArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.NoteArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_containedstorage()) {
    _internal_mutable_containedstorage()->::TSP::Reference::MergeFrom(from._internal_containedstorage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteArchive::CopyFrom(const NoteArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.NoteArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_containedstorage()) {
    if (!containedstorage_->IsInitialized()) return false;
  }
  return true;
}

void NoteArchive::InternalSwap(NoteArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(containedstorage_, other->containedstorage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[10]);
}

// ===================================================================

class ClassicStylesheetRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassicStylesheetRecordArchive>()._has_bits_);
  static const ::TSP::Reference& deprecated_theme(const ClassicStylesheetRecordArchive* msg);
  static void set_has_deprecated_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ClassicStylesheetRecordArchive::_Internal::deprecated_theme(const ClassicStylesheetRecordArchive* msg) {
  return *msg->deprecated_theme_;
}
void ClassicStylesheetRecordArchive::clear_identifier_to_style_map() {
  identifier_to_style_map_.Clear();
}
void ClassicStylesheetRecordArchive::clear_deprecated_theme() {
  if (deprecated_theme_ != nullptr) deprecated_theme_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  identifier_to_style_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.ClassicStylesheetRecordArchive)
}
ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(const ClassicStylesheetRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      identifier_to_style_map_(from.identifier_to_style_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deprecated_theme()) {
    deprecated_theme_ = new ::TSP::Reference(*from.deprecated_theme_);
  } else {
    deprecated_theme_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.ClassicStylesheetRecordArchive)
}

inline void ClassicStylesheetRecordArchive::SharedCtor() {
deprecated_theme_ = nullptr;
}

ClassicStylesheetRecordArchive::~ClassicStylesheetRecordArchive() {
  // @@protoc_insertion_point(destructor:KN.ClassicStylesheetRecordArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClassicStylesheetRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete deprecated_theme_;
}

void ClassicStylesheetRecordArchive::ArenaDtor(void* object) {
  ClassicStylesheetRecordArchive* _this = reinterpret_cast< ClassicStylesheetRecordArchive* >(object);
  (void)_this;
}
void ClassicStylesheetRecordArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassicStylesheetRecordArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClassicStylesheetRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ClassicStylesheetRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_to_style_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(deprecated_theme_ != nullptr);
    deprecated_theme_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassicStylesheetRecordArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier_to_style_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_theme = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassicStylesheetRecordArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ClassicStylesheetRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_to_style_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_identifier_to_style_map(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference deprecated_theme = 2 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deprecated_theme(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ClassicStylesheetRecordArchive)
  return target;
}

size_t ClassicStylesheetRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ClassicStylesheetRecordArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  total_size += 1UL * this->_internal_identifier_to_style_map_size();
  for (const auto& msg : this->identifier_to_style_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference deprecated_theme = 2 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deprecated_theme_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassicStylesheetRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClassicStylesheetRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassicStylesheetRecordArchive::GetClassData() const { return &_class_data_; }

void ClassicStylesheetRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ClassicStylesheetRecordArchive *>(to)->MergeFrom(
      static_cast<const ClassicStylesheetRecordArchive &>(from));
}


void ClassicStylesheetRecordArchive::MergeFrom(const ClassicStylesheetRecordArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.ClassicStylesheetRecordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifier_to_style_map_.MergeFrom(from.identifier_to_style_map_);
  if (from._internal_has_deprecated_theme()) {
    _internal_mutable_deprecated_theme()->::TSP::Reference::MergeFrom(from._internal_deprecated_theme());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassicStylesheetRecordArchive::CopyFrom(const ClassicStylesheetRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ClassicStylesheetRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicStylesheetRecordArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifier_to_style_map_)) return false;
  if (_internal_has_deprecated_theme()) {
    if (!deprecated_theme_->IsInitialized()) return false;
  }
  return true;
}

void ClassicStylesheetRecordArchive::InternalSwap(ClassicStylesheetRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_to_style_map_.InternalSwap(&other->identifier_to_style_map_);
  swap(deprecated_theme_, other->deprecated_theme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassicStylesheetRecordArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[11]);
}

// ===================================================================

class ClassicThemeRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassicThemeRecordArchive>()._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& stylesheetrecord(const ClassicThemeRecordArchive* msg);
  static void set_has_stylesheetrecord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
ClassicThemeRecordArchive::_Internal::stylesheetrecord(const ClassicThemeRecordArchive* msg) {
  return *msg->stylesheetrecord_;
}
void ClassicThemeRecordArchive::clear_stylesheetrecord() {
  if (stylesheetrecord_ != nullptr) stylesheetrecord_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ClassicThemeRecordArchive::clear_templates() {
  templates_.Clear();
}
ClassicThemeRecordArchive::ClassicThemeRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  templates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.ClassicThemeRecordArchive)
}
ClassicThemeRecordArchive::ClassicThemeRecordArchive(const ClassicThemeRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      templates_(from.templates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stylesheetrecord()) {
    stylesheetrecord_ = new ::TSP::Reference(*from.stylesheetrecord_);
  } else {
    stylesheetrecord_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.ClassicThemeRecordArchive)
}

inline void ClassicThemeRecordArchive::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stylesheetrecord_ = nullptr;
}

ClassicThemeRecordArchive::~ClassicThemeRecordArchive() {
  // @@protoc_insertion_point(destructor:KN.ClassicThemeRecordArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClassicThemeRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stylesheetrecord_;
}

void ClassicThemeRecordArchive::ArenaDtor(void* object) {
  ClassicThemeRecordArchive* _this = reinterpret_cast< ClassicThemeRecordArchive* >(object);
  (void)_this;
}
void ClassicThemeRecordArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassicThemeRecordArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClassicThemeRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ClassicThemeRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stylesheetrecord_ != nullptr);
      stylesheetrecord_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassicThemeRecordArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.ClassicThemeRecordArchive.uuid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference stylesheetRecord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheetrecord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference templates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_templates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassicThemeRecordArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ClassicThemeRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.ClassicThemeRecordArchive.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // optional .TSP.Reference stylesheetRecord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stylesheetrecord(this), target, stream);
  }

  // repeated .TSP.Reference templates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_templates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_templates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ClassicThemeRecordArchive)
  return target;
}

size_t ClassicThemeRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ClassicThemeRecordArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference templates = 3;
  total_size += 1UL * this->_internal_templates_size();
  for (const auto& msg : this->templates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string uuid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional .TSP.Reference stylesheetRecord = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stylesheetrecord_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassicThemeRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClassicThemeRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassicThemeRecordArchive::GetClassData() const { return &_class_data_; }

void ClassicThemeRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ClassicThemeRecordArchive *>(to)->MergeFrom(
      static_cast<const ClassicThemeRecordArchive &>(from));
}


void ClassicThemeRecordArchive::MergeFrom(const ClassicThemeRecordArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.ClassicThemeRecordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  templates_.MergeFrom(from.templates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stylesheetrecord()->::TSP::Reference::MergeFrom(from._internal_stylesheetrecord());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassicThemeRecordArchive::CopyFrom(const ClassicThemeRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ClassicThemeRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicThemeRecordArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(templates_)) return false;
  if (_internal_has_stylesheetrecord()) {
    if (!stylesheetrecord_->IsInitialized()) return false;
  }
  return true;
}

void ClassicThemeRecordArchive::InternalSwap(ClassicThemeRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  templates_.InternalSwap(&other->templates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uuid_, GetArenaForAllocation(),
      &other->uuid_, other->GetArenaForAllocation()
  );
  swap(stylesheetrecord_, other->stylesheetrecord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassicThemeRecordArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[12]);
}

// ===================================================================

class SlideArchive_SageTagMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideArchive_SageTagMapEntry>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info(const SlideArchive_SageTagMapEntry* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SlideArchive_SageTagMapEntry::_Internal::info(const SlideArchive_SageTagMapEntry* msg) {
  return *msg->info_;
}
void SlideArchive_SageTagMapEntry::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive.SageTagMapEntry)
}
SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(const SlideArchive_SageTagMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    info_ = new ::TSP::Reference(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive.SageTagMapEntry)
}

inline void SlideArchive_SageTagMapEntry::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
info_ = nullptr;
}

SlideArchive_SageTagMapEntry::~SlideArchive_SageTagMapEntry() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive.SageTagMapEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideArchive_SageTagMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void SlideArchive_SageTagMapEntry::ArenaDtor(void* object) {
  SlideArchive_SageTagMapEntry* _this = reinterpret_cast< SlideArchive_SageTagMapEntry* >(object);
  (void)_this;
}
void SlideArchive_SageTagMapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideArchive_SageTagMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideArchive_SageTagMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive.SageTagMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive_SageTagMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideArchive.SageTagMapEntry.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideArchive_SageTagMapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive.SageTagMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.SageTagMapEntry.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // required .TSP.Reference info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive.SageTagMapEntry)
  return target;
}

size_t SlideArchive_SageTagMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideArchive.SageTagMapEntry)
  size_t total_size = 0;

  if (_internal_has_tag()) {
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_info()) {
    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return total_size;
}
size_t SlideArchive_SageTagMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive.SageTagMapEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive_SageTagMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideArchive_SageTagMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive_SageTagMapEntry::GetClassData() const { return &_class_data_; }

void SlideArchive_SageTagMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideArchive_SageTagMapEntry *>(to)->MergeFrom(
      static_cast<const SlideArchive_SageTagMapEntry &>(from));
}


void SlideArchive_SageTagMapEntry::MergeFrom(const SlideArchive_SageTagMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive.SageTagMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_info()->::TSP::Reference::MergeFrom(from._internal_info());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive_SageTagMapEntry::CopyFrom(const SlideArchive_SageTagMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive.SageTagMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive_SageTagMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  return true;
}

void SlideArchive_SageTagMapEntry::InternalSwap(SlideArchive_SageTagMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_, GetArenaForAllocation(),
      &other->tag_, other->GetArenaForAllocation()
  );
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive_SageTagMapEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[13]);
}

// ===================================================================

class SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideArchive_InstructionalTextMap_InstructionalTextMapEntry>()._has_bits_);
  static const ::TSP::Reference& info(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_instructional_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_Internal::info(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* msg) {
  return *msg->info_;
}
void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
}
SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instructional_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_instructional_text()) {
    instructional_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instructional_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    info_ = new ::TSP::Reference(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
}

inline void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SharedCtor() {
instructional_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
info_ = nullptr;
}

SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::~SlideArchive_InstructionalTextMap_InstructionalTextMapEntry() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  instructional_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::ArenaDtor(void* object) {
  SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* _this = reinterpret_cast< SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* >(object);
  (void)_this;
}
void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      instructional_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string instructional_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instructional_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.instructional_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference info = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // required string instructional_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_instructional_text().data(), static_cast<int>(this->_internal_instructional_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.instructional_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instructional_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  return target;
}

size_t SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  size_t total_size = 0;

  // required string instructional_text = 2;
  if (_internal_has_instructional_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instructional_text());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::GetClassData() const { return &_class_data_; }

void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideArchive_InstructionalTextMap_InstructionalTextMapEntry *>(to)->MergeFrom(
      static_cast<const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry &>(from));
}


void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::MergeFrom(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_instructional_text(from._internal_instructional_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_info()->::TSP::Reference::MergeFrom(from._internal_info());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::CopyFrom(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  return true;
}

void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::InternalSwap(SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instructional_text_, GetArenaForAllocation(),
      &other->instructional_text_, other->GetArenaForAllocation()
  );
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[14]);
}

// ===================================================================

class SlideArchive_InstructionalTextMap::_Internal {
 public:
};

SlideArchive_InstructionalTextMap::SlideArchive_InstructionalTextMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  instructional_text_for_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive.InstructionalTextMap)
}
SlideArchive_InstructionalTextMap::SlideArchive_InstructionalTextMap(const SlideArchive_InstructionalTextMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instructional_text_for_infos_(from.instructional_text_for_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive.InstructionalTextMap)
}

inline void SlideArchive_InstructionalTextMap::SharedCtor() {
}

SlideArchive_InstructionalTextMap::~SlideArchive_InstructionalTextMap() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive.InstructionalTextMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideArchive_InstructionalTextMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SlideArchive_InstructionalTextMap::ArenaDtor(void* object) {
  SlideArchive_InstructionalTextMap* _this = reinterpret_cast< SlideArchive_InstructionalTextMap* >(object);
  (void)_this;
}
void SlideArchive_InstructionalTextMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideArchive_InstructionalTextMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideArchive_InstructionalTextMap::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive.InstructionalTextMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instructional_text_for_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive_InstructionalTextMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry instructional_text_for_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instructional_text_for_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideArchive_InstructionalTextMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive.InstructionalTextMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry instructional_text_for_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instructional_text_for_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_instructional_text_for_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive.InstructionalTextMap)
  return target;
}

size_t SlideArchive_InstructionalTextMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive.InstructionalTextMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry instructional_text_for_infos = 1;
  total_size += 1UL * this->_internal_instructional_text_for_infos_size();
  for (const auto& msg : this->instructional_text_for_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive_InstructionalTextMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideArchive_InstructionalTextMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive_InstructionalTextMap::GetClassData() const { return &_class_data_; }

void SlideArchive_InstructionalTextMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideArchive_InstructionalTextMap *>(to)->MergeFrom(
      static_cast<const SlideArchive_InstructionalTextMap &>(from));
}


void SlideArchive_InstructionalTextMap::MergeFrom(const SlideArchive_InstructionalTextMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive.InstructionalTextMap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instructional_text_for_infos_.MergeFrom(from.instructional_text_for_infos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive_InstructionalTextMap::CopyFrom(const SlideArchive_InstructionalTextMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive.InstructionalTextMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive_InstructionalTextMap::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(instructional_text_for_infos_)) return false;
  return true;
}

void SlideArchive_InstructionalTextMap::InternalSwap(SlideArchive_InstructionalTextMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  instructional_text_for_infos_.InternalSwap(&other->instructional_text_for_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive_InstructionalTextMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[15]);
}

// ===================================================================

class SlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideArchive>()._has_bits_);
  static const ::TSP::Reference& style(const SlideArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::TransitionArchive& transition(const SlideArchive* msg);
  static void set_has_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& titleplaceholder(const SlideArchive* msg);
  static void set_has_titleplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& bodyplaceholder(const SlideArchive* msg);
  static void set_has_bodyplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& objectplaceholder(const SlideArchive* msg);
  static void set_has_objectplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& slidenumberplaceholder(const SlideArchive* msg);
  static void set_has_slidenumberplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::KN::SlideArchive_InstructionalTextMap& instructional_text_map(const SlideArchive* msg);
  static void set_has_instructional_text_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::GeometryArchive& titleplaceholdergeometry(const SlideArchive* msg);
  static void set_has_titleplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_titleplaceholdershapestyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_titleplaceholdertextstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& titlelayoutproperties(const SlideArchive* msg);
  static void set_has_titlelayoutproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::GeometryArchive& bodyplaceholdergeometry(const SlideArchive* msg);
  static void set_has_bodyplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bodyplaceholdershapestyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_bodyplaceholdertextstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& bodylayoutproperties(const SlideArchive* msg);
  static void set_has_bodylayoutproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::GeometryArchive& slidenumberplaceholdergeometry(const SlideArchive* msg);
  static void set_has_slidenumberplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_slidenumberplaceholdershapestyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_slidenumberplaceholdertextstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& slidenumberlayoutproperties(const SlideArchive* msg);
  static void set_has_slidenumberlayoutproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& classicstylesheetrecord(const SlideArchive* msg);
  static void set_has_classicstylesheetrecord(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_thumbnailtextfortitleplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thumbnailtextforbodyplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slide_objects_layer_with_template(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSP::Reference& template_slide(const SlideArchive* msg);
  static void set_has_template_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& userdefinedguidestorage(const SlideArchive* msg);
  static void set_has_userdefinedguidestorage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_indocument(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSP::Reference& note(const SlideArchive* msg);
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_deprecated_objectplaceholdervisibleforexport(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSP::Reference& info_using_object_placeholder_geometry(const SlideArchive* msg);
  static void set_has_info_using_object_placeholder_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x10000018) ^ 0x10000018) != 0;
  }
};

const ::TSP::Reference&
SlideArchive::_Internal::style(const SlideArchive* msg) {
  return *msg->style_;
}
const ::KN::TransitionArchive&
SlideArchive::_Internal::transition(const SlideArchive* msg) {
  return *msg->transition_;
}
const ::TSP::Reference&
SlideArchive::_Internal::titleplaceholder(const SlideArchive* msg) {
  return *msg->titleplaceholder_;
}
const ::TSP::Reference&
SlideArchive::_Internal::bodyplaceholder(const SlideArchive* msg) {
  return *msg->bodyplaceholder_;
}
const ::TSP::Reference&
SlideArchive::_Internal::objectplaceholder(const SlideArchive* msg) {
  return *msg->objectplaceholder_;
}
const ::TSP::Reference&
SlideArchive::_Internal::slidenumberplaceholder(const SlideArchive* msg) {
  return *msg->slidenumberplaceholder_;
}
const ::KN::SlideArchive_InstructionalTextMap&
SlideArchive::_Internal::instructional_text_map(const SlideArchive* msg) {
  return *msg->instructional_text_map_;
}
const ::TSD::GeometryArchive&
SlideArchive::_Internal::titleplaceholdergeometry(const SlideArchive* msg) {
  return *msg->titleplaceholdergeometry_;
}
const ::TSWP::ShapeStylePropertiesArchive&
SlideArchive::_Internal::titlelayoutproperties(const SlideArchive* msg) {
  return *msg->titlelayoutproperties_;
}
const ::TSD::GeometryArchive&
SlideArchive::_Internal::bodyplaceholdergeometry(const SlideArchive* msg) {
  return *msg->bodyplaceholdergeometry_;
}
const ::TSWP::ShapeStylePropertiesArchive&
SlideArchive::_Internal::bodylayoutproperties(const SlideArchive* msg) {
  return *msg->bodylayoutproperties_;
}
const ::TSD::GeometryArchive&
SlideArchive::_Internal::slidenumberplaceholdergeometry(const SlideArchive* msg) {
  return *msg->slidenumberplaceholdergeometry_;
}
const ::TSWP::ShapeStylePropertiesArchive&
SlideArchive::_Internal::slidenumberlayoutproperties(const SlideArchive* msg) {
  return *msg->slidenumberlayoutproperties_;
}
const ::TSP::Reference&
SlideArchive::_Internal::classicstylesheetrecord(const SlideArchive* msg) {
  return *msg->classicstylesheetrecord_;
}
const ::TSP::Reference&
SlideArchive::_Internal::template_slide(const SlideArchive* msg) {
  return *msg->template_slide_;
}
const ::TSP::Reference&
SlideArchive::_Internal::userdefinedguidestorage(const SlideArchive* msg) {
  return *msg->userdefinedguidestorage_;
}
const ::TSP::Reference&
SlideArchive::_Internal::note(const SlideArchive* msg) {
  return *msg->note_;
}
const ::TSP::Reference&
SlideArchive::_Internal::info_using_object_placeholder_geometry(const SlideArchive* msg) {
  return *msg->info_using_object_placeholder_geometry_;
}
void SlideArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SlideArchive::clear_builds() {
  builds_.Clear();
}
void SlideArchive::clear_buildchunks() {
  buildchunks_.Clear();
}
void SlideArchive::clear_titleplaceholder() {
  if (titleplaceholder_ != nullptr) titleplaceholder_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SlideArchive::clear_bodyplaceholder() {
  if (bodyplaceholder_ != nullptr) bodyplaceholder_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SlideArchive::clear_objectplaceholder() {
  if (objectplaceholder_ != nullptr) objectplaceholder_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void SlideArchive::clear_slidenumberplaceholder() {
  if (slidenumberplaceholder_ != nullptr) slidenumberplaceholder_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void SlideArchive::clear_owned_drawables() {
  owned_drawables_.Clear();
}
void SlideArchive::clear_drawables_z_order() {
  drawables_z_order_.Clear();
}
void SlideArchive::clear_titleplaceholdergeometry() {
  if (titleplaceholdergeometry_ != nullptr) titleplaceholdergeometry_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void SlideArchive::clear_titlelayoutproperties() {
  if (titlelayoutproperties_ != nullptr) titlelayoutproperties_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void SlideArchive::clear_bodyplaceholdergeometry() {
  if (bodyplaceholdergeometry_ != nullptr) bodyplaceholdergeometry_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void SlideArchive::clear_bodylayoutproperties() {
  if (bodylayoutproperties_ != nullptr) bodylayoutproperties_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void SlideArchive::clear_slidenumberplaceholdergeometry() {
  if (slidenumberplaceholdergeometry_ != nullptr) slidenumberplaceholdergeometry_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void SlideArchive::clear_slidenumberlayoutproperties() {
  if (slidenumberlayoutproperties_ != nullptr) slidenumberlayoutproperties_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void SlideArchive::clear_classicstylesheetrecord() {
  if (classicstylesheetrecord_ != nullptr) classicstylesheetrecord_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void SlideArchive::clear_bodyparagraphstyles() {
  bodyparagraphstyles_.Clear();
}
void SlideArchive::clear_bodyliststyles() {
  bodyliststyles_.Clear();
}
void SlideArchive::clear_template_slide() {
  if (template_slide_ != nullptr) template_slide_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void SlideArchive::clear_staticguides() {
  staticguides_.Clear();
}
void SlideArchive::clear_userdefinedguidestorage() {
  if (userdefinedguidestorage_ != nullptr) userdefinedguidestorage_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void SlideArchive::clear_note() {
  if (note_ != nullptr) note_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void SlideArchive::clear_infos_using_object_placeholder_geometry() {
  infos_using_object_placeholder_geometry_.Clear();
}
void SlideArchive::clear_info_using_object_placeholder_geometry() {
  if (info_using_object_placeholder_geometry_ != nullptr) info_using_object_placeholder_geometry_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
SlideArchive::SlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  builds_(arena),
  buildchunkarchives_(arena),
  owned_drawables_(arena),
  staticguides_(arena),
  sage_tag_to_info_map_(arena),
  bodyparagraphstyles_(arena),
  bodyliststyles_(arena),
  drawables_z_order_(arena),
  buildchunks_(arena),
  infos_using_object_placeholder_geometry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive)
}
SlideArchive::SlideArchive(const SlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      builds_(from.builds_),
      buildchunkarchives_(from.buildchunkarchives_),
      owned_drawables_(from.owned_drawables_),
      staticguides_(from.staticguides_),
      sage_tag_to_info_map_(from.sage_tag_to_info_map_),
      bodyparagraphstyles_(from.bodyparagraphstyles_),
      bodyliststyles_(from.bodyliststyles_),
      drawables_z_order_(from.drawables_z_order_),
      buildchunks_(from.buildchunks_),
      infos_using_object_placeholder_geometry_(from.infos_using_object_placeholder_geometry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  thumbnailtextfortitleplaceholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumbnailtextfortitleplaceholder()) {
    thumbnailtextfortitleplaceholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnailtextfortitleplaceholder(), 
      GetArenaForAllocation());
  }
  thumbnailtextforbodyplaceholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumbnailtextforbodyplaceholder()) {
    thumbnailtextforbodyplaceholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnailtextforbodyplaceholder(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  if (from._internal_has_transition()) {
    transition_ = new ::KN::TransitionArchive(*from.transition_);
  } else {
    transition_ = nullptr;
  }
  if (from._internal_has_titleplaceholder()) {
    titleplaceholder_ = new ::TSP::Reference(*from.titleplaceholder_);
  } else {
    titleplaceholder_ = nullptr;
  }
  if (from._internal_has_bodyplaceholder()) {
    bodyplaceholder_ = new ::TSP::Reference(*from.bodyplaceholder_);
  } else {
    bodyplaceholder_ = nullptr;
  }
  if (from._internal_has_titleplaceholdergeometry()) {
    titleplaceholdergeometry_ = new ::TSD::GeometryArchive(*from.titleplaceholdergeometry_);
  } else {
    titleplaceholdergeometry_ = nullptr;
  }
  if (from._internal_has_bodyplaceholdergeometry()) {
    bodyplaceholdergeometry_ = new ::TSD::GeometryArchive(*from.bodyplaceholdergeometry_);
  } else {
    bodyplaceholdergeometry_ = nullptr;
  }
  if (from._internal_has_template_slide()) {
    template_slide_ = new ::TSP::Reference(*from.template_slide_);
  } else {
    template_slide_ = nullptr;
  }
  if (from._internal_has_slidenumberplaceholder()) {
    slidenumberplaceholder_ = new ::TSP::Reference(*from.slidenumberplaceholder_);
  } else {
    slidenumberplaceholder_ = nullptr;
  }
  if (from._internal_has_slidenumberplaceholdergeometry()) {
    slidenumberplaceholdergeometry_ = new ::TSD::GeometryArchive(*from.slidenumberplaceholdergeometry_);
  } else {
    slidenumberplaceholdergeometry_ = nullptr;
  }
  if (from._internal_has_titlelayoutproperties()) {
    titlelayoutproperties_ = new ::TSWP::ShapeStylePropertiesArchive(*from.titlelayoutproperties_);
  } else {
    titlelayoutproperties_ = nullptr;
  }
  if (from._internal_has_bodylayoutproperties()) {
    bodylayoutproperties_ = new ::TSWP::ShapeStylePropertiesArchive(*from.bodylayoutproperties_);
  } else {
    bodylayoutproperties_ = nullptr;
  }
  if (from._internal_has_slidenumberlayoutproperties()) {
    slidenumberlayoutproperties_ = new ::TSWP::ShapeStylePropertiesArchive(*from.slidenumberlayoutproperties_);
  } else {
    slidenumberlayoutproperties_ = nullptr;
  }
  if (from._internal_has_note()) {
    note_ = new ::TSP::Reference(*from.note_);
  } else {
    note_ = nullptr;
  }
  if (from._internal_has_classicstylesheetrecord()) {
    classicstylesheetrecord_ = new ::TSP::Reference(*from.classicstylesheetrecord_);
  } else {
    classicstylesheetrecord_ = nullptr;
  }
  if (from._internal_has_objectplaceholder()) {
    objectplaceholder_ = new ::TSP::Reference(*from.objectplaceholder_);
  } else {
    objectplaceholder_ = nullptr;
  }
  if (from._internal_has_userdefinedguidestorage()) {
    userdefinedguidestorage_ = new ::TSP::Reference(*from.userdefinedguidestorage_);
  } else {
    userdefinedguidestorage_ = nullptr;
  }
  if (from._internal_has_info_using_object_placeholder_geometry()) {
    info_using_object_placeholder_geometry_ = new ::TSP::Reference(*from.info_using_object_placeholder_geometry_);
  } else {
    info_using_object_placeholder_geometry_ = nullptr;
  }
  if (from._internal_has_instructional_text_map()) {
    instructional_text_map_ = new ::KN::SlideArchive_InstructionalTextMap(*from.instructional_text_map_);
  } else {
    instructional_text_map_ = nullptr;
  }
  ::memcpy(&titleplaceholdershapestyleindex_, &from.titleplaceholdershapestyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&info_using_object_placeholder_geometry_matches_object_placeholder_geometry_) -
    reinterpret_cast<char*>(&titleplaceholdershapestyleindex_)) + sizeof(info_using_object_placeholder_geometry_matches_object_placeholder_geometry_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive)
}

inline void SlideArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
thumbnailtextfortitleplaceholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
thumbnailtextforbodyplaceholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&info_using_object_placeholder_geometry_matches_object_placeholder_geometry_) -
    reinterpret_cast<char*>(&style_)) + sizeof(info_using_object_placeholder_geometry_matches_object_placeholder_geometry_));
}

SlideArchive::~SlideArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnailtextfortitleplaceholder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnailtextforbodyplaceholder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_;
  if (this != internal_default_instance()) delete transition_;
  if (this != internal_default_instance()) delete titleplaceholder_;
  if (this != internal_default_instance()) delete bodyplaceholder_;
  if (this != internal_default_instance()) delete titleplaceholdergeometry_;
  if (this != internal_default_instance()) delete bodyplaceholdergeometry_;
  if (this != internal_default_instance()) delete template_slide_;
  if (this != internal_default_instance()) delete slidenumberplaceholder_;
  if (this != internal_default_instance()) delete slidenumberplaceholdergeometry_;
  if (this != internal_default_instance()) delete titlelayoutproperties_;
  if (this != internal_default_instance()) delete bodylayoutproperties_;
  if (this != internal_default_instance()) delete slidenumberlayoutproperties_;
  if (this != internal_default_instance()) delete note_;
  if (this != internal_default_instance()) delete classicstylesheetrecord_;
  if (this != internal_default_instance()) delete objectplaceholder_;
  if (this != internal_default_instance()) delete userdefinedguidestorage_;
  if (this != internal_default_instance()) delete info_using_object_placeholder_geometry_;
  if (this != internal_default_instance()) delete instructional_text_map_;
}

void SlideArchive::ArenaDtor(void* object) {
  SlideArchive* _this = reinterpret_cast< SlideArchive* >(object);
  (void)_this;
}
void SlideArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  builds_.Clear();
  buildchunkarchives_.Clear();
  owned_drawables_.Clear();
  staticguides_.Clear();
  sage_tag_to_info_map_.Clear();
  bodyparagraphstyles_.Clear();
  bodyliststyles_.Clear();
  drawables_z_order_.Clear();
  buildchunks_.Clear();
  infos_using_object_placeholder_geometry_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnailtextfortitleplaceholder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      thumbnailtextforbodyplaceholder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(transition_ != nullptr);
      transition_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(titleplaceholder_ != nullptr);
      titleplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(bodyplaceholder_ != nullptr);
      bodyplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(titleplaceholdergeometry_ != nullptr);
      titleplaceholdergeometry_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(bodyplaceholdergeometry_ != nullptr);
      bodyplaceholdergeometry_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(template_slide_ != nullptr);
      template_slide_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(slidenumberplaceholder_ != nullptr);
      slidenumberplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(slidenumberplaceholdergeometry_ != nullptr);
      slidenumberplaceholdergeometry_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(titlelayoutproperties_ != nullptr);
      titlelayoutproperties_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(bodylayoutproperties_ != nullptr);
      bodylayoutproperties_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(slidenumberlayoutproperties_ != nullptr);
      slidenumberlayoutproperties_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(note_ != nullptr);
      note_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(classicstylesheetrecord_ != nullptr);
      classicstylesheetrecord_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(objectplaceholder_ != nullptr);
      objectplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(userdefinedguidestorage_ != nullptr);
      userdefinedguidestorage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(info_using_object_placeholder_geometry_ != nullptr);
      info_using_object_placeholder_geometry_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(instructional_text_map_ != nullptr);
      instructional_text_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&titleplaceholdershapestyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bodyplaceholdershapestyleindex_) -
        reinterpret_cast<char*>(&titleplaceholdershapestyleindex_)) + sizeof(bodyplaceholdershapestyleindex_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&bodyplaceholdertextstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&info_using_object_placeholder_geometry_matches_object_placeholder_geometry_) -
        reinterpret_cast<char*>(&bodyplaceholdertextstyleindex_)) + sizeof(info_using_object_placeholder_geometry_matches_object_placeholder_geometry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference builds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_builds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkArchive buildChunkArchives = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildchunkarchives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required .KN.TransitionArchive transition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference titlePlaceholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_titleplaceholder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference bodyPlaceholder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodyplaceholder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference owned_drawables = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owned_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_titleplaceholdergeometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 titlePlaceholderShapeStyleIndex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_titleplaceholdershapestyleindex(&has_bits);
          titleplaceholdershapestyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 titlePlaceholderTextStyleIndex = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_titleplaceholdertextstyleindex(&has_bits);
          titleplaceholdertextstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodyplaceholdergeometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_bodyplaceholdershapestyleindex(&has_bits);
          bodyplaceholdershapestyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bodyPlaceholderTextStyleIndex = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_bodyplaceholdertextstyleindex(&has_bits);
          bodyplaceholdertextstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference template_slide = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_slide(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSD.GuideArchive staticGuides = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_staticguides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool inDocument = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_indocument(&has_bits);
          indocument_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference slideNumberPlaceholder = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenumberplaceholder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenumberplaceholdergeometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_slidenumberplaceholdershapestyleindex(&has_bits);
          slidenumberplaceholdershapestyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_slidenumberplaceholdertextstyleindex(&has_bits);
          slidenumberplaceholdertextstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_titlelayoutproperties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodylayoutproperties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenumberlayoutproperties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference note = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sage_tag_to_info_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference classicStylesheetRecord = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_classicstylesheetrecord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference objectPlaceholder = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectplaceholder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference bodyParagraphStyles = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bodyparagraphstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deprecated_objectplaceholdervisibleforexport(&has_bits);
          deprecated_objectplaceholdervisibleforexport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference bodyListStyles = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bodyliststyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference userDefinedGuideStorage = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_userdefinedguidestorage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thumbnailTextForTitlePlaceholder = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_thumbnailtextfortitleplaceholder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideArchive.thumbnailTextForTitlePlaceholder");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thumbnailTextForBodyPlaceholder = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_thumbnailtextforbodyplaceholder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideArchive.thumbnailTextForBodyPlaceholder");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_using_object_placeholder_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(&has_bits);
          info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool slide_objects_layer_with_template = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_slide_objects_layer_with_template(&has_bits);
          slide_objects_layer_with_template_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables_z_order = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_drawables_z_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference buildChunks = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_buildchunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos_using_object_placeholder_geometry = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_infos_using_object_placeholder_geometry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .KN.SlideArchive.InstructionalTextMap instructional_text_map = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_instructional_text_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference style = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::style(this), target, stream);
  }

  // repeated .TSP.Reference builds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_builds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_builds(i), target, stream);
  }

  // repeated .KN.BuildChunkArchive buildChunkArchives = 3 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildchunkarchives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_buildchunkarchives(i), target, stream);
  }

  // required .KN.TransitionArchive transition = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transition(this), target, stream);
  }

  // optional .TSP.Reference titlePlaceholder = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::titleplaceholder(this), target, stream);
  }

  // optional .TSP.Reference bodyPlaceholder = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bodyplaceholder(this), target, stream);
  }

  // repeated .TSP.Reference owned_drawables = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owned_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_owned_drawables(i), target, stream);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::titleplaceholdergeometry(this), target, stream);
  }

  // optional uint32 titlePlaceholderShapeStyleIndex = 12;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_titleplaceholdershapestyleindex(), target);
  }

  // optional uint32 titlePlaceholderTextStyleIndex = 13;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_titleplaceholdertextstyleindex(), target);
  }

  // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::bodyplaceholdergeometry(this), target, stream);
  }

  // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_bodyplaceholdershapestyleindex(), target);
  }

  // optional uint32 bodyPlaceholderTextStyleIndex = 16;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_bodyplaceholdertextstyleindex(), target);
  }

  // optional .TSP.Reference template_slide = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::template_slide(this), target, stream);
  }

  // repeated .TSD.GuideArchive staticGuides = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_staticguides_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_staticguides(i), target, stream);
  }

  // required bool inDocument = 19;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_indocument(), target);
  }

  // optional .TSP.Reference slideNumberPlaceholder = 20;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::slidenumberplaceholder(this), target, stream);
  }

  // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::slidenumberplaceholdergeometry(this), target, stream);
  }

  // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_slidenumberplaceholdershapestyleindex(), target);
  }

  // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_slidenumberplaceholdertextstyleindex(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::titlelayoutproperties(this), target, stream);
  }

  // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::bodylayoutproperties(this), target, stream);
  }

  // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::slidenumberlayoutproperties(this), target, stream);
  }

  // optional .TSP.Reference note = 27;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::note(this), target, stream);
  }

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sage_tag_to_info_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_sage_tag_to_info_map(i), target, stream);
  }

  // optional .TSP.Reference classicStylesheetRecord = 29;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::classicstylesheetrecord(this), target, stream);
  }

  // optional .TSP.Reference objectPlaceholder = 30;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::objectplaceholder(this), target, stream);
  }

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bodyparagraphstyles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_bodyparagraphstyles(i), target, stream);
  }

  // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_deprecated_objectplaceholdervisibleforexport(), target);
  }

  // repeated .TSP.Reference bodyListStyles = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bodyliststyles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_bodyliststyles(i), target, stream);
  }

  // optional .TSP.Reference userDefinedGuideStorage = 36;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::userdefinedguidestorage(this), target, stream);
  }

  // optional string thumbnailTextForTitlePlaceholder = 37;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnailtextfortitleplaceholder().data(), static_cast<int>(this->_internal_thumbnailtextfortitleplaceholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.thumbnailTextForTitlePlaceholder");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_thumbnailtextfortitleplaceholder(), target);
  }

  // optional string thumbnailTextForBodyPlaceholder = 38;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnailtextforbodyplaceholder().data(), static_cast<int>(this->_internal_thumbnailtextforbodyplaceholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.thumbnailTextForBodyPlaceholder");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_thumbnailtextforbodyplaceholder(), target);
  }

  // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::info_using_object_placeholder_geometry(this), target, stream);
  }

  // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(), target);
  }

  // optional bool slide_objects_layer_with_template = 41 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_slide_objects_layer_with_template(), target);
  }

  // repeated .TSP.Reference drawables_z_order = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_z_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, this->_internal_drawables_z_order(i), target, stream);
  }

  // repeated .TSP.Reference buildChunks = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildchunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, this->_internal_buildchunks(i), target, stream);
  }

  // repeated .TSP.Reference infos_using_object_placeholder_geometry = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_using_object_placeholder_geometry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, this->_internal_infos_using_object_placeholder_geometry(i), target, stream);
  }

  // optional .KN.SlideArchive.InstructionalTextMap instructional_text_map = 45;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::instructional_text_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive)
  return target;
}

size_t SlideArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideArchive)
  size_t total_size = 0;

  if (_internal_has_style()) {
    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  if (_internal_has_transition()) {
    // required .KN.TransitionArchive transition = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transition_);
  }

  if (_internal_has_indocument()) {
    // required bool inDocument = 19;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t SlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x10000018) ^ 0x10000018) == 0) {  // All required fields are present.
    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);

    // required .KN.TransitionArchive transition = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transition_);

    // required bool inDocument = 19;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference builds = 2;
  total_size += 1UL * this->_internal_builds_size();
  for (const auto& msg : this->builds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkArchive buildChunkArchives = 3 [deprecated = true];
  total_size += 1UL * this->_internal_buildchunkarchives_size();
  for (const auto& msg : this->buildchunkarchives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference owned_drawables = 7;
  total_size += 1UL * this->_internal_owned_drawables_size();
  for (const auto& msg : this->owned_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.GuideArchive staticGuides = 18;
  total_size += 2UL * this->_internal_staticguides_size();
  for (const auto& msg : this->staticguides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  total_size += 2UL * this->_internal_sage_tag_to_info_map_size();
  for (const auto& msg : this->sage_tag_to_info_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  total_size += 2UL * this->_internal_bodyparagraphstyles_size();
  for (const auto& msg : this->bodyparagraphstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference bodyListStyles = 35;
  total_size += 2UL * this->_internal_bodyliststyles_size();
  for (const auto& msg : this->bodyliststyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference drawables_z_order = 42;
  total_size += 2UL * this->_internal_drawables_z_order_size();
  for (const auto& msg : this->drawables_z_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference buildChunks = 43;
  total_size += 2UL * this->_internal_buildchunks_size();
  for (const auto& msg : this->buildchunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference infos_using_object_placeholder_geometry = 44;
  total_size += 2UL * this->_internal_infos_using_object_placeholder_geometry_size();
  for (const auto& msg : this->infos_using_object_placeholder_geometry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string thumbnailTextForTitlePlaceholder = 37;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnailtextfortitleplaceholder());
    }

    // optional string thumbnailTextForBodyPlaceholder = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnailtextforbodyplaceholder());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference titlePlaceholder = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *titleplaceholder_);
    }

    // optional .TSP.Reference bodyPlaceholder = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bodyplaceholder_);
    }

    // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *titleplaceholdergeometry_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bodyplaceholdergeometry_);
    }

    // optional .TSP.Reference template_slide = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *template_slide_);
    }

    // optional .TSP.Reference slideNumberPlaceholder = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slidenumberplaceholder_);
    }

    // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slidenumberplaceholdergeometry_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *titlelayoutproperties_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bodylayoutproperties_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slidenumberlayoutproperties_);
    }

    // optional .TSP.Reference note = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *note_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSP.Reference classicStylesheetRecord = 29;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classicstylesheetrecord_);
    }

    // optional .TSP.Reference objectPlaceholder = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *objectplaceholder_);
    }

    // optional .TSP.Reference userDefinedGuideStorage = 36;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *userdefinedguidestorage_);
    }

    // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_using_object_placeholder_geometry_);
    }

    // optional .KN.SlideArchive.InstructionalTextMap instructional_text_map = 45;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instructional_text_map_);
    }

    // optional uint32 titlePlaceholderShapeStyleIndex = 12;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_titleplaceholdershapestyleindex());
    }

    // optional uint32 titlePlaceholderTextStyleIndex = 13;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_titleplaceholdertextstyleindex());
    }

    // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bodyplaceholdershapestyleindex());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional uint32 bodyPlaceholderTextStyleIndex = 16;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bodyplaceholdertextstyleindex());
    }

    // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slidenumberplaceholdershapestyleindex());
    }

    // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slidenumberplaceholdertextstyleindex());
    }

    // optional bool slide_objects_layer_with_template = 41 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x60000000u) {
    // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive::GetClassData() const { return &_class_data_; }

void SlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideArchive *>(to)->MergeFrom(
      static_cast<const SlideArchive &>(from));
}


void SlideArchive::MergeFrom(const SlideArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  builds_.MergeFrom(from.builds_);
  buildchunkarchives_.MergeFrom(from.buildchunkarchives_);
  owned_drawables_.MergeFrom(from.owned_drawables_);
  staticguides_.MergeFrom(from.staticguides_);
  sage_tag_to_info_map_.MergeFrom(from.sage_tag_to_info_map_);
  bodyparagraphstyles_.MergeFrom(from.bodyparagraphstyles_);
  bodyliststyles_.MergeFrom(from.bodyliststyles_);
  drawables_z_order_.MergeFrom(from.drawables_z_order_);
  buildchunks_.MergeFrom(from.buildchunks_);
  infos_using_object_placeholder_geometry_.MergeFrom(from.infos_using_object_placeholder_geometry_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_thumbnailtextfortitleplaceholder(from._internal_thumbnailtextfortitleplaceholder());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_thumbnailtextforbodyplaceholder(from._internal_thumbnailtextforbodyplaceholder());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_transition()->::KN::TransitionArchive::MergeFrom(from._internal_transition());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_titleplaceholder()->::TSP::Reference::MergeFrom(from._internal_titleplaceholder());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_bodyplaceholder()->::TSP::Reference::MergeFrom(from._internal_bodyplaceholder());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_titleplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(from._internal_titleplaceholdergeometry());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_bodyplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(from._internal_bodyplaceholdergeometry());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_template_slide()->::TSP::Reference::MergeFrom(from._internal_template_slide());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_slidenumberplaceholder()->::TSP::Reference::MergeFrom(from._internal_slidenumberplaceholder());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_slidenumberplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(from._internal_slidenumberplaceholdergeometry());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_titlelayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(from._internal_titlelayoutproperties());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_bodylayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(from._internal_bodylayoutproperties());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_slidenumberlayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(from._internal_slidenumberlayoutproperties());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_note()->::TSP::Reference::MergeFrom(from._internal_note());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_classicstylesheetrecord()->::TSP::Reference::MergeFrom(from._internal_classicstylesheetrecord());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_objectplaceholder()->::TSP::Reference::MergeFrom(from._internal_objectplaceholder());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_userdefinedguidestorage()->::TSP::Reference::MergeFrom(from._internal_userdefinedguidestorage());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_info_using_object_placeholder_geometry()->::TSP::Reference::MergeFrom(from._internal_info_using_object_placeholder_geometry());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_instructional_text_map()->::KN::SlideArchive_InstructionalTextMap::MergeFrom(from._internal_instructional_text_map());
    }
    if (cached_has_bits & 0x00200000u) {
      titleplaceholdershapestyleindex_ = from.titleplaceholdershapestyleindex_;
    }
    if (cached_has_bits & 0x00400000u) {
      titleplaceholdertextstyleindex_ = from.titleplaceholdertextstyleindex_;
    }
    if (cached_has_bits & 0x00800000u) {
      bodyplaceholdershapestyleindex_ = from.bodyplaceholdershapestyleindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      bodyplaceholdertextstyleindex_ = from.bodyplaceholdertextstyleindex_;
    }
    if (cached_has_bits & 0x02000000u) {
      slidenumberplaceholdershapestyleindex_ = from.slidenumberplaceholdershapestyleindex_;
    }
    if (cached_has_bits & 0x04000000u) {
      slidenumberplaceholdertextstyleindex_ = from.slidenumberplaceholdertextstyleindex_;
    }
    if (cached_has_bits & 0x08000000u) {
      slide_objects_layer_with_template_ = from.slide_objects_layer_with_template_;
    }
    if (cached_has_bits & 0x10000000u) {
      indocument_ = from.indocument_;
    }
    if (cached_has_bits & 0x20000000u) {
      deprecated_objectplaceholdervisibleforexport_ = from.deprecated_objectplaceholdervisibleforexport_;
    }
    if (cached_has_bits & 0x40000000u) {
      info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = from.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive::CopyFrom(const SlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(builds_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(buildchunkarchives_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(owned_drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sage_tag_to_info_map_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bodyparagraphstyles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bodyliststyles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_z_order_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(buildchunks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(infos_using_object_placeholder_geometry_)) return false;
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  if (_internal_has_transition()) {
    if (!transition_->IsInitialized()) return false;
  }
  if (_internal_has_titleplaceholder()) {
    if (!titleplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_bodyplaceholder()) {
    if (!bodyplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_titleplaceholdergeometry()) {
    if (!titleplaceholdergeometry_->IsInitialized()) return false;
  }
  if (_internal_has_bodyplaceholdergeometry()) {
    if (!bodyplaceholdergeometry_->IsInitialized()) return false;
  }
  if (_internal_has_template_slide()) {
    if (!template_slide_->IsInitialized()) return false;
  }
  if (_internal_has_slidenumberplaceholder()) {
    if (!slidenumberplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_slidenumberplaceholdergeometry()) {
    if (!slidenumberplaceholdergeometry_->IsInitialized()) return false;
  }
  if (_internal_has_titlelayoutproperties()) {
    if (!titlelayoutproperties_->IsInitialized()) return false;
  }
  if (_internal_has_bodylayoutproperties()) {
    if (!bodylayoutproperties_->IsInitialized()) return false;
  }
  if (_internal_has_slidenumberlayoutproperties()) {
    if (!slidenumberlayoutproperties_->IsInitialized()) return false;
  }
  if (_internal_has_note()) {
    if (!note_->IsInitialized()) return false;
  }
  if (_internal_has_classicstylesheetrecord()) {
    if (!classicstylesheetrecord_->IsInitialized()) return false;
  }
  if (_internal_has_objectplaceholder()) {
    if (!objectplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_userdefinedguidestorage()) {
    if (!userdefinedguidestorage_->IsInitialized()) return false;
  }
  if (_internal_has_info_using_object_placeholder_geometry()) {
    if (!info_using_object_placeholder_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_instructional_text_map()) {
    if (!instructional_text_map_->IsInitialized()) return false;
  }
  return true;
}

void SlideArchive::InternalSwap(SlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  builds_.InternalSwap(&other->builds_);
  buildchunkarchives_.InternalSwap(&other->buildchunkarchives_);
  owned_drawables_.InternalSwap(&other->owned_drawables_);
  staticguides_.InternalSwap(&other->staticguides_);
  sage_tag_to_info_map_.InternalSwap(&other->sage_tag_to_info_map_);
  bodyparagraphstyles_.InternalSwap(&other->bodyparagraphstyles_);
  bodyliststyles_.InternalSwap(&other->bodyliststyles_);
  drawables_z_order_.InternalSwap(&other->drawables_z_order_);
  buildchunks_.InternalSwap(&other->buildchunks_);
  infos_using_object_placeholder_geometry_.InternalSwap(&other->infos_using_object_placeholder_geometry_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnailtextfortitleplaceholder_, GetArenaForAllocation(),
      &other->thumbnailtextfortitleplaceholder_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnailtextforbodyplaceholder_, GetArenaForAllocation(),
      &other->thumbnailtextforbodyplaceholder_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideArchive, info_using_object_placeholder_geometry_matches_object_placeholder_geometry_)
      + sizeof(SlideArchive::info_using_object_placeholder_geometry_matches_object_placeholder_geometry_)
      - PROTOBUF_FIELD_OFFSET(SlideArchive, style_)>(
          reinterpret_cast<char*>(&style_),
          reinterpret_cast<char*>(&other->style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[16]);
}

// ===================================================================

class SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideNodeArchive_SlideSpecificHyperlinkMapEntry>()._has_bits_);
  static void set_has_slidenodeidstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SlideNodeArchive_SlideSpecificHyperlinkMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  infoorstorageidstring_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
}
SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SlideNodeArchive_SlideSpecificHyperlinkMapEntry(const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      infoorstorageidstring_(from.infoorstorageidstring_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slidenodeidstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_slidenodeidstring()) {
    slidenodeidstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slidenodeidstring(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
}

inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SharedCtor() {
slidenodeidstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SlideNodeArchive_SlideSpecificHyperlinkMapEntry::~SlideNodeArchive_SlideSpecificHyperlinkMapEntry() {
  // @@protoc_insertion_point(destructor:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  slidenodeidstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::ArenaDtor(void* object) {
  SlideNodeArchive_SlideSpecificHyperlinkMapEntry* _this = reinterpret_cast< SlideNodeArchive_SlideSpecificHyperlinkMapEntry* >(object);
  (void)_this;
}
void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infoorstorageidstring_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    slidenodeidstring_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string slideNodeIDString = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_slidenodeidstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.slideNodeIDString");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string infoOrStorageIDString = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_infoorstorageidstring();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string slideNodeIDString = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_slidenodeidstring().data(), static_cast<int>(this->_internal_slidenodeidstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.slideNodeIDString");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slidenodeidstring(), target);
  }

  // repeated string infoOrStorageIDString = 2;
  for (int i = 0, n = this->_internal_infoorstorageidstring_size(); i < n; i++) {
    const auto& s = this->_internal_infoorstorageidstring(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  return target;
}

size_t SlideNodeArchive_SlideSpecificHyperlinkMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  size_t total_size = 0;

  // required string slideNodeIDString = 1;
  if (_internal_has_slidenodeidstring()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slidenodeidstring());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string infoOrStorageIDString = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(infoorstorageidstring_.size());
  for (int i = 0, n = infoorstorageidstring_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      infoorstorageidstring_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideNodeArchive_SlideSpecificHyperlinkMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideNodeArchive_SlideSpecificHyperlinkMapEntry::GetClassData() const { return &_class_data_; }

void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideNodeArchive_SlideSpecificHyperlinkMapEntry *>(to)->MergeFrom(
      static_cast<const SlideNodeArchive_SlideSpecificHyperlinkMapEntry &>(from));
}


void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::MergeFrom(const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infoorstorageidstring_.MergeFrom(from.infoorstorageidstring_);
  if (from._internal_has_slidenodeidstring()) {
    _internal_set_slidenodeidstring(from._internal_slidenodeidstring());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::CopyFrom(const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNodeArchive_SlideSpecificHyperlinkMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::InternalSwap(SlideNodeArchive_SlideSpecificHyperlinkMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infoorstorageidstring_.InternalSwap(&other->infoorstorageidstring_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &slidenodeidstring_, GetArenaForAllocation(),
      &other->slidenodeidstring_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideNodeArchive_SlideSpecificHyperlinkMapEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[17]);
}

// ===================================================================

class SlideNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideNodeArchive>()._has_bits_);
  static const ::TSP::Reference& slide(const SlideNodeArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_thumbnailsaredirty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ishidden(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iscollapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iscollapsedinoutlineview(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hasbodyinoutlineview(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hasbuilds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hastransition(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hasnote(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_isslidenumbervisible(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_uniqueidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_copyfromslideidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slidespecifichyperlinkcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_build_event_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_build_event_count_cache_version(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_build_event_count_is_up_to_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_has_explicit_builds(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_has_explicit_builds_cache_version(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_has_explicit_builds_is_up_to_date(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_has_background_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::Reference& database_thumbnail(const SlideNodeArchive* msg);
  static void set_has_database_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000620) ^ 0x00000620) != 0;
  }
};

const ::TSP::Reference&
SlideNodeArchive::_Internal::slide(const SlideNodeArchive* msg) {
  return *msg->slide_;
}
const ::TSP::Reference&
SlideNodeArchive::_Internal::database_thumbnail(const SlideNodeArchive* msg) {
  return *msg->database_thumbnail_;
}
void SlideNodeArchive::clear_children() {
  children_.Clear();
}
void SlideNodeArchive::clear_slide() {
  if (slide_ != nullptr) slide_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SlideNodeArchive::clear_thumbnails() {
  thumbnails_.Clear();
}
void SlideNodeArchive::clear_thumbnailsizes() {
  thumbnailsizes_.Clear();
}
void SlideNodeArchive::clear_database_thumbnail() {
  if (database_thumbnail_ != nullptr) database_thumbnail_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SlideNodeArchive::clear_database_thumbnails() {
  database_thumbnails_.Clear();
}
SlideNodeArchive::SlideNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  children_(arena),
  database_thumbnails_(arena),
  thumbnailsizes_(arena),
  thumbnails_(arena),
  slidespecifichyperlinkmap_(arena),
  digests_for_datas_needing_download_for_thumbnail_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideNodeArchive)
}
SlideNodeArchive::SlideNodeArchive(const SlideNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      children_(from.children_),
      database_thumbnails_(from.database_thumbnails_),
      thumbnailsizes_(from.thumbnailsizes_),
      thumbnails_(from.thumbnails_),
      slidespecifichyperlinkmap_(from.slidespecifichyperlinkmap_),
      digests_for_datas_needing_download_for_thumbnail_(from.digests_for_datas_needing_download_for_thumbnail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uniqueidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uniqueidentifier()) {
    uniqueidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uniqueidentifier(), 
      GetArenaForAllocation());
  }
  copyfromslideidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_copyfromslideidentifier()) {
    copyfromslideidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_copyfromslideidentifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_slide()) {
    slide_ = new ::TSP::Reference(*from.slide_);
  } else {
    slide_ = nullptr;
  }
  if (from._internal_has_database_thumbnail()) {
    database_thumbnail_ = new ::TSP::Reference(*from.database_thumbnail_);
  } else {
    database_thumbnail_ = nullptr;
  }
  ::memcpy(&thumbnailsaredirty_, &from.thumbnailsaredirty_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&thumbnailsaredirty_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideNodeArchive)
}

inline void SlideNodeArchive::SharedCtor() {
uniqueidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
copyfromslideidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slide_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_background_alpha_) -
    reinterpret_cast<char*>(&slide_)) + sizeof(has_background_alpha_));
depth_ = 1u;
}

SlideNodeArchive::~SlideNodeArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uniqueidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  copyfromslideidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete slide_;
  if (this != internal_default_instance()) delete database_thumbnail_;
}

void SlideNodeArchive::ArenaDtor(void* object) {
  SlideNodeArchive* _this = reinterpret_cast< SlideNodeArchive* >(object);
  (void)_this;
}
void SlideNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  database_thumbnails_.Clear();
  thumbnailsizes_.Clear();
  thumbnails_.Clear();
  slidespecifichyperlinkmap_.Clear();
  digests_for_datas_needing_download_for_thumbnail_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      uniqueidentifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      copyfromslideidentifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(slide_ != nullptr);
      slide_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(database_thumbnail_ != nullptr);
      database_thumbnail_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&thumbnailsaredirty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iscollapsedinoutlineview_) -
        reinterpret_cast<char*>(&thumbnailsaredirty_)) + sizeof(iscollapsedinoutlineview_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&hasbodyinoutlineview_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_event_count_is_up_to_date_) -
        reinterpret_cast<char*>(&hasbodyinoutlineview_)) + sizeof(build_event_count_is_up_to_date_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&has_explicit_builds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_background_alpha_) -
        reinterpret_cast<char*>(&has_explicit_builds_)) + sizeof(has_background_alpha_));
    depth_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_thumbnail = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_thumbnail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isHidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ishidden(&has_bits);
          ishidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isCollapsed = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iscollapsed(&has_bits);
          iscollapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool hasBuilds = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_hasbuilds(&has_bits);
          hasbuilds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool hasTransition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hastransition(&has_bits);
          hastransition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hasNote = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_hasnote(&has_bits);
          hasnote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference database_thumbnails = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_database_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Size thumbnailSizes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thumbnailsizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string uniqueIdentifier = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_uniqueidentifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideNodeArchive.uniqueIdentifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string copyFromSlideIdentifier = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_copyfromslideidentifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideNodeArchive.copyFromSlideIdentifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slideSpecificHyperlinkCount = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_slidespecifichyperlinkcount(&has_bits);
          slidespecifichyperlinkcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool thumbnailsAreDirty = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_thumbnailsaredirty(&has_bits);
          thumbnailsaredirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 build_event_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_build_event_count(&has_bits);
          build_event_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.DataReference thumbnails = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool isCollapsedInOutlineView = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_iscollapsedinoutlineview(&has_bits);
          iscollapsedinoutlineview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isSlideNumberVisible = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_isslidenumbervisible(&has_bits);
          isslidenumbervisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hasBodyInOutlineView = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_hasbodyinoutlineview(&has_bits);
          hasbodyinoutlineview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_explicit_builds = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_has_explicit_builds(&has_bits);
          has_explicit_builds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 depth = 21 [default = 1];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool build_event_count_is_up_to_date = 22 [deprecated = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_build_event_count_is_up_to_date(&has_bits);
          build_event_count_is_up_to_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_explicit_builds_is_up_to_date = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_has_explicit_builds_is_up_to_date(&has_bits);
          has_explicit_builds_is_up_to_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry slideSpecificHyperlinkMap = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_slidespecifichyperlinkmap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string digests_for_datas_needing_download_for_thumbnail = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_digests_for_datas_needing_download_for_thumbnail();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 build_event_count_cache_version = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_build_event_count_cache_version(&has_bits);
          build_event_count_cache_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 has_explicit_builds_cache_version = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_has_explicit_builds_cache_version(&has_bits);
          has_explicit_builds_cache_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_background_alpha = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_has_background_alpha(&has_bits);
          has_background_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_children(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide(this), target, stream);
  }

  // optional .TSP.Reference database_thumbnail = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::database_thumbnail(this), target, stream);
  }

  // required bool isHidden = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ishidden(), target);
  }

  // optional bool isCollapsed = 5 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_iscollapsed(), target);
  }

  // required bool hasBuilds = 6 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hasbuilds(), target);
  }

  // required bool hasTransition = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hastransition(), target);
  }

  // optional bool hasNote = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_hasnote(), target);
  }

  // repeated .TSP.Reference database_thumbnails = 9 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_database_thumbnails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_database_thumbnails(i), target, stream);
  }

  // repeated .TSP.Size thumbnailSizes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_thumbnailsizes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_thumbnailsizes(i), target, stream);
  }

  // optional string uniqueIdentifier = 11 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uniqueidentifier().data(), static_cast<int>(this->_internal_uniqueidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.uniqueIdentifier");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_uniqueidentifier(), target);
  }

  // optional string copyFromSlideIdentifier = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_copyfromslideidentifier().data(), static_cast<int>(this->_internal_copyfromslideidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.copyFromSlideIdentifier");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_copyfromslideidentifier(), target);
  }

  // optional uint32 slideSpecificHyperlinkCount = 13 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_slidespecifichyperlinkcount(), target);
  }

  // optional bool thumbnailsAreDirty = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_thumbnailsaredirty(), target);
  }

  // optional uint32 build_event_count = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_build_event_count(), target);
  }

  // repeated .TSP.DataReference thumbnails = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_thumbnails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_thumbnails(i), target, stream);
  }

  // optional bool isCollapsedInOutlineView = 17 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_iscollapsedinoutlineview(), target);
  }

  // optional bool isSlideNumberVisible = 18 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_isslidenumbervisible(), target);
  }

  // optional bool hasBodyInOutlineView = 19 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_hasbodyinoutlineview(), target);
  }

  // optional bool has_explicit_builds = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_has_explicit_builds(), target);
  }

  // optional uint32 depth = 21 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_depth(), target);
  }

  // optional bool build_event_count_is_up_to_date = 22 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_build_event_count_is_up_to_date(), target);
  }

  // optional bool has_explicit_builds_is_up_to_date = 23 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_has_explicit_builds_is_up_to_date(), target);
  }

  // repeated .KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry slideSpecificHyperlinkMap = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slidespecifichyperlinkmap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_slidespecifichyperlinkmap(i), target, stream);
  }

  // repeated string digests_for_datas_needing_download_for_thumbnail = 25;
  for (int i = 0, n = this->_internal_digests_for_datas_needing_download_for_thumbnail_size(); i < n; i++) {
    const auto& s = this->_internal_digests_for_datas_needing_download_for_thumbnail(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail");
    target = stream->WriteString(25, s, target);
  }

  // optional uint32 build_event_count_cache_version = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_build_event_count_cache_version(), target);
  }

  // optional uint32 has_explicit_builds_cache_version = 27;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_has_explicit_builds_cache_version(), target);
  }

  // optional bool has_background_alpha = 28;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_has_background_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideNodeArchive)
  return target;
}

size_t SlideNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideNodeArchive)
  size_t total_size = 0;

  if (_internal_has_ishidden()) {
    // required bool isHidden = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_hasbuilds()) {
    // required bool hasBuilds = 6 [deprecated = true];
    total_size += 1 + 1;
  }

  if (_internal_has_hastransition()) {
    // required bool hasTransition = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SlideNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000620) ^ 0x00000620) == 0) {  // All required fields are present.
    // required bool isHidden = 4;
    total_size += 1 + 1;

    // required bool hasBuilds = 6 [deprecated = true];
    total_size += 1 + 1;

    // required bool hasTransition = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference database_thumbnails = 9 [deprecated = true];
  total_size += 1UL * this->_internal_database_thumbnails_size();
  for (const auto& msg : this->database_thumbnails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Size thumbnailSizes = 10;
  total_size += 1UL * this->_internal_thumbnailsizes_size();
  for (const auto& msg : this->thumbnailsizes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataReference thumbnails = 16;
  total_size += 2UL * this->_internal_thumbnails_size();
  for (const auto& msg : this->thumbnails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry slideSpecificHyperlinkMap = 24;
  total_size += 2UL * this->_internal_slidespecifichyperlinkmap_size();
  for (const auto& msg : this->slidespecifichyperlinkmap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string digests_for_datas_needing_download_for_thumbnail = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(digests_for_datas_needing_download_for_thumbnail_.size());
  for (int i = 0, n = digests_for_datas_needing_download_for_thumbnail_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      digests_for_datas_needing_download_for_thumbnail_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string uniqueIdentifier = 11 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uniqueidentifier());
    }

    // optional string copyFromSlideIdentifier = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_copyfromslideidentifier());
    }

    // optional .TSP.Reference slide = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slide_);
    }

    // optional .TSP.Reference database_thumbnail = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_thumbnail_);
    }

    // optional bool thumbnailsAreDirty = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional bool isCollapsed = 5 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool isCollapsedInOutlineView = 17 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  // optional bool hasBodyInOutlineView = 19 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 + 1;
  }

  if (cached_has_bits & 0x0000f800u) {
    // optional bool hasNote = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 slideSpecificHyperlinkCount = 13 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slidespecifichyperlinkcount());
    }

    // optional uint32 build_event_count = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_build_event_count());
    }

    // optional bool isSlideNumberVisible = 18 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool build_event_count_is_up_to_date = 22 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional bool has_explicit_builds = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool has_explicit_builds_is_up_to_date = 23 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 build_event_count_cache_version = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_build_event_count_cache_version());
    }

    // optional uint32 has_explicit_builds_cache_version = 27;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_has_explicit_builds_cache_version());
    }

    // optional bool has_background_alpha = 28;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional uint32 depth = 21 [default = 1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_depth());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideNodeArchive::GetClassData() const { return &_class_data_; }

void SlideNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideNodeArchive *>(to)->MergeFrom(
      static_cast<const SlideNodeArchive &>(from));
}


void SlideNodeArchive::MergeFrom(const SlideNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  database_thumbnails_.MergeFrom(from.database_thumbnails_);
  thumbnailsizes_.MergeFrom(from.thumbnailsizes_);
  thumbnails_.MergeFrom(from.thumbnails_);
  slidespecifichyperlinkmap_.MergeFrom(from.slidespecifichyperlinkmap_);
  digests_for_datas_needing_download_for_thumbnail_.MergeFrom(from.digests_for_datas_needing_download_for_thumbnail_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uniqueidentifier(from._internal_uniqueidentifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_copyfromslideidentifier(from._internal_copyfromslideidentifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_slide()->::TSP::Reference::MergeFrom(from._internal_slide());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_database_thumbnail()->::TSP::Reference::MergeFrom(from._internal_database_thumbnail());
    }
    if (cached_has_bits & 0x00000010u) {
      thumbnailsaredirty_ = from.thumbnailsaredirty_;
    }
    if (cached_has_bits & 0x00000020u) {
      ishidden_ = from.ishidden_;
    }
    if (cached_has_bits & 0x00000040u) {
      iscollapsed_ = from.iscollapsed_;
    }
    if (cached_has_bits & 0x00000080u) {
      iscollapsedinoutlineview_ = from.iscollapsedinoutlineview_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      hasbodyinoutlineview_ = from.hasbodyinoutlineview_;
    }
    if (cached_has_bits & 0x00000200u) {
      hasbuilds_ = from.hasbuilds_;
    }
    if (cached_has_bits & 0x00000400u) {
      hastransition_ = from.hastransition_;
    }
    if (cached_has_bits & 0x00000800u) {
      hasnote_ = from.hasnote_;
    }
    if (cached_has_bits & 0x00001000u) {
      slidespecifichyperlinkcount_ = from.slidespecifichyperlinkcount_;
    }
    if (cached_has_bits & 0x00002000u) {
      build_event_count_ = from.build_event_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      isslidenumbervisible_ = from.isslidenumbervisible_;
    }
    if (cached_has_bits & 0x00008000u) {
      build_event_count_is_up_to_date_ = from.build_event_count_is_up_to_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      has_explicit_builds_ = from.has_explicit_builds_;
    }
    if (cached_has_bits & 0x00020000u) {
      has_explicit_builds_is_up_to_date_ = from.has_explicit_builds_is_up_to_date_;
    }
    if (cached_has_bits & 0x00040000u) {
      build_event_count_cache_version_ = from.build_event_count_cache_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      has_explicit_builds_cache_version_ = from.has_explicit_builds_cache_version_;
    }
    if (cached_has_bits & 0x00100000u) {
      has_background_alpha_ = from.has_background_alpha_;
    }
    if (cached_has_bits & 0x00200000u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideNodeArchive::CopyFrom(const SlideNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(children_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(database_thumbnails_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(thumbnailsizes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(thumbnails_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slidespecifichyperlinkmap_)) return false;
  if (_internal_has_slide()) {
    if (!slide_->IsInitialized()) return false;
  }
  if (_internal_has_database_thumbnail()) {
    if (!database_thumbnail_->IsInitialized()) return false;
  }
  return true;
}

void SlideNodeArchive::InternalSwap(SlideNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  children_.InternalSwap(&other->children_);
  database_thumbnails_.InternalSwap(&other->database_thumbnails_);
  thumbnailsizes_.InternalSwap(&other->thumbnailsizes_);
  thumbnails_.InternalSwap(&other->thumbnails_);
  slidespecifichyperlinkmap_.InternalSwap(&other->slidespecifichyperlinkmap_);
  digests_for_datas_needing_download_for_thumbnail_.InternalSwap(&other->digests_for_datas_needing_download_for_thumbnail_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uniqueidentifier_, GetArenaForAllocation(),
      &other->uniqueidentifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &copyfromslideidentifier_, GetArenaForAllocation(),
      &other->copyfromslideidentifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideNodeArchive, has_background_alpha_)
      + sizeof(SlideNodeArchive::has_background_alpha_)
      - PROTOBUF_FIELD_OFFSET(SlideNodeArchive, slide_)>(
          reinterpret_cast<char*>(&slide_),
          reinterpret_cast<char*>(&other->slide_));
  swap(depth_, other->depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[18]);
}

// ===================================================================

class DesktopUILayoutArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DesktopUILayoutArchive>()._has_bits_);
  static void set_has_sidebar_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sidebar_view_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notes_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_light_table_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inspector_pane_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_inspector_pane_view_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_showing_template_slides(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inspector_pane_autohidden(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_element_list_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

DesktopUILayoutArchive::DesktopUILayoutArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.DesktopUILayoutArchive)
}
DesktopUILayoutArchive::DesktopUILayoutArchive(const DesktopUILayoutArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sidebar_view_mode_, &from.sidebar_view_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&inspector_pane_visible_) -
    reinterpret_cast<char*>(&sidebar_view_mode_)) + sizeof(inspector_pane_visible_));
  // @@protoc_insertion_point(copy_constructor:KN.DesktopUILayoutArchive)
}

inline void DesktopUILayoutArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sidebar_view_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&element_list_visible_) -
    reinterpret_cast<char*>(&sidebar_view_mode_)) + sizeof(element_list_visible_));
inspector_pane_visible_ = true;
}

DesktopUILayoutArchive::~DesktopUILayoutArchive() {
  // @@protoc_insertion_point(destructor:KN.DesktopUILayoutArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DesktopUILayoutArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DesktopUILayoutArchive::ArenaDtor(void* object) {
  DesktopUILayoutArchive* _this = reinterpret_cast< DesktopUILayoutArchive* >(object);
  (void)_this;
}
void DesktopUILayoutArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DesktopUILayoutArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DesktopUILayoutArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.DesktopUILayoutArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&sidebar_view_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&element_list_visible_) -
        reinterpret_cast<char*>(&sidebar_view_mode_)) + sizeof(element_list_visible_));
  }
  inspector_pane_visible_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DesktopUILayoutArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool sidebar_visible = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sidebar_visible(&has_bits);
          sidebar_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::DesktopUILayoutArchive_SidebarViewMode_IsValid(val))) {
            _internal_set_sidebar_view_mode(static_cast<::KN::DesktopUILayoutArchive_SidebarViewMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool notes_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_notes_visible(&has_bits);
          notes_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool light_table_visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_light_table_visible(&has_bits);
          light_table_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inspector_pane_visible = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_inspector_pane_visible(&has_bits);
          inspector_pane_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(val))) {
            _internal_set_inspector_pane_view_mode(static_cast<::KN::DesktopUILayoutArchive_InspectorPaneViewMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool showing_template_slides = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_showing_template_slides(&has_bits);
          showing_template_slides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inspector_pane_autohidden = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_inspector_pane_autohidden(&has_bits);
          inspector_pane_autohidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool element_list_visible = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_element_list_visible(&has_bits);
          element_list_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DesktopUILayoutArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.DesktopUILayoutArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool sidebar_visible = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_sidebar_visible(), target);
  }

  // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sidebar_view_mode(), target);
  }

  // optional bool notes_visible = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_notes_visible(), target);
  }

  // optional bool light_table_visible = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_light_table_visible(), target);
  }

  // optional bool inspector_pane_visible = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_inspector_pane_visible(), target);
  }

  // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_inspector_pane_view_mode(), target);
  }

  // optional bool showing_template_slides = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_showing_template_slides(), target);
  }

  // optional bool inspector_pane_autohidden = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_inspector_pane_autohidden(), target);
  }

  // optional bool element_list_visible = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_element_list_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.DesktopUILayoutArchive)
  return target;
}

size_t DesktopUILayoutArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.DesktopUILayoutArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sidebar_view_mode());
    }

    // optional bool sidebar_visible = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool notes_visible = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool light_table_visible = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool showing_template_slides = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inspector_pane_view_mode());
    }

    // optional bool inspector_pane_autohidden = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool element_list_visible = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool inspector_pane_visible = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DesktopUILayoutArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DesktopUILayoutArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DesktopUILayoutArchive::GetClassData() const { return &_class_data_; }

void DesktopUILayoutArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DesktopUILayoutArchive *>(to)->MergeFrom(
      static_cast<const DesktopUILayoutArchive &>(from));
}


void DesktopUILayoutArchive::MergeFrom(const DesktopUILayoutArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.DesktopUILayoutArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      sidebar_view_mode_ = from.sidebar_view_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      sidebar_visible_ = from.sidebar_visible_;
    }
    if (cached_has_bits & 0x00000004u) {
      notes_visible_ = from.notes_visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      light_table_visible_ = from.light_table_visible_;
    }
    if (cached_has_bits & 0x00000010u) {
      showing_template_slides_ = from.showing_template_slides_;
    }
    if (cached_has_bits & 0x00000020u) {
      inspector_pane_view_mode_ = from.inspector_pane_view_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      inspector_pane_autohidden_ = from.inspector_pane_autohidden_;
    }
    if (cached_has_bits & 0x00000080u) {
      element_list_visible_ = from.element_list_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_inspector_pane_visible(from._internal_inspector_pane_visible());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DesktopUILayoutArchive::CopyFrom(const DesktopUILayoutArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.DesktopUILayoutArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopUILayoutArchive::IsInitialized() const {
  return true;
}

void DesktopUILayoutArchive::InternalSwap(DesktopUILayoutArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DesktopUILayoutArchive, element_list_visible_)
      + sizeof(DesktopUILayoutArchive::element_list_visible_)
      - PROTOBUF_FIELD_OFFSET(DesktopUILayoutArchive, sidebar_view_mode_)>(
          reinterpret_cast<char*>(&sidebar_view_mode_),
          reinterpret_cast<char*>(&other->sidebar_view_mode_));
  swap(inspector_pane_visible_, other->inspector_pane_visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DesktopUILayoutArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[19]);
}

// ===================================================================

class UIStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateArchive>()._has_bits_);
  static const ::TSP::Reference& slidenodetoedit(const UIStateArchive* msg);
  static void set_has_slidenodetoedit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& deprecated_template_slide_node_to_apply(const UIStateArchive* msg);
  static void set_has_deprecated_template_slide_node_to_apply(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& deprecated_slidethumbnailsize(const UIStateArchive* msg);
  static void set_has_deprecated_slidethumbnailsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_canvasviewscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Point& canvasoffset(const UIStateArchive* msg);
  static void set_has_canvasoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iphonecanvasviewscale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Point& iphonecanvasoffset(const UIStateArchive* msg);
  static void set_has_iphonecanvasoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iphone568canvasviewscale(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Point& iphone568canvasoffset(const UIStateArchive* msg);
  static void set_has_iphone568canvasoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& desktop_ui_layout(const UIStateArchive* msg);
  static void set_has_desktop_ui_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_desktop_slide_view_content_fits_window(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_desktop_canvas_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Point& desktop_canvas_offset(const UIStateArchive* msg);
  static void set_has_desktop_canvas_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_light_table_zoom_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_show_slide_guides(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_show_template_guides(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_shows_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_comments_printing_toggle_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_shows_ruler(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_desktop_navigator_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_desktop_outline_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_desktop_outline_view_default_fixed(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSP::Size& desktop_main_content_size(const UIStateArchive* msg);
  static void set_has_desktop_main_content_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_desktop_presenter_notes_view_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSP::Point& desktop_main_window_origin(const UIStateArchive* msg);
  static void set_has_desktop_main_window_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_light_table_hides_skipped_slides(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSK::SelectionPathArchive& selection_path(const UIStateArchive* msg);
  static void set_has_selection_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_desktop_element_list_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_shows_mobile_light_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_mobile_light_table_zoom_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_mobile_light_table_hides_skipped_slides(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSP::Reference& freehand_drawing_toolkit_state(const UIStateArchive* msg);
  static void set_has_freehand_drawing_toolkit_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& selection_path_transformer(const UIStateArchive* msg);
  static void set_has_selection_path_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_shows_mobile_outline(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_editing_disabled(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::TSP::Reference&
UIStateArchive::_Internal::slidenodetoedit(const UIStateArchive* msg) {
  return *msg->slidenodetoedit_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::deprecated_template_slide_node_to_apply(const UIStateArchive* msg) {
  return *msg->deprecated_template_slide_node_to_apply_;
}
const ::TSP::Size&
UIStateArchive::_Internal::deprecated_slidethumbnailsize(const UIStateArchive* msg) {
  return *msg->deprecated_slidethumbnailsize_;
}
const ::TSP::Point&
UIStateArchive::_Internal::canvasoffset(const UIStateArchive* msg) {
  return *msg->canvasoffset_;
}
const ::TSP::Point&
UIStateArchive::_Internal::iphonecanvasoffset(const UIStateArchive* msg) {
  return *msg->iphonecanvasoffset_;
}
const ::TSP::Point&
UIStateArchive::_Internal::iphone568canvasoffset(const UIStateArchive* msg) {
  return *msg->iphone568canvasoffset_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::desktop_ui_layout(const UIStateArchive* msg) {
  return *msg->desktop_ui_layout_;
}
const ::TSP::Point&
UIStateArchive::_Internal::desktop_canvas_offset(const UIStateArchive* msg) {
  return *msg->desktop_canvas_offset_;
}
const ::TSP::Size&
UIStateArchive::_Internal::desktop_main_content_size(const UIStateArchive* msg) {
  return *msg->desktop_main_content_size_;
}
const ::TSP::Point&
UIStateArchive::_Internal::desktop_main_window_origin(const UIStateArchive* msg) {
  return *msg->desktop_main_window_origin_;
}
const ::TSK::SelectionPathArchive&
UIStateArchive::_Internal::selection_path(const UIStateArchive* msg) {
  return *msg->selection_path_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::freehand_drawing_toolkit_state(const UIStateArchive* msg) {
  return *msg->freehand_drawing_toolkit_state_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::selection_path_transformer(const UIStateArchive* msg) {
  return *msg->selection_path_transformer_;
}
void UIStateArchive::clear_slidenodetoedit() {
  if (slidenodetoedit_ != nullptr) slidenodetoedit_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UIStateArchive::clear_deprecated_template_slide_node_to_apply() {
  if (deprecated_template_slide_node_to_apply_ != nullptr) deprecated_template_slide_node_to_apply_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UIStateArchive::clear_deprecated_slidethumbnailsize() {
  if (deprecated_slidethumbnailsize_ != nullptr) deprecated_slidethumbnailsize_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void UIStateArchive::clear_canvasoffset() {
  if (canvasoffset_ != nullptr) canvasoffset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void UIStateArchive::clear_selectedslidenodes() {
  selectedslidenodes_.Clear();
}
void UIStateArchive::clear_iphonecanvasoffset() {
  if (iphonecanvasoffset_ != nullptr) iphonecanvasoffset_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void UIStateArchive::clear_iphone568canvasoffset() {
  if (iphone568canvasoffset_ != nullptr) iphone568canvasoffset_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void UIStateArchive::clear_desktop_ui_layout() {
  if (desktop_ui_layout_ != nullptr) desktop_ui_layout_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void UIStateArchive::clear_desktop_canvas_offset() {
  if (desktop_canvas_offset_ != nullptr) desktop_canvas_offset_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void UIStateArchive::clear_chart_ui_state() {
  chart_ui_state_.Clear();
}
void UIStateArchive::clear_collapsed_slide_nodes() {
  collapsed_slide_nodes_.Clear();
}
void UIStateArchive::clear_outline_collapsed_slide_nodes() {
  outline_collapsed_slide_nodes_.Clear();
}
void UIStateArchive::clear_outline_has_body_slide_nodes() {
  outline_has_body_slide_nodes_.Clear();
}
void UIStateArchive::clear_desktop_main_content_size() {
  if (desktop_main_content_size_ != nullptr) desktop_main_content_size_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void UIStateArchive::clear_desktop_main_window_origin() {
  if (desktop_main_window_origin_ != nullptr) desktop_main_window_origin_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void UIStateArchive::clear_selection_path() {
  if (selection_path_ != nullptr) selection_path_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void UIStateArchive::clear_element_list_expanded_groups() {
  element_list_expanded_groups_.Clear();
}
void UIStateArchive::clear_freehand_drawing_toolkit_state() {
  if (freehand_drawing_toolkit_state_ != nullptr) freehand_drawing_toolkit_state_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void UIStateArchive::clear_selection_path_transformer() {
  if (selection_path_transformer_ != nullptr) selection_path_transformer_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
UIStateArchive::UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  selectedslidenodes_(arena),
  chart_ui_state_(arena),
  collapsed_slide_nodes_(arena),
  outline_collapsed_slide_nodes_(arena),
  outline_has_body_slide_nodes_(arena),
  element_list_expanded_groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.UIStateArchive)
}
UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      selectedslidenodes_(from.selectedslidenodes_),
      chart_ui_state_(from.chart_ui_state_),
      collapsed_slide_nodes_(from.collapsed_slide_nodes_),
      outline_collapsed_slide_nodes_(from.outline_collapsed_slide_nodes_),
      outline_has_body_slide_nodes_(from.outline_has_body_slide_nodes_),
      element_list_expanded_groups_(from.element_list_expanded_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slidenodetoedit()) {
    slidenodetoedit_ = new ::TSP::Reference(*from.slidenodetoedit_);
  } else {
    slidenodetoedit_ = nullptr;
  }
  if (from._internal_has_deprecated_template_slide_node_to_apply()) {
    deprecated_template_slide_node_to_apply_ = new ::TSP::Reference(*from.deprecated_template_slide_node_to_apply_);
  } else {
    deprecated_template_slide_node_to_apply_ = nullptr;
  }
  if (from._internal_has_deprecated_slidethumbnailsize()) {
    deprecated_slidethumbnailsize_ = new ::TSP::Size(*from.deprecated_slidethumbnailsize_);
  } else {
    deprecated_slidethumbnailsize_ = nullptr;
  }
  if (from._internal_has_canvasoffset()) {
    canvasoffset_ = new ::TSP::Point(*from.canvasoffset_);
  } else {
    canvasoffset_ = nullptr;
  }
  if (from._internal_has_iphonecanvasoffset()) {
    iphonecanvasoffset_ = new ::TSP::Point(*from.iphonecanvasoffset_);
  } else {
    iphonecanvasoffset_ = nullptr;
  }
  if (from._internal_has_iphone568canvasoffset()) {
    iphone568canvasoffset_ = new ::TSP::Point(*from.iphone568canvasoffset_);
  } else {
    iphone568canvasoffset_ = nullptr;
  }
  if (from._internal_has_desktop_ui_layout()) {
    desktop_ui_layout_ = new ::TSP::Reference(*from.desktop_ui_layout_);
  } else {
    desktop_ui_layout_ = nullptr;
  }
  if (from._internal_has_desktop_canvas_offset()) {
    desktop_canvas_offset_ = new ::TSP::Point(*from.desktop_canvas_offset_);
  } else {
    desktop_canvas_offset_ = nullptr;
  }
  if (from._internal_has_desktop_main_content_size()) {
    desktop_main_content_size_ = new ::TSP::Size(*from.desktop_main_content_size_);
  } else {
    desktop_main_content_size_ = nullptr;
  }
  if (from._internal_has_desktop_main_window_origin()) {
    desktop_main_window_origin_ = new ::TSP::Point(*from.desktop_main_window_origin_);
  } else {
    desktop_main_window_origin_ = nullptr;
  }
  if (from._internal_has_selection_path()) {
    selection_path_ = new ::TSK::SelectionPathArchive(*from.selection_path_);
  } else {
    selection_path_ = nullptr;
  }
  if (from._internal_has_freehand_drawing_toolkit_state()) {
    freehand_drawing_toolkit_state_ = new ::TSP::Reference(*from.freehand_drawing_toolkit_state_);
  } else {
    freehand_drawing_toolkit_state_ = nullptr;
  }
  if (from._internal_has_selection_path_transformer()) {
    selection_path_transformer_ = new ::TSP::Reference(*from.selection_path_transformer_);
  } else {
    selection_path_transformer_ = nullptr;
  }
  ::memcpy(&canvasviewscale_, &from.canvasviewscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&editing_disabled_) -
    reinterpret_cast<char*>(&canvasviewscale_)) + sizeof(editing_disabled_));
  // @@protoc_insertion_point(copy_constructor:KN.UIStateArchive)
}

inline void UIStateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slidenodetoedit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&editing_disabled_) -
    reinterpret_cast<char*>(&slidenodetoedit_)) + sizeof(editing_disabled_));
}

UIStateArchive::~UIStateArchive() {
  // @@protoc_insertion_point(destructor:KN.UIStateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UIStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slidenodetoedit_;
  if (this != internal_default_instance()) delete deprecated_template_slide_node_to_apply_;
  if (this != internal_default_instance()) delete deprecated_slidethumbnailsize_;
  if (this != internal_default_instance()) delete canvasoffset_;
  if (this != internal_default_instance()) delete iphonecanvasoffset_;
  if (this != internal_default_instance()) delete iphone568canvasoffset_;
  if (this != internal_default_instance()) delete desktop_ui_layout_;
  if (this != internal_default_instance()) delete desktop_canvas_offset_;
  if (this != internal_default_instance()) delete desktop_main_content_size_;
  if (this != internal_default_instance()) delete desktop_main_window_origin_;
  if (this != internal_default_instance()) delete selection_path_;
  if (this != internal_default_instance()) delete freehand_drawing_toolkit_state_;
  if (this != internal_default_instance()) delete selection_path_transformer_;
}

void UIStateArchive::ArenaDtor(void* object) {
  UIStateArchive* _this = reinterpret_cast< UIStateArchive* >(object);
  (void)_this;
}
void UIStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UIStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.UIStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selectedslidenodes_.Clear();
  chart_ui_state_.Clear();
  collapsed_slide_nodes_.Clear();
  outline_collapsed_slide_nodes_.Clear();
  outline_has_body_slide_nodes_.Clear();
  element_list_expanded_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(slidenodetoedit_ != nullptr);
      slidenodetoedit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(deprecated_template_slide_node_to_apply_ != nullptr);
      deprecated_template_slide_node_to_apply_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(deprecated_slidethumbnailsize_ != nullptr);
      deprecated_slidethumbnailsize_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(canvasoffset_ != nullptr);
      canvasoffset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(iphonecanvasoffset_ != nullptr);
      iphonecanvasoffset_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(iphone568canvasoffset_ != nullptr);
      iphone568canvasoffset_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(desktop_ui_layout_ != nullptr);
      desktop_ui_layout_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(desktop_canvas_offset_ != nullptr);
      desktop_canvas_offset_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(desktop_main_content_size_ != nullptr);
      desktop_main_content_size_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(desktop_main_window_origin_ != nullptr);
      desktop_main_window_origin_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(selection_path_ != nullptr);
      selection_path_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(freehand_drawing_toolkit_state_ != nullptr);
      freehand_drawing_toolkit_state_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(selection_path_transformer_ != nullptr);
      selection_path_transformer_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&canvasviewscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iphone568canvasviewscale_) -
        reinterpret_cast<char*>(&canvasviewscale_)) + sizeof(iphone568canvasviewscale_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&desktop_canvas_view_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desktop_outline_view_width_) -
        reinterpret_cast<char*>(&desktop_canvas_view_scale_)) + sizeof(desktop_outline_view_width_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&desktop_presenter_notes_view_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shows_mobile_light_table_) -
        reinterpret_cast<char*>(&desktop_presenter_notes_view_height_)) + sizeof(shows_mobile_light_table_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mobile_light_table_hides_skipped_slides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&editing_disabled_) -
        reinterpret_cast<char*>(&mobile_light_table_hides_skipped_slides_)) + sizeof(editing_disabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference slideNodeToEdit = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenodetoedit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_template_slide_node_to_apply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_template_slide_node_to_apply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size deprecated_slideThumbnailSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_slidethumbnailsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float canvasViewScale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_canvasviewscale(&_has_bits_);
          canvasviewscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point canvasOffset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_canvasoffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference selectedSlideNodes = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selectedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float iPhoneCanvasViewScale = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_iphonecanvasviewscale(&_has_bits_);
          iphonecanvasviewscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point iPhoneCanvasOffset = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_iphonecanvasoffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float iPhone568CanvasViewScale = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_iphone568canvasviewscale(&_has_bits_);
          iphone568canvasviewscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point iPhone568CanvasOffset = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_iphone568canvasoffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference desktop_ui_layout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_ui_layout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool desktop_slide_view_content_fits_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_desktop_slide_view_content_fits_window(&_has_bits_);
          desktop_slide_view_content_fits_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desktop_canvas_view_scale = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_desktop_canvas_view_scale(&_has_bits_);
          desktop_canvas_view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float light_table_zoom_scale = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_light_table_zoom_scale(&_has_bits_);
          light_table_zoom_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartUIState chart_ui_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_ui_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool show_slide_guides = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_show_slide_guides(&_has_bits_);
          show_slide_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_template_guides = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_show_template_guides(&_has_bits_);
          show_template_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_comments = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_shows_comments(&_has_bits_);
          shows_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference collapsed_slide_nodes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_collapsed_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool shows_ruler = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_shows_ruler(&_has_bits_);
          shows_ruler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point desktop_canvas_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_canvas_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desktop_navigator_view_width = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_desktop_navigator_view_width(&_has_bits_);
          desktop_navigator_view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desktop_outline_view_width = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_desktop_outline_view_width(&_has_bits_);
          desktop_outline_view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size desktop_main_content_size = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_main_content_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desktop_presenter_notes_view_height = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_desktop_presenter_notes_view_height(&_has_bits_);
          desktop_presenter_notes_view_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point desktop_main_window_origin = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_main_window_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool light_table_hides_skipped_slides = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_light_table_hides_skipped_slides(&_has_bits_);
          light_table_hides_skipped_slides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference outline_collapsed_slide_nodes = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_outline_collapsed_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive selection_path = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference outline_has_body_slide_nodes = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_outline_has_body_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool desktop_outline_view_default_fixed = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_desktop_outline_view_default_fixed(&_has_bits_);
          desktop_outline_view_default_fixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desktop_element_list_view_width = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_desktop_element_list_view_width(&_has_bits_);
          desktop_element_list_view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference element_list_expanded_groups = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_element_list_expanded_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool shows_mobile_light_table = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shows_mobile_light_table(&_has_bits_);
          shows_mobile_light_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mobile_light_table_zoom_scale = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_mobile_light_table_zoom_scale(&_has_bits_);
          mobile_light_table_zoom_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool mobile_light_table_hides_skipped_slides = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mobile_light_table_hides_skipped_slides(&_has_bits_);
          mobile_light_table_hides_skipped_slides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference freehand_drawing_toolkit_state = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_freehand_drawing_toolkit_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference selection_path_transformer = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path_transformer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool comments_printing_toggle_enabled = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_comments_printing_toggle_enabled(&_has_bits_);
          comments_printing_toggle_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_mobile_outline = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_shows_mobile_outline(&_has_bits_);
          shows_mobile_outline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool editing_disabled = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_editing_disabled(&_has_bits_);
          editing_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UIStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.UIStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference slideNodeToEdit = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slidenodetoedit(this), target, stream);
  }

  // optional .TSP.Reference deprecated_template_slide_node_to_apply = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deprecated_template_slide_node_to_apply(this), target, stream);
  }

  // optional .TSP.Size deprecated_slideThumbnailSize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::deprecated_slidethumbnailsize(this), target, stream);
  }

  // optional float canvasViewScale = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_canvasviewscale(), target);
  }

  // optional .TSP.Point canvasOffset = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::canvasoffset(this), target, stream);
  }

  // repeated .TSP.Reference selectedSlideNodes = 6 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selectedslidenodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_selectedslidenodes(i), target, stream);
  }

  // optional float iPhoneCanvasViewScale = 7 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_iphonecanvasviewscale(), target);
  }

  // optional .TSP.Point iPhoneCanvasOffset = 8 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::iphonecanvasoffset(this), target, stream);
  }

  // optional float iPhone568CanvasViewScale = 9 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_iphone568canvasviewscale(), target);
  }

  // optional .TSP.Point iPhone568CanvasOffset = 10 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::iphone568canvasoffset(this), target, stream);
  }

  // optional .TSP.Reference desktop_ui_layout = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::desktop_ui_layout(this), target, stream);
  }

  // optional bool desktop_slide_view_content_fits_window = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_desktop_slide_view_content_fits_window(), target);
  }

  // optional float desktop_canvas_view_scale = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_desktop_canvas_view_scale(), target);
  }

  // optional float light_table_zoom_scale = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_light_table_zoom_scale(), target);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_ui_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_chart_ui_state(i), target, stream);
  }

  // optional bool show_slide_guides = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_show_slide_guides(), target);
  }

  // optional bool show_template_guides = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_show_template_guides(), target);
  }

  // optional bool shows_comments = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_shows_comments(), target);
  }

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collapsed_slide_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_collapsed_slide_nodes(i), target, stream);
  }

  // optional bool shows_ruler = 20;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_shows_ruler(), target);
  }

  // optional .TSP.Point desktop_canvas_offset = 21;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::desktop_canvas_offset(this), target, stream);
  }

  // optional float desktop_navigator_view_width = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_desktop_navigator_view_width(), target);
  }

  // optional float desktop_outline_view_width = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_desktop_outline_view_width(), target);
  }

  // optional .TSP.Size desktop_main_content_size = 24;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::desktop_main_content_size(this), target, stream);
  }

  // optional float desktop_presenter_notes_view_height = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_desktop_presenter_notes_view_height(), target);
  }

  // optional .TSP.Point desktop_main_window_origin = 26;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::desktop_main_window_origin(this), target, stream);
  }

  // optional bool light_table_hides_skipped_slides = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_light_table_hides_skipped_slides(), target);
  }

  // repeated .TSP.Reference outline_collapsed_slide_nodes = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outline_collapsed_slide_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_outline_collapsed_slide_nodes(i), target, stream);
  }

  // optional .TSK.SelectionPathArchive selection_path = 29;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::selection_path(this), target, stream);
  }

  // repeated .TSP.Reference outline_has_body_slide_nodes = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outline_has_body_slide_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_outline_has_body_slide_nodes(i), target, stream);
  }

  // optional bool desktop_outline_view_default_fixed = 31;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_desktop_outline_view_default_fixed(), target);
  }

  // optional float desktop_element_list_view_width = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_desktop_element_list_view_width(), target);
  }

  // repeated .TSP.Reference element_list_expanded_groups = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_list_expanded_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_element_list_expanded_groups(i), target, stream);
  }

  // optional bool shows_mobile_light_table = 34;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_shows_mobile_light_table(), target);
  }

  // optional float mobile_light_table_zoom_scale = 35;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_mobile_light_table_zoom_scale(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool mobile_light_table_hides_skipped_slides = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_mobile_light_table_hides_skipped_slides(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference freehand_drawing_toolkit_state = 37;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::freehand_drawing_toolkit_state(this), target, stream);
  }

  // optional .TSP.Reference selection_path_transformer = 38;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::selection_path_transformer(this), target, stream);
  }

  // optional bool comments_printing_toggle_enabled = 39;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_comments_printing_toggle_enabled(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool shows_mobile_outline = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_shows_mobile_outline(), target);
  }

  // optional bool editing_disabled = 41;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_editing_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.UIStateArchive)
  return target;
}

size_t UIStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.UIStateArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference selectedSlideNodes = 6 [deprecated = true];
  total_size += 1UL * this->_internal_selectedslidenodes_size();
  for (const auto& msg : this->selectedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  total_size += 1UL * this->_internal_chart_ui_state_size();
  for (const auto& msg : this->chart_ui_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  total_size += 2UL * this->_internal_collapsed_slide_nodes_size();
  for (const auto& msg : this->collapsed_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference outline_collapsed_slide_nodes = 28;
  total_size += 2UL * this->_internal_outline_collapsed_slide_nodes_size();
  for (const auto& msg : this->outline_collapsed_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference outline_has_body_slide_nodes = 30;
  total_size += 2UL * this->_internal_outline_has_body_slide_nodes_size();
  for (const auto& msg : this->outline_has_body_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference element_list_expanded_groups = 33;
  total_size += 2UL * this->_internal_element_list_expanded_groups_size();
  for (const auto& msg : this->element_list_expanded_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference slideNodeToEdit = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slidenodetoedit_);
    }

    // optional .TSP.Reference deprecated_template_slide_node_to_apply = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_template_slide_node_to_apply_);
    }

    // optional .TSP.Size deprecated_slideThumbnailSize = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_slidethumbnailsize_);
    }

    // optional .TSP.Point canvasOffset = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *canvasoffset_);
    }

    // optional .TSP.Point iPhoneCanvasOffset = 8 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *iphonecanvasoffset_);
    }

    // optional .TSP.Point iPhone568CanvasOffset = 10 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *iphone568canvasoffset_);
    }

    // optional .TSP.Reference desktop_ui_layout = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desktop_ui_layout_);
    }

    // optional .TSP.Point desktop_canvas_offset = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desktop_canvas_offset_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Size desktop_main_content_size = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desktop_main_content_size_);
    }

    // optional .TSP.Point desktop_main_window_origin = 26;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desktop_main_window_origin_);
    }

    // optional .TSK.SelectionPathArchive selection_path = 29;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_path_);
    }

    // optional .TSP.Reference freehand_drawing_toolkit_state = 37;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *freehand_drawing_toolkit_state_);
    }

    // optional .TSP.Reference selection_path_transformer = 38;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_path_transformer_);
    }

    // optional float canvasViewScale = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float iPhoneCanvasViewScale = 7 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float iPhone568CanvasViewScale = 9 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float desktop_canvas_view_scale = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float light_table_zoom_scale = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional bool desktop_slide_view_content_fits_window = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool show_slide_guides = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool show_template_guides = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_comments = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional float desktop_navigator_view_width = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float desktop_outline_view_width = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float desktop_presenter_notes_view_height = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional bool comments_printing_toggle_enabled = 39;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_ruler = 20;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool desktop_outline_view_default_fixed = 31;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool light_table_hides_skipped_slides = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional float desktop_element_list_view_width = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float mobile_light_table_zoom_scale = 35;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional bool shows_mobile_light_table = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional bool mobile_light_table_hides_skipped_slides = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool shows_mobile_outline = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool editing_disabled = 41;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UIStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIStateArchive::GetClassData() const { return &_class_data_; }

void UIStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UIStateArchive *>(to)->MergeFrom(
      static_cast<const UIStateArchive &>(from));
}


void UIStateArchive::MergeFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.UIStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selectedslidenodes_.MergeFrom(from.selectedslidenodes_);
  chart_ui_state_.MergeFrom(from.chart_ui_state_);
  collapsed_slide_nodes_.MergeFrom(from.collapsed_slide_nodes_);
  outline_collapsed_slide_nodes_.MergeFrom(from.outline_collapsed_slide_nodes_);
  outline_has_body_slide_nodes_.MergeFrom(from.outline_has_body_slide_nodes_);
  element_list_expanded_groups_.MergeFrom(from.element_list_expanded_groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_slidenodetoedit()->::TSP::Reference::MergeFrom(from._internal_slidenodetoedit());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_deprecated_template_slide_node_to_apply()->::TSP::Reference::MergeFrom(from._internal_deprecated_template_slide_node_to_apply());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_deprecated_slidethumbnailsize()->::TSP::Size::MergeFrom(from._internal_deprecated_slidethumbnailsize());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_canvasoffset()->::TSP::Point::MergeFrom(from._internal_canvasoffset());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_iphonecanvasoffset()->::TSP::Point::MergeFrom(from._internal_iphonecanvasoffset());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_iphone568canvasoffset()->::TSP::Point::MergeFrom(from._internal_iphone568canvasoffset());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_desktop_ui_layout()->::TSP::Reference::MergeFrom(from._internal_desktop_ui_layout());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_desktop_canvas_offset()->::TSP::Point::MergeFrom(from._internal_desktop_canvas_offset());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_desktop_main_content_size()->::TSP::Size::MergeFrom(from._internal_desktop_main_content_size());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_desktop_main_window_origin()->::TSP::Point::MergeFrom(from._internal_desktop_main_window_origin());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_selection_path()->::TSK::SelectionPathArchive::MergeFrom(from._internal_selection_path());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_freehand_drawing_toolkit_state()->::TSP::Reference::MergeFrom(from._internal_freehand_drawing_toolkit_state());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_selection_path_transformer()->::TSP::Reference::MergeFrom(from._internal_selection_path_transformer());
    }
    if (cached_has_bits & 0x00002000u) {
      canvasviewscale_ = from.canvasviewscale_;
    }
    if (cached_has_bits & 0x00004000u) {
      iphonecanvasviewscale_ = from.iphonecanvasviewscale_;
    }
    if (cached_has_bits & 0x00008000u) {
      iphone568canvasviewscale_ = from.iphone568canvasviewscale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      desktop_canvas_view_scale_ = from.desktop_canvas_view_scale_;
    }
    if (cached_has_bits & 0x00020000u) {
      light_table_zoom_scale_ = from.light_table_zoom_scale_;
    }
    if (cached_has_bits & 0x00040000u) {
      desktop_slide_view_content_fits_window_ = from.desktop_slide_view_content_fits_window_;
    }
    if (cached_has_bits & 0x00080000u) {
      show_slide_guides_ = from.show_slide_guides_;
    }
    if (cached_has_bits & 0x00100000u) {
      show_template_guides_ = from.show_template_guides_;
    }
    if (cached_has_bits & 0x00200000u) {
      shows_comments_ = from.shows_comments_;
    }
    if (cached_has_bits & 0x00400000u) {
      desktop_navigator_view_width_ = from.desktop_navigator_view_width_;
    }
    if (cached_has_bits & 0x00800000u) {
      desktop_outline_view_width_ = from.desktop_outline_view_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      desktop_presenter_notes_view_height_ = from.desktop_presenter_notes_view_height_;
    }
    if (cached_has_bits & 0x02000000u) {
      comments_printing_toggle_enabled_ = from.comments_printing_toggle_enabled_;
    }
    if (cached_has_bits & 0x04000000u) {
      shows_ruler_ = from.shows_ruler_;
    }
    if (cached_has_bits & 0x08000000u) {
      desktop_outline_view_default_fixed_ = from.desktop_outline_view_default_fixed_;
    }
    if (cached_has_bits & 0x10000000u) {
      light_table_hides_skipped_slides_ = from.light_table_hides_skipped_slides_;
    }
    if (cached_has_bits & 0x20000000u) {
      desktop_element_list_view_width_ = from.desktop_element_list_view_width_;
    }
    if (cached_has_bits & 0x40000000u) {
      mobile_light_table_zoom_scale_ = from.mobile_light_table_zoom_scale_;
    }
    if (cached_has_bits & 0x80000000u) {
      shows_mobile_light_table_ = from.shows_mobile_light_table_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mobile_light_table_hides_skipped_slides_ = from.mobile_light_table_hides_skipped_slides_;
    }
    if (cached_has_bits & 0x00000002u) {
      shows_mobile_outline_ = from.shows_mobile_outline_;
    }
    if (cached_has_bits & 0x00000004u) {
      editing_disabled_ = from.editing_disabled_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.UIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(selectedslidenodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chart_ui_state_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(collapsed_slide_nodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(outline_collapsed_slide_nodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(outline_has_body_slide_nodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(element_list_expanded_groups_)) return false;
  if (_internal_has_slidenodetoedit()) {
    if (!slidenodetoedit_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_template_slide_node_to_apply()) {
    if (!deprecated_template_slide_node_to_apply_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_slidethumbnailsize()) {
    if (!deprecated_slidethumbnailsize_->IsInitialized()) return false;
  }
  if (_internal_has_canvasoffset()) {
    if (!canvasoffset_->IsInitialized()) return false;
  }
  if (_internal_has_iphonecanvasoffset()) {
    if (!iphonecanvasoffset_->IsInitialized()) return false;
  }
  if (_internal_has_iphone568canvasoffset()) {
    if (!iphone568canvasoffset_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_ui_layout()) {
    if (!desktop_ui_layout_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_canvas_offset()) {
    if (!desktop_canvas_offset_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_main_content_size()) {
    if (!desktop_main_content_size_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_main_window_origin()) {
    if (!desktop_main_window_origin_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path()) {
    if (!selection_path_->IsInitialized()) return false;
  }
  if (_internal_has_freehand_drawing_toolkit_state()) {
    if (!freehand_drawing_toolkit_state_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path_transformer()) {
    if (!selection_path_transformer_->IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::InternalSwap(UIStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  selectedslidenodes_.InternalSwap(&other->selectedslidenodes_);
  chart_ui_state_.InternalSwap(&other->chart_ui_state_);
  collapsed_slide_nodes_.InternalSwap(&other->collapsed_slide_nodes_);
  outline_collapsed_slide_nodes_.InternalSwap(&other->outline_collapsed_slide_nodes_);
  outline_has_body_slide_nodes_.InternalSwap(&other->outline_has_body_slide_nodes_);
  element_list_expanded_groups_.InternalSwap(&other->element_list_expanded_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateArchive, editing_disabled_)
      + sizeof(UIStateArchive::editing_disabled_)
      - PROTOBUF_FIELD_OFFSET(UIStateArchive, slidenodetoedit_)>(
          reinterpret_cast<char*>(&slidenodetoedit_),
          reinterpret_cast<char*>(&other->slidenodetoedit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[20]);
}

// ===================================================================

class IOSRestorableViewStateRootArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<IOSRestorableViewStateRootArchive>()._has_bits_);
  static const ::KN::IOSSavedPlaybackStateArchive& saved_playback_state(const IOSRestorableViewStateRootArchive* msg);
  static void set_has_saved_playback_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::KN::IOSSavedPlaybackStateArchive&
IOSRestorableViewStateRootArchive::_Internal::saved_playback_state(const IOSRestorableViewStateRootArchive* msg) {
  return *msg->saved_playback_state_;
}
IOSRestorableViewStateRootArchive::IOSRestorableViewStateRootArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.IOSRestorableViewStateRootArchive)
}
IOSRestorableViewStateRootArchive::IOSRestorableViewStateRootArchive(const IOSRestorableViewStateRootArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_saved_playback_state()) {
    saved_playback_state_ = new ::KN::IOSSavedPlaybackStateArchive(*from.saved_playback_state_);
  } else {
    saved_playback_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.IOSRestorableViewStateRootArchive)
}

inline void IOSRestorableViewStateRootArchive::SharedCtor() {
saved_playback_state_ = nullptr;
}

IOSRestorableViewStateRootArchive::~IOSRestorableViewStateRootArchive() {
  // @@protoc_insertion_point(destructor:KN.IOSRestorableViewStateRootArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IOSRestorableViewStateRootArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete saved_playback_state_;
}

void IOSRestorableViewStateRootArchive::ArenaDtor(void* object) {
  IOSRestorableViewStateRootArchive* _this = reinterpret_cast< IOSRestorableViewStateRootArchive* >(object);
  (void)_this;
}
void IOSRestorableViewStateRootArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOSRestorableViewStateRootArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOSRestorableViewStateRootArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.IOSRestorableViewStateRootArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(saved_playback_state_ != nullptr);
    saved_playback_state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOSRestorableViewStateRootArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KN.IOSSavedPlaybackStateArchive saved_playback_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_playback_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IOSRestorableViewStateRootArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.IOSRestorableViewStateRootArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KN.IOSSavedPlaybackStateArchive saved_playback_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::saved_playback_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.IOSRestorableViewStateRootArchive)
  return target;
}

size_t IOSRestorableViewStateRootArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.IOSRestorableViewStateRootArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.IOSSavedPlaybackStateArchive saved_playback_state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saved_playback_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOSRestorableViewStateRootArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IOSRestorableViewStateRootArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOSRestorableViewStateRootArchive::GetClassData() const { return &_class_data_; }

void IOSRestorableViewStateRootArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IOSRestorableViewStateRootArchive *>(to)->MergeFrom(
      static_cast<const IOSRestorableViewStateRootArchive &>(from));
}


void IOSRestorableViewStateRootArchive::MergeFrom(const IOSRestorableViewStateRootArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.IOSRestorableViewStateRootArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_saved_playback_state()) {
    _internal_mutable_saved_playback_state()->::KN::IOSSavedPlaybackStateArchive::MergeFrom(from._internal_saved_playback_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOSRestorableViewStateRootArchive::CopyFrom(const IOSRestorableViewStateRootArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.IOSRestorableViewStateRootArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOSRestorableViewStateRootArchive::IsInitialized() const {
  return true;
}

void IOSRestorableViewStateRootArchive::InternalSwap(IOSRestorableViewStateRootArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(saved_playback_state_, other->saved_playback_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOSRestorableViewStateRootArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[21]);
}

// ===================================================================

class IOSSavedPlaybackStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<IOSSavedPlaybackStateArchive>()._has_bits_);
  static void set_has_presentation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_slide_node_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_had_external_display(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_elapsed_time_started(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_elapsed_time_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_recording_playback_current_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_should_show_slide_navigator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

IOSSavedPlaybackStateArchive::IOSSavedPlaybackStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  breadcrumb_trail_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.IOSSavedPlaybackStateArchive)
}
IOSSavedPlaybackStateArchive::IOSSavedPlaybackStateArchive(const IOSSavedPlaybackStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      breadcrumb_trail_(from.breadcrumb_trail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slide_node_index_, &from.slide_node_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&presentation_type_) -
    reinterpret_cast<char*>(&slide_node_index_)) + sizeof(presentation_type_));
  // @@protoc_insertion_point(copy_constructor:KN.IOSSavedPlaybackStateArchive)
}

inline void IOSSavedPlaybackStateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slide_node_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_show_slide_navigator_) -
    reinterpret_cast<char*>(&slide_node_index_)) + sizeof(should_show_slide_navigator_));
presentation_type_ = 1;
}

IOSSavedPlaybackStateArchive::~IOSSavedPlaybackStateArchive() {
  // @@protoc_insertion_point(destructor:KN.IOSSavedPlaybackStateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IOSSavedPlaybackStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IOSSavedPlaybackStateArchive::ArenaDtor(void* object) {
  IOSSavedPlaybackStateArchive* _this = reinterpret_cast< IOSSavedPlaybackStateArchive* >(object);
  (void)_this;
}
void IOSSavedPlaybackStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOSSavedPlaybackStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOSSavedPlaybackStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.IOSSavedPlaybackStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  breadcrumb_trail_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&slide_node_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_show_slide_navigator_) -
        reinterpret_cast<char*>(&slide_node_index_)) + sizeof(should_show_slide_navigator_));
    presentation_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOSSavedPlaybackStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KN.IOSSavedPlaybackStateArchive.PresentationType presentation_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::IOSSavedPlaybackStateArchive_PresentationType_IsValid(val))) {
            _internal_set_presentation_type(static_cast<::KN::IOSSavedPlaybackStateArchive_PresentationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 slide_node_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slide_node_index(&has_bits);
          slide_node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_event_index(&has_bits);
          event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string breadcrumb_trail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_breadcrumb_trail();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.IOSSavedPlaybackStateArchive.breadcrumb_trail");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool had_external_display = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_had_external_display(&has_bits);
          had_external_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_elapsed_time_started = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_elapsed_time_started(&has_bits);
          is_elapsed_time_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double elapsed_time_start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_elapsed_time_start_time(&has_bits);
          elapsed_time_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double recording_playback_current_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_recording_playback_current_time(&has_bits);
          recording_playback_current_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool should_show_slide_navigator = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_should_show_slide_navigator(&has_bits);
          should_show_slide_navigator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IOSSavedPlaybackStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.IOSSavedPlaybackStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KN.IOSSavedPlaybackStateArchive.PresentationType presentation_type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_presentation_type(), target);
  }

  // optional uint32 slide_node_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slide_node_index(), target);
  }

  // optional uint32 event_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_event_index(), target);
  }

  // repeated string breadcrumb_trail = 4;
  for (int i = 0, n = this->_internal_breadcrumb_trail_size(); i < n; i++) {
    const auto& s = this->_internal_breadcrumb_trail(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.IOSSavedPlaybackStateArchive.breadcrumb_trail");
    target = stream->WriteString(4, s, target);
  }

  // optional bool had_external_display = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_had_external_display(), target);
  }

  // optional bool is_elapsed_time_started = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_elapsed_time_started(), target);
  }

  // optional double elapsed_time_start_time = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_elapsed_time_start_time(), target);
  }

  // optional double recording_playback_current_time = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_recording_playback_current_time(), target);
  }

  // optional bool should_show_slide_navigator = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_should_show_slide_navigator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.IOSSavedPlaybackStateArchive)
  return target;
}

size_t IOSSavedPlaybackStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.IOSSavedPlaybackStateArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string breadcrumb_trail = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(breadcrumb_trail_.size());
  for (int i = 0, n = breadcrumb_trail_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      breadcrumb_trail_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 slide_node_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slide_node_index());
    }

    // optional uint32 event_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_index());
    }

    // optional double elapsed_time_start_time = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double recording_playback_current_time = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool had_external_display = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_elapsed_time_started = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool should_show_slide_navigator = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .KN.IOSSavedPlaybackStateArchive.PresentationType presentation_type = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_presentation_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOSSavedPlaybackStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IOSSavedPlaybackStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOSSavedPlaybackStateArchive::GetClassData() const { return &_class_data_; }

void IOSSavedPlaybackStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IOSSavedPlaybackStateArchive *>(to)->MergeFrom(
      static_cast<const IOSSavedPlaybackStateArchive &>(from));
}


void IOSSavedPlaybackStateArchive::MergeFrom(const IOSSavedPlaybackStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.IOSSavedPlaybackStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  breadcrumb_trail_.MergeFrom(from.breadcrumb_trail_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      slide_node_index_ = from.slide_node_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_index_ = from.event_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      elapsed_time_start_time_ = from.elapsed_time_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      recording_playback_current_time_ = from.recording_playback_current_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      had_external_display_ = from.had_external_display_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_elapsed_time_started_ = from.is_elapsed_time_started_;
    }
    if (cached_has_bits & 0x00000040u) {
      should_show_slide_navigator_ = from.should_show_slide_navigator_;
    }
    if (cached_has_bits & 0x00000080u) {
      presentation_type_ = from.presentation_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOSSavedPlaybackStateArchive::CopyFrom(const IOSSavedPlaybackStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.IOSSavedPlaybackStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOSSavedPlaybackStateArchive::IsInitialized() const {
  return true;
}

void IOSSavedPlaybackStateArchive::InternalSwap(IOSSavedPlaybackStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  breadcrumb_trail_.InternalSwap(&other->breadcrumb_trail_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOSSavedPlaybackStateArchive, should_show_slide_navigator_)
      + sizeof(IOSSavedPlaybackStateArchive::should_show_slide_navigator_)
      - PROTOBUF_FIELD_OFFSET(IOSSavedPlaybackStateArchive, slide_node_index_)>(
          reinterpret_cast<char*>(&slide_node_index_),
          reinterpret_cast<char*>(&other->slide_node_index_));
  swap(presentation_type_, other->presentation_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOSSavedPlaybackStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[22]);
}

// ===================================================================

class CanvasSelectionArchive::_Internal {
 public:
};

void CanvasSelectionArchive::clear_infos() {
  infos_.Clear();
}
void CanvasSelectionArchive::clear_non_interactive_infos() {
  non_interactive_infos_.Clear();
}
void CanvasSelectionArchive::clear_infos_for_action_ghost_indexes() {
  infos_for_action_ghost_indexes_.Clear();
}
void CanvasSelectionArchive::clear_action_ghost_indexes() {
  action_ghost_indexes_.Clear();
}
void CanvasSelectionArchive::clear_build_chunks() {
  build_chunks_.Clear();
}
CanvasSelectionArchive::CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  infos_(arena),
  database_action_ghost_indexes_(arena),
  action_ghost_indexes_(arena),
  build_chunks_(arena),
  non_interactive_infos_(arena),
  infos_for_action_ghost_indexes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CanvasSelectionArchive)
}
CanvasSelectionArchive::CanvasSelectionArchive(const CanvasSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_),
      database_action_ghost_indexes_(from.database_action_ghost_indexes_),
      action_ghost_indexes_(from.action_ghost_indexes_),
      build_chunks_(from.build_chunks_),
      non_interactive_infos_(from.non_interactive_infos_),
      infos_for_action_ghost_indexes_(from.infos_for_action_ghost_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.CanvasSelectionArchive)
}

inline void CanvasSelectionArchive::SharedCtor() {
}

CanvasSelectionArchive::~CanvasSelectionArchive() {
  // @@protoc_insertion_point(destructor:KN.CanvasSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CanvasSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CanvasSelectionArchive::ArenaDtor(void* object) {
  CanvasSelectionArchive* _this = reinterpret_cast< CanvasSelectionArchive* >(object);
  (void)_this;
}
void CanvasSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanvasSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanvasSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CanvasSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  database_action_ghost_indexes_.Clear();
  action_ghost_indexes_.Clear();
  build_chunks_.Clear();
  non_interactive_infos_.Clear();
  infos_for_action_ghost_indexes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_database_action_ghost_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_database_action_ghost_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.IndexSet action_ghost_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_ghost_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference build_chunks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_build_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference non_interactive_infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_non_interactive_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos_for_action_ghost_indexes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos_for_action_ghost_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanvasSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CanvasSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  for (int i = 0, n = this->_internal_database_action_ghost_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_database_action_ghost_indexes(i), target);
  }

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_ghost_indexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_action_ghost_indexes(i), target, stream);
  }

  // repeated .TSP.Reference build_chunks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_build_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_build_chunks(i), target, stream);
  }

  // repeated .TSP.Reference non_interactive_infos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_non_interactive_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_non_interactive_infos(i), target, stream);
  }

  // repeated .TSP.Reference infos_for_action_ghost_indexes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_for_action_ghost_indexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_infos_for_action_ghost_indexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CanvasSelectionArchive)
  return target;
}

size_t CanvasSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CanvasSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->database_action_ghost_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_database_action_ghost_indexes_size());
    total_size += data_size;
  }

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  total_size += 1UL * this->_internal_action_ghost_indexes_size();
  for (const auto& msg : this->action_ghost_indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference build_chunks = 4;
  total_size += 1UL * this->_internal_build_chunks_size();
  for (const auto& msg : this->build_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference non_interactive_infos = 5;
  total_size += 1UL * this->_internal_non_interactive_infos_size();
  for (const auto& msg : this->non_interactive_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference infos_for_action_ghost_indexes = 6;
  total_size += 1UL * this->_internal_infos_for_action_ghost_indexes_size();
  for (const auto& msg : this->infos_for_action_ghost_indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanvasSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanvasSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanvasSelectionArchive::GetClassData() const { return &_class_data_; }

void CanvasSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CanvasSelectionArchive *>(to)->MergeFrom(
      static_cast<const CanvasSelectionArchive &>(from));
}


void CanvasSelectionArchive::MergeFrom(const CanvasSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CanvasSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  database_action_ghost_indexes_.MergeFrom(from.database_action_ghost_indexes_);
  action_ghost_indexes_.MergeFrom(from.action_ghost_indexes_);
  build_chunks_.MergeFrom(from.build_chunks_);
  non_interactive_infos_.MergeFrom(from.non_interactive_infos_);
  infos_for_action_ghost_indexes_.MergeFrom(from.infos_for_action_ghost_indexes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanvasSelectionArchive::CopyFrom(const CanvasSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CanvasSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(action_ghost_indexes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(build_chunks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(non_interactive_infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(infos_for_action_ghost_indexes_)) return false;
  return true;
}

void CanvasSelectionArchive::InternalSwap(CanvasSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  database_action_ghost_indexes_.InternalSwap(&other->database_action_ghost_indexes_);
  action_ghost_indexes_.InternalSwap(&other->action_ghost_indexes_);
  build_chunks_.InternalSwap(&other->build_chunks_);
  non_interactive_infos_.InternalSwap(&other->non_interactive_infos_);
  infos_for_action_ghost_indexes_.InternalSwap(&other->infos_for_action_ghost_indexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[23]);
}

// ===================================================================

class ActionGhostSelectionArchive::_Internal {
 public:
};

ActionGhostSelectionArchive::ActionGhostSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.ActionGhostSelectionArchive)
}
ActionGhostSelectionArchive::ActionGhostSelectionArchive(const ActionGhostSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.ActionGhostSelectionArchive)
}

inline void ActionGhostSelectionArchive::SharedCtor() {
}

ActionGhostSelectionArchive::~ActionGhostSelectionArchive() {
  // @@protoc_insertion_point(destructor:KN.ActionGhostSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionGhostSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionGhostSelectionArchive::ArenaDtor(void* object) {
  ActionGhostSelectionArchive* _this = reinterpret_cast< ActionGhostSelectionArchive* >(object);
  (void)_this;
}
void ActionGhostSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionGhostSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionGhostSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ActionGhostSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionGhostSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionGhostSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ActionGhostSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ActionGhostSelectionArchive)
  return target;
}

size_t ActionGhostSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ActionGhostSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionGhostSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionGhostSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionGhostSelectionArchive::GetClassData() const { return &_class_data_; }

void ActionGhostSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActionGhostSelectionArchive *>(to)->MergeFrom(
      static_cast<const ActionGhostSelectionArchive &>(from));
}


void ActionGhostSelectionArchive::MergeFrom(const ActionGhostSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.ActionGhostSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionGhostSelectionArchive::CopyFrom(const ActionGhostSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ActionGhostSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionGhostSelectionArchive::IsInitialized() const {
  return true;
}

void ActionGhostSelectionArchive::InternalSwap(ActionGhostSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionGhostSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[24]);
}

// ===================================================================

class ThemeCustomTimingCurveArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeCustomTimingCurveArchive>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::PathSourceArchive& curve(const ThemeCustomTimingCurveArchive* msg);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::PathSourceArchive&
ThemeCustomTimingCurveArchive::_Internal::curve(const ThemeCustomTimingCurveArchive* msg) {
  return *msg->curve_;
}
void ThemeCustomTimingCurveArchive::clear_curve() {
  if (curve_ != nullptr) curve_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ThemeCustomTimingCurveArchive::ThemeCustomTimingCurveArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.ThemeCustomTimingCurveArchive)
}
ThemeCustomTimingCurveArchive::ThemeCustomTimingCurveArchive(const ThemeCustomTimingCurveArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_curve()) {
    curve_ = new ::TSD::PathSourceArchive(*from.curve_);
  } else {
    curve_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.ThemeCustomTimingCurveArchive)
}

inline void ThemeCustomTimingCurveArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
curve_ = nullptr;
}

ThemeCustomTimingCurveArchive::~ThemeCustomTimingCurveArchive() {
  // @@protoc_insertion_point(destructor:KN.ThemeCustomTimingCurveArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThemeCustomTimingCurveArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete curve_;
}

void ThemeCustomTimingCurveArchive::ArenaDtor(void* object) {
  ThemeCustomTimingCurveArchive* _this = reinterpret_cast< ThemeCustomTimingCurveArchive* >(object);
  (void)_this;
}
void ThemeCustomTimingCurveArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemeCustomTimingCurveArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemeCustomTimingCurveArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ThemeCustomTimingCurveArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(curve_ != nullptr);
      curve_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeCustomTimingCurveArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.ThemeCustomTimingCurveArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.PathSourceArchive curve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThemeCustomTimingCurveArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ThemeCustomTimingCurveArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.ThemeCustomTimingCurveArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .TSD.PathSourceArchive curve = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::curve(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ThemeCustomTimingCurveArchive)
  return target;
}

size_t ThemeCustomTimingCurveArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.ThemeCustomTimingCurveArchive)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_curve()) {
    // required .TSD.PathSourceArchive curve = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curve_);
  }

  return total_size;
}
size_t ThemeCustomTimingCurveArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ThemeCustomTimingCurveArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .TSD.PathSourceArchive curve = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curve_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeCustomTimingCurveArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThemeCustomTimingCurveArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeCustomTimingCurveArchive::GetClassData() const { return &_class_data_; }

void ThemeCustomTimingCurveArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ThemeCustomTimingCurveArchive *>(to)->MergeFrom(
      static_cast<const ThemeCustomTimingCurveArchive &>(from));
}


void ThemeCustomTimingCurveArchive::MergeFrom(const ThemeCustomTimingCurveArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.ThemeCustomTimingCurveArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_curve()->::TSD::PathSourceArchive::MergeFrom(from._internal_curve());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeCustomTimingCurveArchive::CopyFrom(const ThemeCustomTimingCurveArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ThemeCustomTimingCurveArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeCustomTimingCurveArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_curve()) {
    if (!curve_->IsInitialized()) return false;
  }
  return true;
}

void ThemeCustomTimingCurveArchive::InternalSwap(ThemeCustomTimingCurveArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(curve_, other->curve_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeCustomTimingCurveArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[25]);
}

// ===================================================================

class ThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeArchive>()._has_bits_);
  static const ::TSS::ThemeArchive& super(const ThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& default_template_slide_node(const ThemeArchive* msg);
  static void set_has_default_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& default_template_slide_node_reference(const ThemeArchive* msg);
  static void set_has_default_template_slide_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_default_template_slide_node_is_our_best_guess(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::ThemeArchive&
ThemeArchive::_Internal::super(const ThemeArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ThemeArchive::_Internal::default_template_slide_node(const ThemeArchive* msg) {
  return *msg->default_template_slide_node_;
}
const ::TSP::Reference&
ThemeArchive::_Internal::default_template_slide_node_reference(const ThemeArchive* msg) {
  return *msg->default_template_slide_node_reference_;
}
void ThemeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ThemeArchive::clear_templates() {
  templates_.Clear();
}
void ThemeArchive::clear_classicthemerecords() {
  classicthemerecords_.Clear();
}
void ThemeArchive::clear_default_template_slide_node() {
  if (default_template_slide_node_ != nullptr) default_template_slide_node_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ThemeArchive::clear_default_template_slide_node_reference() {
  if (default_template_slide_node_reference_ != nullptr) default_template_slide_node_reference_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ThemeArchive::ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  templates_(arena),
  classicthemerecords_(arena),
  custom_effect_timing_curves_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.ThemeArchive)
}
ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      templates_(from.templates_),
      classicthemerecords_(from.classicthemerecords_),
      custom_effect_timing_curves_(from.custom_effect_timing_curves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSS::ThemeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_default_template_slide_node()) {
    default_template_slide_node_ = new ::TSP::Reference(*from.default_template_slide_node_);
  } else {
    default_template_slide_node_ = nullptr;
  }
  if (from._internal_has_default_template_slide_node_reference()) {
    default_template_slide_node_reference_ = new ::TSP::Reference(*from.default_template_slide_node_reference_);
  } else {
    default_template_slide_node_reference_ = nullptr;
  }
  default_template_slide_node_is_our_best_guess_ = from.default_template_slide_node_is_our_best_guess_;
  // @@protoc_insertion_point(copy_constructor:KN.ThemeArchive)
}

inline void ThemeArchive::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_template_slide_node_is_our_best_guess_) -
    reinterpret_cast<char*>(&super_)) + sizeof(default_template_slide_node_is_our_best_guess_));
}

ThemeArchive::~ThemeArchive() {
  // @@protoc_insertion_point(destructor:KN.ThemeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete default_template_slide_node_;
  if (this != internal_default_instance()) delete default_template_slide_node_reference_;
}

void ThemeArchive::ArenaDtor(void* object) {
  ThemeArchive* _this = reinterpret_cast< ThemeArchive* >(object);
  (void)_this;
}
void ThemeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ThemeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templates_.Clear();
  classicthemerecords_.Clear();
  custom_effect_timing_curves_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(default_template_slide_node_ != nullptr);
      default_template_slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(default_template_slide_node_reference_ != nullptr);
      default_template_slide_node_reference_->Clear();
    }
  }
  default_template_slide_node_is_our_best_guess_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ThemeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference templates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_templates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.ThemeArchive.uuid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference classicThemeRecords = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classicthemerecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference default_template_slide_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_template_slide_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference default_template_slide_node_reference = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_template_slide_node_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default_template_slide_node_is_our_best_guess = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_default_template_slide_node_is_our_best_guess(&has_bits);
          default_template_slide_node_is_our_best_guess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_effect_timing_curves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThemeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ThemeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.ThemeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference templates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_templates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_templates(i), target, stream);
  }

  // optional string uuid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.ThemeArchive.uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uuid(), target);
  }

  // repeated .TSP.Reference classicThemeRecords = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classicthemerecords_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_classicthemerecords(i), target, stream);
  }

  // optional .TSP.Reference default_template_slide_node = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::default_template_slide_node(this), target, stream);
  }

  // optional .TSP.Reference default_template_slide_node_reference = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::default_template_slide_node_reference(this), target, stream);
  }

  // optional bool default_template_slide_node_is_our_best_guess = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_default_template_slide_node_is_our_best_guess(), target);
  }

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_effect_timing_curves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_custom_effect_timing_curves(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ThemeArchive)
  return target;
}

size_t ThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ThemeArchive)
  size_t total_size = 0;

  // required .TSS.ThemeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference templates = 2;
  total_size += 1UL * this->_internal_templates_size();
  for (const auto& msg : this->templates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference classicThemeRecords = 4;
  total_size += 1UL * this->_internal_classicthemerecords_size();
  for (const auto& msg : this->classicthemerecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 8;
  total_size += 1UL * this->_internal_custom_effect_timing_curves_size();
  for (const auto& msg : this->custom_effect_timing_curves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string uuid = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference default_template_slide_node = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_template_slide_node_);
    }

    // optional .TSP.Reference default_template_slide_node_reference = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_template_slide_node_reference_);
    }

    // optional bool default_template_slide_node_is_our_best_guess = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeArchive::GetClassData() const { return &_class_data_; }

void ThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ThemeArchive *>(to)->MergeFrom(
      static_cast<const ThemeArchive &>(from));
}


void ThemeArchive::MergeFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  templates_.MergeFrom(from.templates_);
  classicthemerecords_.MergeFrom(from.classicthemerecords_);
  custom_effect_timing_curves_.MergeFrom(from.custom_effect_timing_curves_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSS::ThemeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_default_template_slide_node()->::TSP::Reference::MergeFrom(from._internal_default_template_slide_node());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_default_template_slide_node_reference()->::TSP::Reference::MergeFrom(from._internal_default_template_slide_node_reference());
    }
    if (cached_has_bits & 0x00000010u) {
      default_template_slide_node_is_our_best_guess_ = from.default_template_slide_node_is_our_best_guess_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(templates_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(classicthemerecords_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_effect_timing_curves_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_default_template_slide_node()) {
    if (!default_template_slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_default_template_slide_node_reference()) {
    if (!default_template_slide_node_reference_->IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::InternalSwap(ThemeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  templates_.InternalSwap(&other->templates_);
  classicthemerecords_.InternalSwap(&other->classicthemerecords_);
  custom_effect_timing_curves_.InternalSwap(&other->custom_effect_timing_curves_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uuid_, GetArenaForAllocation(),
      &other->uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeArchive, default_template_slide_node_is_our_best_guess_)
      + sizeof(ThemeArchive::default_template_slide_node_is_our_best_guess_)
      - PROTOBUF_FIELD_OFFSET(ThemeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[26]);
}

// ===================================================================

class SlideTreeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideTreeArchive>()._has_bits_);
  static const ::TSP::Reference& rootslidenode(const SlideTreeArchive* msg);
  static void set_has_rootslidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
SlideTreeArchive::_Internal::rootslidenode(const SlideTreeArchive* msg) {
  return *msg->rootslidenode_;
}
void SlideTreeArchive::clear_rootslidenode() {
  if (rootslidenode_ != nullptr) rootslidenode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SlideTreeArchive::clear_slides() {
  slides_.Clear();
}
SlideTreeArchive::SlideTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slides_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideTreeArchive)
}
SlideTreeArchive::SlideTreeArchive(const SlideTreeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slides_(from.slides_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rootslidenode()) {
    rootslidenode_ = new ::TSP::Reference(*from.rootslidenode_);
  } else {
    rootslidenode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideTreeArchive)
}

inline void SlideTreeArchive::SharedCtor() {
rootslidenode_ = nullptr;
}

SlideTreeArchive::~SlideTreeArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideTreeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideTreeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rootslidenode_;
}

void SlideTreeArchive::ArenaDtor(void* object) {
  SlideTreeArchive* _this = reinterpret_cast< SlideTreeArchive* >(object);
  (void)_this;
}
void SlideTreeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideTreeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideTreeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideTreeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slides_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rootslidenode_ != nullptr);
    rootslidenode_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideTreeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference rootSlideNode = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rootslidenode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference slides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideTreeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideTreeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference rootSlideNode = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rootslidenode(this), target, stream);
  }

  // repeated .TSP.Reference slides = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slides_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slides(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideTreeArchive)
  return target;
}

size_t SlideTreeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideTreeArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slides = 2;
  total_size += 1UL * this->_internal_slides_size();
  for (const auto& msg : this->slides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference rootSlideNode = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rootslidenode_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideTreeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideTreeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideTreeArchive::GetClassData() const { return &_class_data_; }

void SlideTreeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideTreeArchive *>(to)->MergeFrom(
      static_cast<const SlideTreeArchive &>(from));
}


void SlideTreeArchive::MergeFrom(const SlideTreeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideTreeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slides_.MergeFrom(from.slides_);
  if (from._internal_has_rootslidenode()) {
    _internal_mutable_rootslidenode()->::TSP::Reference::MergeFrom(from._internal_rootslidenode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideTreeArchive::CopyFrom(const SlideTreeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideTreeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideTreeArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slides_)) return false;
  if (_internal_has_rootslidenode()) {
    if (!rootslidenode_->IsInitialized()) return false;
  }
  return true;
}

void SlideTreeArchive::InternalSwap(SlideTreeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slides_.InternalSwap(&other->slides_);
  swap(rootslidenode_, other->rootslidenode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideTreeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[27]);
}

// ===================================================================

class ShowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowArchive>()._has_bits_);
  static const ::TSP::Reference& uistate(const ShowArchive* msg);
  static void set_has_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const ShowArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::SlideTreeArchive& slidetree(const ShowArchive* msg);
  static void set_has_slidetree(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Size& size(const ShowArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& stylesheet(const ShowArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_slidenumbersvisible(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& recording(const ShowArchive* msg);
  static void set_has_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_loop_presentation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_autoplay_transition_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_autoplay_build_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_idle_timer_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_idle_timer_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& soundtrack(const ShowArchive* msg);
  static void set_has_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_automatically_plays_upon_open(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& slidelist(const ShowArchive* msg);
  static void set_has_slidelist(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

const ::TSP::Reference&
ShowArchive::_Internal::uistate(const ShowArchive* msg) {
  return *msg->uistate_;
}
const ::TSP::Reference&
ShowArchive::_Internal::theme(const ShowArchive* msg) {
  return *msg->theme_;
}
const ::KN::SlideTreeArchive&
ShowArchive::_Internal::slidetree(const ShowArchive* msg) {
  return *msg->slidetree_;
}
const ::TSP::Size&
ShowArchive::_Internal::size(const ShowArchive* msg) {
  return *msg->size_;
}
const ::TSP::Reference&
ShowArchive::_Internal::stylesheet(const ShowArchive* msg) {
  return *msg->stylesheet_;
}
const ::TSP::Reference&
ShowArchive::_Internal::recording(const ShowArchive* msg) {
  return *msg->recording_;
}
const ::TSP::Reference&
ShowArchive::_Internal::soundtrack(const ShowArchive* msg) {
  return *msg->soundtrack_;
}
const ::TSP::Reference&
ShowArchive::_Internal::slidelist(const ShowArchive* msg) {
  return *msg->slidelist_;
}
void ShowArchive::clear_uistate() {
  if (uistate_ != nullptr) uistate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ShowArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ShowArchive::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ShowArchive::clear_stylesheet() {
  if (stylesheet_ != nullptr) stylesheet_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ShowArchive::clear_recording() {
  if (recording_ != nullptr) recording_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ShowArchive::clear_soundtrack() {
  if (soundtrack_ != nullptr) soundtrack_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ShowArchive::clear_slidelist() {
  if (slidelist_ != nullptr) slidelist_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
ShowArchive::ShowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.ShowArchive)
}
ShowArchive::ShowArchive(const ShowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uistate()) {
    uistate_ = new ::TSP::Reference(*from.uistate_);
  } else {
    uistate_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  if (from._internal_has_slidetree()) {
    slidetree_ = new ::KN::SlideTreeArchive(*from.slidetree_);
  } else {
    slidetree_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::TSP::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_stylesheet()) {
    stylesheet_ = new ::TSP::Reference(*from.stylesheet_);
  } else {
    stylesheet_ = nullptr;
  }
  if (from._internal_has_recording()) {
    recording_ = new ::TSP::Reference(*from.recording_);
  } else {
    recording_ = nullptr;
  }
  if (from._internal_has_soundtrack()) {
    soundtrack_ = new ::TSP::Reference(*from.soundtrack_);
  } else {
    soundtrack_ = nullptr;
  }
  if (from._internal_has_slidelist()) {
    slidelist_ = new ::TSP::Reference(*from.slidelist_);
  } else {
    slidelist_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&idle_timer_delay_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(idle_timer_delay_));
  // @@protoc_insertion_point(copy_constructor:KN.ShowArchive)
}

inline void ShowArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uistate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&automatically_plays_upon_open_) -
    reinterpret_cast<char*>(&uistate_)) + sizeof(automatically_plays_upon_open_));
autoplay_transition_delay_ = 5;
autoplay_build_delay_ = 2;
idle_timer_delay_ = 900;
}

ShowArchive::~ShowArchive() {
  // @@protoc_insertion_point(destructor:KN.ShowArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete uistate_;
  if (this != internal_default_instance()) delete theme_;
  if (this != internal_default_instance()) delete slidetree_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete stylesheet_;
  if (this != internal_default_instance()) delete recording_;
  if (this != internal_default_instance()) delete soundtrack_;
  if (this != internal_default_instance()) delete slidelist_;
}

void ShowArchive::ArenaDtor(void* object) {
  ShowArchive* _this = reinterpret_cast< ShowArchive* >(object);
  (void)_this;
}
void ShowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ShowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(uistate_ != nullptr);
      uistate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(slidetree_ != nullptr);
      slidetree_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stylesheet_ != nullptr);
      stylesheet_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(recording_ != nullptr);
      recording_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(soundtrack_ != nullptr);
      soundtrack_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(slidelist_ != nullptr);
      slidelist_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&automatically_plays_upon_open_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(automatically_plays_upon_open_));
    autoplay_transition_delay_ = 5;
    autoplay_build_delay_ = 2;
    idle_timer_delay_ = 900;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference uiState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uistate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KN.SlideTreeArchive slideTree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidetree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Size size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference stylesheet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool slideNumbersVisible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_slidenumbersvisible(&has_bits);
          slidenumbersvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference recording = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_recording(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool loop_presentation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_loop_presentation(&has_bits);
          loop_presentation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::ShowArchive_KNShowMode_IsValid(val))) {
            _internal_set_mode(static_cast<::KN::ShowArchive_KNShowMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double autoplay_transition_delay = 10 [default = 5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_autoplay_transition_delay(&has_bits);
          autoplay_transition_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double autoplay_build_delay = 11 [default = 2];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_autoplay_build_delay(&has_bits);
          autoplay_build_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool idle_timer_active = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_idle_timer_active(&has_bits);
          idle_timer_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double idle_timer_delay = 16 [default = 900];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_idle_timer_delay(&has_bits);
          idle_timer_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference soundtrack = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_soundtrack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool automatically_plays_upon_open = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_automatically_plays_upon_open(&has_bits);
          automatically_plays_upon_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference slideList = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ShowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference uiState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uistate(this), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::theme(this), target, stream);
  }

  // required .KN.SlideTreeArchive slideTree = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::slidetree(this), target, stream);
  }

  // required .TSP.Size size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::size(this), target, stream);
  }

  // required .TSP.Reference stylesheet = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stylesheet(this), target, stream);
  }

  // optional bool slideNumbersVisible = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_slidenumbersvisible(), target);
  }

  // optional .TSP.Reference recording = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::recording(this), target, stream);
  }

  // optional bool loop_presentation = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_loop_presentation(), target);
  }

  // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_mode(), target);
  }

  // optional double autoplay_transition_delay = 10 [default = 5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_autoplay_transition_delay(), target);
  }

  // optional double autoplay_build_delay = 11 [default = 2];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_autoplay_build_delay(), target);
  }

  // optional bool idle_timer_active = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_idle_timer_active(), target);
  }

  // optional double idle_timer_delay = 16 [default = 900];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_idle_timer_delay(), target);
  }

  // optional .TSP.Reference soundtrack = 17;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::soundtrack(this), target, stream);
  }

  // optional bool automatically_plays_upon_open = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_automatically_plays_upon_open(), target);
  }

  // optional .TSP.Reference slideList = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::slidelist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ShowArchive)
  return target;
}

size_t ShowArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.ShowArchive)
  size_t total_size = 0;

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);
  }

  if (_internal_has_slidetree()) {
    // required .KN.SlideTreeArchive slideTree = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slidetree_);
  }

  if (_internal_has_size()) {
    // required .TSP.Size size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (_internal_has_stylesheet()) {
    // required .TSP.Reference stylesheet = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stylesheet_);
  }

  return total_size;
}
size_t ShowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ShowArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);

    // required .KN.SlideTreeArchive slideTree = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slidetree_);

    // required .TSP.Size size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);

    // required .TSP.Reference stylesheet = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stylesheet_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference uiState = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uistate_);
  }

  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference recording = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recording_);
    }

    // optional .TSP.Reference soundtrack = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *soundtrack_);
    }

    // optional .TSP.Reference slideList = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slidelist_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional bool slideNumbersVisible = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool loop_presentation = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool idle_timer_active = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool automatically_plays_upon_open = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional double autoplay_transition_delay = 10 [default = 5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double autoplay_build_delay = 11 [default = 2];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double idle_timer_delay = 16 [default = 900];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowArchive::GetClassData() const { return &_class_data_; }

void ShowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShowArchive *>(to)->MergeFrom(
      static_cast<const ShowArchive &>(from));
}


void ShowArchive::MergeFrom(const ShowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.ShowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uistate()->::TSP::Reference::MergeFrom(from._internal_uistate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_slidetree()->::KN::SlideTreeArchive::MergeFrom(from._internal_slidetree());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_size()->::TSP::Size::MergeFrom(from._internal_size());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_recording()->::TSP::Reference::MergeFrom(from._internal_recording());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_soundtrack()->::TSP::Reference::MergeFrom(from._internal_soundtrack());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_slidelist()->::TSP::Reference::MergeFrom(from._internal_slidelist());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      slidenumbersvisible_ = from.slidenumbersvisible_;
    }
    if (cached_has_bits & 0x00000400u) {
      loop_presentation_ = from.loop_presentation_;
    }
    if (cached_has_bits & 0x00000800u) {
      idle_timer_active_ = from.idle_timer_active_;
    }
    if (cached_has_bits & 0x00001000u) {
      automatically_plays_upon_open_ = from.automatically_plays_upon_open_;
    }
    if (cached_has_bits & 0x00002000u) {
      autoplay_transition_delay_ = from.autoplay_transition_delay_;
    }
    if (cached_has_bits & 0x00004000u) {
      autoplay_build_delay_ = from.autoplay_build_delay_;
    }
    if (cached_has_bits & 0x00008000u) {
      idle_timer_delay_ = from.idle_timer_delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowArchive::CopyFrom(const ShowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ShowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uistate()) {
    if (!uistate_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  if (_internal_has_slidetree()) {
    if (!slidetree_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!size_->IsInitialized()) return false;
  }
  if (_internal_has_stylesheet()) {
    if (!stylesheet_->IsInitialized()) return false;
  }
  if (_internal_has_recording()) {
    if (!recording_->IsInitialized()) return false;
  }
  if (_internal_has_soundtrack()) {
    if (!soundtrack_->IsInitialized()) return false;
  }
  if (_internal_has_slidelist()) {
    if (!slidelist_->IsInitialized()) return false;
  }
  return true;
}

void ShowArchive::InternalSwap(ShowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowArchive, automatically_plays_upon_open_)
      + sizeof(ShowArchive::automatically_plays_upon_open_)
      - PROTOBUF_FIELD_OFFSET(ShowArchive, uistate_)>(
          reinterpret_cast<char*>(&uistate_),
          reinterpret_cast<char*>(&other->uistate_));
  swap(autoplay_transition_delay_, other->autoplay_transition_delay_);
  swap(autoplay_build_delay_, other->autoplay_build_delay_);
  swap(idle_timer_delay_, other->idle_timer_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[28]);
}

// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._has_bits_);
  static const ::TSA::DocumentArchive& super(const DocumentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& show(const DocumentArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tables_custom_format_list(const DocumentArchive* msg);
  static void set_has_tables_custom_format_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSA::DocumentArchive&
DocumentArchive::_Internal::super(const DocumentArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::show(const DocumentArchive* msg) {
  return *msg->show_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::tables_custom_format_list(const DocumentArchive* msg) {
  return *msg->tables_custom_format_list_;
}
void DocumentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentArchive::clear_show() {
  if (show_ != nullptr) show_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentArchive::clear_tables_custom_format_list() {
  if (tables_custom_format_list_ != nullptr) tables_custom_format_list_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_show()) {
    show_ = new ::TSP::Reference(*from.show_);
  } else {
    show_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSA::DocumentArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tables_custom_format_list()) {
    tables_custom_format_list_ = new ::TSP::Reference(*from.tables_custom_format_list_);
  } else {
    tables_custom_format_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.DocumentArchive)
}

inline void DocumentArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&show_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tables_custom_format_list_) -
    reinterpret_cast<char*>(&show_)) + sizeof(tables_custom_format_list_));
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:KN.DocumentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete show_;
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tables_custom_format_list_;
}

void DocumentArchive::ArenaDtor(void* object) {
  DocumentArchive* _this = reinterpret_cast< DocumentArchive* >(object);
  (void)_this;
}
void DocumentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.DocumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(show_ != nullptr);
      show_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tables_custom_format_list_ != nullptr);
      tables_custom_format_list_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSA.DocumentArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference tables_custom_format_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tables_custom_format_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.DocumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::show(this), target, stream);
  }

  // required .TSA.DocumentArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference tables_custom_format_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tables_custom_format_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.DocumentArchive)
  return target;
}

size_t DocumentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.DocumentArchive)
  size_t total_size = 0;

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);
  }

  if (_internal_has_super()) {
    // required .TSA.DocumentArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.DocumentArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);

    // required .TSA.DocumentArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference tables_custom_format_list = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tables_custom_format_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentArchive::GetClassData() const { return &_class_data_; }

void DocumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DocumentArchive *>(to)->MergeFrom(
      static_cast<const DocumentArchive &>(from));
}


void DocumentArchive::MergeFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_show()->::TSP::Reference::MergeFrom(from._internal_show());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSA::DocumentArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tables_custom_format_list()->::TSP::Reference::MergeFrom(from._internal_tables_custom_format_list());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_show()) {
    if (!show_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tables_custom_format_list()) {
    if (!tables_custom_format_list_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, tables_custom_format_list_)
      + sizeof(DocumentArchive::tables_custom_format_list_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, show_)>(
          reinterpret_cast<char*>(&show_),
          reinterpret_cast<char*>(&other->show_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[29]);
}

// ===================================================================

class SlideStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideStylePropertiesArchive>()._has_bits_);
  static const ::TSD::FillArchive& fill(const SlideStylePropertiesArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::TransitionAttributesArchive& transition(const SlideStylePropertiesArchive* msg);
  static void set_has_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transition_null(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_titleplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bodyplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_objectplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_slidenumberplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSD::FillArchive&
SlideStylePropertiesArchive::_Internal::fill(const SlideStylePropertiesArchive* msg) {
  return *msg->fill_;
}
const ::KN::TransitionAttributesArchive&
SlideStylePropertiesArchive::_Internal::transition(const SlideStylePropertiesArchive* msg) {
  return *msg->transition_;
}
void SlideStylePropertiesArchive::clear_fill() {
  if (fill_ != nullptr) fill_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SlideStylePropertiesArchive::SlideStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideStylePropertiesArchive)
}
SlideStylePropertiesArchive::SlideStylePropertiesArchive(const SlideStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    fill_ = new ::TSD::FillArchive(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  if (from._internal_has_transition()) {
    transition_ = new ::KN::TransitionAttributesArchive(*from.transition_);
  } else {
    transition_ = nullptr;
  }
  ::memcpy(&transition_null_, &from.transition_null_,
    static_cast<size_t>(reinterpret_cast<char*>(&slidenumberplaceholdervisibility_) -
    reinterpret_cast<char*>(&transition_null_)) + sizeof(slidenumberplaceholdervisibility_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideStylePropertiesArchive)
}

inline void SlideStylePropertiesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slidenumberplaceholdervisibility_) -
    reinterpret_cast<char*>(&fill_)) + sizeof(slidenumberplaceholdervisibility_));
}

SlideStylePropertiesArchive::~SlideStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideStylePropertiesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fill_;
  if (this != internal_default_instance()) delete transition_;
}

void SlideStylePropertiesArchive::ArenaDtor(void* object) {
  SlideStylePropertiesArchive* _this = reinterpret_cast< SlideStylePropertiesArchive* >(object);
  (void)_this;
}
void SlideStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fill_ != nullptr);
      fill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(transition_ != nullptr);
      transition_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&transition_null_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slidenumberplaceholdervisibility_) -
        reinterpret_cast<char*>(&transition_null_)) + sizeof(slidenumberplaceholdervisibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive transition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool transition_null = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_transition_null(&has_bits);
          transition_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool titlePlaceholderVisibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_titleplaceholdervisibility(&has_bits);
          titleplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bodyPlaceholderVisibility = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bodyplaceholdervisibility(&has_bits);
          bodyplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool slideNumberPlaceholderVisibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_slidenumberplaceholdervisibility(&has_bits);
          slidenumberplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool objectPlaceholderVisibility = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_objectplaceholdervisibility(&has_bits);
          objectplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fill(this), target, stream);
  }

  // optional .KN.TransitionAttributesArchive transition = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transition(this), target, stream);
  }

  // optional bool transition_null = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_transition_null(), target);
  }

  // optional bool titlePlaceholderVisibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_titleplaceholdervisibility(), target);
  }

  // optional bool bodyPlaceholderVisibility = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bodyplaceholdervisibility(), target);
  }

  // optional bool slideNumberPlaceholderVisibility = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_slidenumberplaceholdervisibility(), target);
  }

  // optional bool objectPlaceholderVisibility = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_objectplaceholdervisibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideStylePropertiesArchive)
  return target;
}

size_t SlideStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSD.FillArchive fill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fill_);
    }

    // optional .KN.TransitionAttributesArchive transition = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transition_);
    }

    // optional bool transition_null = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool titlePlaceholderVisibility = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bodyPlaceholderVisibility = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool objectPlaceholderVisibility = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool slideNumberPlaceholderVisibility = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideStylePropertiesArchive::GetClassData() const { return &_class_data_; }

void SlideStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideStylePropertiesArchive *>(to)->MergeFrom(
      static_cast<const SlideStylePropertiesArchive &>(from));
}


void SlideStylePropertiesArchive::MergeFrom(const SlideStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fill()->::TSD::FillArchive::MergeFrom(from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_transition()->::KN::TransitionAttributesArchive::MergeFrom(from._internal_transition());
    }
    if (cached_has_bits & 0x00000004u) {
      transition_null_ = from.transition_null_;
    }
    if (cached_has_bits & 0x00000008u) {
      titleplaceholdervisibility_ = from.titleplaceholdervisibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      bodyplaceholdervisibility_ = from.bodyplaceholdervisibility_;
    }
    if (cached_has_bits & 0x00000020u) {
      objectplaceholdervisibility_ = from.objectplaceholdervisibility_;
    }
    if (cached_has_bits & 0x00000040u) {
      slidenumberplaceholdervisibility_ = from.slidenumberplaceholdervisibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideStylePropertiesArchive::CopyFrom(const SlideStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!fill_->IsInitialized()) return false;
  }
  if (_internal_has_transition()) {
    if (!transition_->IsInitialized()) return false;
  }
  return true;
}

void SlideStylePropertiesArchive::InternalSwap(SlideStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideStylePropertiesArchive, slidenumberplaceholdervisibility_)
      + sizeof(SlideStylePropertiesArchive::slidenumberplaceholdervisibility_)
      - PROTOBUF_FIELD_OFFSET(SlideStylePropertiesArchive, fill_)>(
          reinterpret_cast<char*>(&fill_),
          reinterpret_cast<char*>(&other->fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[30]);
}

// ===================================================================

class SlideStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const SlideStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::SlideStylePropertiesArchive& slide_properties(const SlideStyleArchive* msg);
  static void set_has_slide_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
SlideStyleArchive::_Internal::super(const SlideStyleArchive* msg) {
  return *msg->super_;
}
const ::KN::SlideStylePropertiesArchive&
SlideStyleArchive::_Internal::slide_properties(const SlideStyleArchive* msg) {
  return *msg->slide_properties_;
}
void SlideStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SlideStyleArchive::SlideStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideStyleArchive)
}
SlideStyleArchive::SlideStyleArchive(const SlideStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_properties()) {
    slide_properties_ = new ::KN::SlideStylePropertiesArchive(*from.slide_properties_);
  } else {
    slide_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:KN.SlideStyleArchive)
}

inline void SlideStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

SlideStyleArchive::~SlideStyleArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_properties_;
}

void SlideStyleArchive::ArenaDtor(void* object) {
  SlideStyleArchive* _this = reinterpret_cast< SlideStyleArchive* >(object);
  (void)_this;
}
void SlideStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_properties_ != nullptr);
      slide_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::slide_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideStyleArchive)
  return target;
}

size_t SlideStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slide_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideStyleArchive::GetClassData() const { return &_class_data_; }

void SlideStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideStyleArchive *>(to)->MergeFrom(
      static_cast<const SlideStyleArchive &>(from));
}


void SlideStyleArchive::MergeFrom(const SlideStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_properties()->::KN::SlideStylePropertiesArchive::MergeFrom(from._internal_slide_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideStyleArchive::CopyFrom(const SlideStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_properties()) {
    if (!slide_properties_->IsInitialized()) return false;
  }
  return true;
}

void SlideStyleArchive::InternalSwap(SlideStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideStyleArchive, override_count_)
      + sizeof(SlideStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(SlideStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[31]);
}

// ===================================================================

class PasteboardNativeStorageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteboardNativeStorageArchive>()._has_bits_);
  static const ::TSP::Size& originalshowsize(const PasteboardNativeStorageArchive* msg);
  static void set_has_originalshowsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slide_node_unique_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slide_nodes_have_datas_needing_download(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::TransitionArchive& transition(const PasteboardNativeStorageArchive* msg);
  static void set_has_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Size&
PasteboardNativeStorageArchive::_Internal::originalshowsize(const PasteboardNativeStorageArchive* msg) {
  return *msg->originalshowsize_;
}
const ::KN::TransitionArchive&
PasteboardNativeStorageArchive::_Internal::transition(const PasteboardNativeStorageArchive* msg) {
  return *msg->transition_;
}
void PasteboardNativeStorageArchive::clear_drawables() {
  drawables_.Clear();
}
void PasteboardNativeStorageArchive::clear_builds() {
  builds_.Clear();
}
void PasteboardNativeStorageArchive::clear_buildchunks() {
  buildchunks_.Clear();
}
void PasteboardNativeStorageArchive::clear_slidenodes() {
  slidenodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_displayed_slide_nodes() {
  displayed_slide_nodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_template_slide_nodes() {
  template_slide_nodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_collapsedslidenodes() {
  collapsedslidenodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_outlinecollapsedslidenodes() {
  outlinecollapsedslidenodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_outlinehasbodyslidenodes() {
  outlinehasbodyslidenodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_originalshowsize() {
  if (originalshowsize_ != nullptr) originalshowsize_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PasteboardNativeStorageArchive::clear_titleranges() {
  titleranges_.Clear();
}
void PasteboardNativeStorageArchive::clear_geometries_in_root() {
  geometries_in_root_.Clear();
}
PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  drawables_(arena),
  builds_(arena),
  buildchunks_(arena),
  slidenodes_(arena),
  titleranges_(arena),
  geometries_in_root_(arena),
  template_slide_nodes_(arena),
  collapsedslidenodes_(arena),
  outlinecollapsedslidenodes_(arena),
  displayed_slide_nodes_(arena),
  outlinehasbodyslidenodes_(arena),
  custom_effect_timing_curves_(arena),
  original_slide_node_uuids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.PasteboardNativeStorageArchive)
}
PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(const PasteboardNativeStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawables_(from.drawables_),
      builds_(from.builds_),
      buildchunks_(from.buildchunks_),
      slidenodes_(from.slidenodes_),
      titleranges_(from.titleranges_),
      geometries_in_root_(from.geometries_in_root_),
      template_slide_nodes_(from.template_slide_nodes_),
      collapsedslidenodes_(from.collapsedslidenodes_),
      outlinecollapsedslidenodes_(from.outlinecollapsedslidenodes_),
      displayed_slide_nodes_(from.displayed_slide_nodes_),
      outlinehasbodyslidenodes_(from.outlinehasbodyslidenodes_),
      custom_effect_timing_curves_(from.custom_effect_timing_curves_),
      original_slide_node_uuids_(from.original_slide_node_uuids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slide_node_unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_slide_node_unique_identifier()) {
    slide_node_unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slide_node_unique_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_originalshowsize()) {
    originalshowsize_ = new ::TSP::Size(*from.originalshowsize_);
  } else {
    originalshowsize_ = nullptr;
  }
  if (from._internal_has_transition()) {
    transition_ = new ::KN::TransitionArchive(*from.transition_);
  } else {
    transition_ = nullptr;
  }
  slide_nodes_have_datas_needing_download_ = from.slide_nodes_have_datas_needing_download_;
  // @@protoc_insertion_point(copy_constructor:KN.PasteboardNativeStorageArchive)
}

inline void PasteboardNativeStorageArchive::SharedCtor() {
slide_node_unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&originalshowsize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slide_nodes_have_datas_needing_download_) -
    reinterpret_cast<char*>(&originalshowsize_)) + sizeof(slide_nodes_have_datas_needing_download_));
}

PasteboardNativeStorageArchive::~PasteboardNativeStorageArchive() {
  // @@protoc_insertion_point(destructor:KN.PasteboardNativeStorageArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PasteboardNativeStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  slide_node_unique_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete originalshowsize_;
  if (this != internal_default_instance()) delete transition_;
}

void PasteboardNativeStorageArchive::ArenaDtor(void* object) {
  PasteboardNativeStorageArchive* _this = reinterpret_cast< PasteboardNativeStorageArchive* >(object);
  (void)_this;
}
void PasteboardNativeStorageArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PasteboardNativeStorageArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasteboardNativeStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PasteboardNativeStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawables_.Clear();
  builds_.Clear();
  buildchunks_.Clear();
  slidenodes_.Clear();
  titleranges_.Clear();
  geometries_in_root_.Clear();
  template_slide_nodes_.Clear();
  collapsedslidenodes_.Clear();
  outlinecollapsedslidenodes_.Clear();
  displayed_slide_nodes_.Clear();
  outlinehasbodyslidenodes_.Clear();
  custom_effect_timing_curves_.Clear();
  original_slide_node_uuids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      slide_node_unique_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(originalshowsize_ != nullptr);
      originalshowsize_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transition_ != nullptr);
      transition_->Clear();
    }
  }
  slide_nodes_have_datas_needing_download_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteboardNativeStorageArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference drawables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference builds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_builds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference buildChunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildchunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference slideNodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size originalShowSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_originalshowsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Range titleRanges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_titleranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSD.GeometryArchive geometries_in_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geometries_in_root(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string slide_node_unique_identifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_slide_node_unique_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.PasteboardNativeStorageArchive.slide_node_unique_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_slide_nodes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference collapsedSlideNodes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collapsedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference outlineCollapsedSlideNodes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outlinecollapsedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference displayed_slide_nodes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_displayed_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference outlineHasBodySlideNodes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outlinehasbodyslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_effect_timing_curves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string original_slide_node_UUIDs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_original_slide_node_uuids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool slide_nodes_have_datas_needing_download = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_slide_nodes_have_datas_needing_download(&has_bits);
          slide_nodes_have_datas_needing_download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.TransitionArchive transition = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PasteboardNativeStorageArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PasteboardNativeStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_drawables(i), target, stream);
  }

  // repeated .TSP.Reference builds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_builds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_builds(i), target, stream);
  }

  // repeated .TSP.Reference buildChunks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildchunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_buildchunks(i), target, stream);
  }

  // repeated .TSP.Reference slideNodes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slidenodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_slidenodes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Size originalShowSize = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::originalshowsize(this), target, stream);
  }

  // repeated .TSP.Range titleRanges = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_titleranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_titleranges(i), target, stream);
  }

  // repeated .TSD.GeometryArchive geometries_in_root = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geometries_in_root_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_geometries_in_root(i), target, stream);
  }

  // optional string slide_node_unique_identifier = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_slide_node_unique_identifier().data(), static_cast<int>(this->_internal_slide_node_unique_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.PasteboardNativeStorageArchive.slide_node_unique_identifier");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_slide_node_unique_identifier(), target);
  }

  // repeated .TSP.Reference template_slide_nodes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_template_slide_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_template_slide_nodes(i), target, stream);
  }

  // repeated .TSP.Reference collapsedSlideNodes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collapsedslidenodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_collapsedslidenodes(i), target, stream);
  }

  // repeated .TSP.Reference outlineCollapsedSlideNodes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outlinecollapsedslidenodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_outlinecollapsedslidenodes(i), target, stream);
  }

  // repeated .TSP.Reference displayed_slide_nodes = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_displayed_slide_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_displayed_slide_nodes(i), target, stream);
  }

  // repeated .TSP.Reference outlineHasBodySlideNodes = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outlinehasbodyslidenodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_outlinehasbodyslidenodes(i), target, stream);
  }

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_effect_timing_curves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_custom_effect_timing_curves(i), target, stream);
  }

  // repeated string original_slide_node_UUIDs = 15;
  for (int i = 0, n = this->_internal_original_slide_node_uuids_size(); i < n; i++) {
    const auto& s = this->_internal_original_slide_node_uuids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs");
    target = stream->WriteString(15, s, target);
  }

  // optional bool slide_nodes_have_datas_needing_download = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_slide_nodes_have_datas_needing_download(), target);
  }

  // optional .KN.TransitionArchive transition = 17;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::transition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PasteboardNativeStorageArchive)
  return target;
}

size_t PasteboardNativeStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PasteboardNativeStorageArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference builds = 2;
  total_size += 1UL * this->_internal_builds_size();
  for (const auto& msg : this->builds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference buildChunks = 3;
  total_size += 1UL * this->_internal_buildchunks_size();
  for (const auto& msg : this->buildchunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference slideNodes = 4;
  total_size += 1UL * this->_internal_slidenodes_size();
  for (const auto& msg : this->slidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Range titleRanges = 6;
  total_size += 1UL * this->_internal_titleranges_size();
  for (const auto& msg : this->titleranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.GeometryArchive geometries_in_root = 7;
  total_size += 1UL * this->_internal_geometries_in_root_size();
  for (const auto& msg : this->geometries_in_root_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference template_slide_nodes = 9;
  total_size += 1UL * this->_internal_template_slide_nodes_size();
  for (const auto& msg : this->template_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference collapsedSlideNodes = 10;
  total_size += 1UL * this->_internal_collapsedslidenodes_size();
  for (const auto& msg : this->collapsedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference outlineCollapsedSlideNodes = 11;
  total_size += 1UL * this->_internal_outlinecollapsedslidenodes_size();
  for (const auto& msg : this->outlinecollapsedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference displayed_slide_nodes = 12;
  total_size += 1UL * this->_internal_displayed_slide_nodes_size();
  for (const auto& msg : this->displayed_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference outlineHasBodySlideNodes = 13;
  total_size += 1UL * this->_internal_outlinehasbodyslidenodes_size();
  for (const auto& msg : this->outlinehasbodyslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 14;
  total_size += 1UL * this->_internal_custom_effect_timing_curves_size();
  for (const auto& msg : this->custom_effect_timing_curves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string original_slide_node_UUIDs = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(original_slide_node_uuids_.size());
  for (int i = 0, n = original_slide_node_uuids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      original_slide_node_uuids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string slide_node_unique_identifier = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_slide_node_unique_identifier());
    }

    // optional .TSP.Size originalShowSize = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *originalshowsize_);
    }

    // optional .KN.TransitionArchive transition = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transition_);
    }

    // optional bool slide_nodes_have_datas_needing_download = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PasteboardNativeStorageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PasteboardNativeStorageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PasteboardNativeStorageArchive::GetClassData() const { return &_class_data_; }

void PasteboardNativeStorageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PasteboardNativeStorageArchive *>(to)->MergeFrom(
      static_cast<const PasteboardNativeStorageArchive &>(from));
}


void PasteboardNativeStorageArchive::MergeFrom(const PasteboardNativeStorageArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.PasteboardNativeStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawables_.MergeFrom(from.drawables_);
  builds_.MergeFrom(from.builds_);
  buildchunks_.MergeFrom(from.buildchunks_);
  slidenodes_.MergeFrom(from.slidenodes_);
  titleranges_.MergeFrom(from.titleranges_);
  geometries_in_root_.MergeFrom(from.geometries_in_root_);
  template_slide_nodes_.MergeFrom(from.template_slide_nodes_);
  collapsedslidenodes_.MergeFrom(from.collapsedslidenodes_);
  outlinecollapsedslidenodes_.MergeFrom(from.outlinecollapsedslidenodes_);
  displayed_slide_nodes_.MergeFrom(from.displayed_slide_nodes_);
  outlinehasbodyslidenodes_.MergeFrom(from.outlinehasbodyslidenodes_);
  custom_effect_timing_curves_.MergeFrom(from.custom_effect_timing_curves_);
  original_slide_node_uuids_.MergeFrom(from.original_slide_node_uuids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_slide_node_unique_identifier(from._internal_slide_node_unique_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_originalshowsize()->::TSP::Size::MergeFrom(from._internal_originalshowsize());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_transition()->::KN::TransitionArchive::MergeFrom(from._internal_transition());
    }
    if (cached_has_bits & 0x00000008u) {
      slide_nodes_have_datas_needing_download_ = from.slide_nodes_have_datas_needing_download_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PasteboardNativeStorageArchive::CopyFrom(const PasteboardNativeStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PasteboardNativeStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardNativeStorageArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(builds_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(buildchunks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slidenodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(titleranges_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(geometries_in_root_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(template_slide_nodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(collapsedslidenodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(outlinecollapsedslidenodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(displayed_slide_nodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(outlinehasbodyslidenodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_effect_timing_curves_)) return false;
  if (_internal_has_originalshowsize()) {
    if (!originalshowsize_->IsInitialized()) return false;
  }
  if (_internal_has_transition()) {
    if (!transition_->IsInitialized()) return false;
  }
  return true;
}

void PasteboardNativeStorageArchive::InternalSwap(PasteboardNativeStorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawables_.InternalSwap(&other->drawables_);
  builds_.InternalSwap(&other->builds_);
  buildchunks_.InternalSwap(&other->buildchunks_);
  slidenodes_.InternalSwap(&other->slidenodes_);
  titleranges_.InternalSwap(&other->titleranges_);
  geometries_in_root_.InternalSwap(&other->geometries_in_root_);
  template_slide_nodes_.InternalSwap(&other->template_slide_nodes_);
  collapsedslidenodes_.InternalSwap(&other->collapsedslidenodes_);
  outlinecollapsedslidenodes_.InternalSwap(&other->outlinecollapsedslidenodes_);
  displayed_slide_nodes_.InternalSwap(&other->displayed_slide_nodes_);
  outlinehasbodyslidenodes_.InternalSwap(&other->outlinehasbodyslidenodes_);
  custom_effect_timing_curves_.InternalSwap(&other->custom_effect_timing_curves_);
  original_slide_node_uuids_.InternalSwap(&other->original_slide_node_uuids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &slide_node_unique_identifier_, GetArenaForAllocation(),
      &other->slide_node_unique_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteboardNativeStorageArchive, slide_nodes_have_datas_needing_download_)
      + sizeof(PasteboardNativeStorageArchive::slide_nodes_have_datas_needing_download_)
      - PROTOBUF_FIELD_OFFSET(PasteboardNativeStorageArchive, originalshowsize_)>(
          reinterpret_cast<char*>(&originalshowsize_),
          reinterpret_cast<char*>(&other->originalshowsize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteboardNativeStorageArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[32]);
}

// ===================================================================

class PrototypeForUndoTemplateChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PrototypeForUndoTemplateChangeArchive>()._has_bits_);
  static const ::TSP::Reference& slide_style(const PrototypeForUndoTemplateChangeArchive* msg);
  static void set_has_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& template_slide_id(const PrototypeForUndoTemplateChangeArchive* msg);
  static void set_has_template_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
PrototypeForUndoTemplateChangeArchive::_Internal::slide_style(const PrototypeForUndoTemplateChangeArchive* msg) {
  return *msg->slide_style_;
}
const ::TSP::UUID&
PrototypeForUndoTemplateChangeArchive::_Internal::template_slide_id(const PrototypeForUndoTemplateChangeArchive* msg) {
  return *msg->template_slide_id_;
}
void PrototypeForUndoTemplateChangeArchive::clear_slide_style() {
  if (slide_style_ != nullptr) slide_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PrototypeForUndoTemplateChangeArchive::clear_template_slide_id() {
  if (template_slide_id_ != nullptr) template_slide_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PrototypeForUndoTemplateChangeArchive::clear_drawable_info_id_list() {
  drawable_info_id_list_.Clear();
}
void PrototypeForUndoTemplateChangeArchive::clear_placeholders() {
  placeholders_.Clear();
}
PrototypeForUndoTemplateChangeArchive::PrototypeForUndoTemplateChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  drawable_info_id_list_(arena),
  placeholders_(arena),
  placeholder_tags_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.PrototypeForUndoTemplateChangeArchive)
}
PrototypeForUndoTemplateChangeArchive::PrototypeForUndoTemplateChangeArchive(const PrototypeForUndoTemplateChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawable_info_id_list_(from.drawable_info_id_list_),
      placeholders_(from.placeholders_),
      placeholder_tags_list_(from.placeholder_tags_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_style()) {
    slide_style_ = new ::TSP::Reference(*from.slide_style_);
  } else {
    slide_style_ = nullptr;
  }
  if (from._internal_has_template_slide_id()) {
    template_slide_id_ = new ::TSP::UUID(*from.template_slide_id_);
  } else {
    template_slide_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.PrototypeForUndoTemplateChangeArchive)
}

inline void PrototypeForUndoTemplateChangeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slide_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&template_slide_id_) -
    reinterpret_cast<char*>(&slide_style_)) + sizeof(template_slide_id_));
}

PrototypeForUndoTemplateChangeArchive::~PrototypeForUndoTemplateChangeArchive() {
  // @@protoc_insertion_point(destructor:KN.PrototypeForUndoTemplateChangeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrototypeForUndoTemplateChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slide_style_;
  if (this != internal_default_instance()) delete template_slide_id_;
}

void PrototypeForUndoTemplateChangeArchive::ArenaDtor(void* object) {
  PrototypeForUndoTemplateChangeArchive* _this = reinterpret_cast< PrototypeForUndoTemplateChangeArchive* >(object);
  (void)_this;
}
void PrototypeForUndoTemplateChangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrototypeForUndoTemplateChangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrototypeForUndoTemplateChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PrototypeForUndoTemplateChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawable_info_id_list_.Clear();
  placeholders_.Clear();
  placeholder_tags_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(slide_style_ != nullptr);
      slide_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(template_slide_id_ != nullptr);
      template_slide_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrototypeForUndoTemplateChangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference slide_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID template_slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID drawable_info_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_info_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference placeholders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placeholders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string placeholder_tags_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_placeholder_tags_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrototypeForUndoTemplateChangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PrototypeForUndoTemplateChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference slide_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slide_style(this), target, stream);
  }

  // required .TSP.UUID template_slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::template_slide_id(this), target, stream);
  }

  // repeated .TSP.UUID drawable_info_id_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_info_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_drawable_info_id_list(i), target, stream);
  }

  // repeated .TSP.Reference placeholders = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_placeholders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_placeholders(i), target, stream);
  }

  // repeated string placeholder_tags_list = 5;
  for (int i = 0, n = this->_internal_placeholder_tags_list_size(); i < n; i++) {
    const auto& s = this->_internal_placeholder_tags_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PrototypeForUndoTemplateChangeArchive)
  return target;
}

size_t PrototypeForUndoTemplateChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PrototypeForUndoTemplateChangeArchive)
  size_t total_size = 0;

  // required .TSP.UUID template_slide_id = 2;
  if (_internal_has_template_slide_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_slide_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID drawable_info_id_list = 3;
  total_size += 1UL * this->_internal_drawable_info_id_list_size();
  for (const auto& msg : this->drawable_info_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference placeholders = 4;
  total_size += 1UL * this->_internal_placeholders_size();
  for (const auto& msg : this->placeholders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string placeholder_tags_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(placeholder_tags_list_.size());
  for (int i = 0, n = placeholder_tags_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      placeholder_tags_list_.Get(i));
  }

  // optional .TSP.Reference slide_style = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrototypeForUndoTemplateChangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrototypeForUndoTemplateChangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrototypeForUndoTemplateChangeArchive::GetClassData() const { return &_class_data_; }

void PrototypeForUndoTemplateChangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PrototypeForUndoTemplateChangeArchive *>(to)->MergeFrom(
      static_cast<const PrototypeForUndoTemplateChangeArchive &>(from));
}


void PrototypeForUndoTemplateChangeArchive::MergeFrom(const PrototypeForUndoTemplateChangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.PrototypeForUndoTemplateChangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawable_info_id_list_.MergeFrom(from.drawable_info_id_list_);
  placeholders_.MergeFrom(from.placeholders_);
  placeholder_tags_list_.MergeFrom(from.placeholder_tags_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_slide_style()->::TSP::Reference::MergeFrom(from._internal_slide_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_template_slide_id()->::TSP::UUID::MergeFrom(from._internal_template_slide_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrototypeForUndoTemplateChangeArchive::CopyFrom(const PrototypeForUndoTemplateChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PrototypeForUndoTemplateChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrototypeForUndoTemplateChangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_info_id_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(placeholders_)) return false;
  if (_internal_has_slide_style()) {
    if (!slide_style_->IsInitialized()) return false;
  }
  if (_internal_has_template_slide_id()) {
    if (!template_slide_id_->IsInitialized()) return false;
  }
  return true;
}

void PrototypeForUndoTemplateChangeArchive::InternalSwap(PrototypeForUndoTemplateChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawable_info_id_list_.InternalSwap(&other->drawable_info_id_list_);
  placeholders_.InternalSwap(&other->placeholders_);
  placeholder_tags_list_.InternalSwap(&other->placeholder_tags_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrototypeForUndoTemplateChangeArchive, template_slide_id_)
      + sizeof(PrototypeForUndoTemplateChangeArchive::template_slide_id_)
      - PROTOBUF_FIELD_OFFSET(PrototypeForUndoTemplateChangeArchive, slide_style_)>(
          reinterpret_cast<char*>(&slide_style_),
          reinterpret_cast<char*>(&other->slide_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrototypeForUndoTemplateChangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[33]);
}

// ===================================================================

class RecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingArchive>()._has_bits_);
  static const ::TSP::Reference& movie_track(const RecordingArchive* msg);
  static void set_has_movie_track(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sync_state_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Date& modification_date(const RecordingArchive* msg);
  static void set_has_modification_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::RecordingSyncState& sync_state(const RecordingArchive* msg);
  static void set_has_sync_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::RecordingCorrectionHistory& correction_history(const RecordingArchive* msg);
  static void set_has_correction_history(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Reference&
RecordingArchive::_Internal::movie_track(const RecordingArchive* msg) {
  return *msg->movie_track_;
}
const ::TSP::Date&
RecordingArchive::_Internal::modification_date(const RecordingArchive* msg) {
  return *msg->modification_date_;
}
const ::KN::RecordingSyncState&
RecordingArchive::_Internal::sync_state(const RecordingArchive* msg) {
  return *msg->sync_state_;
}
const ::KN::RecordingCorrectionHistory&
RecordingArchive::_Internal::correction_history(const RecordingArchive* msg) {
  return *msg->correction_history_;
}
void RecordingArchive::clear_event_tracks() {
  event_tracks_.Clear();
}
void RecordingArchive::clear_movie_track() {
  if (movie_track_ != nullptr) movie_track_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RecordingArchive::clear_modification_date() {
  if (modification_date_ != nullptr) modification_date_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RecordingArchive::RecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  event_tracks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingArchive)
}
RecordingArchive::RecordingArchive(const RecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      event_tracks_(from.event_tracks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movie_track()) {
    movie_track_ = new ::TSP::Reference(*from.movie_track_);
  } else {
    movie_track_ = nullptr;
  }
  if (from._internal_has_modification_date()) {
    modification_date_ = new ::TSP::Date(*from.modification_date_);
  } else {
    modification_date_ = nullptr;
  }
  if (from._internal_has_sync_state()) {
    sync_state_ = new ::KN::RecordingSyncState(*from.sync_state_);
  } else {
    sync_state_ = nullptr;
  }
  if (from._internal_has_correction_history()) {
    correction_history_ = new ::KN::RecordingCorrectionHistory(*from.correction_history_);
  } else {
    correction_history_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_state_enum_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(sync_state_enum_));
  // @@protoc_insertion_point(copy_constructor:KN.RecordingArchive)
}

inline void RecordingArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&movie_track_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sync_state_enum_) -
    reinterpret_cast<char*>(&movie_track_)) + sizeof(sync_state_enum_));
}

RecordingArchive::~RecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete movie_track_;
  if (this != internal_default_instance()) delete modification_date_;
  if (this != internal_default_instance()) delete sync_state_;
  if (this != internal_default_instance()) delete correction_history_;
}

void RecordingArchive::ArenaDtor(void* object) {
  RecordingArchive* _this = reinterpret_cast< RecordingArchive* >(object);
  (void)_this;
}
void RecordingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_tracks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(movie_track_ != nullptr);
      movie_track_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(modification_date_ != nullptr);
      modification_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sync_state_ != nullptr);
      sync_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(correction_history_ != nullptr);
      correction_history_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_state_enum_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(sync_state_enum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference event_tracks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference movie_track = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_track(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .KN.RecordingArchive.RecordingSyncStateEnum sync_state_enum = 4 [default = kRecordingSyncStateInSyncWithShow, deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingArchive_RecordingSyncStateEnum_IsValid(val))) {
            _internal_set_sync_state_enum(static_cast<::KN::RecordingArchive_RecordingSyncStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date modification_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modification_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.RecordingSyncState sync_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.RecordingCorrectionHistory correction_history = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_correction_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference event_tracks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_tracks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_event_tracks(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference movie_track = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::movie_track(this), target, stream);
  }

  // optional double duration = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // optional .KN.RecordingArchive.RecordingSyncStateEnum sync_state_enum = 4 [default = kRecordingSyncStateInSyncWithShow, deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sync_state_enum(), target);
  }

  // optional .TSP.Date modification_date = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::modification_date(this), target, stream);
  }

  // optional .KN.RecordingSyncState sync_state = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sync_state(this), target, stream);
  }

  // optional .KN.RecordingCorrectionHistory correction_history = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::correction_history(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingArchive)
  return target;
}

size_t RecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference event_tracks = 1;
  total_size += 1UL * this->_internal_event_tracks_size();
  for (const auto& msg : this->event_tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSP.Reference movie_track = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *movie_track_);
    }

    // optional .TSP.Date modification_date = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *modification_date_);
    }

    // optional .KN.RecordingSyncState sync_state = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sync_state_);
    }

    // optional .KN.RecordingCorrectionHistory correction_history = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *correction_history_);
    }

    // optional double duration = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .KN.RecordingArchive.RecordingSyncStateEnum sync_state_enum = 4 [default = kRecordingSyncStateInSyncWithShow, deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sync_state_enum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingArchive::GetClassData() const { return &_class_data_; }

void RecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingArchive *>(to)->MergeFrom(
      static_cast<const RecordingArchive &>(from));
}


void RecordingArchive::MergeFrom(const RecordingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_tracks_.MergeFrom(from.event_tracks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_movie_track()->::TSP::Reference::MergeFrom(from._internal_movie_track());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_modification_date()->::TSP::Date::MergeFrom(from._internal_modification_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sync_state()->::KN::RecordingSyncState::MergeFrom(from._internal_sync_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_correction_history()->::KN::RecordingCorrectionHistory::MergeFrom(from._internal_correction_history());
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      sync_state_enum_ = from.sync_state_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingArchive::CopyFrom(const RecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(event_tracks_)) return false;
  if (_internal_has_movie_track()) {
    if (!movie_track_->IsInitialized()) return false;
  }
  if (_internal_has_modification_date()) {
    if (!modification_date_->IsInitialized()) return false;
  }
  if (_internal_has_sync_state()) {
    if (!sync_state_->IsInitialized()) return false;
  }
  return true;
}

void RecordingArchive::InternalSwap(RecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_tracks_.InternalSwap(&other->event_tracks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingArchive, sync_state_enum_)
      + sizeof(RecordingArchive::sync_state_enum_)
      - PROTOBUF_FIELD_OFFSET(RecordingArchive, movie_track_)>(
          reinterpret_cast<char*>(&movie_track_),
          reinterpret_cast<char*>(&other->movie_track_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[34]);
}

// ===================================================================

class RecordingSyncState::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingSyncState>()._has_bits_);
  static const ::TSP::UUID& out_of_sync_token(const RecordingSyncState* msg);
  static void set_has_out_of_sync_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_clear_out_of_sync_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::UUID&
RecordingSyncState::_Internal::out_of_sync_token(const RecordingSyncState* msg) {
  return *msg->out_of_sync_token_;
}
void RecordingSyncState::clear_out_of_sync_token() {
  if (out_of_sync_token_ != nullptr) out_of_sync_token_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RecordingSyncState::RecordingSyncState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingSyncState)
}
RecordingSyncState::RecordingSyncState(const RecordingSyncState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_out_of_sync_token()) {
    out_of_sync_token_ = new ::TSP::UUID(*from.out_of_sync_token_);
  } else {
    out_of_sync_token_ = nullptr;
  }
  can_clear_out_of_sync_token_ = from.can_clear_out_of_sync_token_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingSyncState)
}

inline void RecordingSyncState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&out_of_sync_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_clear_out_of_sync_token_) -
    reinterpret_cast<char*>(&out_of_sync_token_)) + sizeof(can_clear_out_of_sync_token_));
}

RecordingSyncState::~RecordingSyncState() {
  // @@protoc_insertion_point(destructor:KN.RecordingSyncState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingSyncState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete out_of_sync_token_;
}

void RecordingSyncState::ArenaDtor(void* object) {
  RecordingSyncState* _this = reinterpret_cast< RecordingSyncState* >(object);
  (void)_this;
}
void RecordingSyncState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingSyncState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingSyncState::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingSyncState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(out_of_sync_token_ != nullptr);
    out_of_sync_token_->Clear();
  }
  can_clear_out_of_sync_token_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingSyncState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID out_of_sync_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_of_sync_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_clear_out_of_sync_token = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_clear_out_of_sync_token(&has_bits);
          can_clear_out_of_sync_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingSyncState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingSyncState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUID out_of_sync_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::out_of_sync_token(this), target, stream);
  }

  // optional bool can_clear_out_of_sync_token = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_clear_out_of_sync_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingSyncState)
  return target;
}

size_t RecordingSyncState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingSyncState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.UUID out_of_sync_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *out_of_sync_token_);
    }

    // optional bool can_clear_out_of_sync_token = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingSyncState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingSyncState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingSyncState::GetClassData() const { return &_class_data_; }

void RecordingSyncState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingSyncState *>(to)->MergeFrom(
      static_cast<const RecordingSyncState &>(from));
}


void RecordingSyncState::MergeFrom(const RecordingSyncState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingSyncState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_out_of_sync_token()->::TSP::UUID::MergeFrom(from._internal_out_of_sync_token());
    }
    if (cached_has_bits & 0x00000002u) {
      can_clear_out_of_sync_token_ = from.can_clear_out_of_sync_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingSyncState::CopyFrom(const RecordingSyncState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingSyncState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingSyncState::IsInitialized() const {
  if (_internal_has_out_of_sync_token()) {
    if (!out_of_sync_token_->IsInitialized()) return false;
  }
  return true;
}

void RecordingSyncState::InternalSwap(RecordingSyncState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingSyncState, can_clear_out_of_sync_token_)
      + sizeof(RecordingSyncState::can_clear_out_of_sync_token_)
      - PROTOBUF_FIELD_OFFSET(RecordingSyncState, out_of_sync_token_)>(
          reinterpret_cast<char*>(&out_of_sync_token_),
          reinterpret_cast<char*>(&other->out_of_sync_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingSyncState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[35]);
}

// ===================================================================

class RecordingCorrectionHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingCorrectionHistory>()._has_bits_);
  static void set_has_did_add_missing_events_for_radar_49654305(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingCorrectionHistory::RecordingCorrectionHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingCorrectionHistory)
}
RecordingCorrectionHistory::RecordingCorrectionHistory(const RecordingCorrectionHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  did_add_missing_events_for_radar_49654305_ = from.did_add_missing_events_for_radar_49654305_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingCorrectionHistory)
}

inline void RecordingCorrectionHistory::SharedCtor() {
did_add_missing_events_for_radar_49654305_ = false;
}

RecordingCorrectionHistory::~RecordingCorrectionHistory() {
  // @@protoc_insertion_point(destructor:KN.RecordingCorrectionHistory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingCorrectionHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordingCorrectionHistory::ArenaDtor(void* object) {
  RecordingCorrectionHistory* _this = reinterpret_cast< RecordingCorrectionHistory* >(object);
  (void)_this;
}
void RecordingCorrectionHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingCorrectionHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingCorrectionHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingCorrectionHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  did_add_missing_events_for_radar_49654305_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingCorrectionHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool did_add_missing_events_for_radar_49654305 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_did_add_missing_events_for_radar_49654305(&has_bits);
          did_add_missing_events_for_radar_49654305_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingCorrectionHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingCorrectionHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool did_add_missing_events_for_radar_49654305 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_did_add_missing_events_for_radar_49654305(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingCorrectionHistory)
  return target;
}

size_t RecordingCorrectionHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingCorrectionHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool did_add_missing_events_for_radar_49654305 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingCorrectionHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingCorrectionHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingCorrectionHistory::GetClassData() const { return &_class_data_; }

void RecordingCorrectionHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingCorrectionHistory *>(to)->MergeFrom(
      static_cast<const RecordingCorrectionHistory &>(from));
}


void RecordingCorrectionHistory::MergeFrom(const RecordingCorrectionHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingCorrectionHistory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_did_add_missing_events_for_radar_49654305()) {
    _internal_set_did_add_missing_events_for_radar_49654305(from._internal_did_add_missing_events_for_radar_49654305());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingCorrectionHistory::CopyFrom(const RecordingCorrectionHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingCorrectionHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingCorrectionHistory::IsInitialized() const {
  return true;
}

void RecordingCorrectionHistory::InternalSwap(RecordingCorrectionHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(did_add_missing_events_for_radar_49654305_, other->did_add_missing_events_for_radar_49654305_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingCorrectionHistory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[36]);
}

// ===================================================================

class RecordingEventTrackArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingEventTrackArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingEventTrackArchive::RecordingEventTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingEventTrackArchive)
}
RecordingEventTrackArchive::RecordingEventTrackArchive(const RecordingEventTrackArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KN.RecordingEventTrackArchive)
}

inline void RecordingEventTrackArchive::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RecordingEventTrackArchive::~RecordingEventTrackArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingEventTrackArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingEventTrackArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecordingEventTrackArchive::ArenaDtor(void* object) {
  RecordingEventTrackArchive* _this = reinterpret_cast< RecordingEventTrackArchive* >(object);
  (void)_this;
}
void RecordingEventTrackArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingEventTrackArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingEventTrackArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingEventTrackArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    type_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingEventTrackArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.RecordingEventTrackArchive.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.RecordingEventArchive events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingEventTrackArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingEventTrackArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.RecordingEventTrackArchive.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .KN.RecordingEventArchive events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingEventTrackArchive)
  return target;
}

size_t RecordingEventTrackArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingEventTrackArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.RecordingEventArchive events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingEventTrackArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingEventTrackArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingEventTrackArchive::GetClassData() const { return &_class_data_; }

void RecordingEventTrackArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingEventTrackArchive *>(to)->MergeFrom(
      static_cast<const RecordingEventTrackArchive &>(from));
}


void RecordingEventTrackArchive::MergeFrom(const RecordingEventTrackArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingEventTrackArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingEventTrackArchive::CopyFrom(const RecordingEventTrackArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingEventTrackArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingEventTrackArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(events_)) return false;
  return true;
}

void RecordingEventTrackArchive::InternalSwap(RecordingEventTrackArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingEventTrackArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[37]);
}

// ===================================================================

class RecordingEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingEventArchive>()._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KN::RecordingNavigationEventArchive& navigation_event_archive(const RecordingEventArchive* msg);
  static void set_has_navigation_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::RecordingLaserEventArchive& laser_event_archive(const RecordingEventArchive* msg);
  static void set_has_laser_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::RecordingPauseEventArchive& pause_event_archive(const RecordingEventArchive* msg);
  static void set_has_pause_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::RecordingMovieEventArchive& movie_event_archive(const RecordingEventArchive* msg);
  static void set_has_movie_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::KN::RecordingNavigationEventArchive&
RecordingEventArchive::_Internal::navigation_event_archive(const RecordingEventArchive* msg) {
  return *msg->navigation_event_archive_;
}
const ::KN::RecordingLaserEventArchive&
RecordingEventArchive::_Internal::laser_event_archive(const RecordingEventArchive* msg) {
  return *msg->laser_event_archive_;
}
const ::KN::RecordingPauseEventArchive&
RecordingEventArchive::_Internal::pause_event_archive(const RecordingEventArchive* msg) {
  return *msg->pause_event_archive_;
}
const ::KN::RecordingMovieEventArchive&
RecordingEventArchive::_Internal::movie_event_archive(const RecordingEventArchive* msg) {
  return *msg->movie_event_archive_;
}
RecordingEventArchive::RecordingEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingEventArchive)
}
RecordingEventArchive::RecordingEventArchive(const RecordingEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_navigation_event_archive()) {
    navigation_event_archive_ = new ::KN::RecordingNavigationEventArchive(*from.navigation_event_archive_);
  } else {
    navigation_event_archive_ = nullptr;
  }
  if (from._internal_has_laser_event_archive()) {
    laser_event_archive_ = new ::KN::RecordingLaserEventArchive(*from.laser_event_archive_);
  } else {
    laser_event_archive_ = nullptr;
  }
  if (from._internal_has_pause_event_archive()) {
    pause_event_archive_ = new ::KN::RecordingPauseEventArchive(*from.pause_event_archive_);
  } else {
    pause_event_archive_ = nullptr;
  }
  if (from._internal_has_movie_event_archive()) {
    movie_event_archive_ = new ::KN::RecordingMovieEventArchive(*from.movie_event_archive_);
  } else {
    movie_event_archive_ = nullptr;
  }
  start_time_ = from.start_time_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingEventArchive)
}

inline void RecordingEventArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&navigation_event_archive_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&movie_event_archive_) -
    reinterpret_cast<char*>(&navigation_event_archive_)) + sizeof(movie_event_archive_));
start_time_ = -1;
}

RecordingEventArchive::~RecordingEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingEventArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete navigation_event_archive_;
  if (this != internal_default_instance()) delete laser_event_archive_;
  if (this != internal_default_instance()) delete pause_event_archive_;
  if (this != internal_default_instance()) delete movie_event_archive_;
}

void RecordingEventArchive::ArenaDtor(void* object) {
  RecordingEventArchive* _this = reinterpret_cast< RecordingEventArchive* >(object);
  (void)_this;
}
void RecordingEventArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingEventArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(navigation_event_archive_ != nullptr);
      navigation_event_archive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(laser_event_archive_ != nullptr);
      laser_event_archive_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pause_event_archive_ != nullptr);
      pause_event_archive_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(movie_event_archive_ != nullptr);
      movie_event_archive_->Clear();
    }
    start_time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingEventArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_time = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_event_archive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_laser_event_archive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_event_archive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_event_archive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingEventArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_time = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_time(), target);
  }

  // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1000, _Internal::navigation_event_archive(this), target, stream);
  }

  // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::laser_event_archive(this), target, stream);
  }

  // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::pause_event_archive(this), target, stream);
  }

  // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1003, _Internal::movie_event_archive(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingEventArchive)
  return target;
}

size_t RecordingEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingEventArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navigation_event_archive_);
    }

    // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *laser_event_archive_);
    }

    // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pause_event_archive_);
    }

    // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *movie_event_archive_);
    }

    // optional double start_time = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingEventArchive::GetClassData() const { return &_class_data_; }

void RecordingEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingEventArchive *>(to)->MergeFrom(
      static_cast<const RecordingEventArchive &>(from));
}


void RecordingEventArchive::MergeFrom(const RecordingEventArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingEventArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_navigation_event_archive()->::KN::RecordingNavigationEventArchive::MergeFrom(from._internal_navigation_event_archive());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_laser_event_archive()->::KN::RecordingLaserEventArchive::MergeFrom(from._internal_laser_event_archive());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pause_event_archive()->::KN::RecordingPauseEventArchive::MergeFrom(from._internal_pause_event_archive());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_movie_event_archive()->::KN::RecordingMovieEventArchive::MergeFrom(from._internal_movie_event_archive());
    }
    if (cached_has_bits & 0x00000010u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingEventArchive::CopyFrom(const RecordingEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingEventArchive::IsInitialized() const {
  if (_internal_has_navigation_event_archive()) {
    if (!navigation_event_archive_->IsInitialized()) return false;
  }
  if (_internal_has_laser_event_archive()) {
    if (!laser_event_archive_->IsInitialized()) return false;
  }
  if (_internal_has_movie_event_archive()) {
    if (!movie_event_archive_->IsInitialized()) return false;
  }
  return true;
}

void RecordingEventArchive::InternalSwap(RecordingEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingEventArchive, movie_event_archive_)
      + sizeof(RecordingEventArchive::movie_event_archive_)
      - PROTOBUF_FIELD_OFFSET(RecordingEventArchive, navigation_event_archive_)>(
          reinterpret_cast<char*>(&navigation_event_archive_),
          reinterpret_cast<char*>(&other->navigation_event_archive_));
  swap(start_time_, other->start_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingEventArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[38]);
}

// ===================================================================

class RecordingNavigationEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingNavigationEventArchive>()._has_bits_);
  static const ::TSP::UUID& target_slide_node_id(const RecordingNavigationEventArchive* msg);
  static void set_has_target_slide_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& target_slide_node_reference(const RecordingNavigationEventArchive* msg);
  static void set_has_target_slide_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_event_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_animation_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::UUID&
RecordingNavigationEventArchive::_Internal::target_slide_node_id(const RecordingNavigationEventArchive* msg) {
  return *msg->target_slide_node_id_;
}
const ::TSP::Reference&
RecordingNavigationEventArchive::_Internal::target_slide_node_reference(const RecordingNavigationEventArchive* msg) {
  return *msg->target_slide_node_reference_;
}
void RecordingNavigationEventArchive::clear_target_slide_node_id() {
  if (target_slide_node_id_ != nullptr) target_slide_node_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RecordingNavigationEventArchive::clear_target_slide_node_reference() {
  if (target_slide_node_reference_ != nullptr) target_slide_node_reference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RecordingNavigationEventArchive::RecordingNavigationEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingNavigationEventArchive)
}
RecordingNavigationEventArchive::RecordingNavigationEventArchive(const RecordingNavigationEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_slide_node_reference()) {
    target_slide_node_reference_ = new ::TSP::Reference(*from.target_slide_node_reference_);
  } else {
    target_slide_node_reference_ = nullptr;
  }
  if (from._internal_has_target_slide_node_id()) {
    target_slide_node_id_ = new ::TSP::UUID(*from.target_slide_node_id_);
  } else {
    target_slide_node_id_ = nullptr;
  }
  ::memcpy(&target_event_index_, &from.target_event_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&animation_phase_) -
    reinterpret_cast<char*>(&target_event_index_)) + sizeof(animation_phase_));
  // @@protoc_insertion_point(copy_constructor:KN.RecordingNavigationEventArchive)
}

inline void RecordingNavigationEventArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_slide_node_reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&animation_phase_) -
    reinterpret_cast<char*>(&target_slide_node_reference_)) + sizeof(animation_phase_));
}

RecordingNavigationEventArchive::~RecordingNavigationEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingNavigationEventArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingNavigationEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_slide_node_reference_;
  if (this != internal_default_instance()) delete target_slide_node_id_;
}

void RecordingNavigationEventArchive::ArenaDtor(void* object) {
  RecordingNavigationEventArchive* _this = reinterpret_cast< RecordingNavigationEventArchive* >(object);
  (void)_this;
}
void RecordingNavigationEventArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingNavigationEventArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingNavigationEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingNavigationEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(target_slide_node_reference_ != nullptr);
      target_slide_node_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_slide_node_id_ != nullptr);
      target_slide_node_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&target_event_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&animation_phase_) -
        reinterpret_cast<char*>(&target_event_index_)) + sizeof(animation_phase_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingNavigationEventArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference target_slide_node_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_slide_node_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_event_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_event_index(&has_bits);
          target_event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(val))) {
            _internal_set_animation_phase(static_cast<::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID target_slide_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_slide_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingNavigationEventArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingNavigationEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference target_slide_node_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_slide_node_reference(this), target, stream);
  }

  // optional uint32 target_event_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_event_index(), target);
  }

  // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_animation_phase(), target);
  }

  // optional .TSP.UUID target_slide_node_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::target_slide_node_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingNavigationEventArchive)
  return target;
}

size_t RecordingNavigationEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingNavigationEventArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference target_slide_node_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_slide_node_reference_);
    }

    // optional .TSP.UUID target_slide_node_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_slide_node_id_);
    }

    // optional uint32 target_event_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_event_index());
    }

    // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_animation_phase());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingNavigationEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingNavigationEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingNavigationEventArchive::GetClassData() const { return &_class_data_; }

void RecordingNavigationEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingNavigationEventArchive *>(to)->MergeFrom(
      static_cast<const RecordingNavigationEventArchive &>(from));
}


void RecordingNavigationEventArchive::MergeFrom(const RecordingNavigationEventArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingNavigationEventArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target_slide_node_reference()->::TSP::Reference::MergeFrom(from._internal_target_slide_node_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_slide_node_id()->::TSP::UUID::MergeFrom(from._internal_target_slide_node_id());
    }
    if (cached_has_bits & 0x00000004u) {
      target_event_index_ = from.target_event_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      animation_phase_ = from.animation_phase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingNavigationEventArchive::CopyFrom(const RecordingNavigationEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingNavigationEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingNavigationEventArchive::IsInitialized() const {
  if (_internal_has_target_slide_node_reference()) {
    if (!target_slide_node_reference_->IsInitialized()) return false;
  }
  if (_internal_has_target_slide_node_id()) {
    if (!target_slide_node_id_->IsInitialized()) return false;
  }
  return true;
}

void RecordingNavigationEventArchive::InternalSwap(RecordingNavigationEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingNavigationEventArchive, animation_phase_)
      + sizeof(RecordingNavigationEventArchive::animation_phase_)
      - PROTOBUF_FIELD_OFFSET(RecordingNavigationEventArchive, target_slide_node_reference_)>(
          reinterpret_cast<char*>(&target_slide_node_reference_),
          reinterpret_cast<char*>(&other->target_slide_node_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingNavigationEventArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[39]);
}

// ===================================================================

class RecordingLaserEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingLaserEventArchive>()._has_bits_);
  static const ::TSP::Point& unscaled_location(const RecordingLaserEventArchive* msg);
  static void set_has_unscaled_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& unit_location(const RecordingLaserEventArchive* msg);
  static void set_has_unit_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Point&
RecordingLaserEventArchive::_Internal::unscaled_location(const RecordingLaserEventArchive* msg) {
  return *msg->unscaled_location_;
}
const ::TSP::Point&
RecordingLaserEventArchive::_Internal::unit_location(const RecordingLaserEventArchive* msg) {
  return *msg->unit_location_;
}
void RecordingLaserEventArchive::clear_unscaled_location() {
  if (unscaled_location_ != nullptr) unscaled_location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RecordingLaserEventArchive::clear_unit_location() {
  if (unit_location_ != nullptr) unit_location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RecordingLaserEventArchive::RecordingLaserEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingLaserEventArchive)
}
RecordingLaserEventArchive::RecordingLaserEventArchive(const RecordingLaserEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unscaled_location()) {
    unscaled_location_ = new ::TSP::Point(*from.unscaled_location_);
  } else {
    unscaled_location_ = nullptr;
  }
  if (from._internal_has_unit_location()) {
    unit_location_ = new ::TSP::Point(*from.unit_location_);
  } else {
    unit_location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.RecordingLaserEventArchive)
}

inline void RecordingLaserEventArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unscaled_location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_location_) -
    reinterpret_cast<char*>(&unscaled_location_)) + sizeof(unit_location_));
}

RecordingLaserEventArchive::~RecordingLaserEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingLaserEventArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingLaserEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete unscaled_location_;
  if (this != internal_default_instance()) delete unit_location_;
}

void RecordingLaserEventArchive::ArenaDtor(void* object) {
  RecordingLaserEventArchive* _this = reinterpret_cast< RecordingLaserEventArchive* >(object);
  (void)_this;
}
void RecordingLaserEventArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingLaserEventArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingLaserEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingLaserEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(unscaled_location_ != nullptr);
      unscaled_location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(unit_location_ != nullptr);
      unit_location_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingLaserEventArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Point unscaled_location = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unscaled_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point unit_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingLaserEventArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingLaserEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Point unscaled_location = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::unscaled_location(this), target, stream);
  }

  // optional .TSP.Point unit_location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unit_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingLaserEventArchive)
  return target;
}

size_t RecordingLaserEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingLaserEventArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Point unscaled_location = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unscaled_location_);
    }

    // optional .TSP.Point unit_location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unit_location_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingLaserEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingLaserEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingLaserEventArchive::GetClassData() const { return &_class_data_; }

void RecordingLaserEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingLaserEventArchive *>(to)->MergeFrom(
      static_cast<const RecordingLaserEventArchive &>(from));
}


void RecordingLaserEventArchive::MergeFrom(const RecordingLaserEventArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingLaserEventArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_unscaled_location()->::TSP::Point::MergeFrom(from._internal_unscaled_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_unit_location()->::TSP::Point::MergeFrom(from._internal_unit_location());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingLaserEventArchive::CopyFrom(const RecordingLaserEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingLaserEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingLaserEventArchive::IsInitialized() const {
  if (_internal_has_unscaled_location()) {
    if (!unscaled_location_->IsInitialized()) return false;
  }
  if (_internal_has_unit_location()) {
    if (!unit_location_->IsInitialized()) return false;
  }
  return true;
}

void RecordingLaserEventArchive::InternalSwap(RecordingLaserEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingLaserEventArchive, unit_location_)
      + sizeof(RecordingLaserEventArchive::unit_location_)
      - PROTOBUF_FIELD_OFFSET(RecordingLaserEventArchive, unscaled_location_)>(
          reinterpret_cast<char*>(&unscaled_location_),
          reinterpret_cast<char*>(&other->unscaled_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingLaserEventArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[40]);
}

// ===================================================================

class RecordingPauseEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingPauseEventArchive>()._has_bits_);
  static void set_has_pause_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingPauseEventArchive::RecordingPauseEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingPauseEventArchive)
}
RecordingPauseEventArchive::RecordingPauseEventArchive(const RecordingPauseEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pause_event_type_ = from.pause_event_type_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingPauseEventArchive)
}

inline void RecordingPauseEventArchive::SharedCtor() {
pause_event_type_ = 0;
}

RecordingPauseEventArchive::~RecordingPauseEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingPauseEventArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingPauseEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordingPauseEventArchive::ArenaDtor(void* object) {
  RecordingPauseEventArchive* _this = reinterpret_cast< RecordingPauseEventArchive* >(object);
  (void)_this;
}
void RecordingPauseEventArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingPauseEventArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingPauseEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingPauseEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pause_event_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingPauseEventArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingPauseEventArchive_RecordingPauseEventType_IsValid(val))) {
            _internal_set_pause_event_type(static_cast<::KN::RecordingPauseEventArchive_RecordingPauseEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingPauseEventArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingPauseEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pause_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingPauseEventArchive)
  return target;
}

size_t RecordingPauseEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingPauseEventArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pause_event_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingPauseEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingPauseEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingPauseEventArchive::GetClassData() const { return &_class_data_; }

void RecordingPauseEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingPauseEventArchive *>(to)->MergeFrom(
      static_cast<const RecordingPauseEventArchive &>(from));
}


void RecordingPauseEventArchive::MergeFrom(const RecordingPauseEventArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingPauseEventArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pause_event_type()) {
    _internal_set_pause_event_type(from._internal_pause_event_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingPauseEventArchive::CopyFrom(const RecordingPauseEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingPauseEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingPauseEventArchive::IsInitialized() const {
  return true;
}

void RecordingPauseEventArchive::InternalSwap(RecordingPauseEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pause_event_type_, other->pause_event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingPauseEventArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[41]);
}

// ===================================================================

class RecordingMovieEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingMovieEventArchive>()._has_bits_);
  static const ::TSP::Reference& movie_info_reference(const RecordingMovieEventArchive* msg);
  static void set_has_movie_info_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_movie_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_movie_event_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& movie_info_that_played_across_slides_reference(const RecordingMovieEventArchive* msg);
  static void set_has_movie_info_that_played_across_slides_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& movie_slide_node_id(const RecordingMovieEventArchive* msg);
  static void set_has_movie_slide_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
RecordingMovieEventArchive::_Internal::movie_info_reference(const RecordingMovieEventArchive* msg) {
  return *msg->movie_info_reference_;
}
const ::TSP::Reference&
RecordingMovieEventArchive::_Internal::movie_info_that_played_across_slides_reference(const RecordingMovieEventArchive* msg) {
  return *msg->movie_info_that_played_across_slides_reference_;
}
const ::TSP::UUID&
RecordingMovieEventArchive::_Internal::movie_slide_node_id(const RecordingMovieEventArchive* msg) {
  return *msg->movie_slide_node_id_;
}
void RecordingMovieEventArchive::clear_movie_info_reference() {
  if (movie_info_reference_ != nullptr) movie_info_reference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RecordingMovieEventArchive::clear_movie_info_that_played_across_slides_reference() {
  if (movie_info_that_played_across_slides_reference_ != nullptr) movie_info_that_played_across_slides_reference_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RecordingMovieEventArchive::clear_movie_slide_node_id() {
  if (movie_slide_node_id_ != nullptr) movie_slide_node_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RecordingMovieEventArchive::RecordingMovieEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingMovieEventArchive)
}
RecordingMovieEventArchive::RecordingMovieEventArchive(const RecordingMovieEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movie_info_reference()) {
    movie_info_reference_ = new ::TSP::Reference(*from.movie_info_reference_);
  } else {
    movie_info_reference_ = nullptr;
  }
  if (from._internal_has_movie_info_that_played_across_slides_reference()) {
    movie_info_that_played_across_slides_reference_ = new ::TSP::Reference(*from.movie_info_that_played_across_slides_reference_);
  } else {
    movie_info_that_played_across_slides_reference_ = nullptr;
  }
  if (from._internal_has_movie_slide_node_id()) {
    movie_slide_node_id_ = new ::TSP::UUID(*from.movie_slide_node_id_);
  } else {
    movie_slide_node_id_ = nullptr;
  }
  ::memcpy(&movie_event_value_, &from.movie_event_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&movie_event_type_) -
    reinterpret_cast<char*>(&movie_event_value_)) + sizeof(movie_event_type_));
  // @@protoc_insertion_point(copy_constructor:KN.RecordingMovieEventArchive)
}

inline void RecordingMovieEventArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&movie_info_reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&movie_event_value_) -
    reinterpret_cast<char*>(&movie_info_reference_)) + sizeof(movie_event_value_));
movie_event_type_ = 1;
}

RecordingMovieEventArchive::~RecordingMovieEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingMovieEventArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingMovieEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete movie_info_reference_;
  if (this != internal_default_instance()) delete movie_info_that_played_across_slides_reference_;
  if (this != internal_default_instance()) delete movie_slide_node_id_;
}

void RecordingMovieEventArchive::ArenaDtor(void* object) {
  RecordingMovieEventArchive* _this = reinterpret_cast< RecordingMovieEventArchive* >(object);
  (void)_this;
}
void RecordingMovieEventArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingMovieEventArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingMovieEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingMovieEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(movie_info_reference_ != nullptr);
      movie_info_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(movie_info_that_played_across_slides_reference_ != nullptr);
      movie_info_that_played_across_slides_reference_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(movie_slide_node_id_ != nullptr);
      movie_slide_node_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    movie_event_value_ = 0;
    movie_event_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingMovieEventArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference movie_info_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_info_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingMovieEventArchive_RecordingMovieEventType_IsValid(val))) {
            _internal_set_movie_event_type(static_cast<::KN::RecordingMovieEventArchive_RecordingMovieEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double movie_event_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_movie_event_value(&has_bits);
          movie_event_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference movie_info_that_played_across_slides_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_info_that_played_across_slides_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID movie_slide_node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_slide_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingMovieEventArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingMovieEventArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference movie_info_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::movie_info_reference(this), target, stream);
  }

  // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_movie_event_type(), target);
  }

  // optional double movie_event_value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_movie_event_value(), target);
  }

  // optional .TSP.Reference movie_info_that_played_across_slides_reference = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::movie_info_that_played_across_slides_reference(this), target, stream);
  }

  // optional .TSP.UUID movie_slide_node_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::movie_slide_node_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingMovieEventArchive)
  return target;
}

size_t RecordingMovieEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingMovieEventArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSP.Reference movie_info_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *movie_info_reference_);
    }

    // optional .TSP.Reference movie_info_that_played_across_slides_reference = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *movie_info_that_played_across_slides_reference_);
    }

    // optional .TSP.UUID movie_slide_node_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *movie_slide_node_id_);
    }

    // optional double movie_event_value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_movie_event_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingMovieEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingMovieEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingMovieEventArchive::GetClassData() const { return &_class_data_; }

void RecordingMovieEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingMovieEventArchive *>(to)->MergeFrom(
      static_cast<const RecordingMovieEventArchive &>(from));
}


void RecordingMovieEventArchive::MergeFrom(const RecordingMovieEventArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingMovieEventArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_movie_info_reference()->::TSP::Reference::MergeFrom(from._internal_movie_info_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_movie_info_that_played_across_slides_reference()->::TSP::Reference::MergeFrom(from._internal_movie_info_that_played_across_slides_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_movie_slide_node_id()->::TSP::UUID::MergeFrom(from._internal_movie_slide_node_id());
    }
    if (cached_has_bits & 0x00000008u) {
      movie_event_value_ = from.movie_event_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      movie_event_type_ = from.movie_event_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingMovieEventArchive::CopyFrom(const RecordingMovieEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingMovieEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingMovieEventArchive::IsInitialized() const {
  if (_internal_has_movie_info_reference()) {
    if (!movie_info_reference_->IsInitialized()) return false;
  }
  if (_internal_has_movie_info_that_played_across_slides_reference()) {
    if (!movie_info_that_played_across_slides_reference_->IsInitialized()) return false;
  }
  if (_internal_has_movie_slide_node_id()) {
    if (!movie_slide_node_id_->IsInitialized()) return false;
  }
  return true;
}

void RecordingMovieEventArchive::InternalSwap(RecordingMovieEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingMovieEventArchive, movie_event_value_)
      + sizeof(RecordingMovieEventArchive::movie_event_value_)
      - PROTOBUF_FIELD_OFFSET(RecordingMovieEventArchive, movie_info_reference_)>(
          reinterpret_cast<char*>(&movie_info_reference_),
          reinterpret_cast<char*>(&other->movie_info_reference_));
  swap(movie_event_type_, other->movie_event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingMovieEventArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[42]);
}

// ===================================================================

class RecordingMovieTrackArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingMovieTrackArchive>()._has_bits_);
  static void set_has_is_movie_segment_data_trimmed_to_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingMovieTrackArchive::RecordingMovieTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  movie_segments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RecordingMovieTrackArchive)
}
RecordingMovieTrackArchive::RecordingMovieTrackArchive(const RecordingMovieTrackArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      movie_segments_(from.movie_segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_movie_segment_data_trimmed_to_duration_ = from.is_movie_segment_data_trimmed_to_duration_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingMovieTrackArchive)
}

inline void RecordingMovieTrackArchive::SharedCtor() {
is_movie_segment_data_trimmed_to_duration_ = false;
}

RecordingMovieTrackArchive::~RecordingMovieTrackArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingMovieTrackArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingMovieTrackArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordingMovieTrackArchive::ArenaDtor(void* object) {
  RecordingMovieTrackArchive* _this = reinterpret_cast< RecordingMovieTrackArchive* >(object);
  (void)_this;
}
void RecordingMovieTrackArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingMovieTrackArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingMovieTrackArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingMovieTrackArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movie_segments_.Clear();
  is_movie_segment_data_trimmed_to_duration_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingMovieTrackArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KN.MovieSegmentArchive movie_segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movie_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_movie_segment_data_trimmed_to_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_movie_segment_data_trimmed_to_duration(&has_bits);
          is_movie_segment_data_trimmed_to_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingMovieTrackArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingMovieTrackArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_movie_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_movie_segments(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_movie_segment_data_trimmed_to_duration = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_movie_segment_data_trimmed_to_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingMovieTrackArchive)
  return target;
}

size_t RecordingMovieTrackArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingMovieTrackArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  total_size += 1UL * this->_internal_movie_segments_size();
  for (const auto& msg : this->movie_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_movie_segment_data_trimmed_to_duration = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingMovieTrackArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingMovieTrackArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingMovieTrackArchive::GetClassData() const { return &_class_data_; }

void RecordingMovieTrackArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecordingMovieTrackArchive *>(to)->MergeFrom(
      static_cast<const RecordingMovieTrackArchive &>(from));
}


void RecordingMovieTrackArchive::MergeFrom(const RecordingMovieTrackArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingMovieTrackArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movie_segments_.MergeFrom(from.movie_segments_);
  if (from._internal_has_is_movie_segment_data_trimmed_to_duration()) {
    _internal_set_is_movie_segment_data_trimmed_to_duration(from._internal_is_movie_segment_data_trimmed_to_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingMovieTrackArchive::CopyFrom(const RecordingMovieTrackArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingMovieTrackArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingMovieTrackArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(movie_segments_)) return false;
  return true;
}

void RecordingMovieTrackArchive::InternalSwap(RecordingMovieTrackArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  movie_segments_.InternalSwap(&other->movie_segments_);
  swap(is_movie_segment_data_trimmed_to_duration_, other->is_movie_segment_data_trimmed_to_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingMovieTrackArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[43]);
}

// ===================================================================

class MovieSegmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieSegmentArchive>()._has_bits_);
  static const ::TSP::DataReference& movie_data(const MovieSegmentArchive* msg);
  static void set_has_movie_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& database_movie_data(const MovieSegmentArchive* msg);
  static void set_has_database_movie_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::DataReference&
MovieSegmentArchive::_Internal::movie_data(const MovieSegmentArchive* msg) {
  return *msg->movie_data_;
}
const ::TSP::Reference&
MovieSegmentArchive::_Internal::database_movie_data(const MovieSegmentArchive* msg) {
  return *msg->database_movie_data_;
}
void MovieSegmentArchive::clear_movie_data() {
  if (movie_data_ != nullptr) movie_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MovieSegmentArchive::clear_database_movie_data() {
  if (database_movie_data_ != nullptr) database_movie_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MovieSegmentArchive::MovieSegmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.MovieSegmentArchive)
}
MovieSegmentArchive::MovieSegmentArchive(const MovieSegmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_database_movie_data()) {
    database_movie_data_ = new ::TSP::Reference(*from.database_movie_data_);
  } else {
    database_movie_data_ = nullptr;
  }
  if (from._internal_has_movie_data()) {
    movie_data_ = new ::TSP::DataReference(*from.movie_data_);
  } else {
    movie_data_ = nullptr;
  }
  start_time_ = from.start_time_;
  // @@protoc_insertion_point(copy_constructor:KN.MovieSegmentArchive)
}

inline void MovieSegmentArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&database_movie_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&movie_data_) -
    reinterpret_cast<char*>(&database_movie_data_)) + sizeof(movie_data_));
start_time_ = -1;
}

MovieSegmentArchive::~MovieSegmentArchive() {
  // @@protoc_insertion_point(destructor:KN.MovieSegmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovieSegmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete database_movie_data_;
  if (this != internal_default_instance()) delete movie_data_;
}

void MovieSegmentArchive::ArenaDtor(void* object) {
  MovieSegmentArchive* _this = reinterpret_cast< MovieSegmentArchive* >(object);
  (void)_this;
}
void MovieSegmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieSegmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovieSegmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.MovieSegmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(database_movie_data_ != nullptr);
      database_movie_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(movie_data_ != nullptr);
      movie_data_->Clear();
    }
    start_time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieSegmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference database_movie_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_movie_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_time = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference movie_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovieSegmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.MovieSegmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference database_movie_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::database_movie_data(this), target, stream);
  }

  // optional double start_time = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_time(), target);
  }

  // optional .TSP.DataReference movie_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::movie_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.MovieSegmentArchive)
  return target;
}

size_t MovieSegmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.MovieSegmentArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference database_movie_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_movie_data_);
    }

    // optional .TSP.DataReference movie_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *movie_data_);
    }

    // optional double start_time = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovieSegmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovieSegmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovieSegmentArchive::GetClassData() const { return &_class_data_; }

void MovieSegmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MovieSegmentArchive *>(to)->MergeFrom(
      static_cast<const MovieSegmentArchive &>(from));
}


void MovieSegmentArchive::MergeFrom(const MovieSegmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.MovieSegmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_database_movie_data()->::TSP::Reference::MergeFrom(from._internal_database_movie_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_movie_data()->::TSP::DataReference::MergeFrom(from._internal_movie_data());
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovieSegmentArchive::CopyFrom(const MovieSegmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.MovieSegmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSegmentArchive::IsInitialized() const {
  if (_internal_has_database_movie_data()) {
    if (!database_movie_data_->IsInitialized()) return false;
  }
  if (_internal_has_movie_data()) {
    if (!movie_data_->IsInitialized()) return false;
  }
  return true;
}

void MovieSegmentArchive::InternalSwap(MovieSegmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieSegmentArchive, movie_data_)
      + sizeof(MovieSegmentArchive::movie_data_)
      - PROTOBUF_FIELD_OFFSET(MovieSegmentArchive, database_movie_data_)>(
          reinterpret_cast<char*>(&database_movie_data_),
          reinterpret_cast<char*>(&other->database_movie_data_));
  swap(start_time_, other->start_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieSegmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[44]);
}

// ===================================================================

class Soundtrack::_Internal {
 public:
  using HasBits = decltype(std::declval<Soundtrack>()._has_bits_);
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void Soundtrack::clear_movie_media() {
  movie_media_.Clear();
}
Soundtrack::Soundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  movie_media_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.Soundtrack)
}
Soundtrack::Soundtrack(const Soundtrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      movie_media_(from.movie_media_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:KN.Soundtrack)
}

inline void Soundtrack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&volume_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(mode_));
}

Soundtrack::~Soundtrack() {
  // @@protoc_insertion_point(destructor:KN.Soundtrack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Soundtrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Soundtrack::ArenaDtor(void* object) {
  Soundtrack* _this = reinterpret_cast< Soundtrack* >(object);
  (void)_this;
}
void Soundtrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Soundtrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Soundtrack::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.Soundtrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movie_media_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Soundtrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::Soundtrack_SoundtrackMode_IsValid(val))) {
            _internal_set_mode(static_cast<::KN::Soundtrack_SoundtrackMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.DataReference movie_media = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movie_media(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Soundtrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.Soundtrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double volume = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_volume(), target);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // repeated .TSP.DataReference movie_media = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_movie_media_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_movie_media(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.Soundtrack)
  return target;
}

size_t Soundtrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.Soundtrack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataReference movie_media = 3;
  total_size += 1UL * this->_internal_movie_media_size();
  for (const auto& msg : this->movie_media_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double volume = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Soundtrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Soundtrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Soundtrack::GetClassData() const { return &_class_data_; }

void Soundtrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Soundtrack *>(to)->MergeFrom(
      static_cast<const Soundtrack &>(from));
}


void Soundtrack::MergeFrom(const Soundtrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.Soundtrack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movie_media_.MergeFrom(from.movie_media_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Soundtrack::CopyFrom(const Soundtrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.Soundtrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soundtrack::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(movie_media_)) return false;
  return true;
}

void Soundtrack::InternalSwap(Soundtrack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  movie_media_.InternalSwap(&other->movie_media_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Soundtrack, mode_)
      + sizeof(Soundtrack::mode_)
      - PROTOBUF_FIELD_OFFSET(Soundtrack, volume_)>(
          reinterpret_cast<char*>(&volume_),
          reinterpret_cast<char*>(&other->volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Soundtrack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[45]);
}

// ===================================================================

class SlideNumberAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideNumberAttachmentArchive>()._has_bits_);
  static const ::TSWP::TextualAttachmentArchive& super(const SlideNumberAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::TextualAttachmentArchive&
SlideNumberAttachmentArchive::_Internal::super(const SlideNumberAttachmentArchive* msg) {
  return *msg->super_;
}
void SlideNumberAttachmentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideNumberAttachmentArchive)
}
SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(const SlideNumberAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::TextualAttachmentArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideNumberAttachmentArchive)
}

inline void SlideNumberAttachmentArchive::SharedCtor() {
super_ = nullptr;
}

SlideNumberAttachmentArchive::~SlideNumberAttachmentArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideNumberAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideNumberAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void SlideNumberAttachmentArchive::ArenaDtor(void* object) {
  SlideNumberAttachmentArchive* _this = reinterpret_cast< SlideNumberAttachmentArchive* >(object);
  (void)_this;
}
void SlideNumberAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideNumberAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideNumberAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideNumberAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideNumberAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.TextualAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideNumberAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideNumberAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.TextualAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideNumberAttachmentArchive)
  return target;
}

size_t SlideNumberAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideNumberAttachmentArchive)
  size_t total_size = 0;

  // required .TSWP.TextualAttachmentArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideNumberAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideNumberAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideNumberAttachmentArchive::GetClassData() const { return &_class_data_; }

void SlideNumberAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideNumberAttachmentArchive *>(to)->MergeFrom(
      static_cast<const SlideNumberAttachmentArchive &>(from));
}


void SlideNumberAttachmentArchive::MergeFrom(const SlideNumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideNumberAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideNumberAttachmentArchive::CopyFrom(const SlideNumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideNumberAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNumberAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SlideNumberAttachmentArchive::InternalSwap(SlideNumberAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideNumberAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[46]);
}

// ===================================================================

class SlideCollectionSelectionArchive_OutlineSelection::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionArchive_OutlineSelection>()._has_bits_);
  static const ::TSP::Reference& slide_node(const SlideCollectionSelectionArchive_OutlineSelection* msg);
  static void set_has_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::IndexSet& selected_paragraph_indexes(const SlideCollectionSelectionArchive_OutlineSelection* msg);
  static void set_has_selected_paragraph_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SlideCollectionSelectionArchive_OutlineSelection::_Internal::slide_node(const SlideCollectionSelectionArchive_OutlineSelection* msg) {
  return *msg->slide_node_;
}
const ::TSP::IndexSet&
SlideCollectionSelectionArchive_OutlineSelection::_Internal::selected_paragraph_indexes(const SlideCollectionSelectionArchive_OutlineSelection* msg) {
  return *msg->selected_paragraph_indexes_;
}
void SlideCollectionSelectionArchive_OutlineSelection::clear_slide_node() {
  if (slide_node_ != nullptr) slide_node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SlideCollectionSelectionArchive_OutlineSelection::clear_selected_paragraph_indexes() {
  if (selected_paragraph_indexes_ != nullptr) selected_paragraph_indexes_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionArchive.OutlineSelection)
}
SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(const SlideCollectionSelectionArchive_OutlineSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node()) {
    slide_node_ = new ::TSP::Reference(*from.slide_node_);
  } else {
    slide_node_ = nullptr;
  }
  if (from._internal_has_selected_paragraph_indexes()) {
    selected_paragraph_indexes_ = new ::TSP::IndexSet(*from.selected_paragraph_indexes_);
  } else {
    selected_paragraph_indexes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionArchive.OutlineSelection)
}

inline void SlideCollectionSelectionArchive_OutlineSelection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slide_node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selected_paragraph_indexes_) -
    reinterpret_cast<char*>(&slide_node_)) + sizeof(selected_paragraph_indexes_));
}

SlideCollectionSelectionArchive_OutlineSelection::~SlideCollectionSelectionArchive_OutlineSelection() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionArchive.OutlineSelection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideCollectionSelectionArchive_OutlineSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slide_node_;
  if (this != internal_default_instance()) delete selected_paragraph_indexes_;
}

void SlideCollectionSelectionArchive_OutlineSelection::ArenaDtor(void* object) {
  SlideCollectionSelectionArchive_OutlineSelection* _this = reinterpret_cast< SlideCollectionSelectionArchive_OutlineSelection* >(object);
  (void)_this;
}
void SlideCollectionSelectionArchive_OutlineSelection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideCollectionSelectionArchive_OutlineSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideCollectionSelectionArchive_OutlineSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(slide_node_ != nullptr);
      slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(selected_paragraph_indexes_ != nullptr);
      selected_paragraph_indexes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionArchive_OutlineSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference slide_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.IndexSet selected_paragraph_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selected_paragraph_indexes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideCollectionSelectionArchive_OutlineSelection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference slide_node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slide_node(this), target, stream);
  }

  // required .TSP.IndexSet selected_paragraph_indexes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selected_paragraph_indexes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionArchive.OutlineSelection)
  return target;
}

size_t SlideCollectionSelectionArchive_OutlineSelection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  size_t total_size = 0;

  if (_internal_has_slide_node()) {
    // required .TSP.Reference slide_node = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_node_);
  }

  if (_internal_has_selected_paragraph_indexes()) {
    // required .TSP.IndexSet selected_paragraph_indexes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selected_paragraph_indexes_);
  }

  return total_size;
}
size_t SlideCollectionSelectionArchive_OutlineSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference slide_node = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_node_);

    // required .TSP.IndexSet selected_paragraph_indexes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selected_paragraph_indexes_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionArchive_OutlineSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideCollectionSelectionArchive_OutlineSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionArchive_OutlineSelection::GetClassData() const { return &_class_data_; }

void SlideCollectionSelectionArchive_OutlineSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideCollectionSelectionArchive_OutlineSelection *>(to)->MergeFrom(
      static_cast<const SlideCollectionSelectionArchive_OutlineSelection &>(from));
}


void SlideCollectionSelectionArchive_OutlineSelection::MergeFrom(const SlideCollectionSelectionArchive_OutlineSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_slide_node()->::TSP::Reference::MergeFrom(from._internal_slide_node());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_selected_paragraph_indexes()->::TSP::IndexSet::MergeFrom(from._internal_selected_paragraph_indexes());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionArchive_OutlineSelection::CopyFrom(const SlideCollectionSelectionArchive_OutlineSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionArchive_OutlineSelection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_slide_node()) {
    if (!slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_selected_paragraph_indexes()) {
    if (!selected_paragraph_indexes_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionArchive_OutlineSelection::InternalSwap(SlideCollectionSelectionArchive_OutlineSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, selected_paragraph_indexes_)
      + sizeof(SlideCollectionSelectionArchive_OutlineSelection::selected_paragraph_indexes_)
      - PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, slide_node_)>(
          reinterpret_cast<char*>(&slide_node_),
          reinterpret_cast<char*>(&other->slide_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionArchive_OutlineSelection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[47]);
}

// ===================================================================

class SlideCollectionSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionArchive>()._has_bits_);
  static const ::TSP::Reference& slide_node_to_edit(const SlideCollectionSelectionArchive* msg);
  static void set_has_slide_node_to_edit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Range& range_in_selected_paragraph(const SlideCollectionSelectionArchive* msg);
  static void set_has_range_in_selected_paragraph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
SlideCollectionSelectionArchive::_Internal::slide_node_to_edit(const SlideCollectionSelectionArchive* msg) {
  return *msg->slide_node_to_edit_;
}
const ::TSP::Range&
SlideCollectionSelectionArchive::_Internal::range_in_selected_paragraph(const SlideCollectionSelectionArchive* msg) {
  return *msg->range_in_selected_paragraph_;
}
void SlideCollectionSelectionArchive::clear_slide_nodes() {
  slide_nodes_.Clear();
}
void SlideCollectionSelectionArchive::clear_slide_node_to_edit() {
  if (slide_node_to_edit_ != nullptr) slide_node_to_edit_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SlideCollectionSelectionArchive::clear_range_in_selected_paragraph() {
  if (range_in_selected_paragraph_ != nullptr) range_in_selected_paragraph_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slide_nodes_(arena),
  selected_paragraph_indexes_for_slide_nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionArchive)
}
SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(const SlideCollectionSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slide_nodes_(from.slide_nodes_),
      selected_paragraph_indexes_for_slide_nodes_(from.selected_paragraph_indexes_for_slide_nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node_to_edit()) {
    slide_node_to_edit_ = new ::TSP::Reference(*from.slide_node_to_edit_);
  } else {
    slide_node_to_edit_ = nullptr;
  }
  if (from._internal_has_range_in_selected_paragraph()) {
    range_in_selected_paragraph_ = new ::TSP::Range(*from.range_in_selected_paragraph_);
  } else {
    range_in_selected_paragraph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionArchive)
}

inline void SlideCollectionSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slide_node_to_edit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_in_selected_paragraph_) -
    reinterpret_cast<char*>(&slide_node_to_edit_)) + sizeof(range_in_selected_paragraph_));
}

SlideCollectionSelectionArchive::~SlideCollectionSelectionArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideCollectionSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slide_node_to_edit_;
  if (this != internal_default_instance()) delete range_in_selected_paragraph_;
}

void SlideCollectionSelectionArchive::ArenaDtor(void* object) {
  SlideCollectionSelectionArchive* _this = reinterpret_cast< SlideCollectionSelectionArchive* >(object);
  (void)_this;
}
void SlideCollectionSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideCollectionSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideCollectionSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slide_nodes_.Clear();
  selected_paragraph_indexes_for_slide_nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(slide_node_to_edit_ != nullptr);
      slide_node_to_edit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(range_in_selected_paragraph_ != nullptr);
      range_in_selected_paragraph_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference slide_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference slide_node_to_edit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_to_edit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selected_paragraph_indexes_for_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Range range_in_selected_paragraph = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_in_selected_paragraph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideCollectionSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slide_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_slide_nodes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference slide_node_to_edit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_node_to_edit(this), target, stream);
  }

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selected_paragraph_indexes_for_slide_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_selected_paragraph_indexes_for_slide_nodes(i), target, stream);
  }

  // optional .TSP.Range range_in_selected_paragraph = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::range_in_selected_paragraph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionArchive)
  return target;
}

size_t SlideCollectionSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes = 1;
  total_size += 1UL * this->_internal_slide_nodes_size();
  for (const auto& msg : this->slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  total_size += 1UL * this->_internal_selected_paragraph_indexes_for_slide_nodes_size();
  for (const auto& msg : this->selected_paragraph_indexes_for_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference slide_node_to_edit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slide_node_to_edit_);
    }

    // optional .TSP.Range range_in_selected_paragraph = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_in_selected_paragraph_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideCollectionSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionArchive::GetClassData() const { return &_class_data_; }

void SlideCollectionSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideCollectionSelectionArchive *>(to)->MergeFrom(
      static_cast<const SlideCollectionSelectionArchive &>(from));
}


void SlideCollectionSelectionArchive::MergeFrom(const SlideCollectionSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slide_nodes_.MergeFrom(from.slide_nodes_);
  selected_paragraph_indexes_for_slide_nodes_.MergeFrom(from.selected_paragraph_indexes_for_slide_nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_slide_node_to_edit()->::TSP::Reference::MergeFrom(from._internal_slide_node_to_edit());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_range_in_selected_paragraph()->::TSP::Range::MergeFrom(from._internal_range_in_selected_paragraph());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionArchive::CopyFrom(const SlideCollectionSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slide_nodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(selected_paragraph_indexes_for_slide_nodes_)) return false;
  if (_internal_has_slide_node_to_edit()) {
    if (!slide_node_to_edit_->IsInitialized()) return false;
  }
  if (_internal_has_range_in_selected_paragraph()) {
    if (!range_in_selected_paragraph_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionArchive::InternalSwap(SlideCollectionSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slide_nodes_.InternalSwap(&other->slide_nodes_);
  selected_paragraph_indexes_for_slide_nodes_.InternalSwap(&other->selected_paragraph_indexes_for_slide_nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive, range_in_selected_paragraph_)
      + sizeof(SlideCollectionSelectionArchive::range_in_selected_paragraph_)
      - PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive, slide_node_to_edit_)>(
          reinterpret_cast<char*>(&slide_node_to_edit_),
          reinterpret_cast<char*>(&other->slide_node_to_edit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[48]);
}

// ===================================================================

class PresenterNotesSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PresenterNotesSelectionArchive>()._has_bits_);
  static const ::TSP::Reference& slide_node(const PresenterNotesSelectionArchive* msg);
  static void set_has_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
PresenterNotesSelectionArchive::_Internal::slide_node(const PresenterNotesSelectionArchive* msg) {
  return *msg->slide_node_;
}
void PresenterNotesSelectionArchive::clear_slide_node() {
  if (slide_node_ != nullptr) slide_node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PresenterNotesSelectionArchive::PresenterNotesSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.PresenterNotesSelectionArchive)
}
PresenterNotesSelectionArchive::PresenterNotesSelectionArchive(const PresenterNotesSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node()) {
    slide_node_ = new ::TSP::Reference(*from.slide_node_);
  } else {
    slide_node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.PresenterNotesSelectionArchive)
}

inline void PresenterNotesSelectionArchive::SharedCtor() {
slide_node_ = nullptr;
}

PresenterNotesSelectionArchive::~PresenterNotesSelectionArchive() {
  // @@protoc_insertion_point(destructor:KN.PresenterNotesSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PresenterNotesSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slide_node_;
}

void PresenterNotesSelectionArchive::ArenaDtor(void* object) {
  PresenterNotesSelectionArchive* _this = reinterpret_cast< PresenterNotesSelectionArchive* >(object);
  (void)_this;
}
void PresenterNotesSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PresenterNotesSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PresenterNotesSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PresenterNotesSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(slide_node_ != nullptr);
    slide_node_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PresenterNotesSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference slide_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PresenterNotesSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PresenterNotesSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference slide_node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slide_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PresenterNotesSelectionArchive)
  return target;
}

size_t PresenterNotesSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PresenterNotesSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference slide_node = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PresenterNotesSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PresenterNotesSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PresenterNotesSelectionArchive::GetClassData() const { return &_class_data_; }

void PresenterNotesSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PresenterNotesSelectionArchive *>(to)->MergeFrom(
      static_cast<const PresenterNotesSelectionArchive &>(from));
}


void PresenterNotesSelectionArchive::MergeFrom(const PresenterNotesSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.PresenterNotesSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slide_node()) {
    _internal_mutable_slide_node()->::TSP::Reference::MergeFrom(from._internal_slide_node());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PresenterNotesSelectionArchive::CopyFrom(const PresenterNotesSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PresenterNotesSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenterNotesSelectionArchive::IsInitialized() const {
  if (_internal_has_slide_node()) {
    if (!slide_node_->IsInitialized()) return false;
  }
  return true;
}

void PresenterNotesSelectionArchive::InternalSwap(PresenterNotesSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slide_node_, other->slide_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PresenterNotesSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[49]);
}

// ===================================================================

class MixedIdOperationArgs::_Internal {
 public:
};

void MixedIdOperationArgs::clear_add_args_list() {
  add_args_list_.Clear();
}
void MixedIdOperationArgs::clear_show_placeholder_args_list() {
  show_placeholder_args_list_.Clear();
}
void MixedIdOperationArgs::clear_remove_args_list() {
  remove_args_list_.Clear();
}
void MixedIdOperationArgs::clear_hide_placeholder_args_list() {
  hide_placeholder_args_list_.Clear();
}
MixedIdOperationArgs::MixedIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_list_types_(arena),
  add_args_list_(arena),
  show_placeholder_args_list_(arena),
  remove_args_list_(arena),
  hide_placeholder_args_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.MixedIdOperationArgs)
}
MixedIdOperationArgs::MixedIdOperationArgs(const MixedIdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_list_types_(from.args_list_types_),
      add_args_list_(from.add_args_list_),
      show_placeholder_args_list_(from.show_placeholder_args_list_),
      remove_args_list_(from.remove_args_list_),
      hide_placeholder_args_list_(from.hide_placeholder_args_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.MixedIdOperationArgs)
}

inline void MixedIdOperationArgs::SharedCtor() {
}

MixedIdOperationArgs::~MixedIdOperationArgs() {
  // @@protoc_insertion_point(destructor:KN.MixedIdOperationArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MixedIdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MixedIdOperationArgs::ArenaDtor(void* object) {
  MixedIdOperationArgs* _this = reinterpret_cast< MixedIdOperationArgs* >(object);
  (void)_this;
}
void MixedIdOperationArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MixedIdOperationArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MixedIdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.MixedIdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_types_.Clear();
  add_args_list_.Clear();
  show_placeholder_args_list_.Clear();
  remove_args_list_.Clear();
  hide_placeholder_args_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixedIdOperationArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KN.MixedIdOperationArgs.ArgsListKind args_list_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::KN::MixedIdOperationArgs_ArgsListKind_IsValid(val))) {
              _internal_add_args_list_types(static_cast<::KN::MixedIdOperationArgs_ArgsListKind>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_args_list_types(), ptr, ctx, ::KN::MixedIdOperationArgs_ArgsListKind_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.AddIdOperationArgs add_args_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.IdPlacementOperationArgs show_placeholder_args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_show_placeholder_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RemoveIdOperationArgs remove_args_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remove_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.IdPlacementOperationArgs hide_placeholder_args_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hide_placeholder_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MixedIdOperationArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.MixedIdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KN.MixedIdOperationArgs.ArgsListKind args_list_types = 1;
  for (int i = 0, n = this->_internal_args_list_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_args_list_types(i), target);
  }

  // repeated .TSK.AddIdOperationArgs add_args_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_add_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_add_args_list(i), target, stream);
  }

  // repeated .TSK.IdPlacementOperationArgs show_placeholder_args_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_show_placeholder_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_show_placeholder_args_list(i), target, stream);
  }

  // repeated .TSK.RemoveIdOperationArgs remove_args_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remove_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_remove_args_list(i), target, stream);
  }

  // repeated .TSK.IdPlacementOperationArgs hide_placeholder_args_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hide_placeholder_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_hide_placeholder_args_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.MixedIdOperationArgs)
  return target;
}

size_t MixedIdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.MixedIdOperationArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.MixedIdOperationArgs.ArgsListKind args_list_types = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_args_list_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_args_list_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TSK.AddIdOperationArgs add_args_list = 2;
  total_size += 1UL * this->_internal_add_args_list_size();
  for (const auto& msg : this->add_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.IdPlacementOperationArgs show_placeholder_args_list = 3;
  total_size += 1UL * this->_internal_show_placeholder_args_list_size();
  for (const auto& msg : this->show_placeholder_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.RemoveIdOperationArgs remove_args_list = 4;
  total_size += 1UL * this->_internal_remove_args_list_size();
  for (const auto& msg : this->remove_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.IdPlacementOperationArgs hide_placeholder_args_list = 5;
  total_size += 1UL * this->_internal_hide_placeholder_args_list_size();
  for (const auto& msg : this->hide_placeholder_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MixedIdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MixedIdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MixedIdOperationArgs::GetClassData() const { return &_class_data_; }

void MixedIdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MixedIdOperationArgs *>(to)->MergeFrom(
      static_cast<const MixedIdOperationArgs &>(from));
}


void MixedIdOperationArgs::MergeFrom(const MixedIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.MixedIdOperationArgs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_types_.MergeFrom(from.args_list_types_);
  add_args_list_.MergeFrom(from.add_args_list_);
  show_placeholder_args_list_.MergeFrom(from.show_placeholder_args_list_);
  remove_args_list_.MergeFrom(from.remove_args_list_);
  hide_placeholder_args_list_.MergeFrom(from.hide_placeholder_args_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MixedIdOperationArgs::CopyFrom(const MixedIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.MixedIdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixedIdOperationArgs::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(add_args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(show_placeholder_args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(remove_args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(hide_placeholder_args_list_)) return false;
  return true;
}

void MixedIdOperationArgs::InternalSwap(MixedIdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_list_types_.InternalSwap(&other->args_list_types_);
  add_args_list_.InternalSwap(&other->add_args_list_);
  show_placeholder_args_list_.InternalSwap(&other->show_placeholder_args_list_);
  remove_args_list_.InternalSwap(&other->remove_args_list_);
  hide_placeholder_args_list_.InternalSwap(&other->hide_placeholder_args_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixedIdOperationArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[50]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KN::AnimationAttributesArchive* Arena::CreateMaybeMessage< ::KN::AnimationAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::AnimationAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::TransitionAttributesArchive* Arena::CreateMaybeMessage< ::KN::TransitionAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::TransitionAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::TransitionArchive* Arena::CreateMaybeMessage< ::KN::TransitionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::TransitionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildChunkArchive* Arena::CreateMaybeMessage< ::KN::BuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildChunkIdentifierArchive* Arena::CreateMaybeMessage< ::KN::BuildChunkIdentifierArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildChunkIdentifierArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildAttributeValueArchive* Arena::CreateMaybeMessage< ::KN::BuildAttributeValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildAttributeValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildAttributeTupleArchive* Arena::CreateMaybeMessage< ::KN::BuildAttributeTupleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildAttributeTupleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildAttributesArchive* Arena::CreateMaybeMessage< ::KN::BuildAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildArchive* Arena::CreateMaybeMessage< ::KN::BuildArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PlaceholderArchive* Arena::CreateMaybeMessage< ::KN::PlaceholderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PlaceholderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::NoteArchive* Arena::CreateMaybeMessage< ::KN::NoteArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::NoteArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ClassicStylesheetRecordArchive* Arena::CreateMaybeMessage< ::KN::ClassicStylesheetRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ClassicStylesheetRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ClassicThemeRecordArchive* Arena::CreateMaybeMessage< ::KN::ClassicThemeRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ClassicThemeRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive_SageTagMapEntry* Arena::CreateMaybeMessage< ::KN::SlideArchive_SageTagMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive_SageTagMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* Arena::CreateMaybeMessage< ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive_InstructionalTextMap* Arena::CreateMaybeMessage< ::KN::SlideArchive_InstructionalTextMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive_InstructionalTextMap >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive* Arena::CreateMaybeMessage< ::KN::SlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry* Arena::CreateMaybeMessage< ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideNodeArchive* Arena::CreateMaybeMessage< ::KN::SlideNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::DesktopUILayoutArchive* Arena::CreateMaybeMessage< ::KN::DesktopUILayoutArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::DesktopUILayoutArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::UIStateArchive* Arena::CreateMaybeMessage< ::KN::UIStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::UIStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::IOSRestorableViewStateRootArchive* Arena::CreateMaybeMessage< ::KN::IOSRestorableViewStateRootArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::IOSRestorableViewStateRootArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::IOSSavedPlaybackStateArchive* Arena::CreateMaybeMessage< ::KN::IOSSavedPlaybackStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::IOSSavedPlaybackStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CanvasSelectionArchive* Arena::CreateMaybeMessage< ::KN::CanvasSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CanvasSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ActionGhostSelectionArchive* Arena::CreateMaybeMessage< ::KN::ActionGhostSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ActionGhostSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ThemeCustomTimingCurveArchive* Arena::CreateMaybeMessage< ::KN::ThemeCustomTimingCurveArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ThemeCustomTimingCurveArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ThemeArchive* Arena::CreateMaybeMessage< ::KN::ThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideTreeArchive* Arena::CreateMaybeMessage< ::KN::SlideTreeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideTreeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ShowArchive* Arena::CreateMaybeMessage< ::KN::ShowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ShowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::DocumentArchive* Arena::CreateMaybeMessage< ::KN::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideStylePropertiesArchive* Arena::CreateMaybeMessage< ::KN::SlideStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideStyleArchive* Arena::CreateMaybeMessage< ::KN::SlideStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PasteboardNativeStorageArchive* Arena::CreateMaybeMessage< ::KN::PasteboardNativeStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PasteboardNativeStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PrototypeForUndoTemplateChangeArchive* Arena::CreateMaybeMessage< ::KN::PrototypeForUndoTemplateChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PrototypeForUndoTemplateChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingArchive* Arena::CreateMaybeMessage< ::KN::RecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingSyncState* Arena::CreateMaybeMessage< ::KN::RecordingSyncState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingSyncState >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingCorrectionHistory* Arena::CreateMaybeMessage< ::KN::RecordingCorrectionHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingCorrectionHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingEventTrackArchive* Arena::CreateMaybeMessage< ::KN::RecordingEventTrackArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingEventTrackArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingEventArchive* Arena::CreateMaybeMessage< ::KN::RecordingEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingNavigationEventArchive* Arena::CreateMaybeMessage< ::KN::RecordingNavigationEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingNavigationEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingLaserEventArchive* Arena::CreateMaybeMessage< ::KN::RecordingLaserEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingLaserEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingPauseEventArchive* Arena::CreateMaybeMessage< ::KN::RecordingPauseEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingPauseEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingMovieEventArchive* Arena::CreateMaybeMessage< ::KN::RecordingMovieEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingMovieEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingMovieTrackArchive* Arena::CreateMaybeMessage< ::KN::RecordingMovieTrackArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingMovieTrackArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::MovieSegmentArchive* Arena::CreateMaybeMessage< ::KN::MovieSegmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::MovieSegmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::Soundtrack* Arena::CreateMaybeMessage< ::KN::Soundtrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::Soundtrack >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideNumberAttachmentArchive* Arena::CreateMaybeMessage< ::KN::SlideNumberAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideNumberAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionArchive_OutlineSelection* Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionArchive_OutlineSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionArchive_OutlineSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionArchive* Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PresenterNotesSelectionArchive* Arena::CreateMaybeMessage< ::KN::PresenterNotesSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PresenterNotesSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::MixedIdOperationArgs* Arena::CreateMaybeMessage< ::KN::MixedIdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::MixedIdOperationArgs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
