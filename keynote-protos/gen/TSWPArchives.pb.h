// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSWPArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSWPArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSWPArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSKArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSWPArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSWPArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[92]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSWPArchives_2eproto;
namespace TSWP {
class BibliographySmartFieldArchive;
struct BibliographySmartFieldArchiveDefaultTypeInternal;
extern BibliographySmartFieldArchiveDefaultTypeInternal _BibliographySmartFieldArchive_default_instance_;
class BookmarkFieldArchive;
struct BookmarkFieldArchiveDefaultTypeInternal;
extern BookmarkFieldArchiveDefaultTypeInternal _BookmarkFieldArchive_default_instance_;
class ChangeArchive;
struct ChangeArchiveDefaultTypeInternal;
extern ChangeArchiveDefaultTypeInternal _ChangeArchive_default_instance_;
class ChangeSessionArchive;
struct ChangeSessionArchiveDefaultTypeInternal;
extern ChangeSessionArchiveDefaultTypeInternal _ChangeSessionArchive_default_instance_;
class CharacterStyleArchive;
struct CharacterStyleArchiveDefaultTypeInternal;
extern CharacterStyleArchiveDefaultTypeInternal _CharacterStyleArchive_default_instance_;
class CharacterStylePropertiesArchive;
struct CharacterStylePropertiesArchiveDefaultTypeInternal;
extern CharacterStylePropertiesArchiveDefaultTypeInternal _CharacterStylePropertiesArchive_default_instance_;
class CitationRecordArchive;
struct CitationRecordArchiveDefaultTypeInternal;
extern CitationRecordArchiveDefaultTypeInternal _CitationRecordArchive_default_instance_;
class CitationSmartFieldArchive;
struct CitationSmartFieldArchiveDefaultTypeInternal;
extern CitationSmartFieldArchiveDefaultTypeInternal _CitationSmartFieldArchive_default_instance_;
class ColumnStyleArchive;
struct ColumnStyleArchiveDefaultTypeInternal;
extern ColumnStyleArchiveDefaultTypeInternal _ColumnStyleArchive_default_instance_;
class ColumnStylePropertiesArchive;
struct ColumnStylePropertiesArchiveDefaultTypeInternal;
extern ColumnStylePropertiesArchiveDefaultTypeInternal _ColumnStylePropertiesArchive_default_instance_;
class ColumnsArchive;
struct ColumnsArchiveDefaultTypeInternal;
extern ColumnsArchiveDefaultTypeInternal _ColumnsArchive_default_instance_;
class ColumnsArchive_EqualColumnsArchive;
struct ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal;
extern ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal _ColumnsArchive_EqualColumnsArchive_default_instance_;
class ColumnsArchive_NonEqualColumnsArchive;
struct ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal;
extern ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal _ColumnsArchive_NonEqualColumnsArchive_default_instance_;
class ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive;
struct ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal;
extern ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal _ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_default_instance_;
class CommentInfoArchive;
struct CommentInfoArchiveDefaultTypeInternal;
extern CommentInfoArchiveDefaultTypeInternal _CommentInfoArchive_default_instance_;
class DateTimeSmartFieldArchive;
struct DateTimeSmartFieldArchiveDefaultTypeInternal;
extern DateTimeSmartFieldArchiveDefaultTypeInternal _DateTimeSmartFieldArchive_default_instance_;
class DrawableAttachmentArchive;
struct DrawableAttachmentArchiveDefaultTypeInternal;
extern DrawableAttachmentArchiveDefaultTypeInternal _DrawableAttachmentArchive_default_instance_;
class DropCapArchive;
struct DropCapArchiveDefaultTypeInternal;
extern DropCapArchiveDefaultTypeInternal _DropCapArchive_default_instance_;
class DropCapStyleArchive;
struct DropCapStyleArchiveDefaultTypeInternal;
extern DropCapStyleArchiveDefaultTypeInternal _DropCapStyleArchive_default_instance_;
class DropCapStylePropertiesArchive;
struct DropCapStylePropertiesArchiveDefaultTypeInternal;
extern DropCapStylePropertiesArchiveDefaultTypeInternal _DropCapStylePropertiesArchive_default_instance_;
class EquationInfoArchive;
struct EquationInfoArchiveDefaultTypeInternal;
extern EquationInfoArchiveDefaultTypeInternal _EquationInfoArchive_default_instance_;
class FilenameSmartFieldArchive;
struct FilenameSmartFieldArchiveDefaultTypeInternal;
extern FilenameSmartFieldArchiveDefaultTypeInternal _FilenameSmartFieldArchive_default_instance_;
class FlowInfoArchive;
struct FlowInfoArchiveDefaultTypeInternal;
extern FlowInfoArchiveDefaultTypeInternal _FlowInfoArchive_default_instance_;
class FlowInfoContainerArchive;
struct FlowInfoContainerArchiveDefaultTypeInternal;
extern FlowInfoContainerArchiveDefaultTypeInternal _FlowInfoContainerArchive_default_instance_;
class FontFeatureArchive;
struct FontFeatureArchiveDefaultTypeInternal;
extern FontFeatureArchiveDefaultTypeInternal _FontFeatureArchive_default_instance_;
class FootnoteReferenceAttachmentArchive;
struct FootnoteReferenceAttachmentArchiveDefaultTypeInternal;
extern FootnoteReferenceAttachmentArchiveDefaultTypeInternal _FootnoteReferenceAttachmentArchive_default_instance_;
class HighlightArchive;
struct HighlightArchiveDefaultTypeInternal;
extern HighlightArchiveDefaultTypeInternal _HighlightArchive_default_instance_;
class HyperlinkFieldArchive;
struct HyperlinkFieldArchiveDefaultTypeInternal;
extern HyperlinkFieldArchiveDefaultTypeInternal _HyperlinkFieldArchive_default_instance_;
class HyperlinkSelectionArchive;
struct HyperlinkSelectionArchiveDefaultTypeInternal;
extern HyperlinkSelectionArchiveDefaultTypeInternal _HyperlinkSelectionArchive_default_instance_;
class LineSpacingArchive;
struct LineSpacingArchiveDefaultTypeInternal;
extern LineSpacingArchiveDefaultTypeInternal _LineSpacingArchive_default_instance_;
class ListStyleArchive;
struct ListStyleArchiveDefaultTypeInternal;
extern ListStyleArchiveDefaultTypeInternal _ListStyleArchive_default_instance_;
class ListStyleArchive_LabelGeometry;
struct ListStyleArchive_LabelGeometryDefaultTypeInternal;
extern ListStyleArchive_LabelGeometryDefaultTypeInternal _ListStyleArchive_LabelGeometry_default_instance_;
class ListStyleArchive_LabelImage;
struct ListStyleArchive_LabelImageDefaultTypeInternal;
extern ListStyleArchive_LabelImageDefaultTypeInternal _ListStyleArchive_LabelImage_default_instance_;
class MergeSmartFieldArchive;
struct MergeSmartFieldArchiveDefaultTypeInternal;
extern MergeSmartFieldArchiveDefaultTypeInternal _MergeSmartFieldArchive_default_instance_;
class NumberAttachmentArchive;
struct NumberAttachmentArchiveDefaultTypeInternal;
extern NumberAttachmentArchiveDefaultTypeInternal _NumberAttachmentArchive_default_instance_;
class ObjectAttributeTable;
struct ObjectAttributeTableDefaultTypeInternal;
extern ObjectAttributeTableDefaultTypeInternal _ObjectAttributeTable_default_instance_;
class ObjectAttributeTable_ObjectAttribute;
struct ObjectAttributeTable_ObjectAttributeDefaultTypeInternal;
extern ObjectAttributeTable_ObjectAttributeDefaultTypeInternal _ObjectAttributeTable_ObjectAttribute_default_instance_;
class OverlappingFieldAttributeTable;
struct OverlappingFieldAttributeTableDefaultTypeInternal;
extern OverlappingFieldAttributeTableDefaultTypeInternal _OverlappingFieldAttributeTable_default_instance_;
class OverlappingFieldAttributeTable_OverlappingFieldAttribute;
struct OverlappingFieldAttributeTable_OverlappingFieldAttributeDefaultTypeInternal;
extern OverlappingFieldAttributeTable_OverlappingFieldAttributeDefaultTypeInternal _OverlappingFieldAttributeTable_OverlappingFieldAttribute_default_instance_;
class PaddingArchive;
struct PaddingArchiveDefaultTypeInternal;
extern PaddingArchiveDefaultTypeInternal _PaddingArchive_default_instance_;
class ParaDataAttributeTable;
struct ParaDataAttributeTableDefaultTypeInternal;
extern ParaDataAttributeTableDefaultTypeInternal _ParaDataAttributeTable_default_instance_;
class ParaDataAttributeTable_ParaDataAttribute;
struct ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal;
extern ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal _ParaDataAttributeTable_ParaDataAttribute_default_instance_;
class ParagraphStyleArchive;
struct ParagraphStyleArchiveDefaultTypeInternal;
extern ParagraphStyleArchiveDefaultTypeInternal _ParagraphStyleArchive_default_instance_;
class ParagraphStylePropertiesArchive;
struct ParagraphStylePropertiesArchiveDefaultTypeInternal;
extern ParagraphStylePropertiesArchiveDefaultTypeInternal _ParagraphStylePropertiesArchive_default_instance_;
class PencilAnnotationArchive;
struct PencilAnnotationArchiveDefaultTypeInternal;
extern PencilAnnotationArchiveDefaultTypeInternal _PencilAnnotationArchive_default_instance_;
class PlaceholderSmartFieldArchive;
struct PlaceholderSmartFieldArchiveDefaultTypeInternal;
extern PlaceholderSmartFieldArchiveDefaultTypeInternal _PlaceholderSmartFieldArchive_default_instance_;
class RubyFieldArchive;
struct RubyFieldArchiveDefaultTypeInternal;
extern RubyFieldArchiveDefaultTypeInternal _RubyFieldArchive_default_instance_;
class SectionPlaceholderArchive;
struct SectionPlaceholderArchiveDefaultTypeInternal;
extern SectionPlaceholderArchiveDefaultTypeInternal _SectionPlaceholderArchive_default_instance_;
class SelectionArchive;
struct SelectionArchiveDefaultTypeInternal;
extern SelectionArchiveDefaultTypeInternal _SelectionArchive_default_instance_;
class ShapeInfoArchive;
struct ShapeInfoArchiveDefaultTypeInternal;
extern ShapeInfoArchiveDefaultTypeInternal _ShapeInfoArchive_default_instance_;
class ShapeStyleArchive;
struct ShapeStyleArchiveDefaultTypeInternal;
extern ShapeStyleArchiveDefaultTypeInternal _ShapeStyleArchive_default_instance_;
class ShapeStylePropertiesArchive;
struct ShapeStylePropertiesArchiveDefaultTypeInternal;
extern ShapeStylePropertiesArchiveDefaultTypeInternal _ShapeStylePropertiesArchive_default_instance_;
class SmartFieldArchive;
struct SmartFieldArchiveDefaultTypeInternal;
extern SmartFieldArchiveDefaultTypeInternal _SmartFieldArchive_default_instance_;
class StorageArchive;
struct StorageArchiveDefaultTypeInternal;
extern StorageArchiveDefaultTypeInternal _StorageArchive_default_instance_;
class StringAttributeTable;
struct StringAttributeTableDefaultTypeInternal;
extern StringAttributeTableDefaultTypeInternal _StringAttributeTable_default_instance_;
class StringAttributeTable_StringAttribute;
struct StringAttributeTable_StringAttributeDefaultTypeInternal;
extern StringAttributeTable_StringAttributeDefaultTypeInternal _StringAttributeTable_StringAttribute_default_instance_;
class TOCAttachmentArchive;
struct TOCAttachmentArchiveDefaultTypeInternal;
extern TOCAttachmentArchiveDefaultTypeInternal _TOCAttachmentArchive_default_instance_;
class TOCEntryInstanceArchive;
struct TOCEntryInstanceArchiveDefaultTypeInternal;
extern TOCEntryInstanceArchiveDefaultTypeInternal _TOCEntryInstanceArchive_default_instance_;
class TOCEntryStyleArchive;
struct TOCEntryStyleArchiveDefaultTypeInternal;
extern TOCEntryStyleArchiveDefaultTypeInternal _TOCEntryStyleArchive_default_instance_;
class TOCEntryStylePropertiesArchive;
struct TOCEntryStylePropertiesArchiveDefaultTypeInternal;
extern TOCEntryStylePropertiesArchiveDefaultTypeInternal _TOCEntryStylePropertiesArchive_default_instance_;
class TOCInfoArchive;
struct TOCInfoArchiveDefaultTypeInternal;
extern TOCInfoArchiveDefaultTypeInternal _TOCInfoArchive_default_instance_;
class TOCLayoutHintArchive;
struct TOCLayoutHintArchiveDefaultTypeInternal;
extern TOCLayoutHintArchiveDefaultTypeInternal _TOCLayoutHintArchive_default_instance_;
class TOCSettingsArchive;
struct TOCSettingsArchiveDefaultTypeInternal;
extern TOCSettingsArchiveDefaultTypeInternal _TOCSettingsArchive_default_instance_;
class TOCSettingsArchive_TOCEntryData;
struct TOCSettingsArchive_TOCEntryDataDefaultTypeInternal;
extern TOCSettingsArchive_TOCEntryDataDefaultTypeInternal _TOCSettingsArchive_TOCEntryData_default_instance_;
class TOCSmartFieldArchive;
struct TOCSmartFieldArchiveDefaultTypeInternal;
extern TOCSmartFieldArchiveDefaultTypeInternal _TOCSmartFieldArchive_default_instance_;
class TOCSmartFieldArchive_TOCEntry;
struct TOCSmartFieldArchive_TOCEntryDefaultTypeInternal;
extern TOCSmartFieldArchive_TOCEntryDefaultTypeInternal _TOCSmartFieldArchive_TOCEntry_default_instance_;
class TSWPTOCPageNumberAttachmentArchive;
struct TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal;
extern TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal _TSWPTOCPageNumberAttachmentArchive_default_instance_;
class TabArchive;
struct TabArchiveDefaultTypeInternal;
extern TabArchiveDefaultTypeInternal _TabArchive_default_instance_;
class TabsArchive;
struct TabsArchiveDefaultTypeInternal;
extern TabsArchiveDefaultTypeInternal _TabsArchive_default_instance_;
class TateChuYokoFieldArchive;
struct TateChuYokoFieldArchiveDefaultTypeInternal;
extern TateChuYokoFieldArchiveDefaultTypeInternal _TateChuYokoFieldArchive_default_instance_;
class TextPresetDisplayItemArchive;
struct TextPresetDisplayItemArchiveDefaultTypeInternal;
extern TextPresetDisplayItemArchiveDefaultTypeInternal _TextPresetDisplayItemArchive_default_instance_;
class TextStylePresetArchive;
struct TextStylePresetArchiveDefaultTypeInternal;
extern TextStylePresetArchiveDefaultTypeInternal _TextStylePresetArchive_default_instance_;
class TextualAttachmentArchive;
struct TextualAttachmentArchiveDefaultTypeInternal;
extern TextualAttachmentArchiveDefaultTypeInternal _TextualAttachmentArchive_default_instance_;
class ThemePresetsArchive;
struct ThemePresetsArchiveDefaultTypeInternal;
extern ThemePresetsArchiveDefaultTypeInternal _ThemePresetsArchive_default_instance_;
class UIGraphicalAttachment;
struct UIGraphicalAttachmentDefaultTypeInternal;
extern UIGraphicalAttachmentDefaultTypeInternal _UIGraphicalAttachment_default_instance_;
class UndoTransaction;
struct UndoTransactionDefaultTypeInternal;
extern UndoTransactionDefaultTypeInternal _UndoTransaction_default_instance_;
class UndoTransactionWrapperArchive;
struct UndoTransactionWrapperArchiveDefaultTypeInternal;
extern UndoTransactionWrapperArchiveDefaultTypeInternal _UndoTransactionWrapperArchive_default_instance_;
class UndoTransaction_AttributeIndexTransaction;
struct UndoTransaction_AttributeIndexTransactionDefaultTypeInternal;
extern UndoTransaction_AttributeIndexTransactionDefaultTypeInternal _UndoTransaction_AttributeIndexTransaction_default_instance_;
class UndoTransaction_CTDateTransaction;
struct UndoTransaction_CTDateTransactionDefaultTypeInternal;
extern UndoTransaction_CTDateTransactionDefaultTypeInternal _UndoTransaction_CTDateTransaction_default_instance_;
class UndoTransaction_CharDeltaTransaction;
struct UndoTransaction_CharDeltaTransactionDefaultTypeInternal;
extern UndoTransaction_CharDeltaTransactionDefaultTypeInternal _UndoTransaction_CharDeltaTransaction_default_instance_;
class UndoTransaction_CharIndexTransaction;
struct UndoTransaction_CharIndexTransactionDefaultTypeInternal;
extern UndoTransaction_CharIndexTransactionDefaultTypeInternal _UndoTransaction_CharIndexTransaction_default_instance_;
class UndoTransaction_GenericTransaction;
struct UndoTransaction_GenericTransactionDefaultTypeInternal;
extern UndoTransaction_GenericTransactionDefaultTypeInternal _UndoTransaction_GenericTransaction_default_instance_;
class UndoTransaction_InsertAttributeTransaction;
struct UndoTransaction_InsertAttributeTransactionDefaultTypeInternal;
extern UndoTransaction_InsertAttributeTransactionDefaultTypeInternal _UndoTransaction_InsertAttributeTransaction_default_instance_;
class UndoTransaction_InsertNilTransaction;
struct UndoTransaction_InsertNilTransactionDefaultTypeInternal;
extern UndoTransaction_InsertNilTransactionDefaultTypeInternal _UndoTransaction_InsertNilTransaction_default_instance_;
class UndoTransaction_ObjectDOLCTransaction;
struct UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal;
extern UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal _UndoTransaction_ObjectDOLCTransaction_default_instance_;
class UndoTransaction_ParagraphDataTransaction;
struct UndoTransaction_ParagraphDataTransactionDefaultTypeInternal;
extern UndoTransaction_ParagraphDataTransactionDefaultTypeInternal _UndoTransaction_ParagraphDataTransaction_default_instance_;
class UndoTransaction_ReplaceCharIndexTransaction;
struct UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal;
extern UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal _UndoTransaction_ReplaceCharIndexTransaction_default_instance_;
class UndoTransaction_StorageAction;
struct UndoTransaction_StorageActionDefaultTypeInternal;
extern UndoTransaction_StorageActionDefaultTypeInternal _UndoTransaction_StorageAction_default_instance_;
class UndoTransaction_StorageActionGroup;
struct UndoTransaction_StorageActionGroupDefaultTypeInternal;
extern UndoTransaction_StorageActionGroupDefaultTypeInternal _UndoTransaction_StorageActionGroup_default_instance_;
class UndoTransaction_TextTransaction;
struct UndoTransaction_TextTransactionDefaultTypeInternal;
extern UndoTransaction_TextTransactionDefaultTypeInternal _UndoTransaction_TextTransaction_default_instance_;
class UndoTransaction_UnionTransaction;
struct UndoTransaction_UnionTransactionDefaultTypeInternal;
extern UndoTransaction_UnionTransactionDefaultTypeInternal _UndoTransaction_UnionTransaction_default_instance_;
class UnsupportedHyperlinkFieldArchive;
struct UnsupportedHyperlinkFieldArchiveDefaultTypeInternal;
extern UnsupportedHyperlinkFieldArchiveDefaultTypeInternal _UnsupportedHyperlinkFieldArchive_default_instance_;
}  // namespace TSWP
PROTOBUF_NAMESPACE_OPEN
template<> ::TSWP::BibliographySmartFieldArchive* Arena::CreateMaybeMessage<::TSWP::BibliographySmartFieldArchive>(Arena*);
template<> ::TSWP::BookmarkFieldArchive* Arena::CreateMaybeMessage<::TSWP::BookmarkFieldArchive>(Arena*);
template<> ::TSWP::ChangeArchive* Arena::CreateMaybeMessage<::TSWP::ChangeArchive>(Arena*);
template<> ::TSWP::ChangeSessionArchive* Arena::CreateMaybeMessage<::TSWP::ChangeSessionArchive>(Arena*);
template<> ::TSWP::CharacterStyleArchive* Arena::CreateMaybeMessage<::TSWP::CharacterStyleArchive>(Arena*);
template<> ::TSWP::CharacterStylePropertiesArchive* Arena::CreateMaybeMessage<::TSWP::CharacterStylePropertiesArchive>(Arena*);
template<> ::TSWP::CitationRecordArchive* Arena::CreateMaybeMessage<::TSWP::CitationRecordArchive>(Arena*);
template<> ::TSWP::CitationSmartFieldArchive* Arena::CreateMaybeMessage<::TSWP::CitationSmartFieldArchive>(Arena*);
template<> ::TSWP::ColumnStyleArchive* Arena::CreateMaybeMessage<::TSWP::ColumnStyleArchive>(Arena*);
template<> ::TSWP::ColumnStylePropertiesArchive* Arena::CreateMaybeMessage<::TSWP::ColumnStylePropertiesArchive>(Arena*);
template<> ::TSWP::ColumnsArchive* Arena::CreateMaybeMessage<::TSWP::ColumnsArchive>(Arena*);
template<> ::TSWP::ColumnsArchive_EqualColumnsArchive* Arena::CreateMaybeMessage<::TSWP::ColumnsArchive_EqualColumnsArchive>(Arena*);
template<> ::TSWP::ColumnsArchive_NonEqualColumnsArchive* Arena::CreateMaybeMessage<::TSWP::ColumnsArchive_NonEqualColumnsArchive>(Arena*);
template<> ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* Arena::CreateMaybeMessage<::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive>(Arena*);
template<> ::TSWP::CommentInfoArchive* Arena::CreateMaybeMessage<::TSWP::CommentInfoArchive>(Arena*);
template<> ::TSWP::DateTimeSmartFieldArchive* Arena::CreateMaybeMessage<::TSWP::DateTimeSmartFieldArchive>(Arena*);
template<> ::TSWP::DrawableAttachmentArchive* Arena::CreateMaybeMessage<::TSWP::DrawableAttachmentArchive>(Arena*);
template<> ::TSWP::DropCapArchive* Arena::CreateMaybeMessage<::TSWP::DropCapArchive>(Arena*);
template<> ::TSWP::DropCapStyleArchive* Arena::CreateMaybeMessage<::TSWP::DropCapStyleArchive>(Arena*);
template<> ::TSWP::DropCapStylePropertiesArchive* Arena::CreateMaybeMessage<::TSWP::DropCapStylePropertiesArchive>(Arena*);
template<> ::TSWP::EquationInfoArchive* Arena::CreateMaybeMessage<::TSWP::EquationInfoArchive>(Arena*);
template<> ::TSWP::FilenameSmartFieldArchive* Arena::CreateMaybeMessage<::TSWP::FilenameSmartFieldArchive>(Arena*);
template<> ::TSWP::FlowInfoArchive* Arena::CreateMaybeMessage<::TSWP::FlowInfoArchive>(Arena*);
template<> ::TSWP::FlowInfoContainerArchive* Arena::CreateMaybeMessage<::TSWP::FlowInfoContainerArchive>(Arena*);
template<> ::TSWP::FontFeatureArchive* Arena::CreateMaybeMessage<::TSWP::FontFeatureArchive>(Arena*);
template<> ::TSWP::FootnoteReferenceAttachmentArchive* Arena::CreateMaybeMessage<::TSWP::FootnoteReferenceAttachmentArchive>(Arena*);
template<> ::TSWP::HighlightArchive* Arena::CreateMaybeMessage<::TSWP::HighlightArchive>(Arena*);
template<> ::TSWP::HyperlinkFieldArchive* Arena::CreateMaybeMessage<::TSWP::HyperlinkFieldArchive>(Arena*);
template<> ::TSWP::HyperlinkSelectionArchive* Arena::CreateMaybeMessage<::TSWP::HyperlinkSelectionArchive>(Arena*);
template<> ::TSWP::LineSpacingArchive* Arena::CreateMaybeMessage<::TSWP::LineSpacingArchive>(Arena*);
template<> ::TSWP::ListStyleArchive* Arena::CreateMaybeMessage<::TSWP::ListStyleArchive>(Arena*);
template<> ::TSWP::ListStyleArchive_LabelGeometry* Arena::CreateMaybeMessage<::TSWP::ListStyleArchive_LabelGeometry>(Arena*);
template<> ::TSWP::ListStyleArchive_LabelImage* Arena::CreateMaybeMessage<::TSWP::ListStyleArchive_LabelImage>(Arena*);
template<> ::TSWP::MergeSmartFieldArchive* Arena::CreateMaybeMessage<::TSWP::MergeSmartFieldArchive>(Arena*);
template<> ::TSWP::NumberAttachmentArchive* Arena::CreateMaybeMessage<::TSWP::NumberAttachmentArchive>(Arena*);
template<> ::TSWP::ObjectAttributeTable* Arena::CreateMaybeMessage<::TSWP::ObjectAttributeTable>(Arena*);
template<> ::TSWP::ObjectAttributeTable_ObjectAttribute* Arena::CreateMaybeMessage<::TSWP::ObjectAttributeTable_ObjectAttribute>(Arena*);
template<> ::TSWP::OverlappingFieldAttributeTable* Arena::CreateMaybeMessage<::TSWP::OverlappingFieldAttributeTable>(Arena*);
template<> ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute* Arena::CreateMaybeMessage<::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute>(Arena*);
template<> ::TSWP::PaddingArchive* Arena::CreateMaybeMessage<::TSWP::PaddingArchive>(Arena*);
template<> ::TSWP::ParaDataAttributeTable* Arena::CreateMaybeMessage<::TSWP::ParaDataAttributeTable>(Arena*);
template<> ::TSWP::ParaDataAttributeTable_ParaDataAttribute* Arena::CreateMaybeMessage<::TSWP::ParaDataAttributeTable_ParaDataAttribute>(Arena*);
template<> ::TSWP::ParagraphStyleArchive* Arena::CreateMaybeMessage<::TSWP::ParagraphStyleArchive>(Arena*);
template<> ::TSWP::ParagraphStylePropertiesArchive* Arena::CreateMaybeMessage<::TSWP::ParagraphStylePropertiesArchive>(Arena*);
template<> ::TSWP::PencilAnnotationArchive* Arena::CreateMaybeMessage<::TSWP::PencilAnnotationArchive>(Arena*);
template<> ::TSWP::PlaceholderSmartFieldArchive* Arena::CreateMaybeMessage<::TSWP::PlaceholderSmartFieldArchive>(Arena*);
template<> ::TSWP::RubyFieldArchive* Arena::CreateMaybeMessage<::TSWP::RubyFieldArchive>(Arena*);
template<> ::TSWP::SectionPlaceholderArchive* Arena::CreateMaybeMessage<::TSWP::SectionPlaceholderArchive>(Arena*);
template<> ::TSWP::SelectionArchive* Arena::CreateMaybeMessage<::TSWP::SelectionArchive>(Arena*);
template<> ::TSWP::ShapeInfoArchive* Arena::CreateMaybeMessage<::TSWP::ShapeInfoArchive>(Arena*);
template<> ::TSWP::ShapeStyleArchive* Arena::CreateMaybeMessage<::TSWP::ShapeStyleArchive>(Arena*);
template<> ::TSWP::ShapeStylePropertiesArchive* Arena::CreateMaybeMessage<::TSWP::ShapeStylePropertiesArchive>(Arena*);
template<> ::TSWP::SmartFieldArchive* Arena::CreateMaybeMessage<::TSWP::SmartFieldArchive>(Arena*);
template<> ::TSWP::StorageArchive* Arena::CreateMaybeMessage<::TSWP::StorageArchive>(Arena*);
template<> ::TSWP::StringAttributeTable* Arena::CreateMaybeMessage<::TSWP::StringAttributeTable>(Arena*);
template<> ::TSWP::StringAttributeTable_StringAttribute* Arena::CreateMaybeMessage<::TSWP::StringAttributeTable_StringAttribute>(Arena*);
template<> ::TSWP::TOCAttachmentArchive* Arena::CreateMaybeMessage<::TSWP::TOCAttachmentArchive>(Arena*);
template<> ::TSWP::TOCEntryInstanceArchive* Arena::CreateMaybeMessage<::TSWP::TOCEntryInstanceArchive>(Arena*);
template<> ::TSWP::TOCEntryStyleArchive* Arena::CreateMaybeMessage<::TSWP::TOCEntryStyleArchive>(Arena*);
template<> ::TSWP::TOCEntryStylePropertiesArchive* Arena::CreateMaybeMessage<::TSWP::TOCEntryStylePropertiesArchive>(Arena*);
template<> ::TSWP::TOCInfoArchive* Arena::CreateMaybeMessage<::TSWP::TOCInfoArchive>(Arena*);
template<> ::TSWP::TOCLayoutHintArchive* Arena::CreateMaybeMessage<::TSWP::TOCLayoutHintArchive>(Arena*);
template<> ::TSWP::TOCSettingsArchive* Arena::CreateMaybeMessage<::TSWP::TOCSettingsArchive>(Arena*);
template<> ::TSWP::TOCSettingsArchive_TOCEntryData* Arena::CreateMaybeMessage<::TSWP::TOCSettingsArchive_TOCEntryData>(Arena*);
template<> ::TSWP::TOCSmartFieldArchive* Arena::CreateMaybeMessage<::TSWP::TOCSmartFieldArchive>(Arena*);
template<> ::TSWP::TOCSmartFieldArchive_TOCEntry* Arena::CreateMaybeMessage<::TSWP::TOCSmartFieldArchive_TOCEntry>(Arena*);
template<> ::TSWP::TSWPTOCPageNumberAttachmentArchive* Arena::CreateMaybeMessage<::TSWP::TSWPTOCPageNumberAttachmentArchive>(Arena*);
template<> ::TSWP::TabArchive* Arena::CreateMaybeMessage<::TSWP::TabArchive>(Arena*);
template<> ::TSWP::TabsArchive* Arena::CreateMaybeMessage<::TSWP::TabsArchive>(Arena*);
template<> ::TSWP::TateChuYokoFieldArchive* Arena::CreateMaybeMessage<::TSWP::TateChuYokoFieldArchive>(Arena*);
template<> ::TSWP::TextPresetDisplayItemArchive* Arena::CreateMaybeMessage<::TSWP::TextPresetDisplayItemArchive>(Arena*);
template<> ::TSWP::TextStylePresetArchive* Arena::CreateMaybeMessage<::TSWP::TextStylePresetArchive>(Arena*);
template<> ::TSWP::TextualAttachmentArchive* Arena::CreateMaybeMessage<::TSWP::TextualAttachmentArchive>(Arena*);
template<> ::TSWP::ThemePresetsArchive* Arena::CreateMaybeMessage<::TSWP::ThemePresetsArchive>(Arena*);
template<> ::TSWP::UIGraphicalAttachment* Arena::CreateMaybeMessage<::TSWP::UIGraphicalAttachment>(Arena*);
template<> ::TSWP::UndoTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction>(Arena*);
template<> ::TSWP::UndoTransactionWrapperArchive* Arena::CreateMaybeMessage<::TSWP::UndoTransactionWrapperArchive>(Arena*);
template<> ::TSWP::UndoTransaction_AttributeIndexTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_AttributeIndexTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_CTDateTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_CTDateTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_CharDeltaTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_CharDeltaTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_CharIndexTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_CharIndexTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_GenericTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_GenericTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_InsertAttributeTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_InsertAttributeTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_InsertNilTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_InsertNilTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_ObjectDOLCTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_ObjectDOLCTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_ParagraphDataTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_ParagraphDataTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_ReplaceCharIndexTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_StorageAction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_StorageAction>(Arena*);
template<> ::TSWP::UndoTransaction_StorageActionGroup* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_StorageActionGroup>(Arena*);
template<> ::TSWP::UndoTransaction_TextTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_TextTransaction>(Arena*);
template<> ::TSWP::UndoTransaction_UnionTransaction* Arena::CreateMaybeMessage<::TSWP::UndoTransaction_UnionTransaction>(Arena*);
template<> ::TSWP::UnsupportedHyperlinkFieldArchive* Arena::CreateMaybeMessage<::TSWP::UnsupportedHyperlinkFieldArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSWP {

enum StorageArchive_KindType : int {
  StorageArchive_KindType_BODY = 0,
  StorageArchive_KindType_HEADER = 1,
  StorageArchive_KindType_FOOTNOTE = 2,
  StorageArchive_KindType_TEXTBOX = 3,
  StorageArchive_KindType_NOTE = 4,
  StorageArchive_KindType_CELL = 5,
  StorageArchive_KindType_UNCLASSIFIED = 6,
  StorageArchive_KindType_TABLEOFCONTENTS = 7
};
bool StorageArchive_KindType_IsValid(int value);
constexpr StorageArchive_KindType StorageArchive_KindType_KindType_MIN = StorageArchive_KindType_BODY;
constexpr StorageArchive_KindType StorageArchive_KindType_KindType_MAX = StorageArchive_KindType_TABLEOFCONTENTS;
constexpr int StorageArchive_KindType_KindType_ARRAYSIZE = StorageArchive_KindType_KindType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageArchive_KindType_descriptor();
template<typename T>
inline const std::string& StorageArchive_KindType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StorageArchive_KindType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StorageArchive_KindType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StorageArchive_KindType_descriptor(), enum_t_value);
}
inline bool StorageArchive_KindType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StorageArchive_KindType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StorageArchive_KindType>(
    StorageArchive_KindType_descriptor(), name, value);
}
enum CharacterStylePropertiesArchive_CapitalizationType : int {
  CharacterStylePropertiesArchive_CapitalizationType_kNoCaps = 0,
  CharacterStylePropertiesArchive_CapitalizationType_kAllCaps = 1,
  CharacterStylePropertiesArchive_CapitalizationType_kSmallCaps = 2,
  CharacterStylePropertiesArchive_CapitalizationType_kTitled = 3
};
bool CharacterStylePropertiesArchive_CapitalizationType_IsValid(int value);
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive_CapitalizationType_CapitalizationType_MIN = CharacterStylePropertiesArchive_CapitalizationType_kNoCaps;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive_CapitalizationType_CapitalizationType_MAX = CharacterStylePropertiesArchive_CapitalizationType_kTitled;
constexpr int CharacterStylePropertiesArchive_CapitalizationType_CapitalizationType_ARRAYSIZE = CharacterStylePropertiesArchive_CapitalizationType_CapitalizationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_CapitalizationType_descriptor();
template<typename T>
inline const std::string& CharacterStylePropertiesArchive_CapitalizationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterStylePropertiesArchive_CapitalizationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterStylePropertiesArchive_CapitalizationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterStylePropertiesArchive_CapitalizationType_descriptor(), enum_t_value);
}
inline bool CharacterStylePropertiesArchive_CapitalizationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterStylePropertiesArchive_CapitalizationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterStylePropertiesArchive_CapitalizationType>(
    CharacterStylePropertiesArchive_CapitalizationType_descriptor(), name, value);
}
enum CharacterStylePropertiesArchive_UnderlineType : int {
  CharacterStylePropertiesArchive_UnderlineType_kNoUnderline = 0,
  CharacterStylePropertiesArchive_UnderlineType_kSingleUnderline = 1,
  CharacterStylePropertiesArchive_UnderlineType_kDoubleUnderline = 2,
  CharacterStylePropertiesArchive_UnderlineType_kWavyUnderline = 3
};
bool CharacterStylePropertiesArchive_UnderlineType_IsValid(int value);
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive_UnderlineType_UnderlineType_MIN = CharacterStylePropertiesArchive_UnderlineType_kNoUnderline;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive_UnderlineType_UnderlineType_MAX = CharacterStylePropertiesArchive_UnderlineType_kWavyUnderline;
constexpr int CharacterStylePropertiesArchive_UnderlineType_UnderlineType_ARRAYSIZE = CharacterStylePropertiesArchive_UnderlineType_UnderlineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_UnderlineType_descriptor();
template<typename T>
inline const std::string& CharacterStylePropertiesArchive_UnderlineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterStylePropertiesArchive_UnderlineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterStylePropertiesArchive_UnderlineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterStylePropertiesArchive_UnderlineType_descriptor(), enum_t_value);
}
inline bool CharacterStylePropertiesArchive_UnderlineType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterStylePropertiesArchive_UnderlineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterStylePropertiesArchive_UnderlineType>(
    CharacterStylePropertiesArchive_UnderlineType_descriptor(), name, value);
}
enum CharacterStylePropertiesArchive_LigaturesType : int {
  CharacterStylePropertiesArchive_LigaturesType_kRequiredLigatures = 0,
  CharacterStylePropertiesArchive_LigaturesType_kStandardLigatures = 1,
  CharacterStylePropertiesArchive_LigaturesType_kAllLigatures = 2
};
bool CharacterStylePropertiesArchive_LigaturesType_IsValid(int value);
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive_LigaturesType_LigaturesType_MIN = CharacterStylePropertiesArchive_LigaturesType_kRequiredLigatures;
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive_LigaturesType_LigaturesType_MAX = CharacterStylePropertiesArchive_LigaturesType_kAllLigatures;
constexpr int CharacterStylePropertiesArchive_LigaturesType_LigaturesType_ARRAYSIZE = CharacterStylePropertiesArchive_LigaturesType_LigaturesType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_LigaturesType_descriptor();
template<typename T>
inline const std::string& CharacterStylePropertiesArchive_LigaturesType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterStylePropertiesArchive_LigaturesType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterStylePropertiesArchive_LigaturesType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterStylePropertiesArchive_LigaturesType_descriptor(), enum_t_value);
}
inline bool CharacterStylePropertiesArchive_LigaturesType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterStylePropertiesArchive_LigaturesType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterStylePropertiesArchive_LigaturesType>(
    CharacterStylePropertiesArchive_LigaturesType_descriptor(), name, value);
}
enum CharacterStylePropertiesArchive_StrikethruType : int {
  CharacterStylePropertiesArchive_StrikethruType_kNoStrikethru = 0,
  CharacterStylePropertiesArchive_StrikethruType_kSingleStrikethru = 1,
  CharacterStylePropertiesArchive_StrikethruType_kDoubleStrikethru = 2,
  CharacterStylePropertiesArchive_StrikethruType_kTripleStrikethru = 3
};
bool CharacterStylePropertiesArchive_StrikethruType_IsValid(int value);
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive_StrikethruType_StrikethruType_MIN = CharacterStylePropertiesArchive_StrikethruType_kNoStrikethru;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive_StrikethruType_StrikethruType_MAX = CharacterStylePropertiesArchive_StrikethruType_kTripleStrikethru;
constexpr int CharacterStylePropertiesArchive_StrikethruType_StrikethruType_ARRAYSIZE = CharacterStylePropertiesArchive_StrikethruType_StrikethruType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_StrikethruType_descriptor();
template<typename T>
inline const std::string& CharacterStylePropertiesArchive_StrikethruType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterStylePropertiesArchive_StrikethruType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterStylePropertiesArchive_StrikethruType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterStylePropertiesArchive_StrikethruType_descriptor(), enum_t_value);
}
inline bool CharacterStylePropertiesArchive_StrikethruType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterStylePropertiesArchive_StrikethruType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterStylePropertiesArchive_StrikethruType>(
    CharacterStylePropertiesArchive_StrikethruType_descriptor(), name, value);
}
enum CharacterStylePropertiesArchive_SuperscriptType : int {
  CharacterStylePropertiesArchive_SuperscriptType_kNoScript = 0,
  CharacterStylePropertiesArchive_SuperscriptType_kSuperscript = 1,
  CharacterStylePropertiesArchive_SuperscriptType_kSubscript = 2
};
bool CharacterStylePropertiesArchive_SuperscriptType_IsValid(int value);
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive_SuperscriptType_SuperscriptType_MIN = CharacterStylePropertiesArchive_SuperscriptType_kNoScript;
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive_SuperscriptType_SuperscriptType_MAX = CharacterStylePropertiesArchive_SuperscriptType_kSubscript;
constexpr int CharacterStylePropertiesArchive_SuperscriptType_SuperscriptType_ARRAYSIZE = CharacterStylePropertiesArchive_SuperscriptType_SuperscriptType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_SuperscriptType_descriptor();
template<typename T>
inline const std::string& CharacterStylePropertiesArchive_SuperscriptType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterStylePropertiesArchive_SuperscriptType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterStylePropertiesArchive_SuperscriptType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterStylePropertiesArchive_SuperscriptType_descriptor(), enum_t_value);
}
inline bool CharacterStylePropertiesArchive_SuperscriptType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterStylePropertiesArchive_SuperscriptType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterStylePropertiesArchive_SuperscriptType>(
    CharacterStylePropertiesArchive_SuperscriptType_descriptor(), name, value);
}
enum TabArchive_TabAlignmentType : int {
  TabArchive_TabAlignmentType_kTabAlignmentLeft = 0,
  TabArchive_TabAlignmentType_kTabAlignmentCenter = 1,
  TabArchive_TabAlignmentType_kTabAlignmentRight = 2,
  TabArchive_TabAlignmentType_kTabAlignmentDecimal = 3
};
bool TabArchive_TabAlignmentType_IsValid(int value);
constexpr TabArchive_TabAlignmentType TabArchive_TabAlignmentType_TabAlignmentType_MIN = TabArchive_TabAlignmentType_kTabAlignmentLeft;
constexpr TabArchive_TabAlignmentType TabArchive_TabAlignmentType_TabAlignmentType_MAX = TabArchive_TabAlignmentType_kTabAlignmentDecimal;
constexpr int TabArchive_TabAlignmentType_TabAlignmentType_ARRAYSIZE = TabArchive_TabAlignmentType_TabAlignmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TabArchive_TabAlignmentType_descriptor();
template<typename T>
inline const std::string& TabArchive_TabAlignmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TabArchive_TabAlignmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TabArchive_TabAlignmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TabArchive_TabAlignmentType_descriptor(), enum_t_value);
}
inline bool TabArchive_TabAlignmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TabArchive_TabAlignmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TabArchive_TabAlignmentType>(
    TabArchive_TabAlignmentType_descriptor(), name, value);
}
enum LineSpacingArchive_LineSpacingModeType : int {
  LineSpacingArchive_LineSpacingModeType_kRelativeLineSpacing = 0,
  LineSpacingArchive_LineSpacingModeType_kMinimumLineSpacing = 1,
  LineSpacingArchive_LineSpacingModeType_kExactLineSpacing = 2,
  LineSpacingArchive_LineSpacingModeType_kMaximumLineSpacing = 3,
  LineSpacingArchive_LineSpacingModeType_kSpaceBetweenLineSpacing = 4
};
bool LineSpacingArchive_LineSpacingModeType_IsValid(int value);
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive_LineSpacingModeType_LineSpacingModeType_MIN = LineSpacingArchive_LineSpacingModeType_kRelativeLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive_LineSpacingModeType_LineSpacingModeType_MAX = LineSpacingArchive_LineSpacingModeType_kSpaceBetweenLineSpacing;
constexpr int LineSpacingArchive_LineSpacingModeType_LineSpacingModeType_ARRAYSIZE = LineSpacingArchive_LineSpacingModeType_LineSpacingModeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineSpacingArchive_LineSpacingModeType_descriptor();
template<typename T>
inline const std::string& LineSpacingArchive_LineSpacingModeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LineSpacingArchive_LineSpacingModeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LineSpacingArchive_LineSpacingModeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LineSpacingArchive_LineSpacingModeType_descriptor(), enum_t_value);
}
inline bool LineSpacingArchive_LineSpacingModeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LineSpacingArchive_LineSpacingModeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LineSpacingArchive_LineSpacingModeType>(
    LineSpacingArchive_LineSpacingModeType_descriptor(), name, value);
}
enum ParagraphStylePropertiesArchive_TextAlignmentType : int {
  ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue0 = 0,
  ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue1 = 1,
  ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue2 = 2,
  ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue3 = 3,
  ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue4 = 4
};
bool ParagraphStylePropertiesArchive_TextAlignmentType_IsValid(int value);
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive_TextAlignmentType_TextAlignmentType_MIN = ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue0;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive_TextAlignmentType_TextAlignmentType_MAX = ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue4;
constexpr int ParagraphStylePropertiesArchive_TextAlignmentType_TextAlignmentType_ARRAYSIZE = ParagraphStylePropertiesArchive_TextAlignmentType_TextAlignmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphStylePropertiesArchive_TextAlignmentType_descriptor();
template<typename T>
inline const std::string& ParagraphStylePropertiesArchive_TextAlignmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParagraphStylePropertiesArchive_TextAlignmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParagraphStylePropertiesArchive_TextAlignmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParagraphStylePropertiesArchive_TextAlignmentType_descriptor(), enum_t_value);
}
inline bool ParagraphStylePropertiesArchive_TextAlignmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParagraphStylePropertiesArchive_TextAlignmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParagraphStylePropertiesArchive_TextAlignmentType>(
    ParagraphStylePropertiesArchive_TextAlignmentType_descriptor(), name, value);
}
enum ParagraphStylePropertiesArchive_ParagraphBorderType : int {
  ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue0 = 0,
  ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue1 = 1,
  ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue2 = 2,
  ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue3 = 3,
  ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue4 = 4
};
bool ParagraphStylePropertiesArchive_ParagraphBorderType_IsValid(int value);
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive_ParagraphBorderType_ParagraphBorderType_MIN = ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue0;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive_ParagraphBorderType_ParagraphBorderType_MAX = ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue4;
constexpr int ParagraphStylePropertiesArchive_ParagraphBorderType_ParagraphBorderType_ARRAYSIZE = ParagraphStylePropertiesArchive_ParagraphBorderType_ParagraphBorderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor();
template<typename T>
inline const std::string& ParagraphStylePropertiesArchive_ParagraphBorderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParagraphStylePropertiesArchive_ParagraphBorderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParagraphStylePropertiesArchive_ParagraphBorderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor(), enum_t_value);
}
inline bool ParagraphStylePropertiesArchive_ParagraphBorderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParagraphStylePropertiesArchive_ParagraphBorderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParagraphStylePropertiesArchive_ParagraphBorderType>(
    ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor(), name, value);
}
enum ParagraphStylePropertiesArchive_OutlineStyleType : int {
  ParagraphStylePropertiesArchive_OutlineStyleType_OSTvalue0 = 0,
  ParagraphStylePropertiesArchive_OutlineStyleType_OSTvalue1 = 1,
  ParagraphStylePropertiesArchive_OutlineStyleType_OSTvalue2 = 2
};
bool ParagraphStylePropertiesArchive_OutlineStyleType_IsValid(int value);
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive_OutlineStyleType_OutlineStyleType_MIN = ParagraphStylePropertiesArchive_OutlineStyleType_OSTvalue0;
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive_OutlineStyleType_OutlineStyleType_MAX = ParagraphStylePropertiesArchive_OutlineStyleType_OSTvalue2;
constexpr int ParagraphStylePropertiesArchive_OutlineStyleType_OutlineStyleType_ARRAYSIZE = ParagraphStylePropertiesArchive_OutlineStyleType_OutlineStyleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphStylePropertiesArchive_OutlineStyleType_descriptor();
template<typename T>
inline const std::string& ParagraphStylePropertiesArchive_OutlineStyleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParagraphStylePropertiesArchive_OutlineStyleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParagraphStylePropertiesArchive_OutlineStyleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParagraphStylePropertiesArchive_OutlineStyleType_descriptor(), enum_t_value);
}
inline bool ParagraphStylePropertiesArchive_OutlineStyleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParagraphStylePropertiesArchive_OutlineStyleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParagraphStylePropertiesArchive_OutlineStyleType>(
    ParagraphStylePropertiesArchive_OutlineStyleType_descriptor(), name, value);
}
enum ListStyleArchive_LabelType : int {
  ListStyleArchive_LabelType_kNone = 0,
  ListStyleArchive_LabelType_kImage = 1,
  ListStyleArchive_LabelType_kString = 2,
  ListStyleArchive_LabelType_kNumber = 3
};
bool ListStyleArchive_LabelType_IsValid(int value);
constexpr ListStyleArchive_LabelType ListStyleArchive_LabelType_LabelType_MIN = ListStyleArchive_LabelType_kNone;
constexpr ListStyleArchive_LabelType ListStyleArchive_LabelType_LabelType_MAX = ListStyleArchive_LabelType_kNumber;
constexpr int ListStyleArchive_LabelType_LabelType_ARRAYSIZE = ListStyleArchive_LabelType_LabelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListStyleArchive_LabelType_descriptor();
template<typename T>
inline const std::string& ListStyleArchive_LabelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListStyleArchive_LabelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListStyleArchive_LabelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListStyleArchive_LabelType_descriptor(), enum_t_value);
}
inline bool ListStyleArchive_LabelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ListStyleArchive_LabelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListStyleArchive_LabelType>(
    ListStyleArchive_LabelType_descriptor(), name, value);
}
enum ListStyleArchive_NumberType : int {
  ListStyleArchive_NumberType_kNumericDecimal = 0,
  ListStyleArchive_NumberType_kNumericDoubleParen = 1,
  ListStyleArchive_NumberType_kNumericRightParen = 2,
  ListStyleArchive_NumberType_kRomanUpperDecimal = 3,
  ListStyleArchive_NumberType_kRomanUpperDoubleParen = 4,
  ListStyleArchive_NumberType_kRomanUpperRightParen = 5,
  ListStyleArchive_NumberType_kRomanLowerDecimal = 6,
  ListStyleArchive_NumberType_kRomanLowerDoubleParen = 7,
  ListStyleArchive_NumberType_kRomanLowerRightParen = 8,
  ListStyleArchive_NumberType_kAlphaUpperDecimal = 9,
  ListStyleArchive_NumberType_kAlphaUpperDoubleParen = 10,
  ListStyleArchive_NumberType_kAlphaUpperRightParen = 11,
  ListStyleArchive_NumberType_kAlphaLowerDecimal = 12,
  ListStyleArchive_NumberType_kAlphaLowerDoubleParen = 13,
  ListStyleArchive_NumberType_kAlphaLowerRightParen = 14,
  ListStyleArchive_NumberType_kIdeographicJapaneseDecimalKind = 15,
  ListStyleArchive_NumberType_kIdeographicJapaneseDoubleParenKind = 16,
  ListStyleArchive_NumberType_kIdeographicJapaneseRightParenKind = 17,
  ListStyleArchive_NumberType_kHiraganaDecimalKind = 18,
  ListStyleArchive_NumberType_kHiraganaDoubleParenKind = 19,
  ListStyleArchive_NumberType_kHiraganaRightParenKind = 20,
  ListStyleArchive_NumberType_kKatakanaDecimalKind = 21,
  ListStyleArchive_NumberType_kKatakanaDoubleParenKind = 22,
  ListStyleArchive_NumberType_kKatakanaRightParenKind = 23,
  ListStyleArchive_NumberType_kHiraganaIrohaDecimalKind = 24,
  ListStyleArchive_NumberType_kHiraganaIrohaDoubleParenKind = 25,
  ListStyleArchive_NumberType_kHiraganaIrohaRightParenKind = 26,
  ListStyleArchive_NumberType_kKatakanaIrohaDecimalKind = 27,
  ListStyleArchive_NumberType_kKatakanaIrohaDoubleParenKind = 28,
  ListStyleArchive_NumberType_kKatakanaIrohaRightParenKind = 29,
  ListStyleArchive_NumberType_kIdeographicSimplifiedChineseDecimalKind = 30,
  ListStyleArchive_NumberType_kIdeographicSimplifiedChineseDoubleParenKind = 31,
  ListStyleArchive_NumberType_kIdeographicSimplifiedChineseRightParenKind = 32,
  ListStyleArchive_NumberType_kIdeographicTraditionalChineseDecimalKind = 33,
  ListStyleArchive_NumberType_kIdeographicTraditionalChineseDoubleParenKind = 34,
  ListStyleArchive_NumberType_kIdeographicTraditionalChineseRightParenKind = 35,
  ListStyleArchive_NumberType_kIdeographicFormalJapaneseDecimalKind = 36,
  ListStyleArchive_NumberType_kIdeographicFormalJapaneseDoubleParenKind = 37,
  ListStyleArchive_NumberType_kIdeographicFormalJapaneseRightParenKind = 38,
  ListStyleArchive_NumberType_kIdeographicFormalSimplifiedChineseDecimalKind = 39,
  ListStyleArchive_NumberType_kIdeographicFormalSimplifiedChineseDoubleParenKind = 40,
  ListStyleArchive_NumberType_kIdeographicFormalSimplifiedChineseRightParenKind = 41,
  ListStyleArchive_NumberType_kIdeographicFormalTraditionalChineseDecimalKind = 42,
  ListStyleArchive_NumberType_kIdeographicFormalTraditionalChineseDoubleParenKind = 43,
  ListStyleArchive_NumberType_kIdeographicFormalTraditionalChineseRightParenKind = 44,
  ListStyleArchive_NumberType_kKoreanAlphabetDecimalKind = 45,
  ListStyleArchive_NumberType_kKoreanAlphabetDoubleParenKind = 46,
  ListStyleArchive_NumberType_kKoreanAlphabetRightParenKind = 47,
  ListStyleArchive_NumberType_kCircledNumberKind = 48,
  ListStyleArchive_NumberType_kArabianNumericDecimalKind = 49,
  ListStyleArchive_NumberType_kArabianNumericDoubleParenKind = 50,
  ListStyleArchive_NumberType_kArabianNumericRightParenKind = 51,
  ListStyleArchive_NumberType_kArabianAlphaDecimalKind = 52,
  ListStyleArchive_NumberType_kArabianAlphaDoubleParenKind = 53,
  ListStyleArchive_NumberType_kArabianAlphaRightParenKind = 54,
  ListStyleArchive_NumberType_kArabianAbjadDecimalKind = 55,
  ListStyleArchive_NumberType_kArabianAbjadDoubleParenKind = 56,
  ListStyleArchive_NumberType_kArabianAbjadRightParenKind = 57,
  ListStyleArchive_NumberType_kHebrewAlphaDecimalKind = 58,
  ListStyleArchive_NumberType_kHebrewAlphaDoubleParenKind = 59,
  ListStyleArchive_NumberType_kHebrewAlphaRightParenKind = 60,
  ListStyleArchive_NumberType_kHebrewBiblicalStandardKind = 61,
  ListStyleArchive_NumberType_kHebrewBiblicalDecimalKind = 62,
  ListStyleArchive_NumberType_kHebrewBiblicalDoubleParenKind = 63,
  ListStyleArchive_NumberType_kHebrewBiblicalRightParenKind = 64
};
bool ListStyleArchive_NumberType_IsValid(int value);
constexpr ListStyleArchive_NumberType ListStyleArchive_NumberType_NumberType_MIN = ListStyleArchive_NumberType_kNumericDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive_NumberType_NumberType_MAX = ListStyleArchive_NumberType_kHebrewBiblicalRightParenKind;
constexpr int ListStyleArchive_NumberType_NumberType_ARRAYSIZE = ListStyleArchive_NumberType_NumberType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListStyleArchive_NumberType_descriptor();
template<typename T>
inline const std::string& ListStyleArchive_NumberType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListStyleArchive_NumberType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListStyleArchive_NumberType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListStyleArchive_NumberType_descriptor(), enum_t_value);
}
inline bool ListStyleArchive_NumberType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ListStyleArchive_NumberType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListStyleArchive_NumberType>(
    ListStyleArchive_NumberType_descriptor(), name, value);
}
enum ColumnStylePropertiesArchive_VerticalAlignmentType : int {
  ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignTop = 0,
  ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignMiddle = 1,
  ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignBottom = 2,
  ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignJustify = 3
};
bool ColumnStylePropertiesArchive_VerticalAlignmentType_IsValid(int value);
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MIN = ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignTop;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MAX = ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignJustify;
constexpr int ColumnStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_ARRAYSIZE = ColumnStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor();
template<typename T>
inline const std::string& ColumnStylePropertiesArchive_VerticalAlignmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColumnStylePropertiesArchive_VerticalAlignmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColumnStylePropertiesArchive_VerticalAlignmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor(), enum_t_value);
}
inline bool ColumnStylePropertiesArchive_VerticalAlignmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ColumnStylePropertiesArchive_VerticalAlignmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ColumnStylePropertiesArchive_VerticalAlignmentType>(
    ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor(), name, value);
}
enum ShapeStylePropertiesArchive_VerticalAlignmentType : int {
  ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignTop = 0,
  ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignMiddle = 1,
  ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignBottom = 2,
  ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignJustify = 3
};
bool ShapeStylePropertiesArchive_VerticalAlignmentType_IsValid(int value);
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MIN = ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignTop;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MAX = ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignJustify;
constexpr int ShapeStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_ARRAYSIZE = ShapeStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor();
template<typename T>
inline const std::string& ShapeStylePropertiesArchive_VerticalAlignmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShapeStylePropertiesArchive_VerticalAlignmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShapeStylePropertiesArchive_VerticalAlignmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor(), enum_t_value);
}
inline bool ShapeStylePropertiesArchive_VerticalAlignmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShapeStylePropertiesArchive_VerticalAlignmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShapeStylePropertiesArchive_VerticalAlignmentType>(
    ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor(), name, value);
}
enum UndoTransaction_UndoKind : int {
  UndoTransaction_UndoKind_REPLACE_TEXT = 1,
  UndoTransaction_UndoKind_INSERT_ATTRIBUTE = 2,
  UndoTransaction_UndoKind_DELETE_ATTRIBUTE = 3,
  UndoTransaction_UndoKind_ADJUST_CHAR_INDEXES = 4,
  UndoTransaction_UndoKind_COMPR_ADJUST_CHAR_INDEXES = 5,
  UndoTransaction_UndoKind_REPLACE_CHAR_INDEX = 6,
  UndoTransaction_UndoKind_REPLACE_OBJECT = 7,
  UndoTransaction_UndoKind_REPLACE_PARAGRAPH_DATA = 8,
  UndoTransaction_UndoKind_OBJECT_DOLC = 9,
  UndoTransaction_UndoKind_CT_DATE = 10
};
bool UndoTransaction_UndoKind_IsValid(int value);
constexpr UndoTransaction_UndoKind UndoTransaction_UndoKind_UndoKind_MIN = UndoTransaction_UndoKind_REPLACE_TEXT;
constexpr UndoTransaction_UndoKind UndoTransaction_UndoKind_UndoKind_MAX = UndoTransaction_UndoKind_CT_DATE;
constexpr int UndoTransaction_UndoKind_UndoKind_ARRAYSIZE = UndoTransaction_UndoKind_UndoKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UndoTransaction_UndoKind_descriptor();
template<typename T>
inline const std::string& UndoTransaction_UndoKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UndoTransaction_UndoKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UndoTransaction_UndoKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UndoTransaction_UndoKind_descriptor(), enum_t_value);
}
inline bool UndoTransaction_UndoKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UndoTransaction_UndoKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UndoTransaction_UndoKind>(
    UndoTransaction_UndoKind_descriptor(), name, value);
}
enum UndoTransaction_ActionKind : int {
  UndoTransaction_ActionKind_ACTION_UNDEFINED = 0,
  UndoTransaction_ActionKind_ACTION_TEXT = 1,
  UndoTransaction_ActionKind_ACTION_ATTRIBUTE = 2
};
bool UndoTransaction_ActionKind_IsValid(int value);
constexpr UndoTransaction_ActionKind UndoTransaction_ActionKind_ActionKind_MIN = UndoTransaction_ActionKind_ACTION_UNDEFINED;
constexpr UndoTransaction_ActionKind UndoTransaction_ActionKind_ActionKind_MAX = UndoTransaction_ActionKind_ACTION_ATTRIBUTE;
constexpr int UndoTransaction_ActionKind_ActionKind_ARRAYSIZE = UndoTransaction_ActionKind_ActionKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UndoTransaction_ActionKind_descriptor();
template<typename T>
inline const std::string& UndoTransaction_ActionKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UndoTransaction_ActionKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UndoTransaction_ActionKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UndoTransaction_ActionKind_descriptor(), enum_t_value);
}
inline bool UndoTransaction_ActionKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UndoTransaction_ActionKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UndoTransaction_ActionKind>(
    UndoTransaction_ActionKind_descriptor(), name, value);
}
enum UndoTransaction_ActionGroupKind : int {
  UndoTransaction_ActionGroupKind_ACTION_GROUP_UNDEFINED = 0,
  UndoTransaction_ActionGroupKind_ACTION_GROUP_TEXT = 1,
  UndoTransaction_ActionGroupKind_ACTION_GROUP_ATTRIBUTE = 2
};
bool UndoTransaction_ActionGroupKind_IsValid(int value);
constexpr UndoTransaction_ActionGroupKind UndoTransaction_ActionGroupKind_ActionGroupKind_MIN = UndoTransaction_ActionGroupKind_ACTION_GROUP_UNDEFINED;
constexpr UndoTransaction_ActionGroupKind UndoTransaction_ActionGroupKind_ActionGroupKind_MAX = UndoTransaction_ActionGroupKind_ACTION_GROUP_ATTRIBUTE;
constexpr int UndoTransaction_ActionGroupKind_ActionGroupKind_ARRAYSIZE = UndoTransaction_ActionGroupKind_ActionGroupKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UndoTransaction_ActionGroupKind_descriptor();
template<typename T>
inline const std::string& UndoTransaction_ActionGroupKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UndoTransaction_ActionGroupKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UndoTransaction_ActionGroupKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UndoTransaction_ActionGroupKind_descriptor(), enum_t_value);
}
inline bool UndoTransaction_ActionGroupKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UndoTransaction_ActionGroupKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UndoTransaction_ActionGroupKind>(
    UndoTransaction_ActionGroupKind_descriptor(), name, value);
}
enum TextualAttachmentArchive_Kind : int {
  TextualAttachmentArchive_Kind_kKindPageNumber = 0,
  TextualAttachmentArchive_Kind_kKindPageCount = 1,
  TextualAttachmentArchive_Kind_kKindFootnoteMark = 2
};
bool TextualAttachmentArchive_Kind_IsValid(int value);
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive_Kind_Kind_MIN = TextualAttachmentArchive_Kind_kKindPageNumber;
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive_Kind_Kind_MAX = TextualAttachmentArchive_Kind_kKindFootnoteMark;
constexpr int TextualAttachmentArchive_Kind_Kind_ARRAYSIZE = TextualAttachmentArchive_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextualAttachmentArchive_Kind_descriptor();
template<typename T>
inline const std::string& TextualAttachmentArchive_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextualAttachmentArchive_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextualAttachmentArchive_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextualAttachmentArchive_Kind_descriptor(), enum_t_value);
}
inline bool TextualAttachmentArchive_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextualAttachmentArchive_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextualAttachmentArchive_Kind>(
    TextualAttachmentArchive_Kind_descriptor(), name, value);
}
enum DateTimeSmartFieldArchive_DateTimeUpdatePlan : int {
  DateTimeSmartFieldArchive_DateTimeUpdatePlan_kDateTimeUpdatePlanNever = 0,
  DateTimeSmartFieldArchive_DateTimeUpdatePlan_kDateTimeUpdatePlanAuto = 1,
  DateTimeSmartFieldArchive_DateTimeUpdatePlan_kDateTimeUpdatePlanOnce = 2
};
bool DateTimeSmartFieldArchive_DateTimeUpdatePlan_IsValid(int value);
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive_DateTimeUpdatePlan_DateTimeUpdatePlan_MIN = DateTimeSmartFieldArchive_DateTimeUpdatePlan_kDateTimeUpdatePlanNever;
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive_DateTimeUpdatePlan_DateTimeUpdatePlan_MAX = DateTimeSmartFieldArchive_DateTimeUpdatePlan_kDateTimeUpdatePlanOnce;
constexpr int DateTimeSmartFieldArchive_DateTimeUpdatePlan_DateTimeUpdatePlan_ARRAYSIZE = DateTimeSmartFieldArchive_DateTimeUpdatePlan_DateTimeUpdatePlan_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor();
template<typename T>
inline const std::string& DateTimeSmartFieldArchive_DateTimeUpdatePlan_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DateTimeSmartFieldArchive_DateTimeUpdatePlan>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DateTimeSmartFieldArchive_DateTimeUpdatePlan_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor(), enum_t_value);
}
inline bool DateTimeSmartFieldArchive_DateTimeUpdatePlan_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DateTimeSmartFieldArchive_DateTimeUpdatePlan* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DateTimeSmartFieldArchive_DateTimeUpdatePlan>(
    DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor(), name, value);
}
enum DateTimeSmartFieldArchive_DateTimeFormatterStyle : int {
  DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleNone = 0,
  DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleShort = 1,
  DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleMedium = 2,
  DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleLong = 3,
  DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleFull = 4
};
bool DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(int value);
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive_DateTimeFormatterStyle_DateTimeFormatterStyle_MIN = DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleNone;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive_DateTimeFormatterStyle_DateTimeFormatterStyle_MAX = DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleFull;
constexpr int DateTimeSmartFieldArchive_DateTimeFormatterStyle_DateTimeFormatterStyle_ARRAYSIZE = DateTimeSmartFieldArchive_DateTimeFormatterStyle_DateTimeFormatterStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor();
template<typename T>
inline const std::string& DateTimeSmartFieldArchive_DateTimeFormatterStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DateTimeSmartFieldArchive_DateTimeFormatterStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DateTimeSmartFieldArchive_DateTimeFormatterStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor(), enum_t_value);
}
inline bool DateTimeSmartFieldArchive_DateTimeFormatterStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DateTimeSmartFieldArchive_DateTimeFormatterStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DateTimeSmartFieldArchive_DateTimeFormatterStyle>(
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor(), name, value);
}
enum MergeSmartFieldArchive_MergeCategory : int {
  MergeSmartFieldArchive_MergeCategory_kMergeCategoryTo = 0,
  MergeSmartFieldArchive_MergeCategory_kMergeCategoryFrom = 1
};
bool MergeSmartFieldArchive_MergeCategory_IsValid(int value);
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive_MergeCategory_MergeCategory_MIN = MergeSmartFieldArchive_MergeCategory_kMergeCategoryTo;
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive_MergeCategory_MergeCategory_MAX = MergeSmartFieldArchive_MergeCategory_kMergeCategoryFrom;
constexpr int MergeSmartFieldArchive_MergeCategory_MergeCategory_ARRAYSIZE = MergeSmartFieldArchive_MergeCategory_MergeCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeSmartFieldArchive_MergeCategory_descriptor();
template<typename T>
inline const std::string& MergeSmartFieldArchive_MergeCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MergeSmartFieldArchive_MergeCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MergeSmartFieldArchive_MergeCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MergeSmartFieldArchive_MergeCategory_descriptor(), enum_t_value);
}
inline bool MergeSmartFieldArchive_MergeCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MergeSmartFieldArchive_MergeCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MergeSmartFieldArchive_MergeCategory>(
    MergeSmartFieldArchive_MergeCategory_descriptor(), name, value);
}
enum ChangeArchive_ChangeKind : int {
  ChangeArchive_ChangeKind_kChangeKindInsertion = 1,
  ChangeArchive_ChangeKind_kChangeKindDeletion = 2
};
bool ChangeArchive_ChangeKind_IsValid(int value);
constexpr ChangeArchive_ChangeKind ChangeArchive_ChangeKind_ChangeKind_MIN = ChangeArchive_ChangeKind_kChangeKindInsertion;
constexpr ChangeArchive_ChangeKind ChangeArchive_ChangeKind_ChangeKind_MAX = ChangeArchive_ChangeKind_kChangeKindDeletion;
constexpr int ChangeArchive_ChangeKind_ChangeKind_ARRAYSIZE = ChangeArchive_ChangeKind_ChangeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeArchive_ChangeKind_descriptor();
template<typename T>
inline const std::string& ChangeArchive_ChangeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangeArchive_ChangeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangeArchive_ChangeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangeArchive_ChangeKind_descriptor(), enum_t_value);
}
inline bool ChangeArchive_ChangeKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChangeArchive_ChangeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangeArchive_ChangeKind>(
    ChangeArchive_ChangeKind_descriptor(), name, value);
}
enum DropCapArchive_DropCapType : int {
  DropCapArchive_DropCapType_TSWPDropCapTypeText = 0,
  DropCapArchive_DropCapType_TSWPDropCapTypeShape = 1,
  DropCapArchive_DropCapType_TSWPDropCapTypeImage = 2
};
bool DropCapArchive_DropCapType_IsValid(int value);
constexpr DropCapArchive_DropCapType DropCapArchive_DropCapType_DropCapType_MIN = DropCapArchive_DropCapType_TSWPDropCapTypeText;
constexpr DropCapArchive_DropCapType DropCapArchive_DropCapType_DropCapType_MAX = DropCapArchive_DropCapType_TSWPDropCapTypeImage;
constexpr int DropCapArchive_DropCapType_DropCapType_ARRAYSIZE = DropCapArchive_DropCapType_DropCapType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DropCapArchive_DropCapType_descriptor();
template<typename T>
inline const std::string& DropCapArchive_DropCapType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DropCapArchive_DropCapType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DropCapArchive_DropCapType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DropCapArchive_DropCapType_descriptor(), enum_t_value);
}
inline bool DropCapArchive_DropCapType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DropCapArchive_DropCapType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DropCapArchive_DropCapType>(
    DropCapArchive_DropCapType_descriptor(), name, value);
}
enum DropCapArchive_DropCapWrapType : int {
  DropCapArchive_DropCapWrapType_TSWPDropCapWrapTypeRectangular = 0,
  DropCapArchive_DropCapWrapType_TSWPDropCapWrapTypeContour = 1,
  DropCapArchive_DropCapWrapType_TSWPDropCapWrapTypeNone = 2
};
bool DropCapArchive_DropCapWrapType_IsValid(int value);
constexpr DropCapArchive_DropCapWrapType DropCapArchive_DropCapWrapType_DropCapWrapType_MIN = DropCapArchive_DropCapWrapType_TSWPDropCapWrapTypeRectangular;
constexpr DropCapArchive_DropCapWrapType DropCapArchive_DropCapWrapType_DropCapWrapType_MAX = DropCapArchive_DropCapWrapType_TSWPDropCapWrapTypeNone;
constexpr int DropCapArchive_DropCapWrapType_DropCapWrapType_ARRAYSIZE = DropCapArchive_DropCapWrapType_DropCapWrapType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DropCapArchive_DropCapWrapType_descriptor();
template<typename T>
inline const std::string& DropCapArchive_DropCapWrapType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DropCapArchive_DropCapWrapType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DropCapArchive_DropCapWrapType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DropCapArchive_DropCapWrapType_descriptor(), enum_t_value);
}
inline bool DropCapArchive_DropCapWrapType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DropCapArchive_DropCapWrapType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DropCapArchive_DropCapWrapType>(
    DropCapArchive_DropCapWrapType_descriptor(), name, value);
}
enum SelectionType : int {
  SelectionType_Normal = 0,
  SelectionType_ListLabel = 1,
  SelectionType_ListTopic = 2,
  SelectionType_Replace = 3,
  SelectionType_CopyPasteStyle = 4,
  SelectionType_Replace2 = 5,
  SelectionType_SmartField = 6,
  SelectionType_Visual = 7
};
bool SelectionType_IsValid(int value);
constexpr SelectionType SelectionType_MIN = SelectionType_Normal;
constexpr SelectionType SelectionType_MAX = SelectionType_Visual;
constexpr int SelectionType_ARRAYSIZE = SelectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionType_descriptor();
template<typename T>
inline const std::string& SelectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectionType_descriptor(), enum_t_value);
}
inline bool SelectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SelectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectionType>(
    SelectionType_descriptor(), name, value);
}
enum StyleInsertionBehavior : int {
  StyleInsertionBehavior_NoGrow = 0,
  StyleInsertionBehavior_GrowLeft = 1,
  StyleInsertionBehavior_GrowRight = 2
};
bool StyleInsertionBehavior_IsValid(int value);
constexpr StyleInsertionBehavior StyleInsertionBehavior_MIN = StyleInsertionBehavior_NoGrow;
constexpr StyleInsertionBehavior StyleInsertionBehavior_MAX = StyleInsertionBehavior_GrowRight;
constexpr int StyleInsertionBehavior_ARRAYSIZE = StyleInsertionBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleInsertionBehavior_descriptor();
template<typename T>
inline const std::string& StyleInsertionBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StyleInsertionBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StyleInsertionBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StyleInsertionBehavior_descriptor(), enum_t_value);
}
inline bool StyleInsertionBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StyleInsertionBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StyleInsertionBehavior>(
    StyleInsertionBehavior_descriptor(), name, value);
}
enum CaretAffinity : int {
  CaretAffinity_Start = 0,
  CaretAffinity_End = 1
};
bool CaretAffinity_IsValid(int value);
constexpr CaretAffinity CaretAffinity_MIN = CaretAffinity_Start;
constexpr CaretAffinity CaretAffinity_MAX = CaretAffinity_End;
constexpr int CaretAffinity_ARRAYSIZE = CaretAffinity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaretAffinity_descriptor();
template<typename T>
inline const std::string& CaretAffinity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CaretAffinity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CaretAffinity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CaretAffinity_descriptor(), enum_t_value);
}
inline bool CaretAffinity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CaretAffinity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CaretAffinity>(
    CaretAffinity_descriptor(), name, value);
}
enum WritingDirectionType : int {
  kWritingDirectionNatural = -1,
  kWritingDirectionLeftToRight = 0,
  kWritingDirectionRightToLeft = 1
};
bool WritingDirectionType_IsValid(int value);
constexpr WritingDirectionType WritingDirectionType_MIN = kWritingDirectionNatural;
constexpr WritingDirectionType WritingDirectionType_MAX = kWritingDirectionRightToLeft;
constexpr int WritingDirectionType_ARRAYSIZE = WritingDirectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WritingDirectionType_descriptor();
template<typename T>
inline const std::string& WritingDirectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WritingDirectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WritingDirectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WritingDirectionType_descriptor(), enum_t_value);
}
inline bool WritingDirectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WritingDirectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WritingDirectionType>(
    WritingDirectionType_descriptor(), name, value);
}
// ===================================================================

class SelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.SelectionArchive) */ {
 public:
  inline SelectionArchive() : SelectionArchive(nullptr) {}
  ~SelectionArchive() override;
  explicit constexpr SelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionArchive(const SelectionArchive& from);
  SelectionArchive(SelectionArchive&& from) noexcept
    : SelectionArchive() {
    *this = ::std::move(from);
  }

  inline SelectionArchive& operator=(const SelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionArchive& operator=(SelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectionArchive* internal_default_instance() {
    return reinterpret_cast<const SelectionArchive*>(
               &_SelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SelectionArchive& a, SelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectionArchive* New() const final {
    return CreateMaybeMessage<SelectionArchive>(nullptr);
  }

  SelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectionArchive& from);
  void MergeFrom(const SelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.SelectionArchive";
  }
  protected:
  explicit SelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 2,
    kSmartFieldRangeFieldNumber = 5,
    kTypeFieldNumber = 1,
    kStyleInsertionBehaviorFieldNumber = 3,
    kCaretAffinityFieldNumber = 4,
  };
  // required .TSP.Range range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // required .TSP.Range smart_field_range = 5;
  bool has_smart_field_range() const;
  private:
  bool _internal_has_smart_field_range() const;
  public:
  void clear_smart_field_range();
  const ::TSP::Range& smart_field_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_smart_field_range();
  ::TSP::Range* mutable_smart_field_range();
  void set_allocated_smart_field_range(::TSP::Range* smart_field_range);
  private:
  const ::TSP::Range& _internal_smart_field_range() const;
  ::TSP::Range* _internal_mutable_smart_field_range();
  public:
  void unsafe_arena_set_allocated_smart_field_range(
      ::TSP::Range* smart_field_range);
  ::TSP::Range* unsafe_arena_release_smart_field_range();

  // required .TSWP.SelectionType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSWP::SelectionType type() const;
  void set_type(::TSWP::SelectionType value);
  private:
  ::TSWP::SelectionType _internal_type() const;
  void _internal_set_type(::TSWP::SelectionType value);
  public:

  // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
  bool has_styleinsertionbehavior() const;
  private:
  bool _internal_has_styleinsertionbehavior() const;
  public:
  void clear_styleinsertionbehavior();
  ::TSWP::StyleInsertionBehavior styleinsertionbehavior() const;
  void set_styleinsertionbehavior(::TSWP::StyleInsertionBehavior value);
  private:
  ::TSWP::StyleInsertionBehavior _internal_styleinsertionbehavior() const;
  void _internal_set_styleinsertionbehavior(::TSWP::StyleInsertionBehavior value);
  public:

  // required .TSWP.CaretAffinity caretAffinity = 4;
  bool has_caretaffinity() const;
  private:
  bool _internal_has_caretaffinity() const;
  public:
  void clear_caretaffinity();
  ::TSWP::CaretAffinity caretaffinity() const;
  void set_caretaffinity(::TSWP::CaretAffinity value);
  private:
  ::TSWP::CaretAffinity _internal_caretaffinity() const;
  void _internal_set_caretaffinity(::TSWP::CaretAffinity value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.SelectionArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Range* range_;
  ::TSP::Range* smart_field_range_;
  int type_;
  int styleinsertionbehavior_;
  int caretaffinity_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ObjectAttributeTable_ObjectAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ObjectAttributeTable.ObjectAttribute) */ {
 public:
  inline ObjectAttributeTable_ObjectAttribute() : ObjectAttributeTable_ObjectAttribute(nullptr) {}
  ~ObjectAttributeTable_ObjectAttribute() override;
  explicit constexpr ObjectAttributeTable_ObjectAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectAttributeTable_ObjectAttribute(const ObjectAttributeTable_ObjectAttribute& from);
  ObjectAttributeTable_ObjectAttribute(ObjectAttributeTable_ObjectAttribute&& from) noexcept
    : ObjectAttributeTable_ObjectAttribute() {
    *this = ::std::move(from);
  }

  inline ObjectAttributeTable_ObjectAttribute& operator=(const ObjectAttributeTable_ObjectAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectAttributeTable_ObjectAttribute& operator=(ObjectAttributeTable_ObjectAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectAttributeTable_ObjectAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectAttributeTable_ObjectAttribute* internal_default_instance() {
    return reinterpret_cast<const ObjectAttributeTable_ObjectAttribute*>(
               &_ObjectAttributeTable_ObjectAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectAttributeTable_ObjectAttribute& a, ObjectAttributeTable_ObjectAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectAttributeTable_ObjectAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectAttributeTable_ObjectAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectAttributeTable_ObjectAttribute* New() const final {
    return CreateMaybeMessage<ObjectAttributeTable_ObjectAttribute>(nullptr);
  }

  ObjectAttributeTable_ObjectAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectAttributeTable_ObjectAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectAttributeTable_ObjectAttribute& from);
  void MergeFrom(const ObjectAttributeTable_ObjectAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectAttributeTable_ObjectAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ObjectAttributeTable.ObjectAttribute";
  }
  protected:
  explicit ObjectAttributeTable_ObjectAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 2,
    kCharacterIndexFieldNumber = 1,
  };
  // optional .TSP.Reference object = 2;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::TSP::Reference& object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_object();
  ::TSP::Reference* mutable_object();
  void set_allocated_object(::TSP::Reference* object);
  private:
  const ::TSP::Reference& _internal_object() const;
  ::TSP::Reference* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::TSP::Reference* object);
  ::TSP::Reference* unsafe_arena_release_object();

  // required uint32 character_index = 1;
  bool has_character_index() const;
  private:
  bool _internal_has_character_index() const;
  public:
  void clear_character_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 character_index() const;
  void set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character_index() const;
  void _internal_set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ObjectAttributeTable.ObjectAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_index_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ObjectAttributeTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ObjectAttributeTable) */ {
 public:
  inline ObjectAttributeTable() : ObjectAttributeTable(nullptr) {}
  ~ObjectAttributeTable() override;
  explicit constexpr ObjectAttributeTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectAttributeTable(const ObjectAttributeTable& from);
  ObjectAttributeTable(ObjectAttributeTable&& from) noexcept
    : ObjectAttributeTable() {
    *this = ::std::move(from);
  }

  inline ObjectAttributeTable& operator=(const ObjectAttributeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectAttributeTable& operator=(ObjectAttributeTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectAttributeTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectAttributeTable* internal_default_instance() {
    return reinterpret_cast<const ObjectAttributeTable*>(
               &_ObjectAttributeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectAttributeTable& a, ObjectAttributeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectAttributeTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectAttributeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectAttributeTable* New() const final {
    return CreateMaybeMessage<ObjectAttributeTable>(nullptr);
  }

  ObjectAttributeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectAttributeTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectAttributeTable& from);
  void MergeFrom(const ObjectAttributeTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectAttributeTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ObjectAttributeTable";
  }
  protected:
  explicit ObjectAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObjectAttributeTable_ObjectAttribute ObjectAttribute;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSWP::ObjectAttributeTable_ObjectAttribute* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectAttributeTable_ObjectAttribute >*
      mutable_entries();
  private:
  const ::TSWP::ObjectAttributeTable_ObjectAttribute& _internal_entries(int index) const;
  ::TSWP::ObjectAttributeTable_ObjectAttribute* _internal_add_entries();
  public:
  const ::TSWP::ObjectAttributeTable_ObjectAttribute& entries(int index) const;
  ::TSWP::ObjectAttributeTable_ObjectAttribute* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectAttributeTable_ObjectAttribute >&
      entries() const;

  // @@protoc_insertion_point(class_scope:TSWP.ObjectAttributeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectAttributeTable_ObjectAttribute > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class StringAttributeTable_StringAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StringAttributeTable.StringAttribute) */ {
 public:
  inline StringAttributeTable_StringAttribute() : StringAttributeTable_StringAttribute(nullptr) {}
  ~StringAttributeTable_StringAttribute() override;
  explicit constexpr StringAttributeTable_StringAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringAttributeTable_StringAttribute(const StringAttributeTable_StringAttribute& from);
  StringAttributeTable_StringAttribute(StringAttributeTable_StringAttribute&& from) noexcept
    : StringAttributeTable_StringAttribute() {
    *this = ::std::move(from);
  }

  inline StringAttributeTable_StringAttribute& operator=(const StringAttributeTable_StringAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringAttributeTable_StringAttribute& operator=(StringAttributeTable_StringAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringAttributeTable_StringAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringAttributeTable_StringAttribute* internal_default_instance() {
    return reinterpret_cast<const StringAttributeTable_StringAttribute*>(
               &_StringAttributeTable_StringAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StringAttributeTable_StringAttribute& a, StringAttributeTable_StringAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(StringAttributeTable_StringAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringAttributeTable_StringAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringAttributeTable_StringAttribute* New() const final {
    return CreateMaybeMessage<StringAttributeTable_StringAttribute>(nullptr);
  }

  StringAttributeTable_StringAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringAttributeTable_StringAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringAttributeTable_StringAttribute& from);
  void MergeFrom(const StringAttributeTable_StringAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringAttributeTable_StringAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StringAttributeTable.StringAttribute";
  }
  protected:
  explicit StringAttributeTable_StringAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 2,
    kCharacterIndexFieldNumber = 1,
  };
  // optional string object = 2;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const std::string& object() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object();
  std::string* release_object();
  void set_allocated_object(std::string* object);
  private:
  const std::string& _internal_object() const;
  void _internal_set_object(const std::string& value);
  std::string* _internal_mutable_object();
  public:

  // required uint32 character_index = 1;
  bool has_character_index() const;
  private:
  bool _internal_has_character_index() const;
  public:
  void clear_character_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 character_index() const;
  void set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character_index() const;
  void _internal_set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.StringAttributeTable.StringAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_index_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class StringAttributeTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StringAttributeTable) */ {
 public:
  inline StringAttributeTable() : StringAttributeTable(nullptr) {}
  ~StringAttributeTable() override;
  explicit constexpr StringAttributeTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringAttributeTable(const StringAttributeTable& from);
  StringAttributeTable(StringAttributeTable&& from) noexcept
    : StringAttributeTable() {
    *this = ::std::move(from);
  }

  inline StringAttributeTable& operator=(const StringAttributeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringAttributeTable& operator=(StringAttributeTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringAttributeTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringAttributeTable* internal_default_instance() {
    return reinterpret_cast<const StringAttributeTable*>(
               &_StringAttributeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringAttributeTable& a, StringAttributeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(StringAttributeTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringAttributeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringAttributeTable* New() const final {
    return CreateMaybeMessage<StringAttributeTable>(nullptr);
  }

  StringAttributeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringAttributeTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringAttributeTable& from);
  void MergeFrom(const StringAttributeTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringAttributeTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StringAttributeTable";
  }
  protected:
  explicit StringAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StringAttributeTable_StringAttribute StringAttribute;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSWP::StringAttributeTable_StringAttribute* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::StringAttributeTable_StringAttribute >*
      mutable_entries();
  private:
  const ::TSWP::StringAttributeTable_StringAttribute& _internal_entries(int index) const;
  ::TSWP::StringAttributeTable_StringAttribute* _internal_add_entries();
  public:
  const ::TSWP::StringAttributeTable_StringAttribute& entries(int index) const;
  ::TSWP::StringAttributeTable_StringAttribute* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::StringAttributeTable_StringAttribute >&
      entries() const;

  // @@protoc_insertion_point(class_scope:TSWP.StringAttributeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::StringAttributeTable_StringAttribute > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ParaDataAttributeTable_ParaDataAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ParaDataAttributeTable.ParaDataAttribute) */ {
 public:
  inline ParaDataAttributeTable_ParaDataAttribute() : ParaDataAttributeTable_ParaDataAttribute(nullptr) {}
  ~ParaDataAttributeTable_ParaDataAttribute() override;
  explicit constexpr ParaDataAttributeTable_ParaDataAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParaDataAttributeTable_ParaDataAttribute(const ParaDataAttributeTable_ParaDataAttribute& from);
  ParaDataAttributeTable_ParaDataAttribute(ParaDataAttributeTable_ParaDataAttribute&& from) noexcept
    : ParaDataAttributeTable_ParaDataAttribute() {
    *this = ::std::move(from);
  }

  inline ParaDataAttributeTable_ParaDataAttribute& operator=(const ParaDataAttributeTable_ParaDataAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParaDataAttributeTable_ParaDataAttribute& operator=(ParaDataAttributeTable_ParaDataAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParaDataAttributeTable_ParaDataAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParaDataAttributeTable_ParaDataAttribute* internal_default_instance() {
    return reinterpret_cast<const ParaDataAttributeTable_ParaDataAttribute*>(
               &_ParaDataAttributeTable_ParaDataAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ParaDataAttributeTable_ParaDataAttribute& a, ParaDataAttributeTable_ParaDataAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(ParaDataAttributeTable_ParaDataAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParaDataAttributeTable_ParaDataAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParaDataAttributeTable_ParaDataAttribute* New() const final {
    return CreateMaybeMessage<ParaDataAttributeTable_ParaDataAttribute>(nullptr);
  }

  ParaDataAttributeTable_ParaDataAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParaDataAttributeTable_ParaDataAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParaDataAttributeTable_ParaDataAttribute& from);
  void MergeFrom(const ParaDataAttributeTable_ParaDataAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParaDataAttributeTable_ParaDataAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ParaDataAttributeTable.ParaDataAttribute";
  }
  protected:
  explicit ParaDataAttributeTable_ParaDataAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIndexFieldNumber = 1,
    kFirstFieldNumber = 2,
    kSecondFieldNumber = 3,
  };
  // required uint32 character_index = 1;
  bool has_character_index() const;
  private:
  bool _internal_has_character_index() const;
  public:
  void clear_character_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 character_index() const;
  void set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character_index() const;
  void _internal_set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 first = 2;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  ::PROTOBUF_NAMESPACE_ID::uint32 first() const;
  void set_first(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first() const;
  void _internal_set_first(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 second = 3;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::uint32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ParaDataAttributeTable.ParaDataAttribute)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_;
  ::PROTOBUF_NAMESPACE_ID::uint32 second_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ParaDataAttributeTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ParaDataAttributeTable) */ {
 public:
  inline ParaDataAttributeTable() : ParaDataAttributeTable(nullptr) {}
  ~ParaDataAttributeTable() override;
  explicit constexpr ParaDataAttributeTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParaDataAttributeTable(const ParaDataAttributeTable& from);
  ParaDataAttributeTable(ParaDataAttributeTable&& from) noexcept
    : ParaDataAttributeTable() {
    *this = ::std::move(from);
  }

  inline ParaDataAttributeTable& operator=(const ParaDataAttributeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParaDataAttributeTable& operator=(ParaDataAttributeTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParaDataAttributeTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParaDataAttributeTable* internal_default_instance() {
    return reinterpret_cast<const ParaDataAttributeTable*>(
               &_ParaDataAttributeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ParaDataAttributeTable& a, ParaDataAttributeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ParaDataAttributeTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParaDataAttributeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParaDataAttributeTable* New() const final {
    return CreateMaybeMessage<ParaDataAttributeTable>(nullptr);
  }

  ParaDataAttributeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParaDataAttributeTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParaDataAttributeTable& from);
  void MergeFrom(const ParaDataAttributeTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParaDataAttributeTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ParaDataAttributeTable";
  }
  protected:
  explicit ParaDataAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParaDataAttributeTable_ParaDataAttribute ParaDataAttribute;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSWP::ParaDataAttributeTable_ParaDataAttribute* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ParaDataAttributeTable_ParaDataAttribute >*
      mutable_entries();
  private:
  const ::TSWP::ParaDataAttributeTable_ParaDataAttribute& _internal_entries(int index) const;
  ::TSWP::ParaDataAttributeTable_ParaDataAttribute* _internal_add_entries();
  public:
  const ::TSWP::ParaDataAttributeTable_ParaDataAttribute& entries(int index) const;
  ::TSWP::ParaDataAttributeTable_ParaDataAttribute* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ParaDataAttributeTable_ParaDataAttribute >&
      entries() const;

  // @@protoc_insertion_point(class_scope:TSWP.ParaDataAttributeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ParaDataAttributeTable_ParaDataAttribute > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class OverlappingFieldAttributeTable_OverlappingFieldAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute) */ {
 public:
  inline OverlappingFieldAttributeTable_OverlappingFieldAttribute() : OverlappingFieldAttributeTable_OverlappingFieldAttribute(nullptr) {}
  ~OverlappingFieldAttributeTable_OverlappingFieldAttribute() override;
  explicit constexpr OverlappingFieldAttributeTable_OverlappingFieldAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OverlappingFieldAttributeTable_OverlappingFieldAttribute(const OverlappingFieldAttributeTable_OverlappingFieldAttribute& from);
  OverlappingFieldAttributeTable_OverlappingFieldAttribute(OverlappingFieldAttributeTable_OverlappingFieldAttribute&& from) noexcept
    : OverlappingFieldAttributeTable_OverlappingFieldAttribute() {
    *this = ::std::move(from);
  }

  inline OverlappingFieldAttributeTable_OverlappingFieldAttribute& operator=(const OverlappingFieldAttributeTable_OverlappingFieldAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlappingFieldAttributeTable_OverlappingFieldAttribute& operator=(OverlappingFieldAttributeTable_OverlappingFieldAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverlappingFieldAttributeTable_OverlappingFieldAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const OverlappingFieldAttributeTable_OverlappingFieldAttribute* internal_default_instance() {
    return reinterpret_cast<const OverlappingFieldAttributeTable_OverlappingFieldAttribute*>(
               &_OverlappingFieldAttributeTable_OverlappingFieldAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OverlappingFieldAttributeTable_OverlappingFieldAttribute& a, OverlappingFieldAttributeTable_OverlappingFieldAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlappingFieldAttributeTable_OverlappingFieldAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlappingFieldAttributeTable_OverlappingFieldAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OverlappingFieldAttributeTable_OverlappingFieldAttribute* New() const final {
    return CreateMaybeMessage<OverlappingFieldAttributeTable_OverlappingFieldAttribute>(nullptr);
  }

  OverlappingFieldAttributeTable_OverlappingFieldAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OverlappingFieldAttributeTable_OverlappingFieldAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OverlappingFieldAttributeTable_OverlappingFieldAttribute& from);
  void MergeFrom(const OverlappingFieldAttributeTable_OverlappingFieldAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverlappingFieldAttributeTable_OverlappingFieldAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute";
  }
  protected:
  explicit OverlappingFieldAttributeTable_OverlappingFieldAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
    kFieldFieldNumber = 2,
  };
  // required .TSP.Range range = 1;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // required .TSP.Reference field = 2;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::TSP::Reference& field() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_field();
  ::TSP::Reference* mutable_field();
  void set_allocated_field(::TSP::Reference* field);
  private:
  const ::TSP::Reference& _internal_field() const;
  ::TSP::Reference* _internal_mutable_field();
  public:
  void unsafe_arena_set_allocated_field(
      ::TSP::Reference* field);
  ::TSP::Reference* unsafe_arena_release_field();

  // @@protoc_insertion_point(class_scope:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Range* range_;
  ::TSP::Reference* field_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class OverlappingFieldAttributeTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.OverlappingFieldAttributeTable) */ {
 public:
  inline OverlappingFieldAttributeTable() : OverlappingFieldAttributeTable(nullptr) {}
  ~OverlappingFieldAttributeTable() override;
  explicit constexpr OverlappingFieldAttributeTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OverlappingFieldAttributeTable(const OverlappingFieldAttributeTable& from);
  OverlappingFieldAttributeTable(OverlappingFieldAttributeTable&& from) noexcept
    : OverlappingFieldAttributeTable() {
    *this = ::std::move(from);
  }

  inline OverlappingFieldAttributeTable& operator=(const OverlappingFieldAttributeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlappingFieldAttributeTable& operator=(OverlappingFieldAttributeTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverlappingFieldAttributeTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const OverlappingFieldAttributeTable* internal_default_instance() {
    return reinterpret_cast<const OverlappingFieldAttributeTable*>(
               &_OverlappingFieldAttributeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OverlappingFieldAttributeTable& a, OverlappingFieldAttributeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlappingFieldAttributeTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlappingFieldAttributeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OverlappingFieldAttributeTable* New() const final {
    return CreateMaybeMessage<OverlappingFieldAttributeTable>(nullptr);
  }

  OverlappingFieldAttributeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OverlappingFieldAttributeTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OverlappingFieldAttributeTable& from);
  void MergeFrom(const OverlappingFieldAttributeTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverlappingFieldAttributeTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.OverlappingFieldAttributeTable";
  }
  protected:
  explicit OverlappingFieldAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OverlappingFieldAttributeTable_OverlappingFieldAttribute OverlappingFieldAttribute;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute >*
      mutable_entries();
  private:
  const ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute& _internal_entries(int index) const;
  ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute* _internal_add_entries();
  public:
  const ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute& entries(int index) const;
  ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute >&
      entries() const;

  // @@protoc_insertion_point(class_scope:TSWP.OverlappingFieldAttributeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class StorageArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StorageArchive) */ {
 public:
  inline StorageArchive() : StorageArchive(nullptr) {}
  ~StorageArchive() override;
  explicit constexpr StorageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageArchive(const StorageArchive& from);
  StorageArchive(StorageArchive&& from) noexcept
    : StorageArchive() {
    *this = ::std::move(from);
  }

  inline StorageArchive& operator=(const StorageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageArchive& operator=(StorageArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageArchive* internal_default_instance() {
    return reinterpret_cast<const StorageArchive*>(
               &_StorageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StorageArchive& a, StorageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageArchive* New() const final {
    return CreateMaybeMessage<StorageArchive>(nullptr);
  }

  StorageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageArchive& from);
  void MergeFrom(const StorageArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StorageArchive";
  }
  protected:
  explicit StorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StorageArchive_KindType KindType;
  static constexpr KindType BODY =
    StorageArchive_KindType_BODY;
  static constexpr KindType HEADER =
    StorageArchive_KindType_HEADER;
  static constexpr KindType FOOTNOTE =
    StorageArchive_KindType_FOOTNOTE;
  static constexpr KindType TEXTBOX =
    StorageArchive_KindType_TEXTBOX;
  static constexpr KindType NOTE =
    StorageArchive_KindType_NOTE;
  static constexpr KindType CELL =
    StorageArchive_KindType_CELL;
  static constexpr KindType UNCLASSIFIED =
    StorageArchive_KindType_UNCLASSIFIED;
  static constexpr KindType TABLEOFCONTENTS =
    StorageArchive_KindType_TABLEOFCONTENTS;
  static inline bool KindType_IsValid(int value) {
    return StorageArchive_KindType_IsValid(value);
  }
  static constexpr KindType KindType_MIN =
    StorageArchive_KindType_KindType_MIN;
  static constexpr KindType KindType_MAX =
    StorageArchive_KindType_KindType_MAX;
  static constexpr int KindType_ARRAYSIZE =
    StorageArchive_KindType_KindType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KindType_descriptor() {
    return StorageArchive_KindType_descriptor();
  }
  template<typename T>
  static inline const std::string& KindType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KindType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KindType_Name.");
    return StorageArchive_KindType_Name(enum_t_value);
  }
  static inline bool KindType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KindType* value) {
    return StorageArchive_KindType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 3,
    kStyleSheetFieldNumber = 2,
    kTableParaStyleFieldNumber = 5,
    kTableParaDataFieldNumber = 6,
    kTableListStyleFieldNumber = 7,
    kTableCharStyleFieldNumber = 8,
    kTableAttachmentFieldNumber = 9,
    kTableSmartfieldFieldNumber = 11,
    kTableLayoutStyleFieldNumber = 12,
    kTableParaStartsFieldNumber = 14,
    kTableBookmarkFieldNumber = 15,
    kTableFootnoteFieldNumber = 16,
    kTableSectionFieldNumber = 17,
    kTableRubyfieldFieldNumber = 18,
    kTableLanguageFieldNumber = 19,
    kTableDictationFieldNumber = 20,
    kTableInsertionFieldNumber = 21,
    kTableDeletionFieldNumber = 22,
    kTableHighlightFieldNumber = 23,
    kTableParaBidiFieldNumber = 24,
    kTableOverlappingHighlightFieldNumber = 25,
    kTablePencilAnnotationFieldNumber = 26,
    kTableTatechuyokoFieldNumber = 27,
    kTableDropCapStyleFieldNumber = 28,
    kHasItextFieldNumber = 4,
    kInDocumentFieldNumber = 10,
    kKindFieldNumber = 1,
  };
  // repeated string text = 3;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // optional .TSP.Reference style_sheet = 2;
  bool has_style_sheet() const;
  private:
  bool _internal_has_style_sheet() const;
  public:
  void clear_style_sheet();
  const ::TSP::Reference& style_sheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style_sheet();
  ::TSP::Reference* mutable_style_sheet();
  void set_allocated_style_sheet(::TSP::Reference* style_sheet);
  private:
  const ::TSP::Reference& _internal_style_sheet() const;
  ::TSP::Reference* _internal_mutable_style_sheet();
  public:
  void unsafe_arena_set_allocated_style_sheet(
      ::TSP::Reference* style_sheet);
  ::TSP::Reference* unsafe_arena_release_style_sheet();

  // optional .TSWP.ObjectAttributeTable table_para_style = 5;
  bool has_table_para_style() const;
  private:
  bool _internal_has_table_para_style() const;
  public:
  void clear_table_para_style();
  const ::TSWP::ObjectAttributeTable& table_para_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_para_style();
  ::TSWP::ObjectAttributeTable* mutable_table_para_style();
  void set_allocated_table_para_style(::TSWP::ObjectAttributeTable* table_para_style);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_para_style() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_para_style();
  public:
  void unsafe_arena_set_allocated_table_para_style(
      ::TSWP::ObjectAttributeTable* table_para_style);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_para_style();

  // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
  bool has_table_para_data() const;
  private:
  bool _internal_has_table_para_data() const;
  public:
  void clear_table_para_data();
  const ::TSWP::ParaDataAttributeTable& table_para_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ParaDataAttributeTable* release_table_para_data();
  ::TSWP::ParaDataAttributeTable* mutable_table_para_data();
  void set_allocated_table_para_data(::TSWP::ParaDataAttributeTable* table_para_data);
  private:
  const ::TSWP::ParaDataAttributeTable& _internal_table_para_data() const;
  ::TSWP::ParaDataAttributeTable* _internal_mutable_table_para_data();
  public:
  void unsafe_arena_set_allocated_table_para_data(
      ::TSWP::ParaDataAttributeTable* table_para_data);
  ::TSWP::ParaDataAttributeTable* unsafe_arena_release_table_para_data();

  // optional .TSWP.ObjectAttributeTable table_list_style = 7;
  bool has_table_list_style() const;
  private:
  bool _internal_has_table_list_style() const;
  public:
  void clear_table_list_style();
  const ::TSWP::ObjectAttributeTable& table_list_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_list_style();
  ::TSWP::ObjectAttributeTable* mutable_table_list_style();
  void set_allocated_table_list_style(::TSWP::ObjectAttributeTable* table_list_style);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_list_style() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_list_style();
  public:
  void unsafe_arena_set_allocated_table_list_style(
      ::TSWP::ObjectAttributeTable* table_list_style);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_list_style();

  // optional .TSWP.ObjectAttributeTable table_char_style = 8;
  bool has_table_char_style() const;
  private:
  bool _internal_has_table_char_style() const;
  public:
  void clear_table_char_style();
  const ::TSWP::ObjectAttributeTable& table_char_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_char_style();
  ::TSWP::ObjectAttributeTable* mutable_table_char_style();
  void set_allocated_table_char_style(::TSWP::ObjectAttributeTable* table_char_style);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_char_style() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_char_style();
  public:
  void unsafe_arena_set_allocated_table_char_style(
      ::TSWP::ObjectAttributeTable* table_char_style);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_char_style();

  // optional .TSWP.ObjectAttributeTable table_attachment = 9;
  bool has_table_attachment() const;
  private:
  bool _internal_has_table_attachment() const;
  public:
  void clear_table_attachment();
  const ::TSWP::ObjectAttributeTable& table_attachment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_attachment();
  ::TSWP::ObjectAttributeTable* mutable_table_attachment();
  void set_allocated_table_attachment(::TSWP::ObjectAttributeTable* table_attachment);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_attachment() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_attachment();
  public:
  void unsafe_arena_set_allocated_table_attachment(
      ::TSWP::ObjectAttributeTable* table_attachment);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_attachment();

  // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
  bool has_table_smartfield() const;
  private:
  bool _internal_has_table_smartfield() const;
  public:
  void clear_table_smartfield();
  const ::TSWP::ObjectAttributeTable& table_smartfield() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_smartfield();
  ::TSWP::ObjectAttributeTable* mutable_table_smartfield();
  void set_allocated_table_smartfield(::TSWP::ObjectAttributeTable* table_smartfield);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_smartfield() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_smartfield();
  public:
  void unsafe_arena_set_allocated_table_smartfield(
      ::TSWP::ObjectAttributeTable* table_smartfield);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_smartfield();

  // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
  bool has_table_layout_style() const;
  private:
  bool _internal_has_table_layout_style() const;
  public:
  void clear_table_layout_style();
  const ::TSWP::ObjectAttributeTable& table_layout_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_layout_style();
  ::TSWP::ObjectAttributeTable* mutable_table_layout_style();
  void set_allocated_table_layout_style(::TSWP::ObjectAttributeTable* table_layout_style);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_layout_style() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_layout_style();
  public:
  void unsafe_arena_set_allocated_table_layout_style(
      ::TSWP::ObjectAttributeTable* table_layout_style);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_layout_style();

  // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
  bool has_table_para_starts() const;
  private:
  bool _internal_has_table_para_starts() const;
  public:
  void clear_table_para_starts();
  const ::TSWP::ParaDataAttributeTable& table_para_starts() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ParaDataAttributeTable* release_table_para_starts();
  ::TSWP::ParaDataAttributeTable* mutable_table_para_starts();
  void set_allocated_table_para_starts(::TSWP::ParaDataAttributeTable* table_para_starts);
  private:
  const ::TSWP::ParaDataAttributeTable& _internal_table_para_starts() const;
  ::TSWP::ParaDataAttributeTable* _internal_mutable_table_para_starts();
  public:
  void unsafe_arena_set_allocated_table_para_starts(
      ::TSWP::ParaDataAttributeTable* table_para_starts);
  ::TSWP::ParaDataAttributeTable* unsafe_arena_release_table_para_starts();

  // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
  bool has_table_bookmark() const;
  private:
  bool _internal_has_table_bookmark() const;
  public:
  void clear_table_bookmark();
  const ::TSWP::ObjectAttributeTable& table_bookmark() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_bookmark();
  ::TSWP::ObjectAttributeTable* mutable_table_bookmark();
  void set_allocated_table_bookmark(::TSWP::ObjectAttributeTable* table_bookmark);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_bookmark() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_bookmark();
  public:
  void unsafe_arena_set_allocated_table_bookmark(
      ::TSWP::ObjectAttributeTable* table_bookmark);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_bookmark();

  // optional .TSWP.ObjectAttributeTable table_footnote = 16;
  bool has_table_footnote() const;
  private:
  bool _internal_has_table_footnote() const;
  public:
  void clear_table_footnote();
  const ::TSWP::ObjectAttributeTable& table_footnote() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_footnote();
  ::TSWP::ObjectAttributeTable* mutable_table_footnote();
  void set_allocated_table_footnote(::TSWP::ObjectAttributeTable* table_footnote);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_footnote() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_footnote();
  public:
  void unsafe_arena_set_allocated_table_footnote(
      ::TSWP::ObjectAttributeTable* table_footnote);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_footnote();

  // optional .TSWP.ObjectAttributeTable table_section = 17;
  bool has_table_section() const;
  private:
  bool _internal_has_table_section() const;
  public:
  void clear_table_section();
  const ::TSWP::ObjectAttributeTable& table_section() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_section();
  ::TSWP::ObjectAttributeTable* mutable_table_section();
  void set_allocated_table_section(::TSWP::ObjectAttributeTable* table_section);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_section() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_section();
  public:
  void unsafe_arena_set_allocated_table_section(
      ::TSWP::ObjectAttributeTable* table_section);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_section();

  // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
  bool has_table_rubyfield() const;
  private:
  bool _internal_has_table_rubyfield() const;
  public:
  void clear_table_rubyfield();
  const ::TSWP::ObjectAttributeTable& table_rubyfield() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_rubyfield();
  ::TSWP::ObjectAttributeTable* mutable_table_rubyfield();
  void set_allocated_table_rubyfield(::TSWP::ObjectAttributeTable* table_rubyfield);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_rubyfield() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_rubyfield();
  public:
  void unsafe_arena_set_allocated_table_rubyfield(
      ::TSWP::ObjectAttributeTable* table_rubyfield);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_rubyfield();

  // optional .TSWP.StringAttributeTable table_language = 19;
  bool has_table_language() const;
  private:
  bool _internal_has_table_language() const;
  public:
  void clear_table_language();
  const ::TSWP::StringAttributeTable& table_language() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::StringAttributeTable* release_table_language();
  ::TSWP::StringAttributeTable* mutable_table_language();
  void set_allocated_table_language(::TSWP::StringAttributeTable* table_language);
  private:
  const ::TSWP::StringAttributeTable& _internal_table_language() const;
  ::TSWP::StringAttributeTable* _internal_mutable_table_language();
  public:
  void unsafe_arena_set_allocated_table_language(
      ::TSWP::StringAttributeTable* table_language);
  ::TSWP::StringAttributeTable* unsafe_arena_release_table_language();

  // optional .TSWP.StringAttributeTable table_dictation = 20;
  bool has_table_dictation() const;
  private:
  bool _internal_has_table_dictation() const;
  public:
  void clear_table_dictation();
  const ::TSWP::StringAttributeTable& table_dictation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::StringAttributeTable* release_table_dictation();
  ::TSWP::StringAttributeTable* mutable_table_dictation();
  void set_allocated_table_dictation(::TSWP::StringAttributeTable* table_dictation);
  private:
  const ::TSWP::StringAttributeTable& _internal_table_dictation() const;
  ::TSWP::StringAttributeTable* _internal_mutable_table_dictation();
  public:
  void unsafe_arena_set_allocated_table_dictation(
      ::TSWP::StringAttributeTable* table_dictation);
  ::TSWP::StringAttributeTable* unsafe_arena_release_table_dictation();

  // optional .TSWP.ObjectAttributeTable table_insertion = 21;
  bool has_table_insertion() const;
  private:
  bool _internal_has_table_insertion() const;
  public:
  void clear_table_insertion();
  const ::TSWP::ObjectAttributeTable& table_insertion() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_insertion();
  ::TSWP::ObjectAttributeTable* mutable_table_insertion();
  void set_allocated_table_insertion(::TSWP::ObjectAttributeTable* table_insertion);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_insertion() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_insertion();
  public:
  void unsafe_arena_set_allocated_table_insertion(
      ::TSWP::ObjectAttributeTable* table_insertion);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_insertion();

  // optional .TSWP.ObjectAttributeTable table_deletion = 22;
  bool has_table_deletion() const;
  private:
  bool _internal_has_table_deletion() const;
  public:
  void clear_table_deletion();
  const ::TSWP::ObjectAttributeTable& table_deletion() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_deletion();
  ::TSWP::ObjectAttributeTable* mutable_table_deletion();
  void set_allocated_table_deletion(::TSWP::ObjectAttributeTable* table_deletion);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_deletion() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_deletion();
  public:
  void unsafe_arena_set_allocated_table_deletion(
      ::TSWP::ObjectAttributeTable* table_deletion);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_deletion();

  // optional .TSWP.ObjectAttributeTable table_highlight = 23;
  bool has_table_highlight() const;
  private:
  bool _internal_has_table_highlight() const;
  public:
  void clear_table_highlight();
  const ::TSWP::ObjectAttributeTable& table_highlight() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_highlight();
  ::TSWP::ObjectAttributeTable* mutable_table_highlight();
  void set_allocated_table_highlight(::TSWP::ObjectAttributeTable* table_highlight);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_highlight() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_highlight();
  public:
  void unsafe_arena_set_allocated_table_highlight(
      ::TSWP::ObjectAttributeTable* table_highlight);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_highlight();

  // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
  bool has_table_para_bidi() const;
  private:
  bool _internal_has_table_para_bidi() const;
  public:
  void clear_table_para_bidi();
  const ::TSWP::ParaDataAttributeTable& table_para_bidi() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ParaDataAttributeTable* release_table_para_bidi();
  ::TSWP::ParaDataAttributeTable* mutable_table_para_bidi();
  void set_allocated_table_para_bidi(::TSWP::ParaDataAttributeTable* table_para_bidi);
  private:
  const ::TSWP::ParaDataAttributeTable& _internal_table_para_bidi() const;
  ::TSWP::ParaDataAttributeTable* _internal_mutable_table_para_bidi();
  public:
  void unsafe_arena_set_allocated_table_para_bidi(
      ::TSWP::ParaDataAttributeTable* table_para_bidi);
  ::TSWP::ParaDataAttributeTable* unsafe_arena_release_table_para_bidi();

  // optional .TSWP.OverlappingFieldAttributeTable table_overlapping_highlight = 25;
  bool has_table_overlapping_highlight() const;
  private:
  bool _internal_has_table_overlapping_highlight() const;
  public:
  void clear_table_overlapping_highlight();
  const ::TSWP::OverlappingFieldAttributeTable& table_overlapping_highlight() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::OverlappingFieldAttributeTable* release_table_overlapping_highlight();
  ::TSWP::OverlappingFieldAttributeTable* mutable_table_overlapping_highlight();
  void set_allocated_table_overlapping_highlight(::TSWP::OverlappingFieldAttributeTable* table_overlapping_highlight);
  private:
  const ::TSWP::OverlappingFieldAttributeTable& _internal_table_overlapping_highlight() const;
  ::TSWP::OverlappingFieldAttributeTable* _internal_mutable_table_overlapping_highlight();
  public:
  void unsafe_arena_set_allocated_table_overlapping_highlight(
      ::TSWP::OverlappingFieldAttributeTable* table_overlapping_highlight);
  ::TSWP::OverlappingFieldAttributeTable* unsafe_arena_release_table_overlapping_highlight();

  // optional .TSWP.OverlappingFieldAttributeTable table_pencil_annotation = 26;
  bool has_table_pencil_annotation() const;
  private:
  bool _internal_has_table_pencil_annotation() const;
  public:
  void clear_table_pencil_annotation();
  const ::TSWP::OverlappingFieldAttributeTable& table_pencil_annotation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::OverlappingFieldAttributeTable* release_table_pencil_annotation();
  ::TSWP::OverlappingFieldAttributeTable* mutable_table_pencil_annotation();
  void set_allocated_table_pencil_annotation(::TSWP::OverlappingFieldAttributeTable* table_pencil_annotation);
  private:
  const ::TSWP::OverlappingFieldAttributeTable& _internal_table_pencil_annotation() const;
  ::TSWP::OverlappingFieldAttributeTable* _internal_mutable_table_pencil_annotation();
  public:
  void unsafe_arena_set_allocated_table_pencil_annotation(
      ::TSWP::OverlappingFieldAttributeTable* table_pencil_annotation);
  ::TSWP::OverlappingFieldAttributeTable* unsafe_arena_release_table_pencil_annotation();

  // optional .TSWP.ObjectAttributeTable table_tatechuyoko = 27;
  bool has_table_tatechuyoko() const;
  private:
  bool _internal_has_table_tatechuyoko() const;
  public:
  void clear_table_tatechuyoko();
  const ::TSWP::ObjectAttributeTable& table_tatechuyoko() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_tatechuyoko();
  ::TSWP::ObjectAttributeTable* mutable_table_tatechuyoko();
  void set_allocated_table_tatechuyoko(::TSWP::ObjectAttributeTable* table_tatechuyoko);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_tatechuyoko() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_tatechuyoko();
  public:
  void unsafe_arena_set_allocated_table_tatechuyoko(
      ::TSWP::ObjectAttributeTable* table_tatechuyoko);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_tatechuyoko();

  // optional .TSWP.ObjectAttributeTable table_drop_cap_style = 28;
  bool has_table_drop_cap_style() const;
  private:
  bool _internal_has_table_drop_cap_style() const;
  public:
  void clear_table_drop_cap_style();
  const ::TSWP::ObjectAttributeTable& table_drop_cap_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ObjectAttributeTable* release_table_drop_cap_style();
  ::TSWP::ObjectAttributeTable* mutable_table_drop_cap_style();
  void set_allocated_table_drop_cap_style(::TSWP::ObjectAttributeTable* table_drop_cap_style);
  private:
  const ::TSWP::ObjectAttributeTable& _internal_table_drop_cap_style() const;
  ::TSWP::ObjectAttributeTable* _internal_mutable_table_drop_cap_style();
  public:
  void unsafe_arena_set_allocated_table_drop_cap_style(
      ::TSWP::ObjectAttributeTable* table_drop_cap_style);
  ::TSWP::ObjectAttributeTable* unsafe_arena_release_table_drop_cap_style();

  // optional bool has_itext = 4 [default = false];
  bool has_has_itext() const;
  private:
  bool _internal_has_has_itext() const;
  public:
  void clear_has_itext();
  bool has_itext() const;
  void set_has_itext(bool value);
  private:
  bool _internal_has_itext() const;
  void _internal_set_has_itext(bool value);
  public:

  // optional bool in_document = 10 [default = false];
  bool has_in_document() const;
  private:
  bool _internal_has_in_document() const;
  public:
  void clear_in_document();
  bool in_document() const;
  void set_in_document(bool value);
  private:
  bool _internal_in_document() const;
  void _internal_set_in_document(bool value);
  public:

  // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::TSWP::StorageArchive_KindType kind() const;
  void set_kind(::TSWP::StorageArchive_KindType value);
  private:
  ::TSWP::StorageArchive_KindType _internal_kind() const;
  void _internal_set_kind(::TSWP::StorageArchive_KindType value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.StorageArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
  ::TSP::Reference* style_sheet_;
  ::TSWP::ObjectAttributeTable* table_para_style_;
  ::TSWP::ParaDataAttributeTable* table_para_data_;
  ::TSWP::ObjectAttributeTable* table_list_style_;
  ::TSWP::ObjectAttributeTable* table_char_style_;
  ::TSWP::ObjectAttributeTable* table_attachment_;
  ::TSWP::ObjectAttributeTable* table_smartfield_;
  ::TSWP::ObjectAttributeTable* table_layout_style_;
  ::TSWP::ParaDataAttributeTable* table_para_starts_;
  ::TSWP::ObjectAttributeTable* table_bookmark_;
  ::TSWP::ObjectAttributeTable* table_footnote_;
  ::TSWP::ObjectAttributeTable* table_section_;
  ::TSWP::ObjectAttributeTable* table_rubyfield_;
  ::TSWP::StringAttributeTable* table_language_;
  ::TSWP::StringAttributeTable* table_dictation_;
  ::TSWP::ObjectAttributeTable* table_insertion_;
  ::TSWP::ObjectAttributeTable* table_deletion_;
  ::TSWP::ObjectAttributeTable* table_highlight_;
  ::TSWP::ParaDataAttributeTable* table_para_bidi_;
  ::TSWP::OverlappingFieldAttributeTable* table_overlapping_highlight_;
  ::TSWP::OverlappingFieldAttributeTable* table_pencil_annotation_;
  ::TSWP::ObjectAttributeTable* table_tatechuyoko_;
  ::TSWP::ObjectAttributeTable* table_drop_cap_style_;
  bool has_itext_;
  bool in_document_;
  int kind_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class HighlightArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.HighlightArchive) */ {
 public:
  inline HighlightArchive() : HighlightArchive(nullptr) {}
  ~HighlightArchive() override;
  explicit constexpr HighlightArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HighlightArchive(const HighlightArchive& from);
  HighlightArchive(HighlightArchive&& from) noexcept
    : HighlightArchive() {
    *this = ::std::move(from);
  }

  inline HighlightArchive& operator=(const HighlightArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HighlightArchive& operator=(HighlightArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HighlightArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HighlightArchive* internal_default_instance() {
    return reinterpret_cast<const HighlightArchive*>(
               &_HighlightArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HighlightArchive& a, HighlightArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HighlightArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HighlightArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HighlightArchive* New() const final {
    return CreateMaybeMessage<HighlightArchive>(nullptr);
  }

  HighlightArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HighlightArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HighlightArchive& from);
  void MergeFrom(const HighlightArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HighlightArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.HighlightArchive";
  }
  protected:
  explicit HighlightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextAttributeUuidStringFieldNumber = 2,
    kCommentStorageFieldNumber = 1,
  };
  // optional string text_attribute_uuid_string = 2;
  bool has_text_attribute_uuid_string() const;
  private:
  bool _internal_has_text_attribute_uuid_string() const;
  public:
  void clear_text_attribute_uuid_string();
  const std::string& text_attribute_uuid_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_attribute_uuid_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_attribute_uuid_string();
  std::string* release_text_attribute_uuid_string();
  void set_allocated_text_attribute_uuid_string(std::string* text_attribute_uuid_string);
  private:
  const std::string& _internal_text_attribute_uuid_string() const;
  void _internal_set_text_attribute_uuid_string(const std::string& value);
  std::string* _internal_mutable_text_attribute_uuid_string();
  public:

  // optional .TSP.Reference commentStorage = 1;
  bool has_commentstorage() const;
  private:
  bool _internal_has_commentstorage() const;
  public:
  void clear_commentstorage();
  const ::TSP::Reference& commentstorage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_commentstorage();
  ::TSP::Reference* mutable_commentstorage();
  void set_allocated_commentstorage(::TSP::Reference* commentstorage);
  private:
  const ::TSP::Reference& _internal_commentstorage() const;
  ::TSP::Reference* _internal_mutable_commentstorage();
  public:
  void unsafe_arena_set_allocated_commentstorage(
      ::TSP::Reference* commentstorage);
  ::TSP::Reference* unsafe_arena_release_commentstorage();

  // @@protoc_insertion_point(class_scope:TSWP.HighlightArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_attribute_uuid_string_;
  ::TSP::Reference* commentstorage_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class PencilAnnotationArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.PencilAnnotationArchive) */ {
 public:
  inline PencilAnnotationArchive() : PencilAnnotationArchive(nullptr) {}
  ~PencilAnnotationArchive() override;
  explicit constexpr PencilAnnotationArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PencilAnnotationArchive(const PencilAnnotationArchive& from);
  PencilAnnotationArchive(PencilAnnotationArchive&& from) noexcept
    : PencilAnnotationArchive() {
    *this = ::std::move(from);
  }

  inline PencilAnnotationArchive& operator=(const PencilAnnotationArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PencilAnnotationArchive& operator=(PencilAnnotationArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PencilAnnotationArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PencilAnnotationArchive* internal_default_instance() {
    return reinterpret_cast<const PencilAnnotationArchive*>(
               &_PencilAnnotationArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PencilAnnotationArchive& a, PencilAnnotationArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PencilAnnotationArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PencilAnnotationArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PencilAnnotationArchive* New() const final {
    return CreateMaybeMessage<PencilAnnotationArchive>(nullptr);
  }

  PencilAnnotationArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PencilAnnotationArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PencilAnnotationArchive& from);
  void MergeFrom(const PencilAnnotationArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PencilAnnotationArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.PencilAnnotationArchive";
  }
  protected:
  explicit PencilAnnotationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextAttributeUuidStringFieldNumber = 2,
    kPencilAnnotationStorageFieldNumber = 1,
  };
  // optional string text_attribute_uuid_string = 2;
  bool has_text_attribute_uuid_string() const;
  private:
  bool _internal_has_text_attribute_uuid_string() const;
  public:
  void clear_text_attribute_uuid_string();
  const std::string& text_attribute_uuid_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_attribute_uuid_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_attribute_uuid_string();
  std::string* release_text_attribute_uuid_string();
  void set_allocated_text_attribute_uuid_string(std::string* text_attribute_uuid_string);
  private:
  const std::string& _internal_text_attribute_uuid_string() const;
  void _internal_set_text_attribute_uuid_string(const std::string& value);
  std::string* _internal_mutable_text_attribute_uuid_string();
  public:

  // optional .TSP.Reference pencil_annotation_storage = 1;
  bool has_pencil_annotation_storage() const;
  private:
  bool _internal_has_pencil_annotation_storage() const;
  public:
  void clear_pencil_annotation_storage();
  const ::TSP::Reference& pencil_annotation_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_pencil_annotation_storage();
  ::TSP::Reference* mutable_pencil_annotation_storage();
  void set_allocated_pencil_annotation_storage(::TSP::Reference* pencil_annotation_storage);
  private:
  const ::TSP::Reference& _internal_pencil_annotation_storage() const;
  ::TSP::Reference* _internal_mutable_pencil_annotation_storage();
  public:
  void unsafe_arena_set_allocated_pencil_annotation_storage(
      ::TSP::Reference* pencil_annotation_storage);
  ::TSP::Reference* unsafe_arena_release_pencil_annotation_storage();

  // @@protoc_insertion_point(class_scope:TSWP.PencilAnnotationArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_attribute_uuid_string_;
  ::TSP::Reference* pencil_annotation_storage_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class FontFeatureArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.FontFeatureArchive) */ {
 public:
  inline FontFeatureArchive() : FontFeatureArchive(nullptr) {}
  ~FontFeatureArchive() override;
  explicit constexpr FontFeatureArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FontFeatureArchive(const FontFeatureArchive& from);
  FontFeatureArchive(FontFeatureArchive&& from) noexcept
    : FontFeatureArchive() {
    *this = ::std::move(from);
  }

  inline FontFeatureArchive& operator=(const FontFeatureArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontFeatureArchive& operator=(FontFeatureArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FontFeatureArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FontFeatureArchive* internal_default_instance() {
    return reinterpret_cast<const FontFeatureArchive*>(
               &_FontFeatureArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FontFeatureArchive& a, FontFeatureArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FontFeatureArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FontFeatureArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FontFeatureArchive* New() const final {
    return CreateMaybeMessage<FontFeatureArchive>(nullptr);
  }

  FontFeatureArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FontFeatureArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FontFeatureArchive& from);
  void MergeFrom(const FontFeatureArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FontFeatureArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.FontFeatureArchive";
  }
  protected:
  explicit FontFeatureArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureTypeFieldNumber = 1,
    kFeatureSelectorFieldNumber = 2,
  };
  // required uint32 feature_type = 1;
  bool has_feature_type() const;
  private:
  bool _internal_has_feature_type() const;
  public:
  void clear_feature_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_type() const;
  void set_feature_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_feature_type() const;
  void _internal_set_feature_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 feature_selector = 2;
  bool has_feature_selector() const;
  private:
  bool _internal_has_feature_selector() const;
  public:
  void clear_feature_selector();
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_selector() const;
  void set_feature_selector(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_feature_selector() const;
  void _internal_set_feature_selector(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.FontFeatureArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_selector_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class CharacterStylePropertiesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.CharacterStylePropertiesArchive) */ {
 public:
  inline CharacterStylePropertiesArchive() : CharacterStylePropertiesArchive(nullptr) {}
  ~CharacterStylePropertiesArchive() override;
  explicit constexpr CharacterStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterStylePropertiesArchive(const CharacterStylePropertiesArchive& from);
  CharacterStylePropertiesArchive(CharacterStylePropertiesArchive&& from) noexcept
    : CharacterStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline CharacterStylePropertiesArchive& operator=(const CharacterStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterStylePropertiesArchive& operator=(CharacterStylePropertiesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const CharacterStylePropertiesArchive*>(
               &_CharacterStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CharacterStylePropertiesArchive& a, CharacterStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterStylePropertiesArchive* New() const final {
    return CreateMaybeMessage<CharacterStylePropertiesArchive>(nullptr);
  }

  CharacterStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterStylePropertiesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterStylePropertiesArchive& from);
  void MergeFrom(const CharacterStylePropertiesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.CharacterStylePropertiesArchive";
  }
  protected:
  explicit CharacterStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CharacterStylePropertiesArchive_CapitalizationType CapitalizationType;
  static constexpr CapitalizationType kNoCaps =
    CharacterStylePropertiesArchive_CapitalizationType_kNoCaps;
  static constexpr CapitalizationType kAllCaps =
    CharacterStylePropertiesArchive_CapitalizationType_kAllCaps;
  static constexpr CapitalizationType kSmallCaps =
    CharacterStylePropertiesArchive_CapitalizationType_kSmallCaps;
  static constexpr CapitalizationType kTitled =
    CharacterStylePropertiesArchive_CapitalizationType_kTitled;
  static inline bool CapitalizationType_IsValid(int value) {
    return CharacterStylePropertiesArchive_CapitalizationType_IsValid(value);
  }
  static constexpr CapitalizationType CapitalizationType_MIN =
    CharacterStylePropertiesArchive_CapitalizationType_CapitalizationType_MIN;
  static constexpr CapitalizationType CapitalizationType_MAX =
    CharacterStylePropertiesArchive_CapitalizationType_CapitalizationType_MAX;
  static constexpr int CapitalizationType_ARRAYSIZE =
    CharacterStylePropertiesArchive_CapitalizationType_CapitalizationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CapitalizationType_descriptor() {
    return CharacterStylePropertiesArchive_CapitalizationType_descriptor();
  }
  template<typename T>
  static inline const std::string& CapitalizationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CapitalizationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CapitalizationType_Name.");
    return CharacterStylePropertiesArchive_CapitalizationType_Name(enum_t_value);
  }
  static inline bool CapitalizationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CapitalizationType* value) {
    return CharacterStylePropertiesArchive_CapitalizationType_Parse(name, value);
  }

  typedef CharacterStylePropertiesArchive_UnderlineType UnderlineType;
  static constexpr UnderlineType kNoUnderline =
    CharacterStylePropertiesArchive_UnderlineType_kNoUnderline;
  static constexpr UnderlineType kSingleUnderline =
    CharacterStylePropertiesArchive_UnderlineType_kSingleUnderline;
  static constexpr UnderlineType kDoubleUnderline =
    CharacterStylePropertiesArchive_UnderlineType_kDoubleUnderline;
  static constexpr UnderlineType kWavyUnderline =
    CharacterStylePropertiesArchive_UnderlineType_kWavyUnderline;
  static inline bool UnderlineType_IsValid(int value) {
    return CharacterStylePropertiesArchive_UnderlineType_IsValid(value);
  }
  static constexpr UnderlineType UnderlineType_MIN =
    CharacterStylePropertiesArchive_UnderlineType_UnderlineType_MIN;
  static constexpr UnderlineType UnderlineType_MAX =
    CharacterStylePropertiesArchive_UnderlineType_UnderlineType_MAX;
  static constexpr int UnderlineType_ARRAYSIZE =
    CharacterStylePropertiesArchive_UnderlineType_UnderlineType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UnderlineType_descriptor() {
    return CharacterStylePropertiesArchive_UnderlineType_descriptor();
  }
  template<typename T>
  static inline const std::string& UnderlineType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UnderlineType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UnderlineType_Name.");
    return CharacterStylePropertiesArchive_UnderlineType_Name(enum_t_value);
  }
  static inline bool UnderlineType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UnderlineType* value) {
    return CharacterStylePropertiesArchive_UnderlineType_Parse(name, value);
  }

  typedef CharacterStylePropertiesArchive_LigaturesType LigaturesType;
  static constexpr LigaturesType kRequiredLigatures =
    CharacterStylePropertiesArchive_LigaturesType_kRequiredLigatures;
  static constexpr LigaturesType kStandardLigatures =
    CharacterStylePropertiesArchive_LigaturesType_kStandardLigatures;
  static constexpr LigaturesType kAllLigatures =
    CharacterStylePropertiesArchive_LigaturesType_kAllLigatures;
  static inline bool LigaturesType_IsValid(int value) {
    return CharacterStylePropertiesArchive_LigaturesType_IsValid(value);
  }
  static constexpr LigaturesType LigaturesType_MIN =
    CharacterStylePropertiesArchive_LigaturesType_LigaturesType_MIN;
  static constexpr LigaturesType LigaturesType_MAX =
    CharacterStylePropertiesArchive_LigaturesType_LigaturesType_MAX;
  static constexpr int LigaturesType_ARRAYSIZE =
    CharacterStylePropertiesArchive_LigaturesType_LigaturesType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LigaturesType_descriptor() {
    return CharacterStylePropertiesArchive_LigaturesType_descriptor();
  }
  template<typename T>
  static inline const std::string& LigaturesType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LigaturesType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LigaturesType_Name.");
    return CharacterStylePropertiesArchive_LigaturesType_Name(enum_t_value);
  }
  static inline bool LigaturesType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LigaturesType* value) {
    return CharacterStylePropertiesArchive_LigaturesType_Parse(name, value);
  }

  typedef CharacterStylePropertiesArchive_StrikethruType StrikethruType;
  static constexpr StrikethruType kNoStrikethru =
    CharacterStylePropertiesArchive_StrikethruType_kNoStrikethru;
  static constexpr StrikethruType kSingleStrikethru =
    CharacterStylePropertiesArchive_StrikethruType_kSingleStrikethru;
  static constexpr StrikethruType kDoubleStrikethru =
    CharacterStylePropertiesArchive_StrikethruType_kDoubleStrikethru;
  static constexpr StrikethruType kTripleStrikethru =
    CharacterStylePropertiesArchive_StrikethruType_kTripleStrikethru;
  static inline bool StrikethruType_IsValid(int value) {
    return CharacterStylePropertiesArchive_StrikethruType_IsValid(value);
  }
  static constexpr StrikethruType StrikethruType_MIN =
    CharacterStylePropertiesArchive_StrikethruType_StrikethruType_MIN;
  static constexpr StrikethruType StrikethruType_MAX =
    CharacterStylePropertiesArchive_StrikethruType_StrikethruType_MAX;
  static constexpr int StrikethruType_ARRAYSIZE =
    CharacterStylePropertiesArchive_StrikethruType_StrikethruType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StrikethruType_descriptor() {
    return CharacterStylePropertiesArchive_StrikethruType_descriptor();
  }
  template<typename T>
  static inline const std::string& StrikethruType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StrikethruType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StrikethruType_Name.");
    return CharacterStylePropertiesArchive_StrikethruType_Name(enum_t_value);
  }
  static inline bool StrikethruType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StrikethruType* value) {
    return CharacterStylePropertiesArchive_StrikethruType_Parse(name, value);
  }

  typedef CharacterStylePropertiesArchive_SuperscriptType SuperscriptType;
  static constexpr SuperscriptType kNoScript =
    CharacterStylePropertiesArchive_SuperscriptType_kNoScript;
  static constexpr SuperscriptType kSuperscript =
    CharacterStylePropertiesArchive_SuperscriptType_kSuperscript;
  static constexpr SuperscriptType kSubscript =
    CharacterStylePropertiesArchive_SuperscriptType_kSubscript;
  static inline bool SuperscriptType_IsValid(int value) {
    return CharacterStylePropertiesArchive_SuperscriptType_IsValid(value);
  }
  static constexpr SuperscriptType SuperscriptType_MIN =
    CharacterStylePropertiesArchive_SuperscriptType_SuperscriptType_MIN;
  static constexpr SuperscriptType SuperscriptType_MAX =
    CharacterStylePropertiesArchive_SuperscriptType_SuperscriptType_MAX;
  static constexpr int SuperscriptType_ARRAYSIZE =
    CharacterStylePropertiesArchive_SuperscriptType_SuperscriptType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SuperscriptType_descriptor() {
    return CharacterStylePropertiesArchive_SuperscriptType_descriptor();
  }
  template<typename T>
  static inline const std::string& SuperscriptType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SuperscriptType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SuperscriptType_Name.");
    return CharacterStylePropertiesArchive_SuperscriptType_Name(enum_t_value);
  }
  static inline bool SuperscriptType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SuperscriptType* value) {
    return CharacterStylePropertiesArchive_SuperscriptType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFontFeaturesFieldNumber = 34,
    kFontNameFieldNumber = 5,
    kLanguageFieldNumber = 9,
    kEmphasisMarksFieldNumber = 37,
    kCompatibilityFontNameFieldNumber = 39,
    kFontColorFieldNumber = 7,
    kOutlineColorFieldNumber = 18,
    kShadowFieldNumber = 21,
    kStrikethruColorFieldNumber = 23,
    kBackgroundColorFieldNumber = 26,
    kUnderlineColorFieldNumber = 29,
    kTsdStrokeFieldNumber = 44,
    kTsdFillFieldNumber = 46,
    kFontSizeFieldNumber = 3,
    kBoldFieldNumber = 1,
    kItalicFieldNumber = 2,
    kFontNameNullFieldNumber = 4,
    kFontColorNullFieldNumber = 6,
    kSuperscriptFieldNumber = 10,
    kUnderlineFieldNumber = 11,
    kStrikethruFieldNumber = 12,
    kCapitalizationFieldNumber = 13,
    kBaselineShiftFieldNumber = 14,
    kKerningFieldNumber = 15,
    kLigaturesFieldNumber = 16,
    kLanguageNullFieldNumber = 8,
    kOutlineColorNullFieldNumber = 17,
    kShadowNullFieldNumber = 20,
    kStrikethruColorNullFieldNumber = 22,
    kOutlineFieldNumber = 19,
    kStrikethruWidthFieldNumber = 24,
    kTrackingFieldNumber = 27,
    kBackgroundColorNullFieldNumber = 25,
    kUnderlineColorNullFieldNumber = 28,
    kWordStrikethruFieldNumber = 31,
    kWordUnderlineFieldNumber = 32,
    kUnderlineWidthFieldNumber = 30,
    kFontFeaturesNullFieldNumber = 33,
    kEmphasisMarksNullFieldNumber = 36,
    kCompatibilityFontNameNullFieldNumber = 38,
    kIsNamedPointSizeFieldNumber = 40,
    kCapitalizationUsesLinguisticsFieldNumber = 41,
    kTateChuYokoFieldNumber = 42,
    kTsdStrokeNullFieldNumber = 43,
    kTsdFillNullFieldNumber = 45,
    kTsdFillShouldFillTextContainerFieldNumber = 47,
    kWritingDirectionFieldNumber = 35,
  };
  // repeated .TSWP.FontFeatureArchive font_features = 34;
  int font_features_size() const;
  private:
  int _internal_font_features_size() const;
  public:
  void clear_font_features();
  ::TSWP::FontFeatureArchive* mutable_font_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::FontFeatureArchive >*
      mutable_font_features();
  private:
  const ::TSWP::FontFeatureArchive& _internal_font_features(int index) const;
  ::TSWP::FontFeatureArchive* _internal_add_font_features();
  public:
  const ::TSWP::FontFeatureArchive& font_features(int index) const;
  ::TSWP::FontFeatureArchive* add_font_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::FontFeatureArchive >&
      font_features() const;

  // optional string font_name = 5;
  bool has_font_name() const;
  private:
  bool _internal_has_font_name() const;
  public:
  void clear_font_name();
  const std::string& font_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_font_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_font_name();
  std::string* release_font_name();
  void set_allocated_font_name(std::string* font_name);
  private:
  const std::string& _internal_font_name() const;
  void _internal_set_font_name(const std::string& value);
  std::string* _internal_mutable_font_name();
  public:

  // optional string language = 9;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string emphasis_marks = 37;
  bool has_emphasis_marks() const;
  private:
  bool _internal_has_emphasis_marks() const;
  public:
  void clear_emphasis_marks();
  const std::string& emphasis_marks() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_emphasis_marks(ArgT0&& arg0, ArgT... args);
  std::string* mutable_emphasis_marks();
  std::string* release_emphasis_marks();
  void set_allocated_emphasis_marks(std::string* emphasis_marks);
  private:
  const std::string& _internal_emphasis_marks() const;
  void _internal_set_emphasis_marks(const std::string& value);
  std::string* _internal_mutable_emphasis_marks();
  public:

  // optional string compatibility_font_name = 39;
  bool has_compatibility_font_name() const;
  private:
  bool _internal_has_compatibility_font_name() const;
  public:
  void clear_compatibility_font_name();
  const std::string& compatibility_font_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compatibility_font_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compatibility_font_name();
  std::string* release_compatibility_font_name();
  void set_allocated_compatibility_font_name(std::string* compatibility_font_name);
  private:
  const std::string& _internal_compatibility_font_name() const;
  void _internal_set_compatibility_font_name(const std::string& value);
  std::string* _internal_mutable_compatibility_font_name();
  public:

  // optional .TSP.Color font_color = 7;
  bool has_font_color() const;
  private:
  bool _internal_has_font_color() const;
  public:
  void clear_font_color();
  const ::TSP::Color& font_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_font_color();
  ::TSP::Color* mutable_font_color();
  void set_allocated_font_color(::TSP::Color* font_color);
  private:
  const ::TSP::Color& _internal_font_color() const;
  ::TSP::Color* _internal_mutable_font_color();
  public:
  void unsafe_arena_set_allocated_font_color(
      ::TSP::Color* font_color);
  ::TSP::Color* unsafe_arena_release_font_color();

  // optional .TSP.Color outline_color = 18;
  bool has_outline_color() const;
  private:
  bool _internal_has_outline_color() const;
  public:
  void clear_outline_color();
  const ::TSP::Color& outline_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_outline_color();
  ::TSP::Color* mutable_outline_color();
  void set_allocated_outline_color(::TSP::Color* outline_color);
  private:
  const ::TSP::Color& _internal_outline_color() const;
  ::TSP::Color* _internal_mutable_outline_color();
  public:
  void unsafe_arena_set_allocated_outline_color(
      ::TSP::Color* outline_color);
  ::TSP::Color* unsafe_arena_release_outline_color();

  // optional .TSD.ShadowArchive shadow = 21;
  bool has_shadow() const;
  private:
  bool _internal_has_shadow() const;
  public:
  void clear_shadow();
  const ::TSD::ShadowArchive& shadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_shadow();
  ::TSD::ShadowArchive* mutable_shadow();
  void set_allocated_shadow(::TSD::ShadowArchive* shadow);
  private:
  const ::TSD::ShadowArchive& _internal_shadow() const;
  ::TSD::ShadowArchive* _internal_mutable_shadow();
  public:
  void unsafe_arena_set_allocated_shadow(
      ::TSD::ShadowArchive* shadow);
  ::TSD::ShadowArchive* unsafe_arena_release_shadow();

  // optional .TSP.Color strikethru_color = 23;
  bool has_strikethru_color() const;
  private:
  bool _internal_has_strikethru_color() const;
  public:
  void clear_strikethru_color();
  const ::TSP::Color& strikethru_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_strikethru_color();
  ::TSP::Color* mutable_strikethru_color();
  void set_allocated_strikethru_color(::TSP::Color* strikethru_color);
  private:
  const ::TSP::Color& _internal_strikethru_color() const;
  ::TSP::Color* _internal_mutable_strikethru_color();
  public:
  void unsafe_arena_set_allocated_strikethru_color(
      ::TSP::Color* strikethru_color);
  ::TSP::Color* unsafe_arena_release_strikethru_color();

  // optional .TSP.Color background_color = 26;
  bool has_background_color() const;
  private:
  bool _internal_has_background_color() const;
  public:
  void clear_background_color();
  const ::TSP::Color& background_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_background_color();
  ::TSP::Color* mutable_background_color();
  void set_allocated_background_color(::TSP::Color* background_color);
  private:
  const ::TSP::Color& _internal_background_color() const;
  ::TSP::Color* _internal_mutable_background_color();
  public:
  void unsafe_arena_set_allocated_background_color(
      ::TSP::Color* background_color);
  ::TSP::Color* unsafe_arena_release_background_color();

  // optional .TSP.Color underline_color = 29;
  bool has_underline_color() const;
  private:
  bool _internal_has_underline_color() const;
  public:
  void clear_underline_color();
  const ::TSP::Color& underline_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_underline_color();
  ::TSP::Color* mutable_underline_color();
  void set_allocated_underline_color(::TSP::Color* underline_color);
  private:
  const ::TSP::Color& _internal_underline_color() const;
  ::TSP::Color* _internal_mutable_underline_color();
  public:
  void unsafe_arena_set_allocated_underline_color(
      ::TSP::Color* underline_color);
  ::TSP::Color* unsafe_arena_release_underline_color();

  // optional .TSD.StrokeArchive tsd_stroke = 44;
  bool has_tsd_stroke() const;
  private:
  bool _internal_has_tsd_stroke() const;
  public:
  void clear_tsd_stroke();
  const ::TSD::StrokeArchive& tsd_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tsd_stroke();
  ::TSD::StrokeArchive* mutable_tsd_stroke();
  void set_allocated_tsd_stroke(::TSD::StrokeArchive* tsd_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_tsd_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tsd_stroke();
  public:
  void unsafe_arena_set_allocated_tsd_stroke(
      ::TSD::StrokeArchive* tsd_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tsd_stroke();

  // optional .TSD.FillArchive tsd_fill = 46;
  bool has_tsd_fill() const;
  private:
  bool _internal_has_tsd_fill() const;
  public:
  void clear_tsd_fill();
  const ::TSD::FillArchive& tsd_fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tsd_fill();
  ::TSD::FillArchive* mutable_tsd_fill();
  void set_allocated_tsd_fill(::TSD::FillArchive* tsd_fill);
  private:
  const ::TSD::FillArchive& _internal_tsd_fill() const;
  ::TSD::FillArchive* _internal_mutable_tsd_fill();
  public:
  void unsafe_arena_set_allocated_tsd_fill(
      ::TSD::FillArchive* tsd_fill);
  ::TSD::FillArchive* unsafe_arena_release_tsd_fill();

  // optional float font_size = 3;
  bool has_font_size() const;
  private:
  bool _internal_has_font_size() const;
  public:
  void clear_font_size();
  float font_size() const;
  void set_font_size(float value);
  private:
  float _internal_font_size() const;
  void _internal_set_font_size(float value);
  public:

  // optional bool bold = 1;
  bool has_bold() const;
  private:
  bool _internal_has_bold() const;
  public:
  void clear_bold();
  bool bold() const;
  void set_bold(bool value);
  private:
  bool _internal_bold() const;
  void _internal_set_bold(bool value);
  public:

  // optional bool italic = 2;
  bool has_italic() const;
  private:
  bool _internal_has_italic() const;
  public:
  void clear_italic();
  bool italic() const;
  void set_italic(bool value);
  private:
  bool _internal_italic() const;
  void _internal_set_italic(bool value);
  public:

  // optional bool font_name_null = 4;
  bool has_font_name_null() const;
  private:
  bool _internal_has_font_name_null() const;
  public:
  void clear_font_name_null();
  bool font_name_null() const;
  void set_font_name_null(bool value);
  private:
  bool _internal_font_name_null() const;
  void _internal_set_font_name_null(bool value);
  public:

  // optional bool font_color_null = 6;
  bool has_font_color_null() const;
  private:
  bool _internal_has_font_color_null() const;
  public:
  void clear_font_color_null();
  bool font_color_null() const;
  void set_font_color_null(bool value);
  private:
  bool _internal_font_color_null() const;
  void _internal_set_font_color_null(bool value);
  public:

  // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
  bool has_superscript() const;
  private:
  bool _internal_has_superscript() const;
  public:
  void clear_superscript();
  ::TSWP::CharacterStylePropertiesArchive_SuperscriptType superscript() const;
  void set_superscript(::TSWP::CharacterStylePropertiesArchive_SuperscriptType value);
  private:
  ::TSWP::CharacterStylePropertiesArchive_SuperscriptType _internal_superscript() const;
  void _internal_set_superscript(::TSWP::CharacterStylePropertiesArchive_SuperscriptType value);
  public:

  // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
  bool has_underline() const;
  private:
  bool _internal_has_underline() const;
  public:
  void clear_underline();
  ::TSWP::CharacterStylePropertiesArchive_UnderlineType underline() const;
  void set_underline(::TSWP::CharacterStylePropertiesArchive_UnderlineType value);
  private:
  ::TSWP::CharacterStylePropertiesArchive_UnderlineType _internal_underline() const;
  void _internal_set_underline(::TSWP::CharacterStylePropertiesArchive_UnderlineType value);
  public:

  // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
  bool has_strikethru() const;
  private:
  bool _internal_has_strikethru() const;
  public:
  void clear_strikethru();
  ::TSWP::CharacterStylePropertiesArchive_StrikethruType strikethru() const;
  void set_strikethru(::TSWP::CharacterStylePropertiesArchive_StrikethruType value);
  private:
  ::TSWP::CharacterStylePropertiesArchive_StrikethruType _internal_strikethru() const;
  void _internal_set_strikethru(::TSWP::CharacterStylePropertiesArchive_StrikethruType value);
  public:

  // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
  bool has_capitalization() const;
  private:
  bool _internal_has_capitalization() const;
  public:
  void clear_capitalization();
  ::TSWP::CharacterStylePropertiesArchive_CapitalizationType capitalization() const;
  void set_capitalization(::TSWP::CharacterStylePropertiesArchive_CapitalizationType value);
  private:
  ::TSWP::CharacterStylePropertiesArchive_CapitalizationType _internal_capitalization() const;
  void _internal_set_capitalization(::TSWP::CharacterStylePropertiesArchive_CapitalizationType value);
  public:

  // optional float baseline_shift = 14;
  bool has_baseline_shift() const;
  private:
  bool _internal_has_baseline_shift() const;
  public:
  void clear_baseline_shift();
  float baseline_shift() const;
  void set_baseline_shift(float value);
  private:
  float _internal_baseline_shift() const;
  void _internal_set_baseline_shift(float value);
  public:

  // optional float kerning = 15;
  bool has_kerning() const;
  private:
  bool _internal_has_kerning() const;
  public:
  void clear_kerning();
  float kerning() const;
  void set_kerning(float value);
  private:
  float _internal_kerning() const;
  void _internal_set_kerning(float value);
  public:

  // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
  bool has_ligatures() const;
  private:
  bool _internal_has_ligatures() const;
  public:
  void clear_ligatures();
  ::TSWP::CharacterStylePropertiesArchive_LigaturesType ligatures() const;
  void set_ligatures(::TSWP::CharacterStylePropertiesArchive_LigaturesType value);
  private:
  ::TSWP::CharacterStylePropertiesArchive_LigaturesType _internal_ligatures() const;
  void _internal_set_ligatures(::TSWP::CharacterStylePropertiesArchive_LigaturesType value);
  public:

  // optional bool language_null = 8;
  bool has_language_null() const;
  private:
  bool _internal_has_language_null() const;
  public:
  void clear_language_null();
  bool language_null() const;
  void set_language_null(bool value);
  private:
  bool _internal_language_null() const;
  void _internal_set_language_null(bool value);
  public:

  // optional bool outline_color_null = 17;
  bool has_outline_color_null() const;
  private:
  bool _internal_has_outline_color_null() const;
  public:
  void clear_outline_color_null();
  bool outline_color_null() const;
  void set_outline_color_null(bool value);
  private:
  bool _internal_outline_color_null() const;
  void _internal_set_outline_color_null(bool value);
  public:

  // optional bool shadow_null = 20;
  bool has_shadow_null() const;
  private:
  bool _internal_has_shadow_null() const;
  public:
  void clear_shadow_null();
  bool shadow_null() const;
  void set_shadow_null(bool value);
  private:
  bool _internal_shadow_null() const;
  void _internal_set_shadow_null(bool value);
  public:

  // optional bool strikethru_color_null = 22;
  bool has_strikethru_color_null() const;
  private:
  bool _internal_has_strikethru_color_null() const;
  public:
  void clear_strikethru_color_null();
  bool strikethru_color_null() const;
  void set_strikethru_color_null(bool value);
  private:
  bool _internal_strikethru_color_null() const;
  void _internal_set_strikethru_color_null(bool value);
  public:

  // optional float outline = 19;
  bool has_outline() const;
  private:
  bool _internal_has_outline() const;
  public:
  void clear_outline();
  float outline() const;
  void set_outline(float value);
  private:
  float _internal_outline() const;
  void _internal_set_outline(float value);
  public:

  // optional float strikethru_width = 24;
  bool has_strikethru_width() const;
  private:
  bool _internal_has_strikethru_width() const;
  public:
  void clear_strikethru_width();
  float strikethru_width() const;
  void set_strikethru_width(float value);
  private:
  float _internal_strikethru_width() const;
  void _internal_set_strikethru_width(float value);
  public:

  // optional float tracking = 27;
  bool has_tracking() const;
  private:
  bool _internal_has_tracking() const;
  public:
  void clear_tracking();
  float tracking() const;
  void set_tracking(float value);
  private:
  float _internal_tracking() const;
  void _internal_set_tracking(float value);
  public:

  // optional bool background_color_null = 25;
  bool has_background_color_null() const;
  private:
  bool _internal_has_background_color_null() const;
  public:
  void clear_background_color_null();
  bool background_color_null() const;
  void set_background_color_null(bool value);
  private:
  bool _internal_background_color_null() const;
  void _internal_set_background_color_null(bool value);
  public:

  // optional bool underline_color_null = 28;
  bool has_underline_color_null() const;
  private:
  bool _internal_has_underline_color_null() const;
  public:
  void clear_underline_color_null();
  bool underline_color_null() const;
  void set_underline_color_null(bool value);
  private:
  bool _internal_underline_color_null() const;
  void _internal_set_underline_color_null(bool value);
  public:

  // optional bool word_strikethru = 31;
  bool has_word_strikethru() const;
  private:
  bool _internal_has_word_strikethru() const;
  public:
  void clear_word_strikethru();
  bool word_strikethru() const;
  void set_word_strikethru(bool value);
  private:
  bool _internal_word_strikethru() const;
  void _internal_set_word_strikethru(bool value);
  public:

  // optional bool word_underline = 32;
  bool has_word_underline() const;
  private:
  bool _internal_has_word_underline() const;
  public:
  void clear_word_underline();
  bool word_underline() const;
  void set_word_underline(bool value);
  private:
  bool _internal_word_underline() const;
  void _internal_set_word_underline(bool value);
  public:

  // optional float underline_width = 30;
  bool has_underline_width() const;
  private:
  bool _internal_has_underline_width() const;
  public:
  void clear_underline_width();
  float underline_width() const;
  void set_underline_width(float value);
  private:
  float _internal_underline_width() const;
  void _internal_set_underline_width(float value);
  public:

  // optional bool font_features_null = 33;
  bool has_font_features_null() const;
  private:
  bool _internal_has_font_features_null() const;
  public:
  void clear_font_features_null();
  bool font_features_null() const;
  void set_font_features_null(bool value);
  private:
  bool _internal_font_features_null() const;
  void _internal_set_font_features_null(bool value);
  public:

  // optional bool emphasis_marks_null = 36;
  bool has_emphasis_marks_null() const;
  private:
  bool _internal_has_emphasis_marks_null() const;
  public:
  void clear_emphasis_marks_null();
  bool emphasis_marks_null() const;
  void set_emphasis_marks_null(bool value);
  private:
  bool _internal_emphasis_marks_null() const;
  void _internal_set_emphasis_marks_null(bool value);
  public:

  // optional bool compatibility_font_name_null = 38;
  bool has_compatibility_font_name_null() const;
  private:
  bool _internal_has_compatibility_font_name_null() const;
  public:
  void clear_compatibility_font_name_null();
  bool compatibility_font_name_null() const;
  void set_compatibility_font_name_null(bool value);
  private:
  bool _internal_compatibility_font_name_null() const;
  void _internal_set_compatibility_font_name_null(bool value);
  public:

  // optional bool is_named_point_size = 40;
  bool has_is_named_point_size() const;
  private:
  bool _internal_has_is_named_point_size() const;
  public:
  void clear_is_named_point_size();
  bool is_named_point_size() const;
  void set_is_named_point_size(bool value);
  private:
  bool _internal_is_named_point_size() const;
  void _internal_set_is_named_point_size(bool value);
  public:

  // optional bool capitalization_uses_linguistics = 41;
  bool has_capitalization_uses_linguistics() const;
  private:
  bool _internal_has_capitalization_uses_linguistics() const;
  public:
  void clear_capitalization_uses_linguistics();
  bool capitalization_uses_linguistics() const;
  void set_capitalization_uses_linguistics(bool value);
  private:
  bool _internal_capitalization_uses_linguistics() const;
  void _internal_set_capitalization_uses_linguistics(bool value);
  public:

  // optional bool tate_chu_yoko = 42;
  bool has_tate_chu_yoko() const;
  private:
  bool _internal_has_tate_chu_yoko() const;
  public:
  void clear_tate_chu_yoko();
  bool tate_chu_yoko() const;
  void set_tate_chu_yoko(bool value);
  private:
  bool _internal_tate_chu_yoko() const;
  void _internal_set_tate_chu_yoko(bool value);
  public:

  // optional bool tsd_stroke_null = 43;
  bool has_tsd_stroke_null() const;
  private:
  bool _internal_has_tsd_stroke_null() const;
  public:
  void clear_tsd_stroke_null();
  bool tsd_stroke_null() const;
  void set_tsd_stroke_null(bool value);
  private:
  bool _internal_tsd_stroke_null() const;
  void _internal_set_tsd_stroke_null(bool value);
  public:

  // optional bool tsd_fill_null = 45;
  bool has_tsd_fill_null() const;
  private:
  bool _internal_has_tsd_fill_null() const;
  public:
  void clear_tsd_fill_null();
  bool tsd_fill_null() const;
  void set_tsd_fill_null(bool value);
  private:
  bool _internal_tsd_fill_null() const;
  void _internal_set_tsd_fill_null(bool value);
  public:

  // optional bool tsd_fill_should_fill_text_container = 47;
  bool has_tsd_fill_should_fill_text_container() const;
  private:
  bool _internal_has_tsd_fill_should_fill_text_container() const;
  public:
  void clear_tsd_fill_should_fill_text_container();
  bool tsd_fill_should_fill_text_container() const;
  void set_tsd_fill_should_fill_text_container(bool value);
  private:
  bool _internal_tsd_fill_should_fill_text_container() const;
  void _internal_set_tsd_fill_should_fill_text_container(bool value);
  public:

  // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
  bool has_writing_direction() const;
  private:
  bool _internal_has_writing_direction() const;
  public:
  void clear_writing_direction();
  ::TSWP::WritingDirectionType writing_direction() const;
  void set_writing_direction(::TSWP::WritingDirectionType value);
  private:
  ::TSWP::WritingDirectionType _internal_writing_direction() const;
  void _internal_set_writing_direction(::TSWP::WritingDirectionType value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.CharacterStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::FontFeatureArchive > font_features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emphasis_marks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compatibility_font_name_;
  ::TSP::Color* font_color_;
  ::TSP::Color* outline_color_;
  ::TSD::ShadowArchive* shadow_;
  ::TSP::Color* strikethru_color_;
  ::TSP::Color* background_color_;
  ::TSP::Color* underline_color_;
  ::TSD::StrokeArchive* tsd_stroke_;
  ::TSD::FillArchive* tsd_fill_;
  float font_size_;
  bool bold_;
  bool italic_;
  bool font_name_null_;
  bool font_color_null_;
  int superscript_;
  int underline_;
  int strikethru_;
  int capitalization_;
  float baseline_shift_;
  float kerning_;
  int ligatures_;
  bool language_null_;
  bool outline_color_null_;
  bool shadow_null_;
  bool strikethru_color_null_;
  float outline_;
  float strikethru_width_;
  float tracking_;
  bool background_color_null_;
  bool underline_color_null_;
  bool word_strikethru_;
  bool word_underline_;
  float underline_width_;
  bool font_features_null_;
  bool emphasis_marks_null_;
  bool compatibility_font_name_null_;
  bool is_named_point_size_;
  bool capitalization_uses_linguistics_;
  bool tate_chu_yoko_;
  bool tsd_stroke_null_;
  bool tsd_fill_null_;
  bool tsd_fill_should_fill_text_container_;
  int writing_direction_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class CharacterStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.CharacterStyleArchive) */ {
 public:
  inline CharacterStyleArchive() : CharacterStyleArchive(nullptr) {}
  ~CharacterStyleArchive() override;
  explicit constexpr CharacterStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterStyleArchive(const CharacterStyleArchive& from);
  CharacterStyleArchive(CharacterStyleArchive&& from) noexcept
    : CharacterStyleArchive() {
    *this = ::std::move(from);
  }

  inline CharacterStyleArchive& operator=(const CharacterStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterStyleArchive& operator=(CharacterStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CharacterStyleArchive*>(
               &_CharacterStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CharacterStyleArchive& a, CharacterStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterStyleArchive* New() const final {
    return CreateMaybeMessage<CharacterStyleArchive>(nullptr);
  }

  CharacterStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterStyleArchive& from);
  void MergeFrom(const CharacterStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.CharacterStyleArchive";
  }
  protected:
  explicit CharacterStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCharPropertiesFieldNumber = 11,
    kOverrideCountFieldNumber = 10,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  bool has_char_properties() const;
  private:
  bool _internal_has_char_properties() const;
  public:
  void clear_char_properties();
  const ::TSWP::CharacterStylePropertiesArchive& char_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::CharacterStylePropertiesArchive* release_char_properties();
  ::TSWP::CharacterStylePropertiesArchive* mutable_char_properties();
  void set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties);
  private:
  const ::TSWP::CharacterStylePropertiesArchive& _internal_char_properties() const;
  ::TSWP::CharacterStylePropertiesArchive* _internal_mutable_char_properties();
  public:
  void unsafe_arena_set_allocated_char_properties(
      ::TSWP::CharacterStylePropertiesArchive* char_properties);
  ::TSWP::CharacterStylePropertiesArchive* unsafe_arena_release_char_properties();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.CharacterStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TSWP::CharacterStylePropertiesArchive* char_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TabArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TabArchive) */ {
 public:
  inline TabArchive() : TabArchive(nullptr) {}
  ~TabArchive() override;
  explicit constexpr TabArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TabArchive(const TabArchive& from);
  TabArchive(TabArchive&& from) noexcept
    : TabArchive() {
    *this = ::std::move(from);
  }

  inline TabArchive& operator=(const TabArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabArchive& operator=(TabArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TabArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TabArchive* internal_default_instance() {
    return reinterpret_cast<const TabArchive*>(
               &_TabArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TabArchive& a, TabArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TabArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TabArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TabArchive* New() const final {
    return CreateMaybeMessage<TabArchive>(nullptr);
  }

  TabArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TabArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TabArchive& from);
  void MergeFrom(const TabArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TabArchive";
  }
  protected:
  explicit TabArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TabArchive_TabAlignmentType TabAlignmentType;
  static constexpr TabAlignmentType kTabAlignmentLeft =
    TabArchive_TabAlignmentType_kTabAlignmentLeft;
  static constexpr TabAlignmentType kTabAlignmentCenter =
    TabArchive_TabAlignmentType_kTabAlignmentCenter;
  static constexpr TabAlignmentType kTabAlignmentRight =
    TabArchive_TabAlignmentType_kTabAlignmentRight;
  static constexpr TabAlignmentType kTabAlignmentDecimal =
    TabArchive_TabAlignmentType_kTabAlignmentDecimal;
  static inline bool TabAlignmentType_IsValid(int value) {
    return TabArchive_TabAlignmentType_IsValid(value);
  }
  static constexpr TabAlignmentType TabAlignmentType_MIN =
    TabArchive_TabAlignmentType_TabAlignmentType_MIN;
  static constexpr TabAlignmentType TabAlignmentType_MAX =
    TabArchive_TabAlignmentType_TabAlignmentType_MAX;
  static constexpr int TabAlignmentType_ARRAYSIZE =
    TabArchive_TabAlignmentType_TabAlignmentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TabAlignmentType_descriptor() {
    return TabArchive_TabAlignmentType_descriptor();
  }
  template<typename T>
  static inline const std::string& TabAlignmentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TabAlignmentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TabAlignmentType_Name.");
    return TabArchive_TabAlignmentType_Name(enum_t_value);
  }
  static inline bool TabAlignmentType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TabAlignmentType* value) {
    return TabArchive_TabAlignmentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderFieldNumber = 3,
    kPositionFieldNumber = 1,
    kAlignmentFieldNumber = 2,
  };
  // optional string leader = 3;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const std::string& leader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader();
  std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  private:
  const std::string& _internal_leader() const;
  void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // optional float position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  float position() const;
  void set_position(float value);
  private:
  float _internal_position() const;
  void _internal_set_position(float value);
  public:

  // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  ::TSWP::TabArchive_TabAlignmentType alignment() const;
  void set_alignment(::TSWP::TabArchive_TabAlignmentType value);
  private:
  ::TSWP::TabArchive_TabAlignmentType _internal_alignment() const;
  void _internal_set_alignment(::TSWP::TabArchive_TabAlignmentType value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.TabArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
  float position_;
  int alignment_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TabsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TabsArchive) */ {
 public:
  inline TabsArchive() : TabsArchive(nullptr) {}
  ~TabsArchive() override;
  explicit constexpr TabsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TabsArchive(const TabsArchive& from);
  TabsArchive(TabsArchive&& from) noexcept
    : TabsArchive() {
    *this = ::std::move(from);
  }

  inline TabsArchive& operator=(const TabsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabsArchive& operator=(TabsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TabsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TabsArchive* internal_default_instance() {
    return reinterpret_cast<const TabsArchive*>(
               &_TabsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TabsArchive& a, TabsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TabsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TabsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TabsArchive* New() const final {
    return CreateMaybeMessage<TabsArchive>(nullptr);
  }

  TabsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TabsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TabsArchive& from);
  void MergeFrom(const TabsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TabsArchive";
  }
  protected:
  explicit TabsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabsFieldNumber = 1,
  };
  // repeated .TSWP.TabArchive tabs = 1;
  int tabs_size() const;
  private:
  int _internal_tabs_size() const;
  public:
  void clear_tabs();
  ::TSWP::TabArchive* mutable_tabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TabArchive >*
      mutable_tabs();
  private:
  const ::TSWP::TabArchive& _internal_tabs(int index) const;
  ::TSWP::TabArchive* _internal_add_tabs();
  public:
  const ::TSWP::TabArchive& tabs(int index) const;
  ::TSWP::TabArchive* add_tabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TabArchive >&
      tabs() const;

  // @@protoc_insertion_point(class_scope:TSWP.TabsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TabArchive > tabs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class LineSpacingArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.LineSpacingArchive) */ {
 public:
  inline LineSpacingArchive() : LineSpacingArchive(nullptr) {}
  ~LineSpacingArchive() override;
  explicit constexpr LineSpacingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineSpacingArchive(const LineSpacingArchive& from);
  LineSpacingArchive(LineSpacingArchive&& from) noexcept
    : LineSpacingArchive() {
    *this = ::std::move(from);
  }

  inline LineSpacingArchive& operator=(const LineSpacingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineSpacingArchive& operator=(LineSpacingArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LineSpacingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineSpacingArchive* internal_default_instance() {
    return reinterpret_cast<const LineSpacingArchive*>(
               &_LineSpacingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LineSpacingArchive& a, LineSpacingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LineSpacingArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineSpacingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineSpacingArchive* New() const final {
    return CreateMaybeMessage<LineSpacingArchive>(nullptr);
  }

  LineSpacingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineSpacingArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LineSpacingArchive& from);
  void MergeFrom(const LineSpacingArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineSpacingArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.LineSpacingArchive";
  }
  protected:
  explicit LineSpacingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LineSpacingArchive_LineSpacingModeType LineSpacingModeType;
  static constexpr LineSpacingModeType kRelativeLineSpacing =
    LineSpacingArchive_LineSpacingModeType_kRelativeLineSpacing;
  static constexpr LineSpacingModeType kMinimumLineSpacing =
    LineSpacingArchive_LineSpacingModeType_kMinimumLineSpacing;
  static constexpr LineSpacingModeType kExactLineSpacing =
    LineSpacingArchive_LineSpacingModeType_kExactLineSpacing;
  static constexpr LineSpacingModeType kMaximumLineSpacing =
    LineSpacingArchive_LineSpacingModeType_kMaximumLineSpacing;
  static constexpr LineSpacingModeType kSpaceBetweenLineSpacing =
    LineSpacingArchive_LineSpacingModeType_kSpaceBetweenLineSpacing;
  static inline bool LineSpacingModeType_IsValid(int value) {
    return LineSpacingArchive_LineSpacingModeType_IsValid(value);
  }
  static constexpr LineSpacingModeType LineSpacingModeType_MIN =
    LineSpacingArchive_LineSpacingModeType_LineSpacingModeType_MIN;
  static constexpr LineSpacingModeType LineSpacingModeType_MAX =
    LineSpacingArchive_LineSpacingModeType_LineSpacingModeType_MAX;
  static constexpr int LineSpacingModeType_ARRAYSIZE =
    LineSpacingArchive_LineSpacingModeType_LineSpacingModeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LineSpacingModeType_descriptor() {
    return LineSpacingArchive_LineSpacingModeType_descriptor();
  }
  template<typename T>
  static inline const std::string& LineSpacingModeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LineSpacingModeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LineSpacingModeType_Name.");
    return LineSpacingArchive_LineSpacingModeType_Name(enum_t_value);
  }
  static inline bool LineSpacingModeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LineSpacingModeType* value) {
    return LineSpacingArchive_LineSpacingModeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kAmountFieldNumber = 2,
    kBaselineRuleFieldNumber = 3,
  };
  // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::TSWP::LineSpacingArchive_LineSpacingModeType mode() const;
  void set_mode(::TSWP::LineSpacingArchive_LineSpacingModeType value);
  private:
  ::TSWP::LineSpacingArchive_LineSpacingModeType _internal_mode() const;
  void _internal_set_mode(::TSWP::LineSpacingArchive_LineSpacingModeType value);
  public:

  // optional float amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  float amount() const;
  void set_amount(float value);
  private:
  float _internal_amount() const;
  void _internal_set_amount(float value);
  public:

  // optional float baselineRule = 3;
  bool has_baselinerule() const;
  private:
  bool _internal_has_baselinerule() const;
  public:
  void clear_baselinerule();
  float baselinerule() const;
  void set_baselinerule(float value);
  private:
  float _internal_baselinerule() const;
  void _internal_set_baselinerule(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.LineSpacingArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int mode_;
  float amount_;
  float baselinerule_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ParagraphStylePropertiesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ParagraphStylePropertiesArchive) */ {
 public:
  inline ParagraphStylePropertiesArchive() : ParagraphStylePropertiesArchive(nullptr) {}
  ~ParagraphStylePropertiesArchive() override;
  explicit constexpr ParagraphStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParagraphStylePropertiesArchive(const ParagraphStylePropertiesArchive& from);
  ParagraphStylePropertiesArchive(ParagraphStylePropertiesArchive&& from) noexcept
    : ParagraphStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline ParagraphStylePropertiesArchive& operator=(const ParagraphStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParagraphStylePropertiesArchive& operator=(ParagraphStylePropertiesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParagraphStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParagraphStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const ParagraphStylePropertiesArchive*>(
               &_ParagraphStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ParagraphStylePropertiesArchive& a, ParagraphStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ParagraphStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParagraphStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParagraphStylePropertiesArchive* New() const final {
    return CreateMaybeMessage<ParagraphStylePropertiesArchive>(nullptr);
  }

  ParagraphStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParagraphStylePropertiesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParagraphStylePropertiesArchive& from);
  void MergeFrom(const ParagraphStylePropertiesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParagraphStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ParagraphStylePropertiesArchive";
  }
  protected:
  explicit ParagraphStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParagraphStylePropertiesArchive_TextAlignmentType TextAlignmentType;
  static constexpr TextAlignmentType TATvalue0 =
    ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue0;
  static constexpr TextAlignmentType TATvalue1 =
    ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue1;
  static constexpr TextAlignmentType TATvalue2 =
    ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue2;
  static constexpr TextAlignmentType TATvalue3 =
    ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue3;
  static constexpr TextAlignmentType TATvalue4 =
    ParagraphStylePropertiesArchive_TextAlignmentType_TATvalue4;
  static inline bool TextAlignmentType_IsValid(int value) {
    return ParagraphStylePropertiesArchive_TextAlignmentType_IsValid(value);
  }
  static constexpr TextAlignmentType TextAlignmentType_MIN =
    ParagraphStylePropertiesArchive_TextAlignmentType_TextAlignmentType_MIN;
  static constexpr TextAlignmentType TextAlignmentType_MAX =
    ParagraphStylePropertiesArchive_TextAlignmentType_TextAlignmentType_MAX;
  static constexpr int TextAlignmentType_ARRAYSIZE =
    ParagraphStylePropertiesArchive_TextAlignmentType_TextAlignmentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TextAlignmentType_descriptor() {
    return ParagraphStylePropertiesArchive_TextAlignmentType_descriptor();
  }
  template<typename T>
  static inline const std::string& TextAlignmentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TextAlignmentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TextAlignmentType_Name.");
    return ParagraphStylePropertiesArchive_TextAlignmentType_Name(enum_t_value);
  }
  static inline bool TextAlignmentType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TextAlignmentType* value) {
    return ParagraphStylePropertiesArchive_TextAlignmentType_Parse(name, value);
  }

  typedef ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphBorderType;
  static constexpr ParagraphBorderType PBTvalue0 =
    ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue0;
  static constexpr ParagraphBorderType PBTvalue1 =
    ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue1;
  static constexpr ParagraphBorderType PBTvalue2 =
    ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue2;
  static constexpr ParagraphBorderType PBTvalue3 =
    ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue3;
  static constexpr ParagraphBorderType PBTvalue4 =
    ParagraphStylePropertiesArchive_ParagraphBorderType_PBTvalue4;
  static inline bool ParagraphBorderType_IsValid(int value) {
    return ParagraphStylePropertiesArchive_ParagraphBorderType_IsValid(value);
  }
  static constexpr ParagraphBorderType ParagraphBorderType_MIN =
    ParagraphStylePropertiesArchive_ParagraphBorderType_ParagraphBorderType_MIN;
  static constexpr ParagraphBorderType ParagraphBorderType_MAX =
    ParagraphStylePropertiesArchive_ParagraphBorderType_ParagraphBorderType_MAX;
  static constexpr int ParagraphBorderType_ARRAYSIZE =
    ParagraphStylePropertiesArchive_ParagraphBorderType_ParagraphBorderType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParagraphBorderType_descriptor() {
    return ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParagraphBorderType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParagraphBorderType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParagraphBorderType_Name.");
    return ParagraphStylePropertiesArchive_ParagraphBorderType_Name(enum_t_value);
  }
  static inline bool ParagraphBorderType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ParagraphBorderType* value) {
    return ParagraphStylePropertiesArchive_ParagraphBorderType_Parse(name, value);
  }

  typedef ParagraphStylePropertiesArchive_OutlineStyleType OutlineStyleType;
  static constexpr OutlineStyleType OSTvalue0 =
    ParagraphStylePropertiesArchive_OutlineStyleType_OSTvalue0;
  static constexpr OutlineStyleType OSTvalue1 =
    ParagraphStylePropertiesArchive_OutlineStyleType_OSTvalue1;
  static constexpr OutlineStyleType OSTvalue2 =
    ParagraphStylePropertiesArchive_OutlineStyleType_OSTvalue2;
  static inline bool OutlineStyleType_IsValid(int value) {
    return ParagraphStylePropertiesArchive_OutlineStyleType_IsValid(value);
  }
  static constexpr OutlineStyleType OutlineStyleType_MIN =
    ParagraphStylePropertiesArchive_OutlineStyleType_OutlineStyleType_MIN;
  static constexpr OutlineStyleType OutlineStyleType_MAX =
    ParagraphStylePropertiesArchive_OutlineStyleType_OutlineStyleType_MAX;
  static constexpr int OutlineStyleType_ARRAYSIZE =
    ParagraphStylePropertiesArchive_OutlineStyleType_OutlineStyleType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OutlineStyleType_descriptor() {
    return ParagraphStylePropertiesArchive_OutlineStyleType_descriptor();
  }
  template<typename T>
  static inline const std::string& OutlineStyleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OutlineStyleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OutlineStyleType_Name.");
    return ParagraphStylePropertiesArchive_OutlineStyleType_Name(enum_t_value);
  }
  static inline bool OutlineStyleType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OutlineStyleType* value) {
    return ParagraphStylePropertiesArchive_OutlineStyleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDecimalTabFieldNumber = 3,
    kFollowingStyleIdFieldNumber = 30,
    kTocStyleIdFieldNumber = 35,
    kFillFieldNumber = 6,
    kLineSpacingFieldNumber = 13,
    kRuleOffsetFieldNumber = 17,
    kTabsFieldNumber = 25,
    kStrokeFieldNumber = 32,
    kListStyleFieldNumber = 40,
    kFollowingStyleFieldNumber = 42,
    kAlignmentFieldNumber = 1,
    kDefaultTabStopsFieldNumber = 4,
    kDecimalTabNullFieldNumber = 2,
    kFillNullFieldNumber = 5,
    kHyphenateFieldNumber = 8,
    kKeepLinesTogetherFieldNumber = 9,
    kFirstLineIndentFieldNumber = 7,
    kLeftIndentFieldNumber = 11,
    kKeepWithNextFieldNumber = 10,
    kLineSpacingNullFieldNumber = 12,
    kPageBreakBeforeFieldNumber = 14,
    kRuleOffsetNullFieldNumber = 16,
    kBordersFieldNumber = 15,
    kRuleWidthFieldNumber = 18,
    kRightIndentFieldNumber = 19,
    kSpaceAfterFieldNumber = 20,
    kSpaceBeforeFieldNumber = 21,
    kOutlineLevelFieldNumber = 27,
    kTabsNullFieldNumber = 24,
    kWidowControlFieldNumber = 26,
    kFollowingStyleIdNullFieldNumber = 29,
    kStrokeNullFieldNumber = 31,
    kOutlineStyleFieldNumber = 28,
    kShowInTocFieldNumber = 33,
    kTocStyleIdNullFieldNumber = 34,
    kListStyleNullFieldNumber = 39,
    kFollowingStyleNullFieldNumber = 41,
    kShowInBookmarksListFieldNumber = 43,
    kShowInTocNavigatorFieldNumber = 44,
    kWritingDirectionFieldNumber = 38,
  };
  // optional string decimal_tab = 3;
  bool has_decimal_tab() const;
  private:
  bool _internal_has_decimal_tab() const;
  public:
  void clear_decimal_tab();
  const std::string& decimal_tab() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decimal_tab(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decimal_tab();
  std::string* release_decimal_tab();
  void set_allocated_decimal_tab(std::string* decimal_tab);
  private:
  const std::string& _internal_decimal_tab() const;
  void _internal_set_decimal_tab(const std::string& value);
  std::string* _internal_mutable_decimal_tab();
  public:

  // optional string following_style_id = 30;
  bool has_following_style_id() const;
  private:
  bool _internal_has_following_style_id() const;
  public:
  void clear_following_style_id();
  const std::string& following_style_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_following_style_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_following_style_id();
  std::string* release_following_style_id();
  void set_allocated_following_style_id(std::string* following_style_id);
  private:
  const std::string& _internal_following_style_id() const;
  void _internal_set_following_style_id(const std::string& value);
  std::string* _internal_mutable_following_style_id();
  public:

  // optional string toc_style_id = 35;
  bool has_toc_style_id() const;
  private:
  bool _internal_has_toc_style_id() const;
  public:
  void clear_toc_style_id();
  const std::string& toc_style_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_toc_style_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_toc_style_id();
  std::string* release_toc_style_id();
  void set_allocated_toc_style_id(std::string* toc_style_id);
  private:
  const std::string& _internal_toc_style_id() const;
  void _internal_set_toc_style_id(const std::string& value);
  std::string* _internal_mutable_toc_style_id();
  public:

  // optional .TSP.Color fill = 6;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  const ::TSP::Color& fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_fill();
  ::TSP::Color* mutable_fill();
  void set_allocated_fill(::TSP::Color* fill);
  private:
  const ::TSP::Color& _internal_fill() const;
  ::TSP::Color* _internal_mutable_fill();
  public:
  void unsafe_arena_set_allocated_fill(
      ::TSP::Color* fill);
  ::TSP::Color* unsafe_arena_release_fill();

  // optional .TSWP.LineSpacingArchive line_spacing = 13;
  bool has_line_spacing() const;
  private:
  bool _internal_has_line_spacing() const;
  public:
  void clear_line_spacing();
  const ::TSWP::LineSpacingArchive& line_spacing() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::LineSpacingArchive* release_line_spacing();
  ::TSWP::LineSpacingArchive* mutable_line_spacing();
  void set_allocated_line_spacing(::TSWP::LineSpacingArchive* line_spacing);
  private:
  const ::TSWP::LineSpacingArchive& _internal_line_spacing() const;
  ::TSWP::LineSpacingArchive* _internal_mutable_line_spacing();
  public:
  void unsafe_arena_set_allocated_line_spacing(
      ::TSWP::LineSpacingArchive* line_spacing);
  ::TSWP::LineSpacingArchive* unsafe_arena_release_line_spacing();

  // optional .TSP.Point rule_offset = 17;
  bool has_rule_offset() const;
  private:
  bool _internal_has_rule_offset() const;
  public:
  void clear_rule_offset();
  const ::TSP::Point& rule_offset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Point* release_rule_offset();
  ::TSP::Point* mutable_rule_offset();
  void set_allocated_rule_offset(::TSP::Point* rule_offset);
  private:
  const ::TSP::Point& _internal_rule_offset() const;
  ::TSP::Point* _internal_mutable_rule_offset();
  public:
  void unsafe_arena_set_allocated_rule_offset(
      ::TSP::Point* rule_offset);
  ::TSP::Point* unsafe_arena_release_rule_offset();

  // optional .TSWP.TabsArchive tabs = 25;
  bool has_tabs() const;
  private:
  bool _internal_has_tabs() const;
  public:
  void clear_tabs();
  const ::TSWP::TabsArchive& tabs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::TabsArchive* release_tabs();
  ::TSWP::TabsArchive* mutable_tabs();
  void set_allocated_tabs(::TSWP::TabsArchive* tabs);
  private:
  const ::TSWP::TabsArchive& _internal_tabs() const;
  ::TSWP::TabsArchive* _internal_mutable_tabs();
  public:
  void unsafe_arena_set_allocated_tabs(
      ::TSWP::TabsArchive* tabs);
  ::TSWP::TabsArchive* unsafe_arena_release_tabs();

  // optional .TSD.StrokeArchive stroke = 32;
  bool has_stroke() const;
  private:
  bool _internal_has_stroke() const;
  public:
  void clear_stroke();
  const ::TSD::StrokeArchive& stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_stroke();
  ::TSD::StrokeArchive* mutable_stroke();
  void set_allocated_stroke(::TSD::StrokeArchive* stroke);
  private:
  const ::TSD::StrokeArchive& _internal_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_stroke();
  public:
  void unsafe_arena_set_allocated_stroke(
      ::TSD::StrokeArchive* stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_stroke();

  // optional .TSP.Reference list_style = 40;
  bool has_list_style() const;
  private:
  bool _internal_has_list_style() const;
  public:
  void clear_list_style();
  const ::TSP::Reference& list_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_list_style();
  ::TSP::Reference* mutable_list_style();
  void set_allocated_list_style(::TSP::Reference* list_style);
  private:
  const ::TSP::Reference& _internal_list_style() const;
  ::TSP::Reference* _internal_mutable_list_style();
  public:
  void unsafe_arena_set_allocated_list_style(
      ::TSP::Reference* list_style);
  ::TSP::Reference* unsafe_arena_release_list_style();

  // optional .TSP.Reference following_style = 42;
  bool has_following_style() const;
  private:
  bool _internal_has_following_style() const;
  public:
  void clear_following_style();
  const ::TSP::Reference& following_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_following_style();
  ::TSP::Reference* mutable_following_style();
  void set_allocated_following_style(::TSP::Reference* following_style);
  private:
  const ::TSP::Reference& _internal_following_style() const;
  ::TSP::Reference* _internal_mutable_following_style();
  public:
  void unsafe_arena_set_allocated_following_style(
      ::TSP::Reference* following_style);
  ::TSP::Reference* unsafe_arena_release_following_style();

  // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  ::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType alignment() const;
  void set_alignment(::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType value);
  private:
  ::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType _internal_alignment() const;
  void _internal_set_alignment(::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType value);
  public:

  // optional float default_tab_stops = 4;
  bool has_default_tab_stops() const;
  private:
  bool _internal_has_default_tab_stops() const;
  public:
  void clear_default_tab_stops();
  float default_tab_stops() const;
  void set_default_tab_stops(float value);
  private:
  float _internal_default_tab_stops() const;
  void _internal_set_default_tab_stops(float value);
  public:

  // optional bool decimal_tab_null = 2;
  bool has_decimal_tab_null() const;
  private:
  bool _internal_has_decimal_tab_null() const;
  public:
  void clear_decimal_tab_null();
  bool decimal_tab_null() const;
  void set_decimal_tab_null(bool value);
  private:
  bool _internal_decimal_tab_null() const;
  void _internal_set_decimal_tab_null(bool value);
  public:

  // optional bool fill_null = 5;
  bool has_fill_null() const;
  private:
  bool _internal_has_fill_null() const;
  public:
  void clear_fill_null();
  bool fill_null() const;
  void set_fill_null(bool value);
  private:
  bool _internal_fill_null() const;
  void _internal_set_fill_null(bool value);
  public:

  // optional bool hyphenate = 8;
  bool has_hyphenate() const;
  private:
  bool _internal_has_hyphenate() const;
  public:
  void clear_hyphenate();
  bool hyphenate() const;
  void set_hyphenate(bool value);
  private:
  bool _internal_hyphenate() const;
  void _internal_set_hyphenate(bool value);
  public:

  // optional bool keep_lines_together = 9;
  bool has_keep_lines_together() const;
  private:
  bool _internal_has_keep_lines_together() const;
  public:
  void clear_keep_lines_together();
  bool keep_lines_together() const;
  void set_keep_lines_together(bool value);
  private:
  bool _internal_keep_lines_together() const;
  void _internal_set_keep_lines_together(bool value);
  public:

  // optional float first_line_indent = 7;
  bool has_first_line_indent() const;
  private:
  bool _internal_has_first_line_indent() const;
  public:
  void clear_first_line_indent();
  float first_line_indent() const;
  void set_first_line_indent(float value);
  private:
  float _internal_first_line_indent() const;
  void _internal_set_first_line_indent(float value);
  public:

  // optional float left_indent = 11;
  bool has_left_indent() const;
  private:
  bool _internal_has_left_indent() const;
  public:
  void clear_left_indent();
  float left_indent() const;
  void set_left_indent(float value);
  private:
  float _internal_left_indent() const;
  void _internal_set_left_indent(float value);
  public:

  // optional bool keep_with_next = 10;
  bool has_keep_with_next() const;
  private:
  bool _internal_has_keep_with_next() const;
  public:
  void clear_keep_with_next();
  bool keep_with_next() const;
  void set_keep_with_next(bool value);
  private:
  bool _internal_keep_with_next() const;
  void _internal_set_keep_with_next(bool value);
  public:

  // optional bool line_spacing_null = 12;
  bool has_line_spacing_null() const;
  private:
  bool _internal_has_line_spacing_null() const;
  public:
  void clear_line_spacing_null();
  bool line_spacing_null() const;
  void set_line_spacing_null(bool value);
  private:
  bool _internal_line_spacing_null() const;
  void _internal_set_line_spacing_null(bool value);
  public:

  // optional bool page_break_before = 14;
  bool has_page_break_before() const;
  private:
  bool _internal_has_page_break_before() const;
  public:
  void clear_page_break_before();
  bool page_break_before() const;
  void set_page_break_before(bool value);
  private:
  bool _internal_page_break_before() const;
  void _internal_set_page_break_before(bool value);
  public:

  // optional bool rule_offset_null = 16;
  bool has_rule_offset_null() const;
  private:
  bool _internal_has_rule_offset_null() const;
  public:
  void clear_rule_offset_null();
  bool rule_offset_null() const;
  void set_rule_offset_null(bool value);
  private:
  bool _internal_rule_offset_null() const;
  void _internal_set_rule_offset_null(bool value);
  public:

  // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
  bool has_borders() const;
  private:
  bool _internal_has_borders() const;
  public:
  void clear_borders();
  ::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType borders() const;
  void set_borders(::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType value);
  private:
  ::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType _internal_borders() const;
  void _internal_set_borders(::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType value);
  public:

  // optional float rule_width = 18;
  bool has_rule_width() const;
  private:
  bool _internal_has_rule_width() const;
  public:
  void clear_rule_width();
  float rule_width() const;
  void set_rule_width(float value);
  private:
  float _internal_rule_width() const;
  void _internal_set_rule_width(float value);
  public:

  // optional float right_indent = 19;
  bool has_right_indent() const;
  private:
  bool _internal_has_right_indent() const;
  public:
  void clear_right_indent();
  float right_indent() const;
  void set_right_indent(float value);
  private:
  float _internal_right_indent() const;
  void _internal_set_right_indent(float value);
  public:

  // optional float space_after = 20;
  bool has_space_after() const;
  private:
  bool _internal_has_space_after() const;
  public:
  void clear_space_after();
  float space_after() const;
  void set_space_after(float value);
  private:
  float _internal_space_after() const;
  void _internal_set_space_after(float value);
  public:

  // optional float space_before = 21;
  bool has_space_before() const;
  private:
  bool _internal_has_space_before() const;
  public:
  void clear_space_before();
  float space_before() const;
  void set_space_before(float value);
  private:
  float _internal_space_before() const;
  void _internal_set_space_before(float value);
  public:

  // optional uint32 outline_level = 27;
  bool has_outline_level() const;
  private:
  bool _internal_has_outline_level() const;
  public:
  void clear_outline_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 outline_level() const;
  void set_outline_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outline_level() const;
  void _internal_set_outline_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool tabs_null = 24;
  bool has_tabs_null() const;
  private:
  bool _internal_has_tabs_null() const;
  public:
  void clear_tabs_null();
  bool tabs_null() const;
  void set_tabs_null(bool value);
  private:
  bool _internal_tabs_null() const;
  void _internal_set_tabs_null(bool value);
  public:

  // optional bool widow_control = 26;
  bool has_widow_control() const;
  private:
  bool _internal_has_widow_control() const;
  public:
  void clear_widow_control();
  bool widow_control() const;
  void set_widow_control(bool value);
  private:
  bool _internal_widow_control() const;
  void _internal_set_widow_control(bool value);
  public:

  // optional bool following_style_id_null = 29;
  bool has_following_style_id_null() const;
  private:
  bool _internal_has_following_style_id_null() const;
  public:
  void clear_following_style_id_null();
  bool following_style_id_null() const;
  void set_following_style_id_null(bool value);
  private:
  bool _internal_following_style_id_null() const;
  void _internal_set_following_style_id_null(bool value);
  public:

  // optional bool stroke_null = 31;
  bool has_stroke_null() const;
  private:
  bool _internal_has_stroke_null() const;
  public:
  void clear_stroke_null();
  bool stroke_null() const;
  void set_stroke_null(bool value);
  private:
  bool _internal_stroke_null() const;
  void _internal_set_stroke_null(bool value);
  public:

  // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
  bool has_outline_style() const;
  private:
  bool _internal_has_outline_style() const;
  public:
  void clear_outline_style();
  ::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType outline_style() const;
  void set_outline_style(::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType value);
  private:
  ::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType _internal_outline_style() const;
  void _internal_set_outline_style(::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType value);
  public:

  // optional bool show_in_toc = 33;
  bool has_show_in_toc() const;
  private:
  bool _internal_has_show_in_toc() const;
  public:
  void clear_show_in_toc();
  bool show_in_toc() const;
  void set_show_in_toc(bool value);
  private:
  bool _internal_show_in_toc() const;
  void _internal_set_show_in_toc(bool value);
  public:

  // optional bool toc_style_id_null = 34;
  bool has_toc_style_id_null() const;
  private:
  bool _internal_has_toc_style_id_null() const;
  public:
  void clear_toc_style_id_null();
  bool toc_style_id_null() const;
  void set_toc_style_id_null(bool value);
  private:
  bool _internal_toc_style_id_null() const;
  void _internal_set_toc_style_id_null(bool value);
  public:

  // optional bool list_style_null = 39;
  bool has_list_style_null() const;
  private:
  bool _internal_has_list_style_null() const;
  public:
  void clear_list_style_null();
  bool list_style_null() const;
  void set_list_style_null(bool value);
  private:
  bool _internal_list_style_null() const;
  void _internal_set_list_style_null(bool value);
  public:

  // optional bool following_style_null = 41;
  bool has_following_style_null() const;
  private:
  bool _internal_has_following_style_null() const;
  public:
  void clear_following_style_null();
  bool following_style_null() const;
  void set_following_style_null(bool value);
  private:
  bool _internal_following_style_null() const;
  void _internal_set_following_style_null(bool value);
  public:

  // optional bool show_in_bookmarks_list = 43;
  bool has_show_in_bookmarks_list() const;
  private:
  bool _internal_has_show_in_bookmarks_list() const;
  public:
  void clear_show_in_bookmarks_list();
  bool show_in_bookmarks_list() const;
  void set_show_in_bookmarks_list(bool value);
  private:
  bool _internal_show_in_bookmarks_list() const;
  void _internal_set_show_in_bookmarks_list(bool value);
  public:

  // optional bool show_in_toc_navigator = 44;
  bool has_show_in_toc_navigator() const;
  private:
  bool _internal_has_show_in_toc_navigator() const;
  public:
  void clear_show_in_toc_navigator();
  bool show_in_toc_navigator() const;
  void set_show_in_toc_navigator(bool value);
  private:
  bool _internal_show_in_toc_navigator() const;
  void _internal_set_show_in_toc_navigator(bool value);
  public:

  // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
  bool has_writing_direction() const;
  private:
  bool _internal_has_writing_direction() const;
  public:
  void clear_writing_direction();
  ::TSWP::WritingDirectionType writing_direction() const;
  void set_writing_direction(::TSWP::WritingDirectionType value);
  private:
  ::TSWP::WritingDirectionType _internal_writing_direction() const;
  void _internal_set_writing_direction(::TSWP::WritingDirectionType value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ParagraphStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decimal_tab_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr following_style_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toc_style_id_;
  ::TSP::Color* fill_;
  ::TSWP::LineSpacingArchive* line_spacing_;
  ::TSP::Point* rule_offset_;
  ::TSWP::TabsArchive* tabs_;
  ::TSD::StrokeArchive* stroke_;
  ::TSP::Reference* list_style_;
  ::TSP::Reference* following_style_;
  int alignment_;
  float default_tab_stops_;
  bool decimal_tab_null_;
  bool fill_null_;
  bool hyphenate_;
  bool keep_lines_together_;
  float first_line_indent_;
  float left_indent_;
  bool keep_with_next_;
  bool line_spacing_null_;
  bool page_break_before_;
  bool rule_offset_null_;
  int borders_;
  float rule_width_;
  float right_indent_;
  float space_after_;
  float space_before_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outline_level_;
  bool tabs_null_;
  bool widow_control_;
  bool following_style_id_null_;
  bool stroke_null_;
  int outline_style_;
  bool show_in_toc_;
  bool toc_style_id_null_;
  bool list_style_null_;
  bool following_style_null_;
  bool show_in_bookmarks_list_;
  bool show_in_toc_navigator_;
  int writing_direction_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ParagraphStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ParagraphStyleArchive) */ {
 public:
  inline ParagraphStyleArchive() : ParagraphStyleArchive(nullptr) {}
  ~ParagraphStyleArchive() override;
  explicit constexpr ParagraphStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParagraphStyleArchive(const ParagraphStyleArchive& from);
  ParagraphStyleArchive(ParagraphStyleArchive&& from) noexcept
    : ParagraphStyleArchive() {
    *this = ::std::move(from);
  }

  inline ParagraphStyleArchive& operator=(const ParagraphStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParagraphStyleArchive& operator=(ParagraphStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParagraphStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParagraphStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ParagraphStyleArchive*>(
               &_ParagraphStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ParagraphStyleArchive& a, ParagraphStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ParagraphStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParagraphStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParagraphStyleArchive* New() const final {
    return CreateMaybeMessage<ParagraphStyleArchive>(nullptr);
  }

  ParagraphStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParagraphStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParagraphStyleArchive& from);
  void MergeFrom(const ParagraphStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParagraphStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ParagraphStyleArchive";
  }
  protected:
  explicit ParagraphStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCharPropertiesFieldNumber = 11,
    kParaPropertiesFieldNumber = 12,
    kOverrideCountFieldNumber = 10,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  bool has_char_properties() const;
  private:
  bool _internal_has_char_properties() const;
  public:
  void clear_char_properties();
  const ::TSWP::CharacterStylePropertiesArchive& char_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::CharacterStylePropertiesArchive* release_char_properties();
  ::TSWP::CharacterStylePropertiesArchive* mutable_char_properties();
  void set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties);
  private:
  const ::TSWP::CharacterStylePropertiesArchive& _internal_char_properties() const;
  ::TSWP::CharacterStylePropertiesArchive* _internal_mutable_char_properties();
  public:
  void unsafe_arena_set_allocated_char_properties(
      ::TSWP::CharacterStylePropertiesArchive* char_properties);
  ::TSWP::CharacterStylePropertiesArchive* unsafe_arena_release_char_properties();

  // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
  bool has_para_properties() const;
  private:
  bool _internal_has_para_properties() const;
  public:
  void clear_para_properties();
  const ::TSWP::ParagraphStylePropertiesArchive& para_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ParagraphStylePropertiesArchive* release_para_properties();
  ::TSWP::ParagraphStylePropertiesArchive* mutable_para_properties();
  void set_allocated_para_properties(::TSWP::ParagraphStylePropertiesArchive* para_properties);
  private:
  const ::TSWP::ParagraphStylePropertiesArchive& _internal_para_properties() const;
  ::TSWP::ParagraphStylePropertiesArchive* _internal_mutable_para_properties();
  public:
  void unsafe_arena_set_allocated_para_properties(
      ::TSWP::ParagraphStylePropertiesArchive* para_properties);
  ::TSWP::ParagraphStylePropertiesArchive* unsafe_arena_release_para_properties();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ParagraphStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TSWP::CharacterStylePropertiesArchive* char_properties_;
  ::TSWP::ParagraphStylePropertiesArchive* para_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ListStyleArchive_LabelGeometry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ListStyleArchive.LabelGeometry) */ {
 public:
  inline ListStyleArchive_LabelGeometry() : ListStyleArchive_LabelGeometry(nullptr) {}
  ~ListStyleArchive_LabelGeometry() override;
  explicit constexpr ListStyleArchive_LabelGeometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListStyleArchive_LabelGeometry(const ListStyleArchive_LabelGeometry& from);
  ListStyleArchive_LabelGeometry(ListStyleArchive_LabelGeometry&& from) noexcept
    : ListStyleArchive_LabelGeometry() {
    *this = ::std::move(from);
  }

  inline ListStyleArchive_LabelGeometry& operator=(const ListStyleArchive_LabelGeometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStyleArchive_LabelGeometry& operator=(ListStyleArchive_LabelGeometry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListStyleArchive_LabelGeometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListStyleArchive_LabelGeometry* internal_default_instance() {
    return reinterpret_cast<const ListStyleArchive_LabelGeometry*>(
               &_ListStyleArchive_LabelGeometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ListStyleArchive_LabelGeometry& a, ListStyleArchive_LabelGeometry& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStyleArchive_LabelGeometry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListStyleArchive_LabelGeometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStyleArchive_LabelGeometry* New() const final {
    return CreateMaybeMessage<ListStyleArchive_LabelGeometry>(nullptr);
  }

  ListStyleArchive_LabelGeometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStyleArchive_LabelGeometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStyleArchive_LabelGeometry& from);
  void MergeFrom(const ListStyleArchive_LabelGeometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStyleArchive_LabelGeometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ListStyleArchive.LabelGeometry";
  }
  protected:
  explicit ListStyleArchive_LabelGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaselineOffsetFieldNumber = 2,
    kScaleFieldNumber = 1,
    kScaleWithTextFieldNumber = 3,
  };
  // optional float baseline_offset = 2 [default = 0];
  bool has_baseline_offset() const;
  private:
  bool _internal_has_baseline_offset() const;
  public:
  void clear_baseline_offset();
  float baseline_offset() const;
  void set_baseline_offset(float value);
  private:
  float _internal_baseline_offset() const;
  void _internal_set_baseline_offset(float value);
  public:

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional bool scale_with_text = 3 [default = true];
  bool has_scale_with_text() const;
  private:
  bool _internal_has_scale_with_text() const;
  public:
  void clear_scale_with_text();
  bool scale_with_text() const;
  void set_scale_with_text(bool value);
  private:
  bool _internal_scale_with_text() const;
  void _internal_set_scale_with_text(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ListStyleArchive.LabelGeometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float baseline_offset_;
  float scale_;
  bool scale_with_text_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ListStyleArchive_LabelImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ListStyleArchive.LabelImage) */ {
 public:
  inline ListStyleArchive_LabelImage() : ListStyleArchive_LabelImage(nullptr) {}
  ~ListStyleArchive_LabelImage() override;
  explicit constexpr ListStyleArchive_LabelImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListStyleArchive_LabelImage(const ListStyleArchive_LabelImage& from);
  ListStyleArchive_LabelImage(ListStyleArchive_LabelImage&& from) noexcept
    : ListStyleArchive_LabelImage() {
    *this = ::std::move(from);
  }

  inline ListStyleArchive_LabelImage& operator=(const ListStyleArchive_LabelImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStyleArchive_LabelImage& operator=(ListStyleArchive_LabelImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListStyleArchive_LabelImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListStyleArchive_LabelImage* internal_default_instance() {
    return reinterpret_cast<const ListStyleArchive_LabelImage*>(
               &_ListStyleArchive_LabelImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ListStyleArchive_LabelImage& a, ListStyleArchive_LabelImage& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStyleArchive_LabelImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListStyleArchive_LabelImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStyleArchive_LabelImage* New() const final {
    return CreateMaybeMessage<ListStyleArchive_LabelImage>(nullptr);
  }

  ListStyleArchive_LabelImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStyleArchive_LabelImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStyleArchive_LabelImage& from);
  void MergeFrom(const ListStyleArchive_LabelImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStyleArchive_LabelImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ListStyleArchive.LabelImage";
  }
  protected:
  explicit ListStyleArchive_LabelImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseImageFieldNumber = 1,
    kImageFieldNumber = 3,
    kImageNullFieldNumber = 2,
  };
  // optional .TSP.Reference database_image = 1;
  bool has_database_image() const;
  private:
  bool _internal_has_database_image() const;
  public:
  void clear_database_image();
  const ::TSP::Reference& database_image() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_database_image();
  ::TSP::Reference* mutable_database_image();
  void set_allocated_database_image(::TSP::Reference* database_image);
  private:
  const ::TSP::Reference& _internal_database_image() const;
  ::TSP::Reference* _internal_mutable_database_image();
  public:
  void unsafe_arena_set_allocated_database_image(
      ::TSP::Reference* database_image);
  ::TSP::Reference* unsafe_arena_release_database_image();

  // optional .TSP.DataReference image = 3;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::TSP::DataReference& image() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_image();
  ::TSP::DataReference* mutable_image();
  void set_allocated_image(::TSP::DataReference* image);
  private:
  const ::TSP::DataReference& _internal_image() const;
  ::TSP::DataReference* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::TSP::DataReference* image);
  ::TSP::DataReference* unsafe_arena_release_image();

  // optional bool image_null = 2;
  bool has_image_null() const;
  private:
  bool _internal_has_image_null() const;
  public:
  void clear_image_null();
  bool image_null() const;
  void set_image_null(bool value);
  private:
  bool _internal_image_null() const;
  void _internal_set_image_null(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ListStyleArchive.LabelImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* database_image_;
  ::TSP::DataReference* image_;
  bool image_null_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ListStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ListStyleArchive) */ {
 public:
  inline ListStyleArchive() : ListStyleArchive(nullptr) {}
  ~ListStyleArchive() override;
  explicit constexpr ListStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListStyleArchive(const ListStyleArchive& from);
  ListStyleArchive(ListStyleArchive&& from) noexcept
    : ListStyleArchive() {
    *this = ::std::move(from);
  }

  inline ListStyleArchive& operator=(const ListStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStyleArchive& operator=(ListStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ListStyleArchive*>(
               &_ListStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListStyleArchive& a, ListStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStyleArchive* New() const final {
    return CreateMaybeMessage<ListStyleArchive>(nullptr);
  }

  ListStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStyleArchive& from);
  void MergeFrom(const ListStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ListStyleArchive";
  }
  protected:
  explicit ListStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListStyleArchive_LabelGeometry LabelGeometry;
  typedef ListStyleArchive_LabelImage LabelImage;

  typedef ListStyleArchive_LabelType LabelType;
  static constexpr LabelType kNone =
    ListStyleArchive_LabelType_kNone;
  static constexpr LabelType kImage =
    ListStyleArchive_LabelType_kImage;
  static constexpr LabelType kString =
    ListStyleArchive_LabelType_kString;
  static constexpr LabelType kNumber =
    ListStyleArchive_LabelType_kNumber;
  static inline bool LabelType_IsValid(int value) {
    return ListStyleArchive_LabelType_IsValid(value);
  }
  static constexpr LabelType LabelType_MIN =
    ListStyleArchive_LabelType_LabelType_MIN;
  static constexpr LabelType LabelType_MAX =
    ListStyleArchive_LabelType_LabelType_MAX;
  static constexpr int LabelType_ARRAYSIZE =
    ListStyleArchive_LabelType_LabelType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LabelType_descriptor() {
    return ListStyleArchive_LabelType_descriptor();
  }
  template<typename T>
  static inline const std::string& LabelType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LabelType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LabelType_Name.");
    return ListStyleArchive_LabelType_Name(enum_t_value);
  }
  static inline bool LabelType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LabelType* value) {
    return ListStyleArchive_LabelType_Parse(name, value);
  }

  typedef ListStyleArchive_NumberType NumberType;
  static constexpr NumberType kNumericDecimal =
    ListStyleArchive_NumberType_kNumericDecimal;
  static constexpr NumberType kNumericDoubleParen =
    ListStyleArchive_NumberType_kNumericDoubleParen;
  static constexpr NumberType kNumericRightParen =
    ListStyleArchive_NumberType_kNumericRightParen;
  static constexpr NumberType kRomanUpperDecimal =
    ListStyleArchive_NumberType_kRomanUpperDecimal;
  static constexpr NumberType kRomanUpperDoubleParen =
    ListStyleArchive_NumberType_kRomanUpperDoubleParen;
  static constexpr NumberType kRomanUpperRightParen =
    ListStyleArchive_NumberType_kRomanUpperRightParen;
  static constexpr NumberType kRomanLowerDecimal =
    ListStyleArchive_NumberType_kRomanLowerDecimal;
  static constexpr NumberType kRomanLowerDoubleParen =
    ListStyleArchive_NumberType_kRomanLowerDoubleParen;
  static constexpr NumberType kRomanLowerRightParen =
    ListStyleArchive_NumberType_kRomanLowerRightParen;
  static constexpr NumberType kAlphaUpperDecimal =
    ListStyleArchive_NumberType_kAlphaUpperDecimal;
  static constexpr NumberType kAlphaUpperDoubleParen =
    ListStyleArchive_NumberType_kAlphaUpperDoubleParen;
  static constexpr NumberType kAlphaUpperRightParen =
    ListStyleArchive_NumberType_kAlphaUpperRightParen;
  static constexpr NumberType kAlphaLowerDecimal =
    ListStyleArchive_NumberType_kAlphaLowerDecimal;
  static constexpr NumberType kAlphaLowerDoubleParen =
    ListStyleArchive_NumberType_kAlphaLowerDoubleParen;
  static constexpr NumberType kAlphaLowerRightParen =
    ListStyleArchive_NumberType_kAlphaLowerRightParen;
  static constexpr NumberType kIdeographicJapaneseDecimalKind =
    ListStyleArchive_NumberType_kIdeographicJapaneseDecimalKind;
  static constexpr NumberType kIdeographicJapaneseDoubleParenKind =
    ListStyleArchive_NumberType_kIdeographicJapaneseDoubleParenKind;
  static constexpr NumberType kIdeographicJapaneseRightParenKind =
    ListStyleArchive_NumberType_kIdeographicJapaneseRightParenKind;
  static constexpr NumberType kHiraganaDecimalKind =
    ListStyleArchive_NumberType_kHiraganaDecimalKind;
  static constexpr NumberType kHiraganaDoubleParenKind =
    ListStyleArchive_NumberType_kHiraganaDoubleParenKind;
  static constexpr NumberType kHiraganaRightParenKind =
    ListStyleArchive_NumberType_kHiraganaRightParenKind;
  static constexpr NumberType kKatakanaDecimalKind =
    ListStyleArchive_NumberType_kKatakanaDecimalKind;
  static constexpr NumberType kKatakanaDoubleParenKind =
    ListStyleArchive_NumberType_kKatakanaDoubleParenKind;
  static constexpr NumberType kKatakanaRightParenKind =
    ListStyleArchive_NumberType_kKatakanaRightParenKind;
  static constexpr NumberType kHiraganaIrohaDecimalKind =
    ListStyleArchive_NumberType_kHiraganaIrohaDecimalKind;
  static constexpr NumberType kHiraganaIrohaDoubleParenKind =
    ListStyleArchive_NumberType_kHiraganaIrohaDoubleParenKind;
  static constexpr NumberType kHiraganaIrohaRightParenKind =
    ListStyleArchive_NumberType_kHiraganaIrohaRightParenKind;
  static constexpr NumberType kKatakanaIrohaDecimalKind =
    ListStyleArchive_NumberType_kKatakanaIrohaDecimalKind;
  static constexpr NumberType kKatakanaIrohaDoubleParenKind =
    ListStyleArchive_NumberType_kKatakanaIrohaDoubleParenKind;
  static constexpr NumberType kKatakanaIrohaRightParenKind =
    ListStyleArchive_NumberType_kKatakanaIrohaRightParenKind;
  static constexpr NumberType kIdeographicSimplifiedChineseDecimalKind =
    ListStyleArchive_NumberType_kIdeographicSimplifiedChineseDecimalKind;
  static constexpr NumberType kIdeographicSimplifiedChineseDoubleParenKind =
    ListStyleArchive_NumberType_kIdeographicSimplifiedChineseDoubleParenKind;
  static constexpr NumberType kIdeographicSimplifiedChineseRightParenKind =
    ListStyleArchive_NumberType_kIdeographicSimplifiedChineseRightParenKind;
  static constexpr NumberType kIdeographicTraditionalChineseDecimalKind =
    ListStyleArchive_NumberType_kIdeographicTraditionalChineseDecimalKind;
  static constexpr NumberType kIdeographicTraditionalChineseDoubleParenKind =
    ListStyleArchive_NumberType_kIdeographicTraditionalChineseDoubleParenKind;
  static constexpr NumberType kIdeographicTraditionalChineseRightParenKind =
    ListStyleArchive_NumberType_kIdeographicTraditionalChineseRightParenKind;
  static constexpr NumberType kIdeographicFormalJapaneseDecimalKind =
    ListStyleArchive_NumberType_kIdeographicFormalJapaneseDecimalKind;
  static constexpr NumberType kIdeographicFormalJapaneseDoubleParenKind =
    ListStyleArchive_NumberType_kIdeographicFormalJapaneseDoubleParenKind;
  static constexpr NumberType kIdeographicFormalJapaneseRightParenKind =
    ListStyleArchive_NumberType_kIdeographicFormalJapaneseRightParenKind;
  static constexpr NumberType kIdeographicFormalSimplifiedChineseDecimalKind =
    ListStyleArchive_NumberType_kIdeographicFormalSimplifiedChineseDecimalKind;
  static constexpr NumberType kIdeographicFormalSimplifiedChineseDoubleParenKind =
    ListStyleArchive_NumberType_kIdeographicFormalSimplifiedChineseDoubleParenKind;
  static constexpr NumberType kIdeographicFormalSimplifiedChineseRightParenKind =
    ListStyleArchive_NumberType_kIdeographicFormalSimplifiedChineseRightParenKind;
  static constexpr NumberType kIdeographicFormalTraditionalChineseDecimalKind =
    ListStyleArchive_NumberType_kIdeographicFormalTraditionalChineseDecimalKind;
  static constexpr NumberType kIdeographicFormalTraditionalChineseDoubleParenKind =
    ListStyleArchive_NumberType_kIdeographicFormalTraditionalChineseDoubleParenKind;
  static constexpr NumberType kIdeographicFormalTraditionalChineseRightParenKind =
    ListStyleArchive_NumberType_kIdeographicFormalTraditionalChineseRightParenKind;
  static constexpr NumberType kKoreanAlphabetDecimalKind =
    ListStyleArchive_NumberType_kKoreanAlphabetDecimalKind;
  static constexpr NumberType kKoreanAlphabetDoubleParenKind =
    ListStyleArchive_NumberType_kKoreanAlphabetDoubleParenKind;
  static constexpr NumberType kKoreanAlphabetRightParenKind =
    ListStyleArchive_NumberType_kKoreanAlphabetRightParenKind;
  static constexpr NumberType kCircledNumberKind =
    ListStyleArchive_NumberType_kCircledNumberKind;
  static constexpr NumberType kArabianNumericDecimalKind =
    ListStyleArchive_NumberType_kArabianNumericDecimalKind;
  static constexpr NumberType kArabianNumericDoubleParenKind =
    ListStyleArchive_NumberType_kArabianNumericDoubleParenKind;
  static constexpr NumberType kArabianNumericRightParenKind =
    ListStyleArchive_NumberType_kArabianNumericRightParenKind;
  static constexpr NumberType kArabianAlphaDecimalKind =
    ListStyleArchive_NumberType_kArabianAlphaDecimalKind;
  static constexpr NumberType kArabianAlphaDoubleParenKind =
    ListStyleArchive_NumberType_kArabianAlphaDoubleParenKind;
  static constexpr NumberType kArabianAlphaRightParenKind =
    ListStyleArchive_NumberType_kArabianAlphaRightParenKind;
  static constexpr NumberType kArabianAbjadDecimalKind =
    ListStyleArchive_NumberType_kArabianAbjadDecimalKind;
  static constexpr NumberType kArabianAbjadDoubleParenKind =
    ListStyleArchive_NumberType_kArabianAbjadDoubleParenKind;
  static constexpr NumberType kArabianAbjadRightParenKind =
    ListStyleArchive_NumberType_kArabianAbjadRightParenKind;
  static constexpr NumberType kHebrewAlphaDecimalKind =
    ListStyleArchive_NumberType_kHebrewAlphaDecimalKind;
  static constexpr NumberType kHebrewAlphaDoubleParenKind =
    ListStyleArchive_NumberType_kHebrewAlphaDoubleParenKind;
  static constexpr NumberType kHebrewAlphaRightParenKind =
    ListStyleArchive_NumberType_kHebrewAlphaRightParenKind;
  static constexpr NumberType kHebrewBiblicalStandardKind =
    ListStyleArchive_NumberType_kHebrewBiblicalStandardKind;
  static constexpr NumberType kHebrewBiblicalDecimalKind =
    ListStyleArchive_NumberType_kHebrewBiblicalDecimalKind;
  static constexpr NumberType kHebrewBiblicalDoubleParenKind =
    ListStyleArchive_NumberType_kHebrewBiblicalDoubleParenKind;
  static constexpr NumberType kHebrewBiblicalRightParenKind =
    ListStyleArchive_NumberType_kHebrewBiblicalRightParenKind;
  static inline bool NumberType_IsValid(int value) {
    return ListStyleArchive_NumberType_IsValid(value);
  }
  static constexpr NumberType NumberType_MIN =
    ListStyleArchive_NumberType_NumberType_MIN;
  static constexpr NumberType NumberType_MAX =
    ListStyleArchive_NumberType_NumberType_MAX;
  static constexpr int NumberType_ARRAYSIZE =
    ListStyleArchive_NumberType_NumberType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NumberType_descriptor() {
    return ListStyleArchive_NumberType_descriptor();
  }
  template<typename T>
  static inline const std::string& NumberType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NumberType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NumberType_Name.");
    return ListStyleArchive_NumberType_Name(enum_t_value);
  }
  static inline bool NumberType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NumberType* value) {
    return ListStyleArchive_NumberType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelTypesFieldNumber = 11,
    kTextIndentsFieldNumber = 12,
    kIndentsFieldNumber = 13,
    kGeometriesFieldNumber = 14,
    kNumberTypesFieldNumber = 15,
    kStringsFieldNumber = 16,
    kImagesFieldNumber = 17,
    kTieredNumbersFieldNumber = 25,
    kFontNameFieldNumber = 23,
    kSuperFieldNumber = 1,
    kShadowFieldNumber = 19,
    kFontColorFieldNumber = 21,
    kOverrideCountFieldNumber = 10,
    kShadowNullFieldNumber = 18,
    kFontColorNullFieldNumber = 20,
    kFontNameNullFieldNumber = 22,
    kWritingDirectionFieldNumber = 24,
  };
  // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
  int label_types_size() const;
  private:
  int _internal_label_types_size() const;
  public:
  void clear_label_types();
  private:
  ::TSWP::ListStyleArchive_LabelType _internal_label_types(int index) const;
  void _internal_add_label_types(::TSWP::ListStyleArchive_LabelType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_label_types();
  public:
  ::TSWP::ListStyleArchive_LabelType label_types(int index) const;
  void set_label_types(int index, ::TSWP::ListStyleArchive_LabelType value);
  void add_label_types(::TSWP::ListStyleArchive_LabelType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& label_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_label_types();

  // repeated float text_indents = 12;
  int text_indents_size() const;
  private:
  int _internal_text_indents_size() const;
  public:
  void clear_text_indents();
  private:
  float _internal_text_indents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_text_indents() const;
  void _internal_add_text_indents(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_text_indents();
  public:
  float text_indents(int index) const;
  void set_text_indents(int index, float value);
  void add_text_indents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      text_indents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_text_indents();

  // repeated float indents = 13;
  int indents_size() const;
  private:
  int _internal_indents_size() const;
  public:
  void clear_indents();
  private:
  float _internal_indents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_indents() const;
  void _internal_add_indents(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_indents();
  public:
  float indents(int index) const;
  void set_indents(int index, float value);
  void add_indents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      indents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_indents();

  // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
  int geometries_size() const;
  private:
  int _internal_geometries_size() const;
  public:
  void clear_geometries();
  ::TSWP::ListStyleArchive_LabelGeometry* mutable_geometries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelGeometry >*
      mutable_geometries();
  private:
  const ::TSWP::ListStyleArchive_LabelGeometry& _internal_geometries(int index) const;
  ::TSWP::ListStyleArchive_LabelGeometry* _internal_add_geometries();
  public:
  const ::TSWP::ListStyleArchive_LabelGeometry& geometries(int index) const;
  ::TSWP::ListStyleArchive_LabelGeometry* add_geometries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelGeometry >&
      geometries() const;

  // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
  int number_types_size() const;
  private:
  int _internal_number_types_size() const;
  public:
  void clear_number_types();
  private:
  ::TSWP::ListStyleArchive_NumberType _internal_number_types(int index) const;
  void _internal_add_number_types(::TSWP::ListStyleArchive_NumberType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_number_types();
  public:
  ::TSWP::ListStyleArchive_NumberType number_types(int index) const;
  void set_number_types(int index, ::TSWP::ListStyleArchive_NumberType value);
  void add_number_types(::TSWP::ListStyleArchive_NumberType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& number_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_number_types();

  // repeated string strings = 16;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::TSWP::ListStyleArchive_LabelImage* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelImage >*
      mutable_images();
  private:
  const ::TSWP::ListStyleArchive_LabelImage& _internal_images(int index) const;
  ::TSWP::ListStyleArchive_LabelImage* _internal_add_images();
  public:
  const ::TSWP::ListStyleArchive_LabelImage& images(int index) const;
  ::TSWP::ListStyleArchive_LabelImage* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelImage >&
      images() const;

  // repeated bool tiered_numbers = 25;
  int tiered_numbers_size() const;
  private:
  int _internal_tiered_numbers_size() const;
  public:
  void clear_tiered_numbers();
  private:
  bool _internal_tiered_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_tiered_numbers() const;
  void _internal_add_tiered_numbers(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_tiered_numbers();
  public:
  bool tiered_numbers(int index) const;
  void set_tiered_numbers(int index, bool value);
  void add_tiered_numbers(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      tiered_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_tiered_numbers();

  // optional string font_name = 23;
  bool has_font_name() const;
  private:
  bool _internal_has_font_name() const;
  public:
  void clear_font_name();
  const std::string& font_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_font_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_font_name();
  std::string* release_font_name();
  void set_allocated_font_name(std::string* font_name);
  private:
  const std::string& _internal_font_name() const;
  void _internal_set_font_name(const std::string& value);
  std::string* _internal_mutable_font_name();
  public:

  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSD.ShadowArchive shadow = 19;
  bool has_shadow() const;
  private:
  bool _internal_has_shadow() const;
  public:
  void clear_shadow();
  const ::TSD::ShadowArchive& shadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_shadow();
  ::TSD::ShadowArchive* mutable_shadow();
  void set_allocated_shadow(::TSD::ShadowArchive* shadow);
  private:
  const ::TSD::ShadowArchive& _internal_shadow() const;
  ::TSD::ShadowArchive* _internal_mutable_shadow();
  public:
  void unsafe_arena_set_allocated_shadow(
      ::TSD::ShadowArchive* shadow);
  ::TSD::ShadowArchive* unsafe_arena_release_shadow();

  // optional .TSP.Color font_color = 21;
  bool has_font_color() const;
  private:
  bool _internal_has_font_color() const;
  public:
  void clear_font_color();
  const ::TSP::Color& font_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_font_color();
  ::TSP::Color* mutable_font_color();
  void set_allocated_font_color(::TSP::Color* font_color);
  private:
  const ::TSP::Color& _internal_font_color() const;
  ::TSP::Color* _internal_mutable_font_color();
  public:
  void unsafe_arena_set_allocated_font_color(
      ::TSP::Color* font_color);
  ::TSP::Color* unsafe_arena_release_font_color();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool shadow_null = 18;
  bool has_shadow_null() const;
  private:
  bool _internal_has_shadow_null() const;
  public:
  void clear_shadow_null();
  bool shadow_null() const;
  void set_shadow_null(bool value);
  private:
  bool _internal_shadow_null() const;
  void _internal_set_shadow_null(bool value);
  public:

  // optional bool font_color_null = 20;
  bool has_font_color_null() const;
  private:
  bool _internal_has_font_color_null() const;
  public:
  void clear_font_color_null();
  bool font_color_null() const;
  void set_font_color_null(bool value);
  private:
  bool _internal_font_color_null() const;
  void _internal_set_font_color_null(bool value);
  public:

  // optional bool font_name_null = 22;
  bool has_font_name_null() const;
  private:
  bool _internal_has_font_name_null() const;
  public:
  void clear_font_name_null();
  bool font_name_null() const;
  void set_font_name_null(bool value);
  private:
  bool _internal_font_name_null() const;
  void _internal_set_font_name_null(bool value);
  public:

  // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
  bool has_writing_direction() const;
  private:
  bool _internal_has_writing_direction() const;
  public:
  void clear_writing_direction();
  ::TSWP::WritingDirectionType writing_direction() const;
  void set_writing_direction(::TSWP::WritingDirectionType value);
  private:
  ::TSWP::WritingDirectionType _internal_writing_direction() const;
  void _internal_set_writing_direction(::TSWP::WritingDirectionType value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ListStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> label_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > text_indents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > indents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelGeometry > geometries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> number_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelImage > images_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > tiered_numbers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_name_;
  ::TSS::StyleArchive* super_;
  ::TSD::ShadowArchive* shadow_;
  ::TSP::Color* font_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  bool shadow_null_;
  bool font_color_null_;
  bool font_name_null_;
  int writing_direction_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TextStylePresetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TextStylePresetArchive) */ {
 public:
  inline TextStylePresetArchive() : TextStylePresetArchive(nullptr) {}
  ~TextStylePresetArchive() override;
  explicit constexpr TextStylePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextStylePresetArchive(const TextStylePresetArchive& from);
  TextStylePresetArchive(TextStylePresetArchive&& from) noexcept
    : TextStylePresetArchive() {
    *this = ::std::move(from);
  }

  inline TextStylePresetArchive& operator=(const TextStylePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextStylePresetArchive& operator=(TextStylePresetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextStylePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextStylePresetArchive* internal_default_instance() {
    return reinterpret_cast<const TextStylePresetArchive*>(
               &_TextStylePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TextStylePresetArchive& a, TextStylePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TextStylePresetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextStylePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextStylePresetArchive* New() const final {
    return CreateMaybeMessage<TextStylePresetArchive>(nullptr);
  }

  TextStylePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextStylePresetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextStylePresetArchive& from);
  void MergeFrom(const TextStylePresetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextStylePresetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TextStylePresetArchive";
  }
  protected:
  explicit TextStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresetIdentifierFieldNumber = 1,
    kParagraphStyleFieldNumber = 2,
    kListStyleFieldNumber = 3,
  };
  // optional string preset_identifier = 1;
  bool has_preset_identifier() const;
  private:
  bool _internal_has_preset_identifier() const;
  public:
  void clear_preset_identifier();
  const std::string& preset_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preset_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preset_identifier();
  std::string* release_preset_identifier();
  void set_allocated_preset_identifier(std::string* preset_identifier);
  private:
  const std::string& _internal_preset_identifier() const;
  void _internal_set_preset_identifier(const std::string& value);
  std::string* _internal_mutable_preset_identifier();
  public:

  // optional .TSP.Reference paragraph_style = 2;
  bool has_paragraph_style() const;
  private:
  bool _internal_has_paragraph_style() const;
  public:
  void clear_paragraph_style();
  const ::TSP::Reference& paragraph_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_paragraph_style();
  ::TSP::Reference* mutable_paragraph_style();
  void set_allocated_paragraph_style(::TSP::Reference* paragraph_style);
  private:
  const ::TSP::Reference& _internal_paragraph_style() const;
  ::TSP::Reference* _internal_mutable_paragraph_style();
  public:
  void unsafe_arena_set_allocated_paragraph_style(
      ::TSP::Reference* paragraph_style);
  ::TSP::Reference* unsafe_arena_release_paragraph_style();

  // optional .TSP.Reference list_style = 3;
  bool has_list_style() const;
  private:
  bool _internal_has_list_style() const;
  public:
  void clear_list_style();
  const ::TSP::Reference& list_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_list_style();
  ::TSP::Reference* mutable_list_style();
  void set_allocated_list_style(::TSP::Reference* list_style);
  private:
  const ::TSP::Reference& _internal_list_style() const;
  ::TSP::Reference* _internal_mutable_list_style();
  public:
  void unsafe_arena_set_allocated_list_style(
      ::TSP::Reference* list_style);
  ::TSP::Reference* unsafe_arena_release_list_style();

  // @@protoc_insertion_point(class_scope:TSWP.TextStylePresetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preset_identifier_;
  ::TSP::Reference* paragraph_style_;
  ::TSP::Reference* list_style_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnsArchive_EqualColumnsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ColumnsArchive.EqualColumnsArchive) */ {
 public:
  inline ColumnsArchive_EqualColumnsArchive() : ColumnsArchive_EqualColumnsArchive(nullptr) {}
  ~ColumnsArchive_EqualColumnsArchive() override;
  explicit constexpr ColumnsArchive_EqualColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnsArchive_EqualColumnsArchive(const ColumnsArchive_EqualColumnsArchive& from);
  ColumnsArchive_EqualColumnsArchive(ColumnsArchive_EqualColumnsArchive&& from) noexcept
    : ColumnsArchive_EqualColumnsArchive() {
    *this = ::std::move(from);
  }

  inline ColumnsArchive_EqualColumnsArchive& operator=(const ColumnsArchive_EqualColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnsArchive_EqualColumnsArchive& operator=(ColumnsArchive_EqualColumnsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnsArchive_EqualColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnsArchive_EqualColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnsArchive_EqualColumnsArchive*>(
               &_ColumnsArchive_EqualColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ColumnsArchive_EqualColumnsArchive& a, ColumnsArchive_EqualColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnsArchive_EqualColumnsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnsArchive_EqualColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnsArchive_EqualColumnsArchive* New() const final {
    return CreateMaybeMessage<ColumnsArchive_EqualColumnsArchive>(nullptr);
  }

  ColumnsArchive_EqualColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnsArchive_EqualColumnsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnsArchive_EqualColumnsArchive& from);
  void MergeFrom(const ColumnsArchive_EqualColumnsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnsArchive_EqualColumnsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ColumnsArchive.EqualColumnsArchive";
  }
  protected:
  explicit ColumnsArchive_EqualColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kGapFieldNumber = 2,
  };
  // optional uint32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float gap = 2;
  bool has_gap() const;
  private:
  bool _internal_has_gap() const;
  public:
  void clear_gap();
  float gap() const;
  void set_gap(float value);
  private:
  float _internal_gap() const;
  void _internal_set_gap(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ColumnsArchive.EqualColumnsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  float gap_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive) */ {
 public:
  inline ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive() : ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(nullptr) {}
  ~ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive() override;
  explicit constexpr ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from);
  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive&& from) noexcept
    : ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive() {
    *this = ::std::move(from);
  }

  inline ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& operator=(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& operator=(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive*>(
               &_ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& a, ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* New() const final {
    return CreateMaybeMessage<ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive>(nullptr);
  }

  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from);
  void MergeFrom(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive";
  }
  protected:
  explicit ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGapFieldNumber = 1,
    kWidthFieldNumber = 2,
  };
  // required float gap = 1;
  bool has_gap() const;
  private:
  bool _internal_has_gap() const;
  public:
  void clear_gap();
  float gap() const;
  void set_gap(float value);
  private:
  float _internal_gap() const;
  void _internal_set_gap(float value);
  public:

  // required float width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float gap_;
  float width_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnsArchive_NonEqualColumnsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ColumnsArchive.NonEqualColumnsArchive) */ {
 public:
  inline ColumnsArchive_NonEqualColumnsArchive() : ColumnsArchive_NonEqualColumnsArchive(nullptr) {}
  ~ColumnsArchive_NonEqualColumnsArchive() override;
  explicit constexpr ColumnsArchive_NonEqualColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnsArchive_NonEqualColumnsArchive(const ColumnsArchive_NonEqualColumnsArchive& from);
  ColumnsArchive_NonEqualColumnsArchive(ColumnsArchive_NonEqualColumnsArchive&& from) noexcept
    : ColumnsArchive_NonEqualColumnsArchive() {
    *this = ::std::move(from);
  }

  inline ColumnsArchive_NonEqualColumnsArchive& operator=(const ColumnsArchive_NonEqualColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnsArchive_NonEqualColumnsArchive& operator=(ColumnsArchive_NonEqualColumnsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnsArchive_NonEqualColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnsArchive_NonEqualColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnsArchive_NonEqualColumnsArchive*>(
               &_ColumnsArchive_NonEqualColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ColumnsArchive_NonEqualColumnsArchive& a, ColumnsArchive_NonEqualColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnsArchive_NonEqualColumnsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnsArchive_NonEqualColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnsArchive_NonEqualColumnsArchive* New() const final {
    return CreateMaybeMessage<ColumnsArchive_NonEqualColumnsArchive>(nullptr);
  }

  ColumnsArchive_NonEqualColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnsArchive_NonEqualColumnsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnsArchive_NonEqualColumnsArchive& from);
  void MergeFrom(const ColumnsArchive_NonEqualColumnsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnsArchive_NonEqualColumnsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ColumnsArchive.NonEqualColumnsArchive";
  }
  protected:
  explicit ColumnsArchive_NonEqualColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive GapWidthArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kFollowingFieldNumber = 2,
    kFirstFieldNumber = 1,
  };
  // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
  int following_size() const;
  private:
  int _internal_following_size() const;
  public:
  void clear_following();
  ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* mutable_following(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive >*
      mutable_following();
  private:
  const ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& _internal_following(int index) const;
  ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* _internal_add_following();
  public:
  const ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& following(int index) const;
  ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* add_following();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive >&
      following() const;

  // required float first = 1;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  float first() const;
  void set_first(float value);
  private:
  float _internal_first() const;
  void _internal_set_first(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ColumnsArchive.NonEqualColumnsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive > following_;
  float first_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ColumnsArchive) */ {
 public:
  inline ColumnsArchive() : ColumnsArchive(nullptr) {}
  ~ColumnsArchive() override;
  explicit constexpr ColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnsArchive(const ColumnsArchive& from);
  ColumnsArchive(ColumnsArchive&& from) noexcept
    : ColumnsArchive() {
    *this = ::std::move(from);
  }

  inline ColumnsArchive& operator=(const ColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnsArchive& operator=(ColumnsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnsArchive*>(
               &_ColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ColumnsArchive& a, ColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnsArchive* New() const final {
    return CreateMaybeMessage<ColumnsArchive>(nullptr);
  }

  ColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnsArchive& from);
  void MergeFrom(const ColumnsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ColumnsArchive";
  }
  protected:
  explicit ColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ColumnsArchive_EqualColumnsArchive EqualColumnsArchive;
  typedef ColumnsArchive_NonEqualColumnsArchive NonEqualColumnsArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kEqualColumnsFieldNumber = 1,
    kNonEqualColumnsFieldNumber = 2,
  };
  // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
  bool has_equal_columns() const;
  private:
  bool _internal_has_equal_columns() const;
  public:
  void clear_equal_columns();
  const ::TSWP::ColumnsArchive_EqualColumnsArchive& equal_columns() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ColumnsArchive_EqualColumnsArchive* release_equal_columns();
  ::TSWP::ColumnsArchive_EqualColumnsArchive* mutable_equal_columns();
  void set_allocated_equal_columns(::TSWP::ColumnsArchive_EqualColumnsArchive* equal_columns);
  private:
  const ::TSWP::ColumnsArchive_EqualColumnsArchive& _internal_equal_columns() const;
  ::TSWP::ColumnsArchive_EqualColumnsArchive* _internal_mutable_equal_columns();
  public:
  void unsafe_arena_set_allocated_equal_columns(
      ::TSWP::ColumnsArchive_EqualColumnsArchive* equal_columns);
  ::TSWP::ColumnsArchive_EqualColumnsArchive* unsafe_arena_release_equal_columns();

  // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
  bool has_non_equal_columns() const;
  private:
  bool _internal_has_non_equal_columns() const;
  public:
  void clear_non_equal_columns();
  const ::TSWP::ColumnsArchive_NonEqualColumnsArchive& non_equal_columns() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ColumnsArchive_NonEqualColumnsArchive* release_non_equal_columns();
  ::TSWP::ColumnsArchive_NonEqualColumnsArchive* mutable_non_equal_columns();
  void set_allocated_non_equal_columns(::TSWP::ColumnsArchive_NonEqualColumnsArchive* non_equal_columns);
  private:
  const ::TSWP::ColumnsArchive_NonEqualColumnsArchive& _internal_non_equal_columns() const;
  ::TSWP::ColumnsArchive_NonEqualColumnsArchive* _internal_mutable_non_equal_columns();
  public:
  void unsafe_arena_set_allocated_non_equal_columns(
      ::TSWP::ColumnsArchive_NonEqualColumnsArchive* non_equal_columns);
  ::TSWP::ColumnsArchive_NonEqualColumnsArchive* unsafe_arena_release_non_equal_columns();

  // @@protoc_insertion_point(class_scope:TSWP.ColumnsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ColumnsArchive_EqualColumnsArchive* equal_columns_;
  ::TSWP::ColumnsArchive_NonEqualColumnsArchive* non_equal_columns_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class PaddingArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.PaddingArchive) */ {
 public:
  inline PaddingArchive() : PaddingArchive(nullptr) {}
  ~PaddingArchive() override;
  explicit constexpr PaddingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaddingArchive(const PaddingArchive& from);
  PaddingArchive(PaddingArchive&& from) noexcept
    : PaddingArchive() {
    *this = ::std::move(from);
  }

  inline PaddingArchive& operator=(const PaddingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaddingArchive& operator=(PaddingArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaddingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaddingArchive* internal_default_instance() {
    return reinterpret_cast<const PaddingArchive*>(
               &_PaddingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PaddingArchive& a, PaddingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PaddingArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaddingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaddingArchive* New() const final {
    return CreateMaybeMessage<PaddingArchive>(nullptr);
  }

  PaddingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaddingArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaddingArchive& from);
  void MergeFrom(const PaddingArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaddingArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.PaddingArchive";
  }
  protected:
  explicit PaddingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };
  // optional float left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // optional float top = 2;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // optional float right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // optional float bottom = 4;
  bool has_bottom() const;
  private:
  bool _internal_has_bottom() const;
  public:
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);
  private:
  float _internal_bottom() const;
  void _internal_set_bottom(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.PaddingArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float left_;
  float top_;
  float right_;
  float bottom_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnStylePropertiesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ColumnStylePropertiesArchive) */ {
 public:
  inline ColumnStylePropertiesArchive() : ColumnStylePropertiesArchive(nullptr) {}
  ~ColumnStylePropertiesArchive() override;
  explicit constexpr ColumnStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnStylePropertiesArchive(const ColumnStylePropertiesArchive& from);
  ColumnStylePropertiesArchive(ColumnStylePropertiesArchive&& from) noexcept
    : ColumnStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline ColumnStylePropertiesArchive& operator=(const ColumnStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnStylePropertiesArchive& operator=(ColumnStylePropertiesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnStylePropertiesArchive*>(
               &_ColumnStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ColumnStylePropertiesArchive& a, ColumnStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnStylePropertiesArchive* New() const final {
    return CreateMaybeMessage<ColumnStylePropertiesArchive>(nullptr);
  }

  ColumnStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnStylePropertiesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnStylePropertiesArchive& from);
  void MergeFrom(const ColumnStylePropertiesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ColumnStylePropertiesArchive";
  }
  protected:
  explicit ColumnStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ColumnStylePropertiesArchive_VerticalAlignmentType VerticalAlignmentType;
  static constexpr VerticalAlignmentType kFrameAlignTop =
    ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignTop;
  static constexpr VerticalAlignmentType kFrameAlignMiddle =
    ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignMiddle;
  static constexpr VerticalAlignmentType kFrameAlignBottom =
    ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignBottom;
  static constexpr VerticalAlignmentType kFrameAlignJustify =
    ColumnStylePropertiesArchive_VerticalAlignmentType_kFrameAlignJustify;
  static inline bool VerticalAlignmentType_IsValid(int value) {
    return ColumnStylePropertiesArchive_VerticalAlignmentType_IsValid(value);
  }
  static constexpr VerticalAlignmentType VerticalAlignmentType_MIN =
    ColumnStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MIN;
  static constexpr VerticalAlignmentType VerticalAlignmentType_MAX =
    ColumnStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MAX;
  static constexpr int VerticalAlignmentType_ARRAYSIZE =
    ColumnStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VerticalAlignmentType_descriptor() {
    return ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor();
  }
  template<typename T>
  static inline const std::string& VerticalAlignmentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerticalAlignmentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerticalAlignmentType_Name.");
    return ColumnStylePropertiesArchive_VerticalAlignmentType_Name(enum_t_value);
  }
  static inline bool VerticalAlignmentType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VerticalAlignmentType* value) {
    return ColumnStylePropertiesArchive_VerticalAlignmentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 7,
    kMarginsFieldNumber = 9,
    kPaddingFieldNumber = 11,
    kContinuousFieldNumber = 1,
    kShrinkToFitFieldNumber = 2,
    kVerticalTextFieldNumber = 3,
    kColumnsNullFieldNumber = 6,
    kMinHorizontalInsetFieldNumber = 4,
    kVerticalAlignmentFieldNumber = 5,
    kMarginsNullFieldNumber = 8,
    kPaddingNullFieldNumber = 10,
    kWritingDirectionFieldNumber = 12,
  };
  // optional .TSWP.ColumnsArchive columns = 7;
  bool has_columns() const;
  private:
  bool _internal_has_columns() const;
  public:
  void clear_columns();
  const ::TSWP::ColumnsArchive& columns() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ColumnsArchive* release_columns();
  ::TSWP::ColumnsArchive* mutable_columns();
  void set_allocated_columns(::TSWP::ColumnsArchive* columns);
  private:
  const ::TSWP::ColumnsArchive& _internal_columns() const;
  ::TSWP::ColumnsArchive* _internal_mutable_columns();
  public:
  void unsafe_arena_set_allocated_columns(
      ::TSWP::ColumnsArchive* columns);
  ::TSWP::ColumnsArchive* unsafe_arena_release_columns();

  // optional .TSWP.PaddingArchive margins = 9;
  bool has_margins() const;
  private:
  bool _internal_has_margins() const;
  public:
  void clear_margins();
  const ::TSWP::PaddingArchive& margins() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PaddingArchive* release_margins();
  ::TSWP::PaddingArchive* mutable_margins();
  void set_allocated_margins(::TSWP::PaddingArchive* margins);
  private:
  const ::TSWP::PaddingArchive& _internal_margins() const;
  ::TSWP::PaddingArchive* _internal_mutable_margins();
  public:
  void unsafe_arena_set_allocated_margins(
      ::TSWP::PaddingArchive* margins);
  ::TSWP::PaddingArchive* unsafe_arena_release_margins();

  // optional .TSWP.PaddingArchive padding = 11;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  const ::TSWP::PaddingArchive& padding() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PaddingArchive* release_padding();
  ::TSWP::PaddingArchive* mutable_padding();
  void set_allocated_padding(::TSWP::PaddingArchive* padding);
  private:
  const ::TSWP::PaddingArchive& _internal_padding() const;
  ::TSWP::PaddingArchive* _internal_mutable_padding();
  public:
  void unsafe_arena_set_allocated_padding(
      ::TSWP::PaddingArchive* padding);
  ::TSWP::PaddingArchive* unsafe_arena_release_padding();

  // optional bool continuous = 1;
  bool has_continuous() const;
  private:
  bool _internal_has_continuous() const;
  public:
  void clear_continuous();
  bool continuous() const;
  void set_continuous(bool value);
  private:
  bool _internal_continuous() const;
  void _internal_set_continuous(bool value);
  public:

  // optional bool shrink_to_fit = 2;
  bool has_shrink_to_fit() const;
  private:
  bool _internal_has_shrink_to_fit() const;
  public:
  void clear_shrink_to_fit();
  bool shrink_to_fit() const;
  void set_shrink_to_fit(bool value);
  private:
  bool _internal_shrink_to_fit() const;
  void _internal_set_shrink_to_fit(bool value);
  public:

  // optional bool vertical_text = 3;
  bool has_vertical_text() const;
  private:
  bool _internal_has_vertical_text() const;
  public:
  void clear_vertical_text();
  bool vertical_text() const;
  void set_vertical_text(bool value);
  private:
  bool _internal_vertical_text() const;
  void _internal_set_vertical_text(bool value);
  public:

  // optional bool columns_null = 6;
  bool has_columns_null() const;
  private:
  bool _internal_has_columns_null() const;
  public:
  void clear_columns_null();
  bool columns_null() const;
  void set_columns_null(bool value);
  private:
  bool _internal_columns_null() const;
  void _internal_set_columns_null(bool value);
  public:

  // optional float min_horizontal_inset = 4;
  bool has_min_horizontal_inset() const;
  private:
  bool _internal_has_min_horizontal_inset() const;
  public:
  void clear_min_horizontal_inset();
  float min_horizontal_inset() const;
  void set_min_horizontal_inset(float value);
  private:
  float _internal_min_horizontal_inset() const;
  void _internal_set_min_horizontal_inset(float value);
  public:

  // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
  bool has_vertical_alignment() const;
  private:
  bool _internal_has_vertical_alignment() const;
  public:
  void clear_vertical_alignment();
  ::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType vertical_alignment() const;
  void set_vertical_alignment(::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType value);
  private:
  ::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType _internal_vertical_alignment() const;
  void _internal_set_vertical_alignment(::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType value);
  public:

  // optional bool margins_null = 8;
  bool has_margins_null() const;
  private:
  bool _internal_has_margins_null() const;
  public:
  void clear_margins_null();
  bool margins_null() const;
  void set_margins_null(bool value);
  private:
  bool _internal_margins_null() const;
  void _internal_set_margins_null(bool value);
  public:

  // optional bool padding_null = 10;
  bool has_padding_null() const;
  private:
  bool _internal_has_padding_null() const;
  public:
  void clear_padding_null();
  bool padding_null() const;
  void set_padding_null(bool value);
  private:
  bool _internal_padding_null() const;
  void _internal_set_padding_null(bool value);
  public:

  // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
  bool has_writing_direction() const;
  private:
  bool _internal_has_writing_direction() const;
  public:
  void clear_writing_direction();
  ::TSWP::WritingDirectionType writing_direction() const;
  void set_writing_direction(::TSWP::WritingDirectionType value);
  private:
  ::TSWP::WritingDirectionType _internal_writing_direction() const;
  void _internal_set_writing_direction(::TSWP::WritingDirectionType value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ColumnStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ColumnsArchive* columns_;
  ::TSWP::PaddingArchive* margins_;
  ::TSWP::PaddingArchive* padding_;
  bool continuous_;
  bool shrink_to_fit_;
  bool vertical_text_;
  bool columns_null_;
  float min_horizontal_inset_;
  int vertical_alignment_;
  bool margins_null_;
  bool padding_null_;
  int writing_direction_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ColumnStyleArchive) */ {
 public:
  inline ColumnStyleArchive() : ColumnStyleArchive(nullptr) {}
  ~ColumnStyleArchive() override;
  explicit constexpr ColumnStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnStyleArchive(const ColumnStyleArchive& from);
  ColumnStyleArchive(ColumnStyleArchive&& from) noexcept
    : ColumnStyleArchive() {
    *this = ::std::move(from);
  }

  inline ColumnStyleArchive& operator=(const ColumnStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnStyleArchive& operator=(ColumnStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnStyleArchive*>(
               &_ColumnStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ColumnStyleArchive& a, ColumnStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnStyleArchive* New() const final {
    return CreateMaybeMessage<ColumnStyleArchive>(nullptr);
  }

  ColumnStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnStyleArchive& from);
  void MergeFrom(const ColumnStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ColumnStyleArchive";
  }
  protected:
  explicit ColumnStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kColumnPropertiesFieldNumber = 11,
    kOverrideCountFieldNumber = 10,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
  bool has_column_properties() const;
  private:
  bool _internal_has_column_properties() const;
  public:
  void clear_column_properties();
  const ::TSWP::ColumnStylePropertiesArchive& column_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ColumnStylePropertiesArchive* release_column_properties();
  ::TSWP::ColumnStylePropertiesArchive* mutable_column_properties();
  void set_allocated_column_properties(::TSWP::ColumnStylePropertiesArchive* column_properties);
  private:
  const ::TSWP::ColumnStylePropertiesArchive& _internal_column_properties() const;
  ::TSWP::ColumnStylePropertiesArchive* _internal_mutable_column_properties();
  public:
  void unsafe_arena_set_allocated_column_properties(
      ::TSWP::ColumnStylePropertiesArchive* column_properties);
  ::TSWP::ColumnStylePropertiesArchive* unsafe_arena_release_column_properties();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ColumnStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TSWP::ColumnStylePropertiesArchive* column_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeStylePropertiesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ShapeStylePropertiesArchive) */ {
 public:
  inline ShapeStylePropertiesArchive() : ShapeStylePropertiesArchive(nullptr) {}
  ~ShapeStylePropertiesArchive() override;
  explicit constexpr ShapeStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeStylePropertiesArchive(const ShapeStylePropertiesArchive& from);
  ShapeStylePropertiesArchive(ShapeStylePropertiesArchive&& from) noexcept
    : ShapeStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline ShapeStylePropertiesArchive& operator=(const ShapeStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeStylePropertiesArchive& operator=(ShapeStylePropertiesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeStylePropertiesArchive*>(
               &_ShapeStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ShapeStylePropertiesArchive& a, ShapeStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeStylePropertiesArchive* New() const final {
    return CreateMaybeMessage<ShapeStylePropertiesArchive>(nullptr);
  }

  ShapeStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeStylePropertiesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeStylePropertiesArchive& from);
  void MergeFrom(const ShapeStylePropertiesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ShapeStylePropertiesArchive";
  }
  protected:
  explicit ShapeStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ShapeStylePropertiesArchive_VerticalAlignmentType VerticalAlignmentType;
  static constexpr VerticalAlignmentType kFrameAlignTop =
    ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignTop;
  static constexpr VerticalAlignmentType kFrameAlignMiddle =
    ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignMiddle;
  static constexpr VerticalAlignmentType kFrameAlignBottom =
    ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignBottom;
  static constexpr VerticalAlignmentType kFrameAlignJustify =
    ShapeStylePropertiesArchive_VerticalAlignmentType_kFrameAlignJustify;
  static inline bool VerticalAlignmentType_IsValid(int value) {
    return ShapeStylePropertiesArchive_VerticalAlignmentType_IsValid(value);
  }
  static constexpr VerticalAlignmentType VerticalAlignmentType_MIN =
    ShapeStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MIN;
  static constexpr VerticalAlignmentType VerticalAlignmentType_MAX =
    ShapeStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_MAX;
  static constexpr int VerticalAlignmentType_ARRAYSIZE =
    ShapeStylePropertiesArchive_VerticalAlignmentType_VerticalAlignmentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VerticalAlignmentType_descriptor() {
    return ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor();
  }
  template<typename T>
  static inline const std::string& VerticalAlignmentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerticalAlignmentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerticalAlignmentType_Name.");
    return ShapeStylePropertiesArchive_VerticalAlignmentType_Name(enum_t_value);
  }
  static inline bool VerticalAlignmentType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VerticalAlignmentType* value) {
    return ShapeStylePropertiesArchive_VerticalAlignmentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 4,
    kPaddingFieldNumber = 6,
    kParagraphStyleFieldNumber = 10,
    kVerticalAlignmentFieldNumber = 2,
    kShrinkToFitFieldNumber = 1,
    kColumnsNullFieldNumber = 3,
    kPaddingNullFieldNumber = 5,
    kVerticalTextFieldNumber = 8,
    kDefaultTextPresetIndexFieldNumber = 7,
    kParagraphStyleNullFieldNumber = 9,
    kVerticalText40FieldNumber = 11,
  };
  // optional .TSWP.ColumnsArchive columns = 4;
  bool has_columns() const;
  private:
  bool _internal_has_columns() const;
  public:
  void clear_columns();
  const ::TSWP::ColumnsArchive& columns() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ColumnsArchive* release_columns();
  ::TSWP::ColumnsArchive* mutable_columns();
  void set_allocated_columns(::TSWP::ColumnsArchive* columns);
  private:
  const ::TSWP::ColumnsArchive& _internal_columns() const;
  ::TSWP::ColumnsArchive* _internal_mutable_columns();
  public:
  void unsafe_arena_set_allocated_columns(
      ::TSWP::ColumnsArchive* columns);
  ::TSWP::ColumnsArchive* unsafe_arena_release_columns();

  // optional .TSWP.PaddingArchive padding = 6;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  const ::TSWP::PaddingArchive& padding() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PaddingArchive* release_padding();
  ::TSWP::PaddingArchive* mutable_padding();
  void set_allocated_padding(::TSWP::PaddingArchive* padding);
  private:
  const ::TSWP::PaddingArchive& _internal_padding() const;
  ::TSWP::PaddingArchive* _internal_mutable_padding();
  public:
  void unsafe_arena_set_allocated_padding(
      ::TSWP::PaddingArchive* padding);
  ::TSWP::PaddingArchive* unsafe_arena_release_padding();

  // optional .TSP.Reference paragraph_style = 10;
  bool has_paragraph_style() const;
  private:
  bool _internal_has_paragraph_style() const;
  public:
  void clear_paragraph_style();
  const ::TSP::Reference& paragraph_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_paragraph_style();
  ::TSP::Reference* mutable_paragraph_style();
  void set_allocated_paragraph_style(::TSP::Reference* paragraph_style);
  private:
  const ::TSP::Reference& _internal_paragraph_style() const;
  ::TSP::Reference* _internal_mutable_paragraph_style();
  public:
  void unsafe_arena_set_allocated_paragraph_style(
      ::TSP::Reference* paragraph_style);
  ::TSP::Reference* unsafe_arena_release_paragraph_style();

  // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
  bool has_vertical_alignment() const;
  private:
  bool _internal_has_vertical_alignment() const;
  public:
  void clear_vertical_alignment();
  ::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType vertical_alignment() const;
  void set_vertical_alignment(::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType value);
  private:
  ::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType _internal_vertical_alignment() const;
  void _internal_set_vertical_alignment(::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType value);
  public:

  // optional bool shrink_to_fit = 1;
  bool has_shrink_to_fit() const;
  private:
  bool _internal_has_shrink_to_fit() const;
  public:
  void clear_shrink_to_fit();
  bool shrink_to_fit() const;
  void set_shrink_to_fit(bool value);
  private:
  bool _internal_shrink_to_fit() const;
  void _internal_set_shrink_to_fit(bool value);
  public:

  // optional bool columns_null = 3;
  bool has_columns_null() const;
  private:
  bool _internal_has_columns_null() const;
  public:
  void clear_columns_null();
  bool columns_null() const;
  void set_columns_null(bool value);
  private:
  bool _internal_columns_null() const;
  void _internal_set_columns_null(bool value);
  public:

  // optional bool padding_null = 5;
  bool has_padding_null() const;
  private:
  bool _internal_has_padding_null() const;
  public:
  void clear_padding_null();
  bool padding_null() const;
  void set_padding_null(bool value);
  private:
  bool _internal_padding_null() const;
  void _internal_set_padding_null(bool value);
  public:

  // optional bool vertical_text = 8;
  bool has_vertical_text() const;
  private:
  bool _internal_has_vertical_text() const;
  public:
  void clear_vertical_text();
  bool vertical_text() const;
  void set_vertical_text(bool value);
  private:
  bool _internal_vertical_text() const;
  void _internal_set_vertical_text(bool value);
  public:

  // optional uint32 default_text_preset_index = 7;
  bool has_default_text_preset_index() const;
  private:
  bool _internal_has_default_text_preset_index() const;
  public:
  void clear_default_text_preset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_text_preset_index() const;
  void set_default_text_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_text_preset_index() const;
  void _internal_set_default_text_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool paragraph_style_null = 9;
  bool has_paragraph_style_null() const;
  private:
  bool _internal_has_paragraph_style_null() const;
  public:
  void clear_paragraph_style_null();
  bool paragraph_style_null() const;
  void set_paragraph_style_null(bool value);
  private:
  bool _internal_paragraph_style_null() const;
  void _internal_set_paragraph_style_null(bool value);
  public:

  // optional bool vertical_text_40 = 11;
  bool has_vertical_text_40() const;
  private:
  bool _internal_has_vertical_text_40() const;
  public:
  void clear_vertical_text_40();
  bool vertical_text_40() const;
  void set_vertical_text_40(bool value);
  private:
  bool _internal_vertical_text_40() const;
  void _internal_set_vertical_text_40(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ShapeStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ColumnsArchive* columns_;
  ::TSWP::PaddingArchive* padding_;
  ::TSP::Reference* paragraph_style_;
  int vertical_alignment_;
  bool shrink_to_fit_;
  bool columns_null_;
  bool padding_null_;
  bool vertical_text_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_text_preset_index_;
  bool paragraph_style_null_;
  bool vertical_text_40_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ShapeStyleArchive) */ {
 public:
  inline ShapeStyleArchive() : ShapeStyleArchive(nullptr) {}
  ~ShapeStyleArchive() override;
  explicit constexpr ShapeStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeStyleArchive(const ShapeStyleArchive& from);
  ShapeStyleArchive(ShapeStyleArchive&& from) noexcept
    : ShapeStyleArchive() {
    *this = ::std::move(from);
  }

  inline ShapeStyleArchive& operator=(const ShapeStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeStyleArchive& operator=(ShapeStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeStyleArchive*>(
               &_ShapeStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ShapeStyleArchive& a, ShapeStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeStyleArchive* New() const final {
    return CreateMaybeMessage<ShapeStyleArchive>(nullptr);
  }

  ShapeStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeStyleArchive& from);
  void MergeFrom(const ShapeStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ShapeStyleArchive";
  }
  protected:
  explicit ShapeStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShapePropertiesFieldNumber = 11,
    kOverrideCountFieldNumber = 10,
  };
  // required .TSD.ShapeStyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ShapeStyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShapeStyleArchive* release_super();
  ::TSD::ShapeStyleArchive* mutable_super();
  void set_allocated_super(::TSD::ShapeStyleArchive* super);
  private:
  const ::TSD::ShapeStyleArchive& _internal_super() const;
  ::TSD::ShapeStyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ShapeStyleArchive* super);
  ::TSD::ShapeStyleArchive* unsafe_arena_release_super();

  // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
  bool has_shape_properties() const;
  private:
  bool _internal_has_shape_properties() const;
  public:
  void clear_shape_properties();
  const ::TSWP::ShapeStylePropertiesArchive& shape_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ShapeStylePropertiesArchive* release_shape_properties();
  ::TSWP::ShapeStylePropertiesArchive* mutable_shape_properties();
  void set_allocated_shape_properties(::TSWP::ShapeStylePropertiesArchive* shape_properties);
  private:
  const ::TSWP::ShapeStylePropertiesArchive& _internal_shape_properties() const;
  ::TSWP::ShapeStylePropertiesArchive* _internal_mutable_shape_properties();
  public:
  void unsafe_arena_set_allocated_shape_properties(
      ::TSWP::ShapeStylePropertiesArchive* shape_properties);
  ::TSWP::ShapeStylePropertiesArchive* unsafe_arena_release_shape_properties();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ShapeStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::ShapeStyleArchive* super_;
  ::TSWP::ShapeStylePropertiesArchive* shape_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemePresetsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ThemePresetsArchive) */ {
 public:
  inline ThemePresetsArchive() : ThemePresetsArchive(nullptr) {}
  ~ThemePresetsArchive() override;
  explicit constexpr ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemePresetsArchive(const ThemePresetsArchive& from);
  ThemePresetsArchive(ThemePresetsArchive&& from) noexcept
    : ThemePresetsArchive() {
    *this = ::std::move(from);
  }

  inline ThemePresetsArchive& operator=(const ThemePresetsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemePresetsArchive& operator=(ThemePresetsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemePresetsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemePresetsArchive* internal_default_instance() {
    return reinterpret_cast<const ThemePresetsArchive*>(
               &_ThemePresetsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ThemePresetsArchive& a, ThemePresetsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemePresetsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemePresetsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemePresetsArchive* New() const final {
    return CreateMaybeMessage<ThemePresetsArchive>(nullptr);
  }

  ThemePresetsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemePresetsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemePresetsArchive& from);
  void MergeFrom(const ThemePresetsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemePresetsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ThemePresetsArchive";
  }
  protected:
  explicit ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListStylePresetsFieldNumber = 1,
    kTextStylePresetsFieldNumber = 2,
    kImportedTextStylePresetsFieldNumber = 3,
    kTocEntryStylePresetsFieldNumber = 4,
    kTocSettingsPresetsFieldNumber = 5,
    kCharacterStylePresetsFieldNumber = 6,
    kParagraphStylePresetsFieldNumber = 7,
    kDropcapStylePresetsFieldNumber = 8,
  };
  // repeated .TSP.Reference list_style_presets = 1;
  int list_style_presets_size() const;
  private:
  int _internal_list_style_presets_size() const;
  public:
  void clear_list_style_presets();
  ::TSP::Reference* mutable_list_style_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_list_style_presets();
  private:
  const ::TSP::Reference& _internal_list_style_presets(int index) const;
  ::TSP::Reference* _internal_add_list_style_presets();
  public:
  const ::TSP::Reference& list_style_presets(int index) const;
  ::TSP::Reference* add_list_style_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      list_style_presets() const;

  // repeated .TSP.Reference text_style_presets = 2;
  int text_style_presets_size() const;
  private:
  int _internal_text_style_presets_size() const;
  public:
  void clear_text_style_presets();
  ::TSP::Reference* mutable_text_style_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_text_style_presets();
  private:
  const ::TSP::Reference& _internal_text_style_presets(int index) const;
  ::TSP::Reference* _internal_add_text_style_presets();
  public:
  const ::TSP::Reference& text_style_presets(int index) const;
  ::TSP::Reference* add_text_style_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      text_style_presets() const;

  // repeated .TSP.Reference imported_text_style_presets = 3;
  int imported_text_style_presets_size() const;
  private:
  int _internal_imported_text_style_presets_size() const;
  public:
  void clear_imported_text_style_presets();
  ::TSP::Reference* mutable_imported_text_style_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_imported_text_style_presets();
  private:
  const ::TSP::Reference& _internal_imported_text_style_presets(int index) const;
  ::TSP::Reference* _internal_add_imported_text_style_presets();
  public:
  const ::TSP::Reference& imported_text_style_presets(int index) const;
  ::TSP::Reference* add_imported_text_style_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      imported_text_style_presets() const;

  // repeated .TSP.Reference toc_entry_style_presets = 4;
  int toc_entry_style_presets_size() const;
  private:
  int _internal_toc_entry_style_presets_size() const;
  public:
  void clear_toc_entry_style_presets();
  ::TSP::Reference* mutable_toc_entry_style_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_toc_entry_style_presets();
  private:
  const ::TSP::Reference& _internal_toc_entry_style_presets(int index) const;
  ::TSP::Reference* _internal_add_toc_entry_style_presets();
  public:
  const ::TSP::Reference& toc_entry_style_presets(int index) const;
  ::TSP::Reference* add_toc_entry_style_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      toc_entry_style_presets() const;

  // repeated .TSP.Reference toc_settings_presets = 5;
  int toc_settings_presets_size() const;
  private:
  int _internal_toc_settings_presets_size() const;
  public:
  void clear_toc_settings_presets();
  ::TSP::Reference* mutable_toc_settings_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_toc_settings_presets();
  private:
  const ::TSP::Reference& _internal_toc_settings_presets(int index) const;
  ::TSP::Reference* _internal_add_toc_settings_presets();
  public:
  const ::TSP::Reference& toc_settings_presets(int index) const;
  ::TSP::Reference* add_toc_settings_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      toc_settings_presets() const;

  // repeated .TSP.Reference character_style_presets = 6;
  int character_style_presets_size() const;
  private:
  int _internal_character_style_presets_size() const;
  public:
  void clear_character_style_presets();
  ::TSP::Reference* mutable_character_style_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_character_style_presets();
  private:
  const ::TSP::Reference& _internal_character_style_presets(int index) const;
  ::TSP::Reference* _internal_add_character_style_presets();
  public:
  const ::TSP::Reference& character_style_presets(int index) const;
  ::TSP::Reference* add_character_style_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      character_style_presets() const;

  // repeated .TSP.Reference paragraph_style_presets = 7;
  int paragraph_style_presets_size() const;
  private:
  int _internal_paragraph_style_presets_size() const;
  public:
  void clear_paragraph_style_presets();
  ::TSP::Reference* mutable_paragraph_style_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_style_presets();
  private:
  const ::TSP::Reference& _internal_paragraph_style_presets(int index) const;
  ::TSP::Reference* _internal_add_paragraph_style_presets();
  public:
  const ::TSP::Reference& paragraph_style_presets(int index) const;
  ::TSP::Reference* add_paragraph_style_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      paragraph_style_presets() const;

  // repeated .TSP.Reference dropcap_style_presets = 8;
  int dropcap_style_presets_size() const;
  private:
  int _internal_dropcap_style_presets_size() const;
  public:
  void clear_dropcap_style_presets();
  ::TSP::Reference* mutable_dropcap_style_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_dropcap_style_presets();
  private:
  const ::TSP::Reference& _internal_dropcap_style_presets(int index) const;
  ::TSP::Reference* _internal_add_dropcap_style_presets();
  public:
  const ::TSP::Reference& dropcap_style_presets(int index) const;
  ::TSP::Reference* add_dropcap_style_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      dropcap_style_presets() const;

  static const int kExtensionFieldNumber = 110;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSWP::ThemePresetsArchive >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:TSWP.ThemePresetsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > list_style_presets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > text_style_presets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > imported_text_style_presets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > toc_entry_style_presets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > toc_settings_presets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > character_style_presets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > paragraph_style_presets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > dropcap_style_presets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TextPresetDisplayItemArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TextPresetDisplayItemArchive) */ {
 public:
  inline TextPresetDisplayItemArchive() : TextPresetDisplayItemArchive(nullptr) {}
  ~TextPresetDisplayItemArchive() override;
  explicit constexpr TextPresetDisplayItemArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextPresetDisplayItemArchive(const TextPresetDisplayItemArchive& from);
  TextPresetDisplayItemArchive(TextPresetDisplayItemArchive&& from) noexcept
    : TextPresetDisplayItemArchive() {
    *this = ::std::move(from);
  }

  inline TextPresetDisplayItemArchive& operator=(const TextPresetDisplayItemArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextPresetDisplayItemArchive& operator=(TextPresetDisplayItemArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextPresetDisplayItemArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextPresetDisplayItemArchive* internal_default_instance() {
    return reinterpret_cast<const TextPresetDisplayItemArchive*>(
               &_TextPresetDisplayItemArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TextPresetDisplayItemArchive& a, TextPresetDisplayItemArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TextPresetDisplayItemArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextPresetDisplayItemArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextPresetDisplayItemArchive* New() const final {
    return CreateMaybeMessage<TextPresetDisplayItemArchive>(nullptr);
  }

  TextPresetDisplayItemArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextPresetDisplayItemArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextPresetDisplayItemArchive& from);
  void MergeFrom(const TextPresetDisplayItemArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextPresetDisplayItemArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TextPresetDisplayItemArchive";
  }
  protected:
  explicit TextPresetDisplayItemArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 2,
    kPresetFieldNumber = 1,
  };
  // required string display_name = 2;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // required .TSP.Reference preset = 1;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // @@protoc_insertion_point(class_scope:TSWP.TextPresetDisplayItemArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::TSP::Reference* preset_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCEntryStylePropertiesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCEntryStylePropertiesArchive) */ {
 public:
  inline TOCEntryStylePropertiesArchive() : TOCEntryStylePropertiesArchive(nullptr) {}
  ~TOCEntryStylePropertiesArchive() override;
  explicit constexpr TOCEntryStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCEntryStylePropertiesArchive(const TOCEntryStylePropertiesArchive& from);
  TOCEntryStylePropertiesArchive(TOCEntryStylePropertiesArchive&& from) noexcept
    : TOCEntryStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline TOCEntryStylePropertiesArchive& operator=(const TOCEntryStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCEntryStylePropertiesArchive& operator=(TOCEntryStylePropertiesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCEntryStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCEntryStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const TOCEntryStylePropertiesArchive*>(
               &_TOCEntryStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TOCEntryStylePropertiesArchive& a, TOCEntryStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCEntryStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCEntryStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCEntryStylePropertiesArchive* New() const final {
    return CreateMaybeMessage<TOCEntryStylePropertiesArchive>(nullptr);
  }

  TOCEntryStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCEntryStylePropertiesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCEntryStylePropertiesArchive& from);
  void MergeFrom(const TOCEntryStylePropertiesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCEntryStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCEntryStylePropertiesArchive";
  }
  protected:
  explicit TOCEntryStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageNumberStyleFieldNumber = 2,
    kPageNumberStyleNullFieldNumber = 1,
    kShowPageNumberFieldNumber = 3,
  };
  // optional .TSP.Reference page_number_style = 2;
  bool has_page_number_style() const;
  private:
  bool _internal_has_page_number_style() const;
  public:
  void clear_page_number_style();
  const ::TSP::Reference& page_number_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_page_number_style();
  ::TSP::Reference* mutable_page_number_style();
  void set_allocated_page_number_style(::TSP::Reference* page_number_style);
  private:
  const ::TSP::Reference& _internal_page_number_style() const;
  ::TSP::Reference* _internal_mutable_page_number_style();
  public:
  void unsafe_arena_set_allocated_page_number_style(
      ::TSP::Reference* page_number_style);
  ::TSP::Reference* unsafe_arena_release_page_number_style();

  // optional bool page_number_style_null = 1;
  bool has_page_number_style_null() const;
  private:
  bool _internal_has_page_number_style_null() const;
  public:
  void clear_page_number_style_null();
  bool page_number_style_null() const;
  void set_page_number_style_null(bool value);
  private:
  bool _internal_page_number_style_null() const;
  void _internal_set_page_number_style_null(bool value);
  public:

  // optional bool show_page_number = 3;
  bool has_show_page_number() const;
  private:
  bool _internal_has_show_page_number() const;
  public:
  void clear_show_page_number();
  bool show_page_number() const;
  void set_show_page_number(bool value);
  private:
  bool _internal_show_page_number() const;
  void _internal_set_show_page_number(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.TOCEntryStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* page_number_style_;
  bool page_number_style_null_;
  bool show_page_number_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCEntryStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCEntryStyleArchive) */ {
 public:
  inline TOCEntryStyleArchive() : TOCEntryStyleArchive(nullptr) {}
  ~TOCEntryStyleArchive() override;
  explicit constexpr TOCEntryStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCEntryStyleArchive(const TOCEntryStyleArchive& from);
  TOCEntryStyleArchive(TOCEntryStyleArchive&& from) noexcept
    : TOCEntryStyleArchive() {
    *this = ::std::move(from);
  }

  inline TOCEntryStyleArchive& operator=(const TOCEntryStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCEntryStyleArchive& operator=(TOCEntryStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCEntryStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCEntryStyleArchive* internal_default_instance() {
    return reinterpret_cast<const TOCEntryStyleArchive*>(
               &_TOCEntryStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TOCEntryStyleArchive& a, TOCEntryStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCEntryStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCEntryStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCEntryStyleArchive* New() const final {
    return CreateMaybeMessage<TOCEntryStyleArchive>(nullptr);
  }

  TOCEntryStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCEntryStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCEntryStyleArchive& from);
  void MergeFrom(const TOCEntryStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCEntryStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCEntryStyleArchive";
  }
  protected:
  explicit TOCEntryStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTocPropertiesFieldNumber = 2,
  };
  // required .TSWP.ParagraphStyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ParagraphStyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ParagraphStyleArchive* release_super();
  ::TSWP::ParagraphStyleArchive* mutable_super();
  void set_allocated_super(::TSWP::ParagraphStyleArchive* super);
  private:
  const ::TSWP::ParagraphStyleArchive& _internal_super() const;
  ::TSWP::ParagraphStyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ParagraphStyleArchive* super);
  ::TSWP::ParagraphStyleArchive* unsafe_arena_release_super();

  // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
  bool has_toc_properties() const;
  private:
  bool _internal_has_toc_properties() const;
  public:
  void clear_toc_properties();
  const ::TSWP::TOCEntryStylePropertiesArchive& toc_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::TOCEntryStylePropertiesArchive* release_toc_properties();
  ::TSWP::TOCEntryStylePropertiesArchive* mutable_toc_properties();
  void set_allocated_toc_properties(::TSWP::TOCEntryStylePropertiesArchive* toc_properties);
  private:
  const ::TSWP::TOCEntryStylePropertiesArchive& _internal_toc_properties() const;
  ::TSWP::TOCEntryStylePropertiesArchive* _internal_mutable_toc_properties();
  public:
  void unsafe_arena_set_allocated_toc_properties(
      ::TSWP::TOCEntryStylePropertiesArchive* toc_properties);
  ::TSWP::TOCEntryStylePropertiesArchive* unsafe_arena_release_toc_properties();

  // @@protoc_insertion_point(class_scope:TSWP.TOCEntryStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ParagraphStyleArchive* super_;
  ::TSWP::TOCEntryStylePropertiesArchive* toc_properties_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCSettingsArchive_TOCEntryData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCSettingsArchive.TOCEntryData) */ {
 public:
  inline TOCSettingsArchive_TOCEntryData() : TOCSettingsArchive_TOCEntryData(nullptr) {}
  ~TOCSettingsArchive_TOCEntryData() override;
  explicit constexpr TOCSettingsArchive_TOCEntryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCSettingsArchive_TOCEntryData(const TOCSettingsArchive_TOCEntryData& from);
  TOCSettingsArchive_TOCEntryData(TOCSettingsArchive_TOCEntryData&& from) noexcept
    : TOCSettingsArchive_TOCEntryData() {
    *this = ::std::move(from);
  }

  inline TOCSettingsArchive_TOCEntryData& operator=(const TOCSettingsArchive_TOCEntryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCSettingsArchive_TOCEntryData& operator=(TOCSettingsArchive_TOCEntryData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCSettingsArchive_TOCEntryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCSettingsArchive_TOCEntryData* internal_default_instance() {
    return reinterpret_cast<const TOCSettingsArchive_TOCEntryData*>(
               &_TOCSettingsArchive_TOCEntryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(TOCSettingsArchive_TOCEntryData& a, TOCSettingsArchive_TOCEntryData& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCSettingsArchive_TOCEntryData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCSettingsArchive_TOCEntryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCSettingsArchive_TOCEntryData* New() const final {
    return CreateMaybeMessage<TOCSettingsArchive_TOCEntryData>(nullptr);
  }

  TOCSettingsArchive_TOCEntryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCSettingsArchive_TOCEntryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCSettingsArchive_TOCEntryData& from);
  void MergeFrom(const TOCSettingsArchive_TOCEntryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCSettingsArchive_TOCEntryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCSettingsArchive.TOCEntryData";
  }
  protected:
  explicit TOCSettingsArchive_TOCEntryData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParagraphStyleFieldNumber = 1,
    kTocEntryStyleFieldNumber = 2,
    kShowInTocFieldNumber = 3,
  };
  // optional .TSP.Reference paragraph_style = 1;
  bool has_paragraph_style() const;
  private:
  bool _internal_has_paragraph_style() const;
  public:
  void clear_paragraph_style();
  const ::TSP::Reference& paragraph_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_paragraph_style();
  ::TSP::Reference* mutable_paragraph_style();
  void set_allocated_paragraph_style(::TSP::Reference* paragraph_style);
  private:
  const ::TSP::Reference& _internal_paragraph_style() const;
  ::TSP::Reference* _internal_mutable_paragraph_style();
  public:
  void unsafe_arena_set_allocated_paragraph_style(
      ::TSP::Reference* paragraph_style);
  ::TSP::Reference* unsafe_arena_release_paragraph_style();

  // optional .TSP.Reference toc_entry_style = 2;
  bool has_toc_entry_style() const;
  private:
  bool _internal_has_toc_entry_style() const;
  public:
  void clear_toc_entry_style();
  const ::TSP::Reference& toc_entry_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_toc_entry_style();
  ::TSP::Reference* mutable_toc_entry_style();
  void set_allocated_toc_entry_style(::TSP::Reference* toc_entry_style);
  private:
  const ::TSP::Reference& _internal_toc_entry_style() const;
  ::TSP::Reference* _internal_mutable_toc_entry_style();
  public:
  void unsafe_arena_set_allocated_toc_entry_style(
      ::TSP::Reference* toc_entry_style);
  ::TSP::Reference* unsafe_arena_release_toc_entry_style();

  // optional bool show_in_toc = 3;
  bool has_show_in_toc() const;
  private:
  bool _internal_has_show_in_toc() const;
  public:
  void clear_show_in_toc();
  bool show_in_toc() const;
  void set_show_in_toc(bool value);
  private:
  bool _internal_show_in_toc() const;
  void _internal_set_show_in_toc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.TOCSettingsArchive.TOCEntryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* paragraph_style_;
  ::TSP::Reference* toc_entry_style_;
  bool show_in_toc_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCSettingsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCSettingsArchive) */ {
 public:
  inline TOCSettingsArchive() : TOCSettingsArchive(nullptr) {}
  ~TOCSettingsArchive() override;
  explicit constexpr TOCSettingsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCSettingsArchive(const TOCSettingsArchive& from);
  TOCSettingsArchive(TOCSettingsArchive&& from) noexcept
    : TOCSettingsArchive() {
    *this = ::std::move(from);
  }

  inline TOCSettingsArchive& operator=(const TOCSettingsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCSettingsArchive& operator=(TOCSettingsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCSettingsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCSettingsArchive* internal_default_instance() {
    return reinterpret_cast<const TOCSettingsArchive*>(
               &_TOCSettingsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TOCSettingsArchive& a, TOCSettingsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCSettingsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCSettingsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCSettingsArchive* New() const final {
    return CreateMaybeMessage<TOCSettingsArchive>(nullptr);
  }

  TOCSettingsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCSettingsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCSettingsArchive& from);
  void MergeFrom(const TOCSettingsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCSettingsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCSettingsArchive";
  }
  protected:
  explicit TOCSettingsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TOCSettingsArchive_TOCEntryData TOCEntryData;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kTocNameFieldNumber = 1,
    kTocScopeFieldNumber = 2,
  };
  // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSWP::TOCSettingsArchive_TOCEntryData* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSettingsArchive_TOCEntryData >*
      mutable_entries();
  private:
  const ::TSWP::TOCSettingsArchive_TOCEntryData& _internal_entries(int index) const;
  ::TSWP::TOCSettingsArchive_TOCEntryData* _internal_add_entries();
  public:
  const ::TSWP::TOCSettingsArchive_TOCEntryData& entries(int index) const;
  ::TSWP::TOCSettingsArchive_TOCEntryData* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSettingsArchive_TOCEntryData >&
      entries() const;

  // optional string toc_name = 1;
  bool has_toc_name() const;
  private:
  bool _internal_has_toc_name() const;
  public:
  void clear_toc_name();
  const std::string& toc_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_toc_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_toc_name();
  std::string* release_toc_name();
  void set_allocated_toc_name(std::string* toc_name);
  private:
  const std::string& _internal_toc_name() const;
  void _internal_set_toc_name(const std::string& value);
  std::string* _internal_mutable_toc_name();
  public:

  // optional uint32 toc_scope = 2;
  bool has_toc_scope() const;
  private:
  bool _internal_has_toc_scope() const;
  public:
  void clear_toc_scope();
  ::PROTOBUF_NAMESPACE_ID::uint32 toc_scope() const;
  void set_toc_scope(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_toc_scope() const;
  void _internal_set_toc_scope(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.TOCSettingsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSettingsArchive_TOCEntryData > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toc_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 toc_scope_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCEntryInstanceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCEntryInstanceArchive) */ {
 public:
  inline TOCEntryInstanceArchive() : TOCEntryInstanceArchive(nullptr) {}
  ~TOCEntryInstanceArchive() override;
  explicit constexpr TOCEntryInstanceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCEntryInstanceArchive(const TOCEntryInstanceArchive& from);
  TOCEntryInstanceArchive(TOCEntryInstanceArchive&& from) noexcept
    : TOCEntryInstanceArchive() {
    *this = ::std::move(from);
  }

  inline TOCEntryInstanceArchive& operator=(const TOCEntryInstanceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCEntryInstanceArchive& operator=(TOCEntryInstanceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCEntryInstanceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCEntryInstanceArchive* internal_default_instance() {
    return reinterpret_cast<const TOCEntryInstanceArchive*>(
               &_TOCEntryInstanceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TOCEntryInstanceArchive& a, TOCEntryInstanceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCEntryInstanceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCEntryInstanceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCEntryInstanceArchive* New() const final {
    return CreateMaybeMessage<TOCEntryInstanceArchive>(nullptr);
  }

  TOCEntryInstanceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCEntryInstanceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCEntryInstanceArchive& from);
  void MergeFrom(const TOCEntryInstanceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCEntryInstanceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCEntryInstanceArchive";
  }
  protected:
  explicit TOCEntryInstanceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadingFieldNumber = 4,
    kNumberFormatNameFieldNumber = 9,
    kIndexedStyleFieldNumber = 5,
    kIndexedListStyleFieldNumber = 6,
    kParagraphIndexFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kNumberFormatFieldNumber = 3,
    kIndexedListStartFieldNumber = 7,
    kIndexedParagraphLevelFieldNumber = 8,
  };
  // required string heading = 4;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  const std::string& heading() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_heading(ArgT0&& arg0, ArgT... args);
  std::string* mutable_heading();
  std::string* release_heading();
  void set_allocated_heading(std::string* heading);
  private:
  const std::string& _internal_heading() const;
  void _internal_set_heading(const std::string& value);
  std::string* _internal_mutable_heading();
  public:

  // optional string number_format_name = 9;
  bool has_number_format_name() const;
  private:
  bool _internal_has_number_format_name() const;
  public:
  void clear_number_format_name();
  const std::string& number_format_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number_format_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number_format_name();
  std::string* release_number_format_name();
  void set_allocated_number_format_name(std::string* number_format_name);
  private:
  const std::string& _internal_number_format_name() const;
  void _internal_set_number_format_name(const std::string& value);
  std::string* _internal_mutable_number_format_name();
  public:

  // required .TSP.Reference indexed_style = 5;
  bool has_indexed_style() const;
  private:
  bool _internal_has_indexed_style() const;
  public:
  void clear_indexed_style();
  const ::TSP::Reference& indexed_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_indexed_style();
  ::TSP::Reference* mutable_indexed_style();
  void set_allocated_indexed_style(::TSP::Reference* indexed_style);
  private:
  const ::TSP::Reference& _internal_indexed_style() const;
  ::TSP::Reference* _internal_mutable_indexed_style();
  public:
  void unsafe_arena_set_allocated_indexed_style(
      ::TSP::Reference* indexed_style);
  ::TSP::Reference* unsafe_arena_release_indexed_style();

  // optional .TSP.Reference indexed_list_style = 6;
  bool has_indexed_list_style() const;
  private:
  bool _internal_has_indexed_list_style() const;
  public:
  void clear_indexed_list_style();
  const ::TSP::Reference& indexed_list_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_indexed_list_style();
  ::TSP::Reference* mutable_indexed_list_style();
  void set_allocated_indexed_list_style(::TSP::Reference* indexed_list_style);
  private:
  const ::TSP::Reference& _internal_indexed_list_style() const;
  ::TSP::Reference* _internal_mutable_indexed_list_style();
  public:
  void unsafe_arena_set_allocated_indexed_list_style(
      ::TSP::Reference* indexed_list_style);
  ::TSP::Reference* unsafe_arena_release_indexed_list_style();

  // required uint32 paragraph_index = 1;
  bool has_paragraph_index() const;
  private:
  bool _internal_has_paragraph_index() const;
  public:
  void clear_paragraph_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_index() const;
  void set_paragraph_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paragraph_index() const;
  void _internal_set_paragraph_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 page_number = 2;
  bool has_page_number() const;
  private:
  bool _internal_has_page_number() const;
  public:
  void clear_page_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_number() const;
  void set_page_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_number() const;
  void _internal_set_page_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 number_format = 3;
  bool has_number_format() const;
  private:
  bool _internal_has_number_format() const;
  public:
  void clear_number_format();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_format() const;
  void set_number_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_format() const;
  void _internal_set_number_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 indexed_list_start = 7;
  bool has_indexed_list_start() const;
  private:
  bool _internal_has_indexed_list_start() const;
  public:
  void clear_indexed_list_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 indexed_list_start() const;
  void set_indexed_list_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_indexed_list_start() const;
  void _internal_set_indexed_list_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 indexed_paragraph_level = 8;
  bool has_indexed_paragraph_level() const;
  private:
  bool _internal_has_indexed_paragraph_level() const;
  public:
  void clear_indexed_paragraph_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 indexed_paragraph_level() const;
  void set_indexed_paragraph_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_indexed_paragraph_level() const;
  void _internal_set_indexed_paragraph_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.TOCEntryInstanceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heading_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_format_name_;
  ::TSP::Reference* indexed_style_;
  ::TSP::Reference* indexed_list_style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 indexed_list_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 indexed_paragraph_level_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_GenericTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.GenericTransaction) */ {
 public:
  inline UndoTransaction_GenericTransaction() : UndoTransaction_GenericTransaction(nullptr) {}
  ~UndoTransaction_GenericTransaction() override;
  explicit constexpr UndoTransaction_GenericTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_GenericTransaction(const UndoTransaction_GenericTransaction& from);
  UndoTransaction_GenericTransaction(UndoTransaction_GenericTransaction&& from) noexcept
    : UndoTransaction_GenericTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_GenericTransaction& operator=(const UndoTransaction_GenericTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_GenericTransaction& operator=(UndoTransaction_GenericTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_GenericTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_GenericTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_GenericTransaction*>(
               &_UndoTransaction_GenericTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(UndoTransaction_GenericTransaction& a, UndoTransaction_GenericTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_GenericTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_GenericTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_GenericTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_GenericTransaction>(nullptr);
  }

  UndoTransaction_GenericTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_GenericTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_GenericTransaction& from);
  void MergeFrom(const UndoTransaction_GenericTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_GenericTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.GenericTransaction";
  }
  protected:
  explicit UndoTransaction_GenericTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue1FieldNumber = 1,
    kValue2FieldNumber = 2,
    kValue3FieldNumber = 3,
  };
  // required uint32 value1 = 1;
  bool has_value1() const;
  private:
  bool _internal_has_value1() const;
  public:
  void clear_value1();
  ::PROTOBUF_NAMESPACE_ID::uint32 value1() const;
  void set_value1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value1() const;
  void _internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 value2 = 2;
  bool has_value2() const;
  private:
  bool _internal_has_value2() const;
  public:
  void clear_value2();
  ::PROTOBUF_NAMESPACE_ID::uint32 value2() const;
  void set_value2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value2() const;
  void _internal_set_value2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 value3 = 3;
  bool has_value3() const;
  private:
  bool _internal_has_value3() const;
  public:
  void clear_value3();
  ::PROTOBUF_NAMESPACE_ID::uint32 value3() const;
  void set_value3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value3() const;
  void _internal_set_value3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.GenericTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value3_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_TextTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.TextTransaction) */ {
 public:
  inline UndoTransaction_TextTransaction() : UndoTransaction_TextTransaction(nullptr) {}
  ~UndoTransaction_TextTransaction() override;
  explicit constexpr UndoTransaction_TextTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_TextTransaction(const UndoTransaction_TextTransaction& from);
  UndoTransaction_TextTransaction(UndoTransaction_TextTransaction&& from) noexcept
    : UndoTransaction_TextTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_TextTransaction& operator=(const UndoTransaction_TextTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_TextTransaction& operator=(UndoTransaction_TextTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_TextTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_TextTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_TextTransaction*>(
               &_UndoTransaction_TextTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UndoTransaction_TextTransaction& a, UndoTransaction_TextTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_TextTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_TextTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_TextTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_TextTransaction>(nullptr);
  }

  UndoTransaction_TextTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_TextTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_TextTransaction& from);
  void MergeFrom(const UndoTransaction_TextTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_TextTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.TextTransaction";
  }
  protected:
  explicit UndoTransaction_TextTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringToDeleteFieldNumber = 3,
    kInsertLocationFieldNumber = 1,
    kInsertLengthFieldNumber = 2,
  };
  // optional string string_to_delete = 3;
  bool has_string_to_delete() const;
  private:
  bool _internal_has_string_to_delete() const;
  public:
  void clear_string_to_delete();
  const std::string& string_to_delete() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_to_delete(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_to_delete();
  std::string* release_string_to_delete();
  void set_allocated_string_to_delete(std::string* string_to_delete);
  private:
  const std::string& _internal_string_to_delete() const;
  void _internal_set_string_to_delete(const std::string& value);
  std::string* _internal_mutable_string_to_delete();
  public:

  // required uint32 insert_location = 1;
  bool has_insert_location() const;
  private:
  bool _internal_has_insert_location() const;
  public:
  void clear_insert_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 insert_location() const;
  void set_insert_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_insert_location() const;
  void _internal_set_insert_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 insert_length = 2;
  bool has_insert_length() const;
  private:
  bool _internal_has_insert_length() const;
  public:
  void clear_insert_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 insert_length() const;
  void set_insert_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_insert_length() const;
  void _internal_set_insert_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.TextTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_to_delete_;
  ::PROTOBUF_NAMESPACE_ID::uint32 insert_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 insert_length_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_CharIndexTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.CharIndexTransaction) */ {
 public:
  inline UndoTransaction_CharIndexTransaction() : UndoTransaction_CharIndexTransaction(nullptr) {}
  ~UndoTransaction_CharIndexTransaction() override;
  explicit constexpr UndoTransaction_CharIndexTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_CharIndexTransaction(const UndoTransaction_CharIndexTransaction& from);
  UndoTransaction_CharIndexTransaction(UndoTransaction_CharIndexTransaction&& from) noexcept
    : UndoTransaction_CharIndexTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_CharIndexTransaction& operator=(const UndoTransaction_CharIndexTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_CharIndexTransaction& operator=(UndoTransaction_CharIndexTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_CharIndexTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_CharIndexTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_CharIndexTransaction*>(
               &_UndoTransaction_CharIndexTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(UndoTransaction_CharIndexTransaction& a, UndoTransaction_CharIndexTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_CharIndexTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_CharIndexTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_CharIndexTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_CharIndexTransaction>(nullptr);
  }

  UndoTransaction_CharIndexTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_CharIndexTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_CharIndexTransaction& from);
  void MergeFrom(const UndoTransaction_CharIndexTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_CharIndexTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.CharIndexTransaction";
  }
  protected:
  explicit UndoTransaction_CharIndexTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 3,
    kCharIndexFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional .TSP.Reference object = 3;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::TSP::Reference& object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_object();
  ::TSP::Reference* mutable_object();
  void set_allocated_object(::TSP::Reference* object);
  private:
  const ::TSP::Reference& _internal_object() const;
  ::TSP::Reference* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::TSP::Reference* object);
  ::TSP::Reference* unsafe_arena_release_object();

  // required uint32 char_index = 1;
  bool has_char_index() const;
  private:
  bool _internal_has_char_index() const;
  public:
  void clear_char_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index() const;
  void set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_char_index() const;
  void _internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.CharIndexTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_ReplaceCharIndexTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.ReplaceCharIndexTransaction) */ {
 public:
  inline UndoTransaction_ReplaceCharIndexTransaction() : UndoTransaction_ReplaceCharIndexTransaction(nullptr) {}
  ~UndoTransaction_ReplaceCharIndexTransaction() override;
  explicit constexpr UndoTransaction_ReplaceCharIndexTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_ReplaceCharIndexTransaction(const UndoTransaction_ReplaceCharIndexTransaction& from);
  UndoTransaction_ReplaceCharIndexTransaction(UndoTransaction_ReplaceCharIndexTransaction&& from) noexcept
    : UndoTransaction_ReplaceCharIndexTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_ReplaceCharIndexTransaction& operator=(const UndoTransaction_ReplaceCharIndexTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_ReplaceCharIndexTransaction& operator=(UndoTransaction_ReplaceCharIndexTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_ReplaceCharIndexTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_ReplaceCharIndexTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_ReplaceCharIndexTransaction*>(
               &_UndoTransaction_ReplaceCharIndexTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(UndoTransaction_ReplaceCharIndexTransaction& a, UndoTransaction_ReplaceCharIndexTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_ReplaceCharIndexTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_ReplaceCharIndexTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_ReplaceCharIndexTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_ReplaceCharIndexTransaction>(nullptr);
  }

  UndoTransaction_ReplaceCharIndexTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_ReplaceCharIndexTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_ReplaceCharIndexTransaction& from);
  void MergeFrom(const UndoTransaction_ReplaceCharIndexTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_ReplaceCharIndexTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.ReplaceCharIndexTransaction";
  }
  protected:
  explicit UndoTransaction_ReplaceCharIndexTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeIndexFieldNumber = 1,
    kCharIndexFieldNumber = 2,
  };
  // required uint32 attribute_index = 1;
  bool has_attribute_index() const;
  private:
  bool _internal_has_attribute_index() const;
  public:
  void clear_attribute_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index() const;
  void set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute_index() const;
  void _internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 char_index = 2;
  bool has_char_index() const;
  private:
  bool _internal_has_char_index() const;
  public:
  void clear_char_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index() const;
  void set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_char_index() const;
  void _internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_AttributeIndexTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.AttributeIndexTransaction) */ {
 public:
  inline UndoTransaction_AttributeIndexTransaction() : UndoTransaction_AttributeIndexTransaction(nullptr) {}
  ~UndoTransaction_AttributeIndexTransaction() override;
  explicit constexpr UndoTransaction_AttributeIndexTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_AttributeIndexTransaction(const UndoTransaction_AttributeIndexTransaction& from);
  UndoTransaction_AttributeIndexTransaction(UndoTransaction_AttributeIndexTransaction&& from) noexcept
    : UndoTransaction_AttributeIndexTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_AttributeIndexTransaction& operator=(const UndoTransaction_AttributeIndexTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_AttributeIndexTransaction& operator=(UndoTransaction_AttributeIndexTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_AttributeIndexTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_AttributeIndexTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_AttributeIndexTransaction*>(
               &_UndoTransaction_AttributeIndexTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(UndoTransaction_AttributeIndexTransaction& a, UndoTransaction_AttributeIndexTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_AttributeIndexTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_AttributeIndexTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_AttributeIndexTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_AttributeIndexTransaction>(nullptr);
  }

  UndoTransaction_AttributeIndexTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_AttributeIndexTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_AttributeIndexTransaction& from);
  void MergeFrom(const UndoTransaction_AttributeIndexTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_AttributeIndexTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.AttributeIndexTransaction";
  }
  protected:
  explicit UndoTransaction_AttributeIndexTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldNumber = 4,
    kObjectFieldNumber = 3,
    kAttributeIndexFieldNumber = 1,
    kCharIndexFieldNumber = 2,
  };
  // optional string string = 4;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // optional .TSP.Reference object = 3;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::TSP::Reference& object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_object();
  ::TSP::Reference* mutable_object();
  void set_allocated_object(::TSP::Reference* object);
  private:
  const ::TSP::Reference& _internal_object() const;
  ::TSP::Reference* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::TSP::Reference* object);
  ::TSP::Reference* unsafe_arena_release_object();

  // required uint32 attribute_index = 1;
  bool has_attribute_index() const;
  private:
  bool _internal_has_attribute_index() const;
  public:
  void clear_attribute_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index() const;
  void set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute_index() const;
  void _internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 char_index = 2;
  bool has_char_index() const;
  private:
  bool _internal_has_char_index() const;
  public:
  void clear_char_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index() const;
  void set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_char_index() const;
  void _internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.AttributeIndexTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::TSP::Reference* object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_InsertAttributeTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.InsertAttributeTransaction) */ {
 public:
  inline UndoTransaction_InsertAttributeTransaction() : UndoTransaction_InsertAttributeTransaction(nullptr) {}
  ~UndoTransaction_InsertAttributeTransaction() override;
  explicit constexpr UndoTransaction_InsertAttributeTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_InsertAttributeTransaction(const UndoTransaction_InsertAttributeTransaction& from);
  UndoTransaction_InsertAttributeTransaction(UndoTransaction_InsertAttributeTransaction&& from) noexcept
    : UndoTransaction_InsertAttributeTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_InsertAttributeTransaction& operator=(const UndoTransaction_InsertAttributeTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_InsertAttributeTransaction& operator=(UndoTransaction_InsertAttributeTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_InsertAttributeTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_InsertAttributeTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_InsertAttributeTransaction*>(
               &_UndoTransaction_InsertAttributeTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UndoTransaction_InsertAttributeTransaction& a, UndoTransaction_InsertAttributeTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_InsertAttributeTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_InsertAttributeTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_InsertAttributeTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_InsertAttributeTransaction>(nullptr);
  }

  UndoTransaction_InsertAttributeTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_InsertAttributeTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_InsertAttributeTransaction& from);
  void MergeFrom(const UndoTransaction_InsertAttributeTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_InsertAttributeTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.InsertAttributeTransaction";
  }
  protected:
  explicit UndoTransaction_InsertAttributeTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldNumber = 4,
    kObjectFieldNumber = 3,
    kAttributeIndexFieldNumber = 1,
    kAttributeCountFieldNumber = 2,
  };
  // optional string string = 4;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // optional .TSP.Reference object = 3;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::TSP::Reference& object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_object();
  ::TSP::Reference* mutable_object();
  void set_allocated_object(::TSP::Reference* object);
  private:
  const ::TSP::Reference& _internal_object() const;
  ::TSP::Reference* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::TSP::Reference* object);
  ::TSP::Reference* unsafe_arena_release_object();

  // required uint32 attribute_index = 1;
  bool has_attribute_index() const;
  private:
  bool _internal_has_attribute_index() const;
  public:
  void clear_attribute_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index() const;
  void set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute_index() const;
  void _internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 attribute_count = 2;
  bool has_attribute_count() const;
  private:
  bool _internal_has_attribute_count() const;
  public:
  void clear_attribute_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_count() const;
  void set_attribute_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute_count() const;
  void _internal_set_attribute_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.InsertAttributeTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::TSP::Reference* object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_count_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_InsertNilTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.InsertNilTransaction) */ {
 public:
  inline UndoTransaction_InsertNilTransaction() : UndoTransaction_InsertNilTransaction(nullptr) {}
  ~UndoTransaction_InsertNilTransaction() override;
  explicit constexpr UndoTransaction_InsertNilTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_InsertNilTransaction(const UndoTransaction_InsertNilTransaction& from);
  UndoTransaction_InsertNilTransaction(UndoTransaction_InsertNilTransaction&& from) noexcept
    : UndoTransaction_InsertNilTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_InsertNilTransaction& operator=(const UndoTransaction_InsertNilTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_InsertNilTransaction& operator=(UndoTransaction_InsertNilTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_InsertNilTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_InsertNilTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_InsertNilTransaction*>(
               &_UndoTransaction_InsertNilTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(UndoTransaction_InsertNilTransaction& a, UndoTransaction_InsertNilTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_InsertNilTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_InsertNilTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_InsertNilTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_InsertNilTransaction>(nullptr);
  }

  UndoTransaction_InsertNilTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_InsertNilTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_InsertNilTransaction& from);
  void MergeFrom(const UndoTransaction_InsertNilTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_InsertNilTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.InsertNilTransaction";
  }
  protected:
  explicit UndoTransaction_InsertNilTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeIndexFieldNumber = 1,
    kAttributeCountFieldNumber = 2,
  };
  // required uint32 attribute_index = 1;
  bool has_attribute_index() const;
  private:
  bool _internal_has_attribute_index() const;
  public:
  void clear_attribute_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index() const;
  void set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute_index() const;
  void _internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 attribute_count = 2;
  bool has_attribute_count() const;
  private:
  bool _internal_has_attribute_count() const;
  public:
  void clear_attribute_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_count() const;
  void set_attribute_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute_count() const;
  void _internal_set_attribute_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.InsertNilTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_count_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_CharDeltaTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.CharDeltaTransaction) */ {
 public:
  inline UndoTransaction_CharDeltaTransaction() : UndoTransaction_CharDeltaTransaction(nullptr) {}
  ~UndoTransaction_CharDeltaTransaction() override;
  explicit constexpr UndoTransaction_CharDeltaTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_CharDeltaTransaction(const UndoTransaction_CharDeltaTransaction& from);
  UndoTransaction_CharDeltaTransaction(UndoTransaction_CharDeltaTransaction&& from) noexcept
    : UndoTransaction_CharDeltaTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_CharDeltaTransaction& operator=(const UndoTransaction_CharDeltaTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_CharDeltaTransaction& operator=(UndoTransaction_CharDeltaTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_CharDeltaTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_CharDeltaTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_CharDeltaTransaction*>(
               &_UndoTransaction_CharDeltaTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(UndoTransaction_CharDeltaTransaction& a, UndoTransaction_CharDeltaTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_CharDeltaTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_CharDeltaTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_CharDeltaTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_CharDeltaTransaction>(nullptr);
  }

  UndoTransaction_CharDeltaTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_CharDeltaTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_CharDeltaTransaction& from);
  void MergeFrom(const UndoTransaction_CharDeltaTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_CharDeltaTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.CharDeltaTransaction";
  }
  protected:
  explicit UndoTransaction_CharDeltaTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharIndexFieldNumber = 1,
    kAttributeIndexFieldNumber = 2,
    kCharDeltaFieldNumber = 3,
  };
  // required uint32 char_index = 1;
  bool has_char_index() const;
  private:
  bool _internal_has_char_index() const;
  public:
  void clear_char_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index() const;
  void set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_char_index() const;
  void _internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 attribute_index = 2;
  bool has_attribute_index() const;
  private:
  bool _internal_has_attribute_index() const;
  public:
  void clear_attribute_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index() const;
  void set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute_index() const;
  void _internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required sint32 char_delta = 3;
  bool has_char_delta() const;
  private:
  bool _internal_has_char_delta() const;
  public:
  void clear_char_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 char_delta() const;
  void set_char_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_char_delta() const;
  void _internal_set_char_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.CharDeltaTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 char_delta_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_ParagraphDataTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.ParagraphDataTransaction) */ {
 public:
  inline UndoTransaction_ParagraphDataTransaction() : UndoTransaction_ParagraphDataTransaction(nullptr) {}
  ~UndoTransaction_ParagraphDataTransaction() override;
  explicit constexpr UndoTransaction_ParagraphDataTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_ParagraphDataTransaction(const UndoTransaction_ParagraphDataTransaction& from);
  UndoTransaction_ParagraphDataTransaction(UndoTransaction_ParagraphDataTransaction&& from) noexcept
    : UndoTransaction_ParagraphDataTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_ParagraphDataTransaction& operator=(const UndoTransaction_ParagraphDataTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_ParagraphDataTransaction& operator=(UndoTransaction_ParagraphDataTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_ParagraphDataTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_ParagraphDataTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_ParagraphDataTransaction*>(
               &_UndoTransaction_ParagraphDataTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(UndoTransaction_ParagraphDataTransaction& a, UndoTransaction_ParagraphDataTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_ParagraphDataTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_ParagraphDataTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_ParagraphDataTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_ParagraphDataTransaction>(nullptr);
  }

  UndoTransaction_ParagraphDataTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_ParagraphDataTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_ParagraphDataTransaction& from);
  void MergeFrom(const UndoTransaction_ParagraphDataTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_ParagraphDataTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.ParagraphDataTransaction";
  }
  protected:
  explicit UndoTransaction_ParagraphDataTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeIndexFieldNumber = 1,
    kFirstFieldNumber = 2,
    kSecondFieldNumber = 3,
    kCharIndexFieldNumber = 4,
  };
  // required uint32 attribute_index = 1;
  bool has_attribute_index() const;
  private:
  bool _internal_has_attribute_index() const;
  public:
  void clear_attribute_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index() const;
  void set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute_index() const;
  void _internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 first = 2;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  ::PROTOBUF_NAMESPACE_ID::uint32 first() const;
  void set_first(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first() const;
  void _internal_set_first(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 second = 3;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::uint32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 char_index = 4;
  bool has_char_index() const;
  private:
  bool _internal_has_char_index() const;
  public:
  void clear_char_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index() const;
  void set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_char_index() const;
  void _internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.ParagraphDataTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_;
  ::PROTOBUF_NAMESPACE_ID::uint32 second_;
  ::PROTOBUF_NAMESPACE_ID::uint32 char_index_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_ObjectDOLCTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.ObjectDOLCTransaction) */ {
 public:
  inline UndoTransaction_ObjectDOLCTransaction() : UndoTransaction_ObjectDOLCTransaction(nullptr) {}
  ~UndoTransaction_ObjectDOLCTransaction() override;
  explicit constexpr UndoTransaction_ObjectDOLCTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_ObjectDOLCTransaction(const UndoTransaction_ObjectDOLCTransaction& from);
  UndoTransaction_ObjectDOLCTransaction(UndoTransaction_ObjectDOLCTransaction&& from) noexcept
    : UndoTransaction_ObjectDOLCTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_ObjectDOLCTransaction& operator=(const UndoTransaction_ObjectDOLCTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_ObjectDOLCTransaction& operator=(UndoTransaction_ObjectDOLCTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_ObjectDOLCTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_ObjectDOLCTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_ObjectDOLCTransaction*>(
               &_UndoTransaction_ObjectDOLCTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(UndoTransaction_ObjectDOLCTransaction& a, UndoTransaction_ObjectDOLCTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_ObjectDOLCTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_ObjectDOLCTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_ObjectDOLCTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_ObjectDOLCTransaction>(nullptr);
  }

  UndoTransaction_ObjectDOLCTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_ObjectDOLCTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_ObjectDOLCTransaction& from);
  void MergeFrom(const UndoTransaction_ObjectDOLCTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_ObjectDOLCTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.ObjectDOLCTransaction";
  }
  protected:
  explicit UndoTransaction_ObjectDOLCTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 2,
    kFlagsFieldNumber = 1,
  };
  // optional .TSP.Reference object = 2;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::TSP::Reference& object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_object();
  ::TSP::Reference* mutable_object();
  void set_allocated_object(::TSP::Reference* object);
  private:
  const ::TSP::Reference& _internal_object() const;
  ::TSP::Reference* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::TSP::Reference* object);
  ::TSP::Reference* unsafe_arena_release_object();

  // required uint32 flags = 1;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.ObjectDOLCTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_CTDateTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.CTDateTransaction) */ {
 public:
  inline UndoTransaction_CTDateTransaction() : UndoTransaction_CTDateTransaction(nullptr) {}
  ~UndoTransaction_CTDateTransaction() override;
  explicit constexpr UndoTransaction_CTDateTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_CTDateTransaction(const UndoTransaction_CTDateTransaction& from);
  UndoTransaction_CTDateTransaction(UndoTransaction_CTDateTransaction&& from) noexcept
    : UndoTransaction_CTDateTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_CTDateTransaction& operator=(const UndoTransaction_CTDateTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_CTDateTransaction& operator=(UndoTransaction_CTDateTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_CTDateTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_CTDateTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_CTDateTransaction*>(
               &_UndoTransaction_CTDateTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(UndoTransaction_CTDateTransaction& a, UndoTransaction_CTDateTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_CTDateTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_CTDateTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_CTDateTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_CTDateTransaction>(nullptr);
  }

  UndoTransaction_CTDateTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_CTDateTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_CTDateTransaction& from);
  void MergeFrom(const UndoTransaction_CTDateTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_CTDateTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.CTDateTransaction";
  }
  protected:
  explicit UndoTransaction_CTDateTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 2,
    kAttributeIndexFieldNumber = 1,
  };
  // optional .TSP.Date date = 2;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::TSP::Date& date() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Date* release_date();
  ::TSP::Date* mutable_date();
  void set_allocated_date(::TSP::Date* date);
  private:
  const ::TSP::Date& _internal_date() const;
  ::TSP::Date* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::TSP::Date* date);
  ::TSP::Date* unsafe_arena_release_date();

  // required uint32 attribute_index = 1;
  bool has_attribute_index() const;
  private:
  bool _internal_has_attribute_index() const;
  public:
  void clear_attribute_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index() const;
  void set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute_index() const;
  void _internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.CTDateTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Date* date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_index_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_UnionTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.UnionTransaction) */ {
 public:
  inline UndoTransaction_UnionTransaction() : UndoTransaction_UnionTransaction(nullptr) {}
  ~UndoTransaction_UnionTransaction() override;
  explicit constexpr UndoTransaction_UnionTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_UnionTransaction(const UndoTransaction_UnionTransaction& from);
  UndoTransaction_UnionTransaction(UndoTransaction_UnionTransaction&& from) noexcept
    : UndoTransaction_UnionTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_UnionTransaction& operator=(const UndoTransaction_UnionTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_UnionTransaction& operator=(UndoTransaction_UnionTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_UnionTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_UnionTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_UnionTransaction*>(
               &_UndoTransaction_UnionTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(UndoTransaction_UnionTransaction& a, UndoTransaction_UnionTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_UnionTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_UnionTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_UnionTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction_UnionTransaction>(nullptr);
  }

  UndoTransaction_UnionTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_UnionTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_UnionTransaction& from);
  void MergeFrom(const UndoTransaction_UnionTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_UnionTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.UnionTransaction";
  }
  protected:
  explicit UndoTransaction_UnionTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenericFieldNumber = 5,
    kTextFieldNumber = 6,
    kCharIndexFieldNumber = 7,
    kReplaceCharIndexFieldNumber = 8,
    kAttributeIndexFieldNumber = 9,
    kInsertNilFieldNumber = 10,
    kInsertAttributeFieldNumber = 11,
    kCharDeltaFieldNumber = 12,
    kParagraphDataFieldNumber = 13,
    kObjectDolcFieldNumber = 14,
    kCtDateFieldNumber = 15,
    kTableFieldNumber = 2,
    kKindFieldNumber = 1,
  };
  // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
  bool has_generic() const;
  private:
  bool _internal_has_generic() const;
  public:
  void clear_generic();
  const ::TSWP::UndoTransaction_GenericTransaction& generic() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_GenericTransaction* release_generic();
  ::TSWP::UndoTransaction_GenericTransaction* mutable_generic();
  void set_allocated_generic(::TSWP::UndoTransaction_GenericTransaction* generic);
  private:
  const ::TSWP::UndoTransaction_GenericTransaction& _internal_generic() const;
  ::TSWP::UndoTransaction_GenericTransaction* _internal_mutable_generic();
  public:
  void unsafe_arena_set_allocated_generic(
      ::TSWP::UndoTransaction_GenericTransaction* generic);
  ::TSWP::UndoTransaction_GenericTransaction* unsafe_arena_release_generic();

  // optional .TSWP.UndoTransaction.TextTransaction text = 6;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::TSWP::UndoTransaction_TextTransaction& text() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_TextTransaction* release_text();
  ::TSWP::UndoTransaction_TextTransaction* mutable_text();
  void set_allocated_text(::TSWP::UndoTransaction_TextTransaction* text);
  private:
  const ::TSWP::UndoTransaction_TextTransaction& _internal_text() const;
  ::TSWP::UndoTransaction_TextTransaction* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::TSWP::UndoTransaction_TextTransaction* text);
  ::TSWP::UndoTransaction_TextTransaction* unsafe_arena_release_text();

  // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
  bool has_char_index() const;
  private:
  bool _internal_has_char_index() const;
  public:
  void clear_char_index();
  const ::TSWP::UndoTransaction_CharIndexTransaction& char_index() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_CharIndexTransaction* release_char_index();
  ::TSWP::UndoTransaction_CharIndexTransaction* mutable_char_index();
  void set_allocated_char_index(::TSWP::UndoTransaction_CharIndexTransaction* char_index);
  private:
  const ::TSWP::UndoTransaction_CharIndexTransaction& _internal_char_index() const;
  ::TSWP::UndoTransaction_CharIndexTransaction* _internal_mutable_char_index();
  public:
  void unsafe_arena_set_allocated_char_index(
      ::TSWP::UndoTransaction_CharIndexTransaction* char_index);
  ::TSWP::UndoTransaction_CharIndexTransaction* unsafe_arena_release_char_index();

  // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
  bool has_replace_char_index() const;
  private:
  bool _internal_has_replace_char_index() const;
  public:
  void clear_replace_char_index();
  const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction& replace_char_index() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* release_replace_char_index();
  ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* mutable_replace_char_index();
  void set_allocated_replace_char_index(::TSWP::UndoTransaction_ReplaceCharIndexTransaction* replace_char_index);
  private:
  const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction& _internal_replace_char_index() const;
  ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* _internal_mutable_replace_char_index();
  public:
  void unsafe_arena_set_allocated_replace_char_index(
      ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* replace_char_index);
  ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* unsafe_arena_release_replace_char_index();

  // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
  bool has_attribute_index() const;
  private:
  bool _internal_has_attribute_index() const;
  public:
  void clear_attribute_index();
  const ::TSWP::UndoTransaction_AttributeIndexTransaction& attribute_index() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_AttributeIndexTransaction* release_attribute_index();
  ::TSWP::UndoTransaction_AttributeIndexTransaction* mutable_attribute_index();
  void set_allocated_attribute_index(::TSWP::UndoTransaction_AttributeIndexTransaction* attribute_index);
  private:
  const ::TSWP::UndoTransaction_AttributeIndexTransaction& _internal_attribute_index() const;
  ::TSWP::UndoTransaction_AttributeIndexTransaction* _internal_mutable_attribute_index();
  public:
  void unsafe_arena_set_allocated_attribute_index(
      ::TSWP::UndoTransaction_AttributeIndexTransaction* attribute_index);
  ::TSWP::UndoTransaction_AttributeIndexTransaction* unsafe_arena_release_attribute_index();

  // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
  bool has_insert_nil() const;
  private:
  bool _internal_has_insert_nil() const;
  public:
  void clear_insert_nil();
  const ::TSWP::UndoTransaction_InsertNilTransaction& insert_nil() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_InsertNilTransaction* release_insert_nil();
  ::TSWP::UndoTransaction_InsertNilTransaction* mutable_insert_nil();
  void set_allocated_insert_nil(::TSWP::UndoTransaction_InsertNilTransaction* insert_nil);
  private:
  const ::TSWP::UndoTransaction_InsertNilTransaction& _internal_insert_nil() const;
  ::TSWP::UndoTransaction_InsertNilTransaction* _internal_mutable_insert_nil();
  public:
  void unsafe_arena_set_allocated_insert_nil(
      ::TSWP::UndoTransaction_InsertNilTransaction* insert_nil);
  ::TSWP::UndoTransaction_InsertNilTransaction* unsafe_arena_release_insert_nil();

  // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
  bool has_insert_attribute() const;
  private:
  bool _internal_has_insert_attribute() const;
  public:
  void clear_insert_attribute();
  const ::TSWP::UndoTransaction_InsertAttributeTransaction& insert_attribute() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_InsertAttributeTransaction* release_insert_attribute();
  ::TSWP::UndoTransaction_InsertAttributeTransaction* mutable_insert_attribute();
  void set_allocated_insert_attribute(::TSWP::UndoTransaction_InsertAttributeTransaction* insert_attribute);
  private:
  const ::TSWP::UndoTransaction_InsertAttributeTransaction& _internal_insert_attribute() const;
  ::TSWP::UndoTransaction_InsertAttributeTransaction* _internal_mutable_insert_attribute();
  public:
  void unsafe_arena_set_allocated_insert_attribute(
      ::TSWP::UndoTransaction_InsertAttributeTransaction* insert_attribute);
  ::TSWP::UndoTransaction_InsertAttributeTransaction* unsafe_arena_release_insert_attribute();

  // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
  bool has_char_delta() const;
  private:
  bool _internal_has_char_delta() const;
  public:
  void clear_char_delta();
  const ::TSWP::UndoTransaction_CharDeltaTransaction& char_delta() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_CharDeltaTransaction* release_char_delta();
  ::TSWP::UndoTransaction_CharDeltaTransaction* mutable_char_delta();
  void set_allocated_char_delta(::TSWP::UndoTransaction_CharDeltaTransaction* char_delta);
  private:
  const ::TSWP::UndoTransaction_CharDeltaTransaction& _internal_char_delta() const;
  ::TSWP::UndoTransaction_CharDeltaTransaction* _internal_mutable_char_delta();
  public:
  void unsafe_arena_set_allocated_char_delta(
      ::TSWP::UndoTransaction_CharDeltaTransaction* char_delta);
  ::TSWP::UndoTransaction_CharDeltaTransaction* unsafe_arena_release_char_delta();

  // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
  bool has_paragraph_data() const;
  private:
  bool _internal_has_paragraph_data() const;
  public:
  void clear_paragraph_data();
  const ::TSWP::UndoTransaction_ParagraphDataTransaction& paragraph_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_ParagraphDataTransaction* release_paragraph_data();
  ::TSWP::UndoTransaction_ParagraphDataTransaction* mutable_paragraph_data();
  void set_allocated_paragraph_data(::TSWP::UndoTransaction_ParagraphDataTransaction* paragraph_data);
  private:
  const ::TSWP::UndoTransaction_ParagraphDataTransaction& _internal_paragraph_data() const;
  ::TSWP::UndoTransaction_ParagraphDataTransaction* _internal_mutable_paragraph_data();
  public:
  void unsafe_arena_set_allocated_paragraph_data(
      ::TSWP::UndoTransaction_ParagraphDataTransaction* paragraph_data);
  ::TSWP::UndoTransaction_ParagraphDataTransaction* unsafe_arena_release_paragraph_data();

  // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
  bool has_object_dolc() const;
  private:
  bool _internal_has_object_dolc() const;
  public:
  void clear_object_dolc();
  const ::TSWP::UndoTransaction_ObjectDOLCTransaction& object_dolc() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_ObjectDOLCTransaction* release_object_dolc();
  ::TSWP::UndoTransaction_ObjectDOLCTransaction* mutable_object_dolc();
  void set_allocated_object_dolc(::TSWP::UndoTransaction_ObjectDOLCTransaction* object_dolc);
  private:
  const ::TSWP::UndoTransaction_ObjectDOLCTransaction& _internal_object_dolc() const;
  ::TSWP::UndoTransaction_ObjectDOLCTransaction* _internal_mutable_object_dolc();
  public:
  void unsafe_arena_set_allocated_object_dolc(
      ::TSWP::UndoTransaction_ObjectDOLCTransaction* object_dolc);
  ::TSWP::UndoTransaction_ObjectDOLCTransaction* unsafe_arena_release_object_dolc();

  // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
  bool has_ct_date() const;
  private:
  bool _internal_has_ct_date() const;
  public:
  void clear_ct_date();
  const ::TSWP::UndoTransaction_CTDateTransaction& ct_date() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction_CTDateTransaction* release_ct_date();
  ::TSWP::UndoTransaction_CTDateTransaction* mutable_ct_date();
  void set_allocated_ct_date(::TSWP::UndoTransaction_CTDateTransaction* ct_date);
  private:
  const ::TSWP::UndoTransaction_CTDateTransaction& _internal_ct_date() const;
  ::TSWP::UndoTransaction_CTDateTransaction* _internal_mutable_ct_date();
  public:
  void unsafe_arena_set_allocated_ct_date(
      ::TSWP::UndoTransaction_CTDateTransaction* ct_date);
  ::TSWP::UndoTransaction_CTDateTransaction* unsafe_arena_release_ct_date();

  // optional uint32 table = 2;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  ::PROTOBUF_NAMESPACE_ID::uint32 table() const;
  void set_table(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_table() const;
  void _internal_set_table(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .TSWP.UndoTransaction.UndoKind kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::TSWP::UndoTransaction_UndoKind kind() const;
  void set_kind(::TSWP::UndoTransaction_UndoKind value);
  private:
  ::TSWP::UndoTransaction_UndoKind _internal_kind() const;
  void _internal_set_kind(::TSWP::UndoTransaction_UndoKind value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.UnionTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::UndoTransaction_GenericTransaction* generic_;
  ::TSWP::UndoTransaction_TextTransaction* text_;
  ::TSWP::UndoTransaction_CharIndexTransaction* char_index_;
  ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* replace_char_index_;
  ::TSWP::UndoTransaction_AttributeIndexTransaction* attribute_index_;
  ::TSWP::UndoTransaction_InsertNilTransaction* insert_nil_;
  ::TSWP::UndoTransaction_InsertAttributeTransaction* insert_attribute_;
  ::TSWP::UndoTransaction_CharDeltaTransaction* char_delta_;
  ::TSWP::UndoTransaction_ParagraphDataTransaction* paragraph_data_;
  ::TSWP::UndoTransaction_ObjectDOLCTransaction* object_dolc_;
  ::TSWP::UndoTransaction_CTDateTransaction* ct_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 table_;
  int kind_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_StorageAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.StorageAction) */ {
 public:
  inline UndoTransaction_StorageAction() : UndoTransaction_StorageAction(nullptr) {}
  ~UndoTransaction_StorageAction() override;
  explicit constexpr UndoTransaction_StorageAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_StorageAction(const UndoTransaction_StorageAction& from);
  UndoTransaction_StorageAction(UndoTransaction_StorageAction&& from) noexcept
    : UndoTransaction_StorageAction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_StorageAction& operator=(const UndoTransaction_StorageAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_StorageAction& operator=(UndoTransaction_StorageAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_StorageAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_StorageAction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_StorageAction*>(
               &_UndoTransaction_StorageAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(UndoTransaction_StorageAction& a, UndoTransaction_StorageAction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_StorageAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_StorageAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_StorageAction* New() const final {
    return CreateMaybeMessage<UndoTransaction_StorageAction>(nullptr);
  }

  UndoTransaction_StorageAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_StorageAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_StorageAction& from);
  void MergeFrom(const UndoTransaction_StorageAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_StorageAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.StorageAction";
  }
  protected:
  explicit UndoTransaction_StorageAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldNumber = 5,
    kPlacementUuidPathFieldNumber = 12,
    kRangeFieldNumber = 4,
    kObjectFieldNumber = 6,
    kDateFieldNumber = 7,
    kUndoObjectFieldNumber = 13,
    kKindFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kTableFieldNumber = 3,
    kParagraphLevelFieldNumber = 8,
    kParagraphFlagsFieldNumber = 9,
    kParagraphValueFieldNumber = 10,
    kPlacementIndexFieldNumber = 11,
  };
  // optional string string = 5;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // optional string placement_uuid_path = 12;
  bool has_placement_uuid_path() const;
  private:
  bool _internal_has_placement_uuid_path() const;
  public:
  void clear_placement_uuid_path();
  const std::string& placement_uuid_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_placement_uuid_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_placement_uuid_path();
  std::string* release_placement_uuid_path();
  void set_allocated_placement_uuid_path(std::string* placement_uuid_path);
  private:
  const std::string& _internal_placement_uuid_path() const;
  void _internal_set_placement_uuid_path(const std::string& value);
  std::string* _internal_mutable_placement_uuid_path();
  public:

  // optional .TSP.Range range = 4;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // optional .TSP.Reference object = 6;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::TSP::Reference& object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_object();
  ::TSP::Reference* mutable_object();
  void set_allocated_object(::TSP::Reference* object);
  private:
  const ::TSP::Reference& _internal_object() const;
  ::TSP::Reference* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::TSP::Reference* object);
  ::TSP::Reference* unsafe_arena_release_object();

  // optional .TSP.Date date = 7;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::TSP::Date& date() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Date* release_date();
  ::TSP::Date* mutable_date();
  void set_allocated_date(::TSP::Date* date);
  private:
  const ::TSP::Date& _internal_date() const;
  ::TSP::Date* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::TSP::Date* date);
  ::TSP::Date* unsafe_arena_release_date();

  // optional .TSP.Reference undo_object = 13;
  bool has_undo_object() const;
  private:
  bool _internal_has_undo_object() const;
  public:
  void clear_undo_object();
  const ::TSP::Reference& undo_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_undo_object();
  ::TSP::Reference* mutable_undo_object();
  void set_allocated_undo_object(::TSP::Reference* undo_object);
  private:
  const ::TSP::Reference& _internal_undo_object() const;
  ::TSP::Reference* _internal_mutable_undo_object();
  public:
  void unsafe_arena_set_allocated_undo_object(
      ::TSP::Reference* undo_object);
  ::TSP::Reference* unsafe_arena_release_undo_object();

  // required .TSWP.UndoTransaction.ActionKind kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::TSWP::UndoTransaction_ActionKind kind() const;
  void set_kind(::TSWP::UndoTransaction_ActionKind value);
  private:
  ::TSWP::UndoTransaction_ActionKind _internal_kind() const;
  void _internal_set_kind(::TSWP::UndoTransaction_ActionKind value);
  public:

  // optional uint32 flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 table = 3;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  ::PROTOBUF_NAMESPACE_ID::uint32 table() const;
  void set_table(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_table() const;
  void _internal_set_table(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 paragraph_level = 8;
  bool has_paragraph_level() const;
  private:
  bool _internal_has_paragraph_level() const;
  public:
  void clear_paragraph_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_level() const;
  void set_paragraph_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paragraph_level() const;
  void _internal_set_paragraph_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 paragraph_flags = 9;
  bool has_paragraph_flags() const;
  private:
  bool _internal_has_paragraph_flags() const;
  public:
  void clear_paragraph_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_flags() const;
  void set_paragraph_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paragraph_flags() const;
  void _internal_set_paragraph_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 paragraph_value = 10;
  bool has_paragraph_value() const;
  private:
  bool _internal_has_paragraph_value() const;
  public:
  void clear_paragraph_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_value() const;
  void set_paragraph_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paragraph_value() const;
  void _internal_set_paragraph_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 placement_index = 11;
  bool has_placement_index() const;
  private:
  bool _internal_has_placement_index() const;
  public:
  void clear_placement_index();
  ::PROTOBUF_NAMESPACE_ID::int32 placement_index() const;
  void set_placement_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_placement_index() const;
  void _internal_set_placement_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.StorageAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placement_uuid_path_;
  ::TSP::Range* range_;
  ::TSP::Reference* object_;
  ::TSP::Date* date_;
  ::TSP::Reference* undo_object_;
  int kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 table_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 placement_index_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction_StorageActionGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction.StorageActionGroup) */ {
 public:
  inline UndoTransaction_StorageActionGroup() : UndoTransaction_StorageActionGroup(nullptr) {}
  ~UndoTransaction_StorageActionGroup() override;
  explicit constexpr UndoTransaction_StorageActionGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction_StorageActionGroup(const UndoTransaction_StorageActionGroup& from);
  UndoTransaction_StorageActionGroup(UndoTransaction_StorageActionGroup&& from) noexcept
    : UndoTransaction_StorageActionGroup() {
    *this = ::std::move(from);
  }

  inline UndoTransaction_StorageActionGroup& operator=(const UndoTransaction_StorageActionGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction_StorageActionGroup& operator=(UndoTransaction_StorageActionGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction_StorageActionGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction_StorageActionGroup* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction_StorageActionGroup*>(
               &_UndoTransaction_StorageActionGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(UndoTransaction_StorageActionGroup& a, UndoTransaction_StorageActionGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction_StorageActionGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction_StorageActionGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction_StorageActionGroup* New() const final {
    return CreateMaybeMessage<UndoTransaction_StorageActionGroup>(nullptr);
  }

  UndoTransaction_StorageActionGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction_StorageActionGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction_StorageActionGroup& from);
  void MergeFrom(const UndoTransaction_StorageActionGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction_StorageActionGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction.StorageActionGroup";
  }
  protected:
  explicit UndoTransaction_StorageActionGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardActionsFieldNumber = 3,
    kInverseForwardActionsFieldNumber = 4,
    kInverseDetailActionsFieldNumber = 6,
    kKindFieldNumber = 1,
  };
  // repeated .TSWP.UndoTransaction.StorageAction forward_actions = 3;
  int forward_actions_size() const;
  private:
  int _internal_forward_actions_size() const;
  public:
  void clear_forward_actions();
  ::TSWP::UndoTransaction_StorageAction* mutable_forward_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >*
      mutable_forward_actions();
  private:
  const ::TSWP::UndoTransaction_StorageAction& _internal_forward_actions(int index) const;
  ::TSWP::UndoTransaction_StorageAction* _internal_add_forward_actions();
  public:
  const ::TSWP::UndoTransaction_StorageAction& forward_actions(int index) const;
  ::TSWP::UndoTransaction_StorageAction* add_forward_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >&
      forward_actions() const;

  // repeated .TSWP.UndoTransaction.StorageAction inverse_forward_actions = 4;
  int inverse_forward_actions_size() const;
  private:
  int _internal_inverse_forward_actions_size() const;
  public:
  void clear_inverse_forward_actions();
  ::TSWP::UndoTransaction_StorageAction* mutable_inverse_forward_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >*
      mutable_inverse_forward_actions();
  private:
  const ::TSWP::UndoTransaction_StorageAction& _internal_inverse_forward_actions(int index) const;
  ::TSWP::UndoTransaction_StorageAction* _internal_add_inverse_forward_actions();
  public:
  const ::TSWP::UndoTransaction_StorageAction& inverse_forward_actions(int index) const;
  ::TSWP::UndoTransaction_StorageAction* add_inverse_forward_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >&
      inverse_forward_actions() const;

  // repeated .TSWP.UndoTransaction.StorageAction inverse_detail_actions = 6;
  int inverse_detail_actions_size() const;
  private:
  int _internal_inverse_detail_actions_size() const;
  public:
  void clear_inverse_detail_actions();
  ::TSWP::UndoTransaction_StorageAction* mutable_inverse_detail_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >*
      mutable_inverse_detail_actions();
  private:
  const ::TSWP::UndoTransaction_StorageAction& _internal_inverse_detail_actions(int index) const;
  ::TSWP::UndoTransaction_StorageAction* _internal_add_inverse_detail_actions();
  public:
  const ::TSWP::UndoTransaction_StorageAction& inverse_detail_actions(int index) const;
  ::TSWP::UndoTransaction_StorageAction* add_inverse_detail_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >&
      inverse_detail_actions() const;

  // required .TSWP.UndoTransaction.ActionGroupKind kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::TSWP::UndoTransaction_ActionGroupKind kind() const;
  void set_kind(::TSWP::UndoTransaction_ActionGroupKind value);
  private:
  ::TSWP::UndoTransaction_ActionGroupKind _internal_kind() const;
  void _internal_set_kind(::TSWP::UndoTransaction_ActionGroupKind value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction.StorageActionGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction > forward_actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction > inverse_forward_actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction > inverse_detail_actions_;
  int kind_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransaction) */ {
 public:
  inline UndoTransaction() : UndoTransaction(nullptr) {}
  ~UndoTransaction() override;
  explicit constexpr UndoTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransaction(const UndoTransaction& from);
  UndoTransaction(UndoTransaction&& from) noexcept
    : UndoTransaction() {
    *this = ::std::move(from);
  }

  inline UndoTransaction& operator=(const UndoTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransaction& operator=(UndoTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransaction* internal_default_instance() {
    return reinterpret_cast<const UndoTransaction*>(
               &_UndoTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(UndoTransaction& a, UndoTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransaction* New() const final {
    return CreateMaybeMessage<UndoTransaction>(nullptr);
  }

  UndoTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransaction& from);
  void MergeFrom(const UndoTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransaction";
  }
  protected:
  explicit UndoTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UndoTransaction_GenericTransaction GenericTransaction;
  typedef UndoTransaction_TextTransaction TextTransaction;
  typedef UndoTransaction_CharIndexTransaction CharIndexTransaction;
  typedef UndoTransaction_ReplaceCharIndexTransaction ReplaceCharIndexTransaction;
  typedef UndoTransaction_AttributeIndexTransaction AttributeIndexTransaction;
  typedef UndoTransaction_InsertAttributeTransaction InsertAttributeTransaction;
  typedef UndoTransaction_InsertNilTransaction InsertNilTransaction;
  typedef UndoTransaction_CharDeltaTransaction CharDeltaTransaction;
  typedef UndoTransaction_ParagraphDataTransaction ParagraphDataTransaction;
  typedef UndoTransaction_ObjectDOLCTransaction ObjectDOLCTransaction;
  typedef UndoTransaction_CTDateTransaction CTDateTransaction;
  typedef UndoTransaction_UnionTransaction UnionTransaction;
  typedef UndoTransaction_StorageAction StorageAction;
  typedef UndoTransaction_StorageActionGroup StorageActionGroup;

  typedef UndoTransaction_UndoKind UndoKind;
  static constexpr UndoKind REPLACE_TEXT =
    UndoTransaction_UndoKind_REPLACE_TEXT;
  static constexpr UndoKind INSERT_ATTRIBUTE =
    UndoTransaction_UndoKind_INSERT_ATTRIBUTE;
  static constexpr UndoKind DELETE_ATTRIBUTE =
    UndoTransaction_UndoKind_DELETE_ATTRIBUTE;
  static constexpr UndoKind ADJUST_CHAR_INDEXES =
    UndoTransaction_UndoKind_ADJUST_CHAR_INDEXES;
  static constexpr UndoKind COMPR_ADJUST_CHAR_INDEXES =
    UndoTransaction_UndoKind_COMPR_ADJUST_CHAR_INDEXES;
  static constexpr UndoKind REPLACE_CHAR_INDEX =
    UndoTransaction_UndoKind_REPLACE_CHAR_INDEX;
  static constexpr UndoKind REPLACE_OBJECT =
    UndoTransaction_UndoKind_REPLACE_OBJECT;
  static constexpr UndoKind REPLACE_PARAGRAPH_DATA =
    UndoTransaction_UndoKind_REPLACE_PARAGRAPH_DATA;
  static constexpr UndoKind OBJECT_DOLC =
    UndoTransaction_UndoKind_OBJECT_DOLC;
  static constexpr UndoKind CT_DATE =
    UndoTransaction_UndoKind_CT_DATE;
  static inline bool UndoKind_IsValid(int value) {
    return UndoTransaction_UndoKind_IsValid(value);
  }
  static constexpr UndoKind UndoKind_MIN =
    UndoTransaction_UndoKind_UndoKind_MIN;
  static constexpr UndoKind UndoKind_MAX =
    UndoTransaction_UndoKind_UndoKind_MAX;
  static constexpr int UndoKind_ARRAYSIZE =
    UndoTransaction_UndoKind_UndoKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UndoKind_descriptor() {
    return UndoTransaction_UndoKind_descriptor();
  }
  template<typename T>
  static inline const std::string& UndoKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UndoKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UndoKind_Name.");
    return UndoTransaction_UndoKind_Name(enum_t_value);
  }
  static inline bool UndoKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UndoKind* value) {
    return UndoTransaction_UndoKind_Parse(name, value);
  }

  typedef UndoTransaction_ActionKind ActionKind;
  static constexpr ActionKind ACTION_UNDEFINED =
    UndoTransaction_ActionKind_ACTION_UNDEFINED;
  static constexpr ActionKind ACTION_TEXT =
    UndoTransaction_ActionKind_ACTION_TEXT;
  static constexpr ActionKind ACTION_ATTRIBUTE =
    UndoTransaction_ActionKind_ACTION_ATTRIBUTE;
  static inline bool ActionKind_IsValid(int value) {
    return UndoTransaction_ActionKind_IsValid(value);
  }
  static constexpr ActionKind ActionKind_MIN =
    UndoTransaction_ActionKind_ActionKind_MIN;
  static constexpr ActionKind ActionKind_MAX =
    UndoTransaction_ActionKind_ActionKind_MAX;
  static constexpr int ActionKind_ARRAYSIZE =
    UndoTransaction_ActionKind_ActionKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActionKind_descriptor() {
    return UndoTransaction_ActionKind_descriptor();
  }
  template<typename T>
  static inline const std::string& ActionKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionKind_Name.");
    return UndoTransaction_ActionKind_Name(enum_t_value);
  }
  static inline bool ActionKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActionKind* value) {
    return UndoTransaction_ActionKind_Parse(name, value);
  }

  typedef UndoTransaction_ActionGroupKind ActionGroupKind;
  static constexpr ActionGroupKind ACTION_GROUP_UNDEFINED =
    UndoTransaction_ActionGroupKind_ACTION_GROUP_UNDEFINED;
  static constexpr ActionGroupKind ACTION_GROUP_TEXT =
    UndoTransaction_ActionGroupKind_ACTION_GROUP_TEXT;
  static constexpr ActionGroupKind ACTION_GROUP_ATTRIBUTE =
    UndoTransaction_ActionGroupKind_ACTION_GROUP_ATTRIBUTE;
  static inline bool ActionGroupKind_IsValid(int value) {
    return UndoTransaction_ActionGroupKind_IsValid(value);
  }
  static constexpr ActionGroupKind ActionGroupKind_MIN =
    UndoTransaction_ActionGroupKind_ActionGroupKind_MIN;
  static constexpr ActionGroupKind ActionGroupKind_MAX =
    UndoTransaction_ActionGroupKind_ActionGroupKind_MAX;
  static constexpr int ActionGroupKind_ARRAYSIZE =
    UndoTransaction_ActionGroupKind_ActionGroupKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActionGroupKind_descriptor() {
    return UndoTransaction_ActionGroupKind_descriptor();
  }
  template<typename T>
  static inline const std::string& ActionGroupKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionGroupKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionGroupKind_Name.");
    return UndoTransaction_ActionGroupKind_Name(enum_t_value);
  }
  static inline bool ActionGroupKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActionGroupKind* value) {
    return UndoTransaction_ActionGroupKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kGroupEntriesFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSWP::UndoTransaction_UnionTransaction* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_UnionTransaction >*
      mutable_entries();
  private:
  const ::TSWP::UndoTransaction_UnionTransaction& _internal_entries(int index) const;
  ::TSWP::UndoTransaction_UnionTransaction* _internal_add_entries();
  public:
  const ::TSWP::UndoTransaction_UnionTransaction& entries(int index) const;
  ::TSWP::UndoTransaction_UnionTransaction* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_UnionTransaction >&
      entries() const;

  // repeated .TSWP.UndoTransaction.StorageActionGroup group_entries = 2;
  int group_entries_size() const;
  private:
  int _internal_group_entries_size() const;
  public:
  void clear_group_entries();
  ::TSWP::UndoTransaction_StorageActionGroup* mutable_group_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageActionGroup >*
      mutable_group_entries();
  private:
  const ::TSWP::UndoTransaction_StorageActionGroup& _internal_group_entries(int index) const;
  ::TSWP::UndoTransaction_StorageActionGroup* _internal_add_group_entries();
  public:
  const ::TSWP::UndoTransaction_StorageActionGroup& group_entries(int index) const;
  ::TSWP::UndoTransaction_StorageActionGroup* add_group_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageActionGroup >&
      group_entries() const;

  // optional uint32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_UnionTransaction > entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageActionGroup > group_entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoTransactionWrapperArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UndoTransactionWrapperArchive) */ {
 public:
  inline UndoTransactionWrapperArchive() : UndoTransactionWrapperArchive(nullptr) {}
  ~UndoTransactionWrapperArchive() override;
  explicit constexpr UndoTransactionWrapperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoTransactionWrapperArchive(const UndoTransactionWrapperArchive& from);
  UndoTransactionWrapperArchive(UndoTransactionWrapperArchive&& from) noexcept
    : UndoTransactionWrapperArchive() {
    *this = ::std::move(from);
  }

  inline UndoTransactionWrapperArchive& operator=(const UndoTransactionWrapperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoTransactionWrapperArchive& operator=(UndoTransactionWrapperArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoTransactionWrapperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoTransactionWrapperArchive* internal_default_instance() {
    return reinterpret_cast<const UndoTransactionWrapperArchive*>(
               &_UndoTransactionWrapperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(UndoTransactionWrapperArchive& a, UndoTransactionWrapperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoTransactionWrapperArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoTransactionWrapperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoTransactionWrapperArchive* New() const final {
    return CreateMaybeMessage<UndoTransactionWrapperArchive>(nullptr);
  }

  UndoTransactionWrapperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoTransactionWrapperArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoTransactionWrapperArchive& from);
  void MergeFrom(const UndoTransactionWrapperArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoTransactionWrapperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UndoTransactionWrapperArchive";
  }
  protected:
  explicit UndoTransactionWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoTransactionFieldNumber = 1,
  };
  // required .TSWP.UndoTransaction undo_transaction = 1;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // @@protoc_insertion_point(class_scope:TSWP.UndoTransactionWrapperArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::UndoTransaction* undo_transaction_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ShapeInfoArchive) */ {
 public:
  inline ShapeInfoArchive() : ShapeInfoArchive(nullptr) {}
  ~ShapeInfoArchive() override;
  explicit constexpr ShapeInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeInfoArchive(const ShapeInfoArchive& from);
  ShapeInfoArchive(ShapeInfoArchive&& from) noexcept
    : ShapeInfoArchive() {
    *this = ::std::move(from);
  }

  inline ShapeInfoArchive& operator=(const ShapeInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeInfoArchive& operator=(ShapeInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeInfoArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeInfoArchive*>(
               &_ShapeInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ShapeInfoArchive& a, ShapeInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeInfoArchive* New() const final {
    return CreateMaybeMessage<ShapeInfoArchive>(nullptr);
  }

  ShapeInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeInfoArchive& from);
  void MergeFrom(const ShapeInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ShapeInfoArchive";
  }
  protected:
  explicit ShapeInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDeprecatedStorageFieldNumber = 2,
    kTextFlowFieldNumber = 3,
    kOwnedStorageFieldNumber = 4,
    kIsTextBoxFieldNumber = 6,
  };
  // required .TSD.ShapeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ShapeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShapeArchive* release_super();
  ::TSD::ShapeArchive* mutable_super();
  void set_allocated_super(::TSD::ShapeArchive* super);
  private:
  const ::TSD::ShapeArchive& _internal_super() const;
  ::TSD::ShapeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ShapeArchive* super);
  ::TSD::ShapeArchive* unsafe_arena_release_super();

  // optional .TSP.Reference deprecated_storage = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_storage() const;
  private:
  bool _internal_has_deprecated_storage() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_storage();
  PROTOBUF_DEPRECATED const ::TSP::Reference& deprecated_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_deprecated_storage();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_deprecated_storage();
  PROTOBUF_DEPRECATED void set_allocated_deprecated_storage(::TSP::Reference* deprecated_storage);
  private:
  const ::TSP::Reference& _internal_deprecated_storage() const;
  ::TSP::Reference* _internal_mutable_deprecated_storage();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_deprecated_storage(
      ::TSP::Reference* deprecated_storage);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_deprecated_storage();

  // optional .TSP.Reference text_flow = 3;
  bool has_text_flow() const;
  private:
  bool _internal_has_text_flow() const;
  public:
  void clear_text_flow();
  const ::TSP::Reference& text_flow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_text_flow();
  ::TSP::Reference* mutable_text_flow();
  void set_allocated_text_flow(::TSP::Reference* text_flow);
  private:
  const ::TSP::Reference& _internal_text_flow() const;
  ::TSP::Reference* _internal_mutable_text_flow();
  public:
  void unsafe_arena_set_allocated_text_flow(
      ::TSP::Reference* text_flow);
  ::TSP::Reference* unsafe_arena_release_text_flow();

  // optional .TSP.Reference owned_storage = 4;
  bool has_owned_storage() const;
  private:
  bool _internal_has_owned_storage() const;
  public:
  void clear_owned_storage();
  const ::TSP::Reference& owned_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_owned_storage();
  ::TSP::Reference* mutable_owned_storage();
  void set_allocated_owned_storage(::TSP::Reference* owned_storage);
  private:
  const ::TSP::Reference& _internal_owned_storage() const;
  ::TSP::Reference* _internal_mutable_owned_storage();
  public:
  void unsafe_arena_set_allocated_owned_storage(
      ::TSP::Reference* owned_storage);
  ::TSP::Reference* unsafe_arena_release_owned_storage();

  // optional bool is_text_box = 6;
  bool has_is_text_box() const;
  private:
  bool _internal_has_is_text_box() const;
  public:
  void clear_is_text_box();
  bool is_text_box() const;
  void set_is_text_box(bool value);
  private:
  bool _internal_is_text_box() const;
  void _internal_set_is_text_box(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ShapeInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::ShapeArchive* super_;
  ::TSP::Reference* deprecated_storage_;
  ::TSP::Reference* text_flow_;
  ::TSP::Reference* owned_storage_;
  bool is_text_box_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class CommentInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.CommentInfoArchive) */ {
 public:
  inline CommentInfoArchive() : CommentInfoArchive(nullptr) {}
  ~CommentInfoArchive() override;
  explicit constexpr CommentInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommentInfoArchive(const CommentInfoArchive& from);
  CommentInfoArchive(CommentInfoArchive&& from) noexcept
    : CommentInfoArchive() {
    *this = ::std::move(from);
  }

  inline CommentInfoArchive& operator=(const CommentInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommentInfoArchive& operator=(CommentInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommentInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommentInfoArchive* internal_default_instance() {
    return reinterpret_cast<const CommentInfoArchive*>(
               &_CommentInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CommentInfoArchive& a, CommentInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommentInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommentInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommentInfoArchive* New() const final {
    return CreateMaybeMessage<CommentInfoArchive>(nullptr);
  }

  CommentInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommentInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommentInfoArchive& from);
  void MergeFrom(const CommentInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommentInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.CommentInfoArchive";
  }
  protected:
  explicit CommentInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCommentStorageFieldNumber = 2,
  };
  // required .TSWP.ShapeInfoArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ShapeInfoArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ShapeInfoArchive* release_super();
  ::TSWP::ShapeInfoArchive* mutable_super();
  void set_allocated_super(::TSWP::ShapeInfoArchive* super);
  private:
  const ::TSWP::ShapeInfoArchive& _internal_super() const;
  ::TSWP::ShapeInfoArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ShapeInfoArchive* super);
  ::TSWP::ShapeInfoArchive* unsafe_arena_release_super();

  // optional .TSP.Reference comment_storage = 2;
  bool has_comment_storage() const;
  private:
  bool _internal_has_comment_storage() const;
  public:
  void clear_comment_storage();
  const ::TSP::Reference& comment_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_comment_storage();
  ::TSP::Reference* mutable_comment_storage();
  void set_allocated_comment_storage(::TSP::Reference* comment_storage);
  private:
  const ::TSP::Reference& _internal_comment_storage() const;
  ::TSP::Reference* _internal_mutable_comment_storage();
  public:
  void unsafe_arena_set_allocated_comment_storage(
      ::TSP::Reference* comment_storage);
  ::TSP::Reference* unsafe_arena_release_comment_storage();

  // @@protoc_insertion_point(class_scope:TSWP.CommentInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ShapeInfoArchive* super_;
  ::TSP::Reference* comment_storage_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCInfoArchive) */ {
 public:
  inline TOCInfoArchive() : TOCInfoArchive(nullptr) {}
  ~TOCInfoArchive() override;
  explicit constexpr TOCInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCInfoArchive(const TOCInfoArchive& from);
  TOCInfoArchive(TOCInfoArchive&& from) noexcept
    : TOCInfoArchive() {
    *this = ::std::move(from);
  }

  inline TOCInfoArchive& operator=(const TOCInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCInfoArchive& operator=(TOCInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCInfoArchive* internal_default_instance() {
    return reinterpret_cast<const TOCInfoArchive*>(
               &_TOCInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TOCInfoArchive& a, TOCInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCInfoArchive* New() const final {
    return CreateMaybeMessage<TOCInfoArchive>(nullptr);
  }

  TOCInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCInfoArchive& from);
  void MergeFrom(const TOCInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCInfoArchive";
  }
  protected:
  explicit TOCInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTocEntryDataFieldNumber = 3,
    kPageNumberRangesFieldNumber = 4,
    kSuperFieldNumber = 1,
    kTocSettingsFieldNumber = 2,
    kSyncTocSettingsWithTocNavigatorFieldNumber = 5,
  };
  // repeated .TSP.Reference toc_entry_data = 3;
  int toc_entry_data_size() const;
  private:
  int _internal_toc_entry_data_size() const;
  public:
  void clear_toc_entry_data();
  ::TSP::Reference* mutable_toc_entry_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_toc_entry_data();
  private:
  const ::TSP::Reference& _internal_toc_entry_data(int index) const;
  ::TSP::Reference* _internal_add_toc_entry_data();
  public:
  const ::TSP::Reference& toc_entry_data(int index) const;
  ::TSP::Reference* add_toc_entry_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      toc_entry_data() const;

  // repeated .TSP.Range page_number_ranges = 4;
  int page_number_ranges_size() const;
  private:
  int _internal_page_number_ranges_size() const;
  public:
  void clear_page_number_ranges();
  ::TSP::Range* mutable_page_number_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
      mutable_page_number_ranges();
  private:
  const ::TSP::Range& _internal_page_number_ranges(int index) const;
  ::TSP::Range* _internal_add_page_number_ranges();
  public:
  const ::TSP::Range& page_number_ranges(int index) const;
  ::TSP::Range* add_page_number_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
      page_number_ranges() const;

  // required .TSWP.ShapeInfoArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ShapeInfoArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ShapeInfoArchive* release_super();
  ::TSWP::ShapeInfoArchive* mutable_super();
  void set_allocated_super(::TSWP::ShapeInfoArchive* super);
  private:
  const ::TSWP::ShapeInfoArchive& _internal_super() const;
  ::TSWP::ShapeInfoArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ShapeInfoArchive* super);
  ::TSWP::ShapeInfoArchive* unsafe_arena_release_super();

  // optional .TSP.Reference toc_settings = 2;
  bool has_toc_settings() const;
  private:
  bool _internal_has_toc_settings() const;
  public:
  void clear_toc_settings();
  const ::TSP::Reference& toc_settings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_toc_settings();
  ::TSP::Reference* mutable_toc_settings();
  void set_allocated_toc_settings(::TSP::Reference* toc_settings);
  private:
  const ::TSP::Reference& _internal_toc_settings() const;
  ::TSP::Reference* _internal_mutable_toc_settings();
  public:
  void unsafe_arena_set_allocated_toc_settings(
      ::TSP::Reference* toc_settings);
  ::TSP::Reference* unsafe_arena_release_toc_settings();

  // optional bool sync_toc_settings_with_toc_navigator = 5;
  bool has_sync_toc_settings_with_toc_navigator() const;
  private:
  bool _internal_has_sync_toc_settings_with_toc_navigator() const;
  public:
  void clear_sync_toc_settings_with_toc_navigator();
  bool sync_toc_settings_with_toc_navigator() const;
  void set_sync_toc_settings_with_toc_navigator(bool value);
  private:
  bool _internal_sync_toc_settings_with_toc_navigator() const;
  void _internal_set_sync_toc_settings_with_toc_navigator(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.TOCInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > toc_entry_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range > page_number_ranges_;
  ::TSWP::ShapeInfoArchive* super_;
  ::TSP::Reference* toc_settings_;
  bool sync_toc_settings_with_toc_navigator_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCLayoutHintArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCLayoutHintArchive) */ {
 public:
  inline TOCLayoutHintArchive() : TOCLayoutHintArchive(nullptr) {}
  ~TOCLayoutHintArchive() override;
  explicit constexpr TOCLayoutHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCLayoutHintArchive(const TOCLayoutHintArchive& from);
  TOCLayoutHintArchive(TOCLayoutHintArchive&& from) noexcept
    : TOCLayoutHintArchive() {
    *this = ::std::move(from);
  }

  inline TOCLayoutHintArchive& operator=(const TOCLayoutHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCLayoutHintArchive& operator=(TOCLayoutHintArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCLayoutHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCLayoutHintArchive* internal_default_instance() {
    return reinterpret_cast<const TOCLayoutHintArchive*>(
               &_TOCLayoutHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TOCLayoutHintArchive& a, TOCLayoutHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCLayoutHintArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCLayoutHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCLayoutHintArchive* New() const final {
    return CreateMaybeMessage<TOCLayoutHintArchive>(nullptr);
  }

  TOCLayoutHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCLayoutHintArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCLayoutHintArchive& from);
  void MergeFrom(const TOCLayoutHintArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCLayoutHintArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCLayoutHintArchive";
  }
  protected:
  explicit TOCLayoutHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharRangeFieldNumber = 1,
  };
  // required .TSP.Range charRange = 1;
  bool has_charrange() const;
  private:
  bool _internal_has_charrange() const;
  public:
  void clear_charrange();
  const ::TSP::Range& charrange() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_charrange();
  ::TSP::Range* mutable_charrange();
  void set_allocated_charrange(::TSP::Range* charrange);
  private:
  const ::TSP::Range& _internal_charrange() const;
  ::TSP::Range* _internal_mutable_charrange();
  public:
  void unsafe_arena_set_allocated_charrange(
      ::TSP::Range* charrange);
  ::TSP::Range* unsafe_arena_release_charrange();

  // @@protoc_insertion_point(class_scope:TSWP.TOCLayoutHintArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Range* charrange_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class EquationInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.EquationInfoArchive) */ {
 public:
  inline EquationInfoArchive() : EquationInfoArchive(nullptr) {}
  ~EquationInfoArchive() override;
  explicit constexpr EquationInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquationInfoArchive(const EquationInfoArchive& from);
  EquationInfoArchive(EquationInfoArchive&& from) noexcept
    : EquationInfoArchive() {
    *this = ::std::move(from);
  }

  inline EquationInfoArchive& operator=(const EquationInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquationInfoArchive& operator=(EquationInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquationInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquationInfoArchive* internal_default_instance() {
    return reinterpret_cast<const EquationInfoArchive*>(
               &_EquationInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(EquationInfoArchive& a, EquationInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(EquationInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquationInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EquationInfoArchive* New() const final {
    return CreateMaybeMessage<EquationInfoArchive>(nullptr);
  }

  EquationInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EquationInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EquationInfoArchive& from);
  void MergeFrom(const EquationInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquationInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.EquationInfoArchive";
  }
  protected:
  explicit EquationInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kEquationSourceOldFieldNumber = 100;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    equation_source_old;
  static const int kEquationTextPropertiesFieldNumber = 101;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSWP::CharacterStylePropertiesArchive >, 11, false >
    equation_text_properties;
  static const int kEquationDepthFieldNumber = 102;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
    equation_depth;
  static const int kEquationSourceTextFieldNumber = 103;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    equation_source_text;
  // @@protoc_insertion_point(class_scope:TSWP.EquationInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TextualAttachmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TextualAttachmentArchive) */ {
 public:
  inline TextualAttachmentArchive() : TextualAttachmentArchive(nullptr) {}
  ~TextualAttachmentArchive() override;
  explicit constexpr TextualAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextualAttachmentArchive(const TextualAttachmentArchive& from);
  TextualAttachmentArchive(TextualAttachmentArchive&& from) noexcept
    : TextualAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline TextualAttachmentArchive& operator=(const TextualAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextualAttachmentArchive& operator=(TextualAttachmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextualAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextualAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const TextualAttachmentArchive*>(
               &_TextualAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(TextualAttachmentArchive& a, TextualAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TextualAttachmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextualAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextualAttachmentArchive* New() const final {
    return CreateMaybeMessage<TextualAttachmentArchive>(nullptr);
  }

  TextualAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextualAttachmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextualAttachmentArchive& from);
  void MergeFrom(const TextualAttachmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextualAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TextualAttachmentArchive";
  }
  protected:
  explicit TextualAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TextualAttachmentArchive_Kind Kind;
  static constexpr Kind kKindPageNumber =
    TextualAttachmentArchive_Kind_kKindPageNumber;
  static constexpr Kind kKindPageCount =
    TextualAttachmentArchive_Kind_kKindPageCount;
  static constexpr Kind kKindFootnoteMark =
    TextualAttachmentArchive_Kind_kKindFootnoteMark;
  static inline bool Kind_IsValid(int value) {
    return TextualAttachmentArchive_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    TextualAttachmentArchive_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    TextualAttachmentArchive_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    TextualAttachmentArchive_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return TextualAttachmentArchive_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return TextualAttachmentArchive_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return TextualAttachmentArchive_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringEquivalentFieldNumber = 1,
    kKindFieldNumber = 2,
  };
  // optional string string_equivalent = 1;
  bool has_string_equivalent() const;
  private:
  bool _internal_has_string_equivalent() const;
  public:
  void clear_string_equivalent();
  const std::string& string_equivalent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_equivalent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_equivalent();
  std::string* release_string_equivalent();
  void set_allocated_string_equivalent(std::string* string_equivalent);
  private:
  const std::string& _internal_string_equivalent() const;
  void _internal_set_string_equivalent(const std::string& value);
  std::string* _internal_mutable_string_equivalent();
  public:

  // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::TSWP::TextualAttachmentArchive_Kind kind() const;
  void set_kind(::TSWP::TextualAttachmentArchive_Kind value);
  private:
  ::TSWP::TextualAttachmentArchive_Kind _internal_kind() const;
  void _internal_set_kind(::TSWP::TextualAttachmentArchive_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.TextualAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_equivalent_;
  int kind_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TSWPTOCPageNumberAttachmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TSWPTOCPageNumberAttachmentArchive) */ {
 public:
  inline TSWPTOCPageNumberAttachmentArchive() : TSWPTOCPageNumberAttachmentArchive(nullptr) {}
  ~TSWPTOCPageNumberAttachmentArchive() override;
  explicit constexpr TSWPTOCPageNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSWPTOCPageNumberAttachmentArchive(const TSWPTOCPageNumberAttachmentArchive& from);
  TSWPTOCPageNumberAttachmentArchive(TSWPTOCPageNumberAttachmentArchive&& from) noexcept
    : TSWPTOCPageNumberAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline TSWPTOCPageNumberAttachmentArchive& operator=(const TSWPTOCPageNumberAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSWPTOCPageNumberAttachmentArchive& operator=(TSWPTOCPageNumberAttachmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSWPTOCPageNumberAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSWPTOCPageNumberAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const TSWPTOCPageNumberAttachmentArchive*>(
               &_TSWPTOCPageNumberAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(TSWPTOCPageNumberAttachmentArchive& a, TSWPTOCPageNumberAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TSWPTOCPageNumberAttachmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSWPTOCPageNumberAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSWPTOCPageNumberAttachmentArchive* New() const final {
    return CreateMaybeMessage<TSWPTOCPageNumberAttachmentArchive>(nullptr);
  }

  TSWPTOCPageNumberAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSWPTOCPageNumberAttachmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSWPTOCPageNumberAttachmentArchive& from);
  void MergeFrom(const TSWPTOCPageNumberAttachmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSWPTOCPageNumberAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TSWPTOCPageNumberAttachmentArchive";
  }
  protected:
  explicit TSWPTOCPageNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageNumberFieldNumber = 2,
    kBookmarkNameFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // optional string page_number = 2;
  bool has_page_number() const;
  private:
  bool _internal_has_page_number() const;
  public:
  void clear_page_number();
  const std::string& page_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_number();
  std::string* release_page_number();
  void set_allocated_page_number(std::string* page_number);
  private:
  const std::string& _internal_page_number() const;
  void _internal_set_page_number(const std::string& value);
  std::string* _internal_mutable_page_number();
  public:

  // optional string bookmark_name = 3;
  bool has_bookmark_name() const;
  private:
  bool _internal_has_bookmark_name() const;
  public:
  void clear_bookmark_name();
  const std::string& bookmark_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bookmark_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bookmark_name();
  std::string* release_bookmark_name();
  void set_allocated_bookmark_name(std::string* bookmark_name);
  private:
  const std::string& _internal_bookmark_name() const;
  void _internal_set_bookmark_name(const std::string& value);
  std::string* _internal_mutable_bookmark_name();
  public:

  // optional .TSWP.TextualAttachmentArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::TextualAttachmentArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::TextualAttachmentArchive* release_super();
  ::TSWP::TextualAttachmentArchive* mutable_super();
  void set_allocated_super(::TSWP::TextualAttachmentArchive* super);
  private:
  const ::TSWP::TextualAttachmentArchive& _internal_super() const;
  ::TSWP::TextualAttachmentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::TextualAttachmentArchive* super);
  ::TSWP::TextualAttachmentArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.TSWPTOCPageNumberAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookmark_name_;
  ::TSWP::TextualAttachmentArchive* super_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UIGraphicalAttachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UIGraphicalAttachment) */ {
 public:
  inline UIGraphicalAttachment() : UIGraphicalAttachment(nullptr) {}
  ~UIGraphicalAttachment() override;
  explicit constexpr UIGraphicalAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UIGraphicalAttachment(const UIGraphicalAttachment& from);
  UIGraphicalAttachment(UIGraphicalAttachment&& from) noexcept
    : UIGraphicalAttachment() {
    *this = ::std::move(from);
  }

  inline UIGraphicalAttachment& operator=(const UIGraphicalAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIGraphicalAttachment& operator=(UIGraphicalAttachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UIGraphicalAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const UIGraphicalAttachment* internal_default_instance() {
    return reinterpret_cast<const UIGraphicalAttachment*>(
               &_UIGraphicalAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(UIGraphicalAttachment& a, UIGraphicalAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(UIGraphicalAttachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIGraphicalAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UIGraphicalAttachment* New() const final {
    return CreateMaybeMessage<UIGraphicalAttachment>(nullptr);
  }

  UIGraphicalAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UIGraphicalAttachment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UIGraphicalAttachment& from);
  void MergeFrom(const UIGraphicalAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIGraphicalAttachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UIGraphicalAttachment";
  }
  protected:
  explicit UIGraphicalAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TSWP.UIGraphicalAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableAttachmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.DrawableAttachmentArchive) */ {
 public:
  inline DrawableAttachmentArchive() : DrawableAttachmentArchive(nullptr) {}
  ~DrawableAttachmentArchive() override;
  explicit constexpr DrawableAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableAttachmentArchive(const DrawableAttachmentArchive& from);
  DrawableAttachmentArchive(DrawableAttachmentArchive&& from) noexcept
    : DrawableAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline DrawableAttachmentArchive& operator=(const DrawableAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableAttachmentArchive& operator=(DrawableAttachmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableAttachmentArchive*>(
               &_DrawableAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(DrawableAttachmentArchive& a, DrawableAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableAttachmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableAttachmentArchive* New() const final {
    return CreateMaybeMessage<DrawableAttachmentArchive>(nullptr);
  }

  DrawableAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableAttachmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableAttachmentArchive& from);
  void MergeFrom(const DrawableAttachmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.DrawableAttachmentArchive";
  }
  protected:
  explicit DrawableAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableFieldNumber = 1,
    kHOffsetTypeFieldNumber = 2,
    kHOffsetFieldNumber = 3,
    kVOffsetTypeFieldNumber = 4,
    kVOffsetFieldNumber = 5,
  };
  // optional .TSP.Reference drawable = 1;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::TSP::Reference& drawable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawable();
  ::TSP::Reference* mutable_drawable();
  void set_allocated_drawable(::TSP::Reference* drawable);
  private:
  const ::TSP::Reference& _internal_drawable() const;
  ::TSP::Reference* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::TSP::Reference* drawable);
  ::TSP::Reference* unsafe_arena_release_drawable();

  // optional uint32 h_offset_type = 2;
  bool has_h_offset_type() const;
  private:
  bool _internal_has_h_offset_type() const;
  public:
  void clear_h_offset_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 h_offset_type() const;
  void set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_h_offset_type() const;
  void _internal_set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float h_offset = 3;
  bool has_h_offset() const;
  private:
  bool _internal_has_h_offset() const;
  public:
  void clear_h_offset();
  float h_offset() const;
  void set_h_offset(float value);
  private:
  float _internal_h_offset() const;
  void _internal_set_h_offset(float value);
  public:

  // optional uint32 v_offset_type = 4;
  bool has_v_offset_type() const;
  private:
  bool _internal_has_v_offset_type() const;
  public:
  void clear_v_offset_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 v_offset_type() const;
  void set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v_offset_type() const;
  void _internal_set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float v_offset = 5;
  bool has_v_offset() const;
  private:
  bool _internal_has_v_offset() const;
  public:
  void clear_v_offset();
  float v_offset() const;
  void set_v_offset(float value);
  private:
  float _internal_v_offset() const;
  void _internal_set_v_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.DrawableAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* drawable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_offset_type_;
  float h_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 v_offset_type_;
  float v_offset_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCAttachmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCAttachmentArchive) */ {
 public:
  inline TOCAttachmentArchive() : TOCAttachmentArchive(nullptr) {}
  ~TOCAttachmentArchive() override;
  explicit constexpr TOCAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCAttachmentArchive(const TOCAttachmentArchive& from);
  TOCAttachmentArchive(TOCAttachmentArchive&& from) noexcept
    : TOCAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline TOCAttachmentArchive& operator=(const TOCAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCAttachmentArchive& operator=(TOCAttachmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const TOCAttachmentArchive*>(
               &_TOCAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(TOCAttachmentArchive& a, TOCAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCAttachmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCAttachmentArchive* New() const final {
    return CreateMaybeMessage<TOCAttachmentArchive>(nullptr);
  }

  TOCAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCAttachmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCAttachmentArchive& from);
  void MergeFrom(const TOCAttachmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCAttachmentArchive";
  }
  protected:
  explicit TOCAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSWP.DrawableAttachmentArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::DrawableAttachmentArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::DrawableAttachmentArchive* release_super();
  ::TSWP::DrawableAttachmentArchive* mutable_super();
  void set_allocated_super(::TSWP::DrawableAttachmentArchive* super);
  private:
  const ::TSWP::DrawableAttachmentArchive& _internal_super() const;
  ::TSWP::DrawableAttachmentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::DrawableAttachmentArchive* super);
  ::TSWP::DrawableAttachmentArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.TOCAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::DrawableAttachmentArchive* super_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class FootnoteReferenceAttachmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.FootnoteReferenceAttachmentArchive) */ {
 public:
  inline FootnoteReferenceAttachmentArchive() : FootnoteReferenceAttachmentArchive(nullptr) {}
  ~FootnoteReferenceAttachmentArchive() override;
  explicit constexpr FootnoteReferenceAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FootnoteReferenceAttachmentArchive(const FootnoteReferenceAttachmentArchive& from);
  FootnoteReferenceAttachmentArchive(FootnoteReferenceAttachmentArchive&& from) noexcept
    : FootnoteReferenceAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline FootnoteReferenceAttachmentArchive& operator=(const FootnoteReferenceAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FootnoteReferenceAttachmentArchive& operator=(FootnoteReferenceAttachmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FootnoteReferenceAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FootnoteReferenceAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const FootnoteReferenceAttachmentArchive*>(
               &_FootnoteReferenceAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(FootnoteReferenceAttachmentArchive& a, FootnoteReferenceAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FootnoteReferenceAttachmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FootnoteReferenceAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FootnoteReferenceAttachmentArchive* New() const final {
    return CreateMaybeMessage<FootnoteReferenceAttachmentArchive>(nullptr);
  }

  FootnoteReferenceAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FootnoteReferenceAttachmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FootnoteReferenceAttachmentArchive& from);
  void MergeFrom(const FootnoteReferenceAttachmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FootnoteReferenceAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.FootnoteReferenceAttachmentArchive";
  }
  protected:
  explicit FootnoteReferenceAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomMarkStringFieldNumber = 3,
    kSuperFieldNumber = 1,
    kContainedStorageFieldNumber = 2,
  };
  // optional string custom_mark_string = 3;
  bool has_custom_mark_string() const;
  private:
  bool _internal_has_custom_mark_string() const;
  public:
  void clear_custom_mark_string();
  const std::string& custom_mark_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_mark_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_mark_string();
  std::string* release_custom_mark_string();
  void set_allocated_custom_mark_string(std::string* custom_mark_string);
  private:
  const std::string& _internal_custom_mark_string() const;
  void _internal_set_custom_mark_string(const std::string& value);
  std::string* _internal_mutable_custom_mark_string();
  public:

  // optional .TSWP.TextualAttachmentArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::TextualAttachmentArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::TextualAttachmentArchive* release_super();
  ::TSWP::TextualAttachmentArchive* mutable_super();
  void set_allocated_super(::TSWP::TextualAttachmentArchive* super);
  private:
  const ::TSWP::TextualAttachmentArchive& _internal_super() const;
  ::TSWP::TextualAttachmentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::TextualAttachmentArchive* super);
  ::TSWP::TextualAttachmentArchive* unsafe_arena_release_super();

  // optional .TSP.Reference contained_storage = 2;
  bool has_contained_storage() const;
  private:
  bool _internal_has_contained_storage() const;
  public:
  void clear_contained_storage();
  const ::TSP::Reference& contained_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_contained_storage();
  ::TSP::Reference* mutable_contained_storage();
  void set_allocated_contained_storage(::TSP::Reference* contained_storage);
  private:
  const ::TSP::Reference& _internal_contained_storage() const;
  ::TSP::Reference* _internal_mutable_contained_storage();
  public:
  void unsafe_arena_set_allocated_contained_storage(
      ::TSP::Reference* contained_storage);
  ::TSP::Reference* unsafe_arena_release_contained_storage();

  // @@protoc_insertion_point(class_scope:TSWP.FootnoteReferenceAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_mark_string_;
  ::TSWP::TextualAttachmentArchive* super_;
  ::TSP::Reference* contained_storage_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class NumberAttachmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.NumberAttachmentArchive) */ {
 public:
  inline NumberAttachmentArchive() : NumberAttachmentArchive(nullptr) {}
  ~NumberAttachmentArchive() override;
  explicit constexpr NumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberAttachmentArchive(const NumberAttachmentArchive& from);
  NumberAttachmentArchive(NumberAttachmentArchive&& from) noexcept
    : NumberAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline NumberAttachmentArchive& operator=(const NumberAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberAttachmentArchive& operator=(NumberAttachmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const NumberAttachmentArchive*>(
               &_NumberAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(NumberAttachmentArchive& a, NumberAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberAttachmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NumberAttachmentArchive* New() const final {
    return CreateMaybeMessage<NumberAttachmentArchive>(nullptr);
  }

  NumberAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NumberAttachmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NumberAttachmentArchive& from);
  void MergeFrom(const NumberAttachmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.NumberAttachmentArchive";
  }
  protected:
  explicit NumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 3,
    kNumberFormatNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kNumberFormatFieldNumber = 2,
  };
  // optional string string_value = 3;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional string number_format_name = 4;
  bool has_number_format_name() const;
  private:
  bool _internal_has_number_format_name() const;
  public:
  void clear_number_format_name();
  const std::string& number_format_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number_format_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number_format_name();
  std::string* release_number_format_name();
  void set_allocated_number_format_name(std::string* number_format_name);
  private:
  const std::string& _internal_number_format_name() const;
  void _internal_set_number_format_name(const std::string& value);
  std::string* _internal_mutable_number_format_name();
  public:

  // optional .TSWP.TextualAttachmentArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::TextualAttachmentArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::TextualAttachmentArchive* release_super();
  ::TSWP::TextualAttachmentArchive* mutable_super();
  void set_allocated_super(::TSWP::TextualAttachmentArchive* super);
  private:
  const ::TSWP::TextualAttachmentArchive& _internal_super() const;
  ::TSWP::TextualAttachmentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::TextualAttachmentArchive* super);
  ::TSWP::TextualAttachmentArchive* unsafe_arena_release_super();

  // optional uint32 number_format = 2;
  bool has_number_format() const;
  private:
  bool _internal_has_number_format() const;
  public:
  void clear_number_format();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_format() const;
  void set_number_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_format() const;
  void _internal_set_number_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.NumberAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_format_name_;
  ::TSWP::TextualAttachmentArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_format_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class SmartFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.SmartFieldArchive) */ {
 public:
  inline SmartFieldArchive() : SmartFieldArchive(nullptr) {}
  ~SmartFieldArchive() override;
  explicit constexpr SmartFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmartFieldArchive(const SmartFieldArchive& from);
  SmartFieldArchive(SmartFieldArchive&& from) noexcept
    : SmartFieldArchive() {
    *this = ::std::move(from);
  }

  inline SmartFieldArchive& operator=(const SmartFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartFieldArchive& operator=(SmartFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmartFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmartFieldArchive* internal_default_instance() {
    return reinterpret_cast<const SmartFieldArchive*>(
               &_SmartFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SmartFieldArchive& a, SmartFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartFieldArchive* New() const final {
    return CreateMaybeMessage<SmartFieldArchive>(nullptr);
  }

  SmartFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartFieldArchive& from);
  void MergeFrom(const SmartFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.SmartFieldArchive";
  }
  protected:
  explicit SmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextAttributeUuidStringFieldNumber = 1,
  };
  // optional string text_attribute_uuid_string = 1;
  bool has_text_attribute_uuid_string() const;
  private:
  bool _internal_has_text_attribute_uuid_string() const;
  public:
  void clear_text_attribute_uuid_string();
  const std::string& text_attribute_uuid_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_attribute_uuid_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_attribute_uuid_string();
  std::string* release_text_attribute_uuid_string();
  void set_allocated_text_attribute_uuid_string(std::string* text_attribute_uuid_string);
  private:
  const std::string& _internal_text_attribute_uuid_string() const;
  void _internal_set_text_attribute_uuid_string(const std::string& value);
  std::string* _internal_mutable_text_attribute_uuid_string();
  public:

  // @@protoc_insertion_point(class_scope:TSWP.SmartFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_attribute_uuid_string_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class HyperlinkFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.HyperlinkFieldArchive) */ {
 public:
  inline HyperlinkFieldArchive() : HyperlinkFieldArchive(nullptr) {}
  ~HyperlinkFieldArchive() override;
  explicit constexpr HyperlinkFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HyperlinkFieldArchive(const HyperlinkFieldArchive& from);
  HyperlinkFieldArchive(HyperlinkFieldArchive&& from) noexcept
    : HyperlinkFieldArchive() {
    *this = ::std::move(from);
  }

  inline HyperlinkFieldArchive& operator=(const HyperlinkFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HyperlinkFieldArchive& operator=(HyperlinkFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HyperlinkFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HyperlinkFieldArchive* internal_default_instance() {
    return reinterpret_cast<const HyperlinkFieldArchive*>(
               &_HyperlinkFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(HyperlinkFieldArchive& a, HyperlinkFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HyperlinkFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HyperlinkFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HyperlinkFieldArchive* New() const final {
    return CreateMaybeMessage<HyperlinkFieldArchive>(nullptr);
  }

  HyperlinkFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HyperlinkFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HyperlinkFieldArchive& from);
  void MergeFrom(const HyperlinkFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HyperlinkFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.HyperlinkFieldArchive";
  }
  protected:
  explicit HyperlinkFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlRefFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // optional string url_ref = 2;
  bool has_url_ref() const;
  private:
  bool _internal_has_url_ref() const;
  public:
  void clear_url_ref();
  const std::string& url_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_ref();
  std::string* release_url_ref();
  void set_allocated_url_ref(std::string* url_ref);
  private:
  const std::string& _internal_url_ref() const;
  void _internal_set_url_ref(const std::string& value);
  std::string* _internal_mutable_url_ref();
  public:

  // optional .TSWP.SmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SmartFieldArchive* release_super();
  ::TSWP::SmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::SmartFieldArchive* super);
  private:
  const ::TSWP::SmartFieldArchive& _internal_super() const;
  ::TSWP::SmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SmartFieldArchive* super);
  ::TSWP::SmartFieldArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.HyperlinkFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_ref_;
  ::TSWP::SmartFieldArchive* super_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderSmartFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.PlaceholderSmartFieldArchive) */ {
 public:
  inline PlaceholderSmartFieldArchive() : PlaceholderSmartFieldArchive(nullptr) {}
  ~PlaceholderSmartFieldArchive() override;
  explicit constexpr PlaceholderSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceholderSmartFieldArchive(const PlaceholderSmartFieldArchive& from);
  PlaceholderSmartFieldArchive(PlaceholderSmartFieldArchive&& from) noexcept
    : PlaceholderSmartFieldArchive() {
    *this = ::std::move(from);
  }

  inline PlaceholderSmartFieldArchive& operator=(const PlaceholderSmartFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderSmartFieldArchive& operator=(PlaceholderSmartFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderSmartFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderSmartFieldArchive* internal_default_instance() {
    return reinterpret_cast<const PlaceholderSmartFieldArchive*>(
               &_PlaceholderSmartFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(PlaceholderSmartFieldArchive& a, PlaceholderSmartFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderSmartFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderSmartFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderSmartFieldArchive* New() const final {
    return CreateMaybeMessage<PlaceholderSmartFieldArchive>(nullptr);
  }

  PlaceholderSmartFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderSmartFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceholderSmartFieldArchive& from);
  void MergeFrom(const PlaceholderSmartFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderSmartFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.PlaceholderSmartFieldArchive";
  }
  protected:
  explicit PlaceholderSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptTagFieldNumber = 3,
    kSuperFieldNumber = 1,
    kLocalizableFieldNumber = 2,
  };
  // optional string script_tag = 3;
  bool has_script_tag() const;
  private:
  bool _internal_has_script_tag() const;
  public:
  void clear_script_tag();
  const std::string& script_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_tag();
  std::string* release_script_tag();
  void set_allocated_script_tag(std::string* script_tag);
  private:
  const std::string& _internal_script_tag() const;
  void _internal_set_script_tag(const std::string& value);
  std::string* _internal_mutable_script_tag();
  public:

  // optional .TSWP.SmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SmartFieldArchive* release_super();
  ::TSWP::SmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::SmartFieldArchive* super);
  private:
  const ::TSWP::SmartFieldArchive& _internal_super() const;
  ::TSWP::SmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SmartFieldArchive* super);
  ::TSWP::SmartFieldArchive* unsafe_arena_release_super();

  // optional bool localizable = 2;
  bool has_localizable() const;
  private:
  bool _internal_has_localizable() const;
  public:
  void clear_localizable();
  bool localizable() const;
  void set_localizable(bool value);
  private:
  bool _internal_localizable() const;
  void _internal_set_localizable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.PlaceholderSmartFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_tag_;
  ::TSWP::SmartFieldArchive* super_;
  bool localizable_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class UnsupportedHyperlinkFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UnsupportedHyperlinkFieldArchive) */ {
 public:
  inline UnsupportedHyperlinkFieldArchive() : UnsupportedHyperlinkFieldArchive(nullptr) {}
  ~UnsupportedHyperlinkFieldArchive() override;
  explicit constexpr UnsupportedHyperlinkFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnsupportedHyperlinkFieldArchive(const UnsupportedHyperlinkFieldArchive& from);
  UnsupportedHyperlinkFieldArchive(UnsupportedHyperlinkFieldArchive&& from) noexcept
    : UnsupportedHyperlinkFieldArchive() {
    *this = ::std::move(from);
  }

  inline UnsupportedHyperlinkFieldArchive& operator=(const UnsupportedHyperlinkFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsupportedHyperlinkFieldArchive& operator=(UnsupportedHyperlinkFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsupportedHyperlinkFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsupportedHyperlinkFieldArchive* internal_default_instance() {
    return reinterpret_cast<const UnsupportedHyperlinkFieldArchive*>(
               &_UnsupportedHyperlinkFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(UnsupportedHyperlinkFieldArchive& a, UnsupportedHyperlinkFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsupportedHyperlinkFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsupportedHyperlinkFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsupportedHyperlinkFieldArchive* New() const final {
    return CreateMaybeMessage<UnsupportedHyperlinkFieldArchive>(nullptr);
  }

  UnsupportedHyperlinkFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsupportedHyperlinkFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsupportedHyperlinkFieldArchive& from);
  void MergeFrom(const UnsupportedHyperlinkFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsupportedHyperlinkFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UnsupportedHyperlinkFieldArchive";
  }
  protected:
  explicit UnsupportedHyperlinkFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlRefFieldNumber = 2,
    kUrlOriginalRefFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // optional string url_ref = 2;
  bool has_url_ref() const;
  private:
  bool _internal_has_url_ref() const;
  public:
  void clear_url_ref();
  const std::string& url_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_ref();
  std::string* release_url_ref();
  void set_allocated_url_ref(std::string* url_ref);
  private:
  const std::string& _internal_url_ref() const;
  void _internal_set_url_ref(const std::string& value);
  std::string* _internal_mutable_url_ref();
  public:

  // optional string url_original_ref = 3;
  bool has_url_original_ref() const;
  private:
  bool _internal_has_url_original_ref() const;
  public:
  void clear_url_original_ref();
  const std::string& url_original_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_original_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_original_ref();
  std::string* release_url_original_ref();
  void set_allocated_url_original_ref(std::string* url_original_ref);
  private:
  const std::string& _internal_url_original_ref() const;
  void _internal_set_url_original_ref(const std::string& value);
  std::string* _internal_mutable_url_original_ref();
  public:

  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::PlaceholderSmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PlaceholderSmartFieldArchive* release_super();
  ::TSWP::PlaceholderSmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::PlaceholderSmartFieldArchive* super);
  private:
  const ::TSWP::PlaceholderSmartFieldArchive& _internal_super() const;
  ::TSWP::PlaceholderSmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::PlaceholderSmartFieldArchive* super);
  ::TSWP::PlaceholderSmartFieldArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.UnsupportedHyperlinkFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_original_ref_;
  ::TSWP::PlaceholderSmartFieldArchive* super_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class BibliographySmartFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.BibliographySmartFieldArchive) */ {
 public:
  inline BibliographySmartFieldArchive() : BibliographySmartFieldArchive(nullptr) {}
  ~BibliographySmartFieldArchive() override;
  explicit constexpr BibliographySmartFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BibliographySmartFieldArchive(const BibliographySmartFieldArchive& from);
  BibliographySmartFieldArchive(BibliographySmartFieldArchive&& from) noexcept
    : BibliographySmartFieldArchive() {
    *this = ::std::move(from);
  }

  inline BibliographySmartFieldArchive& operator=(const BibliographySmartFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BibliographySmartFieldArchive& operator=(BibliographySmartFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BibliographySmartFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BibliographySmartFieldArchive* internal_default_instance() {
    return reinterpret_cast<const BibliographySmartFieldArchive*>(
               &_BibliographySmartFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(BibliographySmartFieldArchive& a, BibliographySmartFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BibliographySmartFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BibliographySmartFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BibliographySmartFieldArchive* New() const final {
    return CreateMaybeMessage<BibliographySmartFieldArchive>(nullptr);
  }

  BibliographySmartFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BibliographySmartFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BibliographySmartFieldArchive& from);
  void MergeFrom(const BibliographySmartFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BibliographySmartFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.BibliographySmartFieldArchive";
  }
  protected:
  explicit BibliographySmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCitationRecordsFieldNumber = 2,
    kOldSuperFieldNumber = 1,
    kSuperFieldNumber = 3,
    kLocalizableFieldNumber = 4,
  };
  // repeated .TSP.Reference citation_records = 2;
  int citation_records_size() const;
  private:
  int _internal_citation_records_size() const;
  public:
  void clear_citation_records();
  ::TSP::Reference* mutable_citation_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_citation_records();
  private:
  const ::TSP::Reference& _internal_citation_records(int index) const;
  ::TSP::Reference* _internal_add_citation_records();
  public:
  const ::TSP::Reference& citation_records(int index) const;
  ::TSP::Reference* add_citation_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      citation_records() const;

  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  bool has_old_super() const;
  private:
  bool _internal_has_old_super() const;
  public:
  void clear_old_super();
  const ::TSWP::PlaceholderSmartFieldArchive& old_super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PlaceholderSmartFieldArchive* release_old_super();
  ::TSWP::PlaceholderSmartFieldArchive* mutable_old_super();
  void set_allocated_old_super(::TSWP::PlaceholderSmartFieldArchive* old_super);
  private:
  const ::TSWP::PlaceholderSmartFieldArchive& _internal_old_super() const;
  ::TSWP::PlaceholderSmartFieldArchive* _internal_mutable_old_super();
  public:
  void unsafe_arena_set_allocated_old_super(
      ::TSWP::PlaceholderSmartFieldArchive* old_super);
  ::TSWP::PlaceholderSmartFieldArchive* unsafe_arena_release_old_super();

  // optional .TSWP.SmartFieldArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SmartFieldArchive* release_super();
  ::TSWP::SmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::SmartFieldArchive* super);
  private:
  const ::TSWP::SmartFieldArchive& _internal_super() const;
  ::TSWP::SmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SmartFieldArchive* super);
  ::TSWP::SmartFieldArchive* unsafe_arena_release_super();

  // optional bool localizable = 4;
  bool has_localizable() const;
  private:
  bool _internal_has_localizable() const;
  public:
  void clear_localizable();
  bool localizable() const;
  void set_localizable(bool value);
  private:
  bool _internal_localizable() const;
  void _internal_set_localizable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.BibliographySmartFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > citation_records_;
  ::TSWP::PlaceholderSmartFieldArchive* old_super_;
  ::TSWP::SmartFieldArchive* super_;
  bool localizable_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class CitationRecordArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.CitationRecordArchive) */ {
 public:
  inline CitationRecordArchive() : CitationRecordArchive(nullptr) {}
  ~CitationRecordArchive() override;
  explicit constexpr CitationRecordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CitationRecordArchive(const CitationRecordArchive& from);
  CitationRecordArchive(CitationRecordArchive&& from) noexcept
    : CitationRecordArchive() {
    *this = ::std::move(from);
  }

  inline CitationRecordArchive& operator=(const CitationRecordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CitationRecordArchive& operator=(CitationRecordArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CitationRecordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CitationRecordArchive* internal_default_instance() {
    return reinterpret_cast<const CitationRecordArchive*>(
               &_CitationRecordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CitationRecordArchive& a, CitationRecordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CitationRecordArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CitationRecordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CitationRecordArchive* New() const final {
    return CreateMaybeMessage<CitationRecordArchive>(nullptr);
  }

  CitationRecordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CitationRecordArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CitationRecordArchive& from);
  void MergeFrom(const CitationRecordArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CitationRecordArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.CitationRecordArchive";
  }
  protected:
  explicit CitationRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndnoteXmlFieldNumber = 1,
    kPageRangeFieldNumber = 4,
    kPrefixFieldNumber = 5,
    kSuffixFieldNumber = 6,
    kAuthorsStringFieldNumber = 7,
    kTitleFieldNumber = 8,
    kYearFieldNumber = 9,
    kTypeFieldNumber = 10,
    kHideAuthorNamesFieldNumber = 2,
    kHideYearFieldNumber = 3,
  };
  // optional string endnote_xml = 1;
  bool has_endnote_xml() const;
  private:
  bool _internal_has_endnote_xml() const;
  public:
  void clear_endnote_xml();
  const std::string& endnote_xml() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endnote_xml(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endnote_xml();
  std::string* release_endnote_xml();
  void set_allocated_endnote_xml(std::string* endnote_xml);
  private:
  const std::string& _internal_endnote_xml() const;
  void _internal_set_endnote_xml(const std::string& value);
  std::string* _internal_mutable_endnote_xml();
  public:

  // optional string page_range = 4;
  bool has_page_range() const;
  private:
  bool _internal_has_page_range() const;
  public:
  void clear_page_range();
  const std::string& page_range() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_range(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_range();
  std::string* release_page_range();
  void set_allocated_page_range(std::string* page_range);
  private:
  const std::string& _internal_page_range() const;
  void _internal_set_page_range(const std::string& value);
  std::string* _internal_mutable_page_range();
  public:

  // optional string prefix = 5;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional string suffix = 6;
  bool has_suffix() const;
  private:
  bool _internal_has_suffix() const;
  public:
  void clear_suffix();
  const std::string& suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // optional string authors_string = 7;
  bool has_authors_string() const;
  private:
  bool _internal_has_authors_string() const;
  public:
  void clear_authors_string();
  const std::string& authors_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authors_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authors_string();
  std::string* release_authors_string();
  void set_allocated_authors_string(std::string* authors_string);
  private:
  const std::string& _internal_authors_string() const;
  void _internal_set_authors_string(const std::string& value);
  std::string* _internal_mutable_authors_string();
  public:

  // optional string title = 8;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string year = 9;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  const std::string& year() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_year(ArgT0&& arg0, ArgT... args);
  std::string* mutable_year();
  std::string* release_year();
  void set_allocated_year(std::string* year);
  private:
  const std::string& _internal_year() const;
  void _internal_set_year(const std::string& value);
  std::string* _internal_mutable_year();
  public:

  // optional string type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional bool hide_author_names = 2;
  bool has_hide_author_names() const;
  private:
  bool _internal_has_hide_author_names() const;
  public:
  void clear_hide_author_names();
  bool hide_author_names() const;
  void set_hide_author_names(bool value);
  private:
  bool _internal_hide_author_names() const;
  void _internal_set_hide_author_names(bool value);
  public:

  // optional bool hide_year = 3;
  bool has_hide_year() const;
  private:
  bool _internal_has_hide_year() const;
  public:
  void clear_hide_year();
  bool hide_year() const;
  void set_hide_year(bool value);
  private:
  bool _internal_hide_year() const;
  void _internal_set_hide_year(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.CitationRecordArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endnote_xml_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_range_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authors_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr year_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  bool hide_author_names_;
  bool hide_year_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class CitationSmartFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.CitationSmartFieldArchive) */ {
 public:
  inline CitationSmartFieldArchive() : CitationSmartFieldArchive(nullptr) {}
  ~CitationSmartFieldArchive() override;
  explicit constexpr CitationSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CitationSmartFieldArchive(const CitationSmartFieldArchive& from);
  CitationSmartFieldArchive(CitationSmartFieldArchive&& from) noexcept
    : CitationSmartFieldArchive() {
    *this = ::std::move(from);
  }

  inline CitationSmartFieldArchive& operator=(const CitationSmartFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CitationSmartFieldArchive& operator=(CitationSmartFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CitationSmartFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CitationSmartFieldArchive* internal_default_instance() {
    return reinterpret_cast<const CitationSmartFieldArchive*>(
               &_CitationSmartFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CitationSmartFieldArchive& a, CitationSmartFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CitationSmartFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CitationSmartFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CitationSmartFieldArchive* New() const final {
    return CreateMaybeMessage<CitationSmartFieldArchive>(nullptr);
  }

  CitationSmartFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CitationSmartFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CitationSmartFieldArchive& from);
  void MergeFrom(const CitationSmartFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CitationSmartFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.CitationSmartFieldArchive";
  }
  protected:
  explicit CitationSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCitationRecordsFieldNumber = 2,
    kOldSuperFieldNumber = 1,
    kSuperFieldNumber = 3,
    kLocalizableFieldNumber = 4,
  };
  // repeated .TSP.Reference citation_records = 2;
  int citation_records_size() const;
  private:
  int _internal_citation_records_size() const;
  public:
  void clear_citation_records();
  ::TSP::Reference* mutable_citation_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_citation_records();
  private:
  const ::TSP::Reference& _internal_citation_records(int index) const;
  ::TSP::Reference* _internal_add_citation_records();
  public:
  const ::TSP::Reference& citation_records(int index) const;
  ::TSP::Reference* add_citation_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      citation_records() const;

  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  bool has_old_super() const;
  private:
  bool _internal_has_old_super() const;
  public:
  void clear_old_super();
  const ::TSWP::PlaceholderSmartFieldArchive& old_super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PlaceholderSmartFieldArchive* release_old_super();
  ::TSWP::PlaceholderSmartFieldArchive* mutable_old_super();
  void set_allocated_old_super(::TSWP::PlaceholderSmartFieldArchive* old_super);
  private:
  const ::TSWP::PlaceholderSmartFieldArchive& _internal_old_super() const;
  ::TSWP::PlaceholderSmartFieldArchive* _internal_mutable_old_super();
  public:
  void unsafe_arena_set_allocated_old_super(
      ::TSWP::PlaceholderSmartFieldArchive* old_super);
  ::TSWP::PlaceholderSmartFieldArchive* unsafe_arena_release_old_super();

  // optional .TSWP.SmartFieldArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SmartFieldArchive* release_super();
  ::TSWP::SmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::SmartFieldArchive* super);
  private:
  const ::TSWP::SmartFieldArchive& _internal_super() const;
  ::TSWP::SmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SmartFieldArchive* super);
  ::TSWP::SmartFieldArchive* unsafe_arena_release_super();

  // optional bool localizable = 4;
  bool has_localizable() const;
  private:
  bool _internal_has_localizable() const;
  public:
  void clear_localizable();
  bool localizable() const;
  void set_localizable(bool value);
  private:
  bool _internal_localizable() const;
  void _internal_set_localizable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.CitationSmartFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > citation_records_;
  ::TSWP::PlaceholderSmartFieldArchive* old_super_;
  ::TSWP::SmartFieldArchive* super_;
  bool localizable_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class DateTimeSmartFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.DateTimeSmartFieldArchive) */ {
 public:
  inline DateTimeSmartFieldArchive() : DateTimeSmartFieldArchive(nullptr) {}
  ~DateTimeSmartFieldArchive() override;
  explicit constexpr DateTimeSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DateTimeSmartFieldArchive(const DateTimeSmartFieldArchive& from);
  DateTimeSmartFieldArchive(DateTimeSmartFieldArchive&& from) noexcept
    : DateTimeSmartFieldArchive() {
    *this = ::std::move(from);
  }

  inline DateTimeSmartFieldArchive& operator=(const DateTimeSmartFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTimeSmartFieldArchive& operator=(DateTimeSmartFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DateTimeSmartFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DateTimeSmartFieldArchive* internal_default_instance() {
    return reinterpret_cast<const DateTimeSmartFieldArchive*>(
               &_DateTimeSmartFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(DateTimeSmartFieldArchive& a, DateTimeSmartFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTimeSmartFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTimeSmartFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateTimeSmartFieldArchive* New() const final {
    return CreateMaybeMessage<DateTimeSmartFieldArchive>(nullptr);
  }

  DateTimeSmartFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeSmartFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateTimeSmartFieldArchive& from);
  void MergeFrom(const DateTimeSmartFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeSmartFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.DateTimeSmartFieldArchive";
  }
  protected:
  explicit DateTimeSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeUpdatePlan;
  static constexpr DateTimeUpdatePlan kDateTimeUpdatePlanNever =
    DateTimeSmartFieldArchive_DateTimeUpdatePlan_kDateTimeUpdatePlanNever;
  static constexpr DateTimeUpdatePlan kDateTimeUpdatePlanAuto =
    DateTimeSmartFieldArchive_DateTimeUpdatePlan_kDateTimeUpdatePlanAuto;
  static constexpr DateTimeUpdatePlan kDateTimeUpdatePlanOnce =
    DateTimeSmartFieldArchive_DateTimeUpdatePlan_kDateTimeUpdatePlanOnce;
  static inline bool DateTimeUpdatePlan_IsValid(int value) {
    return DateTimeSmartFieldArchive_DateTimeUpdatePlan_IsValid(value);
  }
  static constexpr DateTimeUpdatePlan DateTimeUpdatePlan_MIN =
    DateTimeSmartFieldArchive_DateTimeUpdatePlan_DateTimeUpdatePlan_MIN;
  static constexpr DateTimeUpdatePlan DateTimeUpdatePlan_MAX =
    DateTimeSmartFieldArchive_DateTimeUpdatePlan_DateTimeUpdatePlan_MAX;
  static constexpr int DateTimeUpdatePlan_ARRAYSIZE =
    DateTimeSmartFieldArchive_DateTimeUpdatePlan_DateTimeUpdatePlan_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DateTimeUpdatePlan_descriptor() {
    return DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor();
  }
  template<typename T>
  static inline const std::string& DateTimeUpdatePlan_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DateTimeUpdatePlan>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DateTimeUpdatePlan_Name.");
    return DateTimeSmartFieldArchive_DateTimeUpdatePlan_Name(enum_t_value);
  }
  static inline bool DateTimeUpdatePlan_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DateTimeUpdatePlan* value) {
    return DateTimeSmartFieldArchive_DateTimeUpdatePlan_Parse(name, value);
  }

  typedef DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeFormatterStyle;
  static constexpr DateTimeFormatterStyle kDateTimeFormatterStyleNone =
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleNone;
  static constexpr DateTimeFormatterStyle kDateTimeFormatterStyleShort =
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleShort;
  static constexpr DateTimeFormatterStyle kDateTimeFormatterStyleMedium =
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleMedium;
  static constexpr DateTimeFormatterStyle kDateTimeFormatterStyleLong =
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleLong;
  static constexpr DateTimeFormatterStyle kDateTimeFormatterStyleFull =
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_kDateTimeFormatterStyleFull;
  static inline bool DateTimeFormatterStyle_IsValid(int value) {
    return DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(value);
  }
  static constexpr DateTimeFormatterStyle DateTimeFormatterStyle_MIN =
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_DateTimeFormatterStyle_MIN;
  static constexpr DateTimeFormatterStyle DateTimeFormatterStyle_MAX =
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_DateTimeFormatterStyle_MAX;
  static constexpr int DateTimeFormatterStyle_ARRAYSIZE =
    DateTimeSmartFieldArchive_DateTimeFormatterStyle_DateTimeFormatterStyle_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DateTimeFormatterStyle_descriptor() {
    return DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor();
  }
  template<typename T>
  static inline const std::string& DateTimeFormatterStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DateTimeFormatterStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DateTimeFormatterStyle_Name.");
    return DateTimeSmartFieldArchive_DateTimeFormatterStyle_Name(enum_t_value);
  }
  static inline bool DateTimeFormatterStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DateTimeFormatterStyle* value) {
    return DateTimeSmartFieldArchive_DateTimeFormatterStyle_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 2,
    kLocaleIdentifierFieldNumber = 3,
    kSuperFieldNumber = 1,
    kDateFieldNumber = 8,
    kDateStyleFieldNumber = 4,
    kTimeStyleFieldNumber = 5,
    kUpdatePlanFieldNumber = 6,
    kNeedsUpdateFieldNumber = 7,
  };
  // optional string format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const std::string& format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // optional string locale_identifier = 3;
  bool has_locale_identifier() const;
  private:
  bool _internal_has_locale_identifier() const;
  public:
  void clear_locale_identifier();
  const std::string& locale_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale_identifier();
  std::string* release_locale_identifier();
  void set_allocated_locale_identifier(std::string* locale_identifier);
  private:
  const std::string& _internal_locale_identifier() const;
  void _internal_set_locale_identifier(const std::string& value);
  std::string* _internal_mutable_locale_identifier();
  public:

  // optional .TSWP.SmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SmartFieldArchive* release_super();
  ::TSWP::SmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::SmartFieldArchive* super);
  private:
  const ::TSWP::SmartFieldArchive& _internal_super() const;
  ::TSWP::SmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SmartFieldArchive* super);
  ::TSWP::SmartFieldArchive* unsafe_arena_release_super();

  // optional .TSP.Date date = 8;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::TSP::Date& date() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Date* release_date();
  ::TSP::Date* mutable_date();
  void set_allocated_date(::TSP::Date* date);
  private:
  const ::TSP::Date& _internal_date() const;
  ::TSP::Date* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::TSP::Date* date);
  ::TSP::Date* unsafe_arena_release_date();

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
  bool has_date_style() const;
  private:
  bool _internal_has_date_style() const;
  public:
  void clear_date_style();
  ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle date_style() const;
  void set_date_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value);
  private:
  ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle _internal_date_style() const;
  void _internal_set_date_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value);
  public:

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
  bool has_time_style() const;
  private:
  bool _internal_has_time_style() const;
  public:
  void clear_time_style();
  ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle time_style() const;
  void set_time_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value);
  private:
  ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle _internal_time_style() const;
  void _internal_set_time_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value);
  public:

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
  bool has_update_plan() const;
  private:
  bool _internal_has_update_plan() const;
  public:
  void clear_update_plan();
  ::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan update_plan() const;
  void set_update_plan(::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan value);
  private:
  ::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan _internal_update_plan() const;
  void _internal_set_update_plan(::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan value);
  public:

  // optional bool needs_update = 7;
  bool has_needs_update() const;
  private:
  bool _internal_has_needs_update() const;
  public:
  void clear_needs_update();
  bool needs_update() const;
  void set_needs_update(bool value);
  private:
  bool _internal_needs_update() const;
  void _internal_set_needs_update(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.DateTimeSmartFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_identifier_;
  ::TSWP::SmartFieldArchive* super_;
  ::TSP::Date* date_;
  int date_style_;
  int time_style_;
  int update_plan_;
  bool needs_update_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class BookmarkFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.BookmarkFieldArchive) */ {
 public:
  inline BookmarkFieldArchive() : BookmarkFieldArchive(nullptr) {}
  ~BookmarkFieldArchive() override;
  explicit constexpr BookmarkFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookmarkFieldArchive(const BookmarkFieldArchive& from);
  BookmarkFieldArchive(BookmarkFieldArchive&& from) noexcept
    : BookmarkFieldArchive() {
    *this = ::std::move(from);
  }

  inline BookmarkFieldArchive& operator=(const BookmarkFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookmarkFieldArchive& operator=(BookmarkFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookmarkFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookmarkFieldArchive* internal_default_instance() {
    return reinterpret_cast<const BookmarkFieldArchive*>(
               &_BookmarkFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(BookmarkFieldArchive& a, BookmarkFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BookmarkFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookmarkFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BookmarkFieldArchive* New() const final {
    return CreateMaybeMessage<BookmarkFieldArchive>(nullptr);
  }

  BookmarkFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BookmarkFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BookmarkFieldArchive& from);
  void MergeFrom(const BookmarkFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookmarkFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.BookmarkFieldArchive";
  }
  protected:
  explicit BookmarkFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSuperFieldNumber = 1,
    kRangedFieldNumber = 3,
    kHiddenFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .TSWP.SmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SmartFieldArchive* release_super();
  ::TSWP::SmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::SmartFieldArchive* super);
  private:
  const ::TSWP::SmartFieldArchive& _internal_super() const;
  ::TSWP::SmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SmartFieldArchive* super);
  ::TSWP::SmartFieldArchive* unsafe_arena_release_super();

  // optional uint32 ranged = 3;
  bool has_ranged() const;
  private:
  bool _internal_has_ranged() const;
  public:
  void clear_ranged();
  ::PROTOBUF_NAMESPACE_ID::uint32 ranged() const;
  void set_ranged(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ranged() const;
  void _internal_set_ranged(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hidden = 4;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  ::PROTOBUF_NAMESPACE_ID::uint32 hidden() const;
  void set_hidden(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hidden() const;
  void _internal_set_hidden(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.BookmarkFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSWP::SmartFieldArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ranged_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hidden_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class FilenameSmartFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.FilenameSmartFieldArchive) */ {
 public:
  inline FilenameSmartFieldArchive() : FilenameSmartFieldArchive(nullptr) {}
  ~FilenameSmartFieldArchive() override;
  explicit constexpr FilenameSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilenameSmartFieldArchive(const FilenameSmartFieldArchive& from);
  FilenameSmartFieldArchive(FilenameSmartFieldArchive&& from) noexcept
    : FilenameSmartFieldArchive() {
    *this = ::std::move(from);
  }

  inline FilenameSmartFieldArchive& operator=(const FilenameSmartFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilenameSmartFieldArchive& operator=(FilenameSmartFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilenameSmartFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilenameSmartFieldArchive* internal_default_instance() {
    return reinterpret_cast<const FilenameSmartFieldArchive*>(
               &_FilenameSmartFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(FilenameSmartFieldArchive& a, FilenameSmartFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FilenameSmartFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilenameSmartFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilenameSmartFieldArchive* New() const final {
    return CreateMaybeMessage<FilenameSmartFieldArchive>(nullptr);
  }

  FilenameSmartFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilenameSmartFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilenameSmartFieldArchive& from);
  void MergeFrom(const FilenameSmartFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilenameSmartFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.FilenameSmartFieldArchive";
  }
  protected:
  explicit FilenameSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDisplayFlagsFieldNumber = 2,
  };
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::PlaceholderSmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PlaceholderSmartFieldArchive* release_super();
  ::TSWP::PlaceholderSmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::PlaceholderSmartFieldArchive* super);
  private:
  const ::TSWP::PlaceholderSmartFieldArchive& _internal_super() const;
  ::TSWP::PlaceholderSmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::PlaceholderSmartFieldArchive* super);
  ::TSWP::PlaceholderSmartFieldArchive* unsafe_arena_release_super();

  // optional uint32 display_flags = 2;
  bool has_display_flags() const;
  private:
  bool _internal_has_display_flags() const;
  public:
  void clear_display_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 display_flags() const;
  void set_display_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_display_flags() const;
  void _internal_set_display_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.FilenameSmartFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::PlaceholderSmartFieldArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 display_flags_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class MergeSmartFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.MergeSmartFieldArchive) */ {
 public:
  inline MergeSmartFieldArchive() : MergeSmartFieldArchive(nullptr) {}
  ~MergeSmartFieldArchive() override;
  explicit constexpr MergeSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeSmartFieldArchive(const MergeSmartFieldArchive& from);
  MergeSmartFieldArchive(MergeSmartFieldArchive&& from) noexcept
    : MergeSmartFieldArchive() {
    *this = ::std::move(from);
  }

  inline MergeSmartFieldArchive& operator=(const MergeSmartFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeSmartFieldArchive& operator=(MergeSmartFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeSmartFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeSmartFieldArchive* internal_default_instance() {
    return reinterpret_cast<const MergeSmartFieldArchive*>(
               &_MergeSmartFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(MergeSmartFieldArchive& a, MergeSmartFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeSmartFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeSmartFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeSmartFieldArchive* New() const final {
    return CreateMaybeMessage<MergeSmartFieldArchive>(nullptr);
  }

  MergeSmartFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeSmartFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeSmartFieldArchive& from);
  void MergeFrom(const MergeSmartFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeSmartFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.MergeSmartFieldArchive";
  }
  protected:
  explicit MergeSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MergeSmartFieldArchive_MergeCategory MergeCategory;
  static constexpr MergeCategory kMergeCategoryTo =
    MergeSmartFieldArchive_MergeCategory_kMergeCategoryTo;
  static constexpr MergeCategory kMergeCategoryFrom =
    MergeSmartFieldArchive_MergeCategory_kMergeCategoryFrom;
  static inline bool MergeCategory_IsValid(int value) {
    return MergeSmartFieldArchive_MergeCategory_IsValid(value);
  }
  static constexpr MergeCategory MergeCategory_MIN =
    MergeSmartFieldArchive_MergeCategory_MergeCategory_MIN;
  static constexpr MergeCategory MergeCategory_MAX =
    MergeSmartFieldArchive_MergeCategory_MergeCategory_MAX;
  static constexpr int MergeCategory_ARRAYSIZE =
    MergeSmartFieldArchive_MergeCategory_MergeCategory_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MergeCategory_descriptor() {
    return MergeSmartFieldArchive_MergeCategory_descriptor();
  }
  template<typename T>
  static inline const std::string& MergeCategory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MergeCategory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MergeCategory_Name.");
    return MergeSmartFieldArchive_MergeCategory_Name(enum_t_value);
  }
  static inline bool MergeCategory_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MergeCategory* value) {
    return MergeSmartFieldArchive_MergeCategory_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 2,
    kLabelFieldNumber = 3,
    kKeyFieldNumber = 4,
    kWhitespaceFieldNumber = 7,
    kGuidFieldNumber = 8,
    kTableFieldFieldNumber = 9,
    kSuperFieldNumber = 1,
    kCategoryFieldNumber = 5,
    kRequiresFollowingWhitespaceFieldNumber = 6,
  };
  // optional string property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // optional string label = 3;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string key = 4;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string whitespace = 7;
  bool has_whitespace() const;
  private:
  bool _internal_has_whitespace() const;
  public:
  void clear_whitespace();
  const std::string& whitespace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_whitespace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_whitespace();
  std::string* release_whitespace();
  void set_allocated_whitespace(std::string* whitespace);
  private:
  const std::string& _internal_whitespace() const;
  void _internal_set_whitespace(const std::string& value);
  std::string* _internal_mutable_whitespace();
  public:

  // optional string guid = 8;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // optional string table_field = 9;
  bool has_table_field() const;
  private:
  bool _internal_has_table_field() const;
  public:
  void clear_table_field();
  const std::string& table_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_field();
  std::string* release_table_field();
  void set_allocated_table_field(std::string* table_field);
  private:
  const std::string& _internal_table_field() const;
  void _internal_set_table_field(const std::string& value);
  std::string* _internal_mutable_table_field();
  public:

  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::PlaceholderSmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PlaceholderSmartFieldArchive* release_super();
  ::TSWP::PlaceholderSmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::PlaceholderSmartFieldArchive* super);
  private:
  const ::TSWP::PlaceholderSmartFieldArchive& _internal_super() const;
  ::TSWP::PlaceholderSmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::PlaceholderSmartFieldArchive* super);
  ::TSWP::PlaceholderSmartFieldArchive* unsafe_arena_release_super();

  // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::TSWP::MergeSmartFieldArchive_MergeCategory category() const;
  void set_category(::TSWP::MergeSmartFieldArchive_MergeCategory value);
  private:
  ::TSWP::MergeSmartFieldArchive_MergeCategory _internal_category() const;
  void _internal_set_category(::TSWP::MergeSmartFieldArchive_MergeCategory value);
  public:

  // optional bool requires_following_whitespace = 6;
  bool has_requires_following_whitespace() const;
  private:
  bool _internal_has_requires_following_whitespace() const;
  public:
  void clear_requires_following_whitespace();
  bool requires_following_whitespace() const;
  void set_requires_following_whitespace(bool value);
  private:
  bool _internal_requires_following_whitespace() const;
  void _internal_set_requires_following_whitespace(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.MergeSmartFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whitespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_field_;
  ::TSWP::PlaceholderSmartFieldArchive* super_;
  int category_;
  bool requires_following_whitespace_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCSmartFieldArchive_TOCEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCSmartFieldArchive.TOCEntry) */ {
 public:
  inline TOCSmartFieldArchive_TOCEntry() : TOCSmartFieldArchive_TOCEntry(nullptr) {}
  ~TOCSmartFieldArchive_TOCEntry() override;
  explicit constexpr TOCSmartFieldArchive_TOCEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCSmartFieldArchive_TOCEntry(const TOCSmartFieldArchive_TOCEntry& from);
  TOCSmartFieldArchive_TOCEntry(TOCSmartFieldArchive_TOCEntry&& from) noexcept
    : TOCSmartFieldArchive_TOCEntry() {
    *this = ::std::move(from);
  }

  inline TOCSmartFieldArchive_TOCEntry& operator=(const TOCSmartFieldArchive_TOCEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCSmartFieldArchive_TOCEntry& operator=(TOCSmartFieldArchive_TOCEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCSmartFieldArchive_TOCEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCSmartFieldArchive_TOCEntry* internal_default_instance() {
    return reinterpret_cast<const TOCSmartFieldArchive_TOCEntry*>(
               &_TOCSmartFieldArchive_TOCEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(TOCSmartFieldArchive_TOCEntry& a, TOCSmartFieldArchive_TOCEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCSmartFieldArchive_TOCEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCSmartFieldArchive_TOCEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCSmartFieldArchive_TOCEntry* New() const final {
    return CreateMaybeMessage<TOCSmartFieldArchive_TOCEntry>(nullptr);
  }

  TOCSmartFieldArchive_TOCEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCSmartFieldArchive_TOCEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCSmartFieldArchive_TOCEntry& from);
  void MergeFrom(const TOCSmartFieldArchive_TOCEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCSmartFieldArchive_TOCEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCSmartFieldArchive.TOCEntry";
  }
  protected:
  explicit TOCSmartFieldArchive_TOCEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookmarkNameFieldNumber = 1,
    kTargetStyleFieldNumber = 2,
    kRangeFieldNumber = 3,
  };
  // optional string bookmark_name = 1;
  bool has_bookmark_name() const;
  private:
  bool _internal_has_bookmark_name() const;
  public:
  void clear_bookmark_name();
  const std::string& bookmark_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bookmark_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bookmark_name();
  std::string* release_bookmark_name();
  void set_allocated_bookmark_name(std::string* bookmark_name);
  private:
  const std::string& _internal_bookmark_name() const;
  void _internal_set_bookmark_name(const std::string& value);
  std::string* _internal_mutable_bookmark_name();
  public:

  // optional .TSP.Reference target_style = 2;
  bool has_target_style() const;
  private:
  bool _internal_has_target_style() const;
  public:
  void clear_target_style();
  const ::TSP::Reference& target_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_target_style();
  ::TSP::Reference* mutable_target_style();
  void set_allocated_target_style(::TSP::Reference* target_style);
  private:
  const ::TSP::Reference& _internal_target_style() const;
  ::TSP::Reference* _internal_mutable_target_style();
  public:
  void unsafe_arena_set_allocated_target_style(
      ::TSP::Reference* target_style);
  ::TSP::Reference* unsafe_arena_release_target_style();

  // optional .TSP.Range range = 3;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // @@protoc_insertion_point(class_scope:TSWP.TOCSmartFieldArchive.TOCEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookmark_name_;
  ::TSP::Reference* target_style_;
  ::TSP::Range* range_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TOCSmartFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TOCSmartFieldArchive) */ {
 public:
  inline TOCSmartFieldArchive() : TOCSmartFieldArchive(nullptr) {}
  ~TOCSmartFieldArchive() override;
  explicit constexpr TOCSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOCSmartFieldArchive(const TOCSmartFieldArchive& from);
  TOCSmartFieldArchive(TOCSmartFieldArchive&& from) noexcept
    : TOCSmartFieldArchive() {
    *this = ::std::move(from);
  }

  inline TOCSmartFieldArchive& operator=(const TOCSmartFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOCSmartFieldArchive& operator=(TOCSmartFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOCSmartFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOCSmartFieldArchive* internal_default_instance() {
    return reinterpret_cast<const TOCSmartFieldArchive*>(
               &_TOCSmartFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(TOCSmartFieldArchive& a, TOCSmartFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TOCSmartFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOCSmartFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOCSmartFieldArchive* New() const final {
    return CreateMaybeMessage<TOCSmartFieldArchive>(nullptr);
  }

  TOCSmartFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOCSmartFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOCSmartFieldArchive& from);
  void MergeFrom(const TOCSmartFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOCSmartFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TOCSmartFieldArchive";
  }
  protected:
  explicit TOCSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TOCSmartFieldArchive_TOCEntry TOCEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kTocEntriesFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
  int toc_entries_size() const;
  private:
  int _internal_toc_entries_size() const;
  public:
  void clear_toc_entries();
  ::TSWP::TOCSmartFieldArchive_TOCEntry* mutable_toc_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSmartFieldArchive_TOCEntry >*
      mutable_toc_entries();
  private:
  const ::TSWP::TOCSmartFieldArchive_TOCEntry& _internal_toc_entries(int index) const;
  ::TSWP::TOCSmartFieldArchive_TOCEntry* _internal_add_toc_entries();
  public:
  const ::TSWP::TOCSmartFieldArchive_TOCEntry& toc_entries(int index) const;
  ::TSWP::TOCSmartFieldArchive_TOCEntry* add_toc_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSmartFieldArchive_TOCEntry >&
      toc_entries() const;

  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::PlaceholderSmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PlaceholderSmartFieldArchive* release_super();
  ::TSWP::PlaceholderSmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::PlaceholderSmartFieldArchive* super);
  private:
  const ::TSWP::PlaceholderSmartFieldArchive& _internal_super() const;
  ::TSWP::PlaceholderSmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::PlaceholderSmartFieldArchive* super);
  ::TSWP::PlaceholderSmartFieldArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.TOCSmartFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSmartFieldArchive_TOCEntry > toc_entries_;
  ::TSWP::PlaceholderSmartFieldArchive* super_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class RubyFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.RubyFieldArchive) */ {
 public:
  inline RubyFieldArchive() : RubyFieldArchive(nullptr) {}
  ~RubyFieldArchive() override;
  explicit constexpr RubyFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RubyFieldArchive(const RubyFieldArchive& from);
  RubyFieldArchive(RubyFieldArchive&& from) noexcept
    : RubyFieldArchive() {
    *this = ::std::move(from);
  }

  inline RubyFieldArchive& operator=(const RubyFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RubyFieldArchive& operator=(RubyFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RubyFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RubyFieldArchive* internal_default_instance() {
    return reinterpret_cast<const RubyFieldArchive*>(
               &_RubyFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(RubyFieldArchive& a, RubyFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RubyFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RubyFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RubyFieldArchive* New() const final {
    return CreateMaybeMessage<RubyFieldArchive>(nullptr);
  }

  RubyFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RubyFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RubyFieldArchive& from);
  void MergeFrom(const RubyFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RubyFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.RubyFieldArchive";
  }
  protected:
  explicit RubyFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRubyTextFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // optional string ruby_text = 2;
  bool has_ruby_text() const;
  private:
  bool _internal_has_ruby_text() const;
  public:
  void clear_ruby_text();
  const std::string& ruby_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ruby_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ruby_text();
  std::string* release_ruby_text();
  void set_allocated_ruby_text(std::string* ruby_text);
  private:
  const std::string& _internal_ruby_text() const;
  void _internal_set_ruby_text(const std::string& value);
  std::string* _internal_mutable_ruby_text();
  public:

  // optional .TSWP.SmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SmartFieldArchive* release_super();
  ::TSWP::SmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::SmartFieldArchive* super);
  private:
  const ::TSWP::SmartFieldArchive& _internal_super() const;
  ::TSWP::SmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SmartFieldArchive* super);
  ::TSWP::SmartFieldArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.RubyFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ruby_text_;
  ::TSWP::SmartFieldArchive* super_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class TateChuYokoFieldArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TateChuYokoFieldArchive) */ {
 public:
  inline TateChuYokoFieldArchive() : TateChuYokoFieldArchive(nullptr) {}
  ~TateChuYokoFieldArchive() override;
  explicit constexpr TateChuYokoFieldArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TateChuYokoFieldArchive(const TateChuYokoFieldArchive& from);
  TateChuYokoFieldArchive(TateChuYokoFieldArchive&& from) noexcept
    : TateChuYokoFieldArchive() {
    *this = ::std::move(from);
  }

  inline TateChuYokoFieldArchive& operator=(const TateChuYokoFieldArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TateChuYokoFieldArchive& operator=(TateChuYokoFieldArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TateChuYokoFieldArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TateChuYokoFieldArchive* internal_default_instance() {
    return reinterpret_cast<const TateChuYokoFieldArchive*>(
               &_TateChuYokoFieldArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(TateChuYokoFieldArchive& a, TateChuYokoFieldArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TateChuYokoFieldArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TateChuYokoFieldArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TateChuYokoFieldArchive* New() const final {
    return CreateMaybeMessage<TateChuYokoFieldArchive>(nullptr);
  }

  TateChuYokoFieldArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TateChuYokoFieldArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TateChuYokoFieldArchive& from);
  void MergeFrom(const TateChuYokoFieldArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TateChuYokoFieldArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TateChuYokoFieldArchive";
  }
  protected:
  explicit TateChuYokoFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // optional .TSWP.SmartFieldArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SmartFieldArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SmartFieldArchive* release_super();
  ::TSWP::SmartFieldArchive* mutable_super();
  void set_allocated_super(::TSWP::SmartFieldArchive* super);
  private:
  const ::TSWP::SmartFieldArchive& _internal_super() const;
  ::TSWP::SmartFieldArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SmartFieldArchive* super);
  ::TSWP::SmartFieldArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.TateChuYokoFieldArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::SmartFieldArchive* super_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ChangeArchive) */ {
 public:
  inline ChangeArchive() : ChangeArchive(nullptr) {}
  ~ChangeArchive() override;
  explicit constexpr ChangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeArchive(const ChangeArchive& from);
  ChangeArchive(ChangeArchive&& from) noexcept
    : ChangeArchive() {
    *this = ::std::move(from);
  }

  inline ChangeArchive& operator=(const ChangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeArchive& operator=(ChangeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeArchive* internal_default_instance() {
    return reinterpret_cast<const ChangeArchive*>(
               &_ChangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(ChangeArchive& a, ChangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeArchive* New() const final {
    return CreateMaybeMessage<ChangeArchive>(nullptr);
  }

  ChangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeArchive& from);
  void MergeFrom(const ChangeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ChangeArchive";
  }
  protected:
  explicit ChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChangeArchive_ChangeKind ChangeKind;
  static constexpr ChangeKind kChangeKindInsertion =
    ChangeArchive_ChangeKind_kChangeKindInsertion;
  static constexpr ChangeKind kChangeKindDeletion =
    ChangeArchive_ChangeKind_kChangeKindDeletion;
  static inline bool ChangeKind_IsValid(int value) {
    return ChangeArchive_ChangeKind_IsValid(value);
  }
  static constexpr ChangeKind ChangeKind_MIN =
    ChangeArchive_ChangeKind_ChangeKind_MIN;
  static constexpr ChangeKind ChangeKind_MAX =
    ChangeArchive_ChangeKind_ChangeKind_MAX;
  static constexpr int ChangeKind_ARRAYSIZE =
    ChangeArchive_ChangeKind_ChangeKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChangeKind_descriptor() {
    return ChangeArchive_ChangeKind_descriptor();
  }
  template<typename T>
  static inline const std::string& ChangeKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChangeKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChangeKind_Name.");
    return ChangeArchive_ChangeKind_Name(enum_t_value);
  }
  static inline bool ChangeKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChangeKind* value) {
    return ChangeArchive_ChangeKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTextAttributeUuidStringFieldNumber = 4,
    kSessionFieldNumber = 2,
    kDateFieldNumber = 3,
    kKindFieldNumber = 1,
  };
  // optional string text_attribute_uuid_string = 4;
  bool has_text_attribute_uuid_string() const;
  private:
  bool _internal_has_text_attribute_uuid_string() const;
  public:
  void clear_text_attribute_uuid_string();
  const std::string& text_attribute_uuid_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_attribute_uuid_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_attribute_uuid_string();
  std::string* release_text_attribute_uuid_string();
  void set_allocated_text_attribute_uuid_string(std::string* text_attribute_uuid_string);
  private:
  const std::string& _internal_text_attribute_uuid_string() const;
  void _internal_set_text_attribute_uuid_string(const std::string& value);
  std::string* _internal_mutable_text_attribute_uuid_string();
  public:

  // optional .TSP.Reference session = 2;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::TSP::Reference& session() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_session();
  ::TSP::Reference* mutable_session();
  void set_allocated_session(::TSP::Reference* session);
  private:
  const ::TSP::Reference& _internal_session() const;
  ::TSP::Reference* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::TSP::Reference* session);
  ::TSP::Reference* unsafe_arena_release_session();

  // optional .TSP.Date date = 3;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::TSP::Date& date() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Date* release_date();
  ::TSP::Date* mutable_date();
  void set_allocated_date(::TSP::Date* date);
  private:
  const ::TSP::Date& _internal_date() const;
  ::TSP::Date* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::TSP::Date* date);
  ::TSP::Date* unsafe_arena_release_date();

  // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::TSWP::ChangeArchive_ChangeKind kind() const;
  void set_kind(::TSWP::ChangeArchive_ChangeKind value);
  private:
  ::TSWP::ChangeArchive_ChangeKind _internal_kind() const;
  void _internal_set_kind(::TSWP::ChangeArchive_ChangeKind value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ChangeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_attribute_uuid_string_;
  ::TSP::Reference* session_;
  ::TSP::Date* date_;
  int kind_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangeSessionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ChangeSessionArchive) */ {
 public:
  inline ChangeSessionArchive() : ChangeSessionArchive(nullptr) {}
  ~ChangeSessionArchive() override;
  explicit constexpr ChangeSessionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeSessionArchive(const ChangeSessionArchive& from);
  ChangeSessionArchive(ChangeSessionArchive&& from) noexcept
    : ChangeSessionArchive() {
    *this = ::std::move(from);
  }

  inline ChangeSessionArchive& operator=(const ChangeSessionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeSessionArchive& operator=(ChangeSessionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeSessionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeSessionArchive* internal_default_instance() {
    return reinterpret_cast<const ChangeSessionArchive*>(
               &_ChangeSessionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ChangeSessionArchive& a, ChangeSessionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeSessionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeSessionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeSessionArchive* New() const final {
    return CreateMaybeMessage<ChangeSessionArchive>(nullptr);
  }

  ChangeSessionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeSessionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeSessionArchive& from);
  void MergeFrom(const ChangeSessionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeSessionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ChangeSessionArchive";
  }
  protected:
  explicit ChangeSessionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 2,
    kDateFieldNumber = 3,
    kSessionUidFieldNumber = 1,
  };
  // optional .TSP.Reference author = 2;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::TSP::Reference& author() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_author();
  ::TSP::Reference* mutable_author();
  void set_allocated_author(::TSP::Reference* author);
  private:
  const ::TSP::Reference& _internal_author() const;
  ::TSP::Reference* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::TSP::Reference* author);
  ::TSP::Reference* unsafe_arena_release_author();

  // optional .TSP.Date date = 3;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::TSP::Date& date() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Date* release_date();
  ::TSP::Date* mutable_date();
  void set_allocated_date(::TSP::Date* date);
  private:
  const ::TSP::Date& _internal_date() const;
  ::TSP::Date* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::TSP::Date* date);
  ::TSP::Date* unsafe_arena_release_date();

  // optional uint32 session_uid = 1;
  bool has_session_uid() const;
  private:
  bool _internal_has_session_uid() const;
  public:
  void clear_session_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_uid() const;
  void set_session_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_uid() const;
  void _internal_set_session_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ChangeSessionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* author_;
  ::TSP::Date* date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_uid_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionPlaceholderArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.SectionPlaceholderArchive) */ {
 public:
  inline SectionPlaceholderArchive() : SectionPlaceholderArchive(nullptr) {}
  ~SectionPlaceholderArchive() override;
  explicit constexpr SectionPlaceholderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionPlaceholderArchive(const SectionPlaceholderArchive& from);
  SectionPlaceholderArchive(SectionPlaceholderArchive&& from) noexcept
    : SectionPlaceholderArchive() {
    *this = ::std::move(from);
  }

  inline SectionPlaceholderArchive& operator=(const SectionPlaceholderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionPlaceholderArchive& operator=(SectionPlaceholderArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionPlaceholderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionPlaceholderArchive* internal_default_instance() {
    return reinterpret_cast<const SectionPlaceholderArchive*>(
               &_SectionPlaceholderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(SectionPlaceholderArchive& a, SectionPlaceholderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionPlaceholderArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionPlaceholderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionPlaceholderArchive* New() const final {
    return CreateMaybeMessage<SectionPlaceholderArchive>(nullptr);
  }

  SectionPlaceholderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionPlaceholderArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionPlaceholderArchive& from);
  void MergeFrom(const SectionPlaceholderArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionPlaceholderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.SectionPlaceholderArchive";
  }
  protected:
  explicit SectionPlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentStorageFieldNumber = 1,
  };
  // optional .TSP.Reference parent_storage = 1;
  bool has_parent_storage() const;
  private:
  bool _internal_has_parent_storage() const;
  public:
  void clear_parent_storage();
  const ::TSP::Reference& parent_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_parent_storage();
  ::TSP::Reference* mutable_parent_storage();
  void set_allocated_parent_storage(::TSP::Reference* parent_storage);
  private:
  const ::TSP::Reference& _internal_parent_storage() const;
  ::TSP::Reference* _internal_mutable_parent_storage();
  public:
  void unsafe_arena_set_allocated_parent_storage(
      ::TSP::Reference* parent_storage);
  ::TSP::Reference* unsafe_arena_release_parent_storage();

  // @@protoc_insertion_point(class_scope:TSWP.SectionPlaceholderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* parent_storage_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class HyperlinkSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.HyperlinkSelectionArchive) */ {
 public:
  inline HyperlinkSelectionArchive() : HyperlinkSelectionArchive(nullptr) {}
  ~HyperlinkSelectionArchive() override;
  explicit constexpr HyperlinkSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HyperlinkSelectionArchive(const HyperlinkSelectionArchive& from);
  HyperlinkSelectionArchive(HyperlinkSelectionArchive&& from) noexcept
    : HyperlinkSelectionArchive() {
    *this = ::std::move(from);
  }

  inline HyperlinkSelectionArchive& operator=(const HyperlinkSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HyperlinkSelectionArchive& operator=(HyperlinkSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HyperlinkSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HyperlinkSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const HyperlinkSelectionArchive*>(
               &_HyperlinkSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(HyperlinkSelectionArchive& a, HyperlinkSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HyperlinkSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HyperlinkSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HyperlinkSelectionArchive* New() const final {
    return CreateMaybeMessage<HyperlinkSelectionArchive>(nullptr);
  }

  HyperlinkSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HyperlinkSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HyperlinkSelectionArchive& from);
  void MergeFrom(const HyperlinkSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HyperlinkSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.HyperlinkSelectionArchive";
  }
  protected:
  explicit HyperlinkSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TSWP.HyperlinkSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class FlowInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.FlowInfoArchive) */ {
 public:
  inline FlowInfoArchive() : FlowInfoArchive(nullptr) {}
  ~FlowInfoArchive() override;
  explicit constexpr FlowInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowInfoArchive(const FlowInfoArchive& from);
  FlowInfoArchive(FlowInfoArchive&& from) noexcept
    : FlowInfoArchive() {
    *this = ::std::move(from);
  }

  inline FlowInfoArchive& operator=(const FlowInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowInfoArchive& operator=(FlowInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowInfoArchive* internal_default_instance() {
    return reinterpret_cast<const FlowInfoArchive*>(
               &_FlowInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(FlowInfoArchive& a, FlowInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowInfoArchive* New() const final {
    return CreateMaybeMessage<FlowInfoArchive>(nullptr);
  }

  FlowInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowInfoArchive& from);
  void MergeFrom(const FlowInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.FlowInfoArchive";
  }
  protected:
  explicit FlowInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextboxesFieldNumber = 2,
    kTextStorageFieldNumber = 1,
    kUserInterfaceIdentifierFieldNumber = 3,
  };
  // repeated .TSP.Reference textboxes = 2;
  int textboxes_size() const;
  private:
  int _internal_textboxes_size() const;
  public:
  void clear_textboxes();
  ::TSP::Reference* mutable_textboxes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_textboxes();
  private:
  const ::TSP::Reference& _internal_textboxes(int index) const;
  ::TSP::Reference* _internal_add_textboxes();
  public:
  const ::TSP::Reference& textboxes(int index) const;
  ::TSP::Reference* add_textboxes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      textboxes() const;

  // optional .TSP.Reference text_storage = 1;
  bool has_text_storage() const;
  private:
  bool _internal_has_text_storage() const;
  public:
  void clear_text_storage();
  const ::TSP::Reference& text_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_text_storage();
  ::TSP::Reference* mutable_text_storage();
  void set_allocated_text_storage(::TSP::Reference* text_storage);
  private:
  const ::TSP::Reference& _internal_text_storage() const;
  ::TSP::Reference* _internal_mutable_text_storage();
  public:
  void unsafe_arena_set_allocated_text_storage(
      ::TSP::Reference* text_storage);
  ::TSP::Reference* unsafe_arena_release_text_storage();

  // optional uint32 user_interface_identifier = 3;
  bool has_user_interface_identifier() const;
  private:
  bool _internal_has_user_interface_identifier() const;
  public:
  void clear_user_interface_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_interface_identifier() const;
  void set_user_interface_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_interface_identifier() const;
  void _internal_set_user_interface_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.FlowInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > textboxes_;
  ::TSP::Reference* text_storage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_interface_identifier_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class FlowInfoContainerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.FlowInfoContainerArchive) */ {
 public:
  inline FlowInfoContainerArchive() : FlowInfoContainerArchive(nullptr) {}
  ~FlowInfoContainerArchive() override;
  explicit constexpr FlowInfoContainerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowInfoContainerArchive(const FlowInfoContainerArchive& from);
  FlowInfoContainerArchive(FlowInfoContainerArchive&& from) noexcept
    : FlowInfoContainerArchive() {
    *this = ::std::move(from);
  }

  inline FlowInfoContainerArchive& operator=(const FlowInfoContainerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowInfoContainerArchive& operator=(FlowInfoContainerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowInfoContainerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowInfoContainerArchive* internal_default_instance() {
    return reinterpret_cast<const FlowInfoContainerArchive*>(
               &_FlowInfoContainerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(FlowInfoContainerArchive& a, FlowInfoContainerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowInfoContainerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowInfoContainerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowInfoContainerArchive* New() const final {
    return CreateMaybeMessage<FlowInfoContainerArchive>(nullptr);
  }

  FlowInfoContainerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowInfoContainerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowInfoContainerArchive& from);
  void MergeFrom(const FlowInfoContainerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowInfoContainerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.FlowInfoContainerArchive";
  }
  protected:
  explicit FlowInfoContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowInfosFieldNumber = 1,
    kNextUserInterfaceIdentifierFieldNumber = 2,
  };
  // repeated .TSP.Reference flow_infos = 1;
  int flow_infos_size() const;
  private:
  int _internal_flow_infos_size() const;
  public:
  void clear_flow_infos();
  ::TSP::Reference* mutable_flow_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_flow_infos();
  private:
  const ::TSP::Reference& _internal_flow_infos(int index) const;
  ::TSP::Reference* _internal_add_flow_infos();
  public:
  const ::TSP::Reference& flow_infos(int index) const;
  ::TSP::Reference* add_flow_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      flow_infos() const;

  // optional uint32 next_user_interface_identifier = 2;
  bool has_next_user_interface_identifier() const;
  private:
  bool _internal_has_next_user_interface_identifier() const;
  public:
  void clear_next_user_interface_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_user_interface_identifier() const;
  void set_next_user_interface_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_user_interface_identifier() const;
  void _internal_set_next_user_interface_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.FlowInfoContainerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > flow_infos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_user_interface_identifier_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class DropCapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.DropCapArchive) */ {
 public:
  inline DropCapArchive() : DropCapArchive(nullptr) {}
  ~DropCapArchive() override;
  explicit constexpr DropCapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropCapArchive(const DropCapArchive& from);
  DropCapArchive(DropCapArchive&& from) noexcept
    : DropCapArchive() {
    *this = ::std::move(from);
  }

  inline DropCapArchive& operator=(const DropCapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropCapArchive& operator=(DropCapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropCapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropCapArchive* internal_default_instance() {
    return reinterpret_cast<const DropCapArchive*>(
               &_DropCapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(DropCapArchive& a, DropCapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DropCapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropCapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropCapArchive* New() const final {
    return CreateMaybeMessage<DropCapArchive>(nullptr);
  }

  DropCapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropCapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropCapArchive& from);
  void MergeFrom(const DropCapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropCapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.DropCapArchive";
  }
  protected:
  explicit DropCapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DropCapArchive_DropCapType DropCapType;
  static constexpr DropCapType TSWPDropCapTypeText =
    DropCapArchive_DropCapType_TSWPDropCapTypeText;
  static constexpr DropCapType TSWPDropCapTypeShape =
    DropCapArchive_DropCapType_TSWPDropCapTypeShape;
  static constexpr DropCapType TSWPDropCapTypeImage =
    DropCapArchive_DropCapType_TSWPDropCapTypeImage;
  static inline bool DropCapType_IsValid(int value) {
    return DropCapArchive_DropCapType_IsValid(value);
  }
  static constexpr DropCapType DropCapType_MIN =
    DropCapArchive_DropCapType_DropCapType_MIN;
  static constexpr DropCapType DropCapType_MAX =
    DropCapArchive_DropCapType_DropCapType_MAX;
  static constexpr int DropCapType_ARRAYSIZE =
    DropCapArchive_DropCapType_DropCapType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DropCapType_descriptor() {
    return DropCapArchive_DropCapType_descriptor();
  }
  template<typename T>
  static inline const std::string& DropCapType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DropCapType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DropCapType_Name.");
    return DropCapArchive_DropCapType_Name(enum_t_value);
  }
  static inline bool DropCapType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DropCapType* value) {
    return DropCapArchive_DropCapType_Parse(name, value);
  }

  typedef DropCapArchive_DropCapWrapType DropCapWrapType;
  static constexpr DropCapWrapType TSWPDropCapWrapTypeRectangular =
    DropCapArchive_DropCapWrapType_TSWPDropCapWrapTypeRectangular;
  static constexpr DropCapWrapType TSWPDropCapWrapTypeContour =
    DropCapArchive_DropCapWrapType_TSWPDropCapWrapTypeContour;
  static constexpr DropCapWrapType TSWPDropCapWrapTypeNone =
    DropCapArchive_DropCapWrapType_TSWPDropCapWrapTypeNone;
  static inline bool DropCapWrapType_IsValid(int value) {
    return DropCapArchive_DropCapWrapType_IsValid(value);
  }
  static constexpr DropCapWrapType DropCapWrapType_MIN =
    DropCapArchive_DropCapWrapType_DropCapWrapType_MIN;
  static constexpr DropCapWrapType DropCapWrapType_MAX =
    DropCapArchive_DropCapWrapType_DropCapWrapType_MAX;
  static constexpr int DropCapWrapType_ARRAYSIZE =
    DropCapArchive_DropCapWrapType_DropCapWrapType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DropCapWrapType_descriptor() {
    return DropCapArchive_DropCapWrapType_descriptor();
  }
  template<typename T>
  static inline const std::string& DropCapWrapType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DropCapWrapType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DropCapWrapType_Name.");
    return DropCapArchive_DropCapWrapType_Name(enum_t_value);
  }
  static inline bool DropCapWrapType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DropCapWrapType* value) {
    return DropCapArchive_DropCapWrapType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNumberOfRaisedLinesFieldNumber = 3,
    kDeprecatedOutdentFieldNumber = 4,
    kDeprecatedPaddingFieldNumber = 5,
    kWrapTypeFieldNumber = 6,
    kShapeEnabledFieldNumber = 7,
    kDeprecatedCornerRadiusFieldNumber = 8,
    kDeprecatedCharacterScaleFieldNumber = 9,
    kOutdentFieldNumber = 11,
    kPaddingFieldNumber = 12,
    kCornerRadiusFieldNumber = 13,
    kNumberOfLinesFieldNumber = 2,
    kNumberOfCharactersFieldNumber = 10,
    kCharacterScaleFieldNumber = 14,
  };
  // optional .TSWP.DropCapArchive.DropCapType type = 1 [default = TSWPDropCapTypeText];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSWP::DropCapArchive_DropCapType type() const;
  void set_type(::TSWP::DropCapArchive_DropCapType value);
  private:
  ::TSWP::DropCapArchive_DropCapType _internal_type() const;
  void _internal_set_type(::TSWP::DropCapArchive_DropCapType value);
  public:

  // optional uint32 number_of_raised_lines = 3 [default = 0];
  bool has_number_of_raised_lines() const;
  private:
  bool _internal_has_number_of_raised_lines() const;
  public:
  void clear_number_of_raised_lines();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_raised_lines() const;
  void set_number_of_raised_lines(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_raised_lines() const;
  void _internal_set_number_of_raised_lines(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float deprecated_outdent = 4;
  bool has_deprecated_outdent() const;
  private:
  bool _internal_has_deprecated_outdent() const;
  public:
  void clear_deprecated_outdent();
  float deprecated_outdent() const;
  void set_deprecated_outdent(float value);
  private:
  float _internal_deprecated_outdent() const;
  void _internal_set_deprecated_outdent(float value);
  public:

  // optional float deprecated_padding = 5;
  bool has_deprecated_padding() const;
  private:
  bool _internal_has_deprecated_padding() const;
  public:
  void clear_deprecated_padding();
  float deprecated_padding() const;
  void set_deprecated_padding(float value);
  private:
  float _internal_deprecated_padding() const;
  void _internal_set_deprecated_padding(float value);
  public:

  // optional .TSWP.DropCapArchive.DropCapWrapType wrap_type = 6 [default = TSWPDropCapWrapTypeRectangular];
  bool has_wrap_type() const;
  private:
  bool _internal_has_wrap_type() const;
  public:
  void clear_wrap_type();
  ::TSWP::DropCapArchive_DropCapWrapType wrap_type() const;
  void set_wrap_type(::TSWP::DropCapArchive_DropCapWrapType value);
  private:
  ::TSWP::DropCapArchive_DropCapWrapType _internal_wrap_type() const;
  void _internal_set_wrap_type(::TSWP::DropCapArchive_DropCapWrapType value);
  public:

  // optional bool shape_enabled = 7 [default = false];
  bool has_shape_enabled() const;
  private:
  bool _internal_has_shape_enabled() const;
  public:
  void clear_shape_enabled();
  bool shape_enabled() const;
  void set_shape_enabled(bool value);
  private:
  bool _internal_shape_enabled() const;
  void _internal_set_shape_enabled(bool value);
  public:

  // optional float deprecated_corner_radius = 8;
  bool has_deprecated_corner_radius() const;
  private:
  bool _internal_has_deprecated_corner_radius() const;
  public:
  void clear_deprecated_corner_radius();
  float deprecated_corner_radius() const;
  void set_deprecated_corner_radius(float value);
  private:
  float _internal_deprecated_corner_radius() const;
  void _internal_set_deprecated_corner_radius(float value);
  public:

  // optional float deprecated_character_scale = 9;
  bool has_deprecated_character_scale() const;
  private:
  bool _internal_has_deprecated_character_scale() const;
  public:
  void clear_deprecated_character_scale();
  float deprecated_character_scale() const;
  void set_deprecated_character_scale(float value);
  private:
  float _internal_deprecated_character_scale() const;
  void _internal_set_deprecated_character_scale(float value);
  public:

  // optional double outdent = 11 [default = 0];
  bool has_outdent() const;
  private:
  bool _internal_has_outdent() const;
  public:
  void clear_outdent();
  double outdent() const;
  void set_outdent(double value);
  private:
  double _internal_outdent() const;
  void _internal_set_outdent(double value);
  public:

  // optional double padding = 12 [default = 0];
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // optional double corner_radius = 13 [default = 0];
  bool has_corner_radius() const;
  private:
  bool _internal_has_corner_radius() const;
  public:
  void clear_corner_radius();
  double corner_radius() const;
  void set_corner_radius(double value);
  private:
  double _internal_corner_radius() const;
  void _internal_set_corner_radius(double value);
  public:

  // optional uint32 number_of_lines = 2 [default = 3];
  bool has_number_of_lines() const;
  private:
  bool _internal_has_number_of_lines() const;
  public:
  void clear_number_of_lines();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_lines() const;
  void set_number_of_lines(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_lines() const;
  void _internal_set_number_of_lines(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 number_of_characters = 10 [default = 1];
  bool has_number_of_characters() const;
  private:
  bool _internal_has_number_of_characters() const;
  public:
  void clear_number_of_characters();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_characters() const;
  void set_number_of_characters(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_characters() const;
  void _internal_set_number_of_characters(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double character_scale = 14 [default = 1];
  bool has_character_scale() const;
  private:
  bool _internal_has_character_scale() const;
  public:
  void clear_character_scale();
  double character_scale() const;
  void set_character_scale(double value);
  private:
  double _internal_character_scale() const;
  void _internal_set_character_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.DropCapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_raised_lines_;
  float deprecated_outdent_;
  float deprecated_padding_;
  int wrap_type_;
  bool shape_enabled_;
  float deprecated_corner_radius_;
  float deprecated_character_scale_;
  double outdent_;
  double padding_;
  double corner_radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_lines_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_characters_;
  double character_scale_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class DropCapStylePropertiesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.DropCapStylePropertiesArchive) */ {
 public:
  inline DropCapStylePropertiesArchive() : DropCapStylePropertiesArchive(nullptr) {}
  ~DropCapStylePropertiesArchive() override;
  explicit constexpr DropCapStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropCapStylePropertiesArchive(const DropCapStylePropertiesArchive& from);
  DropCapStylePropertiesArchive(DropCapStylePropertiesArchive&& from) noexcept
    : DropCapStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline DropCapStylePropertiesArchive& operator=(const DropCapStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropCapStylePropertiesArchive& operator=(DropCapStylePropertiesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropCapStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropCapStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const DropCapStylePropertiesArchive*>(
               &_DropCapStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(DropCapStylePropertiesArchive& a, DropCapStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DropCapStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropCapStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropCapStylePropertiesArchive* New() const final {
    return CreateMaybeMessage<DropCapStylePropertiesArchive>(nullptr);
  }

  DropCapStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropCapStylePropertiesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropCapStylePropertiesArchive& from);
  void MergeFrom(const DropCapStylePropertiesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropCapStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.DropCapStylePropertiesArchive";
  }
  protected:
  explicit DropCapStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropCapFieldNumber = 1,
    kDropCapShapeStrokeFieldNumber = 3,
    kDropCapShapeFillFieldNumber = 5,
    kDropCapShapeFillNullFieldNumber = 4,
  };
  // optional .TSWP.DropCapArchive drop_cap = 1;
  bool has_drop_cap() const;
  private:
  bool _internal_has_drop_cap() const;
  public:
  void clear_drop_cap();
  const ::TSWP::DropCapArchive& drop_cap() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::DropCapArchive* release_drop_cap();
  ::TSWP::DropCapArchive* mutable_drop_cap();
  void set_allocated_drop_cap(::TSWP::DropCapArchive* drop_cap);
  private:
  const ::TSWP::DropCapArchive& _internal_drop_cap() const;
  ::TSWP::DropCapArchive* _internal_mutable_drop_cap();
  public:
  void unsafe_arena_set_allocated_drop_cap(
      ::TSWP::DropCapArchive* drop_cap);
  ::TSWP::DropCapArchive* unsafe_arena_release_drop_cap();

  // optional .TSD.StrokeArchive drop_cap_shape_stroke = 3;
  bool has_drop_cap_shape_stroke() const;
  private:
  bool _internal_has_drop_cap_shape_stroke() const;
  public:
  void clear_drop_cap_shape_stroke();
  const ::TSD::StrokeArchive& drop_cap_shape_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_drop_cap_shape_stroke();
  ::TSD::StrokeArchive* mutable_drop_cap_shape_stroke();
  void set_allocated_drop_cap_shape_stroke(::TSD::StrokeArchive* drop_cap_shape_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_drop_cap_shape_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_drop_cap_shape_stroke();
  public:
  void unsafe_arena_set_allocated_drop_cap_shape_stroke(
      ::TSD::StrokeArchive* drop_cap_shape_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_drop_cap_shape_stroke();

  // optional .TSD.FillArchive drop_cap_shape_fill = 5;
  bool has_drop_cap_shape_fill() const;
  private:
  bool _internal_has_drop_cap_shape_fill() const;
  public:
  void clear_drop_cap_shape_fill();
  const ::TSD::FillArchive& drop_cap_shape_fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_drop_cap_shape_fill();
  ::TSD::FillArchive* mutable_drop_cap_shape_fill();
  void set_allocated_drop_cap_shape_fill(::TSD::FillArchive* drop_cap_shape_fill);
  private:
  const ::TSD::FillArchive& _internal_drop_cap_shape_fill() const;
  ::TSD::FillArchive* _internal_mutable_drop_cap_shape_fill();
  public:
  void unsafe_arena_set_allocated_drop_cap_shape_fill(
      ::TSD::FillArchive* drop_cap_shape_fill);
  ::TSD::FillArchive* unsafe_arena_release_drop_cap_shape_fill();

  // optional bool drop_cap_shape_fill_null = 4;
  bool has_drop_cap_shape_fill_null() const;
  private:
  bool _internal_has_drop_cap_shape_fill_null() const;
  public:
  void clear_drop_cap_shape_fill_null();
  bool drop_cap_shape_fill_null() const;
  void set_drop_cap_shape_fill_null(bool value);
  private:
  bool _internal_drop_cap_shape_fill_null() const;
  void _internal_set_drop_cap_shape_fill_null(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.DropCapStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::DropCapArchive* drop_cap_;
  ::TSD::StrokeArchive* drop_cap_shape_stroke_;
  ::TSD::FillArchive* drop_cap_shape_fill_;
  bool drop_cap_shape_fill_null_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// -------------------------------------------------------------------

class DropCapStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.DropCapStyleArchive) */ {
 public:
  inline DropCapStyleArchive() : DropCapStyleArchive(nullptr) {}
  ~DropCapStyleArchive() override;
  explicit constexpr DropCapStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropCapStyleArchive(const DropCapStyleArchive& from);
  DropCapStyleArchive(DropCapStyleArchive&& from) noexcept
    : DropCapStyleArchive() {
    *this = ::std::move(from);
  }

  inline DropCapStyleArchive& operator=(const DropCapStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropCapStyleArchive& operator=(DropCapStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropCapStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropCapStyleArchive* internal_default_instance() {
    return reinterpret_cast<const DropCapStyleArchive*>(
               &_DropCapStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(DropCapStyleArchive& a, DropCapStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DropCapStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropCapStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropCapStyleArchive* New() const final {
    return CreateMaybeMessage<DropCapStyleArchive>(nullptr);
  }

  DropCapStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropCapStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropCapStyleArchive& from);
  void MergeFrom(const DropCapStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropCapStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.DropCapStyleArchive";
  }
  protected:
  explicit DropCapStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCharPropertiesFieldNumber = 11,
    kDropCapPropertiesFieldNumber = 12,
    kOverrideCountFieldNumber = 10,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  bool has_char_properties() const;
  private:
  bool _internal_has_char_properties() const;
  public:
  void clear_char_properties();
  const ::TSWP::CharacterStylePropertiesArchive& char_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::CharacterStylePropertiesArchive* release_char_properties();
  ::TSWP::CharacterStylePropertiesArchive* mutable_char_properties();
  void set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties);
  private:
  const ::TSWP::CharacterStylePropertiesArchive& _internal_char_properties() const;
  ::TSWP::CharacterStylePropertiesArchive* _internal_mutable_char_properties();
  public:
  void unsafe_arena_set_allocated_char_properties(
      ::TSWP::CharacterStylePropertiesArchive* char_properties);
  ::TSWP::CharacterStylePropertiesArchive* unsafe_arena_release_char_properties();

  // optional .TSWP.DropCapStylePropertiesArchive drop_cap_properties = 12;
  bool has_drop_cap_properties() const;
  private:
  bool _internal_has_drop_cap_properties() const;
  public:
  void clear_drop_cap_properties();
  const ::TSWP::DropCapStylePropertiesArchive& drop_cap_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::DropCapStylePropertiesArchive* release_drop_cap_properties();
  ::TSWP::DropCapStylePropertiesArchive* mutable_drop_cap_properties();
  void set_allocated_drop_cap_properties(::TSWP::DropCapStylePropertiesArchive* drop_cap_properties);
  private:
  const ::TSWP::DropCapStylePropertiesArchive& _internal_drop_cap_properties() const;
  ::TSWP::DropCapStylePropertiesArchive* _internal_mutable_drop_cap_properties();
  public:
  void unsafe_arena_set_allocated_drop_cap_properties(
      ::TSWP::DropCapStylePropertiesArchive* drop_cap_properties);
  ::TSWP::DropCapStylePropertiesArchive* unsafe_arena_release_drop_cap_properties();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.DropCapStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TSWP::CharacterStylePropertiesArchive* char_properties_;
  ::TSWP::DropCapStylePropertiesArchive* drop_cap_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  friend struct ::TableStruct_TSWPArchives_2eproto;
};
// ===================================================================

static const int kPaddingFieldNumber = 100;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSWP::PaddingArchive >, 11, false >
  padding;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SelectionArchive

// required .TSWP.SelectionType type = 1;
inline bool SelectionArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SelectionArchive::has_type() const {
  return _internal_has_type();
}
inline void SelectionArchive::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSWP::SelectionType SelectionArchive::_internal_type() const {
  return static_cast< ::TSWP::SelectionType >(type_);
}
inline ::TSWP::SelectionType SelectionArchive::type() const {
  // @@protoc_insertion_point(field_get:TSWP.SelectionArchive.type)
  return _internal_type();
}
inline void SelectionArchive::_internal_set_type(::TSWP::SelectionType value) {
  assert(::TSWP::SelectionType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void SelectionArchive::set_type(::TSWP::SelectionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSWP.SelectionArchive.type)
}

// required .TSP.Range range = 2;
inline bool SelectionArchive::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& SelectionArchive::_internal_range() const {
  const ::TSP::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& SelectionArchive::range() const {
  // @@protoc_insertion_point(field_get:TSWP.SelectionArchive.range)
  return _internal_range();
}
inline void SelectionArchive::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SelectionArchive.range)
}
inline ::TSP::Range* SelectionArchive::release_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* SelectionArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TSWP.SelectionArchive.range)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::TSP::Range* SelectionArchive::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000001u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::TSP::Range* SelectionArchive::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TSWP.SelectionArchive.range)
  return _internal_mutable_range();
}
inline void SelectionArchive::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SelectionArchive.range)
}

// required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
inline bool SelectionArchive::_internal_has_styleinsertionbehavior() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SelectionArchive::has_styleinsertionbehavior() const {
  return _internal_has_styleinsertionbehavior();
}
inline void SelectionArchive::clear_styleinsertionbehavior() {
  styleinsertionbehavior_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSWP::StyleInsertionBehavior SelectionArchive::_internal_styleinsertionbehavior() const {
  return static_cast< ::TSWP::StyleInsertionBehavior >(styleinsertionbehavior_);
}
inline ::TSWP::StyleInsertionBehavior SelectionArchive::styleinsertionbehavior() const {
  // @@protoc_insertion_point(field_get:TSWP.SelectionArchive.styleInsertionBehavior)
  return _internal_styleinsertionbehavior();
}
inline void SelectionArchive::_internal_set_styleinsertionbehavior(::TSWP::StyleInsertionBehavior value) {
  assert(::TSWP::StyleInsertionBehavior_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  styleinsertionbehavior_ = value;
}
inline void SelectionArchive::set_styleinsertionbehavior(::TSWP::StyleInsertionBehavior value) {
  _internal_set_styleinsertionbehavior(value);
  // @@protoc_insertion_point(field_set:TSWP.SelectionArchive.styleInsertionBehavior)
}

// required .TSWP.CaretAffinity caretAffinity = 4;
inline bool SelectionArchive::_internal_has_caretaffinity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SelectionArchive::has_caretaffinity() const {
  return _internal_has_caretaffinity();
}
inline void SelectionArchive::clear_caretaffinity() {
  caretaffinity_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::TSWP::CaretAffinity SelectionArchive::_internal_caretaffinity() const {
  return static_cast< ::TSWP::CaretAffinity >(caretaffinity_);
}
inline ::TSWP::CaretAffinity SelectionArchive::caretaffinity() const {
  // @@protoc_insertion_point(field_get:TSWP.SelectionArchive.caretAffinity)
  return _internal_caretaffinity();
}
inline void SelectionArchive::_internal_set_caretaffinity(::TSWP::CaretAffinity value) {
  assert(::TSWP::CaretAffinity_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  caretaffinity_ = value;
}
inline void SelectionArchive::set_caretaffinity(::TSWP::CaretAffinity value) {
  _internal_set_caretaffinity(value);
  // @@protoc_insertion_point(field_set:TSWP.SelectionArchive.caretAffinity)
}

// required .TSP.Range smart_field_range = 5;
inline bool SelectionArchive::_internal_has_smart_field_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || smart_field_range_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_smart_field_range() const {
  return _internal_has_smart_field_range();
}
inline const ::TSP::Range& SelectionArchive::_internal_smart_field_range() const {
  const ::TSP::Range* p = smart_field_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& SelectionArchive::smart_field_range() const {
  // @@protoc_insertion_point(field_get:TSWP.SelectionArchive.smart_field_range)
  return _internal_smart_field_range();
}
inline void SelectionArchive::unsafe_arena_set_allocated_smart_field_range(
    ::TSP::Range* smart_field_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smart_field_range_);
  }
  smart_field_range_ = smart_field_range;
  if (smart_field_range) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SelectionArchive.smart_field_range)
}
inline ::TSP::Range* SelectionArchive::release_smart_field_range() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = smart_field_range_;
  smart_field_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* SelectionArchive::unsafe_arena_release_smart_field_range() {
  // @@protoc_insertion_point(field_release:TSWP.SelectionArchive.smart_field_range)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = smart_field_range_;
  smart_field_range_ = nullptr;
  return temp;
}
inline ::TSP::Range* SelectionArchive::_internal_mutable_smart_field_range() {
  _has_bits_[0] |= 0x00000002u;
  if (smart_field_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    smart_field_range_ = p;
  }
  return smart_field_range_;
}
inline ::TSP::Range* SelectionArchive::mutable_smart_field_range() {
  // @@protoc_insertion_point(field_mutable:TSWP.SelectionArchive.smart_field_range)
  return _internal_mutable_smart_field_range();
}
inline void SelectionArchive::set_allocated_smart_field_range(::TSP::Range* smart_field_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(smart_field_range_);
  }
  if (smart_field_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smart_field_range)->GetArena();
    if (message_arena != submessage_arena) {
      smart_field_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smart_field_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  smart_field_range_ = smart_field_range;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SelectionArchive.smart_field_range)
}

// -------------------------------------------------------------------

// ObjectAttributeTable_ObjectAttribute

// required uint32 character_index = 1;
inline bool ObjectAttributeTable_ObjectAttribute::_internal_has_character_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectAttributeTable_ObjectAttribute::has_character_index() const {
  return _internal_has_character_index();
}
inline void ObjectAttributeTable_ObjectAttribute::clear_character_index() {
  character_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectAttributeTable_ObjectAttribute::_internal_character_index() const {
  return character_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectAttributeTable_ObjectAttribute::character_index() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectAttributeTable.ObjectAttribute.character_index)
  return _internal_character_index();
}
inline void ObjectAttributeTable_ObjectAttribute::_internal_set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  character_index_ = value;
}
inline void ObjectAttributeTable_ObjectAttribute::set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character_index(value);
  // @@protoc_insertion_point(field_set:TSWP.ObjectAttributeTable.ObjectAttribute.character_index)
}

// optional .TSP.Reference object = 2;
inline bool ObjectAttributeTable_ObjectAttribute::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool ObjectAttributeTable_ObjectAttribute::has_object() const {
  return _internal_has_object();
}
inline const ::TSP::Reference& ObjectAttributeTable_ObjectAttribute::_internal_object() const {
  const ::TSP::Reference* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ObjectAttributeTable_ObjectAttribute::object() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectAttributeTable.ObjectAttribute.object)
  return _internal_object();
}
inline void ObjectAttributeTable_ObjectAttribute::unsafe_arena_set_allocated_object(
    ::TSP::Reference* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ObjectAttributeTable.ObjectAttribute.object)
}
inline ::TSP::Reference* ObjectAttributeTable_ObjectAttribute::release_object() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ObjectAttributeTable_ObjectAttribute::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:TSWP.ObjectAttributeTable.ObjectAttribute.object)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ObjectAttributeTable_ObjectAttribute::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000001u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::TSP::Reference* ObjectAttributeTable_ObjectAttribute::mutable_object() {
  // @@protoc_insertion_point(field_mutable:TSWP.ObjectAttributeTable.ObjectAttribute.object)
  return _internal_mutable_object();
}
inline void ObjectAttributeTable_ObjectAttribute::set_allocated_object(::TSP::Reference* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ObjectAttributeTable.ObjectAttribute.object)
}

// -------------------------------------------------------------------

// ObjectAttributeTable

// repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
inline int ObjectAttributeTable::_internal_entries_size() const {
  return entries_.size();
}
inline int ObjectAttributeTable::entries_size() const {
  return _internal_entries_size();
}
inline void ObjectAttributeTable::clear_entries() {
  entries_.Clear();
}
inline ::TSWP::ObjectAttributeTable_ObjectAttribute* ObjectAttributeTable::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ObjectAttributeTable.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectAttributeTable_ObjectAttribute >*
ObjectAttributeTable::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ObjectAttributeTable.entries)
  return &entries_;
}
inline const ::TSWP::ObjectAttributeTable_ObjectAttribute& ObjectAttributeTable::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSWP::ObjectAttributeTable_ObjectAttribute& ObjectAttributeTable::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectAttributeTable.entries)
  return _internal_entries(index);
}
inline ::TSWP::ObjectAttributeTable_ObjectAttribute* ObjectAttributeTable::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSWP::ObjectAttributeTable_ObjectAttribute* ObjectAttributeTable::add_entries() {
  // @@protoc_insertion_point(field_add:TSWP.ObjectAttributeTable.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectAttributeTable_ObjectAttribute >&
ObjectAttributeTable::entries() const {
  // @@protoc_insertion_point(field_list:TSWP.ObjectAttributeTable.entries)
  return entries_;
}

// -------------------------------------------------------------------

// StringAttributeTable_StringAttribute

// required uint32 character_index = 1;
inline bool StringAttributeTable_StringAttribute::_internal_has_character_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StringAttributeTable_StringAttribute::has_character_index() const {
  return _internal_has_character_index();
}
inline void StringAttributeTable_StringAttribute::clear_character_index() {
  character_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StringAttributeTable_StringAttribute::_internal_character_index() const {
  return character_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StringAttributeTable_StringAttribute::character_index() const {
  // @@protoc_insertion_point(field_get:TSWP.StringAttributeTable.StringAttribute.character_index)
  return _internal_character_index();
}
inline void StringAttributeTable_StringAttribute::_internal_set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  character_index_ = value;
}
inline void StringAttributeTable_StringAttribute::set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character_index(value);
  // @@protoc_insertion_point(field_set:TSWP.StringAttributeTable.StringAttribute.character_index)
}

// optional string object = 2;
inline bool StringAttributeTable_StringAttribute::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringAttributeTable_StringAttribute::has_object() const {
  return _internal_has_object();
}
inline void StringAttributeTable_StringAttribute::clear_object() {
  object_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringAttributeTable_StringAttribute::object() const {
  // @@protoc_insertion_point(field_get:TSWP.StringAttributeTable.StringAttribute.object)
  return _internal_object();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StringAttributeTable_StringAttribute::set_object(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.StringAttributeTable.StringAttribute.object)
}
inline std::string* StringAttributeTable_StringAttribute::mutable_object() {
  // @@protoc_insertion_point(field_mutable:TSWP.StringAttributeTable.StringAttribute.object)
  return _internal_mutable_object();
}
inline const std::string& StringAttributeTable_StringAttribute::_internal_object() const {
  return object_.Get();
}
inline void StringAttributeTable_StringAttribute::_internal_set_object(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StringAttributeTable_StringAttribute::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000001u;
  return object_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StringAttributeTable_StringAttribute::release_object() {
  // @@protoc_insertion_point(field_release:TSWP.StringAttributeTable.StringAttribute.object)
  if (!_internal_has_object()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return object_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringAttributeTable_StringAttribute::set_allocated_object(std::string* object) {
  if (object != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.StringAttributeTable.StringAttribute.object)
}

// -------------------------------------------------------------------

// StringAttributeTable

// repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
inline int StringAttributeTable::_internal_entries_size() const {
  return entries_.size();
}
inline int StringAttributeTable::entries_size() const {
  return _internal_entries_size();
}
inline void StringAttributeTable::clear_entries() {
  entries_.Clear();
}
inline ::TSWP::StringAttributeTable_StringAttribute* StringAttributeTable::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.StringAttributeTable.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::StringAttributeTable_StringAttribute >*
StringAttributeTable::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.StringAttributeTable.entries)
  return &entries_;
}
inline const ::TSWP::StringAttributeTable_StringAttribute& StringAttributeTable::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSWP::StringAttributeTable_StringAttribute& StringAttributeTable::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.StringAttributeTable.entries)
  return _internal_entries(index);
}
inline ::TSWP::StringAttributeTable_StringAttribute* StringAttributeTable::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSWP::StringAttributeTable_StringAttribute* StringAttributeTable::add_entries() {
  // @@protoc_insertion_point(field_add:TSWP.StringAttributeTable.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::StringAttributeTable_StringAttribute >&
StringAttributeTable::entries() const {
  // @@protoc_insertion_point(field_list:TSWP.StringAttributeTable.entries)
  return entries_;
}

// -------------------------------------------------------------------

// ParaDataAttributeTable_ParaDataAttribute

// required uint32 character_index = 1;
inline bool ParaDataAttributeTable_ParaDataAttribute::_internal_has_character_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParaDataAttributeTable_ParaDataAttribute::has_character_index() const {
  return _internal_has_character_index();
}
inline void ParaDataAttributeTable_ParaDataAttribute::clear_character_index() {
  character_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParaDataAttributeTable_ParaDataAttribute::_internal_character_index() const {
  return character_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParaDataAttributeTable_ParaDataAttribute::character_index() const {
  // @@protoc_insertion_point(field_get:TSWP.ParaDataAttributeTable.ParaDataAttribute.character_index)
  return _internal_character_index();
}
inline void ParaDataAttributeTable_ParaDataAttribute::_internal_set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  character_index_ = value;
}
inline void ParaDataAttributeTable_ParaDataAttribute::set_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character_index(value);
  // @@protoc_insertion_point(field_set:TSWP.ParaDataAttributeTable.ParaDataAttribute.character_index)
}

// required uint32 first = 2;
inline bool ParaDataAttributeTable_ParaDataAttribute::_internal_has_first() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParaDataAttributeTable_ParaDataAttribute::has_first() const {
  return _internal_has_first();
}
inline void ParaDataAttributeTable_ParaDataAttribute::clear_first() {
  first_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParaDataAttributeTable_ParaDataAttribute::_internal_first() const {
  return first_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParaDataAttributeTable_ParaDataAttribute::first() const {
  // @@protoc_insertion_point(field_get:TSWP.ParaDataAttributeTable.ParaDataAttribute.first)
  return _internal_first();
}
inline void ParaDataAttributeTable_ParaDataAttribute::_internal_set_first(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  first_ = value;
}
inline void ParaDataAttributeTable_ParaDataAttribute::set_first(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:TSWP.ParaDataAttributeTable.ParaDataAttribute.first)
}

// required uint32 second = 3;
inline bool ParaDataAttributeTable_ParaDataAttribute::_internal_has_second() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParaDataAttributeTable_ParaDataAttribute::has_second() const {
  return _internal_has_second();
}
inline void ParaDataAttributeTable_ParaDataAttribute::clear_second() {
  second_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParaDataAttributeTable_ParaDataAttribute::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParaDataAttributeTable_ParaDataAttribute::second() const {
  // @@protoc_insertion_point(field_get:TSWP.ParaDataAttributeTable.ParaDataAttribute.second)
  return _internal_second();
}
inline void ParaDataAttributeTable_ParaDataAttribute::_internal_set_second(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  second_ = value;
}
inline void ParaDataAttributeTable_ParaDataAttribute::set_second(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:TSWP.ParaDataAttributeTable.ParaDataAttribute.second)
}

// -------------------------------------------------------------------

// ParaDataAttributeTable

// repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
inline int ParaDataAttributeTable::_internal_entries_size() const {
  return entries_.size();
}
inline int ParaDataAttributeTable::entries_size() const {
  return _internal_entries_size();
}
inline void ParaDataAttributeTable::clear_entries() {
  entries_.Clear();
}
inline ::TSWP::ParaDataAttributeTable_ParaDataAttribute* ParaDataAttributeTable::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ParaDataAttributeTable.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ParaDataAttributeTable_ParaDataAttribute >*
ParaDataAttributeTable::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ParaDataAttributeTable.entries)
  return &entries_;
}
inline const ::TSWP::ParaDataAttributeTable_ParaDataAttribute& ParaDataAttributeTable::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSWP::ParaDataAttributeTable_ParaDataAttribute& ParaDataAttributeTable::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ParaDataAttributeTable.entries)
  return _internal_entries(index);
}
inline ::TSWP::ParaDataAttributeTable_ParaDataAttribute* ParaDataAttributeTable::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSWP::ParaDataAttributeTable_ParaDataAttribute* ParaDataAttributeTable::add_entries() {
  // @@protoc_insertion_point(field_add:TSWP.ParaDataAttributeTable.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ParaDataAttributeTable_ParaDataAttribute >&
ParaDataAttributeTable::entries() const {
  // @@protoc_insertion_point(field_list:TSWP.ParaDataAttributeTable.entries)
  return entries_;
}

// -------------------------------------------------------------------

// OverlappingFieldAttributeTable_OverlappingFieldAttribute

// required .TSP.Range range = 1;
inline bool OverlappingFieldAttributeTable_OverlappingFieldAttribute::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool OverlappingFieldAttributeTable_OverlappingFieldAttribute::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& OverlappingFieldAttributeTable_OverlappingFieldAttribute::_internal_range() const {
  const ::TSP::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& OverlappingFieldAttributeTable_OverlappingFieldAttribute::range() const {
  // @@protoc_insertion_point(field_get:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.range)
  return _internal_range();
}
inline void OverlappingFieldAttributeTable_OverlappingFieldAttribute::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.range)
}
inline ::TSP::Range* OverlappingFieldAttributeTable_OverlappingFieldAttribute::release_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* OverlappingFieldAttributeTable_OverlappingFieldAttribute::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.range)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::TSP::Range* OverlappingFieldAttributeTable_OverlappingFieldAttribute::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000001u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::TSP::Range* OverlappingFieldAttributeTable_OverlappingFieldAttribute::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.range)
  return _internal_mutable_range();
}
inline void OverlappingFieldAttributeTable_OverlappingFieldAttribute::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.range)
}

// required .TSP.Reference field = 2;
inline bool OverlappingFieldAttributeTable_OverlappingFieldAttribute::_internal_has_field() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || field_ != nullptr);
  return value;
}
inline bool OverlappingFieldAttributeTable_OverlappingFieldAttribute::has_field() const {
  return _internal_has_field();
}
inline const ::TSP::Reference& OverlappingFieldAttributeTable_OverlappingFieldAttribute::_internal_field() const {
  const ::TSP::Reference* p = field_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& OverlappingFieldAttributeTable_OverlappingFieldAttribute::field() const {
  // @@protoc_insertion_point(field_get:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.field)
  return _internal_field();
}
inline void OverlappingFieldAttributeTable_OverlappingFieldAttribute::unsafe_arena_set_allocated_field(
    ::TSP::Reference* field) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_);
  }
  field_ = field;
  if (field) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.field)
}
inline ::TSP::Reference* OverlappingFieldAttributeTable_OverlappingFieldAttribute::release_field() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = field_;
  field_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* OverlappingFieldAttributeTable_OverlappingFieldAttribute::unsafe_arena_release_field() {
  // @@protoc_insertion_point(field_release:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.field)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::TSP::Reference* OverlappingFieldAttributeTable_OverlappingFieldAttribute::_internal_mutable_field() {
  _has_bits_[0] |= 0x00000002u;
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    field_ = p;
  }
  return field_;
}
inline ::TSP::Reference* OverlappingFieldAttributeTable_OverlappingFieldAttribute::mutable_field() {
  // @@protoc_insertion_point(field_mutable:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.field)
  return _internal_mutable_field();
}
inline void OverlappingFieldAttributeTable_OverlappingFieldAttribute::set_allocated_field(::TSP::Reference* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_);
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field)->GetArena();
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.field)
}

// -------------------------------------------------------------------

// OverlappingFieldAttributeTable

// repeated .TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute entries = 1;
inline int OverlappingFieldAttributeTable::_internal_entries_size() const {
  return entries_.size();
}
inline int OverlappingFieldAttributeTable::entries_size() const {
  return _internal_entries_size();
}
inline void OverlappingFieldAttributeTable::clear_entries() {
  entries_.Clear();
}
inline ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute* OverlappingFieldAttributeTable::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.OverlappingFieldAttributeTable.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute >*
OverlappingFieldAttributeTable::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.OverlappingFieldAttributeTable.entries)
  return &entries_;
}
inline const ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute& OverlappingFieldAttributeTable::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute& OverlappingFieldAttributeTable::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.OverlappingFieldAttributeTable.entries)
  return _internal_entries(index);
}
inline ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute* OverlappingFieldAttributeTable::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute* OverlappingFieldAttributeTable::add_entries() {
  // @@protoc_insertion_point(field_add:TSWP.OverlappingFieldAttributeTable.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute >&
OverlappingFieldAttributeTable::entries() const {
  // @@protoc_insertion_point(field_list:TSWP.OverlappingFieldAttributeTable.entries)
  return entries_;
}

// -------------------------------------------------------------------

// StorageArchive

// optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
inline bool StorageArchive::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool StorageArchive::has_kind() const {
  return _internal_has_kind();
}
inline void StorageArchive::clear_kind() {
  kind_ = 3;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::TSWP::StorageArchive_KindType StorageArchive::_internal_kind() const {
  return static_cast< ::TSWP::StorageArchive_KindType >(kind_);
}
inline ::TSWP::StorageArchive_KindType StorageArchive::kind() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.kind)
  return _internal_kind();
}
inline void StorageArchive::_internal_set_kind(::TSWP::StorageArchive_KindType value) {
  assert(::TSWP::StorageArchive_KindType_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  kind_ = value;
}
inline void StorageArchive::set_kind(::TSWP::StorageArchive_KindType value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TSWP.StorageArchive.kind)
}

// optional .TSP.Reference style_sheet = 2;
inline bool StorageArchive::_internal_has_style_sheet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || style_sheet_ != nullptr);
  return value;
}
inline bool StorageArchive::has_style_sheet() const {
  return _internal_has_style_sheet();
}
inline const ::TSP::Reference& StorageArchive::_internal_style_sheet() const {
  const ::TSP::Reference* p = style_sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StorageArchive::style_sheet() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.style_sheet)
  return _internal_style_sheet();
}
inline void StorageArchive::unsafe_arena_set_allocated_style_sheet(
    ::TSP::Reference* style_sheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_sheet_);
  }
  style_sheet_ = style_sheet;
  if (style_sheet) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.style_sheet)
}
inline ::TSP::Reference* StorageArchive::release_style_sheet() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = style_sheet_;
  style_sheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StorageArchive::unsafe_arena_release_style_sheet() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.style_sheet)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = style_sheet_;
  style_sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StorageArchive::_internal_mutable_style_sheet() {
  _has_bits_[0] |= 0x00000001u;
  if (style_sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_sheet_ = p;
  }
  return style_sheet_;
}
inline ::TSP::Reference* StorageArchive::mutable_style_sheet() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.style_sheet)
  return _internal_mutable_style_sheet();
}
inline void StorageArchive::set_allocated_style_sheet(::TSP::Reference* style_sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_sheet_);
  }
  if (style_sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_sheet)->GetArena();
    if (message_arena != submessage_arena) {
      style_sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_sheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  style_sheet_ = style_sheet;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.style_sheet)
}

// repeated string text = 3;
inline int StorageArchive::_internal_text_size() const {
  return text_.size();
}
inline int StorageArchive::text_size() const {
  return _internal_text_size();
}
inline void StorageArchive::clear_text() {
  text_.Clear();
}
inline std::string* StorageArchive::add_text() {
  // @@protoc_insertion_point(field_add_mutable:TSWP.StorageArchive.text)
  return _internal_add_text();
}
inline const std::string& StorageArchive::_internal_text(int index) const {
  return text_.Get(index);
}
inline const std::string& StorageArchive::text(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.text)
  return _internal_text(index);
}
inline std::string* StorageArchive::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.text)
  return text_.Mutable(index);
}
inline void StorageArchive::set_text(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSWP.StorageArchive.text)
  text_.Mutable(index)->assign(value);
}
inline void StorageArchive::set_text(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSWP.StorageArchive.text)
  text_.Mutable(index)->assign(std::move(value));
}
inline void StorageArchive::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSWP.StorageArchive.text)
}
inline void StorageArchive::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSWP.StorageArchive.text)
}
inline std::string* StorageArchive::_internal_add_text() {
  return text_.Add();
}
inline void StorageArchive::add_text(const std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSWP.StorageArchive.text)
}
inline void StorageArchive::add_text(std::string&& value) {
  text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSWP.StorageArchive.text)
}
inline void StorageArchive::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSWP.StorageArchive.text)
}
inline void StorageArchive::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSWP.StorageArchive.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StorageArchive::text() const {
  // @@protoc_insertion_point(field_list:TSWP.StorageArchive.text)
  return text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StorageArchive::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.StorageArchive.text)
  return &text_;
}

// optional bool has_itext = 4 [default = false];
inline bool StorageArchive::_internal_has_has_itext() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool StorageArchive::has_has_itext() const {
  return _internal_has_has_itext();
}
inline void StorageArchive::clear_has_itext() {
  has_itext_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool StorageArchive::_internal_has_itext() const {
  return has_itext_;
}
inline bool StorageArchive::has_itext() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.has_itext)
  return _internal_has_itext();
}
inline void StorageArchive::_internal_set_has_itext(bool value) {
  _has_bits_[0] |= 0x00800000u;
  has_itext_ = value;
}
inline void StorageArchive::set_has_itext(bool value) {
  _internal_set_has_itext(value);
  // @@protoc_insertion_point(field_set:TSWP.StorageArchive.has_itext)
}

// optional bool in_document = 10 [default = false];
inline bool StorageArchive::_internal_has_in_document() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool StorageArchive::has_in_document() const {
  return _internal_has_in_document();
}
inline void StorageArchive::clear_in_document() {
  in_document_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool StorageArchive::_internal_in_document() const {
  return in_document_;
}
inline bool StorageArchive::in_document() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.in_document)
  return _internal_in_document();
}
inline void StorageArchive::_internal_set_in_document(bool value) {
  _has_bits_[0] |= 0x01000000u;
  in_document_ = value;
}
inline void StorageArchive::set_in_document(bool value) {
  _internal_set_in_document(value);
  // @@protoc_insertion_point(field_set:TSWP.StorageArchive.in_document)
}

// optional .TSWP.ObjectAttributeTable table_para_style = 5;
inline bool StorageArchive::_internal_has_table_para_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || table_para_style_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_para_style() const {
  return _internal_has_table_para_style();
}
inline void StorageArchive::clear_table_para_style() {
  if (table_para_style_ != nullptr) table_para_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_para_style() const {
  const ::TSWP::ObjectAttributeTable* p = table_para_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_para_style() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_para_style)
  return _internal_table_para_style();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_para_style(
    ::TSWP::ObjectAttributeTable* table_para_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_para_style_);
  }
  table_para_style_ = table_para_style;
  if (table_para_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_para_style)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_para_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ObjectAttributeTable* temp = table_para_style_;
  table_para_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_para_style() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_para_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ObjectAttributeTable* temp = table_para_style_;
  table_para_style_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_para_style() {
  _has_bits_[0] |= 0x00000002u;
  if (table_para_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_para_style_ = p;
  }
  return table_para_style_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_para_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_para_style)
  return _internal_mutable_table_para_style();
}
inline void StorageArchive::set_allocated_table_para_style(::TSWP::ObjectAttributeTable* table_para_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_para_style_;
  }
  if (table_para_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_para_style);
    if (message_arena != submessage_arena) {
      table_para_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_para_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_para_style_ = table_para_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_para_style)
}

// optional .TSWP.ParaDataAttributeTable table_para_data = 6;
inline bool StorageArchive::_internal_has_table_para_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || table_para_data_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_para_data() const {
  return _internal_has_table_para_data();
}
inline void StorageArchive::clear_table_para_data() {
  if (table_para_data_ != nullptr) table_para_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::ParaDataAttributeTable& StorageArchive::_internal_table_para_data() const {
  const ::TSWP::ParaDataAttributeTable* p = table_para_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ParaDataAttributeTable&>(
      ::TSWP::_ParaDataAttributeTable_default_instance_);
}
inline const ::TSWP::ParaDataAttributeTable& StorageArchive::table_para_data() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_para_data)
  return _internal_table_para_data();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_para_data(
    ::TSWP::ParaDataAttributeTable* table_para_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_para_data_);
  }
  table_para_data_ = table_para_data;
  if (table_para_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_para_data)
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::release_table_para_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::ParaDataAttributeTable* temp = table_para_data_;
  table_para_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::unsafe_arena_release_table_para_data() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_para_data)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::ParaDataAttributeTable* temp = table_para_data_;
  table_para_data_ = nullptr;
  return temp;
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::_internal_mutable_table_para_data() {
  _has_bits_[0] |= 0x00000004u;
  if (table_para_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ParaDataAttributeTable>(GetArena());
    table_para_data_ = p;
  }
  return table_para_data_;
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::mutable_table_para_data() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_para_data)
  return _internal_mutable_table_para_data();
}
inline void StorageArchive::set_allocated_table_para_data(::TSWP::ParaDataAttributeTable* table_para_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_para_data_;
  }
  if (table_para_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_para_data);
    if (message_arena != submessage_arena) {
      table_para_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_para_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  table_para_data_ = table_para_data;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_para_data)
}

// optional .TSWP.ObjectAttributeTable table_list_style = 7;
inline bool StorageArchive::_internal_has_table_list_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || table_list_style_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_list_style() const {
  return _internal_has_table_list_style();
}
inline void StorageArchive::clear_table_list_style() {
  if (table_list_style_ != nullptr) table_list_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_list_style() const {
  const ::TSWP::ObjectAttributeTable* p = table_list_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_list_style() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_list_style)
  return _internal_table_list_style();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_list_style(
    ::TSWP::ObjectAttributeTable* table_list_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_list_style_);
  }
  table_list_style_ = table_list_style;
  if (table_list_style) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_list_style)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_list_style() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::ObjectAttributeTable* temp = table_list_style_;
  table_list_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_list_style() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_list_style)
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::ObjectAttributeTable* temp = table_list_style_;
  table_list_style_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_list_style() {
  _has_bits_[0] |= 0x00000008u;
  if (table_list_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_list_style_ = p;
  }
  return table_list_style_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_list_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_list_style)
  return _internal_mutable_table_list_style();
}
inline void StorageArchive::set_allocated_table_list_style(::TSWP::ObjectAttributeTable* table_list_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_list_style_;
  }
  if (table_list_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_list_style);
    if (message_arena != submessage_arena) {
      table_list_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_list_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  table_list_style_ = table_list_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_list_style)
}

// optional .TSWP.ObjectAttributeTable table_char_style = 8;
inline bool StorageArchive::_internal_has_table_char_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || table_char_style_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_char_style() const {
  return _internal_has_table_char_style();
}
inline void StorageArchive::clear_table_char_style() {
  if (table_char_style_ != nullptr) table_char_style_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_char_style() const {
  const ::TSWP::ObjectAttributeTable* p = table_char_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_char_style() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_char_style)
  return _internal_table_char_style();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_char_style(
    ::TSWP::ObjectAttributeTable* table_char_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_char_style_);
  }
  table_char_style_ = table_char_style;
  if (table_char_style) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_char_style)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_char_style() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSWP::ObjectAttributeTable* temp = table_char_style_;
  table_char_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_char_style() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_char_style)
  _has_bits_[0] &= ~0x00000010u;
  ::TSWP::ObjectAttributeTable* temp = table_char_style_;
  table_char_style_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_char_style() {
  _has_bits_[0] |= 0x00000010u;
  if (table_char_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_char_style_ = p;
  }
  return table_char_style_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_char_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_char_style)
  return _internal_mutable_table_char_style();
}
inline void StorageArchive::set_allocated_table_char_style(::TSWP::ObjectAttributeTable* table_char_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_char_style_;
  }
  if (table_char_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_char_style);
    if (message_arena != submessage_arena) {
      table_char_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_char_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  table_char_style_ = table_char_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_char_style)
}

// optional .TSWP.ObjectAttributeTable table_attachment = 9;
inline bool StorageArchive::_internal_has_table_attachment() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || table_attachment_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_attachment() const {
  return _internal_has_table_attachment();
}
inline void StorageArchive::clear_table_attachment() {
  if (table_attachment_ != nullptr) table_attachment_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_attachment() const {
  const ::TSWP::ObjectAttributeTable* p = table_attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_attachment() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_attachment)
  return _internal_table_attachment();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_attachment(
    ::TSWP::ObjectAttributeTable* table_attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_attachment_);
  }
  table_attachment_ = table_attachment;
  if (table_attachment) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_attachment)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_attachment() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSWP::ObjectAttributeTable* temp = table_attachment_;
  table_attachment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_attachment() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_attachment)
  _has_bits_[0] &= ~0x00000020u;
  ::TSWP::ObjectAttributeTable* temp = table_attachment_;
  table_attachment_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_attachment() {
  _has_bits_[0] |= 0x00000020u;
  if (table_attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_attachment_ = p;
  }
  return table_attachment_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_attachment() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_attachment)
  return _internal_mutable_table_attachment();
}
inline void StorageArchive::set_allocated_table_attachment(::TSWP::ObjectAttributeTable* table_attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_attachment_;
  }
  if (table_attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_attachment);
    if (message_arena != submessage_arena) {
      table_attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_attachment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  table_attachment_ = table_attachment;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_attachment)
}

// optional .TSWP.ObjectAttributeTable table_smartfield = 11;
inline bool StorageArchive::_internal_has_table_smartfield() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || table_smartfield_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_smartfield() const {
  return _internal_has_table_smartfield();
}
inline void StorageArchive::clear_table_smartfield() {
  if (table_smartfield_ != nullptr) table_smartfield_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_smartfield() const {
  const ::TSWP::ObjectAttributeTable* p = table_smartfield_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_smartfield() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_smartfield)
  return _internal_table_smartfield();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_smartfield(
    ::TSWP::ObjectAttributeTable* table_smartfield) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_smartfield_);
  }
  table_smartfield_ = table_smartfield;
  if (table_smartfield) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_smartfield)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_smartfield() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::ObjectAttributeTable* temp = table_smartfield_;
  table_smartfield_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_smartfield() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_smartfield)
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::ObjectAttributeTable* temp = table_smartfield_;
  table_smartfield_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_smartfield() {
  _has_bits_[0] |= 0x00000040u;
  if (table_smartfield_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_smartfield_ = p;
  }
  return table_smartfield_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_smartfield() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_smartfield)
  return _internal_mutable_table_smartfield();
}
inline void StorageArchive::set_allocated_table_smartfield(::TSWP::ObjectAttributeTable* table_smartfield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_smartfield_;
  }
  if (table_smartfield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_smartfield);
    if (message_arena != submessage_arena) {
      table_smartfield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_smartfield, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  table_smartfield_ = table_smartfield;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_smartfield)
}

// optional .TSWP.ObjectAttributeTable table_layout_style = 12;
inline bool StorageArchive::_internal_has_table_layout_style() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || table_layout_style_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_layout_style() const {
  return _internal_has_table_layout_style();
}
inline void StorageArchive::clear_table_layout_style() {
  if (table_layout_style_ != nullptr) table_layout_style_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_layout_style() const {
  const ::TSWP::ObjectAttributeTable* p = table_layout_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_layout_style() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_layout_style)
  return _internal_table_layout_style();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_layout_style(
    ::TSWP::ObjectAttributeTable* table_layout_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_layout_style_);
  }
  table_layout_style_ = table_layout_style;
  if (table_layout_style) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_layout_style)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_layout_style() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSWP::ObjectAttributeTable* temp = table_layout_style_;
  table_layout_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_layout_style() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_layout_style)
  _has_bits_[0] &= ~0x00000080u;
  ::TSWP::ObjectAttributeTable* temp = table_layout_style_;
  table_layout_style_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_layout_style() {
  _has_bits_[0] |= 0x00000080u;
  if (table_layout_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_layout_style_ = p;
  }
  return table_layout_style_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_layout_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_layout_style)
  return _internal_mutable_table_layout_style();
}
inline void StorageArchive::set_allocated_table_layout_style(::TSWP::ObjectAttributeTable* table_layout_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_layout_style_;
  }
  if (table_layout_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_layout_style);
    if (message_arena != submessage_arena) {
      table_layout_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_layout_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  table_layout_style_ = table_layout_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_layout_style)
}

// optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
inline bool StorageArchive::_internal_has_table_para_starts() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || table_para_starts_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_para_starts() const {
  return _internal_has_table_para_starts();
}
inline void StorageArchive::clear_table_para_starts() {
  if (table_para_starts_ != nullptr) table_para_starts_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::TSWP::ParaDataAttributeTable& StorageArchive::_internal_table_para_starts() const {
  const ::TSWP::ParaDataAttributeTable* p = table_para_starts_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ParaDataAttributeTable&>(
      ::TSWP::_ParaDataAttributeTable_default_instance_);
}
inline const ::TSWP::ParaDataAttributeTable& StorageArchive::table_para_starts() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_para_starts)
  return _internal_table_para_starts();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_para_starts(
    ::TSWP::ParaDataAttributeTable* table_para_starts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_para_starts_);
  }
  table_para_starts_ = table_para_starts;
  if (table_para_starts) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_para_starts)
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::release_table_para_starts() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSWP::ParaDataAttributeTable* temp = table_para_starts_;
  table_para_starts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::unsafe_arena_release_table_para_starts() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_para_starts)
  _has_bits_[0] &= ~0x00000100u;
  ::TSWP::ParaDataAttributeTable* temp = table_para_starts_;
  table_para_starts_ = nullptr;
  return temp;
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::_internal_mutable_table_para_starts() {
  _has_bits_[0] |= 0x00000100u;
  if (table_para_starts_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ParaDataAttributeTable>(GetArena());
    table_para_starts_ = p;
  }
  return table_para_starts_;
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::mutable_table_para_starts() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_para_starts)
  return _internal_mutable_table_para_starts();
}
inline void StorageArchive::set_allocated_table_para_starts(::TSWP::ParaDataAttributeTable* table_para_starts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_para_starts_;
  }
  if (table_para_starts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_para_starts);
    if (message_arena != submessage_arena) {
      table_para_starts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_para_starts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  table_para_starts_ = table_para_starts;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_para_starts)
}

// optional .TSWP.ObjectAttributeTable table_bookmark = 15;
inline bool StorageArchive::_internal_has_table_bookmark() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || table_bookmark_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_bookmark() const {
  return _internal_has_table_bookmark();
}
inline void StorageArchive::clear_table_bookmark() {
  if (table_bookmark_ != nullptr) table_bookmark_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_bookmark() const {
  const ::TSWP::ObjectAttributeTable* p = table_bookmark_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_bookmark() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_bookmark)
  return _internal_table_bookmark();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_bookmark(
    ::TSWP::ObjectAttributeTable* table_bookmark) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_bookmark_);
  }
  table_bookmark_ = table_bookmark;
  if (table_bookmark) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_bookmark)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_bookmark() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSWP::ObjectAttributeTable* temp = table_bookmark_;
  table_bookmark_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_bookmark() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_bookmark)
  _has_bits_[0] &= ~0x00000200u;
  ::TSWP::ObjectAttributeTable* temp = table_bookmark_;
  table_bookmark_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_bookmark() {
  _has_bits_[0] |= 0x00000200u;
  if (table_bookmark_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_bookmark_ = p;
  }
  return table_bookmark_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_bookmark() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_bookmark)
  return _internal_mutable_table_bookmark();
}
inline void StorageArchive::set_allocated_table_bookmark(::TSWP::ObjectAttributeTable* table_bookmark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_bookmark_;
  }
  if (table_bookmark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_bookmark);
    if (message_arena != submessage_arena) {
      table_bookmark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_bookmark, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  table_bookmark_ = table_bookmark;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_bookmark)
}

// optional .TSWP.ObjectAttributeTable table_footnote = 16;
inline bool StorageArchive::_internal_has_table_footnote() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || table_footnote_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_footnote() const {
  return _internal_has_table_footnote();
}
inline void StorageArchive::clear_table_footnote() {
  if (table_footnote_ != nullptr) table_footnote_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_footnote() const {
  const ::TSWP::ObjectAttributeTable* p = table_footnote_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_footnote() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_footnote)
  return _internal_table_footnote();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_footnote(
    ::TSWP::ObjectAttributeTable* table_footnote) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_footnote_);
  }
  table_footnote_ = table_footnote;
  if (table_footnote) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_footnote)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_footnote() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSWP::ObjectAttributeTable* temp = table_footnote_;
  table_footnote_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_footnote() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_footnote)
  _has_bits_[0] &= ~0x00000400u;
  ::TSWP::ObjectAttributeTable* temp = table_footnote_;
  table_footnote_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_footnote() {
  _has_bits_[0] |= 0x00000400u;
  if (table_footnote_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_footnote_ = p;
  }
  return table_footnote_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_footnote() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_footnote)
  return _internal_mutable_table_footnote();
}
inline void StorageArchive::set_allocated_table_footnote(::TSWP::ObjectAttributeTable* table_footnote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_footnote_;
  }
  if (table_footnote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_footnote);
    if (message_arena != submessage_arena) {
      table_footnote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_footnote, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  table_footnote_ = table_footnote;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_footnote)
}

// optional .TSWP.ObjectAttributeTable table_section = 17;
inline bool StorageArchive::_internal_has_table_section() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || table_section_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_section() const {
  return _internal_has_table_section();
}
inline void StorageArchive::clear_table_section() {
  if (table_section_ != nullptr) table_section_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_section() const {
  const ::TSWP::ObjectAttributeTable* p = table_section_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_section() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_section)
  return _internal_table_section();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_section(
    ::TSWP::ObjectAttributeTable* table_section) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_section_);
  }
  table_section_ = table_section;
  if (table_section) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_section)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_section() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSWP::ObjectAttributeTable* temp = table_section_;
  table_section_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_section() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_section)
  _has_bits_[0] &= ~0x00000800u;
  ::TSWP::ObjectAttributeTable* temp = table_section_;
  table_section_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_section() {
  _has_bits_[0] |= 0x00000800u;
  if (table_section_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_section_ = p;
  }
  return table_section_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_section() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_section)
  return _internal_mutable_table_section();
}
inline void StorageArchive::set_allocated_table_section(::TSWP::ObjectAttributeTable* table_section) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_section_;
  }
  if (table_section) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_section);
    if (message_arena != submessage_arena) {
      table_section = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_section, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  table_section_ = table_section;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_section)
}

// optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
inline bool StorageArchive::_internal_has_table_rubyfield() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || table_rubyfield_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_rubyfield() const {
  return _internal_has_table_rubyfield();
}
inline void StorageArchive::clear_table_rubyfield() {
  if (table_rubyfield_ != nullptr) table_rubyfield_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_rubyfield() const {
  const ::TSWP::ObjectAttributeTable* p = table_rubyfield_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_rubyfield() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_rubyfield)
  return _internal_table_rubyfield();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_rubyfield(
    ::TSWP::ObjectAttributeTable* table_rubyfield) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_rubyfield_);
  }
  table_rubyfield_ = table_rubyfield;
  if (table_rubyfield) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_rubyfield)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_rubyfield() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSWP::ObjectAttributeTable* temp = table_rubyfield_;
  table_rubyfield_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_rubyfield() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_rubyfield)
  _has_bits_[0] &= ~0x00001000u;
  ::TSWP::ObjectAttributeTable* temp = table_rubyfield_;
  table_rubyfield_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_rubyfield() {
  _has_bits_[0] |= 0x00001000u;
  if (table_rubyfield_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_rubyfield_ = p;
  }
  return table_rubyfield_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_rubyfield() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_rubyfield)
  return _internal_mutable_table_rubyfield();
}
inline void StorageArchive::set_allocated_table_rubyfield(::TSWP::ObjectAttributeTable* table_rubyfield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_rubyfield_;
  }
  if (table_rubyfield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_rubyfield);
    if (message_arena != submessage_arena) {
      table_rubyfield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_rubyfield, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  table_rubyfield_ = table_rubyfield;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_rubyfield)
}

// optional .TSWP.StringAttributeTable table_language = 19;
inline bool StorageArchive::_internal_has_table_language() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || table_language_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_language() const {
  return _internal_has_table_language();
}
inline void StorageArchive::clear_table_language() {
  if (table_language_ != nullptr) table_language_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::TSWP::StringAttributeTable& StorageArchive::_internal_table_language() const {
  const ::TSWP::StringAttributeTable* p = table_language_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StringAttributeTable&>(
      ::TSWP::_StringAttributeTable_default_instance_);
}
inline const ::TSWP::StringAttributeTable& StorageArchive::table_language() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_language)
  return _internal_table_language();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_language(
    ::TSWP::StringAttributeTable* table_language) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_language_);
  }
  table_language_ = table_language;
  if (table_language) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_language)
}
inline ::TSWP::StringAttributeTable* StorageArchive::release_table_language() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSWP::StringAttributeTable* temp = table_language_;
  table_language_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::StringAttributeTable* StorageArchive::unsafe_arena_release_table_language() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_language)
  _has_bits_[0] &= ~0x00002000u;
  ::TSWP::StringAttributeTable* temp = table_language_;
  table_language_ = nullptr;
  return temp;
}
inline ::TSWP::StringAttributeTable* StorageArchive::_internal_mutable_table_language() {
  _has_bits_[0] |= 0x00002000u;
  if (table_language_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StringAttributeTable>(GetArena());
    table_language_ = p;
  }
  return table_language_;
}
inline ::TSWP::StringAttributeTable* StorageArchive::mutable_table_language() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_language)
  return _internal_mutable_table_language();
}
inline void StorageArchive::set_allocated_table_language(::TSWP::StringAttributeTable* table_language) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_language_;
  }
  if (table_language) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_language);
    if (message_arena != submessage_arena) {
      table_language = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_language, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  table_language_ = table_language;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_language)
}

// optional .TSWP.StringAttributeTable table_dictation = 20;
inline bool StorageArchive::_internal_has_table_dictation() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || table_dictation_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_dictation() const {
  return _internal_has_table_dictation();
}
inline void StorageArchive::clear_table_dictation() {
  if (table_dictation_ != nullptr) table_dictation_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::TSWP::StringAttributeTable& StorageArchive::_internal_table_dictation() const {
  const ::TSWP::StringAttributeTable* p = table_dictation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StringAttributeTable&>(
      ::TSWP::_StringAttributeTable_default_instance_);
}
inline const ::TSWP::StringAttributeTable& StorageArchive::table_dictation() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_dictation)
  return _internal_table_dictation();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_dictation(
    ::TSWP::StringAttributeTable* table_dictation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_dictation_);
  }
  table_dictation_ = table_dictation;
  if (table_dictation) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_dictation)
}
inline ::TSWP::StringAttributeTable* StorageArchive::release_table_dictation() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSWP::StringAttributeTable* temp = table_dictation_;
  table_dictation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::StringAttributeTable* StorageArchive::unsafe_arena_release_table_dictation() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_dictation)
  _has_bits_[0] &= ~0x00004000u;
  ::TSWP::StringAttributeTable* temp = table_dictation_;
  table_dictation_ = nullptr;
  return temp;
}
inline ::TSWP::StringAttributeTable* StorageArchive::_internal_mutable_table_dictation() {
  _has_bits_[0] |= 0x00004000u;
  if (table_dictation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StringAttributeTable>(GetArena());
    table_dictation_ = p;
  }
  return table_dictation_;
}
inline ::TSWP::StringAttributeTable* StorageArchive::mutable_table_dictation() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_dictation)
  return _internal_mutable_table_dictation();
}
inline void StorageArchive::set_allocated_table_dictation(::TSWP::StringAttributeTable* table_dictation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_dictation_;
  }
  if (table_dictation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_dictation);
    if (message_arena != submessage_arena) {
      table_dictation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_dictation, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  table_dictation_ = table_dictation;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_dictation)
}

// optional .TSWP.ObjectAttributeTable table_insertion = 21;
inline bool StorageArchive::_internal_has_table_insertion() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || table_insertion_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_insertion() const {
  return _internal_has_table_insertion();
}
inline void StorageArchive::clear_table_insertion() {
  if (table_insertion_ != nullptr) table_insertion_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_insertion() const {
  const ::TSWP::ObjectAttributeTable* p = table_insertion_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_insertion() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_insertion)
  return _internal_table_insertion();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_insertion(
    ::TSWP::ObjectAttributeTable* table_insertion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_insertion_);
  }
  table_insertion_ = table_insertion;
  if (table_insertion) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_insertion)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_insertion() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSWP::ObjectAttributeTable* temp = table_insertion_;
  table_insertion_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_insertion() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_insertion)
  _has_bits_[0] &= ~0x00008000u;
  ::TSWP::ObjectAttributeTable* temp = table_insertion_;
  table_insertion_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_insertion() {
  _has_bits_[0] |= 0x00008000u;
  if (table_insertion_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_insertion_ = p;
  }
  return table_insertion_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_insertion() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_insertion)
  return _internal_mutable_table_insertion();
}
inline void StorageArchive::set_allocated_table_insertion(::TSWP::ObjectAttributeTable* table_insertion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_insertion_;
  }
  if (table_insertion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_insertion);
    if (message_arena != submessage_arena) {
      table_insertion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_insertion, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  table_insertion_ = table_insertion;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_insertion)
}

// optional .TSWP.ObjectAttributeTable table_deletion = 22;
inline bool StorageArchive::_internal_has_table_deletion() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || table_deletion_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_deletion() const {
  return _internal_has_table_deletion();
}
inline void StorageArchive::clear_table_deletion() {
  if (table_deletion_ != nullptr) table_deletion_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_deletion() const {
  const ::TSWP::ObjectAttributeTable* p = table_deletion_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_deletion() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_deletion)
  return _internal_table_deletion();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_deletion(
    ::TSWP::ObjectAttributeTable* table_deletion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_deletion_);
  }
  table_deletion_ = table_deletion;
  if (table_deletion) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_deletion)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_deletion() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSWP::ObjectAttributeTable* temp = table_deletion_;
  table_deletion_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_deletion() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_deletion)
  _has_bits_[0] &= ~0x00010000u;
  ::TSWP::ObjectAttributeTable* temp = table_deletion_;
  table_deletion_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_deletion() {
  _has_bits_[0] |= 0x00010000u;
  if (table_deletion_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_deletion_ = p;
  }
  return table_deletion_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_deletion() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_deletion)
  return _internal_mutable_table_deletion();
}
inline void StorageArchive::set_allocated_table_deletion(::TSWP::ObjectAttributeTable* table_deletion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_deletion_;
  }
  if (table_deletion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_deletion);
    if (message_arena != submessage_arena) {
      table_deletion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_deletion, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  table_deletion_ = table_deletion;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_deletion)
}

// optional .TSWP.ObjectAttributeTable table_highlight = 23;
inline bool StorageArchive::_internal_has_table_highlight() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || table_highlight_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_highlight() const {
  return _internal_has_table_highlight();
}
inline void StorageArchive::clear_table_highlight() {
  if (table_highlight_ != nullptr) table_highlight_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_highlight() const {
  const ::TSWP::ObjectAttributeTable* p = table_highlight_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_highlight() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_highlight)
  return _internal_table_highlight();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_highlight(
    ::TSWP::ObjectAttributeTable* table_highlight) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_highlight_);
  }
  table_highlight_ = table_highlight;
  if (table_highlight) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_highlight)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_highlight() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSWP::ObjectAttributeTable* temp = table_highlight_;
  table_highlight_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_highlight() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_highlight)
  _has_bits_[0] &= ~0x00020000u;
  ::TSWP::ObjectAttributeTable* temp = table_highlight_;
  table_highlight_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_highlight() {
  _has_bits_[0] |= 0x00020000u;
  if (table_highlight_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_highlight_ = p;
  }
  return table_highlight_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_highlight() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_highlight)
  return _internal_mutable_table_highlight();
}
inline void StorageArchive::set_allocated_table_highlight(::TSWP::ObjectAttributeTable* table_highlight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_highlight_;
  }
  if (table_highlight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_highlight);
    if (message_arena != submessage_arena) {
      table_highlight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_highlight, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  table_highlight_ = table_highlight;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_highlight)
}

// optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
inline bool StorageArchive::_internal_has_table_para_bidi() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || table_para_bidi_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_para_bidi() const {
  return _internal_has_table_para_bidi();
}
inline void StorageArchive::clear_table_para_bidi() {
  if (table_para_bidi_ != nullptr) table_para_bidi_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::TSWP::ParaDataAttributeTable& StorageArchive::_internal_table_para_bidi() const {
  const ::TSWP::ParaDataAttributeTable* p = table_para_bidi_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ParaDataAttributeTable&>(
      ::TSWP::_ParaDataAttributeTable_default_instance_);
}
inline const ::TSWP::ParaDataAttributeTable& StorageArchive::table_para_bidi() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_para_bidi)
  return _internal_table_para_bidi();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_para_bidi(
    ::TSWP::ParaDataAttributeTable* table_para_bidi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_para_bidi_);
  }
  table_para_bidi_ = table_para_bidi;
  if (table_para_bidi) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_para_bidi)
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::release_table_para_bidi() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSWP::ParaDataAttributeTable* temp = table_para_bidi_;
  table_para_bidi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::unsafe_arena_release_table_para_bidi() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_para_bidi)
  _has_bits_[0] &= ~0x00040000u;
  ::TSWP::ParaDataAttributeTable* temp = table_para_bidi_;
  table_para_bidi_ = nullptr;
  return temp;
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::_internal_mutable_table_para_bidi() {
  _has_bits_[0] |= 0x00040000u;
  if (table_para_bidi_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ParaDataAttributeTable>(GetArena());
    table_para_bidi_ = p;
  }
  return table_para_bidi_;
}
inline ::TSWP::ParaDataAttributeTable* StorageArchive::mutable_table_para_bidi() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_para_bidi)
  return _internal_mutable_table_para_bidi();
}
inline void StorageArchive::set_allocated_table_para_bidi(::TSWP::ParaDataAttributeTable* table_para_bidi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_para_bidi_;
  }
  if (table_para_bidi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_para_bidi);
    if (message_arena != submessage_arena) {
      table_para_bidi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_para_bidi, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  table_para_bidi_ = table_para_bidi;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_para_bidi)
}

// optional .TSWP.OverlappingFieldAttributeTable table_overlapping_highlight = 25;
inline bool StorageArchive::_internal_has_table_overlapping_highlight() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || table_overlapping_highlight_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_overlapping_highlight() const {
  return _internal_has_table_overlapping_highlight();
}
inline void StorageArchive::clear_table_overlapping_highlight() {
  if (table_overlapping_highlight_ != nullptr) table_overlapping_highlight_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::TSWP::OverlappingFieldAttributeTable& StorageArchive::_internal_table_overlapping_highlight() const {
  const ::TSWP::OverlappingFieldAttributeTable* p = table_overlapping_highlight_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::OverlappingFieldAttributeTable&>(
      ::TSWP::_OverlappingFieldAttributeTable_default_instance_);
}
inline const ::TSWP::OverlappingFieldAttributeTable& StorageArchive::table_overlapping_highlight() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_overlapping_highlight)
  return _internal_table_overlapping_highlight();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_overlapping_highlight(
    ::TSWP::OverlappingFieldAttributeTable* table_overlapping_highlight) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_overlapping_highlight_);
  }
  table_overlapping_highlight_ = table_overlapping_highlight;
  if (table_overlapping_highlight) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_overlapping_highlight)
}
inline ::TSWP::OverlappingFieldAttributeTable* StorageArchive::release_table_overlapping_highlight() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSWP::OverlappingFieldAttributeTable* temp = table_overlapping_highlight_;
  table_overlapping_highlight_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::OverlappingFieldAttributeTable* StorageArchive::unsafe_arena_release_table_overlapping_highlight() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_overlapping_highlight)
  _has_bits_[0] &= ~0x00080000u;
  ::TSWP::OverlappingFieldAttributeTable* temp = table_overlapping_highlight_;
  table_overlapping_highlight_ = nullptr;
  return temp;
}
inline ::TSWP::OverlappingFieldAttributeTable* StorageArchive::_internal_mutable_table_overlapping_highlight() {
  _has_bits_[0] |= 0x00080000u;
  if (table_overlapping_highlight_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::OverlappingFieldAttributeTable>(GetArena());
    table_overlapping_highlight_ = p;
  }
  return table_overlapping_highlight_;
}
inline ::TSWP::OverlappingFieldAttributeTable* StorageArchive::mutable_table_overlapping_highlight() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_overlapping_highlight)
  return _internal_mutable_table_overlapping_highlight();
}
inline void StorageArchive::set_allocated_table_overlapping_highlight(::TSWP::OverlappingFieldAttributeTable* table_overlapping_highlight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_overlapping_highlight_;
  }
  if (table_overlapping_highlight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_overlapping_highlight);
    if (message_arena != submessage_arena) {
      table_overlapping_highlight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_overlapping_highlight, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  table_overlapping_highlight_ = table_overlapping_highlight;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_overlapping_highlight)
}

// optional .TSWP.OverlappingFieldAttributeTable table_pencil_annotation = 26;
inline bool StorageArchive::_internal_has_table_pencil_annotation() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || table_pencil_annotation_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_pencil_annotation() const {
  return _internal_has_table_pencil_annotation();
}
inline void StorageArchive::clear_table_pencil_annotation() {
  if (table_pencil_annotation_ != nullptr) table_pencil_annotation_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::TSWP::OverlappingFieldAttributeTable& StorageArchive::_internal_table_pencil_annotation() const {
  const ::TSWP::OverlappingFieldAttributeTable* p = table_pencil_annotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::OverlappingFieldAttributeTable&>(
      ::TSWP::_OverlappingFieldAttributeTable_default_instance_);
}
inline const ::TSWP::OverlappingFieldAttributeTable& StorageArchive::table_pencil_annotation() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_pencil_annotation)
  return _internal_table_pencil_annotation();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_pencil_annotation(
    ::TSWP::OverlappingFieldAttributeTable* table_pencil_annotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_pencil_annotation_);
  }
  table_pencil_annotation_ = table_pencil_annotation;
  if (table_pencil_annotation) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_pencil_annotation)
}
inline ::TSWP::OverlappingFieldAttributeTable* StorageArchive::release_table_pencil_annotation() {
  _has_bits_[0] &= ~0x00100000u;
  ::TSWP::OverlappingFieldAttributeTable* temp = table_pencil_annotation_;
  table_pencil_annotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::OverlappingFieldAttributeTable* StorageArchive::unsafe_arena_release_table_pencil_annotation() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_pencil_annotation)
  _has_bits_[0] &= ~0x00100000u;
  ::TSWP::OverlappingFieldAttributeTable* temp = table_pencil_annotation_;
  table_pencil_annotation_ = nullptr;
  return temp;
}
inline ::TSWP::OverlappingFieldAttributeTable* StorageArchive::_internal_mutable_table_pencil_annotation() {
  _has_bits_[0] |= 0x00100000u;
  if (table_pencil_annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::OverlappingFieldAttributeTable>(GetArena());
    table_pencil_annotation_ = p;
  }
  return table_pencil_annotation_;
}
inline ::TSWP::OverlappingFieldAttributeTable* StorageArchive::mutable_table_pencil_annotation() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_pencil_annotation)
  return _internal_mutable_table_pencil_annotation();
}
inline void StorageArchive::set_allocated_table_pencil_annotation(::TSWP::OverlappingFieldAttributeTable* table_pencil_annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_pencil_annotation_;
  }
  if (table_pencil_annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_pencil_annotation);
    if (message_arena != submessage_arena) {
      table_pencil_annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_pencil_annotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  table_pencil_annotation_ = table_pencil_annotation;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_pencil_annotation)
}

// optional .TSWP.ObjectAttributeTable table_tatechuyoko = 27;
inline bool StorageArchive::_internal_has_table_tatechuyoko() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || table_tatechuyoko_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_tatechuyoko() const {
  return _internal_has_table_tatechuyoko();
}
inline void StorageArchive::clear_table_tatechuyoko() {
  if (table_tatechuyoko_ != nullptr) table_tatechuyoko_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_tatechuyoko() const {
  const ::TSWP::ObjectAttributeTable* p = table_tatechuyoko_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_tatechuyoko() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_tatechuyoko)
  return _internal_table_tatechuyoko();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_tatechuyoko(
    ::TSWP::ObjectAttributeTable* table_tatechuyoko) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_tatechuyoko_);
  }
  table_tatechuyoko_ = table_tatechuyoko;
  if (table_tatechuyoko) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_tatechuyoko)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_tatechuyoko() {
  _has_bits_[0] &= ~0x00200000u;
  ::TSWP::ObjectAttributeTable* temp = table_tatechuyoko_;
  table_tatechuyoko_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_tatechuyoko() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_tatechuyoko)
  _has_bits_[0] &= ~0x00200000u;
  ::TSWP::ObjectAttributeTable* temp = table_tatechuyoko_;
  table_tatechuyoko_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_tatechuyoko() {
  _has_bits_[0] |= 0x00200000u;
  if (table_tatechuyoko_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_tatechuyoko_ = p;
  }
  return table_tatechuyoko_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_tatechuyoko() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_tatechuyoko)
  return _internal_mutable_table_tatechuyoko();
}
inline void StorageArchive::set_allocated_table_tatechuyoko(::TSWP::ObjectAttributeTable* table_tatechuyoko) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_tatechuyoko_;
  }
  if (table_tatechuyoko) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_tatechuyoko);
    if (message_arena != submessage_arena) {
      table_tatechuyoko = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_tatechuyoko, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  table_tatechuyoko_ = table_tatechuyoko;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_tatechuyoko)
}

// optional .TSWP.ObjectAttributeTable table_drop_cap_style = 28;
inline bool StorageArchive::_internal_has_table_drop_cap_style() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || table_drop_cap_style_ != nullptr);
  return value;
}
inline bool StorageArchive::has_table_drop_cap_style() const {
  return _internal_has_table_drop_cap_style();
}
inline void StorageArchive::clear_table_drop_cap_style() {
  if (table_drop_cap_style_ != nullptr) table_drop_cap_style_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::_internal_table_drop_cap_style() const {
  const ::TSWP::ObjectAttributeTable* p = table_drop_cap_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ObjectAttributeTable&>(
      ::TSWP::_ObjectAttributeTable_default_instance_);
}
inline const ::TSWP::ObjectAttributeTable& StorageArchive::table_drop_cap_style() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageArchive.table_drop_cap_style)
  return _internal_table_drop_cap_style();
}
inline void StorageArchive::unsafe_arena_set_allocated_table_drop_cap_style(
    ::TSWP::ObjectAttributeTable* table_drop_cap_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_drop_cap_style_);
  }
  table_drop_cap_style_ = table_drop_cap_style;
  if (table_drop_cap_style) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageArchive.table_drop_cap_style)
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::release_table_drop_cap_style() {
  _has_bits_[0] &= ~0x00400000u;
  ::TSWP::ObjectAttributeTable* temp = table_drop_cap_style_;
  table_drop_cap_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::unsafe_arena_release_table_drop_cap_style() {
  // @@protoc_insertion_point(field_release:TSWP.StorageArchive.table_drop_cap_style)
  _has_bits_[0] &= ~0x00400000u;
  ::TSWP::ObjectAttributeTable* temp = table_drop_cap_style_;
  table_drop_cap_style_ = nullptr;
  return temp;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::_internal_mutable_table_drop_cap_style() {
  _has_bits_[0] |= 0x00400000u;
  if (table_drop_cap_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ObjectAttributeTable>(GetArena());
    table_drop_cap_style_ = p;
  }
  return table_drop_cap_style_;
}
inline ::TSWP::ObjectAttributeTable* StorageArchive::mutable_table_drop_cap_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageArchive.table_drop_cap_style)
  return _internal_mutable_table_drop_cap_style();
}
inline void StorageArchive::set_allocated_table_drop_cap_style(::TSWP::ObjectAttributeTable* table_drop_cap_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_drop_cap_style_;
  }
  if (table_drop_cap_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_drop_cap_style);
    if (message_arena != submessage_arena) {
      table_drop_cap_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_drop_cap_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  table_drop_cap_style_ = table_drop_cap_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageArchive.table_drop_cap_style)
}

// -------------------------------------------------------------------

// HighlightArchive

// optional .TSP.Reference commentStorage = 1;
inline bool HighlightArchive::_internal_has_commentstorage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || commentstorage_ != nullptr);
  return value;
}
inline bool HighlightArchive::has_commentstorage() const {
  return _internal_has_commentstorage();
}
inline const ::TSP::Reference& HighlightArchive::_internal_commentstorage() const {
  const ::TSP::Reference* p = commentstorage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& HighlightArchive::commentstorage() const {
  // @@protoc_insertion_point(field_get:TSWP.HighlightArchive.commentStorage)
  return _internal_commentstorage();
}
inline void HighlightArchive::unsafe_arena_set_allocated_commentstorage(
    ::TSP::Reference* commentstorage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commentstorage_);
  }
  commentstorage_ = commentstorage;
  if (commentstorage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.HighlightArchive.commentStorage)
}
inline ::TSP::Reference* HighlightArchive::release_commentstorage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = commentstorage_;
  commentstorage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* HighlightArchive::unsafe_arena_release_commentstorage() {
  // @@protoc_insertion_point(field_release:TSWP.HighlightArchive.commentStorage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = commentstorage_;
  commentstorage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* HighlightArchive::_internal_mutable_commentstorage() {
  _has_bits_[0] |= 0x00000002u;
  if (commentstorage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    commentstorage_ = p;
  }
  return commentstorage_;
}
inline ::TSP::Reference* HighlightArchive::mutable_commentstorage() {
  // @@protoc_insertion_point(field_mutable:TSWP.HighlightArchive.commentStorage)
  return _internal_mutable_commentstorage();
}
inline void HighlightArchive::set_allocated_commentstorage(::TSP::Reference* commentstorage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(commentstorage_);
  }
  if (commentstorage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commentstorage)->GetArena();
    if (message_arena != submessage_arena) {
      commentstorage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commentstorage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  commentstorage_ = commentstorage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.HighlightArchive.commentStorage)
}

// optional string text_attribute_uuid_string = 2;
inline bool HighlightArchive::_internal_has_text_attribute_uuid_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HighlightArchive::has_text_attribute_uuid_string() const {
  return _internal_has_text_attribute_uuid_string();
}
inline void HighlightArchive::clear_text_attribute_uuid_string() {
  text_attribute_uuid_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HighlightArchive::text_attribute_uuid_string() const {
  // @@protoc_insertion_point(field_get:TSWP.HighlightArchive.text_attribute_uuid_string)
  return _internal_text_attribute_uuid_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void HighlightArchive::set_text_attribute_uuid_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.HighlightArchive.text_attribute_uuid_string)
}
inline std::string* HighlightArchive::mutable_text_attribute_uuid_string() {
  // @@protoc_insertion_point(field_mutable:TSWP.HighlightArchive.text_attribute_uuid_string)
  return _internal_mutable_text_attribute_uuid_string();
}
inline const std::string& HighlightArchive::_internal_text_attribute_uuid_string() const {
  return text_attribute_uuid_string_.Get();
}
inline void HighlightArchive::_internal_set_text_attribute_uuid_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* HighlightArchive::_internal_mutable_text_attribute_uuid_string() {
  _has_bits_[0] |= 0x00000001u;
  return text_attribute_uuid_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HighlightArchive::release_text_attribute_uuid_string() {
  // @@protoc_insertion_point(field_release:TSWP.HighlightArchive.text_attribute_uuid_string)
  if (!_internal_has_text_attribute_uuid_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_attribute_uuid_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HighlightArchive::set_allocated_text_attribute_uuid_string(std::string* text_attribute_uuid_string) {
  if (text_attribute_uuid_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_attribute_uuid_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_attribute_uuid_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.HighlightArchive.text_attribute_uuid_string)
}

// -------------------------------------------------------------------

// PencilAnnotationArchive

// optional .TSP.Reference pencil_annotation_storage = 1;
inline bool PencilAnnotationArchive::_internal_has_pencil_annotation_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pencil_annotation_storage_ != nullptr);
  return value;
}
inline bool PencilAnnotationArchive::has_pencil_annotation_storage() const {
  return _internal_has_pencil_annotation_storage();
}
inline const ::TSP::Reference& PencilAnnotationArchive::_internal_pencil_annotation_storage() const {
  const ::TSP::Reference* p = pencil_annotation_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PencilAnnotationArchive::pencil_annotation_storage() const {
  // @@protoc_insertion_point(field_get:TSWP.PencilAnnotationArchive.pencil_annotation_storage)
  return _internal_pencil_annotation_storage();
}
inline void PencilAnnotationArchive::unsafe_arena_set_allocated_pencil_annotation_storage(
    ::TSP::Reference* pencil_annotation_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_storage_);
  }
  pencil_annotation_storage_ = pencil_annotation_storage;
  if (pencil_annotation_storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.PencilAnnotationArchive.pencil_annotation_storage)
}
inline ::TSP::Reference* PencilAnnotationArchive::release_pencil_annotation_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = pencil_annotation_storage_;
  pencil_annotation_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PencilAnnotationArchive::unsafe_arena_release_pencil_annotation_storage() {
  // @@protoc_insertion_point(field_release:TSWP.PencilAnnotationArchive.pencil_annotation_storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = pencil_annotation_storage_;
  pencil_annotation_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PencilAnnotationArchive::_internal_mutable_pencil_annotation_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (pencil_annotation_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    pencil_annotation_storage_ = p;
  }
  return pencil_annotation_storage_;
}
inline ::TSP::Reference* PencilAnnotationArchive::mutable_pencil_annotation_storage() {
  // @@protoc_insertion_point(field_mutable:TSWP.PencilAnnotationArchive.pencil_annotation_storage)
  return _internal_mutable_pencil_annotation_storage();
}
inline void PencilAnnotationArchive::set_allocated_pencil_annotation_storage(::TSP::Reference* pencil_annotation_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_storage_);
  }
  if (pencil_annotation_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_storage)->GetArena();
    if (message_arena != submessage_arena) {
      pencil_annotation_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pencil_annotation_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pencil_annotation_storage_ = pencil_annotation_storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.PencilAnnotationArchive.pencil_annotation_storage)
}

// optional string text_attribute_uuid_string = 2;
inline bool PencilAnnotationArchive::_internal_has_text_attribute_uuid_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PencilAnnotationArchive::has_text_attribute_uuid_string() const {
  return _internal_has_text_attribute_uuid_string();
}
inline void PencilAnnotationArchive::clear_text_attribute_uuid_string() {
  text_attribute_uuid_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PencilAnnotationArchive::text_attribute_uuid_string() const {
  // @@protoc_insertion_point(field_get:TSWP.PencilAnnotationArchive.text_attribute_uuid_string)
  return _internal_text_attribute_uuid_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PencilAnnotationArchive::set_text_attribute_uuid_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.PencilAnnotationArchive.text_attribute_uuid_string)
}
inline std::string* PencilAnnotationArchive::mutable_text_attribute_uuid_string() {
  // @@protoc_insertion_point(field_mutable:TSWP.PencilAnnotationArchive.text_attribute_uuid_string)
  return _internal_mutable_text_attribute_uuid_string();
}
inline const std::string& PencilAnnotationArchive::_internal_text_attribute_uuid_string() const {
  return text_attribute_uuid_string_.Get();
}
inline void PencilAnnotationArchive::_internal_set_text_attribute_uuid_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PencilAnnotationArchive::_internal_mutable_text_attribute_uuid_string() {
  _has_bits_[0] |= 0x00000001u;
  return text_attribute_uuid_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PencilAnnotationArchive::release_text_attribute_uuid_string() {
  // @@protoc_insertion_point(field_release:TSWP.PencilAnnotationArchive.text_attribute_uuid_string)
  if (!_internal_has_text_attribute_uuid_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_attribute_uuid_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PencilAnnotationArchive::set_allocated_text_attribute_uuid_string(std::string* text_attribute_uuid_string) {
  if (text_attribute_uuid_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_attribute_uuid_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_attribute_uuid_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.PencilAnnotationArchive.text_attribute_uuid_string)
}

// -------------------------------------------------------------------

// FontFeatureArchive

// required uint32 feature_type = 1;
inline bool FontFeatureArchive::_internal_has_feature_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FontFeatureArchive::has_feature_type() const {
  return _internal_has_feature_type();
}
inline void FontFeatureArchive::clear_feature_type() {
  feature_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FontFeatureArchive::_internal_feature_type() const {
  return feature_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FontFeatureArchive::feature_type() const {
  // @@protoc_insertion_point(field_get:TSWP.FontFeatureArchive.feature_type)
  return _internal_feature_type();
}
inline void FontFeatureArchive::_internal_set_feature_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  feature_type_ = value;
}
inline void FontFeatureArchive::set_feature_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_feature_type(value);
  // @@protoc_insertion_point(field_set:TSWP.FontFeatureArchive.feature_type)
}

// required uint32 feature_selector = 2;
inline bool FontFeatureArchive::_internal_has_feature_selector() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FontFeatureArchive::has_feature_selector() const {
  return _internal_has_feature_selector();
}
inline void FontFeatureArchive::clear_feature_selector() {
  feature_selector_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FontFeatureArchive::_internal_feature_selector() const {
  return feature_selector_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FontFeatureArchive::feature_selector() const {
  // @@protoc_insertion_point(field_get:TSWP.FontFeatureArchive.feature_selector)
  return _internal_feature_selector();
}
inline void FontFeatureArchive::_internal_set_feature_selector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  feature_selector_ = value;
}
inline void FontFeatureArchive::set_feature_selector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_feature_selector(value);
  // @@protoc_insertion_point(field_set:TSWP.FontFeatureArchive.feature_selector)
}

// -------------------------------------------------------------------

// CharacterStylePropertiesArchive

// optional bool bold = 1;
inline bool CharacterStylePropertiesArchive::_internal_has_bold() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_bold() const {
  return _internal_has_bold();
}
inline void CharacterStylePropertiesArchive::clear_bold() {
  bold_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CharacterStylePropertiesArchive::_internal_bold() const {
  return bold_;
}
inline bool CharacterStylePropertiesArchive::bold() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.bold)
  return _internal_bold();
}
inline void CharacterStylePropertiesArchive::_internal_set_bold(bool value) {
  _has_bits_[0] |= 0x00002000u;
  bold_ = value;
}
inline void CharacterStylePropertiesArchive::set_bold(bool value) {
  _internal_set_bold(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.bold)
}

// optional bool italic = 2;
inline bool CharacterStylePropertiesArchive::_internal_has_italic() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_italic() const {
  return _internal_has_italic();
}
inline void CharacterStylePropertiesArchive::clear_italic() {
  italic_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CharacterStylePropertiesArchive::_internal_italic() const {
  return italic_;
}
inline bool CharacterStylePropertiesArchive::italic() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.italic)
  return _internal_italic();
}
inline void CharacterStylePropertiesArchive::_internal_set_italic(bool value) {
  _has_bits_[0] |= 0x00004000u;
  italic_ = value;
}
inline void CharacterStylePropertiesArchive::set_italic(bool value) {
  _internal_set_italic(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.italic)
}

// optional float font_size = 3;
inline bool CharacterStylePropertiesArchive::_internal_has_font_size() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_font_size() const {
  return _internal_has_font_size();
}
inline void CharacterStylePropertiesArchive::clear_font_size() {
  font_size_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float CharacterStylePropertiesArchive::_internal_font_size() const {
  return font_size_;
}
inline float CharacterStylePropertiesArchive::font_size() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.font_size)
  return _internal_font_size();
}
inline void CharacterStylePropertiesArchive::_internal_set_font_size(float value) {
  _has_bits_[0] |= 0x00001000u;
  font_size_ = value;
}
inline void CharacterStylePropertiesArchive::set_font_size(float value) {
  _internal_set_font_size(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.font_size)
}

// optional bool font_name_null = 4;
inline bool CharacterStylePropertiesArchive::_internal_has_font_name_null() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_font_name_null() const {
  return _internal_has_font_name_null();
}
inline void CharacterStylePropertiesArchive::clear_font_name_null() {
  font_name_null_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CharacterStylePropertiesArchive::_internal_font_name_null() const {
  return font_name_null_;
}
inline bool CharacterStylePropertiesArchive::font_name_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.font_name_null)
  return _internal_font_name_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_font_name_null(bool value) {
  _has_bits_[0] |= 0x00008000u;
  font_name_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_font_name_null(bool value) {
  _internal_set_font_name_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.font_name_null)
}

// optional string font_name = 5;
inline bool CharacterStylePropertiesArchive::_internal_has_font_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_font_name() const {
  return _internal_has_font_name();
}
inline void CharacterStylePropertiesArchive::clear_font_name() {
  font_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CharacterStylePropertiesArchive::font_name() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.font_name)
  return _internal_font_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CharacterStylePropertiesArchive::set_font_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.font_name)
}
inline std::string* CharacterStylePropertiesArchive::mutable_font_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.font_name)
  return _internal_mutable_font_name();
}
inline const std::string& CharacterStylePropertiesArchive::_internal_font_name() const {
  return font_name_.Get();
}
inline void CharacterStylePropertiesArchive::_internal_set_font_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CharacterStylePropertiesArchive::_internal_mutable_font_name() {
  _has_bits_[0] |= 0x00000001u;
  return font_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CharacterStylePropertiesArchive::release_font_name() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.font_name)
  if (!_internal_has_font_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return font_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CharacterStylePropertiesArchive::set_allocated_font_name(std::string* font_name) {
  if (font_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  font_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), font_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.font_name)
}

// optional bool font_color_null = 6;
inline bool CharacterStylePropertiesArchive::_internal_has_font_color_null() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_font_color_null() const {
  return _internal_has_font_color_null();
}
inline void CharacterStylePropertiesArchive::clear_font_color_null() {
  font_color_null_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CharacterStylePropertiesArchive::_internal_font_color_null() const {
  return font_color_null_;
}
inline bool CharacterStylePropertiesArchive::font_color_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.font_color_null)
  return _internal_font_color_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_font_color_null(bool value) {
  _has_bits_[0] |= 0x00010000u;
  font_color_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_font_color_null(bool value) {
  _internal_set_font_color_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.font_color_null)
}

// optional .TSP.Color font_color = 7;
inline bool CharacterStylePropertiesArchive::_internal_has_font_color() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || font_color_ != nullptr);
  return value;
}
inline bool CharacterStylePropertiesArchive::has_font_color() const {
  return _internal_has_font_color();
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::_internal_font_color() const {
  const ::TSP::Color* p = font_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::font_color() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.font_color)
  return _internal_font_color();
}
inline void CharacterStylePropertiesArchive::unsafe_arena_set_allocated_font_color(
    ::TSP::Color* font_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_color_);
  }
  font_color_ = font_color;
  if (font_color) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStylePropertiesArchive.font_color)
}
inline ::TSP::Color* CharacterStylePropertiesArchive::release_font_color() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Color* temp = font_color_;
  font_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::unsafe_arena_release_font_color() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.font_color)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Color* temp = font_color_;
  font_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::_internal_mutable_font_color() {
  _has_bits_[0] |= 0x00000010u;
  if (font_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    font_color_ = p;
  }
  return font_color_;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::mutable_font_color() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.font_color)
  return _internal_mutable_font_color();
}
inline void CharacterStylePropertiesArchive::set_allocated_font_color(::TSP::Color* font_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_color_);
  }
  if (font_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_color)->GetArena();
    if (message_arena != submessage_arena) {
      font_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  font_color_ = font_color;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.font_color)
}

// optional bool language_null = 8;
inline bool CharacterStylePropertiesArchive::_internal_has_language_null() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_language_null() const {
  return _internal_has_language_null();
}
inline void CharacterStylePropertiesArchive::clear_language_null() {
  language_null_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool CharacterStylePropertiesArchive::_internal_language_null() const {
  return language_null_;
}
inline bool CharacterStylePropertiesArchive::language_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.language_null)
  return _internal_language_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_language_null(bool value) {
  _has_bits_[0] |= 0x01000000u;
  language_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_language_null(bool value) {
  _internal_set_language_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.language_null)
}

// optional string language = 9;
inline bool CharacterStylePropertiesArchive::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_language() const {
  return _internal_has_language();
}
inline void CharacterStylePropertiesArchive::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CharacterStylePropertiesArchive::language() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CharacterStylePropertiesArchive::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.language)
}
inline std::string* CharacterStylePropertiesArchive::mutable_language() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.language)
  return _internal_mutable_language();
}
inline const std::string& CharacterStylePropertiesArchive::_internal_language() const {
  return language_.Get();
}
inline void CharacterStylePropertiesArchive::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CharacterStylePropertiesArchive::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000002u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CharacterStylePropertiesArchive::release_language() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CharacterStylePropertiesArchive::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.language)
}

// optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
inline bool CharacterStylePropertiesArchive::_internal_has_superscript() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_superscript() const {
  return _internal_has_superscript();
}
inline void CharacterStylePropertiesArchive::clear_superscript() {
  superscript_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::TSWP::CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::_internal_superscript() const {
  return static_cast< ::TSWP::CharacterStylePropertiesArchive_SuperscriptType >(superscript_);
}
inline ::TSWP::CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::superscript() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.superscript)
  return _internal_superscript();
}
inline void CharacterStylePropertiesArchive::_internal_set_superscript(::TSWP::CharacterStylePropertiesArchive_SuperscriptType value) {
  assert(::TSWP::CharacterStylePropertiesArchive_SuperscriptType_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  superscript_ = value;
}
inline void CharacterStylePropertiesArchive::set_superscript(::TSWP::CharacterStylePropertiesArchive_SuperscriptType value) {
  _internal_set_superscript(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.superscript)
}

// optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
inline bool CharacterStylePropertiesArchive::_internal_has_underline() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_underline() const {
  return _internal_has_underline();
}
inline void CharacterStylePropertiesArchive::clear_underline() {
  underline_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::TSWP::CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::_internal_underline() const {
  return static_cast< ::TSWP::CharacterStylePropertiesArchive_UnderlineType >(underline_);
}
inline ::TSWP::CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::underline() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.underline)
  return _internal_underline();
}
inline void CharacterStylePropertiesArchive::_internal_set_underline(::TSWP::CharacterStylePropertiesArchive_UnderlineType value) {
  assert(::TSWP::CharacterStylePropertiesArchive_UnderlineType_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  underline_ = value;
}
inline void CharacterStylePropertiesArchive::set_underline(::TSWP::CharacterStylePropertiesArchive_UnderlineType value) {
  _internal_set_underline(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.underline)
}

// optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
inline bool CharacterStylePropertiesArchive::_internal_has_strikethru() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_strikethru() const {
  return _internal_has_strikethru();
}
inline void CharacterStylePropertiesArchive::clear_strikethru() {
  strikethru_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::TSWP::CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::_internal_strikethru() const {
  return static_cast< ::TSWP::CharacterStylePropertiesArchive_StrikethruType >(strikethru_);
}
inline ::TSWP::CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::strikethru() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.strikethru)
  return _internal_strikethru();
}
inline void CharacterStylePropertiesArchive::_internal_set_strikethru(::TSWP::CharacterStylePropertiesArchive_StrikethruType value) {
  assert(::TSWP::CharacterStylePropertiesArchive_StrikethruType_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  strikethru_ = value;
}
inline void CharacterStylePropertiesArchive::set_strikethru(::TSWP::CharacterStylePropertiesArchive_StrikethruType value) {
  _internal_set_strikethru(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.strikethru)
}

// optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
inline bool CharacterStylePropertiesArchive::_internal_has_capitalization() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_capitalization() const {
  return _internal_has_capitalization();
}
inline void CharacterStylePropertiesArchive::clear_capitalization() {
  capitalization_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::TSWP::CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::_internal_capitalization() const {
  return static_cast< ::TSWP::CharacterStylePropertiesArchive_CapitalizationType >(capitalization_);
}
inline ::TSWP::CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::capitalization() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.capitalization)
  return _internal_capitalization();
}
inline void CharacterStylePropertiesArchive::_internal_set_capitalization(::TSWP::CharacterStylePropertiesArchive_CapitalizationType value) {
  assert(::TSWP::CharacterStylePropertiesArchive_CapitalizationType_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  capitalization_ = value;
}
inline void CharacterStylePropertiesArchive::set_capitalization(::TSWP::CharacterStylePropertiesArchive_CapitalizationType value) {
  _internal_set_capitalization(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.capitalization)
}

// optional float baseline_shift = 14;
inline bool CharacterStylePropertiesArchive::_internal_has_baseline_shift() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_baseline_shift() const {
  return _internal_has_baseline_shift();
}
inline void CharacterStylePropertiesArchive::clear_baseline_shift() {
  baseline_shift_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float CharacterStylePropertiesArchive::_internal_baseline_shift() const {
  return baseline_shift_;
}
inline float CharacterStylePropertiesArchive::baseline_shift() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.baseline_shift)
  return _internal_baseline_shift();
}
inline void CharacterStylePropertiesArchive::_internal_set_baseline_shift(float value) {
  _has_bits_[0] |= 0x00200000u;
  baseline_shift_ = value;
}
inline void CharacterStylePropertiesArchive::set_baseline_shift(float value) {
  _internal_set_baseline_shift(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.baseline_shift)
}

// optional float kerning = 15;
inline bool CharacterStylePropertiesArchive::_internal_has_kerning() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_kerning() const {
  return _internal_has_kerning();
}
inline void CharacterStylePropertiesArchive::clear_kerning() {
  kerning_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float CharacterStylePropertiesArchive::_internal_kerning() const {
  return kerning_;
}
inline float CharacterStylePropertiesArchive::kerning() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.kerning)
  return _internal_kerning();
}
inline void CharacterStylePropertiesArchive::_internal_set_kerning(float value) {
  _has_bits_[0] |= 0x00400000u;
  kerning_ = value;
}
inline void CharacterStylePropertiesArchive::set_kerning(float value) {
  _internal_set_kerning(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.kerning)
}

// optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
inline bool CharacterStylePropertiesArchive::_internal_has_ligatures() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_ligatures() const {
  return _internal_has_ligatures();
}
inline void CharacterStylePropertiesArchive::clear_ligatures() {
  ligatures_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::TSWP::CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::_internal_ligatures() const {
  return static_cast< ::TSWP::CharacterStylePropertiesArchive_LigaturesType >(ligatures_);
}
inline ::TSWP::CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::ligatures() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.ligatures)
  return _internal_ligatures();
}
inline void CharacterStylePropertiesArchive::_internal_set_ligatures(::TSWP::CharacterStylePropertiesArchive_LigaturesType value) {
  assert(::TSWP::CharacterStylePropertiesArchive_LigaturesType_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  ligatures_ = value;
}
inline void CharacterStylePropertiesArchive::set_ligatures(::TSWP::CharacterStylePropertiesArchive_LigaturesType value) {
  _internal_set_ligatures(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.ligatures)
}

// optional bool outline_color_null = 17;
inline bool CharacterStylePropertiesArchive::_internal_has_outline_color_null() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_outline_color_null() const {
  return _internal_has_outline_color_null();
}
inline void CharacterStylePropertiesArchive::clear_outline_color_null() {
  outline_color_null_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool CharacterStylePropertiesArchive::_internal_outline_color_null() const {
  return outline_color_null_;
}
inline bool CharacterStylePropertiesArchive::outline_color_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.outline_color_null)
  return _internal_outline_color_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_outline_color_null(bool value) {
  _has_bits_[0] |= 0x02000000u;
  outline_color_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_outline_color_null(bool value) {
  _internal_set_outline_color_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.outline_color_null)
}

// optional .TSP.Color outline_color = 18;
inline bool CharacterStylePropertiesArchive::_internal_has_outline_color() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || outline_color_ != nullptr);
  return value;
}
inline bool CharacterStylePropertiesArchive::has_outline_color() const {
  return _internal_has_outline_color();
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::_internal_outline_color() const {
  const ::TSP::Color* p = outline_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::outline_color() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.outline_color)
  return _internal_outline_color();
}
inline void CharacterStylePropertiesArchive::unsafe_arena_set_allocated_outline_color(
    ::TSP::Color* outline_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color_);
  }
  outline_color_ = outline_color;
  if (outline_color) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStylePropertiesArchive.outline_color)
}
inline ::TSP::Color* CharacterStylePropertiesArchive::release_outline_color() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Color* temp = outline_color_;
  outline_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::unsafe_arena_release_outline_color() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.outline_color)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Color* temp = outline_color_;
  outline_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::_internal_mutable_outline_color() {
  _has_bits_[0] |= 0x00000020u;
  if (outline_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    outline_color_ = p;
  }
  return outline_color_;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::mutable_outline_color() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.outline_color)
  return _internal_mutable_outline_color();
}
inline void CharacterStylePropertiesArchive::set_allocated_outline_color(::TSP::Color* outline_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color_);
  }
  if (outline_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color)->GetArena();
    if (message_arena != submessage_arena) {
      outline_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outline_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  outline_color_ = outline_color;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.outline_color)
}

// optional float outline = 19;
inline bool CharacterStylePropertiesArchive::_internal_has_outline() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_outline() const {
  return _internal_has_outline();
}
inline void CharacterStylePropertiesArchive::clear_outline() {
  outline_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float CharacterStylePropertiesArchive::_internal_outline() const {
  return outline_;
}
inline float CharacterStylePropertiesArchive::outline() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.outline)
  return _internal_outline();
}
inline void CharacterStylePropertiesArchive::_internal_set_outline(float value) {
  _has_bits_[0] |= 0x10000000u;
  outline_ = value;
}
inline void CharacterStylePropertiesArchive::set_outline(float value) {
  _internal_set_outline(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.outline)
}

// optional bool shadow_null = 20;
inline bool CharacterStylePropertiesArchive::_internal_has_shadow_null() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_shadow_null() const {
  return _internal_has_shadow_null();
}
inline void CharacterStylePropertiesArchive::clear_shadow_null() {
  shadow_null_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool CharacterStylePropertiesArchive::_internal_shadow_null() const {
  return shadow_null_;
}
inline bool CharacterStylePropertiesArchive::shadow_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.shadow_null)
  return _internal_shadow_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_shadow_null(bool value) {
  _has_bits_[0] |= 0x04000000u;
  shadow_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_shadow_null(bool value) {
  _internal_set_shadow_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.shadow_null)
}

// optional .TSD.ShadowArchive shadow = 21;
inline bool CharacterStylePropertiesArchive::_internal_has_shadow() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || shadow_ != nullptr);
  return value;
}
inline bool CharacterStylePropertiesArchive::has_shadow() const {
  return _internal_has_shadow();
}
inline const ::TSD::ShadowArchive& CharacterStylePropertiesArchive::_internal_shadow() const {
  const ::TSD::ShadowArchive* p = shadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& CharacterStylePropertiesArchive::shadow() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.shadow)
  return _internal_shadow();
}
inline void CharacterStylePropertiesArchive::unsafe_arena_set_allocated_shadow(
    ::TSD::ShadowArchive* shadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadow_);
  }
  shadow_ = shadow;
  if (shadow) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStylePropertiesArchive.shadow)
}
inline ::TSD::ShadowArchive* CharacterStylePropertiesArchive::release_shadow() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::ShadowArchive* temp = shadow_;
  shadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* CharacterStylePropertiesArchive::unsafe_arena_release_shadow() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.shadow)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::ShadowArchive* temp = shadow_;
  shadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* CharacterStylePropertiesArchive::_internal_mutable_shadow() {
  _has_bits_[0] |= 0x00000040u;
  if (shadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    shadow_ = p;
  }
  return shadow_;
}
inline ::TSD::ShadowArchive* CharacterStylePropertiesArchive::mutable_shadow() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.shadow)
  return _internal_mutable_shadow();
}
inline void CharacterStylePropertiesArchive::set_allocated_shadow(::TSD::ShadowArchive* shadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadow_);
  }
  if (shadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadow)->GetArena();
    if (message_arena != submessage_arena) {
      shadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  shadow_ = shadow;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.shadow)
}

// optional bool strikethru_color_null = 22;
inline bool CharacterStylePropertiesArchive::_internal_has_strikethru_color_null() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_strikethru_color_null() const {
  return _internal_has_strikethru_color_null();
}
inline void CharacterStylePropertiesArchive::clear_strikethru_color_null() {
  strikethru_color_null_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool CharacterStylePropertiesArchive::_internal_strikethru_color_null() const {
  return strikethru_color_null_;
}
inline bool CharacterStylePropertiesArchive::strikethru_color_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.strikethru_color_null)
  return _internal_strikethru_color_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_strikethru_color_null(bool value) {
  _has_bits_[0] |= 0x08000000u;
  strikethru_color_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_strikethru_color_null(bool value) {
  _internal_set_strikethru_color_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.strikethru_color_null)
}

// optional .TSP.Color strikethru_color = 23;
inline bool CharacterStylePropertiesArchive::_internal_has_strikethru_color() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || strikethru_color_ != nullptr);
  return value;
}
inline bool CharacterStylePropertiesArchive::has_strikethru_color() const {
  return _internal_has_strikethru_color();
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::_internal_strikethru_color() const {
  const ::TSP::Color* p = strikethru_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::strikethru_color() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.strikethru_color)
  return _internal_strikethru_color();
}
inline void CharacterStylePropertiesArchive::unsafe_arena_set_allocated_strikethru_color(
    ::TSP::Color* strikethru_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strikethru_color_);
  }
  strikethru_color_ = strikethru_color;
  if (strikethru_color) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStylePropertiesArchive.strikethru_color)
}
inline ::TSP::Color* CharacterStylePropertiesArchive::release_strikethru_color() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Color* temp = strikethru_color_;
  strikethru_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::unsafe_arena_release_strikethru_color() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.strikethru_color)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Color* temp = strikethru_color_;
  strikethru_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::_internal_mutable_strikethru_color() {
  _has_bits_[0] |= 0x00000080u;
  if (strikethru_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    strikethru_color_ = p;
  }
  return strikethru_color_;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::mutable_strikethru_color() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.strikethru_color)
  return _internal_mutable_strikethru_color();
}
inline void CharacterStylePropertiesArchive::set_allocated_strikethru_color(::TSP::Color* strikethru_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(strikethru_color_);
  }
  if (strikethru_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strikethru_color)->GetArena();
    if (message_arena != submessage_arena) {
      strikethru_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strikethru_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  strikethru_color_ = strikethru_color;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.strikethru_color)
}

// optional float strikethru_width = 24;
inline bool CharacterStylePropertiesArchive::_internal_has_strikethru_width() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_strikethru_width() const {
  return _internal_has_strikethru_width();
}
inline void CharacterStylePropertiesArchive::clear_strikethru_width() {
  strikethru_width_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float CharacterStylePropertiesArchive::_internal_strikethru_width() const {
  return strikethru_width_;
}
inline float CharacterStylePropertiesArchive::strikethru_width() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.strikethru_width)
  return _internal_strikethru_width();
}
inline void CharacterStylePropertiesArchive::_internal_set_strikethru_width(float value) {
  _has_bits_[0] |= 0x20000000u;
  strikethru_width_ = value;
}
inline void CharacterStylePropertiesArchive::set_strikethru_width(float value) {
  _internal_set_strikethru_width(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.strikethru_width)
}

// optional bool background_color_null = 25;
inline bool CharacterStylePropertiesArchive::_internal_has_background_color_null() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_background_color_null() const {
  return _internal_has_background_color_null();
}
inline void CharacterStylePropertiesArchive::clear_background_color_null() {
  background_color_null_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool CharacterStylePropertiesArchive::_internal_background_color_null() const {
  return background_color_null_;
}
inline bool CharacterStylePropertiesArchive::background_color_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.background_color_null)
  return _internal_background_color_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_background_color_null(bool value) {
  _has_bits_[0] |= 0x80000000u;
  background_color_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_background_color_null(bool value) {
  _internal_set_background_color_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.background_color_null)
}

// optional .TSP.Color background_color = 26;
inline bool CharacterStylePropertiesArchive::_internal_has_background_color() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || background_color_ != nullptr);
  return value;
}
inline bool CharacterStylePropertiesArchive::has_background_color() const {
  return _internal_has_background_color();
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::_internal_background_color() const {
  const ::TSP::Color* p = background_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::background_color() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.background_color)
  return _internal_background_color();
}
inline void CharacterStylePropertiesArchive::unsafe_arena_set_allocated_background_color(
    ::TSP::Color* background_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_color_);
  }
  background_color_ = background_color;
  if (background_color) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStylePropertiesArchive.background_color)
}
inline ::TSP::Color* CharacterStylePropertiesArchive::release_background_color() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Color* temp = background_color_;
  background_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::unsafe_arena_release_background_color() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.background_color)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Color* temp = background_color_;
  background_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::_internal_mutable_background_color() {
  _has_bits_[0] |= 0x00000100u;
  if (background_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    background_color_ = p;
  }
  return background_color_;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::mutable_background_color() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.background_color)
  return _internal_mutable_background_color();
}
inline void CharacterStylePropertiesArchive::set_allocated_background_color(::TSP::Color* background_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_color_);
  }
  if (background_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_color)->GetArena();
    if (message_arena != submessage_arena) {
      background_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  background_color_ = background_color;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.background_color)
}

// optional float tracking = 27;
inline bool CharacterStylePropertiesArchive::_internal_has_tracking() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_tracking() const {
  return _internal_has_tracking();
}
inline void CharacterStylePropertiesArchive::clear_tracking() {
  tracking_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float CharacterStylePropertiesArchive::_internal_tracking() const {
  return tracking_;
}
inline float CharacterStylePropertiesArchive::tracking() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.tracking)
  return _internal_tracking();
}
inline void CharacterStylePropertiesArchive::_internal_set_tracking(float value) {
  _has_bits_[0] |= 0x40000000u;
  tracking_ = value;
}
inline void CharacterStylePropertiesArchive::set_tracking(float value) {
  _internal_set_tracking(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.tracking)
}

// optional bool underline_color_null = 28;
inline bool CharacterStylePropertiesArchive::_internal_has_underline_color_null() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_underline_color_null() const {
  return _internal_has_underline_color_null();
}
inline void CharacterStylePropertiesArchive::clear_underline_color_null() {
  underline_color_null_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool CharacterStylePropertiesArchive::_internal_underline_color_null() const {
  return underline_color_null_;
}
inline bool CharacterStylePropertiesArchive::underline_color_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.underline_color_null)
  return _internal_underline_color_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_underline_color_null(bool value) {
  _has_bits_[1] |= 0x00000001u;
  underline_color_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_underline_color_null(bool value) {
  _internal_set_underline_color_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.underline_color_null)
}

// optional .TSP.Color underline_color = 29;
inline bool CharacterStylePropertiesArchive::_internal_has_underline_color() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || underline_color_ != nullptr);
  return value;
}
inline bool CharacterStylePropertiesArchive::has_underline_color() const {
  return _internal_has_underline_color();
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::_internal_underline_color() const {
  const ::TSP::Color* p = underline_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& CharacterStylePropertiesArchive::underline_color() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.underline_color)
  return _internal_underline_color();
}
inline void CharacterStylePropertiesArchive::unsafe_arena_set_allocated_underline_color(
    ::TSP::Color* underline_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underline_color_);
  }
  underline_color_ = underline_color;
  if (underline_color) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStylePropertiesArchive.underline_color)
}
inline ::TSP::Color* CharacterStylePropertiesArchive::release_underline_color() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Color* temp = underline_color_;
  underline_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::unsafe_arena_release_underline_color() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.underline_color)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Color* temp = underline_color_;
  underline_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::_internal_mutable_underline_color() {
  _has_bits_[0] |= 0x00000200u;
  if (underline_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    underline_color_ = p;
  }
  return underline_color_;
}
inline ::TSP::Color* CharacterStylePropertiesArchive::mutable_underline_color() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.underline_color)
  return _internal_mutable_underline_color();
}
inline void CharacterStylePropertiesArchive::set_allocated_underline_color(::TSP::Color* underline_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(underline_color_);
  }
  if (underline_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underline_color)->GetArena();
    if (message_arena != submessage_arena) {
      underline_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underline_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  underline_color_ = underline_color;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.underline_color)
}

// optional float underline_width = 30;
inline bool CharacterStylePropertiesArchive::_internal_has_underline_width() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_underline_width() const {
  return _internal_has_underline_width();
}
inline void CharacterStylePropertiesArchive::clear_underline_width() {
  underline_width_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline float CharacterStylePropertiesArchive::_internal_underline_width() const {
  return underline_width_;
}
inline float CharacterStylePropertiesArchive::underline_width() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.underline_width)
  return _internal_underline_width();
}
inline void CharacterStylePropertiesArchive::_internal_set_underline_width(float value) {
  _has_bits_[1] |= 0x00000008u;
  underline_width_ = value;
}
inline void CharacterStylePropertiesArchive::set_underline_width(float value) {
  _internal_set_underline_width(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.underline_width)
}

// optional bool word_strikethru = 31;
inline bool CharacterStylePropertiesArchive::_internal_has_word_strikethru() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_word_strikethru() const {
  return _internal_has_word_strikethru();
}
inline void CharacterStylePropertiesArchive::clear_word_strikethru() {
  word_strikethru_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool CharacterStylePropertiesArchive::_internal_word_strikethru() const {
  return word_strikethru_;
}
inline bool CharacterStylePropertiesArchive::word_strikethru() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.word_strikethru)
  return _internal_word_strikethru();
}
inline void CharacterStylePropertiesArchive::_internal_set_word_strikethru(bool value) {
  _has_bits_[1] |= 0x00000002u;
  word_strikethru_ = value;
}
inline void CharacterStylePropertiesArchive::set_word_strikethru(bool value) {
  _internal_set_word_strikethru(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.word_strikethru)
}

// optional bool word_underline = 32;
inline bool CharacterStylePropertiesArchive::_internal_has_word_underline() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_word_underline() const {
  return _internal_has_word_underline();
}
inline void CharacterStylePropertiesArchive::clear_word_underline() {
  word_underline_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool CharacterStylePropertiesArchive::_internal_word_underline() const {
  return word_underline_;
}
inline bool CharacterStylePropertiesArchive::word_underline() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.word_underline)
  return _internal_word_underline();
}
inline void CharacterStylePropertiesArchive::_internal_set_word_underline(bool value) {
  _has_bits_[1] |= 0x00000004u;
  word_underline_ = value;
}
inline void CharacterStylePropertiesArchive::set_word_underline(bool value) {
  _internal_set_word_underline(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.word_underline)
}

// optional bool font_features_null = 33;
inline bool CharacterStylePropertiesArchive::_internal_has_font_features_null() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_font_features_null() const {
  return _internal_has_font_features_null();
}
inline void CharacterStylePropertiesArchive::clear_font_features_null() {
  font_features_null_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool CharacterStylePropertiesArchive::_internal_font_features_null() const {
  return font_features_null_;
}
inline bool CharacterStylePropertiesArchive::font_features_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.font_features_null)
  return _internal_font_features_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_font_features_null(bool value) {
  _has_bits_[1] |= 0x00000010u;
  font_features_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_font_features_null(bool value) {
  _internal_set_font_features_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.font_features_null)
}

// repeated .TSWP.FontFeatureArchive font_features = 34;
inline int CharacterStylePropertiesArchive::_internal_font_features_size() const {
  return font_features_.size();
}
inline int CharacterStylePropertiesArchive::font_features_size() const {
  return _internal_font_features_size();
}
inline void CharacterStylePropertiesArchive::clear_font_features() {
  font_features_.Clear();
}
inline ::TSWP::FontFeatureArchive* CharacterStylePropertiesArchive::mutable_font_features(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.font_features)
  return font_features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::FontFeatureArchive >*
CharacterStylePropertiesArchive::mutable_font_features() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.CharacterStylePropertiesArchive.font_features)
  return &font_features_;
}
inline const ::TSWP::FontFeatureArchive& CharacterStylePropertiesArchive::_internal_font_features(int index) const {
  return font_features_.Get(index);
}
inline const ::TSWP::FontFeatureArchive& CharacterStylePropertiesArchive::font_features(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.font_features)
  return _internal_font_features(index);
}
inline ::TSWP::FontFeatureArchive* CharacterStylePropertiesArchive::_internal_add_font_features() {
  return font_features_.Add();
}
inline ::TSWP::FontFeatureArchive* CharacterStylePropertiesArchive::add_font_features() {
  // @@protoc_insertion_point(field_add:TSWP.CharacterStylePropertiesArchive.font_features)
  return _internal_add_font_features();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::FontFeatureArchive >&
CharacterStylePropertiesArchive::font_features() const {
  // @@protoc_insertion_point(field_list:TSWP.CharacterStylePropertiesArchive.font_features)
  return font_features_;
}

// optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
inline bool CharacterStylePropertiesArchive::_internal_has_writing_direction() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_writing_direction() const {
  return _internal_has_writing_direction();
}
inline void CharacterStylePropertiesArchive::clear_writing_direction() {
  writing_direction_ = -1;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::TSWP::WritingDirectionType CharacterStylePropertiesArchive::_internal_writing_direction() const {
  return static_cast< ::TSWP::WritingDirectionType >(writing_direction_);
}
inline ::TSWP::WritingDirectionType CharacterStylePropertiesArchive::writing_direction() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.writing_direction)
  return _internal_writing_direction();
}
inline void CharacterStylePropertiesArchive::_internal_set_writing_direction(::TSWP::WritingDirectionType value) {
  assert(::TSWP::WritingDirectionType_IsValid(value));
  _has_bits_[1] |= 0x00002000u;
  writing_direction_ = value;
}
inline void CharacterStylePropertiesArchive::set_writing_direction(::TSWP::WritingDirectionType value) {
  _internal_set_writing_direction(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.writing_direction)
}

// optional bool emphasis_marks_null = 36;
inline bool CharacterStylePropertiesArchive::_internal_has_emphasis_marks_null() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_emphasis_marks_null() const {
  return _internal_has_emphasis_marks_null();
}
inline void CharacterStylePropertiesArchive::clear_emphasis_marks_null() {
  emphasis_marks_null_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool CharacterStylePropertiesArchive::_internal_emphasis_marks_null() const {
  return emphasis_marks_null_;
}
inline bool CharacterStylePropertiesArchive::emphasis_marks_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.emphasis_marks_null)
  return _internal_emphasis_marks_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_emphasis_marks_null(bool value) {
  _has_bits_[1] |= 0x00000020u;
  emphasis_marks_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_emphasis_marks_null(bool value) {
  _internal_set_emphasis_marks_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.emphasis_marks_null)
}

// optional string emphasis_marks = 37;
inline bool CharacterStylePropertiesArchive::_internal_has_emphasis_marks() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_emphasis_marks() const {
  return _internal_has_emphasis_marks();
}
inline void CharacterStylePropertiesArchive::clear_emphasis_marks() {
  emphasis_marks_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CharacterStylePropertiesArchive::emphasis_marks() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.emphasis_marks)
  return _internal_emphasis_marks();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CharacterStylePropertiesArchive::set_emphasis_marks(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 emphasis_marks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.emphasis_marks)
}
inline std::string* CharacterStylePropertiesArchive::mutable_emphasis_marks() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.emphasis_marks)
  return _internal_mutable_emphasis_marks();
}
inline const std::string& CharacterStylePropertiesArchive::_internal_emphasis_marks() const {
  return emphasis_marks_.Get();
}
inline void CharacterStylePropertiesArchive::_internal_set_emphasis_marks(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  emphasis_marks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CharacterStylePropertiesArchive::_internal_mutable_emphasis_marks() {
  _has_bits_[0] |= 0x00000004u;
  return emphasis_marks_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CharacterStylePropertiesArchive::release_emphasis_marks() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.emphasis_marks)
  if (!_internal_has_emphasis_marks()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return emphasis_marks_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CharacterStylePropertiesArchive::set_allocated_emphasis_marks(std::string* emphasis_marks) {
  if (emphasis_marks != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  emphasis_marks_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), emphasis_marks,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.emphasis_marks)
}

// optional bool compatibility_font_name_null = 38;
inline bool CharacterStylePropertiesArchive::_internal_has_compatibility_font_name_null() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_compatibility_font_name_null() const {
  return _internal_has_compatibility_font_name_null();
}
inline void CharacterStylePropertiesArchive::clear_compatibility_font_name_null() {
  compatibility_font_name_null_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool CharacterStylePropertiesArchive::_internal_compatibility_font_name_null() const {
  return compatibility_font_name_null_;
}
inline bool CharacterStylePropertiesArchive::compatibility_font_name_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.compatibility_font_name_null)
  return _internal_compatibility_font_name_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_compatibility_font_name_null(bool value) {
  _has_bits_[1] |= 0x00000040u;
  compatibility_font_name_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_compatibility_font_name_null(bool value) {
  _internal_set_compatibility_font_name_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.compatibility_font_name_null)
}

// optional string compatibility_font_name = 39;
inline bool CharacterStylePropertiesArchive::_internal_has_compatibility_font_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_compatibility_font_name() const {
  return _internal_has_compatibility_font_name();
}
inline void CharacterStylePropertiesArchive::clear_compatibility_font_name() {
  compatibility_font_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CharacterStylePropertiesArchive::compatibility_font_name() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.compatibility_font_name)
  return _internal_compatibility_font_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CharacterStylePropertiesArchive::set_compatibility_font_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 compatibility_font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.compatibility_font_name)
}
inline std::string* CharacterStylePropertiesArchive::mutable_compatibility_font_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.compatibility_font_name)
  return _internal_mutable_compatibility_font_name();
}
inline const std::string& CharacterStylePropertiesArchive::_internal_compatibility_font_name() const {
  return compatibility_font_name_.Get();
}
inline void CharacterStylePropertiesArchive::_internal_set_compatibility_font_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  compatibility_font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CharacterStylePropertiesArchive::_internal_mutable_compatibility_font_name() {
  _has_bits_[0] |= 0x00000008u;
  return compatibility_font_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CharacterStylePropertiesArchive::release_compatibility_font_name() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.compatibility_font_name)
  if (!_internal_has_compatibility_font_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return compatibility_font_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CharacterStylePropertiesArchive::set_allocated_compatibility_font_name(std::string* compatibility_font_name) {
  if (compatibility_font_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  compatibility_font_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compatibility_font_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.compatibility_font_name)
}

// optional bool is_named_point_size = 40;
inline bool CharacterStylePropertiesArchive::_internal_has_is_named_point_size() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_is_named_point_size() const {
  return _internal_has_is_named_point_size();
}
inline void CharacterStylePropertiesArchive::clear_is_named_point_size() {
  is_named_point_size_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool CharacterStylePropertiesArchive::_internal_is_named_point_size() const {
  return is_named_point_size_;
}
inline bool CharacterStylePropertiesArchive::is_named_point_size() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.is_named_point_size)
  return _internal_is_named_point_size();
}
inline void CharacterStylePropertiesArchive::_internal_set_is_named_point_size(bool value) {
  _has_bits_[1] |= 0x00000080u;
  is_named_point_size_ = value;
}
inline void CharacterStylePropertiesArchive::set_is_named_point_size(bool value) {
  _internal_set_is_named_point_size(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.is_named_point_size)
}

// optional bool capitalization_uses_linguistics = 41;
inline bool CharacterStylePropertiesArchive::_internal_has_capitalization_uses_linguistics() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_capitalization_uses_linguistics() const {
  return _internal_has_capitalization_uses_linguistics();
}
inline void CharacterStylePropertiesArchive::clear_capitalization_uses_linguistics() {
  capitalization_uses_linguistics_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool CharacterStylePropertiesArchive::_internal_capitalization_uses_linguistics() const {
  return capitalization_uses_linguistics_;
}
inline bool CharacterStylePropertiesArchive::capitalization_uses_linguistics() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.capitalization_uses_linguistics)
  return _internal_capitalization_uses_linguistics();
}
inline void CharacterStylePropertiesArchive::_internal_set_capitalization_uses_linguistics(bool value) {
  _has_bits_[1] |= 0x00000100u;
  capitalization_uses_linguistics_ = value;
}
inline void CharacterStylePropertiesArchive::set_capitalization_uses_linguistics(bool value) {
  _internal_set_capitalization_uses_linguistics(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.capitalization_uses_linguistics)
}

// optional bool tate_chu_yoko = 42;
inline bool CharacterStylePropertiesArchive::_internal_has_tate_chu_yoko() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_tate_chu_yoko() const {
  return _internal_has_tate_chu_yoko();
}
inline void CharacterStylePropertiesArchive::clear_tate_chu_yoko() {
  tate_chu_yoko_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool CharacterStylePropertiesArchive::_internal_tate_chu_yoko() const {
  return tate_chu_yoko_;
}
inline bool CharacterStylePropertiesArchive::tate_chu_yoko() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.tate_chu_yoko)
  return _internal_tate_chu_yoko();
}
inline void CharacterStylePropertiesArchive::_internal_set_tate_chu_yoko(bool value) {
  _has_bits_[1] |= 0x00000200u;
  tate_chu_yoko_ = value;
}
inline void CharacterStylePropertiesArchive::set_tate_chu_yoko(bool value) {
  _internal_set_tate_chu_yoko(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.tate_chu_yoko)
}

// optional bool tsd_stroke_null = 43;
inline bool CharacterStylePropertiesArchive::_internal_has_tsd_stroke_null() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_tsd_stroke_null() const {
  return _internal_has_tsd_stroke_null();
}
inline void CharacterStylePropertiesArchive::clear_tsd_stroke_null() {
  tsd_stroke_null_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool CharacterStylePropertiesArchive::_internal_tsd_stroke_null() const {
  return tsd_stroke_null_;
}
inline bool CharacterStylePropertiesArchive::tsd_stroke_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.tsd_stroke_null)
  return _internal_tsd_stroke_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_tsd_stroke_null(bool value) {
  _has_bits_[1] |= 0x00000400u;
  tsd_stroke_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_tsd_stroke_null(bool value) {
  _internal_set_tsd_stroke_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.tsd_stroke_null)
}

// optional .TSD.StrokeArchive tsd_stroke = 44;
inline bool CharacterStylePropertiesArchive::_internal_has_tsd_stroke() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tsd_stroke_ != nullptr);
  return value;
}
inline bool CharacterStylePropertiesArchive::has_tsd_stroke() const {
  return _internal_has_tsd_stroke();
}
inline const ::TSD::StrokeArchive& CharacterStylePropertiesArchive::_internal_tsd_stroke() const {
  const ::TSD::StrokeArchive* p = tsd_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& CharacterStylePropertiesArchive::tsd_stroke() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.tsd_stroke)
  return _internal_tsd_stroke();
}
inline void CharacterStylePropertiesArchive::unsafe_arena_set_allocated_tsd_stroke(
    ::TSD::StrokeArchive* tsd_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsd_stroke_);
  }
  tsd_stroke_ = tsd_stroke;
  if (tsd_stroke) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStylePropertiesArchive.tsd_stroke)
}
inline ::TSD::StrokeArchive* CharacterStylePropertiesArchive::release_tsd_stroke() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::StrokeArchive* temp = tsd_stroke_;
  tsd_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* CharacterStylePropertiesArchive::unsafe_arena_release_tsd_stroke() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.tsd_stroke)
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::StrokeArchive* temp = tsd_stroke_;
  tsd_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* CharacterStylePropertiesArchive::_internal_mutable_tsd_stroke() {
  _has_bits_[0] |= 0x00000400u;
  if (tsd_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tsd_stroke_ = p;
  }
  return tsd_stroke_;
}
inline ::TSD::StrokeArchive* CharacterStylePropertiesArchive::mutable_tsd_stroke() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.tsd_stroke)
  return _internal_mutable_tsd_stroke();
}
inline void CharacterStylePropertiesArchive::set_allocated_tsd_stroke(::TSD::StrokeArchive* tsd_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsd_stroke_);
  }
  if (tsd_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsd_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      tsd_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsd_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tsd_stroke_ = tsd_stroke;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.tsd_stroke)
}

// optional bool tsd_fill_null = 45;
inline bool CharacterStylePropertiesArchive::_internal_has_tsd_fill_null() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_tsd_fill_null() const {
  return _internal_has_tsd_fill_null();
}
inline void CharacterStylePropertiesArchive::clear_tsd_fill_null() {
  tsd_fill_null_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool CharacterStylePropertiesArchive::_internal_tsd_fill_null() const {
  return tsd_fill_null_;
}
inline bool CharacterStylePropertiesArchive::tsd_fill_null() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.tsd_fill_null)
  return _internal_tsd_fill_null();
}
inline void CharacterStylePropertiesArchive::_internal_set_tsd_fill_null(bool value) {
  _has_bits_[1] |= 0x00000800u;
  tsd_fill_null_ = value;
}
inline void CharacterStylePropertiesArchive::set_tsd_fill_null(bool value) {
  _internal_set_tsd_fill_null(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.tsd_fill_null)
}

// optional .TSD.FillArchive tsd_fill = 46;
inline bool CharacterStylePropertiesArchive::_internal_has_tsd_fill() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tsd_fill_ != nullptr);
  return value;
}
inline bool CharacterStylePropertiesArchive::has_tsd_fill() const {
  return _internal_has_tsd_fill();
}
inline const ::TSD::FillArchive& CharacterStylePropertiesArchive::_internal_tsd_fill() const {
  const ::TSD::FillArchive* p = tsd_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& CharacterStylePropertiesArchive::tsd_fill() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.tsd_fill)
  return _internal_tsd_fill();
}
inline void CharacterStylePropertiesArchive::unsafe_arena_set_allocated_tsd_fill(
    ::TSD::FillArchive* tsd_fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsd_fill_);
  }
  tsd_fill_ = tsd_fill;
  if (tsd_fill) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStylePropertiesArchive.tsd_fill)
}
inline ::TSD::FillArchive* CharacterStylePropertiesArchive::release_tsd_fill() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::FillArchive* temp = tsd_fill_;
  tsd_fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* CharacterStylePropertiesArchive::unsafe_arena_release_tsd_fill() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStylePropertiesArchive.tsd_fill)
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::FillArchive* temp = tsd_fill_;
  tsd_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* CharacterStylePropertiesArchive::_internal_mutable_tsd_fill() {
  _has_bits_[0] |= 0x00000800u;
  if (tsd_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tsd_fill_ = p;
  }
  return tsd_fill_;
}
inline ::TSD::FillArchive* CharacterStylePropertiesArchive::mutable_tsd_fill() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStylePropertiesArchive.tsd_fill)
  return _internal_mutable_tsd_fill();
}
inline void CharacterStylePropertiesArchive::set_allocated_tsd_fill(::TSD::FillArchive* tsd_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsd_fill_);
  }
  if (tsd_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsd_fill)->GetArena();
    if (message_arena != submessage_arena) {
      tsd_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsd_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tsd_fill_ = tsd_fill;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStylePropertiesArchive.tsd_fill)
}

// optional bool tsd_fill_should_fill_text_container = 47;
inline bool CharacterStylePropertiesArchive::_internal_has_tsd_fill_should_fill_text_container() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CharacterStylePropertiesArchive::has_tsd_fill_should_fill_text_container() const {
  return _internal_has_tsd_fill_should_fill_text_container();
}
inline void CharacterStylePropertiesArchive::clear_tsd_fill_should_fill_text_container() {
  tsd_fill_should_fill_text_container_ = false;
  _has_bits_[1] &= ~0x00001000u;
}
inline bool CharacterStylePropertiesArchive::_internal_tsd_fill_should_fill_text_container() const {
  return tsd_fill_should_fill_text_container_;
}
inline bool CharacterStylePropertiesArchive::tsd_fill_should_fill_text_container() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStylePropertiesArchive.tsd_fill_should_fill_text_container)
  return _internal_tsd_fill_should_fill_text_container();
}
inline void CharacterStylePropertiesArchive::_internal_set_tsd_fill_should_fill_text_container(bool value) {
  _has_bits_[1] |= 0x00001000u;
  tsd_fill_should_fill_text_container_ = value;
}
inline void CharacterStylePropertiesArchive::set_tsd_fill_should_fill_text_container(bool value) {
  _internal_set_tsd_fill_should_fill_text_container(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStylePropertiesArchive.tsd_fill_should_fill_text_container)
}

// -------------------------------------------------------------------

// CharacterStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool CharacterStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CharacterStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& CharacterStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& CharacterStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStyleArchive.super)
  return _internal_super();
}
inline void CharacterStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStyleArchive.super)
}
inline ::TSS::StyleArchive* CharacterStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* CharacterStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* CharacterStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* CharacterStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStyleArchive.super)
  return _internal_mutable_super();
}
inline void CharacterStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool CharacterStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CharacterStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void CharacterStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStyleArchive.override_count)
  return _internal_override_count();
}
inline void CharacterStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  override_count_ = value;
}
inline void CharacterStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStyleArchive.override_count)
}

// optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
inline bool CharacterStyleArchive::_internal_has_char_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || char_properties_ != nullptr);
  return value;
}
inline bool CharacterStyleArchive::has_char_properties() const {
  return _internal_has_char_properties();
}
inline void CharacterStyleArchive::clear_char_properties() {
  if (char_properties_ != nullptr) char_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::CharacterStylePropertiesArchive& CharacterStyleArchive::_internal_char_properties() const {
  const ::TSWP::CharacterStylePropertiesArchive* p = char_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::CharacterStylePropertiesArchive&>(
      ::TSWP::_CharacterStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::CharacterStylePropertiesArchive& CharacterStyleArchive::char_properties() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStyleArchive.char_properties)
  return _internal_char_properties();
}
inline void CharacterStyleArchive::unsafe_arena_set_allocated_char_properties(
    ::TSWP::CharacterStylePropertiesArchive* char_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_properties_);
  }
  char_properties_ = char_properties;
  if (char_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStyleArchive.char_properties)
}
inline ::TSWP::CharacterStylePropertiesArchive* CharacterStyleArchive::release_char_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* CharacterStyleArchive::unsafe_arena_release_char_properties() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStyleArchive.char_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* CharacterStyleArchive::_internal_mutable_char_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (char_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::CharacterStylePropertiesArchive>(GetArena());
    char_properties_ = p;
  }
  return char_properties_;
}
inline ::TSWP::CharacterStylePropertiesArchive* CharacterStyleArchive::mutable_char_properties() {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStyleArchive.char_properties)
  return _internal_mutable_char_properties();
}
inline void CharacterStyleArchive::set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete char_properties_;
  }
  if (char_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(char_properties);
    if (message_arena != submessage_arena) {
      char_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  char_properties_ = char_properties;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStyleArchive.char_properties)
}

// -------------------------------------------------------------------

// TabArchive

// optional float position = 1;
inline bool TabArchive::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TabArchive::has_position() const {
  return _internal_has_position();
}
inline void TabArchive::clear_position() {
  position_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TabArchive::_internal_position() const {
  return position_;
}
inline float TabArchive::position() const {
  // @@protoc_insertion_point(field_get:TSWP.TabArchive.position)
  return _internal_position();
}
inline void TabArchive::_internal_set_position(float value) {
  _has_bits_[0] |= 0x00000002u;
  position_ = value;
}
inline void TabArchive::set_position(float value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:TSWP.TabArchive.position)
}

// optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
inline bool TabArchive::_internal_has_alignment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TabArchive::has_alignment() const {
  return _internal_has_alignment();
}
inline void TabArchive::clear_alignment() {
  alignment_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSWP::TabArchive_TabAlignmentType TabArchive::_internal_alignment() const {
  return static_cast< ::TSWP::TabArchive_TabAlignmentType >(alignment_);
}
inline ::TSWP::TabArchive_TabAlignmentType TabArchive::alignment() const {
  // @@protoc_insertion_point(field_get:TSWP.TabArchive.alignment)
  return _internal_alignment();
}
inline void TabArchive::_internal_set_alignment(::TSWP::TabArchive_TabAlignmentType value) {
  assert(::TSWP::TabArchive_TabAlignmentType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  alignment_ = value;
}
inline void TabArchive::set_alignment(::TSWP::TabArchive_TabAlignmentType value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:TSWP.TabArchive.alignment)
}

// optional string leader = 3;
inline bool TabArchive::_internal_has_leader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TabArchive::has_leader() const {
  return _internal_has_leader();
}
inline void TabArchive::clear_leader() {
  leader_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TabArchive::leader() const {
  // @@protoc_insertion_point(field_get:TSWP.TabArchive.leader)
  return _internal_leader();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TabArchive::set_leader(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 leader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TabArchive.leader)
}
inline std::string* TabArchive::mutable_leader() {
  // @@protoc_insertion_point(field_mutable:TSWP.TabArchive.leader)
  return _internal_mutable_leader();
}
inline const std::string& TabArchive::_internal_leader() const {
  return leader_.Get();
}
inline void TabArchive::_internal_set_leader(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  leader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TabArchive::_internal_mutable_leader() {
  _has_bits_[0] |= 0x00000001u;
  return leader_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TabArchive::release_leader() {
  // @@protoc_insertion_point(field_release:TSWP.TabArchive.leader)
  if (!_internal_has_leader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return leader_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TabArchive::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  leader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TabArchive.leader)
}

// -------------------------------------------------------------------

// TabsArchive

// repeated .TSWP.TabArchive tabs = 1;
inline int TabsArchive::_internal_tabs_size() const {
  return tabs_.size();
}
inline int TabsArchive::tabs_size() const {
  return _internal_tabs_size();
}
inline void TabsArchive::clear_tabs() {
  tabs_.Clear();
}
inline ::TSWP::TabArchive* TabsArchive::mutable_tabs(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.TabsArchive.tabs)
  return tabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TabArchive >*
TabsArchive::mutable_tabs() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.TabsArchive.tabs)
  return &tabs_;
}
inline const ::TSWP::TabArchive& TabsArchive::_internal_tabs(int index) const {
  return tabs_.Get(index);
}
inline const ::TSWP::TabArchive& TabsArchive::tabs(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.TabsArchive.tabs)
  return _internal_tabs(index);
}
inline ::TSWP::TabArchive* TabsArchive::_internal_add_tabs() {
  return tabs_.Add();
}
inline ::TSWP::TabArchive* TabsArchive::add_tabs() {
  // @@protoc_insertion_point(field_add:TSWP.TabsArchive.tabs)
  return _internal_add_tabs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TabArchive >&
TabsArchive::tabs() const {
  // @@protoc_insertion_point(field_list:TSWP.TabsArchive.tabs)
  return tabs_;
}

// -------------------------------------------------------------------

// LineSpacingArchive

// optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
inline bool LineSpacingArchive::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LineSpacingArchive::has_mode() const {
  return _internal_has_mode();
}
inline void LineSpacingArchive::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::TSWP::LineSpacingArchive_LineSpacingModeType LineSpacingArchive::_internal_mode() const {
  return static_cast< ::TSWP::LineSpacingArchive_LineSpacingModeType >(mode_);
}
inline ::TSWP::LineSpacingArchive_LineSpacingModeType LineSpacingArchive::mode() const {
  // @@protoc_insertion_point(field_get:TSWP.LineSpacingArchive.mode)
  return _internal_mode();
}
inline void LineSpacingArchive::_internal_set_mode(::TSWP::LineSpacingArchive_LineSpacingModeType value) {
  assert(::TSWP::LineSpacingArchive_LineSpacingModeType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  mode_ = value;
}
inline void LineSpacingArchive::set_mode(::TSWP::LineSpacingArchive_LineSpacingModeType value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:TSWP.LineSpacingArchive.mode)
}

// optional float amount = 2;
inline bool LineSpacingArchive::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LineSpacingArchive::has_amount() const {
  return _internal_has_amount();
}
inline void LineSpacingArchive::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float LineSpacingArchive::_internal_amount() const {
  return amount_;
}
inline float LineSpacingArchive::amount() const {
  // @@protoc_insertion_point(field_get:TSWP.LineSpacingArchive.amount)
  return _internal_amount();
}
inline void LineSpacingArchive::_internal_set_amount(float value) {
  _has_bits_[0] |= 0x00000002u;
  amount_ = value;
}
inline void LineSpacingArchive::set_amount(float value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TSWP.LineSpacingArchive.amount)
}

// optional float baselineRule = 3;
inline bool LineSpacingArchive::_internal_has_baselinerule() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LineSpacingArchive::has_baselinerule() const {
  return _internal_has_baselinerule();
}
inline void LineSpacingArchive::clear_baselinerule() {
  baselinerule_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float LineSpacingArchive::_internal_baselinerule() const {
  return baselinerule_;
}
inline float LineSpacingArchive::baselinerule() const {
  // @@protoc_insertion_point(field_get:TSWP.LineSpacingArchive.baselineRule)
  return _internal_baselinerule();
}
inline void LineSpacingArchive::_internal_set_baselinerule(float value) {
  _has_bits_[0] |= 0x00000004u;
  baselinerule_ = value;
}
inline void LineSpacingArchive::set_baselinerule(float value) {
  _internal_set_baselinerule(value);
  // @@protoc_insertion_point(field_set:TSWP.LineSpacingArchive.baselineRule)
}

// -------------------------------------------------------------------

// ParagraphStylePropertiesArchive

// optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
inline bool ParagraphStylePropertiesArchive::_internal_has_alignment() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_alignment() const {
  return _internal_has_alignment();
}
inline void ParagraphStylePropertiesArchive::clear_alignment() {
  alignment_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::_internal_alignment() const {
  return static_cast< ::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType >(alignment_);
}
inline ::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::alignment() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.alignment)
  return _internal_alignment();
}
inline void ParagraphStylePropertiesArchive::_internal_set_alignment(::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType value) {
  assert(::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  alignment_ = value;
}
inline void ParagraphStylePropertiesArchive::set_alignment(::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.alignment)
}

// optional bool decimal_tab_null = 2;
inline bool ParagraphStylePropertiesArchive::_internal_has_decimal_tab_null() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_decimal_tab_null() const {
  return _internal_has_decimal_tab_null();
}
inline void ParagraphStylePropertiesArchive::clear_decimal_tab_null() {
  decimal_tab_null_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_decimal_tab_null() const {
  return decimal_tab_null_;
}
inline bool ParagraphStylePropertiesArchive::decimal_tab_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.decimal_tab_null)
  return _internal_decimal_tab_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_decimal_tab_null(bool value) {
  _has_bits_[0] |= 0x00001000u;
  decimal_tab_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_decimal_tab_null(bool value) {
  _internal_set_decimal_tab_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.decimal_tab_null)
}

// optional string decimal_tab = 3;
inline bool ParagraphStylePropertiesArchive::_internal_has_decimal_tab() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_decimal_tab() const {
  return _internal_has_decimal_tab();
}
inline void ParagraphStylePropertiesArchive::clear_decimal_tab() {
  decimal_tab_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParagraphStylePropertiesArchive::decimal_tab() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.decimal_tab)
  return _internal_decimal_tab();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ParagraphStylePropertiesArchive::set_decimal_tab(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 decimal_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.decimal_tab)
}
inline std::string* ParagraphStylePropertiesArchive::mutable_decimal_tab() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.decimal_tab)
  return _internal_mutable_decimal_tab();
}
inline const std::string& ParagraphStylePropertiesArchive::_internal_decimal_tab() const {
  return decimal_tab_.Get();
}
inline void ParagraphStylePropertiesArchive::_internal_set_decimal_tab(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  decimal_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ParagraphStylePropertiesArchive::_internal_mutable_decimal_tab() {
  _has_bits_[0] |= 0x00000001u;
  return decimal_tab_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParagraphStylePropertiesArchive::release_decimal_tab() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.decimal_tab)
  if (!_internal_has_decimal_tab()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return decimal_tab_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParagraphStylePropertiesArchive::set_allocated_decimal_tab(std::string* decimal_tab) {
  if (decimal_tab != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  decimal_tab_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decimal_tab,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.decimal_tab)
}

// optional float default_tab_stops = 4;
inline bool ParagraphStylePropertiesArchive::_internal_has_default_tab_stops() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_default_tab_stops() const {
  return _internal_has_default_tab_stops();
}
inline void ParagraphStylePropertiesArchive::clear_default_tab_stops() {
  default_tab_stops_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ParagraphStylePropertiesArchive::_internal_default_tab_stops() const {
  return default_tab_stops_;
}
inline float ParagraphStylePropertiesArchive::default_tab_stops() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.default_tab_stops)
  return _internal_default_tab_stops();
}
inline void ParagraphStylePropertiesArchive::_internal_set_default_tab_stops(float value) {
  _has_bits_[0] |= 0x00000800u;
  default_tab_stops_ = value;
}
inline void ParagraphStylePropertiesArchive::set_default_tab_stops(float value) {
  _internal_set_default_tab_stops(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.default_tab_stops)
}

// optional bool fill_null = 5;
inline bool ParagraphStylePropertiesArchive::_internal_has_fill_null() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_fill_null() const {
  return _internal_has_fill_null();
}
inline void ParagraphStylePropertiesArchive::clear_fill_null() {
  fill_null_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_fill_null() const {
  return fill_null_;
}
inline bool ParagraphStylePropertiesArchive::fill_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.fill_null)
  return _internal_fill_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_fill_null(bool value) {
  _has_bits_[0] |= 0x00002000u;
  fill_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_fill_null(bool value) {
  _internal_set_fill_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.fill_null)
}

// optional .TSP.Color fill = 6;
inline bool ParagraphStylePropertiesArchive::_internal_has_fill() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || fill_ != nullptr);
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_fill() const {
  return _internal_has_fill();
}
inline const ::TSP::Color& ParagraphStylePropertiesArchive::_internal_fill() const {
  const ::TSP::Color* p = fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ParagraphStylePropertiesArchive::fill() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.fill)
  return _internal_fill();
}
inline void ParagraphStylePropertiesArchive::unsafe_arena_set_allocated_fill(
    ::TSP::Color* fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_);
  }
  fill_ = fill;
  if (fill) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStylePropertiesArchive.fill)
}
inline ::TSP::Color* ParagraphStylePropertiesArchive::release_fill() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = fill_;
  fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* ParagraphStylePropertiesArchive::unsafe_arena_release_fill() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.fill)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = fill_;
  fill_ = nullptr;
  return temp;
}
inline ::TSP::Color* ParagraphStylePropertiesArchive::_internal_mutable_fill() {
  _has_bits_[0] |= 0x00000008u;
  if (fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    fill_ = p;
  }
  return fill_;
}
inline ::TSP::Color* ParagraphStylePropertiesArchive::mutable_fill() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.fill)
  return _internal_mutable_fill();
}
inline void ParagraphStylePropertiesArchive::set_allocated_fill(::TSP::Color* fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_);
  }
  if (fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill)->GetArena();
    if (message_arena != submessage_arena) {
      fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  fill_ = fill;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.fill)
}

// optional float first_line_indent = 7;
inline bool ParagraphStylePropertiesArchive::_internal_has_first_line_indent() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_first_line_indent() const {
  return _internal_has_first_line_indent();
}
inline void ParagraphStylePropertiesArchive::clear_first_line_indent() {
  first_line_indent_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ParagraphStylePropertiesArchive::_internal_first_line_indent() const {
  return first_line_indent_;
}
inline float ParagraphStylePropertiesArchive::first_line_indent() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.first_line_indent)
  return _internal_first_line_indent();
}
inline void ParagraphStylePropertiesArchive::_internal_set_first_line_indent(float value) {
  _has_bits_[0] |= 0x00010000u;
  first_line_indent_ = value;
}
inline void ParagraphStylePropertiesArchive::set_first_line_indent(float value) {
  _internal_set_first_line_indent(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.first_line_indent)
}

// optional bool hyphenate = 8;
inline bool ParagraphStylePropertiesArchive::_internal_has_hyphenate() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_hyphenate() const {
  return _internal_has_hyphenate();
}
inline void ParagraphStylePropertiesArchive::clear_hyphenate() {
  hyphenate_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_hyphenate() const {
  return hyphenate_;
}
inline bool ParagraphStylePropertiesArchive::hyphenate() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.hyphenate)
  return _internal_hyphenate();
}
inline void ParagraphStylePropertiesArchive::_internal_set_hyphenate(bool value) {
  _has_bits_[0] |= 0x00004000u;
  hyphenate_ = value;
}
inline void ParagraphStylePropertiesArchive::set_hyphenate(bool value) {
  _internal_set_hyphenate(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.hyphenate)
}

// optional bool keep_lines_together = 9;
inline bool ParagraphStylePropertiesArchive::_internal_has_keep_lines_together() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_keep_lines_together() const {
  return _internal_has_keep_lines_together();
}
inline void ParagraphStylePropertiesArchive::clear_keep_lines_together() {
  keep_lines_together_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_keep_lines_together() const {
  return keep_lines_together_;
}
inline bool ParagraphStylePropertiesArchive::keep_lines_together() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.keep_lines_together)
  return _internal_keep_lines_together();
}
inline void ParagraphStylePropertiesArchive::_internal_set_keep_lines_together(bool value) {
  _has_bits_[0] |= 0x00008000u;
  keep_lines_together_ = value;
}
inline void ParagraphStylePropertiesArchive::set_keep_lines_together(bool value) {
  _internal_set_keep_lines_together(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.keep_lines_together)
}

// optional bool keep_with_next = 10;
inline bool ParagraphStylePropertiesArchive::_internal_has_keep_with_next() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_keep_with_next() const {
  return _internal_has_keep_with_next();
}
inline void ParagraphStylePropertiesArchive::clear_keep_with_next() {
  keep_with_next_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_keep_with_next() const {
  return keep_with_next_;
}
inline bool ParagraphStylePropertiesArchive::keep_with_next() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.keep_with_next)
  return _internal_keep_with_next();
}
inline void ParagraphStylePropertiesArchive::_internal_set_keep_with_next(bool value) {
  _has_bits_[0] |= 0x00040000u;
  keep_with_next_ = value;
}
inline void ParagraphStylePropertiesArchive::set_keep_with_next(bool value) {
  _internal_set_keep_with_next(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.keep_with_next)
}

// optional float left_indent = 11;
inline bool ParagraphStylePropertiesArchive::_internal_has_left_indent() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_left_indent() const {
  return _internal_has_left_indent();
}
inline void ParagraphStylePropertiesArchive::clear_left_indent() {
  left_indent_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float ParagraphStylePropertiesArchive::_internal_left_indent() const {
  return left_indent_;
}
inline float ParagraphStylePropertiesArchive::left_indent() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.left_indent)
  return _internal_left_indent();
}
inline void ParagraphStylePropertiesArchive::_internal_set_left_indent(float value) {
  _has_bits_[0] |= 0x00020000u;
  left_indent_ = value;
}
inline void ParagraphStylePropertiesArchive::set_left_indent(float value) {
  _internal_set_left_indent(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.left_indent)
}

// optional bool line_spacing_null = 12;
inline bool ParagraphStylePropertiesArchive::_internal_has_line_spacing_null() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_line_spacing_null() const {
  return _internal_has_line_spacing_null();
}
inline void ParagraphStylePropertiesArchive::clear_line_spacing_null() {
  line_spacing_null_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_line_spacing_null() const {
  return line_spacing_null_;
}
inline bool ParagraphStylePropertiesArchive::line_spacing_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.line_spacing_null)
  return _internal_line_spacing_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_line_spacing_null(bool value) {
  _has_bits_[0] |= 0x00080000u;
  line_spacing_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_line_spacing_null(bool value) {
  _internal_set_line_spacing_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.line_spacing_null)
}

// optional .TSWP.LineSpacingArchive line_spacing = 13;
inline bool ParagraphStylePropertiesArchive::_internal_has_line_spacing() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || line_spacing_ != nullptr);
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_line_spacing() const {
  return _internal_has_line_spacing();
}
inline void ParagraphStylePropertiesArchive::clear_line_spacing() {
  if (line_spacing_ != nullptr) line_spacing_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSWP::LineSpacingArchive& ParagraphStylePropertiesArchive::_internal_line_spacing() const {
  const ::TSWP::LineSpacingArchive* p = line_spacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::LineSpacingArchive&>(
      ::TSWP::_LineSpacingArchive_default_instance_);
}
inline const ::TSWP::LineSpacingArchive& ParagraphStylePropertiesArchive::line_spacing() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.line_spacing)
  return _internal_line_spacing();
}
inline void ParagraphStylePropertiesArchive::unsafe_arena_set_allocated_line_spacing(
    ::TSWP::LineSpacingArchive* line_spacing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_spacing_);
  }
  line_spacing_ = line_spacing;
  if (line_spacing) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStylePropertiesArchive.line_spacing)
}
inline ::TSWP::LineSpacingArchive* ParagraphStylePropertiesArchive::release_line_spacing() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSWP::LineSpacingArchive* temp = line_spacing_;
  line_spacing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::LineSpacingArchive* ParagraphStylePropertiesArchive::unsafe_arena_release_line_spacing() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.line_spacing)
  _has_bits_[0] &= ~0x00000010u;
  ::TSWP::LineSpacingArchive* temp = line_spacing_;
  line_spacing_ = nullptr;
  return temp;
}
inline ::TSWP::LineSpacingArchive* ParagraphStylePropertiesArchive::_internal_mutable_line_spacing() {
  _has_bits_[0] |= 0x00000010u;
  if (line_spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::LineSpacingArchive>(GetArena());
    line_spacing_ = p;
  }
  return line_spacing_;
}
inline ::TSWP::LineSpacingArchive* ParagraphStylePropertiesArchive::mutable_line_spacing() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.line_spacing)
  return _internal_mutable_line_spacing();
}
inline void ParagraphStylePropertiesArchive::set_allocated_line_spacing(::TSWP::LineSpacingArchive* line_spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete line_spacing_;
  }
  if (line_spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(line_spacing);
    if (message_arena != submessage_arena) {
      line_spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_spacing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  line_spacing_ = line_spacing;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.line_spacing)
}

// optional bool page_break_before = 14;
inline bool ParagraphStylePropertiesArchive::_internal_has_page_break_before() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_page_break_before() const {
  return _internal_has_page_break_before();
}
inline void ParagraphStylePropertiesArchive::clear_page_break_before() {
  page_break_before_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_page_break_before() const {
  return page_break_before_;
}
inline bool ParagraphStylePropertiesArchive::page_break_before() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.page_break_before)
  return _internal_page_break_before();
}
inline void ParagraphStylePropertiesArchive::_internal_set_page_break_before(bool value) {
  _has_bits_[0] |= 0x00100000u;
  page_break_before_ = value;
}
inline void ParagraphStylePropertiesArchive::set_page_break_before(bool value) {
  _internal_set_page_break_before(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.page_break_before)
}

// optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
inline bool ParagraphStylePropertiesArchive::_internal_has_borders() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_borders() const {
  return _internal_has_borders();
}
inline void ParagraphStylePropertiesArchive::clear_borders() {
  borders_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::_internal_borders() const {
  return static_cast< ::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType >(borders_);
}
inline ::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::borders() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.borders)
  return _internal_borders();
}
inline void ParagraphStylePropertiesArchive::_internal_set_borders(::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType value) {
  assert(::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  borders_ = value;
}
inline void ParagraphStylePropertiesArchive::set_borders(::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType value) {
  _internal_set_borders(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.borders)
}

// optional bool rule_offset_null = 16;
inline bool ParagraphStylePropertiesArchive::_internal_has_rule_offset_null() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_rule_offset_null() const {
  return _internal_has_rule_offset_null();
}
inline void ParagraphStylePropertiesArchive::clear_rule_offset_null() {
  rule_offset_null_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_rule_offset_null() const {
  return rule_offset_null_;
}
inline bool ParagraphStylePropertiesArchive::rule_offset_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.rule_offset_null)
  return _internal_rule_offset_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_rule_offset_null(bool value) {
  _has_bits_[0] |= 0x00200000u;
  rule_offset_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_rule_offset_null(bool value) {
  _internal_set_rule_offset_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.rule_offset_null)
}

// optional .TSP.Point rule_offset = 17;
inline bool ParagraphStylePropertiesArchive::_internal_has_rule_offset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || rule_offset_ != nullptr);
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_rule_offset() const {
  return _internal_has_rule_offset();
}
inline const ::TSP::Point& ParagraphStylePropertiesArchive::_internal_rule_offset() const {
  const ::TSP::Point* p = rule_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& ParagraphStylePropertiesArchive::rule_offset() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.rule_offset)
  return _internal_rule_offset();
}
inline void ParagraphStylePropertiesArchive::unsafe_arena_set_allocated_rule_offset(
    ::TSP::Point* rule_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rule_offset_);
  }
  rule_offset_ = rule_offset;
  if (rule_offset) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStylePropertiesArchive.rule_offset)
}
inline ::TSP::Point* ParagraphStylePropertiesArchive::release_rule_offset() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Point* temp = rule_offset_;
  rule_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Point* ParagraphStylePropertiesArchive::unsafe_arena_release_rule_offset() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.rule_offset)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Point* temp = rule_offset_;
  rule_offset_ = nullptr;
  return temp;
}
inline ::TSP::Point* ParagraphStylePropertiesArchive::_internal_mutable_rule_offset() {
  _has_bits_[0] |= 0x00000020u;
  if (rule_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArena());
    rule_offset_ = p;
  }
  return rule_offset_;
}
inline ::TSP::Point* ParagraphStylePropertiesArchive::mutable_rule_offset() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.rule_offset)
  return _internal_mutable_rule_offset();
}
inline void ParagraphStylePropertiesArchive::set_allocated_rule_offset(::TSP::Point* rule_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rule_offset_);
  }
  if (rule_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rule_offset)->GetArena();
    if (message_arena != submessage_arena) {
      rule_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule_offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  rule_offset_ = rule_offset;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.rule_offset)
}

// optional float rule_width = 18;
inline bool ParagraphStylePropertiesArchive::_internal_has_rule_width() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_rule_width() const {
  return _internal_has_rule_width();
}
inline void ParagraphStylePropertiesArchive::clear_rule_width() {
  rule_width_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float ParagraphStylePropertiesArchive::_internal_rule_width() const {
  return rule_width_;
}
inline float ParagraphStylePropertiesArchive::rule_width() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.rule_width)
  return _internal_rule_width();
}
inline void ParagraphStylePropertiesArchive::_internal_set_rule_width(float value) {
  _has_bits_[0] |= 0x00800000u;
  rule_width_ = value;
}
inline void ParagraphStylePropertiesArchive::set_rule_width(float value) {
  _internal_set_rule_width(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.rule_width)
}

// optional float right_indent = 19;
inline bool ParagraphStylePropertiesArchive::_internal_has_right_indent() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_right_indent() const {
  return _internal_has_right_indent();
}
inline void ParagraphStylePropertiesArchive::clear_right_indent() {
  right_indent_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float ParagraphStylePropertiesArchive::_internal_right_indent() const {
  return right_indent_;
}
inline float ParagraphStylePropertiesArchive::right_indent() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.right_indent)
  return _internal_right_indent();
}
inline void ParagraphStylePropertiesArchive::_internal_set_right_indent(float value) {
  _has_bits_[0] |= 0x01000000u;
  right_indent_ = value;
}
inline void ParagraphStylePropertiesArchive::set_right_indent(float value) {
  _internal_set_right_indent(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.right_indent)
}

// optional float space_after = 20;
inline bool ParagraphStylePropertiesArchive::_internal_has_space_after() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_space_after() const {
  return _internal_has_space_after();
}
inline void ParagraphStylePropertiesArchive::clear_space_after() {
  space_after_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float ParagraphStylePropertiesArchive::_internal_space_after() const {
  return space_after_;
}
inline float ParagraphStylePropertiesArchive::space_after() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.space_after)
  return _internal_space_after();
}
inline void ParagraphStylePropertiesArchive::_internal_set_space_after(float value) {
  _has_bits_[0] |= 0x02000000u;
  space_after_ = value;
}
inline void ParagraphStylePropertiesArchive::set_space_after(float value) {
  _internal_set_space_after(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.space_after)
}

// optional float space_before = 21;
inline bool ParagraphStylePropertiesArchive::_internal_has_space_before() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_space_before() const {
  return _internal_has_space_before();
}
inline void ParagraphStylePropertiesArchive::clear_space_before() {
  space_before_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float ParagraphStylePropertiesArchive::_internal_space_before() const {
  return space_before_;
}
inline float ParagraphStylePropertiesArchive::space_before() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.space_before)
  return _internal_space_before();
}
inline void ParagraphStylePropertiesArchive::_internal_set_space_before(float value) {
  _has_bits_[0] |= 0x04000000u;
  space_before_ = value;
}
inline void ParagraphStylePropertiesArchive::set_space_before(float value) {
  _internal_set_space_before(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.space_before)
}

// optional bool tabs_null = 24;
inline bool ParagraphStylePropertiesArchive::_internal_has_tabs_null() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_tabs_null() const {
  return _internal_has_tabs_null();
}
inline void ParagraphStylePropertiesArchive::clear_tabs_null() {
  tabs_null_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_tabs_null() const {
  return tabs_null_;
}
inline bool ParagraphStylePropertiesArchive::tabs_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.tabs_null)
  return _internal_tabs_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_tabs_null(bool value) {
  _has_bits_[0] |= 0x10000000u;
  tabs_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_tabs_null(bool value) {
  _internal_set_tabs_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.tabs_null)
}

// optional .TSWP.TabsArchive tabs = 25;
inline bool ParagraphStylePropertiesArchive::_internal_has_tabs() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tabs_ != nullptr);
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_tabs() const {
  return _internal_has_tabs();
}
inline void ParagraphStylePropertiesArchive::clear_tabs() {
  if (tabs_ != nullptr) tabs_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSWP::TabsArchive& ParagraphStylePropertiesArchive::_internal_tabs() const {
  const ::TSWP::TabsArchive* p = tabs_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::TabsArchive&>(
      ::TSWP::_TabsArchive_default_instance_);
}
inline const ::TSWP::TabsArchive& ParagraphStylePropertiesArchive::tabs() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.tabs)
  return _internal_tabs();
}
inline void ParagraphStylePropertiesArchive::unsafe_arena_set_allocated_tabs(
    ::TSWP::TabsArchive* tabs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tabs_);
  }
  tabs_ = tabs;
  if (tabs) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStylePropertiesArchive.tabs)
}
inline ::TSWP::TabsArchive* ParagraphStylePropertiesArchive::release_tabs() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::TabsArchive* temp = tabs_;
  tabs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::TabsArchive* ParagraphStylePropertiesArchive::unsafe_arena_release_tabs() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.tabs)
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::TabsArchive* temp = tabs_;
  tabs_ = nullptr;
  return temp;
}
inline ::TSWP::TabsArchive* ParagraphStylePropertiesArchive::_internal_mutable_tabs() {
  _has_bits_[0] |= 0x00000040u;
  if (tabs_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::TabsArchive>(GetArena());
    tabs_ = p;
  }
  return tabs_;
}
inline ::TSWP::TabsArchive* ParagraphStylePropertiesArchive::mutable_tabs() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.tabs)
  return _internal_mutable_tabs();
}
inline void ParagraphStylePropertiesArchive::set_allocated_tabs(::TSWP::TabsArchive* tabs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tabs_;
  }
  if (tabs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tabs);
    if (message_arena != submessage_arena) {
      tabs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tabs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tabs_ = tabs;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.tabs)
}

// optional bool widow_control = 26;
inline bool ParagraphStylePropertiesArchive::_internal_has_widow_control() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_widow_control() const {
  return _internal_has_widow_control();
}
inline void ParagraphStylePropertiesArchive::clear_widow_control() {
  widow_control_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_widow_control() const {
  return widow_control_;
}
inline bool ParagraphStylePropertiesArchive::widow_control() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.widow_control)
  return _internal_widow_control();
}
inline void ParagraphStylePropertiesArchive::_internal_set_widow_control(bool value) {
  _has_bits_[0] |= 0x20000000u;
  widow_control_ = value;
}
inline void ParagraphStylePropertiesArchive::set_widow_control(bool value) {
  _internal_set_widow_control(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.widow_control)
}

// optional uint32 outline_level = 27;
inline bool ParagraphStylePropertiesArchive::_internal_has_outline_level() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_outline_level() const {
  return _internal_has_outline_level();
}
inline void ParagraphStylePropertiesArchive::clear_outline_level() {
  outline_level_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParagraphStylePropertiesArchive::_internal_outline_level() const {
  return outline_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParagraphStylePropertiesArchive::outline_level() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.outline_level)
  return _internal_outline_level();
}
inline void ParagraphStylePropertiesArchive::_internal_set_outline_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  outline_level_ = value;
}
inline void ParagraphStylePropertiesArchive::set_outline_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outline_level(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.outline_level)
}

// optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
inline bool ParagraphStylePropertiesArchive::_internal_has_outline_style() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_outline_style() const {
  return _internal_has_outline_style();
}
inline void ParagraphStylePropertiesArchive::clear_outline_style() {
  outline_style_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::_internal_outline_style() const {
  return static_cast< ::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType >(outline_style_);
}
inline ::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::outline_style() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.outline_style)
  return _internal_outline_style();
}
inline void ParagraphStylePropertiesArchive::_internal_set_outline_style(::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType value) {
  assert(::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType_IsValid(value));
  _has_bits_[1] |= 0x00000001u;
  outline_style_ = value;
}
inline void ParagraphStylePropertiesArchive::set_outline_style(::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType value) {
  _internal_set_outline_style(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.outline_style)
}

// optional bool following_style_id_null = 29;
inline bool ParagraphStylePropertiesArchive::_internal_has_following_style_id_null() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_following_style_id_null() const {
  return _internal_has_following_style_id_null();
}
inline void ParagraphStylePropertiesArchive::clear_following_style_id_null() {
  following_style_id_null_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_following_style_id_null() const {
  return following_style_id_null_;
}
inline bool ParagraphStylePropertiesArchive::following_style_id_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.following_style_id_null)
  return _internal_following_style_id_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_following_style_id_null(bool value) {
  _has_bits_[0] |= 0x40000000u;
  following_style_id_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_following_style_id_null(bool value) {
  _internal_set_following_style_id_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.following_style_id_null)
}

// optional string following_style_id = 30;
inline bool ParagraphStylePropertiesArchive::_internal_has_following_style_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_following_style_id() const {
  return _internal_has_following_style_id();
}
inline void ParagraphStylePropertiesArchive::clear_following_style_id() {
  following_style_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParagraphStylePropertiesArchive::following_style_id() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.following_style_id)
  return _internal_following_style_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ParagraphStylePropertiesArchive::set_following_style_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 following_style_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.following_style_id)
}
inline std::string* ParagraphStylePropertiesArchive::mutable_following_style_id() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.following_style_id)
  return _internal_mutable_following_style_id();
}
inline const std::string& ParagraphStylePropertiesArchive::_internal_following_style_id() const {
  return following_style_id_.Get();
}
inline void ParagraphStylePropertiesArchive::_internal_set_following_style_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  following_style_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ParagraphStylePropertiesArchive::_internal_mutable_following_style_id() {
  _has_bits_[0] |= 0x00000002u;
  return following_style_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParagraphStylePropertiesArchive::release_following_style_id() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.following_style_id)
  if (!_internal_has_following_style_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return following_style_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParagraphStylePropertiesArchive::set_allocated_following_style_id(std::string* following_style_id) {
  if (following_style_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  following_style_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), following_style_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.following_style_id)
}

// optional bool stroke_null = 31;
inline bool ParagraphStylePropertiesArchive::_internal_has_stroke_null() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_stroke_null() const {
  return _internal_has_stroke_null();
}
inline void ParagraphStylePropertiesArchive::clear_stroke_null() {
  stroke_null_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool ParagraphStylePropertiesArchive::_internal_stroke_null() const {
  return stroke_null_;
}
inline bool ParagraphStylePropertiesArchive::stroke_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.stroke_null)
  return _internal_stroke_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_stroke_null(bool value) {
  _has_bits_[0] |= 0x80000000u;
  stroke_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_stroke_null(bool value) {
  _internal_set_stroke_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.stroke_null)
}

// optional .TSD.StrokeArchive stroke = 32;
inline bool ParagraphStylePropertiesArchive::_internal_has_stroke() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || stroke_ != nullptr);
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_stroke() const {
  return _internal_has_stroke();
}
inline const ::TSD::StrokeArchive& ParagraphStylePropertiesArchive::_internal_stroke() const {
  const ::TSD::StrokeArchive* p = stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ParagraphStylePropertiesArchive::stroke() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.stroke)
  return _internal_stroke();
}
inline void ParagraphStylePropertiesArchive::unsafe_arena_set_allocated_stroke(
    ::TSD::StrokeArchive* stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_);
  }
  stroke_ = stroke;
  if (stroke) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStylePropertiesArchive.stroke)
}
inline ::TSD::StrokeArchive* ParagraphStylePropertiesArchive::release_stroke() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = stroke_;
  stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ParagraphStylePropertiesArchive::unsafe_arena_release_stroke() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.stroke)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = stroke_;
  stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ParagraphStylePropertiesArchive::_internal_mutable_stroke() {
  _has_bits_[0] |= 0x00000080u;
  if (stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    stroke_ = p;
  }
  return stroke_;
}
inline ::TSD::StrokeArchive* ParagraphStylePropertiesArchive::mutable_stroke() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.stroke)
  return _internal_mutable_stroke();
}
inline void ParagraphStylePropertiesArchive::set_allocated_stroke(::TSD::StrokeArchive* stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_);
  }
  if (stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke)->GetArena();
    if (message_arena != submessage_arena) {
      stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  stroke_ = stroke;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.stroke)
}

// optional bool show_in_toc = 33;
inline bool ParagraphStylePropertiesArchive::_internal_has_show_in_toc() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_show_in_toc() const {
  return _internal_has_show_in_toc();
}
inline void ParagraphStylePropertiesArchive::clear_show_in_toc() {
  show_in_toc_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool ParagraphStylePropertiesArchive::_internal_show_in_toc() const {
  return show_in_toc_;
}
inline bool ParagraphStylePropertiesArchive::show_in_toc() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.show_in_toc)
  return _internal_show_in_toc();
}
inline void ParagraphStylePropertiesArchive::_internal_set_show_in_toc(bool value) {
  _has_bits_[1] |= 0x00000002u;
  show_in_toc_ = value;
}
inline void ParagraphStylePropertiesArchive::set_show_in_toc(bool value) {
  _internal_set_show_in_toc(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.show_in_toc)
}

// optional bool toc_style_id_null = 34;
inline bool ParagraphStylePropertiesArchive::_internal_has_toc_style_id_null() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_toc_style_id_null() const {
  return _internal_has_toc_style_id_null();
}
inline void ParagraphStylePropertiesArchive::clear_toc_style_id_null() {
  toc_style_id_null_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool ParagraphStylePropertiesArchive::_internal_toc_style_id_null() const {
  return toc_style_id_null_;
}
inline bool ParagraphStylePropertiesArchive::toc_style_id_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.toc_style_id_null)
  return _internal_toc_style_id_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_toc_style_id_null(bool value) {
  _has_bits_[1] |= 0x00000004u;
  toc_style_id_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_toc_style_id_null(bool value) {
  _internal_set_toc_style_id_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.toc_style_id_null)
}

// optional string toc_style_id = 35;
inline bool ParagraphStylePropertiesArchive::_internal_has_toc_style_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_toc_style_id() const {
  return _internal_has_toc_style_id();
}
inline void ParagraphStylePropertiesArchive::clear_toc_style_id() {
  toc_style_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ParagraphStylePropertiesArchive::toc_style_id() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.toc_style_id)
  return _internal_toc_style_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ParagraphStylePropertiesArchive::set_toc_style_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 toc_style_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.toc_style_id)
}
inline std::string* ParagraphStylePropertiesArchive::mutable_toc_style_id() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.toc_style_id)
  return _internal_mutable_toc_style_id();
}
inline const std::string& ParagraphStylePropertiesArchive::_internal_toc_style_id() const {
  return toc_style_id_.Get();
}
inline void ParagraphStylePropertiesArchive::_internal_set_toc_style_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  toc_style_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ParagraphStylePropertiesArchive::_internal_mutable_toc_style_id() {
  _has_bits_[0] |= 0x00000004u;
  return toc_style_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParagraphStylePropertiesArchive::release_toc_style_id() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.toc_style_id)
  if (!_internal_has_toc_style_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return toc_style_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParagraphStylePropertiesArchive::set_allocated_toc_style_id(std::string* toc_style_id) {
  if (toc_style_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  toc_style_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toc_style_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.toc_style_id)
}

// optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
inline bool ParagraphStylePropertiesArchive::_internal_has_writing_direction() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_writing_direction() const {
  return _internal_has_writing_direction();
}
inline void ParagraphStylePropertiesArchive::clear_writing_direction() {
  writing_direction_ = -1;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::TSWP::WritingDirectionType ParagraphStylePropertiesArchive::_internal_writing_direction() const {
  return static_cast< ::TSWP::WritingDirectionType >(writing_direction_);
}
inline ::TSWP::WritingDirectionType ParagraphStylePropertiesArchive::writing_direction() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.writing_direction)
  return _internal_writing_direction();
}
inline void ParagraphStylePropertiesArchive::_internal_set_writing_direction(::TSWP::WritingDirectionType value) {
  assert(::TSWP::WritingDirectionType_IsValid(value));
  _has_bits_[1] |= 0x00000080u;
  writing_direction_ = value;
}
inline void ParagraphStylePropertiesArchive::set_writing_direction(::TSWP::WritingDirectionType value) {
  _internal_set_writing_direction(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.writing_direction)
}

// optional bool list_style_null = 39;
inline bool ParagraphStylePropertiesArchive::_internal_has_list_style_null() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_list_style_null() const {
  return _internal_has_list_style_null();
}
inline void ParagraphStylePropertiesArchive::clear_list_style_null() {
  list_style_null_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool ParagraphStylePropertiesArchive::_internal_list_style_null() const {
  return list_style_null_;
}
inline bool ParagraphStylePropertiesArchive::list_style_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.list_style_null)
  return _internal_list_style_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_list_style_null(bool value) {
  _has_bits_[1] |= 0x00000008u;
  list_style_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_list_style_null(bool value) {
  _internal_set_list_style_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.list_style_null)
}

// optional .TSP.Reference list_style = 40;
inline bool ParagraphStylePropertiesArchive::_internal_has_list_style() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || list_style_ != nullptr);
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_list_style() const {
  return _internal_has_list_style();
}
inline const ::TSP::Reference& ParagraphStylePropertiesArchive::_internal_list_style() const {
  const ::TSP::Reference* p = list_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ParagraphStylePropertiesArchive::list_style() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.list_style)
  return _internal_list_style();
}
inline void ParagraphStylePropertiesArchive::unsafe_arena_set_allocated_list_style(
    ::TSP::Reference* list_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style_);
  }
  list_style_ = list_style;
  if (list_style) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStylePropertiesArchive.list_style)
}
inline ::TSP::Reference* ParagraphStylePropertiesArchive::release_list_style() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = list_style_;
  list_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ParagraphStylePropertiesArchive::unsafe_arena_release_list_style() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.list_style)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = list_style_;
  list_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ParagraphStylePropertiesArchive::_internal_mutable_list_style() {
  _has_bits_[0] |= 0x00000100u;
  if (list_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    list_style_ = p;
  }
  return list_style_;
}
inline ::TSP::Reference* ParagraphStylePropertiesArchive::mutable_list_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.list_style)
  return _internal_mutable_list_style();
}
inline void ParagraphStylePropertiesArchive::set_allocated_list_style(::TSP::Reference* list_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style_);
  }
  if (list_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style)->GetArena();
    if (message_arena != submessage_arena) {
      list_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  list_style_ = list_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.list_style)
}

// optional bool following_style_null = 41;
inline bool ParagraphStylePropertiesArchive::_internal_has_following_style_null() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_following_style_null() const {
  return _internal_has_following_style_null();
}
inline void ParagraphStylePropertiesArchive::clear_following_style_null() {
  following_style_null_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool ParagraphStylePropertiesArchive::_internal_following_style_null() const {
  return following_style_null_;
}
inline bool ParagraphStylePropertiesArchive::following_style_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.following_style_null)
  return _internal_following_style_null();
}
inline void ParagraphStylePropertiesArchive::_internal_set_following_style_null(bool value) {
  _has_bits_[1] |= 0x00000010u;
  following_style_null_ = value;
}
inline void ParagraphStylePropertiesArchive::set_following_style_null(bool value) {
  _internal_set_following_style_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.following_style_null)
}

// optional .TSP.Reference following_style = 42;
inline bool ParagraphStylePropertiesArchive::_internal_has_following_style() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || following_style_ != nullptr);
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_following_style() const {
  return _internal_has_following_style();
}
inline const ::TSP::Reference& ParagraphStylePropertiesArchive::_internal_following_style() const {
  const ::TSP::Reference* p = following_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ParagraphStylePropertiesArchive::following_style() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.following_style)
  return _internal_following_style();
}
inline void ParagraphStylePropertiesArchive::unsafe_arena_set_allocated_following_style(
    ::TSP::Reference* following_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(following_style_);
  }
  following_style_ = following_style;
  if (following_style) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStylePropertiesArchive.following_style)
}
inline ::TSP::Reference* ParagraphStylePropertiesArchive::release_following_style() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = following_style_;
  following_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ParagraphStylePropertiesArchive::unsafe_arena_release_following_style() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStylePropertiesArchive.following_style)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = following_style_;
  following_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ParagraphStylePropertiesArchive::_internal_mutable_following_style() {
  _has_bits_[0] |= 0x00000200u;
  if (following_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    following_style_ = p;
  }
  return following_style_;
}
inline ::TSP::Reference* ParagraphStylePropertiesArchive::mutable_following_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStylePropertiesArchive.following_style)
  return _internal_mutable_following_style();
}
inline void ParagraphStylePropertiesArchive::set_allocated_following_style(::TSP::Reference* following_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(following_style_);
  }
  if (following_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(following_style)->GetArena();
    if (message_arena != submessage_arena) {
      following_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, following_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  following_style_ = following_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStylePropertiesArchive.following_style)
}

// optional bool show_in_bookmarks_list = 43;
inline bool ParagraphStylePropertiesArchive::_internal_has_show_in_bookmarks_list() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_show_in_bookmarks_list() const {
  return _internal_has_show_in_bookmarks_list();
}
inline void ParagraphStylePropertiesArchive::clear_show_in_bookmarks_list() {
  show_in_bookmarks_list_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool ParagraphStylePropertiesArchive::_internal_show_in_bookmarks_list() const {
  return show_in_bookmarks_list_;
}
inline bool ParagraphStylePropertiesArchive::show_in_bookmarks_list() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.show_in_bookmarks_list)
  return _internal_show_in_bookmarks_list();
}
inline void ParagraphStylePropertiesArchive::_internal_set_show_in_bookmarks_list(bool value) {
  _has_bits_[1] |= 0x00000020u;
  show_in_bookmarks_list_ = value;
}
inline void ParagraphStylePropertiesArchive::set_show_in_bookmarks_list(bool value) {
  _internal_set_show_in_bookmarks_list(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.show_in_bookmarks_list)
}

// optional bool show_in_toc_navigator = 44;
inline bool ParagraphStylePropertiesArchive::_internal_has_show_in_toc_navigator() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ParagraphStylePropertiesArchive::has_show_in_toc_navigator() const {
  return _internal_has_show_in_toc_navigator();
}
inline void ParagraphStylePropertiesArchive::clear_show_in_toc_navigator() {
  show_in_toc_navigator_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool ParagraphStylePropertiesArchive::_internal_show_in_toc_navigator() const {
  return show_in_toc_navigator_;
}
inline bool ParagraphStylePropertiesArchive::show_in_toc_navigator() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStylePropertiesArchive.show_in_toc_navigator)
  return _internal_show_in_toc_navigator();
}
inline void ParagraphStylePropertiesArchive::_internal_set_show_in_toc_navigator(bool value) {
  _has_bits_[1] |= 0x00000040u;
  show_in_toc_navigator_ = value;
}
inline void ParagraphStylePropertiesArchive::set_show_in_toc_navigator(bool value) {
  _internal_set_show_in_toc_navigator(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStylePropertiesArchive.show_in_toc_navigator)
}

// -------------------------------------------------------------------

// ParagraphStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool ParagraphStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ParagraphStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& ParagraphStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& ParagraphStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStyleArchive.super)
  return _internal_super();
}
inline void ParagraphStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStyleArchive.super)
}
inline ::TSS::StyleArchive* ParagraphStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* ParagraphStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* ParagraphStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* ParagraphStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStyleArchive.super)
  return _internal_mutable_super();
}
inline void ParagraphStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool ParagraphStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParagraphStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void ParagraphStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParagraphStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParagraphStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStyleArchive.override_count)
  return _internal_override_count();
}
inline void ParagraphStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  override_count_ = value;
}
inline void ParagraphStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStyleArchive.override_count)
}

// optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
inline bool ParagraphStyleArchive::_internal_has_char_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || char_properties_ != nullptr);
  return value;
}
inline bool ParagraphStyleArchive::has_char_properties() const {
  return _internal_has_char_properties();
}
inline void ParagraphStyleArchive::clear_char_properties() {
  if (char_properties_ != nullptr) char_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::CharacterStylePropertiesArchive& ParagraphStyleArchive::_internal_char_properties() const {
  const ::TSWP::CharacterStylePropertiesArchive* p = char_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::CharacterStylePropertiesArchive&>(
      ::TSWP::_CharacterStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::CharacterStylePropertiesArchive& ParagraphStyleArchive::char_properties() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStyleArchive.char_properties)
  return _internal_char_properties();
}
inline void ParagraphStyleArchive::unsafe_arena_set_allocated_char_properties(
    ::TSWP::CharacterStylePropertiesArchive* char_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_properties_);
  }
  char_properties_ = char_properties;
  if (char_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStyleArchive.char_properties)
}
inline ::TSWP::CharacterStylePropertiesArchive* ParagraphStyleArchive::release_char_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* ParagraphStyleArchive::unsafe_arena_release_char_properties() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStyleArchive.char_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* ParagraphStyleArchive::_internal_mutable_char_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (char_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::CharacterStylePropertiesArchive>(GetArena());
    char_properties_ = p;
  }
  return char_properties_;
}
inline ::TSWP::CharacterStylePropertiesArchive* ParagraphStyleArchive::mutable_char_properties() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStyleArchive.char_properties)
  return _internal_mutable_char_properties();
}
inline void ParagraphStyleArchive::set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete char_properties_;
  }
  if (char_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(char_properties);
    if (message_arena != submessage_arena) {
      char_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  char_properties_ = char_properties;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStyleArchive.char_properties)
}

// optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
inline bool ParagraphStyleArchive::_internal_has_para_properties() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || para_properties_ != nullptr);
  return value;
}
inline bool ParagraphStyleArchive::has_para_properties() const {
  return _internal_has_para_properties();
}
inline void ParagraphStyleArchive::clear_para_properties() {
  if (para_properties_ != nullptr) para_properties_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::ParagraphStylePropertiesArchive& ParagraphStyleArchive::_internal_para_properties() const {
  const ::TSWP::ParagraphStylePropertiesArchive* p = para_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ParagraphStylePropertiesArchive&>(
      ::TSWP::_ParagraphStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ParagraphStylePropertiesArchive& ParagraphStyleArchive::para_properties() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStyleArchive.para_properties)
  return _internal_para_properties();
}
inline void ParagraphStyleArchive::unsafe_arena_set_allocated_para_properties(
    ::TSWP::ParagraphStylePropertiesArchive* para_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(para_properties_);
  }
  para_properties_ = para_properties;
  if (para_properties) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStyleArchive.para_properties)
}
inline ::TSWP::ParagraphStylePropertiesArchive* ParagraphStyleArchive::release_para_properties() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::ParagraphStylePropertiesArchive* temp = para_properties_;
  para_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ParagraphStylePropertiesArchive* ParagraphStyleArchive::unsafe_arena_release_para_properties() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStyleArchive.para_properties)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::ParagraphStylePropertiesArchive* temp = para_properties_;
  para_properties_ = nullptr;
  return temp;
}
inline ::TSWP::ParagraphStylePropertiesArchive* ParagraphStyleArchive::_internal_mutable_para_properties() {
  _has_bits_[0] |= 0x00000004u;
  if (para_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ParagraphStylePropertiesArchive>(GetArena());
    para_properties_ = p;
  }
  return para_properties_;
}
inline ::TSWP::ParagraphStylePropertiesArchive* ParagraphStyleArchive::mutable_para_properties() {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStyleArchive.para_properties)
  return _internal_mutable_para_properties();
}
inline void ParagraphStyleArchive::set_allocated_para_properties(::TSWP::ParagraphStylePropertiesArchive* para_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete para_properties_;
  }
  if (para_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(para_properties);
    if (message_arena != submessage_arena) {
      para_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, para_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  para_properties_ = para_properties;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStyleArchive.para_properties)
}

// -------------------------------------------------------------------

// ListStyleArchive_LabelGeometry

// optional float scale = 1 [default = 1];
inline bool ListStyleArchive_LabelGeometry::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListStyleArchive_LabelGeometry::has_scale() const {
  return _internal_has_scale();
}
inline void ListStyleArchive_LabelGeometry::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ListStyleArchive_LabelGeometry::_internal_scale() const {
  return scale_;
}
inline float ListStyleArchive_LabelGeometry::scale() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.LabelGeometry.scale)
  return _internal_scale();
}
inline void ListStyleArchive_LabelGeometry::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  scale_ = value;
}
inline void ListStyleArchive_LabelGeometry::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.LabelGeometry.scale)
}

// optional float baseline_offset = 2 [default = 0];
inline bool ListStyleArchive_LabelGeometry::_internal_has_baseline_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListStyleArchive_LabelGeometry::has_baseline_offset() const {
  return _internal_has_baseline_offset();
}
inline void ListStyleArchive_LabelGeometry::clear_baseline_offset() {
  baseline_offset_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ListStyleArchive_LabelGeometry::_internal_baseline_offset() const {
  return baseline_offset_;
}
inline float ListStyleArchive_LabelGeometry::baseline_offset() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.LabelGeometry.baseline_offset)
  return _internal_baseline_offset();
}
inline void ListStyleArchive_LabelGeometry::_internal_set_baseline_offset(float value) {
  _has_bits_[0] |= 0x00000001u;
  baseline_offset_ = value;
}
inline void ListStyleArchive_LabelGeometry::set_baseline_offset(float value) {
  _internal_set_baseline_offset(value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.LabelGeometry.baseline_offset)
}

// optional bool scale_with_text = 3 [default = true];
inline bool ListStyleArchive_LabelGeometry::_internal_has_scale_with_text() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListStyleArchive_LabelGeometry::has_scale_with_text() const {
  return _internal_has_scale_with_text();
}
inline void ListStyleArchive_LabelGeometry::clear_scale_with_text() {
  scale_with_text_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ListStyleArchive_LabelGeometry::_internal_scale_with_text() const {
  return scale_with_text_;
}
inline bool ListStyleArchive_LabelGeometry::scale_with_text() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.LabelGeometry.scale_with_text)
  return _internal_scale_with_text();
}
inline void ListStyleArchive_LabelGeometry::_internal_set_scale_with_text(bool value) {
  _has_bits_[0] |= 0x00000004u;
  scale_with_text_ = value;
}
inline void ListStyleArchive_LabelGeometry::set_scale_with_text(bool value) {
  _internal_set_scale_with_text(value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.LabelGeometry.scale_with_text)
}

// -------------------------------------------------------------------

// ListStyleArchive_LabelImage

// optional .TSP.DataReference image = 3;
inline bool ListStyleArchive_LabelImage::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || image_ != nullptr);
  return value;
}
inline bool ListStyleArchive_LabelImage::has_image() const {
  return _internal_has_image();
}
inline const ::TSP::DataReference& ListStyleArchive_LabelImage::_internal_image() const {
  const ::TSP::DataReference* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ListStyleArchive_LabelImage::image() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.LabelImage.image)
  return _internal_image();
}
inline void ListStyleArchive_LabelImage::unsafe_arena_set_allocated_image(
    ::TSP::DataReference* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ListStyleArchive.LabelImage.image)
}
inline ::TSP::DataReference* ListStyleArchive_LabelImage::release_image() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ListStyleArchive_LabelImage::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:TSWP.ListStyleArchive.LabelImage.image)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ListStyleArchive_LabelImage::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000002u;
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::TSP::DataReference* ListStyleArchive_LabelImage::mutable_image() {
  // @@protoc_insertion_point(field_mutable:TSWP.ListStyleArchive.LabelImage.image)
  return _internal_mutable_image();
}
inline void ListStyleArchive_LabelImage::set_allocated_image(::TSP::DataReference* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image)->GetArena();
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ListStyleArchive.LabelImage.image)
}

// optional bool image_null = 2;
inline bool ListStyleArchive_LabelImage::_internal_has_image_null() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListStyleArchive_LabelImage::has_image_null() const {
  return _internal_has_image_null();
}
inline void ListStyleArchive_LabelImage::clear_image_null() {
  image_null_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ListStyleArchive_LabelImage::_internal_image_null() const {
  return image_null_;
}
inline bool ListStyleArchive_LabelImage::image_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.LabelImage.image_null)
  return _internal_image_null();
}
inline void ListStyleArchive_LabelImage::_internal_set_image_null(bool value) {
  _has_bits_[0] |= 0x00000004u;
  image_null_ = value;
}
inline void ListStyleArchive_LabelImage::set_image_null(bool value) {
  _internal_set_image_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.LabelImage.image_null)
}

// optional .TSP.Reference database_image = 1;
inline bool ListStyleArchive_LabelImage::_internal_has_database_image() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || database_image_ != nullptr);
  return value;
}
inline bool ListStyleArchive_LabelImage::has_database_image() const {
  return _internal_has_database_image();
}
inline const ::TSP::Reference& ListStyleArchive_LabelImage::_internal_database_image() const {
  const ::TSP::Reference* p = database_image_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ListStyleArchive_LabelImage::database_image() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.LabelImage.database_image)
  return _internal_database_image();
}
inline void ListStyleArchive_LabelImage::unsafe_arena_set_allocated_database_image(
    ::TSP::Reference* database_image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_image_);
  }
  database_image_ = database_image;
  if (database_image) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ListStyleArchive.LabelImage.database_image)
}
inline ::TSP::Reference* ListStyleArchive_LabelImage::release_database_image() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = database_image_;
  database_image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ListStyleArchive_LabelImage::unsafe_arena_release_database_image() {
  // @@protoc_insertion_point(field_release:TSWP.ListStyleArchive.LabelImage.database_image)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = database_image_;
  database_image_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ListStyleArchive_LabelImage::_internal_mutable_database_image() {
  _has_bits_[0] |= 0x00000001u;
  if (database_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    database_image_ = p;
  }
  return database_image_;
}
inline ::TSP::Reference* ListStyleArchive_LabelImage::mutable_database_image() {
  // @@protoc_insertion_point(field_mutable:TSWP.ListStyleArchive.LabelImage.database_image)
  return _internal_mutable_database_image();
}
inline void ListStyleArchive_LabelImage::set_allocated_database_image(::TSP::Reference* database_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_image_);
  }
  if (database_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_image)->GetArena();
    if (message_arena != submessage_arena) {
      database_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  database_image_ = database_image;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ListStyleArchive.LabelImage.database_image)
}

// -------------------------------------------------------------------

// ListStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool ListStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ListStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& ListStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& ListStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.super)
  return _internal_super();
}
inline void ListStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ListStyleArchive.super)
}
inline ::TSS::StyleArchive* ListStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* ListStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ListStyleArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* ListStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* ListStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.ListStyleArchive.super)
  return _internal_mutable_super();
}
inline void ListStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ListStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool ListStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ListStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void ListStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.override_count)
  return _internal_override_count();
}
inline void ListStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  override_count_ = value;
}
inline void ListStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.override_count)
}

// repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
inline int ListStyleArchive::_internal_label_types_size() const {
  return label_types_.size();
}
inline int ListStyleArchive::label_types_size() const {
  return _internal_label_types_size();
}
inline void ListStyleArchive::clear_label_types() {
  label_types_.Clear();
}
inline ::TSWP::ListStyleArchive_LabelType ListStyleArchive::_internal_label_types(int index) const {
  return static_cast< ::TSWP::ListStyleArchive_LabelType >(label_types_.Get(index));
}
inline ::TSWP::ListStyleArchive_LabelType ListStyleArchive::label_types(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.label_types)
  return _internal_label_types(index);
}
inline void ListStyleArchive::set_label_types(int index, ::TSWP::ListStyleArchive_LabelType value) {
  assert(::TSWP::ListStyleArchive_LabelType_IsValid(value));
  label_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.label_types)
}
inline void ListStyleArchive::_internal_add_label_types(::TSWP::ListStyleArchive_LabelType value) {
  assert(::TSWP::ListStyleArchive_LabelType_IsValid(value));
  label_types_.Add(value);
}
inline void ListStyleArchive::add_label_types(::TSWP::ListStyleArchive_LabelType value) {
  // @@protoc_insertion_point(field_add:TSWP.ListStyleArchive.label_types)
  _internal_add_label_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ListStyleArchive::label_types() const {
  // @@protoc_insertion_point(field_list:TSWP.ListStyleArchive.label_types)
  return label_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListStyleArchive::_internal_mutable_label_types() {
  return &label_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListStyleArchive::mutable_label_types() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ListStyleArchive.label_types)
  return _internal_mutable_label_types();
}

// repeated float text_indents = 12;
inline int ListStyleArchive::_internal_text_indents_size() const {
  return text_indents_.size();
}
inline int ListStyleArchive::text_indents_size() const {
  return _internal_text_indents_size();
}
inline void ListStyleArchive::clear_text_indents() {
  text_indents_.Clear();
}
inline float ListStyleArchive::_internal_text_indents(int index) const {
  return text_indents_.Get(index);
}
inline float ListStyleArchive::text_indents(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.text_indents)
  return _internal_text_indents(index);
}
inline void ListStyleArchive::set_text_indents(int index, float value) {
  text_indents_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.text_indents)
}
inline void ListStyleArchive::_internal_add_text_indents(float value) {
  text_indents_.Add(value);
}
inline void ListStyleArchive::add_text_indents(float value) {
  _internal_add_text_indents(value);
  // @@protoc_insertion_point(field_add:TSWP.ListStyleArchive.text_indents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ListStyleArchive::_internal_text_indents() const {
  return text_indents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ListStyleArchive::text_indents() const {
  // @@protoc_insertion_point(field_list:TSWP.ListStyleArchive.text_indents)
  return _internal_text_indents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ListStyleArchive::_internal_mutable_text_indents() {
  return &text_indents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ListStyleArchive::mutable_text_indents() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ListStyleArchive.text_indents)
  return _internal_mutable_text_indents();
}

// repeated float indents = 13;
inline int ListStyleArchive::_internal_indents_size() const {
  return indents_.size();
}
inline int ListStyleArchive::indents_size() const {
  return _internal_indents_size();
}
inline void ListStyleArchive::clear_indents() {
  indents_.Clear();
}
inline float ListStyleArchive::_internal_indents(int index) const {
  return indents_.Get(index);
}
inline float ListStyleArchive::indents(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.indents)
  return _internal_indents(index);
}
inline void ListStyleArchive::set_indents(int index, float value) {
  indents_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.indents)
}
inline void ListStyleArchive::_internal_add_indents(float value) {
  indents_.Add(value);
}
inline void ListStyleArchive::add_indents(float value) {
  _internal_add_indents(value);
  // @@protoc_insertion_point(field_add:TSWP.ListStyleArchive.indents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ListStyleArchive::_internal_indents() const {
  return indents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ListStyleArchive::indents() const {
  // @@protoc_insertion_point(field_list:TSWP.ListStyleArchive.indents)
  return _internal_indents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ListStyleArchive::_internal_mutable_indents() {
  return &indents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ListStyleArchive::mutable_indents() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ListStyleArchive.indents)
  return _internal_mutable_indents();
}

// repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
inline int ListStyleArchive::_internal_geometries_size() const {
  return geometries_.size();
}
inline int ListStyleArchive::geometries_size() const {
  return _internal_geometries_size();
}
inline void ListStyleArchive::clear_geometries() {
  geometries_.Clear();
}
inline ::TSWP::ListStyleArchive_LabelGeometry* ListStyleArchive::mutable_geometries(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ListStyleArchive.geometries)
  return geometries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelGeometry >*
ListStyleArchive::mutable_geometries() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ListStyleArchive.geometries)
  return &geometries_;
}
inline const ::TSWP::ListStyleArchive_LabelGeometry& ListStyleArchive::_internal_geometries(int index) const {
  return geometries_.Get(index);
}
inline const ::TSWP::ListStyleArchive_LabelGeometry& ListStyleArchive::geometries(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.geometries)
  return _internal_geometries(index);
}
inline ::TSWP::ListStyleArchive_LabelGeometry* ListStyleArchive::_internal_add_geometries() {
  return geometries_.Add();
}
inline ::TSWP::ListStyleArchive_LabelGeometry* ListStyleArchive::add_geometries() {
  // @@protoc_insertion_point(field_add:TSWP.ListStyleArchive.geometries)
  return _internal_add_geometries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelGeometry >&
ListStyleArchive::geometries() const {
  // @@protoc_insertion_point(field_list:TSWP.ListStyleArchive.geometries)
  return geometries_;
}

// repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
inline int ListStyleArchive::_internal_number_types_size() const {
  return number_types_.size();
}
inline int ListStyleArchive::number_types_size() const {
  return _internal_number_types_size();
}
inline void ListStyleArchive::clear_number_types() {
  number_types_.Clear();
}
inline ::TSWP::ListStyleArchive_NumberType ListStyleArchive::_internal_number_types(int index) const {
  return static_cast< ::TSWP::ListStyleArchive_NumberType >(number_types_.Get(index));
}
inline ::TSWP::ListStyleArchive_NumberType ListStyleArchive::number_types(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.number_types)
  return _internal_number_types(index);
}
inline void ListStyleArchive::set_number_types(int index, ::TSWP::ListStyleArchive_NumberType value) {
  assert(::TSWP::ListStyleArchive_NumberType_IsValid(value));
  number_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.number_types)
}
inline void ListStyleArchive::_internal_add_number_types(::TSWP::ListStyleArchive_NumberType value) {
  assert(::TSWP::ListStyleArchive_NumberType_IsValid(value));
  number_types_.Add(value);
}
inline void ListStyleArchive::add_number_types(::TSWP::ListStyleArchive_NumberType value) {
  // @@protoc_insertion_point(field_add:TSWP.ListStyleArchive.number_types)
  _internal_add_number_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ListStyleArchive::number_types() const {
  // @@protoc_insertion_point(field_list:TSWP.ListStyleArchive.number_types)
  return number_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListStyleArchive::_internal_mutable_number_types() {
  return &number_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListStyleArchive::mutable_number_types() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ListStyleArchive.number_types)
  return _internal_mutable_number_types();
}

// repeated string strings = 16;
inline int ListStyleArchive::_internal_strings_size() const {
  return strings_.size();
}
inline int ListStyleArchive::strings_size() const {
  return _internal_strings_size();
}
inline void ListStyleArchive::clear_strings() {
  strings_.Clear();
}
inline std::string* ListStyleArchive::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:TSWP.ListStyleArchive.strings)
  return _internal_add_strings();
}
inline const std::string& ListStyleArchive::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const std::string& ListStyleArchive::strings(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.strings)
  return _internal_strings(index);
}
inline std::string* ListStyleArchive::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ListStyleArchive.strings)
  return strings_.Mutable(index);
}
inline void ListStyleArchive::set_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.strings)
  strings_.Mutable(index)->assign(value);
}
inline void ListStyleArchive::set_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
inline void ListStyleArchive::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSWP.ListStyleArchive.strings)
}
inline void ListStyleArchive::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSWP.ListStyleArchive.strings)
}
inline std::string* ListStyleArchive::_internal_add_strings() {
  return strings_.Add();
}
inline void ListStyleArchive::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSWP.ListStyleArchive.strings)
}
inline void ListStyleArchive::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSWP.ListStyleArchive.strings)
}
inline void ListStyleArchive::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSWP.ListStyleArchive.strings)
}
inline void ListStyleArchive::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSWP.ListStyleArchive.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListStyleArchive::strings() const {
  // @@protoc_insertion_point(field_list:TSWP.ListStyleArchive.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListStyleArchive::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ListStyleArchive.strings)
  return &strings_;
}

// repeated .TSWP.ListStyleArchive.LabelImage images = 17;
inline int ListStyleArchive::_internal_images_size() const {
  return images_.size();
}
inline int ListStyleArchive::images_size() const {
  return _internal_images_size();
}
inline void ListStyleArchive::clear_images() {
  images_.Clear();
}
inline ::TSWP::ListStyleArchive_LabelImage* ListStyleArchive::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ListStyleArchive.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelImage >*
ListStyleArchive::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ListStyleArchive.images)
  return &images_;
}
inline const ::TSWP::ListStyleArchive_LabelImage& ListStyleArchive::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::TSWP::ListStyleArchive_LabelImage& ListStyleArchive::images(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.images)
  return _internal_images(index);
}
inline ::TSWP::ListStyleArchive_LabelImage* ListStyleArchive::_internal_add_images() {
  return images_.Add();
}
inline ::TSWP::ListStyleArchive_LabelImage* ListStyleArchive::add_images() {
  // @@protoc_insertion_point(field_add:TSWP.ListStyleArchive.images)
  return _internal_add_images();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ListStyleArchive_LabelImage >&
ListStyleArchive::images() const {
  // @@protoc_insertion_point(field_list:TSWP.ListStyleArchive.images)
  return images_;
}

// optional bool shadow_null = 18;
inline bool ListStyleArchive::_internal_has_shadow_null() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ListStyleArchive::has_shadow_null() const {
  return _internal_has_shadow_null();
}
inline void ListStyleArchive::clear_shadow_null() {
  shadow_null_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ListStyleArchive::_internal_shadow_null() const {
  return shadow_null_;
}
inline bool ListStyleArchive::shadow_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.shadow_null)
  return _internal_shadow_null();
}
inline void ListStyleArchive::_internal_set_shadow_null(bool value) {
  _has_bits_[0] |= 0x00000020u;
  shadow_null_ = value;
}
inline void ListStyleArchive::set_shadow_null(bool value) {
  _internal_set_shadow_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.shadow_null)
}

// optional .TSD.ShadowArchive shadow = 19;
inline bool ListStyleArchive::_internal_has_shadow() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || shadow_ != nullptr);
  return value;
}
inline bool ListStyleArchive::has_shadow() const {
  return _internal_has_shadow();
}
inline const ::TSD::ShadowArchive& ListStyleArchive::_internal_shadow() const {
  const ::TSD::ShadowArchive* p = shadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ListStyleArchive::shadow() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.shadow)
  return _internal_shadow();
}
inline void ListStyleArchive::unsafe_arena_set_allocated_shadow(
    ::TSD::ShadowArchive* shadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadow_);
  }
  shadow_ = shadow;
  if (shadow) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ListStyleArchive.shadow)
}
inline ::TSD::ShadowArchive* ListStyleArchive::release_shadow() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = shadow_;
  shadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ListStyleArchive::unsafe_arena_release_shadow() {
  // @@protoc_insertion_point(field_release:TSWP.ListStyleArchive.shadow)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = shadow_;
  shadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ListStyleArchive::_internal_mutable_shadow() {
  _has_bits_[0] |= 0x00000004u;
  if (shadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    shadow_ = p;
  }
  return shadow_;
}
inline ::TSD::ShadowArchive* ListStyleArchive::mutable_shadow() {
  // @@protoc_insertion_point(field_mutable:TSWP.ListStyleArchive.shadow)
  return _internal_mutable_shadow();
}
inline void ListStyleArchive::set_allocated_shadow(::TSD::ShadowArchive* shadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadow_);
  }
  if (shadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadow)->GetArena();
    if (message_arena != submessage_arena) {
      shadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  shadow_ = shadow;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ListStyleArchive.shadow)
}

// optional bool font_color_null = 20;
inline bool ListStyleArchive::_internal_has_font_color_null() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ListStyleArchive::has_font_color_null() const {
  return _internal_has_font_color_null();
}
inline void ListStyleArchive::clear_font_color_null() {
  font_color_null_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ListStyleArchive::_internal_font_color_null() const {
  return font_color_null_;
}
inline bool ListStyleArchive::font_color_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.font_color_null)
  return _internal_font_color_null();
}
inline void ListStyleArchive::_internal_set_font_color_null(bool value) {
  _has_bits_[0] |= 0x00000040u;
  font_color_null_ = value;
}
inline void ListStyleArchive::set_font_color_null(bool value) {
  _internal_set_font_color_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.font_color_null)
}

// optional .TSP.Color font_color = 21;
inline bool ListStyleArchive::_internal_has_font_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || font_color_ != nullptr);
  return value;
}
inline bool ListStyleArchive::has_font_color() const {
  return _internal_has_font_color();
}
inline const ::TSP::Color& ListStyleArchive::_internal_font_color() const {
  const ::TSP::Color* p = font_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ListStyleArchive::font_color() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.font_color)
  return _internal_font_color();
}
inline void ListStyleArchive::unsafe_arena_set_allocated_font_color(
    ::TSP::Color* font_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_color_);
  }
  font_color_ = font_color;
  if (font_color) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ListStyleArchive.font_color)
}
inline ::TSP::Color* ListStyleArchive::release_font_color() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = font_color_;
  font_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* ListStyleArchive::unsafe_arena_release_font_color() {
  // @@protoc_insertion_point(field_release:TSWP.ListStyleArchive.font_color)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = font_color_;
  font_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* ListStyleArchive::_internal_mutable_font_color() {
  _has_bits_[0] |= 0x00000008u;
  if (font_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    font_color_ = p;
  }
  return font_color_;
}
inline ::TSP::Color* ListStyleArchive::mutable_font_color() {
  // @@protoc_insertion_point(field_mutable:TSWP.ListStyleArchive.font_color)
  return _internal_mutable_font_color();
}
inline void ListStyleArchive::set_allocated_font_color(::TSP::Color* font_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_color_);
  }
  if (font_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_color)->GetArena();
    if (message_arena != submessage_arena) {
      font_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  font_color_ = font_color;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ListStyleArchive.font_color)
}

// optional bool font_name_null = 22;
inline bool ListStyleArchive::_internal_has_font_name_null() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ListStyleArchive::has_font_name_null() const {
  return _internal_has_font_name_null();
}
inline void ListStyleArchive::clear_font_name_null() {
  font_name_null_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ListStyleArchive::_internal_font_name_null() const {
  return font_name_null_;
}
inline bool ListStyleArchive::font_name_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.font_name_null)
  return _internal_font_name_null();
}
inline void ListStyleArchive::_internal_set_font_name_null(bool value) {
  _has_bits_[0] |= 0x00000080u;
  font_name_null_ = value;
}
inline void ListStyleArchive::set_font_name_null(bool value) {
  _internal_set_font_name_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.font_name_null)
}

// optional string font_name = 23;
inline bool ListStyleArchive::_internal_has_font_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListStyleArchive::has_font_name() const {
  return _internal_has_font_name();
}
inline void ListStyleArchive::clear_font_name() {
  font_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListStyleArchive::font_name() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.font_name)
  return _internal_font_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ListStyleArchive::set_font_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.font_name)
}
inline std::string* ListStyleArchive::mutable_font_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.ListStyleArchive.font_name)
  return _internal_mutable_font_name();
}
inline const std::string& ListStyleArchive::_internal_font_name() const {
  return font_name_.Get();
}
inline void ListStyleArchive::_internal_set_font_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ListStyleArchive::_internal_mutable_font_name() {
  _has_bits_[0] |= 0x00000001u;
  return font_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListStyleArchive::release_font_name() {
  // @@protoc_insertion_point(field_release:TSWP.ListStyleArchive.font_name)
  if (!_internal_has_font_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return font_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListStyleArchive::set_allocated_font_name(std::string* font_name) {
  if (font_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  font_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), font_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ListStyleArchive.font_name)
}

// optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
inline bool ListStyleArchive::_internal_has_writing_direction() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ListStyleArchive::has_writing_direction() const {
  return _internal_has_writing_direction();
}
inline void ListStyleArchive::clear_writing_direction() {
  writing_direction_ = -1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::TSWP::WritingDirectionType ListStyleArchive::_internal_writing_direction() const {
  return static_cast< ::TSWP::WritingDirectionType >(writing_direction_);
}
inline ::TSWP::WritingDirectionType ListStyleArchive::writing_direction() const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.writing_direction)
  return _internal_writing_direction();
}
inline void ListStyleArchive::_internal_set_writing_direction(::TSWP::WritingDirectionType value) {
  assert(::TSWP::WritingDirectionType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  writing_direction_ = value;
}
inline void ListStyleArchive::set_writing_direction(::TSWP::WritingDirectionType value) {
  _internal_set_writing_direction(value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.writing_direction)
}

// repeated bool tiered_numbers = 25;
inline int ListStyleArchive::_internal_tiered_numbers_size() const {
  return tiered_numbers_.size();
}
inline int ListStyleArchive::tiered_numbers_size() const {
  return _internal_tiered_numbers_size();
}
inline void ListStyleArchive::clear_tiered_numbers() {
  tiered_numbers_.Clear();
}
inline bool ListStyleArchive::_internal_tiered_numbers(int index) const {
  return tiered_numbers_.Get(index);
}
inline bool ListStyleArchive::tiered_numbers(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ListStyleArchive.tiered_numbers)
  return _internal_tiered_numbers(index);
}
inline void ListStyleArchive::set_tiered_numbers(int index, bool value) {
  tiered_numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSWP.ListStyleArchive.tiered_numbers)
}
inline void ListStyleArchive::_internal_add_tiered_numbers(bool value) {
  tiered_numbers_.Add(value);
}
inline void ListStyleArchive::add_tiered_numbers(bool value) {
  _internal_add_tiered_numbers(value);
  // @@protoc_insertion_point(field_add:TSWP.ListStyleArchive.tiered_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ListStyleArchive::_internal_tiered_numbers() const {
  return tiered_numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ListStyleArchive::tiered_numbers() const {
  // @@protoc_insertion_point(field_list:TSWP.ListStyleArchive.tiered_numbers)
  return _internal_tiered_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ListStyleArchive::_internal_mutable_tiered_numbers() {
  return &tiered_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ListStyleArchive::mutable_tiered_numbers() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ListStyleArchive.tiered_numbers)
  return _internal_mutable_tiered_numbers();
}

// -------------------------------------------------------------------

// TextStylePresetArchive

// optional string preset_identifier = 1;
inline bool TextStylePresetArchive::_internal_has_preset_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TextStylePresetArchive::has_preset_identifier() const {
  return _internal_has_preset_identifier();
}
inline void TextStylePresetArchive::clear_preset_identifier() {
  preset_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TextStylePresetArchive::preset_identifier() const {
  // @@protoc_insertion_point(field_get:TSWP.TextStylePresetArchive.preset_identifier)
  return _internal_preset_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TextStylePresetArchive::set_preset_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 preset_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TextStylePresetArchive.preset_identifier)
}
inline std::string* TextStylePresetArchive::mutable_preset_identifier() {
  // @@protoc_insertion_point(field_mutable:TSWP.TextStylePresetArchive.preset_identifier)
  return _internal_mutable_preset_identifier();
}
inline const std::string& TextStylePresetArchive::_internal_preset_identifier() const {
  return preset_identifier_.Get();
}
inline void TextStylePresetArchive::_internal_set_preset_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  preset_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TextStylePresetArchive::_internal_mutable_preset_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return preset_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextStylePresetArchive::release_preset_identifier() {
  // @@protoc_insertion_point(field_release:TSWP.TextStylePresetArchive.preset_identifier)
  if (!_internal_has_preset_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return preset_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextStylePresetArchive::set_allocated_preset_identifier(std::string* preset_identifier) {
  if (preset_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preset_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preset_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextStylePresetArchive.preset_identifier)
}

// optional .TSP.Reference paragraph_style = 2;
inline bool TextStylePresetArchive::_internal_has_paragraph_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || paragraph_style_ != nullptr);
  return value;
}
inline bool TextStylePresetArchive::has_paragraph_style() const {
  return _internal_has_paragraph_style();
}
inline const ::TSP::Reference& TextStylePresetArchive::_internal_paragraph_style() const {
  const ::TSP::Reference* p = paragraph_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TextStylePresetArchive::paragraph_style() const {
  // @@protoc_insertion_point(field_get:TSWP.TextStylePresetArchive.paragraph_style)
  return _internal_paragraph_style();
}
inline void TextStylePresetArchive::unsafe_arena_set_allocated_paragraph_style(
    ::TSP::Reference* paragraph_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_style_);
  }
  paragraph_style_ = paragraph_style;
  if (paragraph_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextStylePresetArchive.paragraph_style)
}
inline ::TSP::Reference* TextStylePresetArchive::release_paragraph_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = paragraph_style_;
  paragraph_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TextStylePresetArchive::unsafe_arena_release_paragraph_style() {
  // @@protoc_insertion_point(field_release:TSWP.TextStylePresetArchive.paragraph_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = paragraph_style_;
  paragraph_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TextStylePresetArchive::_internal_mutable_paragraph_style() {
  _has_bits_[0] |= 0x00000002u;
  if (paragraph_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    paragraph_style_ = p;
  }
  return paragraph_style_;
}
inline ::TSP::Reference* TextStylePresetArchive::mutable_paragraph_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.TextStylePresetArchive.paragraph_style)
  return _internal_mutable_paragraph_style();
}
inline void TextStylePresetArchive::set_allocated_paragraph_style(::TSP::Reference* paragraph_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_style_);
  }
  if (paragraph_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_style)->GetArena();
    if (message_arena != submessage_arena) {
      paragraph_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paragraph_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  paragraph_style_ = paragraph_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextStylePresetArchive.paragraph_style)
}

// optional .TSP.Reference list_style = 3;
inline bool TextStylePresetArchive::_internal_has_list_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || list_style_ != nullptr);
  return value;
}
inline bool TextStylePresetArchive::has_list_style() const {
  return _internal_has_list_style();
}
inline const ::TSP::Reference& TextStylePresetArchive::_internal_list_style() const {
  const ::TSP::Reference* p = list_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TextStylePresetArchive::list_style() const {
  // @@protoc_insertion_point(field_get:TSWP.TextStylePresetArchive.list_style)
  return _internal_list_style();
}
inline void TextStylePresetArchive::unsafe_arena_set_allocated_list_style(
    ::TSP::Reference* list_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style_);
  }
  list_style_ = list_style;
  if (list_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextStylePresetArchive.list_style)
}
inline ::TSP::Reference* TextStylePresetArchive::release_list_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = list_style_;
  list_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TextStylePresetArchive::unsafe_arena_release_list_style() {
  // @@protoc_insertion_point(field_release:TSWP.TextStylePresetArchive.list_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = list_style_;
  list_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TextStylePresetArchive::_internal_mutable_list_style() {
  _has_bits_[0] |= 0x00000004u;
  if (list_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    list_style_ = p;
  }
  return list_style_;
}
inline ::TSP::Reference* TextStylePresetArchive::mutable_list_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.TextStylePresetArchive.list_style)
  return _internal_mutable_list_style();
}
inline void TextStylePresetArchive::set_allocated_list_style(::TSP::Reference* list_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style_);
  }
  if (list_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style)->GetArena();
    if (message_arena != submessage_arena) {
      list_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  list_style_ = list_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextStylePresetArchive.list_style)
}

// -------------------------------------------------------------------

// ColumnsArchive_EqualColumnsArchive

// optional uint32 count = 1;
inline bool ColumnsArchive_EqualColumnsArchive::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColumnsArchive_EqualColumnsArchive::has_count() const {
  return _internal_has_count();
}
inline void ColumnsArchive_EqualColumnsArchive::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnsArchive_EqualColumnsArchive::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnsArchive_EqualColumnsArchive::count() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnsArchive.EqualColumnsArchive.count)
  return _internal_count();
}
inline void ColumnsArchive_EqualColumnsArchive::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void ColumnsArchive_EqualColumnsArchive::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnsArchive.EqualColumnsArchive.count)
}

// optional float gap = 2;
inline bool ColumnsArchive_EqualColumnsArchive::_internal_has_gap() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColumnsArchive_EqualColumnsArchive::has_gap() const {
  return _internal_has_gap();
}
inline void ColumnsArchive_EqualColumnsArchive::clear_gap() {
  gap_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ColumnsArchive_EqualColumnsArchive::_internal_gap() const {
  return gap_;
}
inline float ColumnsArchive_EqualColumnsArchive::gap() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnsArchive.EqualColumnsArchive.gap)
  return _internal_gap();
}
inline void ColumnsArchive_EqualColumnsArchive::_internal_set_gap(float value) {
  _has_bits_[0] |= 0x00000002u;
  gap_ = value;
}
inline void ColumnsArchive_EqualColumnsArchive::set_gap(float value) {
  _internal_set_gap(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnsArchive.EqualColumnsArchive.gap)
}

// -------------------------------------------------------------------

// ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive

// required float gap = 1;
inline bool ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_internal_has_gap() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::has_gap() const {
  return _internal_has_gap();
}
inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::clear_gap() {
  gap_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_internal_gap() const {
  return gap_;
}
inline float ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::gap() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive.gap)
  return _internal_gap();
}
inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_internal_set_gap(float value) {
  _has_bits_[0] |= 0x00000001u;
  gap_ = value;
}
inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::set_gap(float value) {
  _internal_set_gap(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive.gap)
}

// required float width = 2;
inline bool ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::has_width() const {
  return _internal_has_width();
}
inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_internal_width() const {
  return width_;
}
inline float ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::width() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive.width)
  return _internal_width();
}
inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive.width)
}

// -------------------------------------------------------------------

// ColumnsArchive_NonEqualColumnsArchive

// required float first = 1;
inline bool ColumnsArchive_NonEqualColumnsArchive::_internal_has_first() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColumnsArchive_NonEqualColumnsArchive::has_first() const {
  return _internal_has_first();
}
inline void ColumnsArchive_NonEqualColumnsArchive::clear_first() {
  first_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ColumnsArchive_NonEqualColumnsArchive::_internal_first() const {
  return first_;
}
inline float ColumnsArchive_NonEqualColumnsArchive::first() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnsArchive.NonEqualColumnsArchive.first)
  return _internal_first();
}
inline void ColumnsArchive_NonEqualColumnsArchive::_internal_set_first(float value) {
  _has_bits_[0] |= 0x00000001u;
  first_ = value;
}
inline void ColumnsArchive_NonEqualColumnsArchive::set_first(float value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnsArchive.NonEqualColumnsArchive.first)
}

// repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
inline int ColumnsArchive_NonEqualColumnsArchive::_internal_following_size() const {
  return following_.size();
}
inline int ColumnsArchive_NonEqualColumnsArchive::following_size() const {
  return _internal_following_size();
}
inline void ColumnsArchive_NonEqualColumnsArchive::clear_following() {
  following_.Clear();
}
inline ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* ColumnsArchive_NonEqualColumnsArchive::mutable_following(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ColumnsArchive.NonEqualColumnsArchive.following)
  return following_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive >*
ColumnsArchive_NonEqualColumnsArchive::mutable_following() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ColumnsArchive.NonEqualColumnsArchive.following)
  return &following_;
}
inline const ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& ColumnsArchive_NonEqualColumnsArchive::_internal_following(int index) const {
  return following_.Get(index);
}
inline const ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& ColumnsArchive_NonEqualColumnsArchive::following(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnsArchive.NonEqualColumnsArchive.following)
  return _internal_following(index);
}
inline ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* ColumnsArchive_NonEqualColumnsArchive::_internal_add_following() {
  return following_.Add();
}
inline ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* ColumnsArchive_NonEqualColumnsArchive::add_following() {
  // @@protoc_insertion_point(field_add:TSWP.ColumnsArchive.NonEqualColumnsArchive.following)
  return _internal_add_following();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive >&
ColumnsArchive_NonEqualColumnsArchive::following() const {
  // @@protoc_insertion_point(field_list:TSWP.ColumnsArchive.NonEqualColumnsArchive.following)
  return following_;
}

// -------------------------------------------------------------------

// ColumnsArchive

// optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
inline bool ColumnsArchive::_internal_has_equal_columns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || equal_columns_ != nullptr);
  return value;
}
inline bool ColumnsArchive::has_equal_columns() const {
  return _internal_has_equal_columns();
}
inline void ColumnsArchive::clear_equal_columns() {
  if (equal_columns_ != nullptr) equal_columns_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::ColumnsArchive_EqualColumnsArchive& ColumnsArchive::_internal_equal_columns() const {
  const ::TSWP::ColumnsArchive_EqualColumnsArchive* p = equal_columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ColumnsArchive_EqualColumnsArchive&>(
      ::TSWP::_ColumnsArchive_EqualColumnsArchive_default_instance_);
}
inline const ::TSWP::ColumnsArchive_EqualColumnsArchive& ColumnsArchive::equal_columns() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnsArchive.equal_columns)
  return _internal_equal_columns();
}
inline void ColumnsArchive::unsafe_arena_set_allocated_equal_columns(
    ::TSWP::ColumnsArchive_EqualColumnsArchive* equal_columns) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equal_columns_);
  }
  equal_columns_ = equal_columns;
  if (equal_columns) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ColumnsArchive.equal_columns)
}
inline ::TSWP::ColumnsArchive_EqualColumnsArchive* ColumnsArchive::release_equal_columns() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ColumnsArchive_EqualColumnsArchive* temp = equal_columns_;
  equal_columns_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ColumnsArchive_EqualColumnsArchive* ColumnsArchive::unsafe_arena_release_equal_columns() {
  // @@protoc_insertion_point(field_release:TSWP.ColumnsArchive.equal_columns)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ColumnsArchive_EqualColumnsArchive* temp = equal_columns_;
  equal_columns_ = nullptr;
  return temp;
}
inline ::TSWP::ColumnsArchive_EqualColumnsArchive* ColumnsArchive::_internal_mutable_equal_columns() {
  _has_bits_[0] |= 0x00000001u;
  if (equal_columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ColumnsArchive_EqualColumnsArchive>(GetArena());
    equal_columns_ = p;
  }
  return equal_columns_;
}
inline ::TSWP::ColumnsArchive_EqualColumnsArchive* ColumnsArchive::mutable_equal_columns() {
  // @@protoc_insertion_point(field_mutable:TSWP.ColumnsArchive.equal_columns)
  return _internal_mutable_equal_columns();
}
inline void ColumnsArchive::set_allocated_equal_columns(::TSWP::ColumnsArchive_EqualColumnsArchive* equal_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete equal_columns_;
  }
  if (equal_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(equal_columns);
    if (message_arena != submessage_arena) {
      equal_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equal_columns, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  equal_columns_ = equal_columns;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ColumnsArchive.equal_columns)
}

// optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
inline bool ColumnsArchive::_internal_has_non_equal_columns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || non_equal_columns_ != nullptr);
  return value;
}
inline bool ColumnsArchive::has_non_equal_columns() const {
  return _internal_has_non_equal_columns();
}
inline void ColumnsArchive::clear_non_equal_columns() {
  if (non_equal_columns_ != nullptr) non_equal_columns_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::ColumnsArchive_NonEqualColumnsArchive& ColumnsArchive::_internal_non_equal_columns() const {
  const ::TSWP::ColumnsArchive_NonEqualColumnsArchive* p = non_equal_columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ColumnsArchive_NonEqualColumnsArchive&>(
      ::TSWP::_ColumnsArchive_NonEqualColumnsArchive_default_instance_);
}
inline const ::TSWP::ColumnsArchive_NonEqualColumnsArchive& ColumnsArchive::non_equal_columns() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnsArchive.non_equal_columns)
  return _internal_non_equal_columns();
}
inline void ColumnsArchive::unsafe_arena_set_allocated_non_equal_columns(
    ::TSWP::ColumnsArchive_NonEqualColumnsArchive* non_equal_columns) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_equal_columns_);
  }
  non_equal_columns_ = non_equal_columns;
  if (non_equal_columns) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ColumnsArchive.non_equal_columns)
}
inline ::TSWP::ColumnsArchive_NonEqualColumnsArchive* ColumnsArchive::release_non_equal_columns() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ColumnsArchive_NonEqualColumnsArchive* temp = non_equal_columns_;
  non_equal_columns_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ColumnsArchive_NonEqualColumnsArchive* ColumnsArchive::unsafe_arena_release_non_equal_columns() {
  // @@protoc_insertion_point(field_release:TSWP.ColumnsArchive.non_equal_columns)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ColumnsArchive_NonEqualColumnsArchive* temp = non_equal_columns_;
  non_equal_columns_ = nullptr;
  return temp;
}
inline ::TSWP::ColumnsArchive_NonEqualColumnsArchive* ColumnsArchive::_internal_mutable_non_equal_columns() {
  _has_bits_[0] |= 0x00000002u;
  if (non_equal_columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ColumnsArchive_NonEqualColumnsArchive>(GetArena());
    non_equal_columns_ = p;
  }
  return non_equal_columns_;
}
inline ::TSWP::ColumnsArchive_NonEqualColumnsArchive* ColumnsArchive::mutable_non_equal_columns() {
  // @@protoc_insertion_point(field_mutable:TSWP.ColumnsArchive.non_equal_columns)
  return _internal_mutable_non_equal_columns();
}
inline void ColumnsArchive::set_allocated_non_equal_columns(::TSWP::ColumnsArchive_NonEqualColumnsArchive* non_equal_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete non_equal_columns_;
  }
  if (non_equal_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(non_equal_columns);
    if (message_arena != submessage_arena) {
      non_equal_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_equal_columns, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  non_equal_columns_ = non_equal_columns;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ColumnsArchive.non_equal_columns)
}

// -------------------------------------------------------------------

// PaddingArchive

// optional float left = 1;
inline bool PaddingArchive::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PaddingArchive::has_left() const {
  return _internal_has_left();
}
inline void PaddingArchive::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PaddingArchive::_internal_left() const {
  return left_;
}
inline float PaddingArchive::left() const {
  // @@protoc_insertion_point(field_get:TSWP.PaddingArchive.left)
  return _internal_left();
}
inline void PaddingArchive::_internal_set_left(float value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void PaddingArchive::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:TSWP.PaddingArchive.left)
}

// optional float top = 2;
inline bool PaddingArchive::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PaddingArchive::has_top() const {
  return _internal_has_top();
}
inline void PaddingArchive::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PaddingArchive::_internal_top() const {
  return top_;
}
inline float PaddingArchive::top() const {
  // @@protoc_insertion_point(field_get:TSWP.PaddingArchive.top)
  return _internal_top();
}
inline void PaddingArchive::_internal_set_top(float value) {
  _has_bits_[0] |= 0x00000002u;
  top_ = value;
}
inline void PaddingArchive::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:TSWP.PaddingArchive.top)
}

// optional float right = 3;
inline bool PaddingArchive::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PaddingArchive::has_right() const {
  return _internal_has_right();
}
inline void PaddingArchive::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PaddingArchive::_internal_right() const {
  return right_;
}
inline float PaddingArchive::right() const {
  // @@protoc_insertion_point(field_get:TSWP.PaddingArchive.right)
  return _internal_right();
}
inline void PaddingArchive::_internal_set_right(float value) {
  _has_bits_[0] |= 0x00000004u;
  right_ = value;
}
inline void PaddingArchive::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:TSWP.PaddingArchive.right)
}

// optional float bottom = 4;
inline bool PaddingArchive::_internal_has_bottom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PaddingArchive::has_bottom() const {
  return _internal_has_bottom();
}
inline void PaddingArchive::clear_bottom() {
  bottom_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PaddingArchive::_internal_bottom() const {
  return bottom_;
}
inline float PaddingArchive::bottom() const {
  // @@protoc_insertion_point(field_get:TSWP.PaddingArchive.bottom)
  return _internal_bottom();
}
inline void PaddingArchive::_internal_set_bottom(float value) {
  _has_bits_[0] |= 0x00000008u;
  bottom_ = value;
}
inline void PaddingArchive::set_bottom(float value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:TSWP.PaddingArchive.bottom)
}

// -------------------------------------------------------------------

// ColumnStylePropertiesArchive

// optional bool continuous = 1;
inline bool ColumnStylePropertiesArchive::_internal_has_continuous() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ColumnStylePropertiesArchive::has_continuous() const {
  return _internal_has_continuous();
}
inline void ColumnStylePropertiesArchive::clear_continuous() {
  continuous_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ColumnStylePropertiesArchive::_internal_continuous() const {
  return continuous_;
}
inline bool ColumnStylePropertiesArchive::continuous() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.continuous)
  return _internal_continuous();
}
inline void ColumnStylePropertiesArchive::_internal_set_continuous(bool value) {
  _has_bits_[0] |= 0x00000008u;
  continuous_ = value;
}
inline void ColumnStylePropertiesArchive::set_continuous(bool value) {
  _internal_set_continuous(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStylePropertiesArchive.continuous)
}

// optional bool shrink_to_fit = 2;
inline bool ColumnStylePropertiesArchive::_internal_has_shrink_to_fit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ColumnStylePropertiesArchive::has_shrink_to_fit() const {
  return _internal_has_shrink_to_fit();
}
inline void ColumnStylePropertiesArchive::clear_shrink_to_fit() {
  shrink_to_fit_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ColumnStylePropertiesArchive::_internal_shrink_to_fit() const {
  return shrink_to_fit_;
}
inline bool ColumnStylePropertiesArchive::shrink_to_fit() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.shrink_to_fit)
  return _internal_shrink_to_fit();
}
inline void ColumnStylePropertiesArchive::_internal_set_shrink_to_fit(bool value) {
  _has_bits_[0] |= 0x00000010u;
  shrink_to_fit_ = value;
}
inline void ColumnStylePropertiesArchive::set_shrink_to_fit(bool value) {
  _internal_set_shrink_to_fit(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStylePropertiesArchive.shrink_to_fit)
}

// optional bool vertical_text = 3;
inline bool ColumnStylePropertiesArchive::_internal_has_vertical_text() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ColumnStylePropertiesArchive::has_vertical_text() const {
  return _internal_has_vertical_text();
}
inline void ColumnStylePropertiesArchive::clear_vertical_text() {
  vertical_text_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ColumnStylePropertiesArchive::_internal_vertical_text() const {
  return vertical_text_;
}
inline bool ColumnStylePropertiesArchive::vertical_text() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.vertical_text)
  return _internal_vertical_text();
}
inline void ColumnStylePropertiesArchive::_internal_set_vertical_text(bool value) {
  _has_bits_[0] |= 0x00000020u;
  vertical_text_ = value;
}
inline void ColumnStylePropertiesArchive::set_vertical_text(bool value) {
  _internal_set_vertical_text(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStylePropertiesArchive.vertical_text)
}

// optional float min_horizontal_inset = 4;
inline bool ColumnStylePropertiesArchive::_internal_has_min_horizontal_inset() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ColumnStylePropertiesArchive::has_min_horizontal_inset() const {
  return _internal_has_min_horizontal_inset();
}
inline void ColumnStylePropertiesArchive::clear_min_horizontal_inset() {
  min_horizontal_inset_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ColumnStylePropertiesArchive::_internal_min_horizontal_inset() const {
  return min_horizontal_inset_;
}
inline float ColumnStylePropertiesArchive::min_horizontal_inset() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.min_horizontal_inset)
  return _internal_min_horizontal_inset();
}
inline void ColumnStylePropertiesArchive::_internal_set_min_horizontal_inset(float value) {
  _has_bits_[0] |= 0x00000080u;
  min_horizontal_inset_ = value;
}
inline void ColumnStylePropertiesArchive::set_min_horizontal_inset(float value) {
  _internal_set_min_horizontal_inset(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStylePropertiesArchive.min_horizontal_inset)
}

// optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
inline bool ColumnStylePropertiesArchive::_internal_has_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ColumnStylePropertiesArchive::has_vertical_alignment() const {
  return _internal_has_vertical_alignment();
}
inline void ColumnStylePropertiesArchive::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::_internal_vertical_alignment() const {
  return static_cast< ::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType >(vertical_alignment_);
}
inline ::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::vertical_alignment() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.vertical_alignment)
  return _internal_vertical_alignment();
}
inline void ColumnStylePropertiesArchive::_internal_set_vertical_alignment(::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType value) {
  assert(::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  vertical_alignment_ = value;
}
inline void ColumnStylePropertiesArchive::set_vertical_alignment(::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType value) {
  _internal_set_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStylePropertiesArchive.vertical_alignment)
}

// optional bool columns_null = 6;
inline bool ColumnStylePropertiesArchive::_internal_has_columns_null() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ColumnStylePropertiesArchive::has_columns_null() const {
  return _internal_has_columns_null();
}
inline void ColumnStylePropertiesArchive::clear_columns_null() {
  columns_null_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ColumnStylePropertiesArchive::_internal_columns_null() const {
  return columns_null_;
}
inline bool ColumnStylePropertiesArchive::columns_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.columns_null)
  return _internal_columns_null();
}
inline void ColumnStylePropertiesArchive::_internal_set_columns_null(bool value) {
  _has_bits_[0] |= 0x00000040u;
  columns_null_ = value;
}
inline void ColumnStylePropertiesArchive::set_columns_null(bool value) {
  _internal_set_columns_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStylePropertiesArchive.columns_null)
}

// optional .TSWP.ColumnsArchive columns = 7;
inline bool ColumnStylePropertiesArchive::_internal_has_columns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || columns_ != nullptr);
  return value;
}
inline bool ColumnStylePropertiesArchive::has_columns() const {
  return _internal_has_columns();
}
inline void ColumnStylePropertiesArchive::clear_columns() {
  if (columns_ != nullptr) columns_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::ColumnsArchive& ColumnStylePropertiesArchive::_internal_columns() const {
  const ::TSWP::ColumnsArchive* p = columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ColumnsArchive&>(
      ::TSWP::_ColumnsArchive_default_instance_);
}
inline const ::TSWP::ColumnsArchive& ColumnStylePropertiesArchive::columns() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.columns)
  return _internal_columns();
}
inline void ColumnStylePropertiesArchive::unsafe_arena_set_allocated_columns(
    ::TSWP::ColumnsArchive* columns) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columns_);
  }
  columns_ = columns;
  if (columns) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ColumnStylePropertiesArchive.columns)
}
inline ::TSWP::ColumnsArchive* ColumnStylePropertiesArchive::release_columns() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ColumnsArchive* temp = columns_;
  columns_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ColumnsArchive* ColumnStylePropertiesArchive::unsafe_arena_release_columns() {
  // @@protoc_insertion_point(field_release:TSWP.ColumnStylePropertiesArchive.columns)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ColumnsArchive* temp = columns_;
  columns_ = nullptr;
  return temp;
}
inline ::TSWP::ColumnsArchive* ColumnStylePropertiesArchive::_internal_mutable_columns() {
  _has_bits_[0] |= 0x00000001u;
  if (columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ColumnsArchive>(GetArena());
    columns_ = p;
  }
  return columns_;
}
inline ::TSWP::ColumnsArchive* ColumnStylePropertiesArchive::mutable_columns() {
  // @@protoc_insertion_point(field_mutable:TSWP.ColumnStylePropertiesArchive.columns)
  return _internal_mutable_columns();
}
inline void ColumnStylePropertiesArchive::set_allocated_columns(::TSWP::ColumnsArchive* columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete columns_;
  }
  if (columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(columns);
    if (message_arena != submessage_arena) {
      columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columns, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  columns_ = columns;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ColumnStylePropertiesArchive.columns)
}

// optional bool margins_null = 8;
inline bool ColumnStylePropertiesArchive::_internal_has_margins_null() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ColumnStylePropertiesArchive::has_margins_null() const {
  return _internal_has_margins_null();
}
inline void ColumnStylePropertiesArchive::clear_margins_null() {
  margins_null_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ColumnStylePropertiesArchive::_internal_margins_null() const {
  return margins_null_;
}
inline bool ColumnStylePropertiesArchive::margins_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.margins_null)
  return _internal_margins_null();
}
inline void ColumnStylePropertiesArchive::_internal_set_margins_null(bool value) {
  _has_bits_[0] |= 0x00000200u;
  margins_null_ = value;
}
inline void ColumnStylePropertiesArchive::set_margins_null(bool value) {
  _internal_set_margins_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStylePropertiesArchive.margins_null)
}

// optional .TSWP.PaddingArchive margins = 9;
inline bool ColumnStylePropertiesArchive::_internal_has_margins() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || margins_ != nullptr);
  return value;
}
inline bool ColumnStylePropertiesArchive::has_margins() const {
  return _internal_has_margins();
}
inline void ColumnStylePropertiesArchive::clear_margins() {
  if (margins_ != nullptr) margins_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::PaddingArchive& ColumnStylePropertiesArchive::_internal_margins() const {
  const ::TSWP::PaddingArchive* p = margins_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PaddingArchive&>(
      ::TSWP::_PaddingArchive_default_instance_);
}
inline const ::TSWP::PaddingArchive& ColumnStylePropertiesArchive::margins() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.margins)
  return _internal_margins();
}
inline void ColumnStylePropertiesArchive::unsafe_arena_set_allocated_margins(
    ::TSWP::PaddingArchive* margins) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(margins_);
  }
  margins_ = margins;
  if (margins) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ColumnStylePropertiesArchive.margins)
}
inline ::TSWP::PaddingArchive* ColumnStylePropertiesArchive::release_margins() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::PaddingArchive* temp = margins_;
  margins_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PaddingArchive* ColumnStylePropertiesArchive::unsafe_arena_release_margins() {
  // @@protoc_insertion_point(field_release:TSWP.ColumnStylePropertiesArchive.margins)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::PaddingArchive* temp = margins_;
  margins_ = nullptr;
  return temp;
}
inline ::TSWP::PaddingArchive* ColumnStylePropertiesArchive::_internal_mutable_margins() {
  _has_bits_[0] |= 0x00000002u;
  if (margins_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PaddingArchive>(GetArena());
    margins_ = p;
  }
  return margins_;
}
inline ::TSWP::PaddingArchive* ColumnStylePropertiesArchive::mutable_margins() {
  // @@protoc_insertion_point(field_mutable:TSWP.ColumnStylePropertiesArchive.margins)
  return _internal_mutable_margins();
}
inline void ColumnStylePropertiesArchive::set_allocated_margins(::TSWP::PaddingArchive* margins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete margins_;
  }
  if (margins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(margins);
    if (message_arena != submessage_arena) {
      margins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, margins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  margins_ = margins;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ColumnStylePropertiesArchive.margins)
}

// optional bool padding_null = 10;
inline bool ColumnStylePropertiesArchive::_internal_has_padding_null() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ColumnStylePropertiesArchive::has_padding_null() const {
  return _internal_has_padding_null();
}
inline void ColumnStylePropertiesArchive::clear_padding_null() {
  padding_null_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ColumnStylePropertiesArchive::_internal_padding_null() const {
  return padding_null_;
}
inline bool ColumnStylePropertiesArchive::padding_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.padding_null)
  return _internal_padding_null();
}
inline void ColumnStylePropertiesArchive::_internal_set_padding_null(bool value) {
  _has_bits_[0] |= 0x00000400u;
  padding_null_ = value;
}
inline void ColumnStylePropertiesArchive::set_padding_null(bool value) {
  _internal_set_padding_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStylePropertiesArchive.padding_null)
}

// optional .TSWP.PaddingArchive padding = 11;
inline bool ColumnStylePropertiesArchive::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || padding_ != nullptr);
  return value;
}
inline bool ColumnStylePropertiesArchive::has_padding() const {
  return _internal_has_padding();
}
inline void ColumnStylePropertiesArchive::clear_padding() {
  if (padding_ != nullptr) padding_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::PaddingArchive& ColumnStylePropertiesArchive::_internal_padding() const {
  const ::TSWP::PaddingArchive* p = padding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PaddingArchive&>(
      ::TSWP::_PaddingArchive_default_instance_);
}
inline const ::TSWP::PaddingArchive& ColumnStylePropertiesArchive::padding() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.padding)
  return _internal_padding();
}
inline void ColumnStylePropertiesArchive::unsafe_arena_set_allocated_padding(
    ::TSWP::PaddingArchive* padding) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(padding_);
  }
  padding_ = padding;
  if (padding) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ColumnStylePropertiesArchive.padding)
}
inline ::TSWP::PaddingArchive* ColumnStylePropertiesArchive::release_padding() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::PaddingArchive* temp = padding_;
  padding_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PaddingArchive* ColumnStylePropertiesArchive::unsafe_arena_release_padding() {
  // @@protoc_insertion_point(field_release:TSWP.ColumnStylePropertiesArchive.padding)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::PaddingArchive* temp = padding_;
  padding_ = nullptr;
  return temp;
}
inline ::TSWP::PaddingArchive* ColumnStylePropertiesArchive::_internal_mutable_padding() {
  _has_bits_[0] |= 0x00000004u;
  if (padding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PaddingArchive>(GetArena());
    padding_ = p;
  }
  return padding_;
}
inline ::TSWP::PaddingArchive* ColumnStylePropertiesArchive::mutable_padding() {
  // @@protoc_insertion_point(field_mutable:TSWP.ColumnStylePropertiesArchive.padding)
  return _internal_mutable_padding();
}
inline void ColumnStylePropertiesArchive::set_allocated_padding(::TSWP::PaddingArchive* padding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete padding_;
  }
  if (padding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(padding);
    if (message_arena != submessage_arena) {
      padding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, padding, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  padding_ = padding;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ColumnStylePropertiesArchive.padding)
}

// optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
inline bool ColumnStylePropertiesArchive::_internal_has_writing_direction() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ColumnStylePropertiesArchive::has_writing_direction() const {
  return _internal_has_writing_direction();
}
inline void ColumnStylePropertiesArchive::clear_writing_direction() {
  writing_direction_ = -1;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::TSWP::WritingDirectionType ColumnStylePropertiesArchive::_internal_writing_direction() const {
  return static_cast< ::TSWP::WritingDirectionType >(writing_direction_);
}
inline ::TSWP::WritingDirectionType ColumnStylePropertiesArchive::writing_direction() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStylePropertiesArchive.writing_direction)
  return _internal_writing_direction();
}
inline void ColumnStylePropertiesArchive::_internal_set_writing_direction(::TSWP::WritingDirectionType value) {
  assert(::TSWP::WritingDirectionType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  writing_direction_ = value;
}
inline void ColumnStylePropertiesArchive::set_writing_direction(::TSWP::WritingDirectionType value) {
  _internal_set_writing_direction(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStylePropertiesArchive.writing_direction)
}

// -------------------------------------------------------------------

// ColumnStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool ColumnStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ColumnStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& ColumnStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& ColumnStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStyleArchive.super)
  return _internal_super();
}
inline void ColumnStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ColumnStyleArchive.super)
}
inline ::TSS::StyleArchive* ColumnStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* ColumnStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ColumnStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* ColumnStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* ColumnStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.ColumnStyleArchive.super)
  return _internal_mutable_super();
}
inline void ColumnStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ColumnStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool ColumnStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ColumnStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void ColumnStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStyleArchive.override_count)
  return _internal_override_count();
}
inline void ColumnStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  override_count_ = value;
}
inline void ColumnStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:TSWP.ColumnStyleArchive.override_count)
}

// optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
inline bool ColumnStyleArchive::_internal_has_column_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || column_properties_ != nullptr);
  return value;
}
inline bool ColumnStyleArchive::has_column_properties() const {
  return _internal_has_column_properties();
}
inline void ColumnStyleArchive::clear_column_properties() {
  if (column_properties_ != nullptr) column_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::ColumnStylePropertiesArchive& ColumnStyleArchive::_internal_column_properties() const {
  const ::TSWP::ColumnStylePropertiesArchive* p = column_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ColumnStylePropertiesArchive&>(
      ::TSWP::_ColumnStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ColumnStylePropertiesArchive& ColumnStyleArchive::column_properties() const {
  // @@protoc_insertion_point(field_get:TSWP.ColumnStyleArchive.column_properties)
  return _internal_column_properties();
}
inline void ColumnStyleArchive::unsafe_arena_set_allocated_column_properties(
    ::TSWP::ColumnStylePropertiesArchive* column_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_properties_);
  }
  column_properties_ = column_properties;
  if (column_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ColumnStyleArchive.column_properties)
}
inline ::TSWP::ColumnStylePropertiesArchive* ColumnStyleArchive::release_column_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ColumnStylePropertiesArchive* temp = column_properties_;
  column_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ColumnStylePropertiesArchive* ColumnStyleArchive::unsafe_arena_release_column_properties() {
  // @@protoc_insertion_point(field_release:TSWP.ColumnStyleArchive.column_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ColumnStylePropertiesArchive* temp = column_properties_;
  column_properties_ = nullptr;
  return temp;
}
inline ::TSWP::ColumnStylePropertiesArchive* ColumnStyleArchive::_internal_mutable_column_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (column_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ColumnStylePropertiesArchive>(GetArena());
    column_properties_ = p;
  }
  return column_properties_;
}
inline ::TSWP::ColumnStylePropertiesArchive* ColumnStyleArchive::mutable_column_properties() {
  // @@protoc_insertion_point(field_mutable:TSWP.ColumnStyleArchive.column_properties)
  return _internal_mutable_column_properties();
}
inline void ColumnStyleArchive::set_allocated_column_properties(::TSWP::ColumnStylePropertiesArchive* column_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete column_properties_;
  }
  if (column_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(column_properties);
    if (message_arena != submessage_arena) {
      column_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  column_properties_ = column_properties;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ColumnStyleArchive.column_properties)
}

// -------------------------------------------------------------------

// ShapeStylePropertiesArchive

// optional bool shrink_to_fit = 1;
inline bool ShapeStylePropertiesArchive::_internal_has_shrink_to_fit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShapeStylePropertiesArchive::has_shrink_to_fit() const {
  return _internal_has_shrink_to_fit();
}
inline void ShapeStylePropertiesArchive::clear_shrink_to_fit() {
  shrink_to_fit_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ShapeStylePropertiesArchive::_internal_shrink_to_fit() const {
  return shrink_to_fit_;
}
inline bool ShapeStylePropertiesArchive::shrink_to_fit() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.shrink_to_fit)
  return _internal_shrink_to_fit();
}
inline void ShapeStylePropertiesArchive::_internal_set_shrink_to_fit(bool value) {
  _has_bits_[0] |= 0x00000010u;
  shrink_to_fit_ = value;
}
inline void ShapeStylePropertiesArchive::set_shrink_to_fit(bool value) {
  _internal_set_shrink_to_fit(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeStylePropertiesArchive.shrink_to_fit)
}

// optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
inline bool ShapeStylePropertiesArchive::_internal_has_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShapeStylePropertiesArchive::has_vertical_alignment() const {
  return _internal_has_vertical_alignment();
}
inline void ShapeStylePropertiesArchive::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::_internal_vertical_alignment() const {
  return static_cast< ::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType >(vertical_alignment_);
}
inline ::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::vertical_alignment() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.vertical_alignment)
  return _internal_vertical_alignment();
}
inline void ShapeStylePropertiesArchive::_internal_set_vertical_alignment(::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType value) {
  assert(::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  vertical_alignment_ = value;
}
inline void ShapeStylePropertiesArchive::set_vertical_alignment(::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType value) {
  _internal_set_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeStylePropertiesArchive.vertical_alignment)
}

// optional bool columns_null = 3;
inline bool ShapeStylePropertiesArchive::_internal_has_columns_null() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShapeStylePropertiesArchive::has_columns_null() const {
  return _internal_has_columns_null();
}
inline void ShapeStylePropertiesArchive::clear_columns_null() {
  columns_null_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ShapeStylePropertiesArchive::_internal_columns_null() const {
  return columns_null_;
}
inline bool ShapeStylePropertiesArchive::columns_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.columns_null)
  return _internal_columns_null();
}
inline void ShapeStylePropertiesArchive::_internal_set_columns_null(bool value) {
  _has_bits_[0] |= 0x00000020u;
  columns_null_ = value;
}
inline void ShapeStylePropertiesArchive::set_columns_null(bool value) {
  _internal_set_columns_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeStylePropertiesArchive.columns_null)
}

// optional .TSWP.ColumnsArchive columns = 4;
inline bool ShapeStylePropertiesArchive::_internal_has_columns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || columns_ != nullptr);
  return value;
}
inline bool ShapeStylePropertiesArchive::has_columns() const {
  return _internal_has_columns();
}
inline void ShapeStylePropertiesArchive::clear_columns() {
  if (columns_ != nullptr) columns_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::ColumnsArchive& ShapeStylePropertiesArchive::_internal_columns() const {
  const ::TSWP::ColumnsArchive* p = columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ColumnsArchive&>(
      ::TSWP::_ColumnsArchive_default_instance_);
}
inline const ::TSWP::ColumnsArchive& ShapeStylePropertiesArchive::columns() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.columns)
  return _internal_columns();
}
inline void ShapeStylePropertiesArchive::unsafe_arena_set_allocated_columns(
    ::TSWP::ColumnsArchive* columns) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columns_);
  }
  columns_ = columns;
  if (columns) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeStylePropertiesArchive.columns)
}
inline ::TSWP::ColumnsArchive* ShapeStylePropertiesArchive::release_columns() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ColumnsArchive* temp = columns_;
  columns_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ColumnsArchive* ShapeStylePropertiesArchive::unsafe_arena_release_columns() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeStylePropertiesArchive.columns)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ColumnsArchive* temp = columns_;
  columns_ = nullptr;
  return temp;
}
inline ::TSWP::ColumnsArchive* ShapeStylePropertiesArchive::_internal_mutable_columns() {
  _has_bits_[0] |= 0x00000001u;
  if (columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ColumnsArchive>(GetArena());
    columns_ = p;
  }
  return columns_;
}
inline ::TSWP::ColumnsArchive* ShapeStylePropertiesArchive::mutable_columns() {
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeStylePropertiesArchive.columns)
  return _internal_mutable_columns();
}
inline void ShapeStylePropertiesArchive::set_allocated_columns(::TSWP::ColumnsArchive* columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete columns_;
  }
  if (columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(columns);
    if (message_arena != submessage_arena) {
      columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columns, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  columns_ = columns;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeStylePropertiesArchive.columns)
}

// optional bool padding_null = 5;
inline bool ShapeStylePropertiesArchive::_internal_has_padding_null() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ShapeStylePropertiesArchive::has_padding_null() const {
  return _internal_has_padding_null();
}
inline void ShapeStylePropertiesArchive::clear_padding_null() {
  padding_null_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ShapeStylePropertiesArchive::_internal_padding_null() const {
  return padding_null_;
}
inline bool ShapeStylePropertiesArchive::padding_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.padding_null)
  return _internal_padding_null();
}
inline void ShapeStylePropertiesArchive::_internal_set_padding_null(bool value) {
  _has_bits_[0] |= 0x00000040u;
  padding_null_ = value;
}
inline void ShapeStylePropertiesArchive::set_padding_null(bool value) {
  _internal_set_padding_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeStylePropertiesArchive.padding_null)
}

// optional .TSWP.PaddingArchive padding = 6;
inline bool ShapeStylePropertiesArchive::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || padding_ != nullptr);
  return value;
}
inline bool ShapeStylePropertiesArchive::has_padding() const {
  return _internal_has_padding();
}
inline void ShapeStylePropertiesArchive::clear_padding() {
  if (padding_ != nullptr) padding_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::PaddingArchive& ShapeStylePropertiesArchive::_internal_padding() const {
  const ::TSWP::PaddingArchive* p = padding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PaddingArchive&>(
      ::TSWP::_PaddingArchive_default_instance_);
}
inline const ::TSWP::PaddingArchive& ShapeStylePropertiesArchive::padding() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.padding)
  return _internal_padding();
}
inline void ShapeStylePropertiesArchive::unsafe_arena_set_allocated_padding(
    ::TSWP::PaddingArchive* padding) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(padding_);
  }
  padding_ = padding;
  if (padding) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeStylePropertiesArchive.padding)
}
inline ::TSWP::PaddingArchive* ShapeStylePropertiesArchive::release_padding() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::PaddingArchive* temp = padding_;
  padding_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PaddingArchive* ShapeStylePropertiesArchive::unsafe_arena_release_padding() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeStylePropertiesArchive.padding)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::PaddingArchive* temp = padding_;
  padding_ = nullptr;
  return temp;
}
inline ::TSWP::PaddingArchive* ShapeStylePropertiesArchive::_internal_mutable_padding() {
  _has_bits_[0] |= 0x00000002u;
  if (padding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PaddingArchive>(GetArena());
    padding_ = p;
  }
  return padding_;
}
inline ::TSWP::PaddingArchive* ShapeStylePropertiesArchive::mutable_padding() {
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeStylePropertiesArchive.padding)
  return _internal_mutable_padding();
}
inline void ShapeStylePropertiesArchive::set_allocated_padding(::TSWP::PaddingArchive* padding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete padding_;
  }
  if (padding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(padding);
    if (message_arena != submessage_arena) {
      padding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, padding, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  padding_ = padding;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeStylePropertiesArchive.padding)
}

// optional uint32 default_text_preset_index = 7;
inline bool ShapeStylePropertiesArchive::_internal_has_default_text_preset_index() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ShapeStylePropertiesArchive::has_default_text_preset_index() const {
  return _internal_has_default_text_preset_index();
}
inline void ShapeStylePropertiesArchive::clear_default_text_preset_index() {
  default_text_preset_index_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeStylePropertiesArchive::_internal_default_text_preset_index() const {
  return default_text_preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeStylePropertiesArchive::default_text_preset_index() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.default_text_preset_index)
  return _internal_default_text_preset_index();
}
inline void ShapeStylePropertiesArchive::_internal_set_default_text_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  default_text_preset_index_ = value;
}
inline void ShapeStylePropertiesArchive::set_default_text_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_text_preset_index(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeStylePropertiesArchive.default_text_preset_index)
}

// optional bool vertical_text = 8;
inline bool ShapeStylePropertiesArchive::_internal_has_vertical_text() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ShapeStylePropertiesArchive::has_vertical_text() const {
  return _internal_has_vertical_text();
}
inline void ShapeStylePropertiesArchive::clear_vertical_text() {
  vertical_text_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ShapeStylePropertiesArchive::_internal_vertical_text() const {
  return vertical_text_;
}
inline bool ShapeStylePropertiesArchive::vertical_text() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.vertical_text)
  return _internal_vertical_text();
}
inline void ShapeStylePropertiesArchive::_internal_set_vertical_text(bool value) {
  _has_bits_[0] |= 0x00000080u;
  vertical_text_ = value;
}
inline void ShapeStylePropertiesArchive::set_vertical_text(bool value) {
  _internal_set_vertical_text(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeStylePropertiesArchive.vertical_text)
}

// optional bool paragraph_style_null = 9;
inline bool ShapeStylePropertiesArchive::_internal_has_paragraph_style_null() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ShapeStylePropertiesArchive::has_paragraph_style_null() const {
  return _internal_has_paragraph_style_null();
}
inline void ShapeStylePropertiesArchive::clear_paragraph_style_null() {
  paragraph_style_null_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ShapeStylePropertiesArchive::_internal_paragraph_style_null() const {
  return paragraph_style_null_;
}
inline bool ShapeStylePropertiesArchive::paragraph_style_null() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.paragraph_style_null)
  return _internal_paragraph_style_null();
}
inline void ShapeStylePropertiesArchive::_internal_set_paragraph_style_null(bool value) {
  _has_bits_[0] |= 0x00000200u;
  paragraph_style_null_ = value;
}
inline void ShapeStylePropertiesArchive::set_paragraph_style_null(bool value) {
  _internal_set_paragraph_style_null(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeStylePropertiesArchive.paragraph_style_null)
}

// optional .TSP.Reference paragraph_style = 10;
inline bool ShapeStylePropertiesArchive::_internal_has_paragraph_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || paragraph_style_ != nullptr);
  return value;
}
inline bool ShapeStylePropertiesArchive::has_paragraph_style() const {
  return _internal_has_paragraph_style();
}
inline const ::TSP::Reference& ShapeStylePropertiesArchive::_internal_paragraph_style() const {
  const ::TSP::Reference* p = paragraph_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShapeStylePropertiesArchive::paragraph_style() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.paragraph_style)
  return _internal_paragraph_style();
}
inline void ShapeStylePropertiesArchive::unsafe_arena_set_allocated_paragraph_style(
    ::TSP::Reference* paragraph_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_style_);
  }
  paragraph_style_ = paragraph_style;
  if (paragraph_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeStylePropertiesArchive.paragraph_style)
}
inline ::TSP::Reference* ShapeStylePropertiesArchive::release_paragraph_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = paragraph_style_;
  paragraph_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ShapeStylePropertiesArchive::unsafe_arena_release_paragraph_style() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeStylePropertiesArchive.paragraph_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = paragraph_style_;
  paragraph_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShapeStylePropertiesArchive::_internal_mutable_paragraph_style() {
  _has_bits_[0] |= 0x00000004u;
  if (paragraph_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    paragraph_style_ = p;
  }
  return paragraph_style_;
}
inline ::TSP::Reference* ShapeStylePropertiesArchive::mutable_paragraph_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeStylePropertiesArchive.paragraph_style)
  return _internal_mutable_paragraph_style();
}
inline void ShapeStylePropertiesArchive::set_allocated_paragraph_style(::TSP::Reference* paragraph_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_style_);
  }
  if (paragraph_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_style)->GetArena();
    if (message_arena != submessage_arena) {
      paragraph_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paragraph_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  paragraph_style_ = paragraph_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeStylePropertiesArchive.paragraph_style)
}

// optional bool vertical_text_40 = 11;
inline bool ShapeStylePropertiesArchive::_internal_has_vertical_text_40() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ShapeStylePropertiesArchive::has_vertical_text_40() const {
  return _internal_has_vertical_text_40();
}
inline void ShapeStylePropertiesArchive::clear_vertical_text_40() {
  vertical_text_40_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ShapeStylePropertiesArchive::_internal_vertical_text_40() const {
  return vertical_text_40_;
}
inline bool ShapeStylePropertiesArchive::vertical_text_40() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStylePropertiesArchive.vertical_text_40)
  return _internal_vertical_text_40();
}
inline void ShapeStylePropertiesArchive::_internal_set_vertical_text_40(bool value) {
  _has_bits_[0] |= 0x00000400u;
  vertical_text_40_ = value;
}
inline void ShapeStylePropertiesArchive::set_vertical_text_40(bool value) {
  _internal_set_vertical_text_40(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeStylePropertiesArchive.vertical_text_40)
}

// -------------------------------------------------------------------

// ShapeStyleArchive

// required .TSD.ShapeStyleArchive super = 1;
inline bool ShapeStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ShapeStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::ShapeStyleArchive& ShapeStyleArchive::_internal_super() const {
  const ::TSD::ShapeStyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShapeStyleArchive&>(
      ::TSD::_ShapeStyleArchive_default_instance_);
}
inline const ::TSD::ShapeStyleArchive& ShapeStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStyleArchive.super)
  return _internal_super();
}
inline void ShapeStyleArchive::unsafe_arena_set_allocated_super(
    ::TSD::ShapeStyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeStyleArchive.super)
}
inline ::TSD::ShapeStyleArchive* ShapeStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ShapeStyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShapeStyleArchive* ShapeStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ShapeStyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ShapeStyleArchive* ShapeStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShapeStyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ShapeStyleArchive* ShapeStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeStyleArchive.super)
  return _internal_mutable_super();
}
inline void ShapeStyleArchive::set_allocated_super(::TSD::ShapeStyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool ShapeStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShapeStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void ShapeStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStyleArchive.override_count)
  return _internal_override_count();
}
inline void ShapeStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  override_count_ = value;
}
inline void ShapeStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeStyleArchive.override_count)
}

// optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
inline bool ShapeStyleArchive::_internal_has_shape_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || shape_properties_ != nullptr);
  return value;
}
inline bool ShapeStyleArchive::has_shape_properties() const {
  return _internal_has_shape_properties();
}
inline void ShapeStyleArchive::clear_shape_properties() {
  if (shape_properties_ != nullptr) shape_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::ShapeStylePropertiesArchive& ShapeStyleArchive::_internal_shape_properties() const {
  const ::TSWP::ShapeStylePropertiesArchive* p = shape_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeStylePropertiesArchive&>(
      ::TSWP::_ShapeStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ShapeStylePropertiesArchive& ShapeStyleArchive::shape_properties() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStyleArchive.shape_properties)
  return _internal_shape_properties();
}
inline void ShapeStyleArchive::unsafe_arena_set_allocated_shape_properties(
    ::TSWP::ShapeStylePropertiesArchive* shape_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_properties_);
  }
  shape_properties_ = shape_properties;
  if (shape_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeStyleArchive.shape_properties)
}
inline ::TSWP::ShapeStylePropertiesArchive* ShapeStyleArchive::release_shape_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ShapeStylePropertiesArchive* temp = shape_properties_;
  shape_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* ShapeStyleArchive::unsafe_arena_release_shape_properties() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeStyleArchive.shape_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ShapeStylePropertiesArchive* temp = shape_properties_;
  shape_properties_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* ShapeStyleArchive::_internal_mutable_shape_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (shape_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeStylePropertiesArchive>(GetArena());
    shape_properties_ = p;
  }
  return shape_properties_;
}
inline ::TSWP::ShapeStylePropertiesArchive* ShapeStyleArchive::mutable_shape_properties() {
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeStyleArchive.shape_properties)
  return _internal_mutable_shape_properties();
}
inline void ShapeStyleArchive::set_allocated_shape_properties(::TSWP::ShapeStylePropertiesArchive* shape_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_properties_;
  }
  if (shape_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape_properties);
    if (message_arena != submessage_arena) {
      shape_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shape_properties_ = shape_properties;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeStyleArchive.shape_properties)
}

// -------------------------------------------------------------------

// ThemePresetsArchive

// repeated .TSP.Reference list_style_presets = 1;
inline int ThemePresetsArchive::_internal_list_style_presets_size() const {
  return list_style_presets_.size();
}
inline int ThemePresetsArchive::list_style_presets_size() const {
  return _internal_list_style_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_list_style_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ThemePresetsArchive.list_style_presets)
  return list_style_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_list_style_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ThemePresetsArchive.list_style_presets)
  return &list_style_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_list_style_presets(int index) const {
  return list_style_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::list_style_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ThemePresetsArchive.list_style_presets)
  return _internal_list_style_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_list_style_presets() {
  return list_style_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_list_style_presets() {
  // @@protoc_insertion_point(field_add:TSWP.ThemePresetsArchive.list_style_presets)
  return _internal_add_list_style_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::list_style_presets() const {
  // @@protoc_insertion_point(field_list:TSWP.ThemePresetsArchive.list_style_presets)
  return list_style_presets_;
}

// repeated .TSP.Reference text_style_presets = 2;
inline int ThemePresetsArchive::_internal_text_style_presets_size() const {
  return text_style_presets_.size();
}
inline int ThemePresetsArchive::text_style_presets_size() const {
  return _internal_text_style_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_text_style_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ThemePresetsArchive.text_style_presets)
  return text_style_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_text_style_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ThemePresetsArchive.text_style_presets)
  return &text_style_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_text_style_presets(int index) const {
  return text_style_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::text_style_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ThemePresetsArchive.text_style_presets)
  return _internal_text_style_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_text_style_presets() {
  return text_style_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_text_style_presets() {
  // @@protoc_insertion_point(field_add:TSWP.ThemePresetsArchive.text_style_presets)
  return _internal_add_text_style_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::text_style_presets() const {
  // @@protoc_insertion_point(field_list:TSWP.ThemePresetsArchive.text_style_presets)
  return text_style_presets_;
}

// repeated .TSP.Reference imported_text_style_presets = 3;
inline int ThemePresetsArchive::_internal_imported_text_style_presets_size() const {
  return imported_text_style_presets_.size();
}
inline int ThemePresetsArchive::imported_text_style_presets_size() const {
  return _internal_imported_text_style_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_imported_text_style_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ThemePresetsArchive.imported_text_style_presets)
  return imported_text_style_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_imported_text_style_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ThemePresetsArchive.imported_text_style_presets)
  return &imported_text_style_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_imported_text_style_presets(int index) const {
  return imported_text_style_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::imported_text_style_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ThemePresetsArchive.imported_text_style_presets)
  return _internal_imported_text_style_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_imported_text_style_presets() {
  return imported_text_style_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_imported_text_style_presets() {
  // @@protoc_insertion_point(field_add:TSWP.ThemePresetsArchive.imported_text_style_presets)
  return _internal_add_imported_text_style_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::imported_text_style_presets() const {
  // @@protoc_insertion_point(field_list:TSWP.ThemePresetsArchive.imported_text_style_presets)
  return imported_text_style_presets_;
}

// repeated .TSP.Reference toc_entry_style_presets = 4;
inline int ThemePresetsArchive::_internal_toc_entry_style_presets_size() const {
  return toc_entry_style_presets_.size();
}
inline int ThemePresetsArchive::toc_entry_style_presets_size() const {
  return _internal_toc_entry_style_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_toc_entry_style_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ThemePresetsArchive.toc_entry_style_presets)
  return toc_entry_style_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_toc_entry_style_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ThemePresetsArchive.toc_entry_style_presets)
  return &toc_entry_style_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_toc_entry_style_presets(int index) const {
  return toc_entry_style_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::toc_entry_style_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ThemePresetsArchive.toc_entry_style_presets)
  return _internal_toc_entry_style_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_toc_entry_style_presets() {
  return toc_entry_style_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_toc_entry_style_presets() {
  // @@protoc_insertion_point(field_add:TSWP.ThemePresetsArchive.toc_entry_style_presets)
  return _internal_add_toc_entry_style_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::toc_entry_style_presets() const {
  // @@protoc_insertion_point(field_list:TSWP.ThemePresetsArchive.toc_entry_style_presets)
  return toc_entry_style_presets_;
}

// repeated .TSP.Reference toc_settings_presets = 5;
inline int ThemePresetsArchive::_internal_toc_settings_presets_size() const {
  return toc_settings_presets_.size();
}
inline int ThemePresetsArchive::toc_settings_presets_size() const {
  return _internal_toc_settings_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_toc_settings_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ThemePresetsArchive.toc_settings_presets)
  return toc_settings_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_toc_settings_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ThemePresetsArchive.toc_settings_presets)
  return &toc_settings_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_toc_settings_presets(int index) const {
  return toc_settings_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::toc_settings_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ThemePresetsArchive.toc_settings_presets)
  return _internal_toc_settings_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_toc_settings_presets() {
  return toc_settings_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_toc_settings_presets() {
  // @@protoc_insertion_point(field_add:TSWP.ThemePresetsArchive.toc_settings_presets)
  return _internal_add_toc_settings_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::toc_settings_presets() const {
  // @@protoc_insertion_point(field_list:TSWP.ThemePresetsArchive.toc_settings_presets)
  return toc_settings_presets_;
}

// repeated .TSP.Reference character_style_presets = 6;
inline int ThemePresetsArchive::_internal_character_style_presets_size() const {
  return character_style_presets_.size();
}
inline int ThemePresetsArchive::character_style_presets_size() const {
  return _internal_character_style_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_character_style_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ThemePresetsArchive.character_style_presets)
  return character_style_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_character_style_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ThemePresetsArchive.character_style_presets)
  return &character_style_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_character_style_presets(int index) const {
  return character_style_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::character_style_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ThemePresetsArchive.character_style_presets)
  return _internal_character_style_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_character_style_presets() {
  return character_style_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_character_style_presets() {
  // @@protoc_insertion_point(field_add:TSWP.ThemePresetsArchive.character_style_presets)
  return _internal_add_character_style_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::character_style_presets() const {
  // @@protoc_insertion_point(field_list:TSWP.ThemePresetsArchive.character_style_presets)
  return character_style_presets_;
}

// repeated .TSP.Reference paragraph_style_presets = 7;
inline int ThemePresetsArchive::_internal_paragraph_style_presets_size() const {
  return paragraph_style_presets_.size();
}
inline int ThemePresetsArchive::paragraph_style_presets_size() const {
  return _internal_paragraph_style_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_paragraph_style_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ThemePresetsArchive.paragraph_style_presets)
  return paragraph_style_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_paragraph_style_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ThemePresetsArchive.paragraph_style_presets)
  return &paragraph_style_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_paragraph_style_presets(int index) const {
  return paragraph_style_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::paragraph_style_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ThemePresetsArchive.paragraph_style_presets)
  return _internal_paragraph_style_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_paragraph_style_presets() {
  return paragraph_style_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_paragraph_style_presets() {
  // @@protoc_insertion_point(field_add:TSWP.ThemePresetsArchive.paragraph_style_presets)
  return _internal_add_paragraph_style_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::paragraph_style_presets() const {
  // @@protoc_insertion_point(field_list:TSWP.ThemePresetsArchive.paragraph_style_presets)
  return paragraph_style_presets_;
}

// repeated .TSP.Reference dropcap_style_presets = 8;
inline int ThemePresetsArchive::_internal_dropcap_style_presets_size() const {
  return dropcap_style_presets_.size();
}
inline int ThemePresetsArchive::dropcap_style_presets_size() const {
  return _internal_dropcap_style_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_dropcap_style_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ThemePresetsArchive.dropcap_style_presets)
  return dropcap_style_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_dropcap_style_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ThemePresetsArchive.dropcap_style_presets)
  return &dropcap_style_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_dropcap_style_presets(int index) const {
  return dropcap_style_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::dropcap_style_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ThemePresetsArchive.dropcap_style_presets)
  return _internal_dropcap_style_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_dropcap_style_presets() {
  return dropcap_style_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_dropcap_style_presets() {
  // @@protoc_insertion_point(field_add:TSWP.ThemePresetsArchive.dropcap_style_presets)
  return _internal_add_dropcap_style_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::dropcap_style_presets() const {
  // @@protoc_insertion_point(field_list:TSWP.ThemePresetsArchive.dropcap_style_presets)
  return dropcap_style_presets_;
}

// -------------------------------------------------------------------

// TextPresetDisplayItemArchive

// required .TSP.Reference preset = 1;
inline bool TextPresetDisplayItemArchive::_internal_has_preset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || preset_ != nullptr);
  return value;
}
inline bool TextPresetDisplayItemArchive::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& TextPresetDisplayItemArchive::_internal_preset() const {
  const ::TSP::Reference* p = preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TextPresetDisplayItemArchive::preset() const {
  // @@protoc_insertion_point(field_get:TSWP.TextPresetDisplayItemArchive.preset)
  return _internal_preset();
}
inline void TextPresetDisplayItemArchive::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  preset_ = preset;
  if (preset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextPresetDisplayItemArchive.preset)
}
inline ::TSP::Reference* TextPresetDisplayItemArchive::release_preset() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TextPresetDisplayItemArchive::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSWP.TextPresetDisplayItemArchive.preset)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TextPresetDisplayItemArchive::_internal_mutable_preset() {
  _has_bits_[0] |= 0x00000002u;
  if (preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    preset_ = p;
  }
  return preset_;
}
inline ::TSP::Reference* TextPresetDisplayItemArchive::mutable_preset() {
  // @@protoc_insertion_point(field_mutable:TSWP.TextPresetDisplayItemArchive.preset)
  return _internal_mutable_preset();
}
inline void TextPresetDisplayItemArchive::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset)->GetArena();
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextPresetDisplayItemArchive.preset)
}

// required string display_name = 2;
inline bool TextPresetDisplayItemArchive::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TextPresetDisplayItemArchive::has_display_name() const {
  return _internal_has_display_name();
}
inline void TextPresetDisplayItemArchive::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TextPresetDisplayItemArchive::display_name() const {
  // @@protoc_insertion_point(field_get:TSWP.TextPresetDisplayItemArchive.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TextPresetDisplayItemArchive::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TextPresetDisplayItemArchive.display_name)
}
inline std::string* TextPresetDisplayItemArchive::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.TextPresetDisplayItemArchive.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& TextPresetDisplayItemArchive::_internal_display_name() const {
  return display_name_.Get();
}
inline void TextPresetDisplayItemArchive::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TextPresetDisplayItemArchive::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextPresetDisplayItemArchive::release_display_name() {
  // @@protoc_insertion_point(field_release:TSWP.TextPresetDisplayItemArchive.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextPresetDisplayItemArchive::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextPresetDisplayItemArchive.display_name)
}

// -------------------------------------------------------------------

// TOCEntryStylePropertiesArchive

// optional bool page_number_style_null = 1;
inline bool TOCEntryStylePropertiesArchive::_internal_has_page_number_style_null() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TOCEntryStylePropertiesArchive::has_page_number_style_null() const {
  return _internal_has_page_number_style_null();
}
inline void TOCEntryStylePropertiesArchive::clear_page_number_style_null() {
  page_number_style_null_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TOCEntryStylePropertiesArchive::_internal_page_number_style_null() const {
  return page_number_style_null_;
}
inline bool TOCEntryStylePropertiesArchive::page_number_style_null() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryStylePropertiesArchive.page_number_style_null)
  return _internal_page_number_style_null();
}
inline void TOCEntryStylePropertiesArchive::_internal_set_page_number_style_null(bool value) {
  _has_bits_[0] |= 0x00000002u;
  page_number_style_null_ = value;
}
inline void TOCEntryStylePropertiesArchive::set_page_number_style_null(bool value) {
  _internal_set_page_number_style_null(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCEntryStylePropertiesArchive.page_number_style_null)
}

// optional .TSP.Reference page_number_style = 2;
inline bool TOCEntryStylePropertiesArchive::_internal_has_page_number_style() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || page_number_style_ != nullptr);
  return value;
}
inline bool TOCEntryStylePropertiesArchive::has_page_number_style() const {
  return _internal_has_page_number_style();
}
inline const ::TSP::Reference& TOCEntryStylePropertiesArchive::_internal_page_number_style() const {
  const ::TSP::Reference* p = page_number_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TOCEntryStylePropertiesArchive::page_number_style() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryStylePropertiesArchive.page_number_style)
  return _internal_page_number_style();
}
inline void TOCEntryStylePropertiesArchive::unsafe_arena_set_allocated_page_number_style(
    ::TSP::Reference* page_number_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_number_style_);
  }
  page_number_style_ = page_number_style;
  if (page_number_style) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCEntryStylePropertiesArchive.page_number_style)
}
inline ::TSP::Reference* TOCEntryStylePropertiesArchive::release_page_number_style() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = page_number_style_;
  page_number_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TOCEntryStylePropertiesArchive::unsafe_arena_release_page_number_style() {
  // @@protoc_insertion_point(field_release:TSWP.TOCEntryStylePropertiesArchive.page_number_style)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = page_number_style_;
  page_number_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TOCEntryStylePropertiesArchive::_internal_mutable_page_number_style() {
  _has_bits_[0] |= 0x00000001u;
  if (page_number_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    page_number_style_ = p;
  }
  return page_number_style_;
}
inline ::TSP::Reference* TOCEntryStylePropertiesArchive::mutable_page_number_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCEntryStylePropertiesArchive.page_number_style)
  return _internal_mutable_page_number_style();
}
inline void TOCEntryStylePropertiesArchive::set_allocated_page_number_style(::TSP::Reference* page_number_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_number_style_);
  }
  if (page_number_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_number_style)->GetArena();
    if (message_arena != submessage_arena) {
      page_number_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_number_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_number_style_ = page_number_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCEntryStylePropertiesArchive.page_number_style)
}

// optional bool show_page_number = 3;
inline bool TOCEntryStylePropertiesArchive::_internal_has_show_page_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TOCEntryStylePropertiesArchive::has_show_page_number() const {
  return _internal_has_show_page_number();
}
inline void TOCEntryStylePropertiesArchive::clear_show_page_number() {
  show_page_number_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TOCEntryStylePropertiesArchive::_internal_show_page_number() const {
  return show_page_number_;
}
inline bool TOCEntryStylePropertiesArchive::show_page_number() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryStylePropertiesArchive.show_page_number)
  return _internal_show_page_number();
}
inline void TOCEntryStylePropertiesArchive::_internal_set_show_page_number(bool value) {
  _has_bits_[0] |= 0x00000004u;
  show_page_number_ = value;
}
inline void TOCEntryStylePropertiesArchive::set_show_page_number(bool value) {
  _internal_set_show_page_number(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCEntryStylePropertiesArchive.show_page_number)
}

// -------------------------------------------------------------------

// TOCEntryStyleArchive

// required .TSWP.ParagraphStyleArchive super = 1;
inline bool TOCEntryStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TOCEntryStyleArchive::has_super() const {
  return _internal_has_super();
}
inline void TOCEntryStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::ParagraphStyleArchive& TOCEntryStyleArchive::_internal_super() const {
  const ::TSWP::ParagraphStyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ParagraphStyleArchive&>(
      ::TSWP::_ParagraphStyleArchive_default_instance_);
}
inline const ::TSWP::ParagraphStyleArchive& TOCEntryStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryStyleArchive.super)
  return _internal_super();
}
inline void TOCEntryStyleArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ParagraphStyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCEntryStyleArchive.super)
}
inline ::TSWP::ParagraphStyleArchive* TOCEntryStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ParagraphStyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ParagraphStyleArchive* TOCEntryStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.TOCEntryStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ParagraphStyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::ParagraphStyleArchive* TOCEntryStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ParagraphStyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::ParagraphStyleArchive* TOCEntryStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCEntryStyleArchive.super)
  return _internal_mutable_super();
}
inline void TOCEntryStyleArchive::set_allocated_super(::TSWP::ParagraphStyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCEntryStyleArchive.super)
}

// optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
inline bool TOCEntryStyleArchive::_internal_has_toc_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || toc_properties_ != nullptr);
  return value;
}
inline bool TOCEntryStyleArchive::has_toc_properties() const {
  return _internal_has_toc_properties();
}
inline void TOCEntryStyleArchive::clear_toc_properties() {
  if (toc_properties_ != nullptr) toc_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::TOCEntryStylePropertiesArchive& TOCEntryStyleArchive::_internal_toc_properties() const {
  const ::TSWP::TOCEntryStylePropertiesArchive* p = toc_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::TOCEntryStylePropertiesArchive&>(
      ::TSWP::_TOCEntryStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::TOCEntryStylePropertiesArchive& TOCEntryStyleArchive::toc_properties() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryStyleArchive.toc_properties)
  return _internal_toc_properties();
}
inline void TOCEntryStyleArchive::unsafe_arena_set_allocated_toc_properties(
    ::TSWP::TOCEntryStylePropertiesArchive* toc_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_properties_);
  }
  toc_properties_ = toc_properties;
  if (toc_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCEntryStyleArchive.toc_properties)
}
inline ::TSWP::TOCEntryStylePropertiesArchive* TOCEntryStyleArchive::release_toc_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::TOCEntryStylePropertiesArchive* temp = toc_properties_;
  toc_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::TOCEntryStylePropertiesArchive* TOCEntryStyleArchive::unsafe_arena_release_toc_properties() {
  // @@protoc_insertion_point(field_release:TSWP.TOCEntryStyleArchive.toc_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::TOCEntryStylePropertiesArchive* temp = toc_properties_;
  toc_properties_ = nullptr;
  return temp;
}
inline ::TSWP::TOCEntryStylePropertiesArchive* TOCEntryStyleArchive::_internal_mutable_toc_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (toc_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::TOCEntryStylePropertiesArchive>(GetArena());
    toc_properties_ = p;
  }
  return toc_properties_;
}
inline ::TSWP::TOCEntryStylePropertiesArchive* TOCEntryStyleArchive::mutable_toc_properties() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCEntryStyleArchive.toc_properties)
  return _internal_mutable_toc_properties();
}
inline void TOCEntryStyleArchive::set_allocated_toc_properties(::TSWP::TOCEntryStylePropertiesArchive* toc_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete toc_properties_;
  }
  if (toc_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(toc_properties);
    if (message_arena != submessage_arena) {
      toc_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toc_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  toc_properties_ = toc_properties;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCEntryStyleArchive.toc_properties)
}

// -------------------------------------------------------------------

// TOCSettingsArchive_TOCEntryData

// optional .TSP.Reference paragraph_style = 1;
inline bool TOCSettingsArchive_TOCEntryData::_internal_has_paragraph_style() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || paragraph_style_ != nullptr);
  return value;
}
inline bool TOCSettingsArchive_TOCEntryData::has_paragraph_style() const {
  return _internal_has_paragraph_style();
}
inline const ::TSP::Reference& TOCSettingsArchive_TOCEntryData::_internal_paragraph_style() const {
  const ::TSP::Reference* p = paragraph_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TOCSettingsArchive_TOCEntryData::paragraph_style() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSettingsArchive.TOCEntryData.paragraph_style)
  return _internal_paragraph_style();
}
inline void TOCSettingsArchive_TOCEntryData::unsafe_arena_set_allocated_paragraph_style(
    ::TSP::Reference* paragraph_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_style_);
  }
  paragraph_style_ = paragraph_style;
  if (paragraph_style) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCSettingsArchive.TOCEntryData.paragraph_style)
}
inline ::TSP::Reference* TOCSettingsArchive_TOCEntryData::release_paragraph_style() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = paragraph_style_;
  paragraph_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TOCSettingsArchive_TOCEntryData::unsafe_arena_release_paragraph_style() {
  // @@protoc_insertion_point(field_release:TSWP.TOCSettingsArchive.TOCEntryData.paragraph_style)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = paragraph_style_;
  paragraph_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TOCSettingsArchive_TOCEntryData::_internal_mutable_paragraph_style() {
  _has_bits_[0] |= 0x00000001u;
  if (paragraph_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    paragraph_style_ = p;
  }
  return paragraph_style_;
}
inline ::TSP::Reference* TOCSettingsArchive_TOCEntryData::mutable_paragraph_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCSettingsArchive.TOCEntryData.paragraph_style)
  return _internal_mutable_paragraph_style();
}
inline void TOCSettingsArchive_TOCEntryData::set_allocated_paragraph_style(::TSP::Reference* paragraph_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_style_);
  }
  if (paragraph_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_style)->GetArena();
    if (message_arena != submessage_arena) {
      paragraph_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paragraph_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  paragraph_style_ = paragraph_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCSettingsArchive.TOCEntryData.paragraph_style)
}

// optional .TSP.Reference toc_entry_style = 2;
inline bool TOCSettingsArchive_TOCEntryData::_internal_has_toc_entry_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || toc_entry_style_ != nullptr);
  return value;
}
inline bool TOCSettingsArchive_TOCEntryData::has_toc_entry_style() const {
  return _internal_has_toc_entry_style();
}
inline const ::TSP::Reference& TOCSettingsArchive_TOCEntryData::_internal_toc_entry_style() const {
  const ::TSP::Reference* p = toc_entry_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TOCSettingsArchive_TOCEntryData::toc_entry_style() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSettingsArchive.TOCEntryData.toc_entry_style)
  return _internal_toc_entry_style();
}
inline void TOCSettingsArchive_TOCEntryData::unsafe_arena_set_allocated_toc_entry_style(
    ::TSP::Reference* toc_entry_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_entry_style_);
  }
  toc_entry_style_ = toc_entry_style;
  if (toc_entry_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCSettingsArchive.TOCEntryData.toc_entry_style)
}
inline ::TSP::Reference* TOCSettingsArchive_TOCEntryData::release_toc_entry_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = toc_entry_style_;
  toc_entry_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TOCSettingsArchive_TOCEntryData::unsafe_arena_release_toc_entry_style() {
  // @@protoc_insertion_point(field_release:TSWP.TOCSettingsArchive.TOCEntryData.toc_entry_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = toc_entry_style_;
  toc_entry_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TOCSettingsArchive_TOCEntryData::_internal_mutable_toc_entry_style() {
  _has_bits_[0] |= 0x00000002u;
  if (toc_entry_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    toc_entry_style_ = p;
  }
  return toc_entry_style_;
}
inline ::TSP::Reference* TOCSettingsArchive_TOCEntryData::mutable_toc_entry_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCSettingsArchive.TOCEntryData.toc_entry_style)
  return _internal_mutable_toc_entry_style();
}
inline void TOCSettingsArchive_TOCEntryData::set_allocated_toc_entry_style(::TSP::Reference* toc_entry_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_entry_style_);
  }
  if (toc_entry_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_entry_style)->GetArena();
    if (message_arena != submessage_arena) {
      toc_entry_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toc_entry_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  toc_entry_style_ = toc_entry_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCSettingsArchive.TOCEntryData.toc_entry_style)
}

// optional bool show_in_toc = 3;
inline bool TOCSettingsArchive_TOCEntryData::_internal_has_show_in_toc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TOCSettingsArchive_TOCEntryData::has_show_in_toc() const {
  return _internal_has_show_in_toc();
}
inline void TOCSettingsArchive_TOCEntryData::clear_show_in_toc() {
  show_in_toc_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TOCSettingsArchive_TOCEntryData::_internal_show_in_toc() const {
  return show_in_toc_;
}
inline bool TOCSettingsArchive_TOCEntryData::show_in_toc() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSettingsArchive.TOCEntryData.show_in_toc)
  return _internal_show_in_toc();
}
inline void TOCSettingsArchive_TOCEntryData::_internal_set_show_in_toc(bool value) {
  _has_bits_[0] |= 0x00000004u;
  show_in_toc_ = value;
}
inline void TOCSettingsArchive_TOCEntryData::set_show_in_toc(bool value) {
  _internal_set_show_in_toc(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCSettingsArchive.TOCEntryData.show_in_toc)
}

// -------------------------------------------------------------------

// TOCSettingsArchive

// optional string toc_name = 1;
inline bool TOCSettingsArchive::_internal_has_toc_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TOCSettingsArchive::has_toc_name() const {
  return _internal_has_toc_name();
}
inline void TOCSettingsArchive::clear_toc_name() {
  toc_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TOCSettingsArchive::toc_name() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSettingsArchive.toc_name)
  return _internal_toc_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TOCSettingsArchive::set_toc_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 toc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TOCSettingsArchive.toc_name)
}
inline std::string* TOCSettingsArchive::mutable_toc_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCSettingsArchive.toc_name)
  return _internal_mutable_toc_name();
}
inline const std::string& TOCSettingsArchive::_internal_toc_name() const {
  return toc_name_.Get();
}
inline void TOCSettingsArchive::_internal_set_toc_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  toc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TOCSettingsArchive::_internal_mutable_toc_name() {
  _has_bits_[0] |= 0x00000001u;
  return toc_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TOCSettingsArchive::release_toc_name() {
  // @@protoc_insertion_point(field_release:TSWP.TOCSettingsArchive.toc_name)
  if (!_internal_has_toc_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return toc_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TOCSettingsArchive::set_allocated_toc_name(std::string* toc_name) {
  if (toc_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  toc_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toc_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCSettingsArchive.toc_name)
}

// optional uint32 toc_scope = 2;
inline bool TOCSettingsArchive::_internal_has_toc_scope() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TOCSettingsArchive::has_toc_scope() const {
  return _internal_has_toc_scope();
}
inline void TOCSettingsArchive::clear_toc_scope() {
  toc_scope_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCSettingsArchive::_internal_toc_scope() const {
  return toc_scope_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCSettingsArchive::toc_scope() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSettingsArchive.toc_scope)
  return _internal_toc_scope();
}
inline void TOCSettingsArchive::_internal_set_toc_scope(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  toc_scope_ = value;
}
inline void TOCSettingsArchive::set_toc_scope(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_toc_scope(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCSettingsArchive.toc_scope)
}

// repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
inline int TOCSettingsArchive::_internal_entries_size() const {
  return entries_.size();
}
inline int TOCSettingsArchive::entries_size() const {
  return _internal_entries_size();
}
inline void TOCSettingsArchive::clear_entries() {
  entries_.Clear();
}
inline ::TSWP::TOCSettingsArchive_TOCEntryData* TOCSettingsArchive::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCSettingsArchive.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSettingsArchive_TOCEntryData >*
TOCSettingsArchive::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.TOCSettingsArchive.entries)
  return &entries_;
}
inline const ::TSWP::TOCSettingsArchive_TOCEntryData& TOCSettingsArchive::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSWP::TOCSettingsArchive_TOCEntryData& TOCSettingsArchive::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSettingsArchive.entries)
  return _internal_entries(index);
}
inline ::TSWP::TOCSettingsArchive_TOCEntryData* TOCSettingsArchive::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSWP::TOCSettingsArchive_TOCEntryData* TOCSettingsArchive::add_entries() {
  // @@protoc_insertion_point(field_add:TSWP.TOCSettingsArchive.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSettingsArchive_TOCEntryData >&
TOCSettingsArchive::entries() const {
  // @@protoc_insertion_point(field_list:TSWP.TOCSettingsArchive.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TOCEntryInstanceArchive

// required uint32 paragraph_index = 1;
inline bool TOCEntryInstanceArchive::_internal_has_paragraph_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TOCEntryInstanceArchive::has_paragraph_index() const {
  return _internal_has_paragraph_index();
}
inline void TOCEntryInstanceArchive::clear_paragraph_index() {
  paragraph_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::_internal_paragraph_index() const {
  return paragraph_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::paragraph_index() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryInstanceArchive.paragraph_index)
  return _internal_paragraph_index();
}
inline void TOCEntryInstanceArchive::_internal_set_paragraph_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  paragraph_index_ = value;
}
inline void TOCEntryInstanceArchive::set_paragraph_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paragraph_index(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCEntryInstanceArchive.paragraph_index)
}

// required uint32 page_number = 2;
inline bool TOCEntryInstanceArchive::_internal_has_page_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TOCEntryInstanceArchive::has_page_number() const {
  return _internal_has_page_number();
}
inline void TOCEntryInstanceArchive::clear_page_number() {
  page_number_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::_internal_page_number() const {
  return page_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::page_number() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryInstanceArchive.page_number)
  return _internal_page_number();
}
inline void TOCEntryInstanceArchive::_internal_set_page_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  page_number_ = value;
}
inline void TOCEntryInstanceArchive::set_page_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCEntryInstanceArchive.page_number)
}

// required uint32 number_format = 3;
inline bool TOCEntryInstanceArchive::_internal_has_number_format() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TOCEntryInstanceArchive::has_number_format() const {
  return _internal_has_number_format();
}
inline void TOCEntryInstanceArchive::clear_number_format() {
  number_format_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::_internal_number_format() const {
  return number_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::number_format() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryInstanceArchive.number_format)
  return _internal_number_format();
}
inline void TOCEntryInstanceArchive::_internal_set_number_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  number_format_ = value;
}
inline void TOCEntryInstanceArchive::set_number_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_format(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCEntryInstanceArchive.number_format)
}

// required string heading = 4;
inline bool TOCEntryInstanceArchive::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TOCEntryInstanceArchive::has_heading() const {
  return _internal_has_heading();
}
inline void TOCEntryInstanceArchive::clear_heading() {
  heading_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TOCEntryInstanceArchive::heading() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryInstanceArchive.heading)
  return _internal_heading();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TOCEntryInstanceArchive::set_heading(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 heading_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TOCEntryInstanceArchive.heading)
}
inline std::string* TOCEntryInstanceArchive::mutable_heading() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCEntryInstanceArchive.heading)
  return _internal_mutable_heading();
}
inline const std::string& TOCEntryInstanceArchive::_internal_heading() const {
  return heading_.Get();
}
inline void TOCEntryInstanceArchive::_internal_set_heading(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  heading_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TOCEntryInstanceArchive::_internal_mutable_heading() {
  _has_bits_[0] |= 0x00000001u;
  return heading_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TOCEntryInstanceArchive::release_heading() {
  // @@protoc_insertion_point(field_release:TSWP.TOCEntryInstanceArchive.heading)
  if (!_internal_has_heading()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return heading_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TOCEntryInstanceArchive::set_allocated_heading(std::string* heading) {
  if (heading != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  heading_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), heading,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCEntryInstanceArchive.heading)
}

// required .TSP.Reference indexed_style = 5;
inline bool TOCEntryInstanceArchive::_internal_has_indexed_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || indexed_style_ != nullptr);
  return value;
}
inline bool TOCEntryInstanceArchive::has_indexed_style() const {
  return _internal_has_indexed_style();
}
inline const ::TSP::Reference& TOCEntryInstanceArchive::_internal_indexed_style() const {
  const ::TSP::Reference* p = indexed_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TOCEntryInstanceArchive::indexed_style() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryInstanceArchive.indexed_style)
  return _internal_indexed_style();
}
inline void TOCEntryInstanceArchive::unsafe_arena_set_allocated_indexed_style(
    ::TSP::Reference* indexed_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexed_style_);
  }
  indexed_style_ = indexed_style;
  if (indexed_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCEntryInstanceArchive.indexed_style)
}
inline ::TSP::Reference* TOCEntryInstanceArchive::release_indexed_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = indexed_style_;
  indexed_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TOCEntryInstanceArchive::unsafe_arena_release_indexed_style() {
  // @@protoc_insertion_point(field_release:TSWP.TOCEntryInstanceArchive.indexed_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = indexed_style_;
  indexed_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TOCEntryInstanceArchive::_internal_mutable_indexed_style() {
  _has_bits_[0] |= 0x00000004u;
  if (indexed_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    indexed_style_ = p;
  }
  return indexed_style_;
}
inline ::TSP::Reference* TOCEntryInstanceArchive::mutable_indexed_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCEntryInstanceArchive.indexed_style)
  return _internal_mutable_indexed_style();
}
inline void TOCEntryInstanceArchive::set_allocated_indexed_style(::TSP::Reference* indexed_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexed_style_);
  }
  if (indexed_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexed_style)->GetArena();
    if (message_arena != submessage_arena) {
      indexed_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indexed_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  indexed_style_ = indexed_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCEntryInstanceArchive.indexed_style)
}

// optional .TSP.Reference indexed_list_style = 6;
inline bool TOCEntryInstanceArchive::_internal_has_indexed_list_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || indexed_list_style_ != nullptr);
  return value;
}
inline bool TOCEntryInstanceArchive::has_indexed_list_style() const {
  return _internal_has_indexed_list_style();
}
inline const ::TSP::Reference& TOCEntryInstanceArchive::_internal_indexed_list_style() const {
  const ::TSP::Reference* p = indexed_list_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TOCEntryInstanceArchive::indexed_list_style() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryInstanceArchive.indexed_list_style)
  return _internal_indexed_list_style();
}
inline void TOCEntryInstanceArchive::unsafe_arena_set_allocated_indexed_list_style(
    ::TSP::Reference* indexed_list_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexed_list_style_);
  }
  indexed_list_style_ = indexed_list_style;
  if (indexed_list_style) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCEntryInstanceArchive.indexed_list_style)
}
inline ::TSP::Reference* TOCEntryInstanceArchive::release_indexed_list_style() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = indexed_list_style_;
  indexed_list_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TOCEntryInstanceArchive::unsafe_arena_release_indexed_list_style() {
  // @@protoc_insertion_point(field_release:TSWP.TOCEntryInstanceArchive.indexed_list_style)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = indexed_list_style_;
  indexed_list_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TOCEntryInstanceArchive::_internal_mutable_indexed_list_style() {
  _has_bits_[0] |= 0x00000008u;
  if (indexed_list_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    indexed_list_style_ = p;
  }
  return indexed_list_style_;
}
inline ::TSP::Reference* TOCEntryInstanceArchive::mutable_indexed_list_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCEntryInstanceArchive.indexed_list_style)
  return _internal_mutable_indexed_list_style();
}
inline void TOCEntryInstanceArchive::set_allocated_indexed_list_style(::TSP::Reference* indexed_list_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexed_list_style_);
  }
  if (indexed_list_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexed_list_style)->GetArena();
    if (message_arena != submessage_arena) {
      indexed_list_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indexed_list_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  indexed_list_style_ = indexed_list_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCEntryInstanceArchive.indexed_list_style)
}

// optional uint32 indexed_list_start = 7;
inline bool TOCEntryInstanceArchive::_internal_has_indexed_list_start() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TOCEntryInstanceArchive::has_indexed_list_start() const {
  return _internal_has_indexed_list_start();
}
inline void TOCEntryInstanceArchive::clear_indexed_list_start() {
  indexed_list_start_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::_internal_indexed_list_start() const {
  return indexed_list_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::indexed_list_start() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryInstanceArchive.indexed_list_start)
  return _internal_indexed_list_start();
}
inline void TOCEntryInstanceArchive::_internal_set_indexed_list_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  indexed_list_start_ = value;
}
inline void TOCEntryInstanceArchive::set_indexed_list_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_indexed_list_start(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCEntryInstanceArchive.indexed_list_start)
}

// optional uint32 indexed_paragraph_level = 8;
inline bool TOCEntryInstanceArchive::_internal_has_indexed_paragraph_level() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TOCEntryInstanceArchive::has_indexed_paragraph_level() const {
  return _internal_has_indexed_paragraph_level();
}
inline void TOCEntryInstanceArchive::clear_indexed_paragraph_level() {
  indexed_paragraph_level_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::_internal_indexed_paragraph_level() const {
  return indexed_paragraph_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TOCEntryInstanceArchive::indexed_paragraph_level() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryInstanceArchive.indexed_paragraph_level)
  return _internal_indexed_paragraph_level();
}
inline void TOCEntryInstanceArchive::_internal_set_indexed_paragraph_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  indexed_paragraph_level_ = value;
}
inline void TOCEntryInstanceArchive::set_indexed_paragraph_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_indexed_paragraph_level(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCEntryInstanceArchive.indexed_paragraph_level)
}

// optional string number_format_name = 9;
inline bool TOCEntryInstanceArchive::_internal_has_number_format_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TOCEntryInstanceArchive::has_number_format_name() const {
  return _internal_has_number_format_name();
}
inline void TOCEntryInstanceArchive::clear_number_format_name() {
  number_format_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TOCEntryInstanceArchive::number_format_name() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCEntryInstanceArchive.number_format_name)
  return _internal_number_format_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TOCEntryInstanceArchive::set_number_format_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 number_format_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TOCEntryInstanceArchive.number_format_name)
}
inline std::string* TOCEntryInstanceArchive::mutable_number_format_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCEntryInstanceArchive.number_format_name)
  return _internal_mutable_number_format_name();
}
inline const std::string& TOCEntryInstanceArchive::_internal_number_format_name() const {
  return number_format_name_.Get();
}
inline void TOCEntryInstanceArchive::_internal_set_number_format_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  number_format_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TOCEntryInstanceArchive::_internal_mutable_number_format_name() {
  _has_bits_[0] |= 0x00000002u;
  return number_format_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TOCEntryInstanceArchive::release_number_format_name() {
  // @@protoc_insertion_point(field_release:TSWP.TOCEntryInstanceArchive.number_format_name)
  if (!_internal_has_number_format_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return number_format_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TOCEntryInstanceArchive::set_allocated_number_format_name(std::string* number_format_name) {
  if (number_format_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  number_format_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number_format_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCEntryInstanceArchive.number_format_name)
}

// -------------------------------------------------------------------

// UndoTransaction_GenericTransaction

// required uint32 value1 = 1;
inline bool UndoTransaction_GenericTransaction::_internal_has_value1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_GenericTransaction::has_value1() const {
  return _internal_has_value1();
}
inline void UndoTransaction_GenericTransaction::clear_value1() {
  value1_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_GenericTransaction::_internal_value1() const {
  return value1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_GenericTransaction::value1() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.GenericTransaction.value1)
  return _internal_value1();
}
inline void UndoTransaction_GenericTransaction::_internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  value1_ = value;
}
inline void UndoTransaction_GenericTransaction::set_value1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.GenericTransaction.value1)
}

// required uint32 value2 = 2;
inline bool UndoTransaction_GenericTransaction::_internal_has_value2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_GenericTransaction::has_value2() const {
  return _internal_has_value2();
}
inline void UndoTransaction_GenericTransaction::clear_value2() {
  value2_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_GenericTransaction::_internal_value2() const {
  return value2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_GenericTransaction::value2() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.GenericTransaction.value2)
  return _internal_value2();
}
inline void UndoTransaction_GenericTransaction::_internal_set_value2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  value2_ = value;
}
inline void UndoTransaction_GenericTransaction::set_value2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value2(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.GenericTransaction.value2)
}

// required uint32 value3 = 3;
inline bool UndoTransaction_GenericTransaction::_internal_has_value3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UndoTransaction_GenericTransaction::has_value3() const {
  return _internal_has_value3();
}
inline void UndoTransaction_GenericTransaction::clear_value3() {
  value3_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_GenericTransaction::_internal_value3() const {
  return value3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_GenericTransaction::value3() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.GenericTransaction.value3)
  return _internal_value3();
}
inline void UndoTransaction_GenericTransaction::_internal_set_value3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  value3_ = value;
}
inline void UndoTransaction_GenericTransaction::set_value3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value3(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.GenericTransaction.value3)
}

// -------------------------------------------------------------------

// UndoTransaction_TextTransaction

// required uint32 insert_location = 1;
inline bool UndoTransaction_TextTransaction::_internal_has_insert_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_TextTransaction::has_insert_location() const {
  return _internal_has_insert_location();
}
inline void UndoTransaction_TextTransaction::clear_insert_location() {
  insert_location_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_TextTransaction::_internal_insert_location() const {
  return insert_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_TextTransaction::insert_location() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.TextTransaction.insert_location)
  return _internal_insert_location();
}
inline void UndoTransaction_TextTransaction::_internal_set_insert_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  insert_location_ = value;
}
inline void UndoTransaction_TextTransaction::set_insert_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_insert_location(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.TextTransaction.insert_location)
}

// required uint32 insert_length = 2;
inline bool UndoTransaction_TextTransaction::_internal_has_insert_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UndoTransaction_TextTransaction::has_insert_length() const {
  return _internal_has_insert_length();
}
inline void UndoTransaction_TextTransaction::clear_insert_length() {
  insert_length_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_TextTransaction::_internal_insert_length() const {
  return insert_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_TextTransaction::insert_length() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.TextTransaction.insert_length)
  return _internal_insert_length();
}
inline void UndoTransaction_TextTransaction::_internal_set_insert_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  insert_length_ = value;
}
inline void UndoTransaction_TextTransaction::set_insert_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_insert_length(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.TextTransaction.insert_length)
}

// optional string string_to_delete = 3;
inline bool UndoTransaction_TextTransaction::_internal_has_string_to_delete() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_TextTransaction::has_string_to_delete() const {
  return _internal_has_string_to_delete();
}
inline void UndoTransaction_TextTransaction::clear_string_to_delete() {
  string_to_delete_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UndoTransaction_TextTransaction::string_to_delete() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.TextTransaction.string_to_delete)
  return _internal_string_to_delete();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void UndoTransaction_TextTransaction::set_string_to_delete(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_to_delete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.TextTransaction.string_to_delete)
}
inline std::string* UndoTransaction_TextTransaction::mutable_string_to_delete() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.TextTransaction.string_to_delete)
  return _internal_mutable_string_to_delete();
}
inline const std::string& UndoTransaction_TextTransaction::_internal_string_to_delete() const {
  return string_to_delete_.Get();
}
inline void UndoTransaction_TextTransaction::_internal_set_string_to_delete(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_to_delete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* UndoTransaction_TextTransaction::_internal_mutable_string_to_delete() {
  _has_bits_[0] |= 0x00000001u;
  return string_to_delete_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UndoTransaction_TextTransaction::release_string_to_delete() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.TextTransaction.string_to_delete)
  if (!_internal_has_string_to_delete()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_to_delete_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UndoTransaction_TextTransaction::set_allocated_string_to_delete(std::string* string_to_delete) {
  if (string_to_delete != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_to_delete_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_to_delete,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.TextTransaction.string_to_delete)
}

// -------------------------------------------------------------------

// UndoTransaction_CharIndexTransaction

// required uint32 char_index = 1;
inline bool UndoTransaction_CharIndexTransaction::_internal_has_char_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_CharIndexTransaction::has_char_index() const {
  return _internal_has_char_index();
}
inline void UndoTransaction_CharIndexTransaction::clear_char_index() {
  char_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CharIndexTransaction::_internal_char_index() const {
  return char_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CharIndexTransaction::char_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.CharIndexTransaction.char_index)
  return _internal_char_index();
}
inline void UndoTransaction_CharIndexTransaction::_internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  char_index_ = value;
}
inline void UndoTransaction_CharIndexTransaction::set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_char_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.CharIndexTransaction.char_index)
}

// required uint32 count = 2;
inline bool UndoTransaction_CharIndexTransaction::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UndoTransaction_CharIndexTransaction::has_count() const {
  return _internal_has_count();
}
inline void UndoTransaction_CharIndexTransaction::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CharIndexTransaction::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CharIndexTransaction::count() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.CharIndexTransaction.count)
  return _internal_count();
}
inline void UndoTransaction_CharIndexTransaction::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void UndoTransaction_CharIndexTransaction::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.CharIndexTransaction.count)
}

// optional .TSP.Reference object = 3;
inline bool UndoTransaction_CharIndexTransaction::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool UndoTransaction_CharIndexTransaction::has_object() const {
  return _internal_has_object();
}
inline const ::TSP::Reference& UndoTransaction_CharIndexTransaction::_internal_object() const {
  const ::TSP::Reference* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoTransaction_CharIndexTransaction::object() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.CharIndexTransaction.object)
  return _internal_object();
}
inline void UndoTransaction_CharIndexTransaction::unsafe_arena_set_allocated_object(
    ::TSP::Reference* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.CharIndexTransaction.object)
}
inline ::TSP::Reference* UndoTransaction_CharIndexTransaction::release_object() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UndoTransaction_CharIndexTransaction::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.CharIndexTransaction.object)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoTransaction_CharIndexTransaction::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000001u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::TSP::Reference* UndoTransaction_CharIndexTransaction::mutable_object() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.CharIndexTransaction.object)
  return _internal_mutable_object();
}
inline void UndoTransaction_CharIndexTransaction::set_allocated_object(::TSP::Reference* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.CharIndexTransaction.object)
}

// -------------------------------------------------------------------

// UndoTransaction_ReplaceCharIndexTransaction

// required uint32 attribute_index = 1;
inline bool UndoTransaction_ReplaceCharIndexTransaction::_internal_has_attribute_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_ReplaceCharIndexTransaction::has_attribute_index() const {
  return _internal_has_attribute_index();
}
inline void UndoTransaction_ReplaceCharIndexTransaction::clear_attribute_index() {
  attribute_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ReplaceCharIndexTransaction::_internal_attribute_index() const {
  return attribute_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ReplaceCharIndexTransaction::attribute_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.ReplaceCharIndexTransaction.attribute_index)
  return _internal_attribute_index();
}
inline void UndoTransaction_ReplaceCharIndexTransaction::_internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  attribute_index_ = value;
}
inline void UndoTransaction_ReplaceCharIndexTransaction::set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.ReplaceCharIndexTransaction.attribute_index)
}

// required uint32 char_index = 2;
inline bool UndoTransaction_ReplaceCharIndexTransaction::_internal_has_char_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_ReplaceCharIndexTransaction::has_char_index() const {
  return _internal_has_char_index();
}
inline void UndoTransaction_ReplaceCharIndexTransaction::clear_char_index() {
  char_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ReplaceCharIndexTransaction::_internal_char_index() const {
  return char_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ReplaceCharIndexTransaction::char_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.ReplaceCharIndexTransaction.char_index)
  return _internal_char_index();
}
inline void UndoTransaction_ReplaceCharIndexTransaction::_internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  char_index_ = value;
}
inline void UndoTransaction_ReplaceCharIndexTransaction::set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_char_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.ReplaceCharIndexTransaction.char_index)
}

// -------------------------------------------------------------------

// UndoTransaction_AttributeIndexTransaction

// required uint32 attribute_index = 1;
inline bool UndoTransaction_AttributeIndexTransaction::_internal_has_attribute_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UndoTransaction_AttributeIndexTransaction::has_attribute_index() const {
  return _internal_has_attribute_index();
}
inline void UndoTransaction_AttributeIndexTransaction::clear_attribute_index() {
  attribute_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_AttributeIndexTransaction::_internal_attribute_index() const {
  return attribute_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_AttributeIndexTransaction::attribute_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.AttributeIndexTransaction.attribute_index)
  return _internal_attribute_index();
}
inline void UndoTransaction_AttributeIndexTransaction::_internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  attribute_index_ = value;
}
inline void UndoTransaction_AttributeIndexTransaction::set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.AttributeIndexTransaction.attribute_index)
}

// required uint32 char_index = 2;
inline bool UndoTransaction_AttributeIndexTransaction::_internal_has_char_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UndoTransaction_AttributeIndexTransaction::has_char_index() const {
  return _internal_has_char_index();
}
inline void UndoTransaction_AttributeIndexTransaction::clear_char_index() {
  char_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_AttributeIndexTransaction::_internal_char_index() const {
  return char_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_AttributeIndexTransaction::char_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.AttributeIndexTransaction.char_index)
  return _internal_char_index();
}
inline void UndoTransaction_AttributeIndexTransaction::_internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  char_index_ = value;
}
inline void UndoTransaction_AttributeIndexTransaction::set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_char_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.AttributeIndexTransaction.char_index)
}

// optional .TSP.Reference object = 3;
inline bool UndoTransaction_AttributeIndexTransaction::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool UndoTransaction_AttributeIndexTransaction::has_object() const {
  return _internal_has_object();
}
inline const ::TSP::Reference& UndoTransaction_AttributeIndexTransaction::_internal_object() const {
  const ::TSP::Reference* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoTransaction_AttributeIndexTransaction::object() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.AttributeIndexTransaction.object)
  return _internal_object();
}
inline void UndoTransaction_AttributeIndexTransaction::unsafe_arena_set_allocated_object(
    ::TSP::Reference* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.AttributeIndexTransaction.object)
}
inline ::TSP::Reference* UndoTransaction_AttributeIndexTransaction::release_object() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UndoTransaction_AttributeIndexTransaction::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.AttributeIndexTransaction.object)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoTransaction_AttributeIndexTransaction::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000002u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::TSP::Reference* UndoTransaction_AttributeIndexTransaction::mutable_object() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.AttributeIndexTransaction.object)
  return _internal_mutable_object();
}
inline void UndoTransaction_AttributeIndexTransaction::set_allocated_object(::TSP::Reference* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.AttributeIndexTransaction.object)
}

// optional string string = 4;
inline bool UndoTransaction_AttributeIndexTransaction::_internal_has_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_AttributeIndexTransaction::has_string() const {
  return _internal_has_string();
}
inline void UndoTransaction_AttributeIndexTransaction::clear_string() {
  string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UndoTransaction_AttributeIndexTransaction::string() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.AttributeIndexTransaction.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void UndoTransaction_AttributeIndexTransaction::set_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.AttributeIndexTransaction.string)
}
inline std::string* UndoTransaction_AttributeIndexTransaction::mutable_string() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.AttributeIndexTransaction.string)
  return _internal_mutable_string();
}
inline const std::string& UndoTransaction_AttributeIndexTransaction::_internal_string() const {
  return string_.Get();
}
inline void UndoTransaction_AttributeIndexTransaction::_internal_set_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* UndoTransaction_AttributeIndexTransaction::_internal_mutable_string() {
  _has_bits_[0] |= 0x00000001u;
  return string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UndoTransaction_AttributeIndexTransaction::release_string() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.AttributeIndexTransaction.string)
  if (!_internal_has_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UndoTransaction_AttributeIndexTransaction::set_allocated_string(std::string* string) {
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.AttributeIndexTransaction.string)
}

// -------------------------------------------------------------------

// UndoTransaction_InsertAttributeTransaction

// required uint32 attribute_index = 1;
inline bool UndoTransaction_InsertAttributeTransaction::_internal_has_attribute_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UndoTransaction_InsertAttributeTransaction::has_attribute_index() const {
  return _internal_has_attribute_index();
}
inline void UndoTransaction_InsertAttributeTransaction::clear_attribute_index() {
  attribute_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_InsertAttributeTransaction::_internal_attribute_index() const {
  return attribute_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_InsertAttributeTransaction::attribute_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.InsertAttributeTransaction.attribute_index)
  return _internal_attribute_index();
}
inline void UndoTransaction_InsertAttributeTransaction::_internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  attribute_index_ = value;
}
inline void UndoTransaction_InsertAttributeTransaction::set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.InsertAttributeTransaction.attribute_index)
}

// required uint32 attribute_count = 2;
inline bool UndoTransaction_InsertAttributeTransaction::_internal_has_attribute_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UndoTransaction_InsertAttributeTransaction::has_attribute_count() const {
  return _internal_has_attribute_count();
}
inline void UndoTransaction_InsertAttributeTransaction::clear_attribute_count() {
  attribute_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_InsertAttributeTransaction::_internal_attribute_count() const {
  return attribute_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_InsertAttributeTransaction::attribute_count() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.InsertAttributeTransaction.attribute_count)
  return _internal_attribute_count();
}
inline void UndoTransaction_InsertAttributeTransaction::_internal_set_attribute_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  attribute_count_ = value;
}
inline void UndoTransaction_InsertAttributeTransaction::set_attribute_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute_count(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.InsertAttributeTransaction.attribute_count)
}

// optional .TSP.Reference object = 3;
inline bool UndoTransaction_InsertAttributeTransaction::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool UndoTransaction_InsertAttributeTransaction::has_object() const {
  return _internal_has_object();
}
inline const ::TSP::Reference& UndoTransaction_InsertAttributeTransaction::_internal_object() const {
  const ::TSP::Reference* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoTransaction_InsertAttributeTransaction::object() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.InsertAttributeTransaction.object)
  return _internal_object();
}
inline void UndoTransaction_InsertAttributeTransaction::unsafe_arena_set_allocated_object(
    ::TSP::Reference* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.InsertAttributeTransaction.object)
}
inline ::TSP::Reference* UndoTransaction_InsertAttributeTransaction::release_object() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UndoTransaction_InsertAttributeTransaction::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.InsertAttributeTransaction.object)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoTransaction_InsertAttributeTransaction::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000002u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::TSP::Reference* UndoTransaction_InsertAttributeTransaction::mutable_object() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.InsertAttributeTransaction.object)
  return _internal_mutable_object();
}
inline void UndoTransaction_InsertAttributeTransaction::set_allocated_object(::TSP::Reference* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.InsertAttributeTransaction.object)
}

// optional string string = 4;
inline bool UndoTransaction_InsertAttributeTransaction::_internal_has_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_InsertAttributeTransaction::has_string() const {
  return _internal_has_string();
}
inline void UndoTransaction_InsertAttributeTransaction::clear_string() {
  string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UndoTransaction_InsertAttributeTransaction::string() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.InsertAttributeTransaction.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void UndoTransaction_InsertAttributeTransaction::set_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.InsertAttributeTransaction.string)
}
inline std::string* UndoTransaction_InsertAttributeTransaction::mutable_string() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.InsertAttributeTransaction.string)
  return _internal_mutable_string();
}
inline const std::string& UndoTransaction_InsertAttributeTransaction::_internal_string() const {
  return string_.Get();
}
inline void UndoTransaction_InsertAttributeTransaction::_internal_set_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* UndoTransaction_InsertAttributeTransaction::_internal_mutable_string() {
  _has_bits_[0] |= 0x00000001u;
  return string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UndoTransaction_InsertAttributeTransaction::release_string() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.InsertAttributeTransaction.string)
  if (!_internal_has_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UndoTransaction_InsertAttributeTransaction::set_allocated_string(std::string* string) {
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.InsertAttributeTransaction.string)
}

// -------------------------------------------------------------------

// UndoTransaction_InsertNilTransaction

// required uint32 attribute_index = 1;
inline bool UndoTransaction_InsertNilTransaction::_internal_has_attribute_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_InsertNilTransaction::has_attribute_index() const {
  return _internal_has_attribute_index();
}
inline void UndoTransaction_InsertNilTransaction::clear_attribute_index() {
  attribute_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_InsertNilTransaction::_internal_attribute_index() const {
  return attribute_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_InsertNilTransaction::attribute_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.InsertNilTransaction.attribute_index)
  return _internal_attribute_index();
}
inline void UndoTransaction_InsertNilTransaction::_internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  attribute_index_ = value;
}
inline void UndoTransaction_InsertNilTransaction::set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.InsertNilTransaction.attribute_index)
}

// required uint32 attribute_count = 2;
inline bool UndoTransaction_InsertNilTransaction::_internal_has_attribute_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_InsertNilTransaction::has_attribute_count() const {
  return _internal_has_attribute_count();
}
inline void UndoTransaction_InsertNilTransaction::clear_attribute_count() {
  attribute_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_InsertNilTransaction::_internal_attribute_count() const {
  return attribute_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_InsertNilTransaction::attribute_count() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.InsertNilTransaction.attribute_count)
  return _internal_attribute_count();
}
inline void UndoTransaction_InsertNilTransaction::_internal_set_attribute_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  attribute_count_ = value;
}
inline void UndoTransaction_InsertNilTransaction::set_attribute_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute_count(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.InsertNilTransaction.attribute_count)
}

// -------------------------------------------------------------------

// UndoTransaction_CharDeltaTransaction

// required uint32 char_index = 1;
inline bool UndoTransaction_CharDeltaTransaction::_internal_has_char_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_CharDeltaTransaction::has_char_index() const {
  return _internal_has_char_index();
}
inline void UndoTransaction_CharDeltaTransaction::clear_char_index() {
  char_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CharDeltaTransaction::_internal_char_index() const {
  return char_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CharDeltaTransaction::char_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.CharDeltaTransaction.char_index)
  return _internal_char_index();
}
inline void UndoTransaction_CharDeltaTransaction::_internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  char_index_ = value;
}
inline void UndoTransaction_CharDeltaTransaction::set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_char_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.CharDeltaTransaction.char_index)
}

// required uint32 attribute_index = 2;
inline bool UndoTransaction_CharDeltaTransaction::_internal_has_attribute_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_CharDeltaTransaction::has_attribute_index() const {
  return _internal_has_attribute_index();
}
inline void UndoTransaction_CharDeltaTransaction::clear_attribute_index() {
  attribute_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CharDeltaTransaction::_internal_attribute_index() const {
  return attribute_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CharDeltaTransaction::attribute_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.CharDeltaTransaction.attribute_index)
  return _internal_attribute_index();
}
inline void UndoTransaction_CharDeltaTransaction::_internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  attribute_index_ = value;
}
inline void UndoTransaction_CharDeltaTransaction::set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.CharDeltaTransaction.attribute_index)
}

// required sint32 char_delta = 3;
inline bool UndoTransaction_CharDeltaTransaction::_internal_has_char_delta() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UndoTransaction_CharDeltaTransaction::has_char_delta() const {
  return _internal_has_char_delta();
}
inline void UndoTransaction_CharDeltaTransaction::clear_char_delta() {
  char_delta_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UndoTransaction_CharDeltaTransaction::_internal_char_delta() const {
  return char_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UndoTransaction_CharDeltaTransaction::char_delta() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.CharDeltaTransaction.char_delta)
  return _internal_char_delta();
}
inline void UndoTransaction_CharDeltaTransaction::_internal_set_char_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  char_delta_ = value;
}
inline void UndoTransaction_CharDeltaTransaction::set_char_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_char_delta(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.CharDeltaTransaction.char_delta)
}

// -------------------------------------------------------------------

// UndoTransaction_ParagraphDataTransaction

// required uint32 attribute_index = 1;
inline bool UndoTransaction_ParagraphDataTransaction::_internal_has_attribute_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_ParagraphDataTransaction::has_attribute_index() const {
  return _internal_has_attribute_index();
}
inline void UndoTransaction_ParagraphDataTransaction::clear_attribute_index() {
  attribute_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ParagraphDataTransaction::_internal_attribute_index() const {
  return attribute_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ParagraphDataTransaction::attribute_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.ParagraphDataTransaction.attribute_index)
  return _internal_attribute_index();
}
inline void UndoTransaction_ParagraphDataTransaction::_internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  attribute_index_ = value;
}
inline void UndoTransaction_ParagraphDataTransaction::set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.ParagraphDataTransaction.attribute_index)
}

// required uint32 first = 2;
inline bool UndoTransaction_ParagraphDataTransaction::_internal_has_first() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_ParagraphDataTransaction::has_first() const {
  return _internal_has_first();
}
inline void UndoTransaction_ParagraphDataTransaction::clear_first() {
  first_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ParagraphDataTransaction::_internal_first() const {
  return first_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ParagraphDataTransaction::first() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.ParagraphDataTransaction.first)
  return _internal_first();
}
inline void UndoTransaction_ParagraphDataTransaction::_internal_set_first(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  first_ = value;
}
inline void UndoTransaction_ParagraphDataTransaction::set_first(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.ParagraphDataTransaction.first)
}

// required uint32 second = 3;
inline bool UndoTransaction_ParagraphDataTransaction::_internal_has_second() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UndoTransaction_ParagraphDataTransaction::has_second() const {
  return _internal_has_second();
}
inline void UndoTransaction_ParagraphDataTransaction::clear_second() {
  second_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ParagraphDataTransaction::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ParagraphDataTransaction::second() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.ParagraphDataTransaction.second)
  return _internal_second();
}
inline void UndoTransaction_ParagraphDataTransaction::_internal_set_second(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  second_ = value;
}
inline void UndoTransaction_ParagraphDataTransaction::set_second(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.ParagraphDataTransaction.second)
}

// required uint32 char_index = 4;
inline bool UndoTransaction_ParagraphDataTransaction::_internal_has_char_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UndoTransaction_ParagraphDataTransaction::has_char_index() const {
  return _internal_has_char_index();
}
inline void UndoTransaction_ParagraphDataTransaction::clear_char_index() {
  char_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ParagraphDataTransaction::_internal_char_index() const {
  return char_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ParagraphDataTransaction::char_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.ParagraphDataTransaction.char_index)
  return _internal_char_index();
}
inline void UndoTransaction_ParagraphDataTransaction::_internal_set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  char_index_ = value;
}
inline void UndoTransaction_ParagraphDataTransaction::set_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_char_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.ParagraphDataTransaction.char_index)
}

// -------------------------------------------------------------------

// UndoTransaction_ObjectDOLCTransaction

// required uint32 flags = 1;
inline bool UndoTransaction_ObjectDOLCTransaction::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_ObjectDOLCTransaction::has_flags() const {
  return _internal_has_flags();
}
inline void UndoTransaction_ObjectDOLCTransaction::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ObjectDOLCTransaction::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_ObjectDOLCTransaction::flags() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.ObjectDOLCTransaction.flags)
  return _internal_flags();
}
inline void UndoTransaction_ObjectDOLCTransaction::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flags_ = value;
}
inline void UndoTransaction_ObjectDOLCTransaction::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.ObjectDOLCTransaction.flags)
}

// optional .TSP.Reference object = 2;
inline bool UndoTransaction_ObjectDOLCTransaction::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool UndoTransaction_ObjectDOLCTransaction::has_object() const {
  return _internal_has_object();
}
inline const ::TSP::Reference& UndoTransaction_ObjectDOLCTransaction::_internal_object() const {
  const ::TSP::Reference* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoTransaction_ObjectDOLCTransaction::object() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.ObjectDOLCTransaction.object)
  return _internal_object();
}
inline void UndoTransaction_ObjectDOLCTransaction::unsafe_arena_set_allocated_object(
    ::TSP::Reference* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.ObjectDOLCTransaction.object)
}
inline ::TSP::Reference* UndoTransaction_ObjectDOLCTransaction::release_object() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UndoTransaction_ObjectDOLCTransaction::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.ObjectDOLCTransaction.object)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoTransaction_ObjectDOLCTransaction::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000001u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::TSP::Reference* UndoTransaction_ObjectDOLCTransaction::mutable_object() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.ObjectDOLCTransaction.object)
  return _internal_mutable_object();
}
inline void UndoTransaction_ObjectDOLCTransaction::set_allocated_object(::TSP::Reference* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.ObjectDOLCTransaction.object)
}

// -------------------------------------------------------------------

// UndoTransaction_CTDateTransaction

// required uint32 attribute_index = 1;
inline bool UndoTransaction_CTDateTransaction::_internal_has_attribute_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_CTDateTransaction::has_attribute_index() const {
  return _internal_has_attribute_index();
}
inline void UndoTransaction_CTDateTransaction::clear_attribute_index() {
  attribute_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CTDateTransaction::_internal_attribute_index() const {
  return attribute_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_CTDateTransaction::attribute_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.CTDateTransaction.attribute_index)
  return _internal_attribute_index();
}
inline void UndoTransaction_CTDateTransaction::_internal_set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  attribute_index_ = value;
}
inline void UndoTransaction_CTDateTransaction::set_attribute_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.CTDateTransaction.attribute_index)
}

// optional .TSP.Date date = 2;
inline bool UndoTransaction_CTDateTransaction::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || date_ != nullptr);
  return value;
}
inline bool UndoTransaction_CTDateTransaction::has_date() const {
  return _internal_has_date();
}
inline const ::TSP::Date& UndoTransaction_CTDateTransaction::_internal_date() const {
  const ::TSP::Date* p = date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& UndoTransaction_CTDateTransaction::date() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.CTDateTransaction.date)
  return _internal_date();
}
inline void UndoTransaction_CTDateTransaction::unsafe_arena_set_allocated_date(
    ::TSP::Date* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.CTDateTransaction.date)
}
inline ::TSP::Date* UndoTransaction_CTDateTransaction::release_date() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Date* UndoTransaction_CTDateTransaction::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.CTDateTransaction.date)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::TSP::Date* UndoTransaction_CTDateTransaction::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000001u;
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArena());
    date_ = p;
  }
  return date_;
}
inline ::TSP::Date* UndoTransaction_CTDateTransaction::mutable_date() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.CTDateTransaction.date)
  return _internal_mutable_date();
}
inline void UndoTransaction_CTDateTransaction::set_allocated_date(::TSP::Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.CTDateTransaction.date)
}

// -------------------------------------------------------------------

// UndoTransaction_UnionTransaction

// required .TSWP.UndoTransaction.UndoKind kind = 1;
inline bool UndoTransaction_UnionTransaction::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_kind() const {
  return _internal_has_kind();
}
inline void UndoTransaction_UnionTransaction::clear_kind() {
  kind_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::TSWP::UndoTransaction_UndoKind UndoTransaction_UnionTransaction::_internal_kind() const {
  return static_cast< ::TSWP::UndoTransaction_UndoKind >(kind_);
}
inline ::TSWP::UndoTransaction_UndoKind UndoTransaction_UnionTransaction::kind() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.kind)
  return _internal_kind();
}
inline void UndoTransaction_UnionTransaction::_internal_set_kind(::TSWP::UndoTransaction_UndoKind value) {
  assert(::TSWP::UndoTransaction_UndoKind_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  kind_ = value;
}
inline void UndoTransaction_UnionTransaction::set_kind(::TSWP::UndoTransaction_UndoKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.UnionTransaction.kind)
}

// optional uint32 table = 2;
inline bool UndoTransaction_UnionTransaction::_internal_has_table() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_table() const {
  return _internal_has_table();
}
inline void UndoTransaction_UnionTransaction::clear_table() {
  table_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_UnionTransaction::_internal_table() const {
  return table_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_UnionTransaction::table() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.table)
  return _internal_table();
}
inline void UndoTransaction_UnionTransaction::_internal_set_table(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  table_ = value;
}
inline void UndoTransaction_UnionTransaction::set_table(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.UnionTransaction.table)
}

// optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
inline bool UndoTransaction_UnionTransaction::_internal_has_generic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || generic_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_generic() const {
  return _internal_has_generic();
}
inline void UndoTransaction_UnionTransaction::clear_generic() {
  if (generic_ != nullptr) generic_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::UndoTransaction_GenericTransaction& UndoTransaction_UnionTransaction::_internal_generic() const {
  const ::TSWP::UndoTransaction_GenericTransaction* p = generic_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_GenericTransaction&>(
      ::TSWP::_UndoTransaction_GenericTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_GenericTransaction& UndoTransaction_UnionTransaction::generic() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.generic)
  return _internal_generic();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_generic(
    ::TSWP::UndoTransaction_GenericTransaction* generic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generic_);
  }
  generic_ = generic;
  if (generic) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.generic)
}
inline ::TSWP::UndoTransaction_GenericTransaction* UndoTransaction_UnionTransaction::release_generic() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::UndoTransaction_GenericTransaction* temp = generic_;
  generic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_GenericTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_generic() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.generic)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::UndoTransaction_GenericTransaction* temp = generic_;
  generic_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_GenericTransaction* UndoTransaction_UnionTransaction::_internal_mutable_generic() {
  _has_bits_[0] |= 0x00000001u;
  if (generic_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_GenericTransaction>(GetArena());
    generic_ = p;
  }
  return generic_;
}
inline ::TSWP::UndoTransaction_GenericTransaction* UndoTransaction_UnionTransaction::mutable_generic() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.generic)
  return _internal_mutable_generic();
}
inline void UndoTransaction_UnionTransaction::set_allocated_generic(::TSWP::UndoTransaction_GenericTransaction* generic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete generic_;
  }
  if (generic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generic);
    if (message_arena != submessage_arena) {
      generic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  generic_ = generic;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.generic)
}

// optional .TSWP.UndoTransaction.TextTransaction text = 6;
inline bool UndoTransaction_UnionTransaction::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || text_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_text() const {
  return _internal_has_text();
}
inline void UndoTransaction_UnionTransaction::clear_text() {
  if (text_ != nullptr) text_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::UndoTransaction_TextTransaction& UndoTransaction_UnionTransaction::_internal_text() const {
  const ::TSWP::UndoTransaction_TextTransaction* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_TextTransaction&>(
      ::TSWP::_UndoTransaction_TextTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_TextTransaction& UndoTransaction_UnionTransaction::text() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.text)
  return _internal_text();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_text(
    ::TSWP::UndoTransaction_TextTransaction* text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.text)
}
inline ::TSWP::UndoTransaction_TextTransaction* UndoTransaction_UnionTransaction::release_text() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::UndoTransaction_TextTransaction* temp = text_;
  text_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_TextTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.text)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::UndoTransaction_TextTransaction* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_TextTransaction* UndoTransaction_UnionTransaction::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000002u;
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_TextTransaction>(GetArena());
    text_ = p;
  }
  return text_;
}
inline ::TSWP::UndoTransaction_TextTransaction* UndoTransaction_UnionTransaction::mutable_text() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.text)
  return _internal_mutable_text();
}
inline void UndoTransaction_UnionTransaction::set_allocated_text(::TSWP::UndoTransaction_TextTransaction* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.text)
}

// optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
inline bool UndoTransaction_UnionTransaction::_internal_has_char_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || char_index_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_char_index() const {
  return _internal_has_char_index();
}
inline void UndoTransaction_UnionTransaction::clear_char_index() {
  if (char_index_ != nullptr) char_index_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::UndoTransaction_CharIndexTransaction& UndoTransaction_UnionTransaction::_internal_char_index() const {
  const ::TSWP::UndoTransaction_CharIndexTransaction* p = char_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_CharIndexTransaction&>(
      ::TSWP::_UndoTransaction_CharIndexTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_CharIndexTransaction& UndoTransaction_UnionTransaction::char_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.char_index)
  return _internal_char_index();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_char_index(
    ::TSWP::UndoTransaction_CharIndexTransaction* char_index) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_index_);
  }
  char_index_ = char_index;
  if (char_index) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.char_index)
}
inline ::TSWP::UndoTransaction_CharIndexTransaction* UndoTransaction_UnionTransaction::release_char_index() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction_CharIndexTransaction* temp = char_index_;
  char_index_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_CharIndexTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_char_index() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.char_index)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction_CharIndexTransaction* temp = char_index_;
  char_index_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_CharIndexTransaction* UndoTransaction_UnionTransaction::_internal_mutable_char_index() {
  _has_bits_[0] |= 0x00000004u;
  if (char_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_CharIndexTransaction>(GetArena());
    char_index_ = p;
  }
  return char_index_;
}
inline ::TSWP::UndoTransaction_CharIndexTransaction* UndoTransaction_UnionTransaction::mutable_char_index() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.char_index)
  return _internal_mutable_char_index();
}
inline void UndoTransaction_UnionTransaction::set_allocated_char_index(::TSWP::UndoTransaction_CharIndexTransaction* char_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete char_index_;
  }
  if (char_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(char_index);
    if (message_arena != submessage_arena) {
      char_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_index, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  char_index_ = char_index;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.char_index)
}

// optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
inline bool UndoTransaction_UnionTransaction::_internal_has_replace_char_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || replace_char_index_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_replace_char_index() const {
  return _internal_has_replace_char_index();
}
inline void UndoTransaction_UnionTransaction::clear_replace_char_index() {
  if (replace_char_index_ != nullptr) replace_char_index_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction& UndoTransaction_UnionTransaction::_internal_replace_char_index() const {
  const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* p = replace_char_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction&>(
      ::TSWP::_UndoTransaction_ReplaceCharIndexTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction& UndoTransaction_UnionTransaction::replace_char_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.replace_char_index)
  return _internal_replace_char_index();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_replace_char_index(
    ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* replace_char_index) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replace_char_index_);
  }
  replace_char_index_ = replace_char_index;
  if (replace_char_index) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.replace_char_index)
}
inline ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* UndoTransaction_UnionTransaction::release_replace_char_index() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* temp = replace_char_index_;
  replace_char_index_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_replace_char_index() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.replace_char_index)
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* temp = replace_char_index_;
  replace_char_index_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* UndoTransaction_UnionTransaction::_internal_mutable_replace_char_index() {
  _has_bits_[0] |= 0x00000008u;
  if (replace_char_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_ReplaceCharIndexTransaction>(GetArena());
    replace_char_index_ = p;
  }
  return replace_char_index_;
}
inline ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* UndoTransaction_UnionTransaction::mutable_replace_char_index() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.replace_char_index)
  return _internal_mutable_replace_char_index();
}
inline void UndoTransaction_UnionTransaction::set_allocated_replace_char_index(::TSWP::UndoTransaction_ReplaceCharIndexTransaction* replace_char_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete replace_char_index_;
  }
  if (replace_char_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replace_char_index);
    if (message_arena != submessage_arena) {
      replace_char_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replace_char_index, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  replace_char_index_ = replace_char_index;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.replace_char_index)
}

// optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
inline bool UndoTransaction_UnionTransaction::_internal_has_attribute_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || attribute_index_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_attribute_index() const {
  return _internal_has_attribute_index();
}
inline void UndoTransaction_UnionTransaction::clear_attribute_index() {
  if (attribute_index_ != nullptr) attribute_index_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSWP::UndoTransaction_AttributeIndexTransaction& UndoTransaction_UnionTransaction::_internal_attribute_index() const {
  const ::TSWP::UndoTransaction_AttributeIndexTransaction* p = attribute_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_AttributeIndexTransaction&>(
      ::TSWP::_UndoTransaction_AttributeIndexTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_AttributeIndexTransaction& UndoTransaction_UnionTransaction::attribute_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.attribute_index)
  return _internal_attribute_index();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_attribute_index(
    ::TSWP::UndoTransaction_AttributeIndexTransaction* attribute_index) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_index_);
  }
  attribute_index_ = attribute_index;
  if (attribute_index) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.attribute_index)
}
inline ::TSWP::UndoTransaction_AttributeIndexTransaction* UndoTransaction_UnionTransaction::release_attribute_index() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSWP::UndoTransaction_AttributeIndexTransaction* temp = attribute_index_;
  attribute_index_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_AttributeIndexTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_attribute_index() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.attribute_index)
  _has_bits_[0] &= ~0x00000010u;
  ::TSWP::UndoTransaction_AttributeIndexTransaction* temp = attribute_index_;
  attribute_index_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_AttributeIndexTransaction* UndoTransaction_UnionTransaction::_internal_mutable_attribute_index() {
  _has_bits_[0] |= 0x00000010u;
  if (attribute_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_AttributeIndexTransaction>(GetArena());
    attribute_index_ = p;
  }
  return attribute_index_;
}
inline ::TSWP::UndoTransaction_AttributeIndexTransaction* UndoTransaction_UnionTransaction::mutable_attribute_index() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.attribute_index)
  return _internal_mutable_attribute_index();
}
inline void UndoTransaction_UnionTransaction::set_allocated_attribute_index(::TSWP::UndoTransaction_AttributeIndexTransaction* attribute_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attribute_index_;
  }
  if (attribute_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attribute_index);
    if (message_arena != submessage_arena) {
      attribute_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute_index, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  attribute_index_ = attribute_index;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.attribute_index)
}

// optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
inline bool UndoTransaction_UnionTransaction::_internal_has_insert_nil() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || insert_nil_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_insert_nil() const {
  return _internal_has_insert_nil();
}
inline void UndoTransaction_UnionTransaction::clear_insert_nil() {
  if (insert_nil_ != nullptr) insert_nil_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSWP::UndoTransaction_InsertNilTransaction& UndoTransaction_UnionTransaction::_internal_insert_nil() const {
  const ::TSWP::UndoTransaction_InsertNilTransaction* p = insert_nil_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_InsertNilTransaction&>(
      ::TSWP::_UndoTransaction_InsertNilTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_InsertNilTransaction& UndoTransaction_UnionTransaction::insert_nil() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.insert_nil)
  return _internal_insert_nil();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_insert_nil(
    ::TSWP::UndoTransaction_InsertNilTransaction* insert_nil) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_nil_);
  }
  insert_nil_ = insert_nil;
  if (insert_nil) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.insert_nil)
}
inline ::TSWP::UndoTransaction_InsertNilTransaction* UndoTransaction_UnionTransaction::release_insert_nil() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSWP::UndoTransaction_InsertNilTransaction* temp = insert_nil_;
  insert_nil_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_InsertNilTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_insert_nil() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.insert_nil)
  _has_bits_[0] &= ~0x00000020u;
  ::TSWP::UndoTransaction_InsertNilTransaction* temp = insert_nil_;
  insert_nil_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_InsertNilTransaction* UndoTransaction_UnionTransaction::_internal_mutable_insert_nil() {
  _has_bits_[0] |= 0x00000020u;
  if (insert_nil_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_InsertNilTransaction>(GetArena());
    insert_nil_ = p;
  }
  return insert_nil_;
}
inline ::TSWP::UndoTransaction_InsertNilTransaction* UndoTransaction_UnionTransaction::mutable_insert_nil() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.insert_nil)
  return _internal_mutable_insert_nil();
}
inline void UndoTransaction_UnionTransaction::set_allocated_insert_nil(::TSWP::UndoTransaction_InsertNilTransaction* insert_nil) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete insert_nil_;
  }
  if (insert_nil) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(insert_nil);
    if (message_arena != submessage_arena) {
      insert_nil = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_nil, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  insert_nil_ = insert_nil;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.insert_nil)
}

// optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
inline bool UndoTransaction_UnionTransaction::_internal_has_insert_attribute() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || insert_attribute_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_insert_attribute() const {
  return _internal_has_insert_attribute();
}
inline void UndoTransaction_UnionTransaction::clear_insert_attribute() {
  if (insert_attribute_ != nullptr) insert_attribute_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSWP::UndoTransaction_InsertAttributeTransaction& UndoTransaction_UnionTransaction::_internal_insert_attribute() const {
  const ::TSWP::UndoTransaction_InsertAttributeTransaction* p = insert_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_InsertAttributeTransaction&>(
      ::TSWP::_UndoTransaction_InsertAttributeTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_InsertAttributeTransaction& UndoTransaction_UnionTransaction::insert_attribute() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.insert_attribute)
  return _internal_insert_attribute();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_insert_attribute(
    ::TSWP::UndoTransaction_InsertAttributeTransaction* insert_attribute) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_attribute_);
  }
  insert_attribute_ = insert_attribute;
  if (insert_attribute) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.insert_attribute)
}
inline ::TSWP::UndoTransaction_InsertAttributeTransaction* UndoTransaction_UnionTransaction::release_insert_attribute() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::UndoTransaction_InsertAttributeTransaction* temp = insert_attribute_;
  insert_attribute_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_InsertAttributeTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_insert_attribute() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.insert_attribute)
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::UndoTransaction_InsertAttributeTransaction* temp = insert_attribute_;
  insert_attribute_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_InsertAttributeTransaction* UndoTransaction_UnionTransaction::_internal_mutable_insert_attribute() {
  _has_bits_[0] |= 0x00000040u;
  if (insert_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_InsertAttributeTransaction>(GetArena());
    insert_attribute_ = p;
  }
  return insert_attribute_;
}
inline ::TSWP::UndoTransaction_InsertAttributeTransaction* UndoTransaction_UnionTransaction::mutable_insert_attribute() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.insert_attribute)
  return _internal_mutable_insert_attribute();
}
inline void UndoTransaction_UnionTransaction::set_allocated_insert_attribute(::TSWP::UndoTransaction_InsertAttributeTransaction* insert_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete insert_attribute_;
  }
  if (insert_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(insert_attribute);
    if (message_arena != submessage_arena) {
      insert_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_attribute, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  insert_attribute_ = insert_attribute;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.insert_attribute)
}

// optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
inline bool UndoTransaction_UnionTransaction::_internal_has_char_delta() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || char_delta_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_char_delta() const {
  return _internal_has_char_delta();
}
inline void UndoTransaction_UnionTransaction::clear_char_delta() {
  if (char_delta_ != nullptr) char_delta_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TSWP::UndoTransaction_CharDeltaTransaction& UndoTransaction_UnionTransaction::_internal_char_delta() const {
  const ::TSWP::UndoTransaction_CharDeltaTransaction* p = char_delta_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_CharDeltaTransaction&>(
      ::TSWP::_UndoTransaction_CharDeltaTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_CharDeltaTransaction& UndoTransaction_UnionTransaction::char_delta() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.char_delta)
  return _internal_char_delta();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_char_delta(
    ::TSWP::UndoTransaction_CharDeltaTransaction* char_delta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_delta_);
  }
  char_delta_ = char_delta;
  if (char_delta) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.char_delta)
}
inline ::TSWP::UndoTransaction_CharDeltaTransaction* UndoTransaction_UnionTransaction::release_char_delta() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSWP::UndoTransaction_CharDeltaTransaction* temp = char_delta_;
  char_delta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_CharDeltaTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_char_delta() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.char_delta)
  _has_bits_[0] &= ~0x00000080u;
  ::TSWP::UndoTransaction_CharDeltaTransaction* temp = char_delta_;
  char_delta_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_CharDeltaTransaction* UndoTransaction_UnionTransaction::_internal_mutable_char_delta() {
  _has_bits_[0] |= 0x00000080u;
  if (char_delta_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_CharDeltaTransaction>(GetArena());
    char_delta_ = p;
  }
  return char_delta_;
}
inline ::TSWP::UndoTransaction_CharDeltaTransaction* UndoTransaction_UnionTransaction::mutable_char_delta() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.char_delta)
  return _internal_mutable_char_delta();
}
inline void UndoTransaction_UnionTransaction::set_allocated_char_delta(::TSWP::UndoTransaction_CharDeltaTransaction* char_delta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete char_delta_;
  }
  if (char_delta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(char_delta);
    if (message_arena != submessage_arena) {
      char_delta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_delta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  char_delta_ = char_delta;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.char_delta)
}

// optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
inline bool UndoTransaction_UnionTransaction::_internal_has_paragraph_data() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || paragraph_data_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_paragraph_data() const {
  return _internal_has_paragraph_data();
}
inline void UndoTransaction_UnionTransaction::clear_paragraph_data() {
  if (paragraph_data_ != nullptr) paragraph_data_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::TSWP::UndoTransaction_ParagraphDataTransaction& UndoTransaction_UnionTransaction::_internal_paragraph_data() const {
  const ::TSWP::UndoTransaction_ParagraphDataTransaction* p = paragraph_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_ParagraphDataTransaction&>(
      ::TSWP::_UndoTransaction_ParagraphDataTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_ParagraphDataTransaction& UndoTransaction_UnionTransaction::paragraph_data() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.paragraph_data)
  return _internal_paragraph_data();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_paragraph_data(
    ::TSWP::UndoTransaction_ParagraphDataTransaction* paragraph_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_data_);
  }
  paragraph_data_ = paragraph_data;
  if (paragraph_data) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.paragraph_data)
}
inline ::TSWP::UndoTransaction_ParagraphDataTransaction* UndoTransaction_UnionTransaction::release_paragraph_data() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSWP::UndoTransaction_ParagraphDataTransaction* temp = paragraph_data_;
  paragraph_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_ParagraphDataTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_paragraph_data() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.paragraph_data)
  _has_bits_[0] &= ~0x00000100u;
  ::TSWP::UndoTransaction_ParagraphDataTransaction* temp = paragraph_data_;
  paragraph_data_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_ParagraphDataTransaction* UndoTransaction_UnionTransaction::_internal_mutable_paragraph_data() {
  _has_bits_[0] |= 0x00000100u;
  if (paragraph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_ParagraphDataTransaction>(GetArena());
    paragraph_data_ = p;
  }
  return paragraph_data_;
}
inline ::TSWP::UndoTransaction_ParagraphDataTransaction* UndoTransaction_UnionTransaction::mutable_paragraph_data() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.paragraph_data)
  return _internal_mutable_paragraph_data();
}
inline void UndoTransaction_UnionTransaction::set_allocated_paragraph_data(::TSWP::UndoTransaction_ParagraphDataTransaction* paragraph_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete paragraph_data_;
  }
  if (paragraph_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(paragraph_data);
    if (message_arena != submessage_arena) {
      paragraph_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paragraph_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  paragraph_data_ = paragraph_data;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.paragraph_data)
}

// optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
inline bool UndoTransaction_UnionTransaction::_internal_has_object_dolc() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || object_dolc_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_object_dolc() const {
  return _internal_has_object_dolc();
}
inline void UndoTransaction_UnionTransaction::clear_object_dolc() {
  if (object_dolc_ != nullptr) object_dolc_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::TSWP::UndoTransaction_ObjectDOLCTransaction& UndoTransaction_UnionTransaction::_internal_object_dolc() const {
  const ::TSWP::UndoTransaction_ObjectDOLCTransaction* p = object_dolc_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_ObjectDOLCTransaction&>(
      ::TSWP::_UndoTransaction_ObjectDOLCTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_ObjectDOLCTransaction& UndoTransaction_UnionTransaction::object_dolc() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.object_dolc)
  return _internal_object_dolc();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_object_dolc(
    ::TSWP::UndoTransaction_ObjectDOLCTransaction* object_dolc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_dolc_);
  }
  object_dolc_ = object_dolc;
  if (object_dolc) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.object_dolc)
}
inline ::TSWP::UndoTransaction_ObjectDOLCTransaction* UndoTransaction_UnionTransaction::release_object_dolc() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSWP::UndoTransaction_ObjectDOLCTransaction* temp = object_dolc_;
  object_dolc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_ObjectDOLCTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_object_dolc() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.object_dolc)
  _has_bits_[0] &= ~0x00000200u;
  ::TSWP::UndoTransaction_ObjectDOLCTransaction* temp = object_dolc_;
  object_dolc_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_ObjectDOLCTransaction* UndoTransaction_UnionTransaction::_internal_mutable_object_dolc() {
  _has_bits_[0] |= 0x00000200u;
  if (object_dolc_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_ObjectDOLCTransaction>(GetArena());
    object_dolc_ = p;
  }
  return object_dolc_;
}
inline ::TSWP::UndoTransaction_ObjectDOLCTransaction* UndoTransaction_UnionTransaction::mutable_object_dolc() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.object_dolc)
  return _internal_mutable_object_dolc();
}
inline void UndoTransaction_UnionTransaction::set_allocated_object_dolc(::TSWP::UndoTransaction_ObjectDOLCTransaction* object_dolc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_dolc_;
  }
  if (object_dolc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_dolc);
    if (message_arena != submessage_arena) {
      object_dolc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_dolc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  object_dolc_ = object_dolc;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.object_dolc)
}

// optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
inline bool UndoTransaction_UnionTransaction::_internal_has_ct_date() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || ct_date_ != nullptr);
  return value;
}
inline bool UndoTransaction_UnionTransaction::has_ct_date() const {
  return _internal_has_ct_date();
}
inline void UndoTransaction_UnionTransaction::clear_ct_date() {
  if (ct_date_ != nullptr) ct_date_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::TSWP::UndoTransaction_CTDateTransaction& UndoTransaction_UnionTransaction::_internal_ct_date() const {
  const ::TSWP::UndoTransaction_CTDateTransaction* p = ct_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction_CTDateTransaction&>(
      ::TSWP::_UndoTransaction_CTDateTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction_CTDateTransaction& UndoTransaction_UnionTransaction::ct_date() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.UnionTransaction.ct_date)
  return _internal_ct_date();
}
inline void UndoTransaction_UnionTransaction::unsafe_arena_set_allocated_ct_date(
    ::TSWP::UndoTransaction_CTDateTransaction* ct_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ct_date_);
  }
  ct_date_ = ct_date;
  if (ct_date) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.UnionTransaction.ct_date)
}
inline ::TSWP::UndoTransaction_CTDateTransaction* UndoTransaction_UnionTransaction::release_ct_date() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSWP::UndoTransaction_CTDateTransaction* temp = ct_date_;
  ct_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction_CTDateTransaction* UndoTransaction_UnionTransaction::unsafe_arena_release_ct_date() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.UnionTransaction.ct_date)
  _has_bits_[0] &= ~0x00000400u;
  ::TSWP::UndoTransaction_CTDateTransaction* temp = ct_date_;
  ct_date_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction_CTDateTransaction* UndoTransaction_UnionTransaction::_internal_mutable_ct_date() {
  _has_bits_[0] |= 0x00000400u;
  if (ct_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction_CTDateTransaction>(GetArena());
    ct_date_ = p;
  }
  return ct_date_;
}
inline ::TSWP::UndoTransaction_CTDateTransaction* UndoTransaction_UnionTransaction::mutable_ct_date() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.UnionTransaction.ct_date)
  return _internal_mutable_ct_date();
}
inline void UndoTransaction_UnionTransaction::set_allocated_ct_date(::TSWP::UndoTransaction_CTDateTransaction* ct_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ct_date_;
  }
  if (ct_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ct_date);
    if (message_arena != submessage_arena) {
      ct_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ct_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  ct_date_ = ct_date;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.UnionTransaction.ct_date)
}

// -------------------------------------------------------------------

// UndoTransaction_StorageAction

// required .TSWP.UndoTransaction.ActionKind kind = 1;
inline bool UndoTransaction_StorageAction::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UndoTransaction_StorageAction::has_kind() const {
  return _internal_has_kind();
}
inline void UndoTransaction_StorageAction::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::TSWP::UndoTransaction_ActionKind UndoTransaction_StorageAction::_internal_kind() const {
  return static_cast< ::TSWP::UndoTransaction_ActionKind >(kind_);
}
inline ::TSWP::UndoTransaction_ActionKind UndoTransaction_StorageAction::kind() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.kind)
  return _internal_kind();
}
inline void UndoTransaction_StorageAction::_internal_set_kind(::TSWP::UndoTransaction_ActionKind value) {
  assert(::TSWP::UndoTransaction_ActionKind_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  kind_ = value;
}
inline void UndoTransaction_StorageAction::set_kind(::TSWP::UndoTransaction_ActionKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageAction.kind)
}

// optional uint32 flags = 2;
inline bool UndoTransaction_StorageAction::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UndoTransaction_StorageAction::has_flags() const {
  return _internal_has_flags();
}
inline void UndoTransaction_StorageAction::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::flags() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.flags)
  return _internal_flags();
}
inline void UndoTransaction_StorageAction::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  flags_ = value;
}
inline void UndoTransaction_StorageAction::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageAction.flags)
}

// optional uint32 table = 3;
inline bool UndoTransaction_StorageAction::_internal_has_table() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UndoTransaction_StorageAction::has_table() const {
  return _internal_has_table();
}
inline void UndoTransaction_StorageAction::clear_table() {
  table_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::_internal_table() const {
  return table_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::table() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.table)
  return _internal_table();
}
inline void UndoTransaction_StorageAction::_internal_set_table(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  table_ = value;
}
inline void UndoTransaction_StorageAction::set_table(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageAction.table)
}

// optional .TSP.Range range = 4;
inline bool UndoTransaction_StorageAction::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool UndoTransaction_StorageAction::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& UndoTransaction_StorageAction::_internal_range() const {
  const ::TSP::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& UndoTransaction_StorageAction::range() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.range)
  return _internal_range();
}
inline void UndoTransaction_StorageAction::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.StorageAction.range)
}
inline ::TSP::Range* UndoTransaction_StorageAction::release_range() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* UndoTransaction_StorageAction::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.StorageAction.range)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::TSP::Range* UndoTransaction_StorageAction::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000004u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::TSP::Range* UndoTransaction_StorageAction::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.StorageAction.range)
  return _internal_mutable_range();
}
inline void UndoTransaction_StorageAction::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.StorageAction.range)
}

// optional string string = 5;
inline bool UndoTransaction_StorageAction::_internal_has_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_StorageAction::has_string() const {
  return _internal_has_string();
}
inline void UndoTransaction_StorageAction::clear_string() {
  string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UndoTransaction_StorageAction::string() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void UndoTransaction_StorageAction::set_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageAction.string)
}
inline std::string* UndoTransaction_StorageAction::mutable_string() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.StorageAction.string)
  return _internal_mutable_string();
}
inline const std::string& UndoTransaction_StorageAction::_internal_string() const {
  return string_.Get();
}
inline void UndoTransaction_StorageAction::_internal_set_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* UndoTransaction_StorageAction::_internal_mutable_string() {
  _has_bits_[0] |= 0x00000001u;
  return string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UndoTransaction_StorageAction::release_string() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.StorageAction.string)
  if (!_internal_has_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UndoTransaction_StorageAction::set_allocated_string(std::string* string) {
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.StorageAction.string)
}

// optional .TSP.Reference object = 6;
inline bool UndoTransaction_StorageAction::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool UndoTransaction_StorageAction::has_object() const {
  return _internal_has_object();
}
inline const ::TSP::Reference& UndoTransaction_StorageAction::_internal_object() const {
  const ::TSP::Reference* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoTransaction_StorageAction::object() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.object)
  return _internal_object();
}
inline void UndoTransaction_StorageAction::unsafe_arena_set_allocated_object(
    ::TSP::Reference* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.StorageAction.object)
}
inline ::TSP::Reference* UndoTransaction_StorageAction::release_object() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UndoTransaction_StorageAction::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.StorageAction.object)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoTransaction_StorageAction::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000008u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::TSP::Reference* UndoTransaction_StorageAction::mutable_object() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.StorageAction.object)
  return _internal_mutable_object();
}
inline void UndoTransaction_StorageAction::set_allocated_object(::TSP::Reference* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.StorageAction.object)
}

// optional .TSP.Date date = 7;
inline bool UndoTransaction_StorageAction::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || date_ != nullptr);
  return value;
}
inline bool UndoTransaction_StorageAction::has_date() const {
  return _internal_has_date();
}
inline const ::TSP::Date& UndoTransaction_StorageAction::_internal_date() const {
  const ::TSP::Date* p = date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& UndoTransaction_StorageAction::date() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.date)
  return _internal_date();
}
inline void UndoTransaction_StorageAction::unsafe_arena_set_allocated_date(
    ::TSP::Date* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.StorageAction.date)
}
inline ::TSP::Date* UndoTransaction_StorageAction::release_date() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Date* UndoTransaction_StorageAction::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.StorageAction.date)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::TSP::Date* UndoTransaction_StorageAction::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000010u;
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArena());
    date_ = p;
  }
  return date_;
}
inline ::TSP::Date* UndoTransaction_StorageAction::mutable_date() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.StorageAction.date)
  return _internal_mutable_date();
}
inline void UndoTransaction_StorageAction::set_allocated_date(::TSP::Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.StorageAction.date)
}

// optional uint32 paragraph_level = 8;
inline bool UndoTransaction_StorageAction::_internal_has_paragraph_level() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UndoTransaction_StorageAction::has_paragraph_level() const {
  return _internal_has_paragraph_level();
}
inline void UndoTransaction_StorageAction::clear_paragraph_level() {
  paragraph_level_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::_internal_paragraph_level() const {
  return paragraph_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::paragraph_level() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.paragraph_level)
  return _internal_paragraph_level();
}
inline void UndoTransaction_StorageAction::_internal_set_paragraph_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  paragraph_level_ = value;
}
inline void UndoTransaction_StorageAction::set_paragraph_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paragraph_level(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageAction.paragraph_level)
}

// optional uint32 paragraph_flags = 9;
inline bool UndoTransaction_StorageAction::_internal_has_paragraph_flags() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UndoTransaction_StorageAction::has_paragraph_flags() const {
  return _internal_has_paragraph_flags();
}
inline void UndoTransaction_StorageAction::clear_paragraph_flags() {
  paragraph_flags_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::_internal_paragraph_flags() const {
  return paragraph_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::paragraph_flags() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.paragraph_flags)
  return _internal_paragraph_flags();
}
inline void UndoTransaction_StorageAction::_internal_set_paragraph_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  paragraph_flags_ = value;
}
inline void UndoTransaction_StorageAction::set_paragraph_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paragraph_flags(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageAction.paragraph_flags)
}

// optional uint32 paragraph_value = 10;
inline bool UndoTransaction_StorageAction::_internal_has_paragraph_value() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UndoTransaction_StorageAction::has_paragraph_value() const {
  return _internal_has_paragraph_value();
}
inline void UndoTransaction_StorageAction::clear_paragraph_value() {
  paragraph_value_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::_internal_paragraph_value() const {
  return paragraph_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction_StorageAction::paragraph_value() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.paragraph_value)
  return _internal_paragraph_value();
}
inline void UndoTransaction_StorageAction::_internal_set_paragraph_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  paragraph_value_ = value;
}
inline void UndoTransaction_StorageAction::set_paragraph_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paragraph_value(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageAction.paragraph_value)
}

// optional int32 placement_index = 11;
inline bool UndoTransaction_StorageAction::_internal_has_placement_index() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UndoTransaction_StorageAction::has_placement_index() const {
  return _internal_has_placement_index();
}
inline void UndoTransaction_StorageAction::clear_placement_index() {
  placement_index_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UndoTransaction_StorageAction::_internal_placement_index() const {
  return placement_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UndoTransaction_StorageAction::placement_index() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.placement_index)
  return _internal_placement_index();
}
inline void UndoTransaction_StorageAction::_internal_set_placement_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  placement_index_ = value;
}
inline void UndoTransaction_StorageAction::set_placement_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_placement_index(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageAction.placement_index)
}

// optional string placement_uuid_path = 12;
inline bool UndoTransaction_StorageAction::_internal_has_placement_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction_StorageAction::has_placement_uuid_path() const {
  return _internal_has_placement_uuid_path();
}
inline void UndoTransaction_StorageAction::clear_placement_uuid_path() {
  placement_uuid_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UndoTransaction_StorageAction::placement_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.placement_uuid_path)
  return _internal_placement_uuid_path();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void UndoTransaction_StorageAction::set_placement_uuid_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 placement_uuid_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageAction.placement_uuid_path)
}
inline std::string* UndoTransaction_StorageAction::mutable_placement_uuid_path() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.StorageAction.placement_uuid_path)
  return _internal_mutable_placement_uuid_path();
}
inline const std::string& UndoTransaction_StorageAction::_internal_placement_uuid_path() const {
  return placement_uuid_path_.Get();
}
inline void UndoTransaction_StorageAction::_internal_set_placement_uuid_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  placement_uuid_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* UndoTransaction_StorageAction::_internal_mutable_placement_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  return placement_uuid_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UndoTransaction_StorageAction::release_placement_uuid_path() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.StorageAction.placement_uuid_path)
  if (!_internal_has_placement_uuid_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return placement_uuid_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UndoTransaction_StorageAction::set_allocated_placement_uuid_path(std::string* placement_uuid_path) {
  if (placement_uuid_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  placement_uuid_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placement_uuid_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.StorageAction.placement_uuid_path)
}

// optional .TSP.Reference undo_object = 13;
inline bool UndoTransaction_StorageAction::_internal_has_undo_object() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || undo_object_ != nullptr);
  return value;
}
inline bool UndoTransaction_StorageAction::has_undo_object() const {
  return _internal_has_undo_object();
}
inline const ::TSP::Reference& UndoTransaction_StorageAction::_internal_undo_object() const {
  const ::TSP::Reference* p = undo_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoTransaction_StorageAction::undo_object() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageAction.undo_object)
  return _internal_undo_object();
}
inline void UndoTransaction_StorageAction::unsafe_arena_set_allocated_undo_object(
    ::TSP::Reference* undo_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_);
  }
  undo_object_ = undo_object;
  if (undo_object) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransaction.StorageAction.undo_object)
}
inline ::TSP::Reference* UndoTransaction_StorageAction::release_undo_object() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = undo_object_;
  undo_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UndoTransaction_StorageAction::unsafe_arena_release_undo_object() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransaction.StorageAction.undo_object)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = undo_object_;
  undo_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoTransaction_StorageAction::_internal_mutable_undo_object() {
  _has_bits_[0] |= 0x00000020u;
  if (undo_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    undo_object_ = p;
  }
  return undo_object_;
}
inline ::TSP::Reference* UndoTransaction_StorageAction::mutable_undo_object() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.StorageAction.undo_object)
  return _internal_mutable_undo_object();
}
inline void UndoTransaction_StorageAction::set_allocated_undo_object(::TSP::Reference* undo_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_);
  }
  if (undo_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object)->GetArena();
    if (message_arena != submessage_arena) {
      undo_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  undo_object_ = undo_object;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransaction.StorageAction.undo_object)
}

// -------------------------------------------------------------------

// UndoTransaction_StorageActionGroup

// required .TSWP.UndoTransaction.ActionGroupKind kind = 1;
inline bool UndoTransaction_StorageActionGroup::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction_StorageActionGroup::has_kind() const {
  return _internal_has_kind();
}
inline void UndoTransaction_StorageActionGroup::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::TSWP::UndoTransaction_ActionGroupKind UndoTransaction_StorageActionGroup::_internal_kind() const {
  return static_cast< ::TSWP::UndoTransaction_ActionGroupKind >(kind_);
}
inline ::TSWP::UndoTransaction_ActionGroupKind UndoTransaction_StorageActionGroup::kind() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageActionGroup.kind)
  return _internal_kind();
}
inline void UndoTransaction_StorageActionGroup::_internal_set_kind(::TSWP::UndoTransaction_ActionGroupKind value) {
  assert(::TSWP::UndoTransaction_ActionGroupKind_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  kind_ = value;
}
inline void UndoTransaction_StorageActionGroup::set_kind(::TSWP::UndoTransaction_ActionGroupKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.StorageActionGroup.kind)
}

// repeated .TSWP.UndoTransaction.StorageAction forward_actions = 3;
inline int UndoTransaction_StorageActionGroup::_internal_forward_actions_size() const {
  return forward_actions_.size();
}
inline int UndoTransaction_StorageActionGroup::forward_actions_size() const {
  return _internal_forward_actions_size();
}
inline void UndoTransaction_StorageActionGroup::clear_forward_actions() {
  forward_actions_.Clear();
}
inline ::TSWP::UndoTransaction_StorageAction* UndoTransaction_StorageActionGroup::mutable_forward_actions(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.StorageActionGroup.forward_actions)
  return forward_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >*
UndoTransaction_StorageActionGroup::mutable_forward_actions() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.UndoTransaction.StorageActionGroup.forward_actions)
  return &forward_actions_;
}
inline const ::TSWP::UndoTransaction_StorageAction& UndoTransaction_StorageActionGroup::_internal_forward_actions(int index) const {
  return forward_actions_.Get(index);
}
inline const ::TSWP::UndoTransaction_StorageAction& UndoTransaction_StorageActionGroup::forward_actions(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageActionGroup.forward_actions)
  return _internal_forward_actions(index);
}
inline ::TSWP::UndoTransaction_StorageAction* UndoTransaction_StorageActionGroup::_internal_add_forward_actions() {
  return forward_actions_.Add();
}
inline ::TSWP::UndoTransaction_StorageAction* UndoTransaction_StorageActionGroup::add_forward_actions() {
  // @@protoc_insertion_point(field_add:TSWP.UndoTransaction.StorageActionGroup.forward_actions)
  return _internal_add_forward_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >&
UndoTransaction_StorageActionGroup::forward_actions() const {
  // @@protoc_insertion_point(field_list:TSWP.UndoTransaction.StorageActionGroup.forward_actions)
  return forward_actions_;
}

// repeated .TSWP.UndoTransaction.StorageAction inverse_forward_actions = 4;
inline int UndoTransaction_StorageActionGroup::_internal_inverse_forward_actions_size() const {
  return inverse_forward_actions_.size();
}
inline int UndoTransaction_StorageActionGroup::inverse_forward_actions_size() const {
  return _internal_inverse_forward_actions_size();
}
inline void UndoTransaction_StorageActionGroup::clear_inverse_forward_actions() {
  inverse_forward_actions_.Clear();
}
inline ::TSWP::UndoTransaction_StorageAction* UndoTransaction_StorageActionGroup::mutable_inverse_forward_actions(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.StorageActionGroup.inverse_forward_actions)
  return inverse_forward_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >*
UndoTransaction_StorageActionGroup::mutable_inverse_forward_actions() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.UndoTransaction.StorageActionGroup.inverse_forward_actions)
  return &inverse_forward_actions_;
}
inline const ::TSWP::UndoTransaction_StorageAction& UndoTransaction_StorageActionGroup::_internal_inverse_forward_actions(int index) const {
  return inverse_forward_actions_.Get(index);
}
inline const ::TSWP::UndoTransaction_StorageAction& UndoTransaction_StorageActionGroup::inverse_forward_actions(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageActionGroup.inverse_forward_actions)
  return _internal_inverse_forward_actions(index);
}
inline ::TSWP::UndoTransaction_StorageAction* UndoTransaction_StorageActionGroup::_internal_add_inverse_forward_actions() {
  return inverse_forward_actions_.Add();
}
inline ::TSWP::UndoTransaction_StorageAction* UndoTransaction_StorageActionGroup::add_inverse_forward_actions() {
  // @@protoc_insertion_point(field_add:TSWP.UndoTransaction.StorageActionGroup.inverse_forward_actions)
  return _internal_add_inverse_forward_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >&
UndoTransaction_StorageActionGroup::inverse_forward_actions() const {
  // @@protoc_insertion_point(field_list:TSWP.UndoTransaction.StorageActionGroup.inverse_forward_actions)
  return inverse_forward_actions_;
}

// repeated .TSWP.UndoTransaction.StorageAction inverse_detail_actions = 6;
inline int UndoTransaction_StorageActionGroup::_internal_inverse_detail_actions_size() const {
  return inverse_detail_actions_.size();
}
inline int UndoTransaction_StorageActionGroup::inverse_detail_actions_size() const {
  return _internal_inverse_detail_actions_size();
}
inline void UndoTransaction_StorageActionGroup::clear_inverse_detail_actions() {
  inverse_detail_actions_.Clear();
}
inline ::TSWP::UndoTransaction_StorageAction* UndoTransaction_StorageActionGroup::mutable_inverse_detail_actions(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.StorageActionGroup.inverse_detail_actions)
  return inverse_detail_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >*
UndoTransaction_StorageActionGroup::mutable_inverse_detail_actions() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.UndoTransaction.StorageActionGroup.inverse_detail_actions)
  return &inverse_detail_actions_;
}
inline const ::TSWP::UndoTransaction_StorageAction& UndoTransaction_StorageActionGroup::_internal_inverse_detail_actions(int index) const {
  return inverse_detail_actions_.Get(index);
}
inline const ::TSWP::UndoTransaction_StorageAction& UndoTransaction_StorageActionGroup::inverse_detail_actions(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.StorageActionGroup.inverse_detail_actions)
  return _internal_inverse_detail_actions(index);
}
inline ::TSWP::UndoTransaction_StorageAction* UndoTransaction_StorageActionGroup::_internal_add_inverse_detail_actions() {
  return inverse_detail_actions_.Add();
}
inline ::TSWP::UndoTransaction_StorageAction* UndoTransaction_StorageActionGroup::add_inverse_detail_actions() {
  // @@protoc_insertion_point(field_add:TSWP.UndoTransaction.StorageActionGroup.inverse_detail_actions)
  return _internal_add_inverse_detail_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageAction >&
UndoTransaction_StorageActionGroup::inverse_detail_actions() const {
  // @@protoc_insertion_point(field_list:TSWP.UndoTransaction.StorageActionGroup.inverse_detail_actions)
  return inverse_detail_actions_;
}

// -------------------------------------------------------------------

// UndoTransaction

// repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
inline int UndoTransaction::_internal_entries_size() const {
  return entries_.size();
}
inline int UndoTransaction::entries_size() const {
  return _internal_entries_size();
}
inline void UndoTransaction::clear_entries() {
  entries_.Clear();
}
inline ::TSWP::UndoTransaction_UnionTransaction* UndoTransaction::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_UnionTransaction >*
UndoTransaction::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.UndoTransaction.entries)
  return &entries_;
}
inline const ::TSWP::UndoTransaction_UnionTransaction& UndoTransaction::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSWP::UndoTransaction_UnionTransaction& UndoTransaction::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.entries)
  return _internal_entries(index);
}
inline ::TSWP::UndoTransaction_UnionTransaction* UndoTransaction::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSWP::UndoTransaction_UnionTransaction* UndoTransaction::add_entries() {
  // @@protoc_insertion_point(field_add:TSWP.UndoTransaction.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_UnionTransaction >&
UndoTransaction::entries() const {
  // @@protoc_insertion_point(field_list:TSWP.UndoTransaction.entries)
  return entries_;
}

// repeated .TSWP.UndoTransaction.StorageActionGroup group_entries = 2;
inline int UndoTransaction::_internal_group_entries_size() const {
  return group_entries_.size();
}
inline int UndoTransaction::group_entries_size() const {
  return _internal_group_entries_size();
}
inline void UndoTransaction::clear_group_entries() {
  group_entries_.Clear();
}
inline ::TSWP::UndoTransaction_StorageActionGroup* UndoTransaction::mutable_group_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransaction.group_entries)
  return group_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageActionGroup >*
UndoTransaction::mutable_group_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.UndoTransaction.group_entries)
  return &group_entries_;
}
inline const ::TSWP::UndoTransaction_StorageActionGroup& UndoTransaction::_internal_group_entries(int index) const {
  return group_entries_.Get(index);
}
inline const ::TSWP::UndoTransaction_StorageActionGroup& UndoTransaction::group_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.group_entries)
  return _internal_group_entries(index);
}
inline ::TSWP::UndoTransaction_StorageActionGroup* UndoTransaction::_internal_add_group_entries() {
  return group_entries_.Add();
}
inline ::TSWP::UndoTransaction_StorageActionGroup* UndoTransaction::add_group_entries() {
  // @@protoc_insertion_point(field_add:TSWP.UndoTransaction.group_entries)
  return _internal_add_group_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::UndoTransaction_StorageActionGroup >&
UndoTransaction::group_entries() const {
  // @@protoc_insertion_point(field_list:TSWP.UndoTransaction.group_entries)
  return group_entries_;
}

// optional uint32 flags = 3;
inline bool UndoTransaction::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UndoTransaction::has_flags() const {
  return _internal_has_flags();
}
inline void UndoTransaction::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction::flags() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.flags)
  return _internal_flags();
}
inline void UndoTransaction::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  flags_ = value;
}
inline void UndoTransaction::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.flags)
}

// optional uint32 version = 4;
inline bool UndoTransaction::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UndoTransaction::has_version() const {
  return _internal_has_version();
}
inline void UndoTransaction::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoTransaction::version() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransaction.version)
  return _internal_version();
}
inline void UndoTransaction::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void UndoTransaction::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TSWP.UndoTransaction.version)
}

// -------------------------------------------------------------------

// UndoTransactionWrapperArchive

// required .TSWP.UndoTransaction undo_transaction = 1;
inline bool UndoTransactionWrapperArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool UndoTransactionWrapperArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline void UndoTransactionWrapperArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::UndoTransaction& UndoTransactionWrapperArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& UndoTransactionWrapperArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.UndoTransactionWrapperArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void UndoTransactionWrapperArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UndoTransactionWrapperArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* UndoTransactionWrapperArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction* UndoTransactionWrapperArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.UndoTransactionWrapperArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* UndoTransactionWrapperArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000001u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArena());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* UndoTransactionWrapperArchive::mutable_undo_transaction() {
  // @@protoc_insertion_point(field_mutable:TSWP.UndoTransactionWrapperArchive.undo_transaction)
  return _internal_mutable_undo_transaction();
}
inline void UndoTransactionWrapperArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete undo_transaction_;
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(undo_transaction);
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UndoTransactionWrapperArchive.undo_transaction)
}

// -------------------------------------------------------------------

// ShapeInfoArchive

// required .TSD.ShapeArchive super = 1;
inline bool ShapeInfoArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ShapeInfoArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::ShapeArchive& ShapeInfoArchive::_internal_super() const {
  const ::TSD::ShapeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShapeArchive&>(
      ::TSD::_ShapeArchive_default_instance_);
}
inline const ::TSD::ShapeArchive& ShapeInfoArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeInfoArchive.super)
  return _internal_super();
}
inline void ShapeInfoArchive::unsafe_arena_set_allocated_super(
    ::TSD::ShapeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeInfoArchive.super)
}
inline ::TSD::ShapeArchive* ShapeInfoArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ShapeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShapeArchive* ShapeInfoArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeInfoArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ShapeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ShapeArchive* ShapeInfoArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShapeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ShapeArchive* ShapeInfoArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeInfoArchive.super)
  return _internal_mutable_super();
}
inline void ShapeInfoArchive::set_allocated_super(::TSD::ShapeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeInfoArchive.super)
}

// optional .TSP.Reference deprecated_storage = 2 [deprecated = true];
inline bool ShapeInfoArchive::_internal_has_deprecated_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_storage_ != nullptr);
  return value;
}
inline bool ShapeInfoArchive::has_deprecated_storage() const {
  return _internal_has_deprecated_storage();
}
inline const ::TSP::Reference& ShapeInfoArchive::_internal_deprecated_storage() const {
  const ::TSP::Reference* p = deprecated_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShapeInfoArchive::deprecated_storage() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeInfoArchive.deprecated_storage)
  return _internal_deprecated_storage();
}
inline void ShapeInfoArchive::unsafe_arena_set_allocated_deprecated_storage(
    ::TSP::Reference* deprecated_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_storage_);
  }
  deprecated_storage_ = deprecated_storage;
  if (deprecated_storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeInfoArchive.deprecated_storage)
}
inline ::TSP::Reference* ShapeInfoArchive::release_deprecated_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = deprecated_storage_;
  deprecated_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ShapeInfoArchive::unsafe_arena_release_deprecated_storage() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeInfoArchive.deprecated_storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = deprecated_storage_;
  deprecated_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShapeInfoArchive::_internal_mutable_deprecated_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (deprecated_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    deprecated_storage_ = p;
  }
  return deprecated_storage_;
}
inline ::TSP::Reference* ShapeInfoArchive::mutable_deprecated_storage() {
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeInfoArchive.deprecated_storage)
  return _internal_mutable_deprecated_storage();
}
inline void ShapeInfoArchive::set_allocated_deprecated_storage(::TSP::Reference* deprecated_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_storage_);
  }
  if (deprecated_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_storage)->GetArena();
    if (message_arena != submessage_arena) {
      deprecated_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  deprecated_storage_ = deprecated_storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeInfoArchive.deprecated_storage)
}

// optional .TSP.Reference text_flow = 3;
inline bool ShapeInfoArchive::_internal_has_text_flow() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || text_flow_ != nullptr);
  return value;
}
inline bool ShapeInfoArchive::has_text_flow() const {
  return _internal_has_text_flow();
}
inline const ::TSP::Reference& ShapeInfoArchive::_internal_text_flow() const {
  const ::TSP::Reference* p = text_flow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShapeInfoArchive::text_flow() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeInfoArchive.text_flow)
  return _internal_text_flow();
}
inline void ShapeInfoArchive::unsafe_arena_set_allocated_text_flow(
    ::TSP::Reference* text_flow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_flow_);
  }
  text_flow_ = text_flow;
  if (text_flow) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeInfoArchive.text_flow)
}
inline ::TSP::Reference* ShapeInfoArchive::release_text_flow() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = text_flow_;
  text_flow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ShapeInfoArchive::unsafe_arena_release_text_flow() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeInfoArchive.text_flow)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = text_flow_;
  text_flow_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShapeInfoArchive::_internal_mutable_text_flow() {
  _has_bits_[0] |= 0x00000004u;
  if (text_flow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    text_flow_ = p;
  }
  return text_flow_;
}
inline ::TSP::Reference* ShapeInfoArchive::mutable_text_flow() {
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeInfoArchive.text_flow)
  return _internal_mutable_text_flow();
}
inline void ShapeInfoArchive::set_allocated_text_flow(::TSP::Reference* text_flow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_flow_);
  }
  if (text_flow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_flow)->GetArena();
    if (message_arena != submessage_arena) {
      text_flow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_flow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  text_flow_ = text_flow;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeInfoArchive.text_flow)
}

// optional .TSP.Reference owned_storage = 4;
inline bool ShapeInfoArchive::_internal_has_owned_storage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || owned_storage_ != nullptr);
  return value;
}
inline bool ShapeInfoArchive::has_owned_storage() const {
  return _internal_has_owned_storage();
}
inline const ::TSP::Reference& ShapeInfoArchive::_internal_owned_storage() const {
  const ::TSP::Reference* p = owned_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShapeInfoArchive::owned_storage() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeInfoArchive.owned_storage)
  return _internal_owned_storage();
}
inline void ShapeInfoArchive::unsafe_arena_set_allocated_owned_storage(
    ::TSP::Reference* owned_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owned_storage_);
  }
  owned_storage_ = owned_storage;
  if (owned_storage) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeInfoArchive.owned_storage)
}
inline ::TSP::Reference* ShapeInfoArchive::release_owned_storage() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = owned_storage_;
  owned_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ShapeInfoArchive::unsafe_arena_release_owned_storage() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeInfoArchive.owned_storage)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = owned_storage_;
  owned_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShapeInfoArchive::_internal_mutable_owned_storage() {
  _has_bits_[0] |= 0x00000008u;
  if (owned_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    owned_storage_ = p;
  }
  return owned_storage_;
}
inline ::TSP::Reference* ShapeInfoArchive::mutable_owned_storage() {
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeInfoArchive.owned_storage)
  return _internal_mutable_owned_storage();
}
inline void ShapeInfoArchive::set_allocated_owned_storage(::TSP::Reference* owned_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owned_storage_);
  }
  if (owned_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owned_storage)->GetArena();
    if (message_arena != submessage_arena) {
      owned_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owned_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  owned_storage_ = owned_storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeInfoArchive.owned_storage)
}

// optional bool is_text_box = 6;
inline bool ShapeInfoArchive::_internal_has_is_text_box() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShapeInfoArchive::has_is_text_box() const {
  return _internal_has_is_text_box();
}
inline void ShapeInfoArchive::clear_is_text_box() {
  is_text_box_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ShapeInfoArchive::_internal_is_text_box() const {
  return is_text_box_;
}
inline bool ShapeInfoArchive::is_text_box() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeInfoArchive.is_text_box)
  return _internal_is_text_box();
}
inline void ShapeInfoArchive::_internal_set_is_text_box(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_text_box_ = value;
}
inline void ShapeInfoArchive::set_is_text_box(bool value) {
  _internal_set_is_text_box(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeInfoArchive.is_text_box)
}

// -------------------------------------------------------------------

// CommentInfoArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool CommentInfoArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommentInfoArchive::has_super() const {
  return _internal_has_super();
}
inline void CommentInfoArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::ShapeInfoArchive& CommentInfoArchive::_internal_super() const {
  const ::TSWP::ShapeInfoArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeInfoArchive&>(
      ::TSWP::_ShapeInfoArchive_default_instance_);
}
inline const ::TSWP::ShapeInfoArchive& CommentInfoArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.CommentInfoArchive.super)
  return _internal_super();
}
inline void CommentInfoArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ShapeInfoArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CommentInfoArchive.super)
}
inline ::TSWP::ShapeInfoArchive* CommentInfoArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ShapeInfoArchive* CommentInfoArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.CommentInfoArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeInfoArchive* CommentInfoArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeInfoArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::ShapeInfoArchive* CommentInfoArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.CommentInfoArchive.super)
  return _internal_mutable_super();
}
inline void CommentInfoArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CommentInfoArchive.super)
}

// optional .TSP.Reference comment_storage = 2;
inline bool CommentInfoArchive::_internal_has_comment_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || comment_storage_ != nullptr);
  return value;
}
inline bool CommentInfoArchive::has_comment_storage() const {
  return _internal_has_comment_storage();
}
inline const ::TSP::Reference& CommentInfoArchive::_internal_comment_storage() const {
  const ::TSP::Reference* p = comment_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommentInfoArchive::comment_storage() const {
  // @@protoc_insertion_point(field_get:TSWP.CommentInfoArchive.comment_storage)
  return _internal_comment_storage();
}
inline void CommentInfoArchive::unsafe_arena_set_allocated_comment_storage(
    ::TSP::Reference* comment_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage_);
  }
  comment_storage_ = comment_storage;
  if (comment_storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CommentInfoArchive.comment_storage)
}
inline ::TSP::Reference* CommentInfoArchive::release_comment_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = comment_storage_;
  comment_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommentInfoArchive::unsafe_arena_release_comment_storage() {
  // @@protoc_insertion_point(field_release:TSWP.CommentInfoArchive.comment_storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = comment_storage_;
  comment_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommentInfoArchive::_internal_mutable_comment_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (comment_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    comment_storage_ = p;
  }
  return comment_storage_;
}
inline ::TSP::Reference* CommentInfoArchive::mutable_comment_storage() {
  // @@protoc_insertion_point(field_mutable:TSWP.CommentInfoArchive.comment_storage)
  return _internal_mutable_comment_storage();
}
inline void CommentInfoArchive::set_allocated_comment_storage(::TSP::Reference* comment_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage_);
  }
  if (comment_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage)->GetArena();
    if (message_arena != submessage_arena) {
      comment_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comment_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_storage_ = comment_storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CommentInfoArchive.comment_storage)
}

// -------------------------------------------------------------------

// TOCInfoArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool TOCInfoArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TOCInfoArchive::has_super() const {
  return _internal_has_super();
}
inline void TOCInfoArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::ShapeInfoArchive& TOCInfoArchive::_internal_super() const {
  const ::TSWP::ShapeInfoArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeInfoArchive&>(
      ::TSWP::_ShapeInfoArchive_default_instance_);
}
inline const ::TSWP::ShapeInfoArchive& TOCInfoArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCInfoArchive.super)
  return _internal_super();
}
inline void TOCInfoArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ShapeInfoArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCInfoArchive.super)
}
inline ::TSWP::ShapeInfoArchive* TOCInfoArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ShapeInfoArchive* TOCInfoArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.TOCInfoArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeInfoArchive* TOCInfoArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeInfoArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::ShapeInfoArchive* TOCInfoArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCInfoArchive.super)
  return _internal_mutable_super();
}
inline void TOCInfoArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCInfoArchive.super)
}

// optional .TSP.Reference toc_settings = 2;
inline bool TOCInfoArchive::_internal_has_toc_settings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || toc_settings_ != nullptr);
  return value;
}
inline bool TOCInfoArchive::has_toc_settings() const {
  return _internal_has_toc_settings();
}
inline const ::TSP::Reference& TOCInfoArchive::_internal_toc_settings() const {
  const ::TSP::Reference* p = toc_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TOCInfoArchive::toc_settings() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCInfoArchive.toc_settings)
  return _internal_toc_settings();
}
inline void TOCInfoArchive::unsafe_arena_set_allocated_toc_settings(
    ::TSP::Reference* toc_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_settings_);
  }
  toc_settings_ = toc_settings;
  if (toc_settings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCInfoArchive.toc_settings)
}
inline ::TSP::Reference* TOCInfoArchive::release_toc_settings() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = toc_settings_;
  toc_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TOCInfoArchive::unsafe_arena_release_toc_settings() {
  // @@protoc_insertion_point(field_release:TSWP.TOCInfoArchive.toc_settings)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = toc_settings_;
  toc_settings_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TOCInfoArchive::_internal_mutable_toc_settings() {
  _has_bits_[0] |= 0x00000002u;
  if (toc_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    toc_settings_ = p;
  }
  return toc_settings_;
}
inline ::TSP::Reference* TOCInfoArchive::mutable_toc_settings() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCInfoArchive.toc_settings)
  return _internal_mutable_toc_settings();
}
inline void TOCInfoArchive::set_allocated_toc_settings(::TSP::Reference* toc_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_settings_);
  }
  if (toc_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_settings)->GetArena();
    if (message_arena != submessage_arena) {
      toc_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toc_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  toc_settings_ = toc_settings;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCInfoArchive.toc_settings)
}

// repeated .TSP.Reference toc_entry_data = 3;
inline int TOCInfoArchive::_internal_toc_entry_data_size() const {
  return toc_entry_data_.size();
}
inline int TOCInfoArchive::toc_entry_data_size() const {
  return _internal_toc_entry_data_size();
}
inline ::TSP::Reference* TOCInfoArchive::mutable_toc_entry_data(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCInfoArchive.toc_entry_data)
  return toc_entry_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
TOCInfoArchive::mutable_toc_entry_data() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.TOCInfoArchive.toc_entry_data)
  return &toc_entry_data_;
}
inline const ::TSP::Reference& TOCInfoArchive::_internal_toc_entry_data(int index) const {
  return toc_entry_data_.Get(index);
}
inline const ::TSP::Reference& TOCInfoArchive::toc_entry_data(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.TOCInfoArchive.toc_entry_data)
  return _internal_toc_entry_data(index);
}
inline ::TSP::Reference* TOCInfoArchive::_internal_add_toc_entry_data() {
  return toc_entry_data_.Add();
}
inline ::TSP::Reference* TOCInfoArchive::add_toc_entry_data() {
  // @@protoc_insertion_point(field_add:TSWP.TOCInfoArchive.toc_entry_data)
  return _internal_add_toc_entry_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
TOCInfoArchive::toc_entry_data() const {
  // @@protoc_insertion_point(field_list:TSWP.TOCInfoArchive.toc_entry_data)
  return toc_entry_data_;
}

// repeated .TSP.Range page_number_ranges = 4;
inline int TOCInfoArchive::_internal_page_number_ranges_size() const {
  return page_number_ranges_.size();
}
inline int TOCInfoArchive::page_number_ranges_size() const {
  return _internal_page_number_ranges_size();
}
inline ::TSP::Range* TOCInfoArchive::mutable_page_number_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCInfoArchive.page_number_ranges)
  return page_number_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
TOCInfoArchive::mutable_page_number_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.TOCInfoArchive.page_number_ranges)
  return &page_number_ranges_;
}
inline const ::TSP::Range& TOCInfoArchive::_internal_page_number_ranges(int index) const {
  return page_number_ranges_.Get(index);
}
inline const ::TSP::Range& TOCInfoArchive::page_number_ranges(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.TOCInfoArchive.page_number_ranges)
  return _internal_page_number_ranges(index);
}
inline ::TSP::Range* TOCInfoArchive::_internal_add_page_number_ranges() {
  return page_number_ranges_.Add();
}
inline ::TSP::Range* TOCInfoArchive::add_page_number_ranges() {
  // @@protoc_insertion_point(field_add:TSWP.TOCInfoArchive.page_number_ranges)
  return _internal_add_page_number_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
TOCInfoArchive::page_number_ranges() const {
  // @@protoc_insertion_point(field_list:TSWP.TOCInfoArchive.page_number_ranges)
  return page_number_ranges_;
}

// optional bool sync_toc_settings_with_toc_navigator = 5;
inline bool TOCInfoArchive::_internal_has_sync_toc_settings_with_toc_navigator() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TOCInfoArchive::has_sync_toc_settings_with_toc_navigator() const {
  return _internal_has_sync_toc_settings_with_toc_navigator();
}
inline void TOCInfoArchive::clear_sync_toc_settings_with_toc_navigator() {
  sync_toc_settings_with_toc_navigator_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TOCInfoArchive::_internal_sync_toc_settings_with_toc_navigator() const {
  return sync_toc_settings_with_toc_navigator_;
}
inline bool TOCInfoArchive::sync_toc_settings_with_toc_navigator() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCInfoArchive.sync_toc_settings_with_toc_navigator)
  return _internal_sync_toc_settings_with_toc_navigator();
}
inline void TOCInfoArchive::_internal_set_sync_toc_settings_with_toc_navigator(bool value) {
  _has_bits_[0] |= 0x00000004u;
  sync_toc_settings_with_toc_navigator_ = value;
}
inline void TOCInfoArchive::set_sync_toc_settings_with_toc_navigator(bool value) {
  _internal_set_sync_toc_settings_with_toc_navigator(value);
  // @@protoc_insertion_point(field_set:TSWP.TOCInfoArchive.sync_toc_settings_with_toc_navigator)
}

// -------------------------------------------------------------------

// TOCLayoutHintArchive

// required .TSP.Range charRange = 1;
inline bool TOCLayoutHintArchive::_internal_has_charrange() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || charrange_ != nullptr);
  return value;
}
inline bool TOCLayoutHintArchive::has_charrange() const {
  return _internal_has_charrange();
}
inline const ::TSP::Range& TOCLayoutHintArchive::_internal_charrange() const {
  const ::TSP::Range* p = charrange_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& TOCLayoutHintArchive::charrange() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCLayoutHintArchive.charRange)
  return _internal_charrange();
}
inline void TOCLayoutHintArchive::unsafe_arena_set_allocated_charrange(
    ::TSP::Range* charrange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charrange_);
  }
  charrange_ = charrange;
  if (charrange) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCLayoutHintArchive.charRange)
}
inline ::TSP::Range* TOCLayoutHintArchive::release_charrange() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = charrange_;
  charrange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* TOCLayoutHintArchive::unsafe_arena_release_charrange() {
  // @@protoc_insertion_point(field_release:TSWP.TOCLayoutHintArchive.charRange)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = charrange_;
  charrange_ = nullptr;
  return temp;
}
inline ::TSP::Range* TOCLayoutHintArchive::_internal_mutable_charrange() {
  _has_bits_[0] |= 0x00000001u;
  if (charrange_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    charrange_ = p;
  }
  return charrange_;
}
inline ::TSP::Range* TOCLayoutHintArchive::mutable_charrange() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCLayoutHintArchive.charRange)
  return _internal_mutable_charrange();
}
inline void TOCLayoutHintArchive::set_allocated_charrange(::TSP::Range* charrange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(charrange_);
  }
  if (charrange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charrange)->GetArena();
    if (message_arena != submessage_arena) {
      charrange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charrange, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  charrange_ = charrange;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCLayoutHintArchive.charRange)
}

// -------------------------------------------------------------------

// EquationInfoArchive

// -------------------------------------------------------------------

// TextualAttachmentArchive

// optional string string_equivalent = 1;
inline bool TextualAttachmentArchive::_internal_has_string_equivalent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TextualAttachmentArchive::has_string_equivalent() const {
  return _internal_has_string_equivalent();
}
inline void TextualAttachmentArchive::clear_string_equivalent() {
  string_equivalent_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TextualAttachmentArchive::string_equivalent() const {
  // @@protoc_insertion_point(field_get:TSWP.TextualAttachmentArchive.string_equivalent)
  return _internal_string_equivalent();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TextualAttachmentArchive::set_string_equivalent(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_equivalent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TextualAttachmentArchive.string_equivalent)
}
inline std::string* TextualAttachmentArchive::mutable_string_equivalent() {
  // @@protoc_insertion_point(field_mutable:TSWP.TextualAttachmentArchive.string_equivalent)
  return _internal_mutable_string_equivalent();
}
inline const std::string& TextualAttachmentArchive::_internal_string_equivalent() const {
  return string_equivalent_.Get();
}
inline void TextualAttachmentArchive::_internal_set_string_equivalent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_equivalent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TextualAttachmentArchive::_internal_mutable_string_equivalent() {
  _has_bits_[0] |= 0x00000001u;
  return string_equivalent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextualAttachmentArchive::release_string_equivalent() {
  // @@protoc_insertion_point(field_release:TSWP.TextualAttachmentArchive.string_equivalent)
  if (!_internal_has_string_equivalent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_equivalent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextualAttachmentArchive::set_allocated_string_equivalent(std::string* string_equivalent) {
  if (string_equivalent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_equivalent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_equivalent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextualAttachmentArchive.string_equivalent)
}

// optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
inline bool TextualAttachmentArchive::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TextualAttachmentArchive::has_kind() const {
  return _internal_has_kind();
}
inline void TextualAttachmentArchive::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSWP::TextualAttachmentArchive_Kind TextualAttachmentArchive::_internal_kind() const {
  return static_cast< ::TSWP::TextualAttachmentArchive_Kind >(kind_);
}
inline ::TSWP::TextualAttachmentArchive_Kind TextualAttachmentArchive::kind() const {
  // @@protoc_insertion_point(field_get:TSWP.TextualAttachmentArchive.kind)
  return _internal_kind();
}
inline void TextualAttachmentArchive::_internal_set_kind(::TSWP::TextualAttachmentArchive_Kind value) {
  assert(::TSWP::TextualAttachmentArchive_Kind_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  kind_ = value;
}
inline void TextualAttachmentArchive::set_kind(::TSWP::TextualAttachmentArchive_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TSWP.TextualAttachmentArchive.kind)
}

// -------------------------------------------------------------------

// TSWPTOCPageNumberAttachmentArchive

// optional .TSWP.TextualAttachmentArchive super = 1;
inline bool TSWPTOCPageNumberAttachmentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TSWPTOCPageNumberAttachmentArchive::has_super() const {
  return _internal_has_super();
}
inline void TSWPTOCPageNumberAttachmentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::TextualAttachmentArchive& TSWPTOCPageNumberAttachmentArchive::_internal_super() const {
  const ::TSWP::TextualAttachmentArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::TextualAttachmentArchive&>(
      ::TSWP::_TextualAttachmentArchive_default_instance_);
}
inline const ::TSWP::TextualAttachmentArchive& TSWPTOCPageNumberAttachmentArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.TSWPTOCPageNumberAttachmentArchive.super)
  return _internal_super();
}
inline void TSWPTOCPageNumberAttachmentArchive::unsafe_arena_set_allocated_super(
    ::TSWP::TextualAttachmentArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TSWPTOCPageNumberAttachmentArchive.super)
}
inline ::TSWP::TextualAttachmentArchive* TSWPTOCPageNumberAttachmentArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::TextualAttachmentArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* TSWPTOCPageNumberAttachmentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.TSWPTOCPageNumberAttachmentArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::TextualAttachmentArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* TSWPTOCPageNumberAttachmentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::TextualAttachmentArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::TextualAttachmentArchive* TSWPTOCPageNumberAttachmentArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.TSWPTOCPageNumberAttachmentArchive.super)
  return _internal_mutable_super();
}
inline void TSWPTOCPageNumberAttachmentArchive::set_allocated_super(::TSWP::TextualAttachmentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TSWPTOCPageNumberAttachmentArchive.super)
}

// optional string page_number = 2;
inline bool TSWPTOCPageNumberAttachmentArchive::_internal_has_page_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TSWPTOCPageNumberAttachmentArchive::has_page_number() const {
  return _internal_has_page_number();
}
inline void TSWPTOCPageNumberAttachmentArchive::clear_page_number() {
  page_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TSWPTOCPageNumberAttachmentArchive::page_number() const {
  // @@protoc_insertion_point(field_get:TSWP.TSWPTOCPageNumberAttachmentArchive.page_number)
  return _internal_page_number();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TSWPTOCPageNumberAttachmentArchive::set_page_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 page_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TSWPTOCPageNumberAttachmentArchive.page_number)
}
inline std::string* TSWPTOCPageNumberAttachmentArchive::mutable_page_number() {
  // @@protoc_insertion_point(field_mutable:TSWP.TSWPTOCPageNumberAttachmentArchive.page_number)
  return _internal_mutable_page_number();
}
inline const std::string& TSWPTOCPageNumberAttachmentArchive::_internal_page_number() const {
  return page_number_.Get();
}
inline void TSWPTOCPageNumberAttachmentArchive::_internal_set_page_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  page_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TSWPTOCPageNumberAttachmentArchive::_internal_mutable_page_number() {
  _has_bits_[0] |= 0x00000001u;
  return page_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TSWPTOCPageNumberAttachmentArchive::release_page_number() {
  // @@protoc_insertion_point(field_release:TSWP.TSWPTOCPageNumberAttachmentArchive.page_number)
  if (!_internal_has_page_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return page_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TSWPTOCPageNumberAttachmentArchive::set_allocated_page_number(std::string* page_number) {
  if (page_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TSWPTOCPageNumberAttachmentArchive.page_number)
}

// optional string bookmark_name = 3;
inline bool TSWPTOCPageNumberAttachmentArchive::_internal_has_bookmark_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TSWPTOCPageNumberAttachmentArchive::has_bookmark_name() const {
  return _internal_has_bookmark_name();
}
inline void TSWPTOCPageNumberAttachmentArchive::clear_bookmark_name() {
  bookmark_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TSWPTOCPageNumberAttachmentArchive::bookmark_name() const {
  // @@protoc_insertion_point(field_get:TSWP.TSWPTOCPageNumberAttachmentArchive.bookmark_name)
  return _internal_bookmark_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TSWPTOCPageNumberAttachmentArchive::set_bookmark_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 bookmark_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TSWPTOCPageNumberAttachmentArchive.bookmark_name)
}
inline std::string* TSWPTOCPageNumberAttachmentArchive::mutable_bookmark_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.TSWPTOCPageNumberAttachmentArchive.bookmark_name)
  return _internal_mutable_bookmark_name();
}
inline const std::string& TSWPTOCPageNumberAttachmentArchive::_internal_bookmark_name() const {
  return bookmark_name_.Get();
}
inline void TSWPTOCPageNumberAttachmentArchive::_internal_set_bookmark_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bookmark_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TSWPTOCPageNumberAttachmentArchive::_internal_mutable_bookmark_name() {
  _has_bits_[0] |= 0x00000002u;
  return bookmark_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TSWPTOCPageNumberAttachmentArchive::release_bookmark_name() {
  // @@protoc_insertion_point(field_release:TSWP.TSWPTOCPageNumberAttachmentArchive.bookmark_name)
  if (!_internal_has_bookmark_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bookmark_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TSWPTOCPageNumberAttachmentArchive::set_allocated_bookmark_name(std::string* bookmark_name) {
  if (bookmark_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bookmark_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bookmark_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TSWPTOCPageNumberAttachmentArchive.bookmark_name)
}

// -------------------------------------------------------------------

// UIGraphicalAttachment

// -------------------------------------------------------------------

// DrawableAttachmentArchive

// optional .TSP.Reference drawable = 1;
inline bool DrawableAttachmentArchive::_internal_has_drawable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || drawable_ != nullptr);
  return value;
}
inline bool DrawableAttachmentArchive::has_drawable() const {
  return _internal_has_drawable();
}
inline const ::TSP::Reference& DrawableAttachmentArchive::_internal_drawable() const {
  const ::TSP::Reference* p = drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableAttachmentArchive::drawable() const {
  // @@protoc_insertion_point(field_get:TSWP.DrawableAttachmentArchive.drawable)
  return _internal_drawable();
}
inline void DrawableAttachmentArchive::unsafe_arena_set_allocated_drawable(
    ::TSP::Reference* drawable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  drawable_ = drawable;
  if (drawable) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.DrawableAttachmentArchive.drawable)
}
inline ::TSP::Reference* DrawableAttachmentArchive::release_drawable() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawableAttachmentArchive::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:TSWP.DrawableAttachmentArchive.drawable)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableAttachmentArchive::_internal_mutable_drawable() {
  _has_bits_[0] |= 0x00000001u;
  if (drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawable_ = p;
  }
  return drawable_;
}
inline ::TSP::Reference* DrawableAttachmentArchive::mutable_drawable() {
  // @@protoc_insertion_point(field_mutable:TSWP.DrawableAttachmentArchive.drawable)
  return _internal_mutable_drawable();
}
inline void DrawableAttachmentArchive::set_allocated_drawable(::TSP::Reference* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable)->GetArena();
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:TSWP.DrawableAttachmentArchive.drawable)
}

// optional uint32 h_offset_type = 2;
inline bool DrawableAttachmentArchive::_internal_has_h_offset_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawableAttachmentArchive::has_h_offset_type() const {
  return _internal_has_h_offset_type();
}
inline void DrawableAttachmentArchive::clear_h_offset_type() {
  h_offset_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawableAttachmentArchive::_internal_h_offset_type() const {
  return h_offset_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawableAttachmentArchive::h_offset_type() const {
  // @@protoc_insertion_point(field_get:TSWP.DrawableAttachmentArchive.h_offset_type)
  return _internal_h_offset_type();
}
inline void DrawableAttachmentArchive::_internal_set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  h_offset_type_ = value;
}
inline void DrawableAttachmentArchive::set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_h_offset_type(value);
  // @@protoc_insertion_point(field_set:TSWP.DrawableAttachmentArchive.h_offset_type)
}

// optional float h_offset = 3;
inline bool DrawableAttachmentArchive::_internal_has_h_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrawableAttachmentArchive::has_h_offset() const {
  return _internal_has_h_offset();
}
inline void DrawableAttachmentArchive::clear_h_offset() {
  h_offset_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float DrawableAttachmentArchive::_internal_h_offset() const {
  return h_offset_;
}
inline float DrawableAttachmentArchive::h_offset() const {
  // @@protoc_insertion_point(field_get:TSWP.DrawableAttachmentArchive.h_offset)
  return _internal_h_offset();
}
inline void DrawableAttachmentArchive::_internal_set_h_offset(float value) {
  _has_bits_[0] |= 0x00000004u;
  h_offset_ = value;
}
inline void DrawableAttachmentArchive::set_h_offset(float value) {
  _internal_set_h_offset(value);
  // @@protoc_insertion_point(field_set:TSWP.DrawableAttachmentArchive.h_offset)
}

// optional uint32 v_offset_type = 4;
inline bool DrawableAttachmentArchive::_internal_has_v_offset_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DrawableAttachmentArchive::has_v_offset_type() const {
  return _internal_has_v_offset_type();
}
inline void DrawableAttachmentArchive::clear_v_offset_type() {
  v_offset_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawableAttachmentArchive::_internal_v_offset_type() const {
  return v_offset_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawableAttachmentArchive::v_offset_type() const {
  // @@protoc_insertion_point(field_get:TSWP.DrawableAttachmentArchive.v_offset_type)
  return _internal_v_offset_type();
}
inline void DrawableAttachmentArchive::_internal_set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  v_offset_type_ = value;
}
inline void DrawableAttachmentArchive::set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v_offset_type(value);
  // @@protoc_insertion_point(field_set:TSWP.DrawableAttachmentArchive.v_offset_type)
}

// optional float v_offset = 5;
inline bool DrawableAttachmentArchive::_internal_has_v_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DrawableAttachmentArchive::has_v_offset() const {
  return _internal_has_v_offset();
}
inline void DrawableAttachmentArchive::clear_v_offset() {
  v_offset_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float DrawableAttachmentArchive::_internal_v_offset() const {
  return v_offset_;
}
inline float DrawableAttachmentArchive::v_offset() const {
  // @@protoc_insertion_point(field_get:TSWP.DrawableAttachmentArchive.v_offset)
  return _internal_v_offset();
}
inline void DrawableAttachmentArchive::_internal_set_v_offset(float value) {
  _has_bits_[0] |= 0x00000010u;
  v_offset_ = value;
}
inline void DrawableAttachmentArchive::set_v_offset(float value) {
  _internal_set_v_offset(value);
  // @@protoc_insertion_point(field_set:TSWP.DrawableAttachmentArchive.v_offset)
}

// -------------------------------------------------------------------

// TOCAttachmentArchive

// required .TSWP.DrawableAttachmentArchive super = 1;
inline bool TOCAttachmentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TOCAttachmentArchive::has_super() const {
  return _internal_has_super();
}
inline void TOCAttachmentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::DrawableAttachmentArchive& TOCAttachmentArchive::_internal_super() const {
  const ::TSWP::DrawableAttachmentArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::DrawableAttachmentArchive&>(
      ::TSWP::_DrawableAttachmentArchive_default_instance_);
}
inline const ::TSWP::DrawableAttachmentArchive& TOCAttachmentArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCAttachmentArchive.super)
  return _internal_super();
}
inline void TOCAttachmentArchive::unsafe_arena_set_allocated_super(
    ::TSWP::DrawableAttachmentArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCAttachmentArchive.super)
}
inline ::TSWP::DrawableAttachmentArchive* TOCAttachmentArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::DrawableAttachmentArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::DrawableAttachmentArchive* TOCAttachmentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.TOCAttachmentArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::DrawableAttachmentArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::DrawableAttachmentArchive* TOCAttachmentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::DrawableAttachmentArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::DrawableAttachmentArchive* TOCAttachmentArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCAttachmentArchive.super)
  return _internal_mutable_super();
}
inline void TOCAttachmentArchive::set_allocated_super(::TSWP::DrawableAttachmentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCAttachmentArchive.super)
}

// -------------------------------------------------------------------

// FootnoteReferenceAttachmentArchive

// optional .TSWP.TextualAttachmentArchive super = 1;
inline bool FootnoteReferenceAttachmentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FootnoteReferenceAttachmentArchive::has_super() const {
  return _internal_has_super();
}
inline void FootnoteReferenceAttachmentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::TextualAttachmentArchive& FootnoteReferenceAttachmentArchive::_internal_super() const {
  const ::TSWP::TextualAttachmentArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::TextualAttachmentArchive&>(
      ::TSWP::_TextualAttachmentArchive_default_instance_);
}
inline const ::TSWP::TextualAttachmentArchive& FootnoteReferenceAttachmentArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.FootnoteReferenceAttachmentArchive.super)
  return _internal_super();
}
inline void FootnoteReferenceAttachmentArchive::unsafe_arena_set_allocated_super(
    ::TSWP::TextualAttachmentArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.FootnoteReferenceAttachmentArchive.super)
}
inline ::TSWP::TextualAttachmentArchive* FootnoteReferenceAttachmentArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::TextualAttachmentArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* FootnoteReferenceAttachmentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.FootnoteReferenceAttachmentArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::TextualAttachmentArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* FootnoteReferenceAttachmentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::TextualAttachmentArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::TextualAttachmentArchive* FootnoteReferenceAttachmentArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.FootnoteReferenceAttachmentArchive.super)
  return _internal_mutable_super();
}
inline void FootnoteReferenceAttachmentArchive::set_allocated_super(::TSWP::TextualAttachmentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.FootnoteReferenceAttachmentArchive.super)
}

// optional .TSP.Reference contained_storage = 2;
inline bool FootnoteReferenceAttachmentArchive::_internal_has_contained_storage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || contained_storage_ != nullptr);
  return value;
}
inline bool FootnoteReferenceAttachmentArchive::has_contained_storage() const {
  return _internal_has_contained_storage();
}
inline const ::TSP::Reference& FootnoteReferenceAttachmentArchive::_internal_contained_storage() const {
  const ::TSP::Reference* p = contained_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FootnoteReferenceAttachmentArchive::contained_storage() const {
  // @@protoc_insertion_point(field_get:TSWP.FootnoteReferenceAttachmentArchive.contained_storage)
  return _internal_contained_storage();
}
inline void FootnoteReferenceAttachmentArchive::unsafe_arena_set_allocated_contained_storage(
    ::TSP::Reference* contained_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contained_storage_);
  }
  contained_storage_ = contained_storage;
  if (contained_storage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.FootnoteReferenceAttachmentArchive.contained_storage)
}
inline ::TSP::Reference* FootnoteReferenceAttachmentArchive::release_contained_storage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = contained_storage_;
  contained_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* FootnoteReferenceAttachmentArchive::unsafe_arena_release_contained_storage() {
  // @@protoc_insertion_point(field_release:TSWP.FootnoteReferenceAttachmentArchive.contained_storage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = contained_storage_;
  contained_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FootnoteReferenceAttachmentArchive::_internal_mutable_contained_storage() {
  _has_bits_[0] |= 0x00000004u;
  if (contained_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    contained_storage_ = p;
  }
  return contained_storage_;
}
inline ::TSP::Reference* FootnoteReferenceAttachmentArchive::mutable_contained_storage() {
  // @@protoc_insertion_point(field_mutable:TSWP.FootnoteReferenceAttachmentArchive.contained_storage)
  return _internal_mutable_contained_storage();
}
inline void FootnoteReferenceAttachmentArchive::set_allocated_contained_storage(::TSP::Reference* contained_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contained_storage_);
  }
  if (contained_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contained_storage)->GetArena();
    if (message_arena != submessage_arena) {
      contained_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contained_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  contained_storage_ = contained_storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.FootnoteReferenceAttachmentArchive.contained_storage)
}

// optional string custom_mark_string = 3;
inline bool FootnoteReferenceAttachmentArchive::_internal_has_custom_mark_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FootnoteReferenceAttachmentArchive::has_custom_mark_string() const {
  return _internal_has_custom_mark_string();
}
inline void FootnoteReferenceAttachmentArchive::clear_custom_mark_string() {
  custom_mark_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FootnoteReferenceAttachmentArchive::custom_mark_string() const {
  // @@protoc_insertion_point(field_get:TSWP.FootnoteReferenceAttachmentArchive.custom_mark_string)
  return _internal_custom_mark_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FootnoteReferenceAttachmentArchive::set_custom_mark_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 custom_mark_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.FootnoteReferenceAttachmentArchive.custom_mark_string)
}
inline std::string* FootnoteReferenceAttachmentArchive::mutable_custom_mark_string() {
  // @@protoc_insertion_point(field_mutable:TSWP.FootnoteReferenceAttachmentArchive.custom_mark_string)
  return _internal_mutable_custom_mark_string();
}
inline const std::string& FootnoteReferenceAttachmentArchive::_internal_custom_mark_string() const {
  return custom_mark_string_.Get();
}
inline void FootnoteReferenceAttachmentArchive::_internal_set_custom_mark_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  custom_mark_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FootnoteReferenceAttachmentArchive::_internal_mutable_custom_mark_string() {
  _has_bits_[0] |= 0x00000001u;
  return custom_mark_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FootnoteReferenceAttachmentArchive::release_custom_mark_string() {
  // @@protoc_insertion_point(field_release:TSWP.FootnoteReferenceAttachmentArchive.custom_mark_string)
  if (!_internal_has_custom_mark_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return custom_mark_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FootnoteReferenceAttachmentArchive::set_allocated_custom_mark_string(std::string* custom_mark_string) {
  if (custom_mark_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  custom_mark_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_mark_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.FootnoteReferenceAttachmentArchive.custom_mark_string)
}

// -------------------------------------------------------------------

// NumberAttachmentArchive

// optional .TSWP.TextualAttachmentArchive super = 1;
inline bool NumberAttachmentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool NumberAttachmentArchive::has_super() const {
  return _internal_has_super();
}
inline void NumberAttachmentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::TextualAttachmentArchive& NumberAttachmentArchive::_internal_super() const {
  const ::TSWP::TextualAttachmentArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::TextualAttachmentArchive&>(
      ::TSWP::_TextualAttachmentArchive_default_instance_);
}
inline const ::TSWP::TextualAttachmentArchive& NumberAttachmentArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.NumberAttachmentArchive.super)
  return _internal_super();
}
inline void NumberAttachmentArchive::unsafe_arena_set_allocated_super(
    ::TSWP::TextualAttachmentArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.NumberAttachmentArchive.super)
}
inline ::TSWP::TextualAttachmentArchive* NumberAttachmentArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::TextualAttachmentArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* NumberAttachmentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.NumberAttachmentArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::TextualAttachmentArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* NumberAttachmentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::TextualAttachmentArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::TextualAttachmentArchive* NumberAttachmentArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.NumberAttachmentArchive.super)
  return _internal_mutable_super();
}
inline void NumberAttachmentArchive::set_allocated_super(::TSWP::TextualAttachmentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.NumberAttachmentArchive.super)
}

// optional uint32 number_format = 2;
inline bool NumberAttachmentArchive::_internal_has_number_format() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NumberAttachmentArchive::has_number_format() const {
  return _internal_has_number_format();
}
inline void NumberAttachmentArchive::clear_number_format() {
  number_format_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NumberAttachmentArchive::_internal_number_format() const {
  return number_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NumberAttachmentArchive::number_format() const {
  // @@protoc_insertion_point(field_get:TSWP.NumberAttachmentArchive.number_format)
  return _internal_number_format();
}
inline void NumberAttachmentArchive::_internal_set_number_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  number_format_ = value;
}
inline void NumberAttachmentArchive::set_number_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_format(value);
  // @@protoc_insertion_point(field_set:TSWP.NumberAttachmentArchive.number_format)
}

// optional string string_value = 3;
inline bool NumberAttachmentArchive::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NumberAttachmentArchive::has_string_value() const {
  return _internal_has_string_value();
}
inline void NumberAttachmentArchive::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NumberAttachmentArchive::string_value() const {
  // @@protoc_insertion_point(field_get:TSWP.NumberAttachmentArchive.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NumberAttachmentArchive::set_string_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.NumberAttachmentArchive.string_value)
}
inline std::string* NumberAttachmentArchive::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:TSWP.NumberAttachmentArchive.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& NumberAttachmentArchive::_internal_string_value() const {
  return string_value_.Get();
}
inline void NumberAttachmentArchive::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NumberAttachmentArchive::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  return string_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NumberAttachmentArchive::release_string_value() {
  // @@protoc_insertion_point(field_release:TSWP.NumberAttachmentArchive.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NumberAttachmentArchive::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.NumberAttachmentArchive.string_value)
}

// optional string number_format_name = 4;
inline bool NumberAttachmentArchive::_internal_has_number_format_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NumberAttachmentArchive::has_number_format_name() const {
  return _internal_has_number_format_name();
}
inline void NumberAttachmentArchive::clear_number_format_name() {
  number_format_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NumberAttachmentArchive::number_format_name() const {
  // @@protoc_insertion_point(field_get:TSWP.NumberAttachmentArchive.number_format_name)
  return _internal_number_format_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NumberAttachmentArchive::set_number_format_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 number_format_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.NumberAttachmentArchive.number_format_name)
}
inline std::string* NumberAttachmentArchive::mutable_number_format_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.NumberAttachmentArchive.number_format_name)
  return _internal_mutable_number_format_name();
}
inline const std::string& NumberAttachmentArchive::_internal_number_format_name() const {
  return number_format_name_.Get();
}
inline void NumberAttachmentArchive::_internal_set_number_format_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  number_format_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NumberAttachmentArchive::_internal_mutable_number_format_name() {
  _has_bits_[0] |= 0x00000002u;
  return number_format_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NumberAttachmentArchive::release_number_format_name() {
  // @@protoc_insertion_point(field_release:TSWP.NumberAttachmentArchive.number_format_name)
  if (!_internal_has_number_format_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return number_format_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NumberAttachmentArchive::set_allocated_number_format_name(std::string* number_format_name) {
  if (number_format_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  number_format_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number_format_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.NumberAttachmentArchive.number_format_name)
}

// -------------------------------------------------------------------

// SmartFieldArchive

// optional string text_attribute_uuid_string = 1;
inline bool SmartFieldArchive::_internal_has_text_attribute_uuid_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SmartFieldArchive::has_text_attribute_uuid_string() const {
  return _internal_has_text_attribute_uuid_string();
}
inline void SmartFieldArchive::clear_text_attribute_uuid_string() {
  text_attribute_uuid_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SmartFieldArchive::text_attribute_uuid_string() const {
  // @@protoc_insertion_point(field_get:TSWP.SmartFieldArchive.text_attribute_uuid_string)
  return _internal_text_attribute_uuid_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SmartFieldArchive::set_text_attribute_uuid_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.SmartFieldArchive.text_attribute_uuid_string)
}
inline std::string* SmartFieldArchive::mutable_text_attribute_uuid_string() {
  // @@protoc_insertion_point(field_mutable:TSWP.SmartFieldArchive.text_attribute_uuid_string)
  return _internal_mutable_text_attribute_uuid_string();
}
inline const std::string& SmartFieldArchive::_internal_text_attribute_uuid_string() const {
  return text_attribute_uuid_string_.Get();
}
inline void SmartFieldArchive::_internal_set_text_attribute_uuid_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SmartFieldArchive::_internal_mutable_text_attribute_uuid_string() {
  _has_bits_[0] |= 0x00000001u;
  return text_attribute_uuid_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartFieldArchive::release_text_attribute_uuid_string() {
  // @@protoc_insertion_point(field_release:TSWP.SmartFieldArchive.text_attribute_uuid_string)
  if (!_internal_has_text_attribute_uuid_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_attribute_uuid_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartFieldArchive::set_allocated_text_attribute_uuid_string(std::string* text_attribute_uuid_string) {
  if (text_attribute_uuid_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_attribute_uuid_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_attribute_uuid_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.SmartFieldArchive.text_attribute_uuid_string)
}

// -------------------------------------------------------------------

// HyperlinkFieldArchive

// optional .TSWP.SmartFieldArchive super = 1;
inline bool HyperlinkFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool HyperlinkFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void HyperlinkFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::SmartFieldArchive& HyperlinkFieldArchive::_internal_super() const {
  const ::TSWP::SmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SmartFieldArchive&>(
      ::TSWP::_SmartFieldArchive_default_instance_);
}
inline const ::TSWP::SmartFieldArchive& HyperlinkFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.HyperlinkFieldArchive.super)
  return _internal_super();
}
inline void HyperlinkFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.HyperlinkFieldArchive.super)
}
inline ::TSWP::SmartFieldArchive* HyperlinkFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SmartFieldArchive* HyperlinkFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.HyperlinkFieldArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SmartFieldArchive* HyperlinkFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SmartFieldArchive* HyperlinkFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.HyperlinkFieldArchive.super)
  return _internal_mutable_super();
}
inline void HyperlinkFieldArchive::set_allocated_super(::TSWP::SmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.HyperlinkFieldArchive.super)
}

// optional string url_ref = 2;
inline bool HyperlinkFieldArchive::_internal_has_url_ref() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HyperlinkFieldArchive::has_url_ref() const {
  return _internal_has_url_ref();
}
inline void HyperlinkFieldArchive::clear_url_ref() {
  url_ref_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HyperlinkFieldArchive::url_ref() const {
  // @@protoc_insertion_point(field_get:TSWP.HyperlinkFieldArchive.url_ref)
  return _internal_url_ref();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void HyperlinkFieldArchive::set_url_ref(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.HyperlinkFieldArchive.url_ref)
}
inline std::string* HyperlinkFieldArchive::mutable_url_ref() {
  // @@protoc_insertion_point(field_mutable:TSWP.HyperlinkFieldArchive.url_ref)
  return _internal_mutable_url_ref();
}
inline const std::string& HyperlinkFieldArchive::_internal_url_ref() const {
  return url_ref_.Get();
}
inline void HyperlinkFieldArchive::_internal_set_url_ref(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* HyperlinkFieldArchive::_internal_mutable_url_ref() {
  _has_bits_[0] |= 0x00000001u;
  return url_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HyperlinkFieldArchive::release_url_ref() {
  // @@protoc_insertion_point(field_release:TSWP.HyperlinkFieldArchive.url_ref)
  if (!_internal_has_url_ref()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_ref_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HyperlinkFieldArchive::set_allocated_url_ref(std::string* url_ref) {
  if (url_ref != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.HyperlinkFieldArchive.url_ref)
}

// -------------------------------------------------------------------

// PlaceholderSmartFieldArchive

// optional .TSWP.SmartFieldArchive super = 1;
inline bool PlaceholderSmartFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PlaceholderSmartFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void PlaceholderSmartFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::SmartFieldArchive& PlaceholderSmartFieldArchive::_internal_super() const {
  const ::TSWP::SmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SmartFieldArchive&>(
      ::TSWP::_SmartFieldArchive_default_instance_);
}
inline const ::TSWP::SmartFieldArchive& PlaceholderSmartFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.PlaceholderSmartFieldArchive.super)
  return _internal_super();
}
inline void PlaceholderSmartFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.PlaceholderSmartFieldArchive.super)
}
inline ::TSWP::SmartFieldArchive* PlaceholderSmartFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SmartFieldArchive* PlaceholderSmartFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.PlaceholderSmartFieldArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SmartFieldArchive* PlaceholderSmartFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SmartFieldArchive* PlaceholderSmartFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.PlaceholderSmartFieldArchive.super)
  return _internal_mutable_super();
}
inline void PlaceholderSmartFieldArchive::set_allocated_super(::TSWP::SmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.PlaceholderSmartFieldArchive.super)
}

// optional bool localizable = 2;
inline bool PlaceholderSmartFieldArchive::_internal_has_localizable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlaceholderSmartFieldArchive::has_localizable() const {
  return _internal_has_localizable();
}
inline void PlaceholderSmartFieldArchive::clear_localizable() {
  localizable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PlaceholderSmartFieldArchive::_internal_localizable() const {
  return localizable_;
}
inline bool PlaceholderSmartFieldArchive::localizable() const {
  // @@protoc_insertion_point(field_get:TSWP.PlaceholderSmartFieldArchive.localizable)
  return _internal_localizable();
}
inline void PlaceholderSmartFieldArchive::_internal_set_localizable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  localizable_ = value;
}
inline void PlaceholderSmartFieldArchive::set_localizable(bool value) {
  _internal_set_localizable(value);
  // @@protoc_insertion_point(field_set:TSWP.PlaceholderSmartFieldArchive.localizable)
}

// optional string script_tag = 3;
inline bool PlaceholderSmartFieldArchive::_internal_has_script_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlaceholderSmartFieldArchive::has_script_tag() const {
  return _internal_has_script_tag();
}
inline void PlaceholderSmartFieldArchive::clear_script_tag() {
  script_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlaceholderSmartFieldArchive::script_tag() const {
  // @@protoc_insertion_point(field_get:TSWP.PlaceholderSmartFieldArchive.script_tag)
  return _internal_script_tag();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PlaceholderSmartFieldArchive::set_script_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 script_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.PlaceholderSmartFieldArchive.script_tag)
}
inline std::string* PlaceholderSmartFieldArchive::mutable_script_tag() {
  // @@protoc_insertion_point(field_mutable:TSWP.PlaceholderSmartFieldArchive.script_tag)
  return _internal_mutable_script_tag();
}
inline const std::string& PlaceholderSmartFieldArchive::_internal_script_tag() const {
  return script_tag_.Get();
}
inline void PlaceholderSmartFieldArchive::_internal_set_script_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  script_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PlaceholderSmartFieldArchive::_internal_mutable_script_tag() {
  _has_bits_[0] |= 0x00000001u;
  return script_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlaceholderSmartFieldArchive::release_script_tag() {
  // @@protoc_insertion_point(field_release:TSWP.PlaceholderSmartFieldArchive.script_tag)
  if (!_internal_has_script_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return script_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaceholderSmartFieldArchive::set_allocated_script_tag(std::string* script_tag) {
  if (script_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  script_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.PlaceholderSmartFieldArchive.script_tag)
}

// -------------------------------------------------------------------

// UnsupportedHyperlinkFieldArchive

// optional .TSWP.PlaceholderSmartFieldArchive super = 1;
inline bool UnsupportedHyperlinkFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool UnsupportedHyperlinkFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void UnsupportedHyperlinkFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::PlaceholderSmartFieldArchive& UnsupportedHyperlinkFieldArchive::_internal_super() const {
  const ::TSWP::PlaceholderSmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PlaceholderSmartFieldArchive&>(
      ::TSWP::_PlaceholderSmartFieldArchive_default_instance_);
}
inline const ::TSWP::PlaceholderSmartFieldArchive& UnsupportedHyperlinkFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.UnsupportedHyperlinkFieldArchive.super)
  return _internal_super();
}
inline void UnsupportedHyperlinkFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::PlaceholderSmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UnsupportedHyperlinkFieldArchive.super)
}
inline ::TSWP::PlaceholderSmartFieldArchive* UnsupportedHyperlinkFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* UnsupportedHyperlinkFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.UnsupportedHyperlinkFieldArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* UnsupportedHyperlinkFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PlaceholderSmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::PlaceholderSmartFieldArchive* UnsupportedHyperlinkFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.UnsupportedHyperlinkFieldArchive.super)
  return _internal_mutable_super();
}
inline void UnsupportedHyperlinkFieldArchive::set_allocated_super(::TSWP::PlaceholderSmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UnsupportedHyperlinkFieldArchive.super)
}

// optional string url_ref = 2;
inline bool UnsupportedHyperlinkFieldArchive::_internal_has_url_ref() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnsupportedHyperlinkFieldArchive::has_url_ref() const {
  return _internal_has_url_ref();
}
inline void UnsupportedHyperlinkFieldArchive::clear_url_ref() {
  url_ref_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UnsupportedHyperlinkFieldArchive::url_ref() const {
  // @@protoc_insertion_point(field_get:TSWP.UnsupportedHyperlinkFieldArchive.url_ref)
  return _internal_url_ref();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void UnsupportedHyperlinkFieldArchive::set_url_ref(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.UnsupportedHyperlinkFieldArchive.url_ref)
}
inline std::string* UnsupportedHyperlinkFieldArchive::mutable_url_ref() {
  // @@protoc_insertion_point(field_mutable:TSWP.UnsupportedHyperlinkFieldArchive.url_ref)
  return _internal_mutable_url_ref();
}
inline const std::string& UnsupportedHyperlinkFieldArchive::_internal_url_ref() const {
  return url_ref_.Get();
}
inline void UnsupportedHyperlinkFieldArchive::_internal_set_url_ref(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* UnsupportedHyperlinkFieldArchive::_internal_mutable_url_ref() {
  _has_bits_[0] |= 0x00000001u;
  return url_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnsupportedHyperlinkFieldArchive::release_url_ref() {
  // @@protoc_insertion_point(field_release:TSWP.UnsupportedHyperlinkFieldArchive.url_ref)
  if (!_internal_has_url_ref()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_ref_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnsupportedHyperlinkFieldArchive::set_allocated_url_ref(std::string* url_ref) {
  if (url_ref != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.UnsupportedHyperlinkFieldArchive.url_ref)
}

// optional string url_original_ref = 3;
inline bool UnsupportedHyperlinkFieldArchive::_internal_has_url_original_ref() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnsupportedHyperlinkFieldArchive::has_url_original_ref() const {
  return _internal_has_url_original_ref();
}
inline void UnsupportedHyperlinkFieldArchive::clear_url_original_ref() {
  url_original_ref_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UnsupportedHyperlinkFieldArchive::url_original_ref() const {
  // @@protoc_insertion_point(field_get:TSWP.UnsupportedHyperlinkFieldArchive.url_original_ref)
  return _internal_url_original_ref();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void UnsupportedHyperlinkFieldArchive::set_url_original_ref(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_original_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.UnsupportedHyperlinkFieldArchive.url_original_ref)
}
inline std::string* UnsupportedHyperlinkFieldArchive::mutable_url_original_ref() {
  // @@protoc_insertion_point(field_mutable:TSWP.UnsupportedHyperlinkFieldArchive.url_original_ref)
  return _internal_mutable_url_original_ref();
}
inline const std::string& UnsupportedHyperlinkFieldArchive::_internal_url_original_ref() const {
  return url_original_ref_.Get();
}
inline void UnsupportedHyperlinkFieldArchive::_internal_set_url_original_ref(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_original_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* UnsupportedHyperlinkFieldArchive::_internal_mutable_url_original_ref() {
  _has_bits_[0] |= 0x00000002u;
  return url_original_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnsupportedHyperlinkFieldArchive::release_url_original_ref() {
  // @@protoc_insertion_point(field_release:TSWP.UnsupportedHyperlinkFieldArchive.url_original_ref)
  if (!_internal_has_url_original_ref()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_original_ref_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnsupportedHyperlinkFieldArchive::set_allocated_url_original_ref(std::string* url_original_ref) {
  if (url_original_ref != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_original_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_original_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.UnsupportedHyperlinkFieldArchive.url_original_ref)
}

// -------------------------------------------------------------------

// BibliographySmartFieldArchive

// optional .TSWP.SmartFieldArchive super = 3;
inline bool BibliographySmartFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool BibliographySmartFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void BibliographySmartFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::SmartFieldArchive& BibliographySmartFieldArchive::_internal_super() const {
  const ::TSWP::SmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SmartFieldArchive&>(
      ::TSWP::_SmartFieldArchive_default_instance_);
}
inline const ::TSWP::SmartFieldArchive& BibliographySmartFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.BibliographySmartFieldArchive.super)
  return _internal_super();
}
inline void BibliographySmartFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.BibliographySmartFieldArchive.super)
}
inline ::TSWP::SmartFieldArchive* BibliographySmartFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SmartFieldArchive* BibliographySmartFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.BibliographySmartFieldArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SmartFieldArchive* BibliographySmartFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SmartFieldArchive* BibliographySmartFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.BibliographySmartFieldArchive.super)
  return _internal_mutable_super();
}
inline void BibliographySmartFieldArchive::set_allocated_super(::TSWP::SmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.BibliographySmartFieldArchive.super)
}

// repeated .TSP.Reference citation_records = 2;
inline int BibliographySmartFieldArchive::_internal_citation_records_size() const {
  return citation_records_.size();
}
inline int BibliographySmartFieldArchive::citation_records_size() const {
  return _internal_citation_records_size();
}
inline ::TSP::Reference* BibliographySmartFieldArchive::mutable_citation_records(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.BibliographySmartFieldArchive.citation_records)
  return citation_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
BibliographySmartFieldArchive::mutable_citation_records() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.BibliographySmartFieldArchive.citation_records)
  return &citation_records_;
}
inline const ::TSP::Reference& BibliographySmartFieldArchive::_internal_citation_records(int index) const {
  return citation_records_.Get(index);
}
inline const ::TSP::Reference& BibliographySmartFieldArchive::citation_records(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.BibliographySmartFieldArchive.citation_records)
  return _internal_citation_records(index);
}
inline ::TSP::Reference* BibliographySmartFieldArchive::_internal_add_citation_records() {
  return citation_records_.Add();
}
inline ::TSP::Reference* BibliographySmartFieldArchive::add_citation_records() {
  // @@protoc_insertion_point(field_add:TSWP.BibliographySmartFieldArchive.citation_records)
  return _internal_add_citation_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
BibliographySmartFieldArchive::citation_records() const {
  // @@protoc_insertion_point(field_list:TSWP.BibliographySmartFieldArchive.citation_records)
  return citation_records_;
}

// optional bool localizable = 4;
inline bool BibliographySmartFieldArchive::_internal_has_localizable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BibliographySmartFieldArchive::has_localizable() const {
  return _internal_has_localizable();
}
inline void BibliographySmartFieldArchive::clear_localizable() {
  localizable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BibliographySmartFieldArchive::_internal_localizable() const {
  return localizable_;
}
inline bool BibliographySmartFieldArchive::localizable() const {
  // @@protoc_insertion_point(field_get:TSWP.BibliographySmartFieldArchive.localizable)
  return _internal_localizable();
}
inline void BibliographySmartFieldArchive::_internal_set_localizable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  localizable_ = value;
}
inline void BibliographySmartFieldArchive::set_localizable(bool value) {
  _internal_set_localizable(value);
  // @@protoc_insertion_point(field_set:TSWP.BibliographySmartFieldArchive.localizable)
}

// optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
inline bool BibliographySmartFieldArchive::_internal_has_old_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || old_super_ != nullptr);
  return value;
}
inline bool BibliographySmartFieldArchive::has_old_super() const {
  return _internal_has_old_super();
}
inline void BibliographySmartFieldArchive::clear_old_super() {
  if (old_super_ != nullptr) old_super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::PlaceholderSmartFieldArchive& BibliographySmartFieldArchive::_internal_old_super() const {
  const ::TSWP::PlaceholderSmartFieldArchive* p = old_super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PlaceholderSmartFieldArchive&>(
      ::TSWP::_PlaceholderSmartFieldArchive_default_instance_);
}
inline const ::TSWP::PlaceholderSmartFieldArchive& BibliographySmartFieldArchive::old_super() const {
  // @@protoc_insertion_point(field_get:TSWP.BibliographySmartFieldArchive.old_super)
  return _internal_old_super();
}
inline void BibliographySmartFieldArchive::unsafe_arena_set_allocated_old_super(
    ::TSWP::PlaceholderSmartFieldArchive* old_super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_super_);
  }
  old_super_ = old_super;
  if (old_super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.BibliographySmartFieldArchive.old_super)
}
inline ::TSWP::PlaceholderSmartFieldArchive* BibliographySmartFieldArchive::release_old_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = old_super_;
  old_super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* BibliographySmartFieldArchive::unsafe_arena_release_old_super() {
  // @@protoc_insertion_point(field_release:TSWP.BibliographySmartFieldArchive.old_super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = old_super_;
  old_super_ = nullptr;
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* BibliographySmartFieldArchive::_internal_mutable_old_super() {
  _has_bits_[0] |= 0x00000001u;
  if (old_super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PlaceholderSmartFieldArchive>(GetArena());
    old_super_ = p;
  }
  return old_super_;
}
inline ::TSWP::PlaceholderSmartFieldArchive* BibliographySmartFieldArchive::mutable_old_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.BibliographySmartFieldArchive.old_super)
  return _internal_mutable_old_super();
}
inline void BibliographySmartFieldArchive::set_allocated_old_super(::TSWP::PlaceholderSmartFieldArchive* old_super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete old_super_;
  }
  if (old_super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(old_super);
    if (message_arena != submessage_arena) {
      old_super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  old_super_ = old_super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.BibliographySmartFieldArchive.old_super)
}

// -------------------------------------------------------------------

// CitationRecordArchive

// optional string endnote_xml = 1;
inline bool CitationRecordArchive::_internal_has_endnote_xml() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_endnote_xml() const {
  return _internal_has_endnote_xml();
}
inline void CitationRecordArchive::clear_endnote_xml() {
  endnote_xml_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CitationRecordArchive::endnote_xml() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.endnote_xml)
  return _internal_endnote_xml();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CitationRecordArchive::set_endnote_xml(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 endnote_xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.endnote_xml)
}
inline std::string* CitationRecordArchive::mutable_endnote_xml() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationRecordArchive.endnote_xml)
  return _internal_mutable_endnote_xml();
}
inline const std::string& CitationRecordArchive::_internal_endnote_xml() const {
  return endnote_xml_.Get();
}
inline void CitationRecordArchive::_internal_set_endnote_xml(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  endnote_xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CitationRecordArchive::_internal_mutable_endnote_xml() {
  _has_bits_[0] |= 0x00000001u;
  return endnote_xml_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CitationRecordArchive::release_endnote_xml() {
  // @@protoc_insertion_point(field_release:TSWP.CitationRecordArchive.endnote_xml)
  if (!_internal_has_endnote_xml()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return endnote_xml_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CitationRecordArchive::set_allocated_endnote_xml(std::string* endnote_xml) {
  if (endnote_xml != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  endnote_xml_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endnote_xml,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationRecordArchive.endnote_xml)
}

// optional bool hide_author_names = 2;
inline bool CitationRecordArchive::_internal_has_hide_author_names() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_hide_author_names() const {
  return _internal_has_hide_author_names();
}
inline void CitationRecordArchive::clear_hide_author_names() {
  hide_author_names_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CitationRecordArchive::_internal_hide_author_names() const {
  return hide_author_names_;
}
inline bool CitationRecordArchive::hide_author_names() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.hide_author_names)
  return _internal_hide_author_names();
}
inline void CitationRecordArchive::_internal_set_hide_author_names(bool value) {
  _has_bits_[0] |= 0x00000100u;
  hide_author_names_ = value;
}
inline void CitationRecordArchive::set_hide_author_names(bool value) {
  _internal_set_hide_author_names(value);
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.hide_author_names)
}

// optional bool hide_year = 3;
inline bool CitationRecordArchive::_internal_has_hide_year() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_hide_year() const {
  return _internal_has_hide_year();
}
inline void CitationRecordArchive::clear_hide_year() {
  hide_year_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CitationRecordArchive::_internal_hide_year() const {
  return hide_year_;
}
inline bool CitationRecordArchive::hide_year() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.hide_year)
  return _internal_hide_year();
}
inline void CitationRecordArchive::_internal_set_hide_year(bool value) {
  _has_bits_[0] |= 0x00000200u;
  hide_year_ = value;
}
inline void CitationRecordArchive::set_hide_year(bool value) {
  _internal_set_hide_year(value);
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.hide_year)
}

// optional string page_range = 4;
inline bool CitationRecordArchive::_internal_has_page_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_page_range() const {
  return _internal_has_page_range();
}
inline void CitationRecordArchive::clear_page_range() {
  page_range_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CitationRecordArchive::page_range() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.page_range)
  return _internal_page_range();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CitationRecordArchive::set_page_range(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 page_range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.page_range)
}
inline std::string* CitationRecordArchive::mutable_page_range() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationRecordArchive.page_range)
  return _internal_mutable_page_range();
}
inline const std::string& CitationRecordArchive::_internal_page_range() const {
  return page_range_.Get();
}
inline void CitationRecordArchive::_internal_set_page_range(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  page_range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CitationRecordArchive::_internal_mutable_page_range() {
  _has_bits_[0] |= 0x00000002u;
  return page_range_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CitationRecordArchive::release_page_range() {
  // @@protoc_insertion_point(field_release:TSWP.CitationRecordArchive.page_range)
  if (!_internal_has_page_range()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return page_range_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CitationRecordArchive::set_allocated_page_range(std::string* page_range) {
  if (page_range != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  page_range_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_range,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationRecordArchive.page_range)
}

// optional string prefix = 5;
inline bool CitationRecordArchive::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_prefix() const {
  return _internal_has_prefix();
}
inline void CitationRecordArchive::clear_prefix() {
  prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CitationRecordArchive::prefix() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CitationRecordArchive::set_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.prefix)
}
inline std::string* CitationRecordArchive::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationRecordArchive.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& CitationRecordArchive::_internal_prefix() const {
  return prefix_.Get();
}
inline void CitationRecordArchive::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CitationRecordArchive::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000004u;
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CitationRecordArchive::release_prefix() {
  // @@protoc_insertion_point(field_release:TSWP.CitationRecordArchive.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CitationRecordArchive::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationRecordArchive.prefix)
}

// optional string suffix = 6;
inline bool CitationRecordArchive::_internal_has_suffix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_suffix() const {
  return _internal_has_suffix();
}
inline void CitationRecordArchive::clear_suffix() {
  suffix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CitationRecordArchive::suffix() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.suffix)
  return _internal_suffix();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CitationRecordArchive::set_suffix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.suffix)
}
inline std::string* CitationRecordArchive::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationRecordArchive.suffix)
  return _internal_mutable_suffix();
}
inline const std::string& CitationRecordArchive::_internal_suffix() const {
  return suffix_.Get();
}
inline void CitationRecordArchive::_internal_set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CitationRecordArchive::_internal_mutable_suffix() {
  _has_bits_[0] |= 0x00000008u;
  return suffix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CitationRecordArchive::release_suffix() {
  // @@protoc_insertion_point(field_release:TSWP.CitationRecordArchive.suffix)
  if (!_internal_has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return suffix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CitationRecordArchive::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationRecordArchive.suffix)
}

// optional string authors_string = 7;
inline bool CitationRecordArchive::_internal_has_authors_string() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_authors_string() const {
  return _internal_has_authors_string();
}
inline void CitationRecordArchive::clear_authors_string() {
  authors_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CitationRecordArchive::authors_string() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.authors_string)
  return _internal_authors_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CitationRecordArchive::set_authors_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 authors_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.authors_string)
}
inline std::string* CitationRecordArchive::mutable_authors_string() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationRecordArchive.authors_string)
  return _internal_mutable_authors_string();
}
inline const std::string& CitationRecordArchive::_internal_authors_string() const {
  return authors_string_.Get();
}
inline void CitationRecordArchive::_internal_set_authors_string(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  authors_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CitationRecordArchive::_internal_mutable_authors_string() {
  _has_bits_[0] |= 0x00000010u;
  return authors_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CitationRecordArchive::release_authors_string() {
  // @@protoc_insertion_point(field_release:TSWP.CitationRecordArchive.authors_string)
  if (!_internal_has_authors_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return authors_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CitationRecordArchive::set_allocated_authors_string(std::string* authors_string) {
  if (authors_string != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  authors_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authors_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationRecordArchive.authors_string)
}

// optional string title = 8;
inline bool CitationRecordArchive::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_title() const {
  return _internal_has_title();
}
inline void CitationRecordArchive::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CitationRecordArchive::title() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CitationRecordArchive::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.title)
}
inline std::string* CitationRecordArchive::mutable_title() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationRecordArchive.title)
  return _internal_mutable_title();
}
inline const std::string& CitationRecordArchive::_internal_title() const {
  return title_.Get();
}
inline void CitationRecordArchive::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CitationRecordArchive::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000020u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CitationRecordArchive::release_title() {
  // @@protoc_insertion_point(field_release:TSWP.CitationRecordArchive.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CitationRecordArchive::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationRecordArchive.title)
}

// optional string year = 9;
inline bool CitationRecordArchive::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_year() const {
  return _internal_has_year();
}
inline void CitationRecordArchive::clear_year() {
  year_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CitationRecordArchive::year() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.year)
  return _internal_year();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CitationRecordArchive::set_year(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 year_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.year)
}
inline std::string* CitationRecordArchive::mutable_year() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationRecordArchive.year)
  return _internal_mutable_year();
}
inline const std::string& CitationRecordArchive::_internal_year() const {
  return year_.Get();
}
inline void CitationRecordArchive::_internal_set_year(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  year_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CitationRecordArchive::_internal_mutable_year() {
  _has_bits_[0] |= 0x00000040u;
  return year_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CitationRecordArchive::release_year() {
  // @@protoc_insertion_point(field_release:TSWP.CitationRecordArchive.year)
  if (!_internal_has_year()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return year_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CitationRecordArchive::set_allocated_year(std::string* year) {
  if (year != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  year_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), year,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationRecordArchive.year)
}

// optional string type = 10;
inline bool CitationRecordArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CitationRecordArchive::has_type() const {
  return _internal_has_type();
}
inline void CitationRecordArchive::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CitationRecordArchive::type() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationRecordArchive.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CitationRecordArchive::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.CitationRecordArchive.type)
}
inline std::string* CitationRecordArchive::mutable_type() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationRecordArchive.type)
  return _internal_mutable_type();
}
inline const std::string& CitationRecordArchive::_internal_type() const {
  return type_.Get();
}
inline void CitationRecordArchive::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CitationRecordArchive::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000080u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CitationRecordArchive::release_type() {
  // @@protoc_insertion_point(field_release:TSWP.CitationRecordArchive.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CitationRecordArchive::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationRecordArchive.type)
}

// -------------------------------------------------------------------

// CitationSmartFieldArchive

// optional .TSWP.SmartFieldArchive super = 3;
inline bool CitationSmartFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CitationSmartFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void CitationSmartFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::SmartFieldArchive& CitationSmartFieldArchive::_internal_super() const {
  const ::TSWP::SmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SmartFieldArchive&>(
      ::TSWP::_SmartFieldArchive_default_instance_);
}
inline const ::TSWP::SmartFieldArchive& CitationSmartFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationSmartFieldArchive.super)
  return _internal_super();
}
inline void CitationSmartFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CitationSmartFieldArchive.super)
}
inline ::TSWP::SmartFieldArchive* CitationSmartFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SmartFieldArchive* CitationSmartFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.CitationSmartFieldArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SmartFieldArchive* CitationSmartFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SmartFieldArchive* CitationSmartFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationSmartFieldArchive.super)
  return _internal_mutable_super();
}
inline void CitationSmartFieldArchive::set_allocated_super(::TSWP::SmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationSmartFieldArchive.super)
}

// repeated .TSP.Reference citation_records = 2;
inline int CitationSmartFieldArchive::_internal_citation_records_size() const {
  return citation_records_.size();
}
inline int CitationSmartFieldArchive::citation_records_size() const {
  return _internal_citation_records_size();
}
inline ::TSP::Reference* CitationSmartFieldArchive::mutable_citation_records(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationSmartFieldArchive.citation_records)
  return citation_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CitationSmartFieldArchive::mutable_citation_records() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.CitationSmartFieldArchive.citation_records)
  return &citation_records_;
}
inline const ::TSP::Reference& CitationSmartFieldArchive::_internal_citation_records(int index) const {
  return citation_records_.Get(index);
}
inline const ::TSP::Reference& CitationSmartFieldArchive::citation_records(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.CitationSmartFieldArchive.citation_records)
  return _internal_citation_records(index);
}
inline ::TSP::Reference* CitationSmartFieldArchive::_internal_add_citation_records() {
  return citation_records_.Add();
}
inline ::TSP::Reference* CitationSmartFieldArchive::add_citation_records() {
  // @@protoc_insertion_point(field_add:TSWP.CitationSmartFieldArchive.citation_records)
  return _internal_add_citation_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CitationSmartFieldArchive::citation_records() const {
  // @@protoc_insertion_point(field_list:TSWP.CitationSmartFieldArchive.citation_records)
  return citation_records_;
}

// optional bool localizable = 4;
inline bool CitationSmartFieldArchive::_internal_has_localizable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CitationSmartFieldArchive::has_localizable() const {
  return _internal_has_localizable();
}
inline void CitationSmartFieldArchive::clear_localizable() {
  localizable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CitationSmartFieldArchive::_internal_localizable() const {
  return localizable_;
}
inline bool CitationSmartFieldArchive::localizable() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationSmartFieldArchive.localizable)
  return _internal_localizable();
}
inline void CitationSmartFieldArchive::_internal_set_localizable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  localizable_ = value;
}
inline void CitationSmartFieldArchive::set_localizable(bool value) {
  _internal_set_localizable(value);
  // @@protoc_insertion_point(field_set:TSWP.CitationSmartFieldArchive.localizable)
}

// optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
inline bool CitationSmartFieldArchive::_internal_has_old_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || old_super_ != nullptr);
  return value;
}
inline bool CitationSmartFieldArchive::has_old_super() const {
  return _internal_has_old_super();
}
inline void CitationSmartFieldArchive::clear_old_super() {
  if (old_super_ != nullptr) old_super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::PlaceholderSmartFieldArchive& CitationSmartFieldArchive::_internal_old_super() const {
  const ::TSWP::PlaceholderSmartFieldArchive* p = old_super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PlaceholderSmartFieldArchive&>(
      ::TSWP::_PlaceholderSmartFieldArchive_default_instance_);
}
inline const ::TSWP::PlaceholderSmartFieldArchive& CitationSmartFieldArchive::old_super() const {
  // @@protoc_insertion_point(field_get:TSWP.CitationSmartFieldArchive.old_super)
  return _internal_old_super();
}
inline void CitationSmartFieldArchive::unsafe_arena_set_allocated_old_super(
    ::TSWP::PlaceholderSmartFieldArchive* old_super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_super_);
  }
  old_super_ = old_super;
  if (old_super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CitationSmartFieldArchive.old_super)
}
inline ::TSWP::PlaceholderSmartFieldArchive* CitationSmartFieldArchive::release_old_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = old_super_;
  old_super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* CitationSmartFieldArchive::unsafe_arena_release_old_super() {
  // @@protoc_insertion_point(field_release:TSWP.CitationSmartFieldArchive.old_super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = old_super_;
  old_super_ = nullptr;
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* CitationSmartFieldArchive::_internal_mutable_old_super() {
  _has_bits_[0] |= 0x00000001u;
  if (old_super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PlaceholderSmartFieldArchive>(GetArena());
    old_super_ = p;
  }
  return old_super_;
}
inline ::TSWP::PlaceholderSmartFieldArchive* CitationSmartFieldArchive::mutable_old_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.CitationSmartFieldArchive.old_super)
  return _internal_mutable_old_super();
}
inline void CitationSmartFieldArchive::set_allocated_old_super(::TSWP::PlaceholderSmartFieldArchive* old_super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete old_super_;
  }
  if (old_super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(old_super);
    if (message_arena != submessage_arena) {
      old_super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  old_super_ = old_super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CitationSmartFieldArchive.old_super)
}

// -------------------------------------------------------------------

// DateTimeSmartFieldArchive

// optional .TSWP.SmartFieldArchive super = 1;
inline bool DateTimeSmartFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DateTimeSmartFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void DateTimeSmartFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::SmartFieldArchive& DateTimeSmartFieldArchive::_internal_super() const {
  const ::TSWP::SmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SmartFieldArchive&>(
      ::TSWP::_SmartFieldArchive_default_instance_);
}
inline const ::TSWP::SmartFieldArchive& DateTimeSmartFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.DateTimeSmartFieldArchive.super)
  return _internal_super();
}
inline void DateTimeSmartFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.DateTimeSmartFieldArchive.super)
}
inline ::TSWP::SmartFieldArchive* DateTimeSmartFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SmartFieldArchive* DateTimeSmartFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.DateTimeSmartFieldArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SmartFieldArchive* DateTimeSmartFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SmartFieldArchive* DateTimeSmartFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.DateTimeSmartFieldArchive.super)
  return _internal_mutable_super();
}
inline void DateTimeSmartFieldArchive::set_allocated_super(::TSWP::SmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.DateTimeSmartFieldArchive.super)
}

// optional string format = 2;
inline bool DateTimeSmartFieldArchive::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DateTimeSmartFieldArchive::has_format() const {
  return _internal_has_format();
}
inline void DateTimeSmartFieldArchive::clear_format() {
  format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DateTimeSmartFieldArchive::format() const {
  // @@protoc_insertion_point(field_get:TSWP.DateTimeSmartFieldArchive.format)
  return _internal_format();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DateTimeSmartFieldArchive::set_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.DateTimeSmartFieldArchive.format)
}
inline std::string* DateTimeSmartFieldArchive::mutable_format() {
  // @@protoc_insertion_point(field_mutable:TSWP.DateTimeSmartFieldArchive.format)
  return _internal_mutable_format();
}
inline const std::string& DateTimeSmartFieldArchive::_internal_format() const {
  return format_.Get();
}
inline void DateTimeSmartFieldArchive::_internal_set_format(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DateTimeSmartFieldArchive::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000001u;
  return format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DateTimeSmartFieldArchive::release_format() {
  // @@protoc_insertion_point(field_release:TSWP.DateTimeSmartFieldArchive.format)
  if (!_internal_has_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DateTimeSmartFieldArchive::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.DateTimeSmartFieldArchive.format)
}

// optional string locale_identifier = 3;
inline bool DateTimeSmartFieldArchive::_internal_has_locale_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DateTimeSmartFieldArchive::has_locale_identifier() const {
  return _internal_has_locale_identifier();
}
inline void DateTimeSmartFieldArchive::clear_locale_identifier() {
  locale_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DateTimeSmartFieldArchive::locale_identifier() const {
  // @@protoc_insertion_point(field_get:TSWP.DateTimeSmartFieldArchive.locale_identifier)
  return _internal_locale_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DateTimeSmartFieldArchive::set_locale_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.DateTimeSmartFieldArchive.locale_identifier)
}
inline std::string* DateTimeSmartFieldArchive::mutable_locale_identifier() {
  // @@protoc_insertion_point(field_mutable:TSWP.DateTimeSmartFieldArchive.locale_identifier)
  return _internal_mutable_locale_identifier();
}
inline const std::string& DateTimeSmartFieldArchive::_internal_locale_identifier() const {
  return locale_identifier_.Get();
}
inline void DateTimeSmartFieldArchive::_internal_set_locale_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DateTimeSmartFieldArchive::_internal_mutable_locale_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return locale_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DateTimeSmartFieldArchive::release_locale_identifier() {
  // @@protoc_insertion_point(field_release:TSWP.DateTimeSmartFieldArchive.locale_identifier)
  if (!_internal_has_locale_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return locale_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DateTimeSmartFieldArchive::set_allocated_locale_identifier(std::string* locale_identifier) {
  if (locale_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  locale_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locale_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.DateTimeSmartFieldArchive.locale_identifier)
}

// optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
inline bool DateTimeSmartFieldArchive::_internal_has_date_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DateTimeSmartFieldArchive::has_date_style() const {
  return _internal_has_date_style();
}
inline void DateTimeSmartFieldArchive::clear_date_style() {
  date_style_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::_internal_date_style() const {
  return static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle >(date_style_);
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::date_style() const {
  // @@protoc_insertion_point(field_get:TSWP.DateTimeSmartFieldArchive.date_style)
  return _internal_date_style();
}
inline void DateTimeSmartFieldArchive::_internal_set_date_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value) {
  assert(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  date_style_ = value;
}
inline void DateTimeSmartFieldArchive::set_date_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value) {
  _internal_set_date_style(value);
  // @@protoc_insertion_point(field_set:TSWP.DateTimeSmartFieldArchive.date_style)
}

// optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
inline bool DateTimeSmartFieldArchive::_internal_has_time_style() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DateTimeSmartFieldArchive::has_time_style() const {
  return _internal_has_time_style();
}
inline void DateTimeSmartFieldArchive::clear_time_style() {
  time_style_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::_internal_time_style() const {
  return static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle >(time_style_);
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::time_style() const {
  // @@protoc_insertion_point(field_get:TSWP.DateTimeSmartFieldArchive.time_style)
  return _internal_time_style();
}
inline void DateTimeSmartFieldArchive::_internal_set_time_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value) {
  assert(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  time_style_ = value;
}
inline void DateTimeSmartFieldArchive::set_time_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value) {
  _internal_set_time_style(value);
  // @@protoc_insertion_point(field_set:TSWP.DateTimeSmartFieldArchive.time_style)
}

// optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
inline bool DateTimeSmartFieldArchive::_internal_has_update_plan() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DateTimeSmartFieldArchive::has_update_plan() const {
  return _internal_has_update_plan();
}
inline void DateTimeSmartFieldArchive::clear_update_plan() {
  update_plan_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::_internal_update_plan() const {
  return static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan >(update_plan_);
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::update_plan() const {
  // @@protoc_insertion_point(field_get:TSWP.DateTimeSmartFieldArchive.update_plan)
  return _internal_update_plan();
}
inline void DateTimeSmartFieldArchive::_internal_set_update_plan(::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan value) {
  assert(::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  update_plan_ = value;
}
inline void DateTimeSmartFieldArchive::set_update_plan(::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan value) {
  _internal_set_update_plan(value);
  // @@protoc_insertion_point(field_set:TSWP.DateTimeSmartFieldArchive.update_plan)
}

// optional bool needs_update = 7;
inline bool DateTimeSmartFieldArchive::_internal_has_needs_update() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DateTimeSmartFieldArchive::has_needs_update() const {
  return _internal_has_needs_update();
}
inline void DateTimeSmartFieldArchive::clear_needs_update() {
  needs_update_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool DateTimeSmartFieldArchive::_internal_needs_update() const {
  return needs_update_;
}
inline bool DateTimeSmartFieldArchive::needs_update() const {
  // @@protoc_insertion_point(field_get:TSWP.DateTimeSmartFieldArchive.needs_update)
  return _internal_needs_update();
}
inline void DateTimeSmartFieldArchive::_internal_set_needs_update(bool value) {
  _has_bits_[0] |= 0x00000080u;
  needs_update_ = value;
}
inline void DateTimeSmartFieldArchive::set_needs_update(bool value) {
  _internal_set_needs_update(value);
  // @@protoc_insertion_point(field_set:TSWP.DateTimeSmartFieldArchive.needs_update)
}

// optional .TSP.Date date = 8;
inline bool DateTimeSmartFieldArchive::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || date_ != nullptr);
  return value;
}
inline bool DateTimeSmartFieldArchive::has_date() const {
  return _internal_has_date();
}
inline const ::TSP::Date& DateTimeSmartFieldArchive::_internal_date() const {
  const ::TSP::Date* p = date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& DateTimeSmartFieldArchive::date() const {
  // @@protoc_insertion_point(field_get:TSWP.DateTimeSmartFieldArchive.date)
  return _internal_date();
}
inline void DateTimeSmartFieldArchive::unsafe_arena_set_allocated_date(
    ::TSP::Date* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.DateTimeSmartFieldArchive.date)
}
inline ::TSP::Date* DateTimeSmartFieldArchive::release_date() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Date* DateTimeSmartFieldArchive::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:TSWP.DateTimeSmartFieldArchive.date)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::TSP::Date* DateTimeSmartFieldArchive::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000008u;
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArena());
    date_ = p;
  }
  return date_;
}
inline ::TSP::Date* DateTimeSmartFieldArchive::mutable_date() {
  // @@protoc_insertion_point(field_mutable:TSWP.DateTimeSmartFieldArchive.date)
  return _internal_mutable_date();
}
inline void DateTimeSmartFieldArchive::set_allocated_date(::TSP::Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:TSWP.DateTimeSmartFieldArchive.date)
}

// -------------------------------------------------------------------

// BookmarkFieldArchive

// optional .TSWP.SmartFieldArchive super = 1;
inline bool BookmarkFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool BookmarkFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void BookmarkFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::SmartFieldArchive& BookmarkFieldArchive::_internal_super() const {
  const ::TSWP::SmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SmartFieldArchive&>(
      ::TSWP::_SmartFieldArchive_default_instance_);
}
inline const ::TSWP::SmartFieldArchive& BookmarkFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.BookmarkFieldArchive.super)
  return _internal_super();
}
inline void BookmarkFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.BookmarkFieldArchive.super)
}
inline ::TSWP::SmartFieldArchive* BookmarkFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SmartFieldArchive* BookmarkFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.BookmarkFieldArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SmartFieldArchive* BookmarkFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SmartFieldArchive* BookmarkFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.BookmarkFieldArchive.super)
  return _internal_mutable_super();
}
inline void BookmarkFieldArchive::set_allocated_super(::TSWP::SmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.BookmarkFieldArchive.super)
}

// optional string name = 2;
inline bool BookmarkFieldArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BookmarkFieldArchive::has_name() const {
  return _internal_has_name();
}
inline void BookmarkFieldArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BookmarkFieldArchive::name() const {
  // @@protoc_insertion_point(field_get:TSWP.BookmarkFieldArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BookmarkFieldArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.BookmarkFieldArchive.name)
}
inline std::string* BookmarkFieldArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.BookmarkFieldArchive.name)
  return _internal_mutable_name();
}
inline const std::string& BookmarkFieldArchive::_internal_name() const {
  return name_.Get();
}
inline void BookmarkFieldArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BookmarkFieldArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BookmarkFieldArchive::release_name() {
  // @@protoc_insertion_point(field_release:TSWP.BookmarkFieldArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BookmarkFieldArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.BookmarkFieldArchive.name)
}

// optional uint32 ranged = 3;
inline bool BookmarkFieldArchive::_internal_has_ranged() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BookmarkFieldArchive::has_ranged() const {
  return _internal_has_ranged();
}
inline void BookmarkFieldArchive::clear_ranged() {
  ranged_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BookmarkFieldArchive::_internal_ranged() const {
  return ranged_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BookmarkFieldArchive::ranged() const {
  // @@protoc_insertion_point(field_get:TSWP.BookmarkFieldArchive.ranged)
  return _internal_ranged();
}
inline void BookmarkFieldArchive::_internal_set_ranged(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ranged_ = value;
}
inline void BookmarkFieldArchive::set_ranged(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ranged(value);
  // @@protoc_insertion_point(field_set:TSWP.BookmarkFieldArchive.ranged)
}

// optional uint32 hidden = 4;
inline bool BookmarkFieldArchive::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BookmarkFieldArchive::has_hidden() const {
  return _internal_has_hidden();
}
inline void BookmarkFieldArchive::clear_hidden() {
  hidden_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BookmarkFieldArchive::_internal_hidden() const {
  return hidden_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BookmarkFieldArchive::hidden() const {
  // @@protoc_insertion_point(field_get:TSWP.BookmarkFieldArchive.hidden)
  return _internal_hidden();
}
inline void BookmarkFieldArchive::_internal_set_hidden(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  hidden_ = value;
}
inline void BookmarkFieldArchive::set_hidden(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:TSWP.BookmarkFieldArchive.hidden)
}

// -------------------------------------------------------------------

// FilenameSmartFieldArchive

// optional .TSWP.PlaceholderSmartFieldArchive super = 1;
inline bool FilenameSmartFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FilenameSmartFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void FilenameSmartFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::PlaceholderSmartFieldArchive& FilenameSmartFieldArchive::_internal_super() const {
  const ::TSWP::PlaceholderSmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PlaceholderSmartFieldArchive&>(
      ::TSWP::_PlaceholderSmartFieldArchive_default_instance_);
}
inline const ::TSWP::PlaceholderSmartFieldArchive& FilenameSmartFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.FilenameSmartFieldArchive.super)
  return _internal_super();
}
inline void FilenameSmartFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::PlaceholderSmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.FilenameSmartFieldArchive.super)
}
inline ::TSWP::PlaceholderSmartFieldArchive* FilenameSmartFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* FilenameSmartFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.FilenameSmartFieldArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* FilenameSmartFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PlaceholderSmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::PlaceholderSmartFieldArchive* FilenameSmartFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.FilenameSmartFieldArchive.super)
  return _internal_mutable_super();
}
inline void FilenameSmartFieldArchive::set_allocated_super(::TSWP::PlaceholderSmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.FilenameSmartFieldArchive.super)
}

// optional uint32 display_flags = 2;
inline bool FilenameSmartFieldArchive::_internal_has_display_flags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FilenameSmartFieldArchive::has_display_flags() const {
  return _internal_has_display_flags();
}
inline void FilenameSmartFieldArchive::clear_display_flags() {
  display_flags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilenameSmartFieldArchive::_internal_display_flags() const {
  return display_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilenameSmartFieldArchive::display_flags() const {
  // @@protoc_insertion_point(field_get:TSWP.FilenameSmartFieldArchive.display_flags)
  return _internal_display_flags();
}
inline void FilenameSmartFieldArchive::_internal_set_display_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  display_flags_ = value;
}
inline void FilenameSmartFieldArchive::set_display_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_display_flags(value);
  // @@protoc_insertion_point(field_set:TSWP.FilenameSmartFieldArchive.display_flags)
}

// -------------------------------------------------------------------

// MergeSmartFieldArchive

// optional .TSWP.PlaceholderSmartFieldArchive super = 1;
inline bool MergeSmartFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MergeSmartFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void MergeSmartFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSWP::PlaceholderSmartFieldArchive& MergeSmartFieldArchive::_internal_super() const {
  const ::TSWP::PlaceholderSmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PlaceholderSmartFieldArchive&>(
      ::TSWP::_PlaceholderSmartFieldArchive_default_instance_);
}
inline const ::TSWP::PlaceholderSmartFieldArchive& MergeSmartFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeSmartFieldArchive.super)
  return _internal_super();
}
inline void MergeSmartFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::PlaceholderSmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MergeSmartFieldArchive.super)
}
inline ::TSWP::PlaceholderSmartFieldArchive* MergeSmartFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* MergeSmartFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.MergeSmartFieldArchive.super)
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* MergeSmartFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000040u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PlaceholderSmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::PlaceholderSmartFieldArchive* MergeSmartFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.MergeSmartFieldArchive.super)
  return _internal_mutable_super();
}
inline void MergeSmartFieldArchive::set_allocated_super(::TSWP::PlaceholderSmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeSmartFieldArchive.super)
}

// optional string property = 2;
inline bool MergeSmartFieldArchive::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MergeSmartFieldArchive::has_property() const {
  return _internal_has_property();
}
inline void MergeSmartFieldArchive::clear_property() {
  property_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MergeSmartFieldArchive::property() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeSmartFieldArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void MergeSmartFieldArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.MergeSmartFieldArchive.property)
}
inline std::string* MergeSmartFieldArchive::mutable_property() {
  // @@protoc_insertion_point(field_mutable:TSWP.MergeSmartFieldArchive.property)
  return _internal_mutable_property();
}
inline const std::string& MergeSmartFieldArchive::_internal_property() const {
  return property_.Get();
}
inline void MergeSmartFieldArchive::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* MergeSmartFieldArchive::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000001u;
  return property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MergeSmartFieldArchive::release_property() {
  // @@protoc_insertion_point(field_release:TSWP.MergeSmartFieldArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MergeSmartFieldArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeSmartFieldArchive.property)
}

// optional string label = 3;
inline bool MergeSmartFieldArchive::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MergeSmartFieldArchive::has_label() const {
  return _internal_has_label();
}
inline void MergeSmartFieldArchive::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MergeSmartFieldArchive::label() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeSmartFieldArchive.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void MergeSmartFieldArchive::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.MergeSmartFieldArchive.label)
}
inline std::string* MergeSmartFieldArchive::mutable_label() {
  // @@protoc_insertion_point(field_mutable:TSWP.MergeSmartFieldArchive.label)
  return _internal_mutable_label();
}
inline const std::string& MergeSmartFieldArchive::_internal_label() const {
  return label_.Get();
}
inline void MergeSmartFieldArchive::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* MergeSmartFieldArchive::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MergeSmartFieldArchive::release_label() {
  // @@protoc_insertion_point(field_release:TSWP.MergeSmartFieldArchive.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MergeSmartFieldArchive::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeSmartFieldArchive.label)
}

// optional string key = 4;
inline bool MergeSmartFieldArchive::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MergeSmartFieldArchive::has_key() const {
  return _internal_has_key();
}
inline void MergeSmartFieldArchive::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MergeSmartFieldArchive::key() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeSmartFieldArchive.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void MergeSmartFieldArchive::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.MergeSmartFieldArchive.key)
}
inline std::string* MergeSmartFieldArchive::mutable_key() {
  // @@protoc_insertion_point(field_mutable:TSWP.MergeSmartFieldArchive.key)
  return _internal_mutable_key();
}
inline const std::string& MergeSmartFieldArchive::_internal_key() const {
  return key_.Get();
}
inline void MergeSmartFieldArchive::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* MergeSmartFieldArchive::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000004u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MergeSmartFieldArchive::release_key() {
  // @@protoc_insertion_point(field_release:TSWP.MergeSmartFieldArchive.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MergeSmartFieldArchive::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeSmartFieldArchive.key)
}

// optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
inline bool MergeSmartFieldArchive::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MergeSmartFieldArchive::has_category() const {
  return _internal_has_category();
}
inline void MergeSmartFieldArchive::clear_category() {
  category_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::TSWP::MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::_internal_category() const {
  return static_cast< ::TSWP::MergeSmartFieldArchive_MergeCategory >(category_);
}
inline ::TSWP::MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::category() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeSmartFieldArchive.category)
  return _internal_category();
}
inline void MergeSmartFieldArchive::_internal_set_category(::TSWP::MergeSmartFieldArchive_MergeCategory value) {
  assert(::TSWP::MergeSmartFieldArchive_MergeCategory_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  category_ = value;
}
inline void MergeSmartFieldArchive::set_category(::TSWP::MergeSmartFieldArchive_MergeCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:TSWP.MergeSmartFieldArchive.category)
}

// optional bool requires_following_whitespace = 6;
inline bool MergeSmartFieldArchive::_internal_has_requires_following_whitespace() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MergeSmartFieldArchive::has_requires_following_whitespace() const {
  return _internal_has_requires_following_whitespace();
}
inline void MergeSmartFieldArchive::clear_requires_following_whitespace() {
  requires_following_whitespace_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool MergeSmartFieldArchive::_internal_requires_following_whitespace() const {
  return requires_following_whitespace_;
}
inline bool MergeSmartFieldArchive::requires_following_whitespace() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeSmartFieldArchive.requires_following_whitespace)
  return _internal_requires_following_whitespace();
}
inline void MergeSmartFieldArchive::_internal_set_requires_following_whitespace(bool value) {
  _has_bits_[0] |= 0x00000100u;
  requires_following_whitespace_ = value;
}
inline void MergeSmartFieldArchive::set_requires_following_whitespace(bool value) {
  _internal_set_requires_following_whitespace(value);
  // @@protoc_insertion_point(field_set:TSWP.MergeSmartFieldArchive.requires_following_whitespace)
}

// optional string whitespace = 7;
inline bool MergeSmartFieldArchive::_internal_has_whitespace() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MergeSmartFieldArchive::has_whitespace() const {
  return _internal_has_whitespace();
}
inline void MergeSmartFieldArchive::clear_whitespace() {
  whitespace_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MergeSmartFieldArchive::whitespace() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeSmartFieldArchive.whitespace)
  return _internal_whitespace();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void MergeSmartFieldArchive::set_whitespace(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 whitespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.MergeSmartFieldArchive.whitespace)
}
inline std::string* MergeSmartFieldArchive::mutable_whitespace() {
  // @@protoc_insertion_point(field_mutable:TSWP.MergeSmartFieldArchive.whitespace)
  return _internal_mutable_whitespace();
}
inline const std::string& MergeSmartFieldArchive::_internal_whitespace() const {
  return whitespace_.Get();
}
inline void MergeSmartFieldArchive::_internal_set_whitespace(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  whitespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* MergeSmartFieldArchive::_internal_mutable_whitespace() {
  _has_bits_[0] |= 0x00000008u;
  return whitespace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MergeSmartFieldArchive::release_whitespace() {
  // @@protoc_insertion_point(field_release:TSWP.MergeSmartFieldArchive.whitespace)
  if (!_internal_has_whitespace()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return whitespace_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MergeSmartFieldArchive::set_allocated_whitespace(std::string* whitespace) {
  if (whitespace != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  whitespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whitespace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeSmartFieldArchive.whitespace)
}

// optional string guid = 8;
inline bool MergeSmartFieldArchive::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MergeSmartFieldArchive::has_guid() const {
  return _internal_has_guid();
}
inline void MergeSmartFieldArchive::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& MergeSmartFieldArchive::guid() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeSmartFieldArchive.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void MergeSmartFieldArchive::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.MergeSmartFieldArchive.guid)
}
inline std::string* MergeSmartFieldArchive::mutable_guid() {
  // @@protoc_insertion_point(field_mutable:TSWP.MergeSmartFieldArchive.guid)
  return _internal_mutable_guid();
}
inline const std::string& MergeSmartFieldArchive::_internal_guid() const {
  return guid_.Get();
}
inline void MergeSmartFieldArchive::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* MergeSmartFieldArchive::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000010u;
  return guid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MergeSmartFieldArchive::release_guid() {
  // @@protoc_insertion_point(field_release:TSWP.MergeSmartFieldArchive.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return guid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MergeSmartFieldArchive::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeSmartFieldArchive.guid)
}

// optional string table_field = 9;
inline bool MergeSmartFieldArchive::_internal_has_table_field() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MergeSmartFieldArchive::has_table_field() const {
  return _internal_has_table_field();
}
inline void MergeSmartFieldArchive::clear_table_field() {
  table_field_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& MergeSmartFieldArchive::table_field() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeSmartFieldArchive.table_field)
  return _internal_table_field();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void MergeSmartFieldArchive::set_table_field(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 table_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.MergeSmartFieldArchive.table_field)
}
inline std::string* MergeSmartFieldArchive::mutable_table_field() {
  // @@protoc_insertion_point(field_mutable:TSWP.MergeSmartFieldArchive.table_field)
  return _internal_mutable_table_field();
}
inline const std::string& MergeSmartFieldArchive::_internal_table_field() const {
  return table_field_.Get();
}
inline void MergeSmartFieldArchive::_internal_set_table_field(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  table_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* MergeSmartFieldArchive::_internal_mutable_table_field() {
  _has_bits_[0] |= 0x00000020u;
  return table_field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MergeSmartFieldArchive::release_table_field() {
  // @@protoc_insertion_point(field_release:TSWP.MergeSmartFieldArchive.table_field)
  if (!_internal_has_table_field()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return table_field_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MergeSmartFieldArchive::set_allocated_table_field(std::string* table_field) {
  if (table_field != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  table_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeSmartFieldArchive.table_field)
}

// -------------------------------------------------------------------

// TOCSmartFieldArchive_TOCEntry

// optional string bookmark_name = 1;
inline bool TOCSmartFieldArchive_TOCEntry::_internal_has_bookmark_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TOCSmartFieldArchive_TOCEntry::has_bookmark_name() const {
  return _internal_has_bookmark_name();
}
inline void TOCSmartFieldArchive_TOCEntry::clear_bookmark_name() {
  bookmark_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TOCSmartFieldArchive_TOCEntry::bookmark_name() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSmartFieldArchive.TOCEntry.bookmark_name)
  return _internal_bookmark_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TOCSmartFieldArchive_TOCEntry::set_bookmark_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 bookmark_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.TOCSmartFieldArchive.TOCEntry.bookmark_name)
}
inline std::string* TOCSmartFieldArchive_TOCEntry::mutable_bookmark_name() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCSmartFieldArchive.TOCEntry.bookmark_name)
  return _internal_mutable_bookmark_name();
}
inline const std::string& TOCSmartFieldArchive_TOCEntry::_internal_bookmark_name() const {
  return bookmark_name_.Get();
}
inline void TOCSmartFieldArchive_TOCEntry::_internal_set_bookmark_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bookmark_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TOCSmartFieldArchive_TOCEntry::_internal_mutable_bookmark_name() {
  _has_bits_[0] |= 0x00000001u;
  return bookmark_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TOCSmartFieldArchive_TOCEntry::release_bookmark_name() {
  // @@protoc_insertion_point(field_release:TSWP.TOCSmartFieldArchive.TOCEntry.bookmark_name)
  if (!_internal_has_bookmark_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bookmark_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TOCSmartFieldArchive_TOCEntry::set_allocated_bookmark_name(std::string* bookmark_name) {
  if (bookmark_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bookmark_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bookmark_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCSmartFieldArchive.TOCEntry.bookmark_name)
}

// optional .TSP.Reference target_style = 2;
inline bool TOCSmartFieldArchive_TOCEntry::_internal_has_target_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_style_ != nullptr);
  return value;
}
inline bool TOCSmartFieldArchive_TOCEntry::has_target_style() const {
  return _internal_has_target_style();
}
inline const ::TSP::Reference& TOCSmartFieldArchive_TOCEntry::_internal_target_style() const {
  const ::TSP::Reference* p = target_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TOCSmartFieldArchive_TOCEntry::target_style() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSmartFieldArchive.TOCEntry.target_style)
  return _internal_target_style();
}
inline void TOCSmartFieldArchive_TOCEntry::unsafe_arena_set_allocated_target_style(
    ::TSP::Reference* target_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_style_);
  }
  target_style_ = target_style;
  if (target_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCSmartFieldArchive.TOCEntry.target_style)
}
inline ::TSP::Reference* TOCSmartFieldArchive_TOCEntry::release_target_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = target_style_;
  target_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TOCSmartFieldArchive_TOCEntry::unsafe_arena_release_target_style() {
  // @@protoc_insertion_point(field_release:TSWP.TOCSmartFieldArchive.TOCEntry.target_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = target_style_;
  target_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TOCSmartFieldArchive_TOCEntry::_internal_mutable_target_style() {
  _has_bits_[0] |= 0x00000002u;
  if (target_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    target_style_ = p;
  }
  return target_style_;
}
inline ::TSP::Reference* TOCSmartFieldArchive_TOCEntry::mutable_target_style() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCSmartFieldArchive.TOCEntry.target_style)
  return _internal_mutable_target_style();
}
inline void TOCSmartFieldArchive_TOCEntry::set_allocated_target_style(::TSP::Reference* target_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_style_);
  }
  if (target_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_style)->GetArena();
    if (message_arena != submessage_arena) {
      target_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_style_ = target_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCSmartFieldArchive.TOCEntry.target_style)
}

// optional .TSP.Range range = 3;
inline bool TOCSmartFieldArchive_TOCEntry::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool TOCSmartFieldArchive_TOCEntry::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& TOCSmartFieldArchive_TOCEntry::_internal_range() const {
  const ::TSP::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& TOCSmartFieldArchive_TOCEntry::range() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSmartFieldArchive.TOCEntry.range)
  return _internal_range();
}
inline void TOCSmartFieldArchive_TOCEntry::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCSmartFieldArchive.TOCEntry.range)
}
inline ::TSP::Range* TOCSmartFieldArchive_TOCEntry::release_range() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* TOCSmartFieldArchive_TOCEntry::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TSWP.TOCSmartFieldArchive.TOCEntry.range)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::TSP::Range* TOCSmartFieldArchive_TOCEntry::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000004u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::TSP::Range* TOCSmartFieldArchive_TOCEntry::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCSmartFieldArchive.TOCEntry.range)
  return _internal_mutable_range();
}
inline void TOCSmartFieldArchive_TOCEntry::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCSmartFieldArchive.TOCEntry.range)
}

// -------------------------------------------------------------------

// TOCSmartFieldArchive

// optional .TSWP.PlaceholderSmartFieldArchive super = 1;
inline bool TOCSmartFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TOCSmartFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void TOCSmartFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::PlaceholderSmartFieldArchive& TOCSmartFieldArchive::_internal_super() const {
  const ::TSWP::PlaceholderSmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PlaceholderSmartFieldArchive&>(
      ::TSWP::_PlaceholderSmartFieldArchive_default_instance_);
}
inline const ::TSWP::PlaceholderSmartFieldArchive& TOCSmartFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSmartFieldArchive.super)
  return _internal_super();
}
inline void TOCSmartFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::PlaceholderSmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TOCSmartFieldArchive.super)
}
inline ::TSWP::PlaceholderSmartFieldArchive* TOCSmartFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* TOCSmartFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.TOCSmartFieldArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::PlaceholderSmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::PlaceholderSmartFieldArchive* TOCSmartFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PlaceholderSmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::PlaceholderSmartFieldArchive* TOCSmartFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCSmartFieldArchive.super)
  return _internal_mutable_super();
}
inline void TOCSmartFieldArchive::set_allocated_super(::TSWP::PlaceholderSmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TOCSmartFieldArchive.super)
}

// repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
inline int TOCSmartFieldArchive::_internal_toc_entries_size() const {
  return toc_entries_.size();
}
inline int TOCSmartFieldArchive::toc_entries_size() const {
  return _internal_toc_entries_size();
}
inline void TOCSmartFieldArchive::clear_toc_entries() {
  toc_entries_.Clear();
}
inline ::TSWP::TOCSmartFieldArchive_TOCEntry* TOCSmartFieldArchive::mutable_toc_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.TOCSmartFieldArchive.toc_entries)
  return toc_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSmartFieldArchive_TOCEntry >*
TOCSmartFieldArchive::mutable_toc_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.TOCSmartFieldArchive.toc_entries)
  return &toc_entries_;
}
inline const ::TSWP::TOCSmartFieldArchive_TOCEntry& TOCSmartFieldArchive::_internal_toc_entries(int index) const {
  return toc_entries_.Get(index);
}
inline const ::TSWP::TOCSmartFieldArchive_TOCEntry& TOCSmartFieldArchive::toc_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.TOCSmartFieldArchive.toc_entries)
  return _internal_toc_entries(index);
}
inline ::TSWP::TOCSmartFieldArchive_TOCEntry* TOCSmartFieldArchive::_internal_add_toc_entries() {
  return toc_entries_.Add();
}
inline ::TSWP::TOCSmartFieldArchive_TOCEntry* TOCSmartFieldArchive::add_toc_entries() {
  // @@protoc_insertion_point(field_add:TSWP.TOCSmartFieldArchive.toc_entries)
  return _internal_add_toc_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TOCSmartFieldArchive_TOCEntry >&
TOCSmartFieldArchive::toc_entries() const {
  // @@protoc_insertion_point(field_list:TSWP.TOCSmartFieldArchive.toc_entries)
  return toc_entries_;
}

// -------------------------------------------------------------------

// RubyFieldArchive

// optional .TSWP.SmartFieldArchive super = 1;
inline bool RubyFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool RubyFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void RubyFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::SmartFieldArchive& RubyFieldArchive::_internal_super() const {
  const ::TSWP::SmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SmartFieldArchive&>(
      ::TSWP::_SmartFieldArchive_default_instance_);
}
inline const ::TSWP::SmartFieldArchive& RubyFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.RubyFieldArchive.super)
  return _internal_super();
}
inline void RubyFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RubyFieldArchive.super)
}
inline ::TSWP::SmartFieldArchive* RubyFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SmartFieldArchive* RubyFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.RubyFieldArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SmartFieldArchive* RubyFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SmartFieldArchive* RubyFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.RubyFieldArchive.super)
  return _internal_mutable_super();
}
inline void RubyFieldArchive::set_allocated_super(::TSWP::SmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RubyFieldArchive.super)
}

// optional string ruby_text = 2;
inline bool RubyFieldArchive::_internal_has_ruby_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RubyFieldArchive::has_ruby_text() const {
  return _internal_has_ruby_text();
}
inline void RubyFieldArchive::clear_ruby_text() {
  ruby_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RubyFieldArchive::ruby_text() const {
  // @@protoc_insertion_point(field_get:TSWP.RubyFieldArchive.ruby_text)
  return _internal_ruby_text();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void RubyFieldArchive::set_ruby_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ruby_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.RubyFieldArchive.ruby_text)
}
inline std::string* RubyFieldArchive::mutable_ruby_text() {
  // @@protoc_insertion_point(field_mutable:TSWP.RubyFieldArchive.ruby_text)
  return _internal_mutable_ruby_text();
}
inline const std::string& RubyFieldArchive::_internal_ruby_text() const {
  return ruby_text_.Get();
}
inline void RubyFieldArchive::_internal_set_ruby_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ruby_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* RubyFieldArchive::_internal_mutable_ruby_text() {
  _has_bits_[0] |= 0x00000001u;
  return ruby_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RubyFieldArchive::release_ruby_text() {
  // @@protoc_insertion_point(field_release:TSWP.RubyFieldArchive.ruby_text)
  if (!_internal_has_ruby_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ruby_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RubyFieldArchive::set_allocated_ruby_text(std::string* ruby_text) {
  if (ruby_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ruby_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ruby_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.RubyFieldArchive.ruby_text)
}

// -------------------------------------------------------------------

// TateChuYokoFieldArchive

// optional .TSWP.SmartFieldArchive super = 1;
inline bool TateChuYokoFieldArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TateChuYokoFieldArchive::has_super() const {
  return _internal_has_super();
}
inline void TateChuYokoFieldArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::SmartFieldArchive& TateChuYokoFieldArchive::_internal_super() const {
  const ::TSWP::SmartFieldArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SmartFieldArchive&>(
      ::TSWP::_SmartFieldArchive_default_instance_);
}
inline const ::TSWP::SmartFieldArchive& TateChuYokoFieldArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.TateChuYokoFieldArchive.super)
  return _internal_super();
}
inline void TateChuYokoFieldArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SmartFieldArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TateChuYokoFieldArchive.super)
}
inline ::TSWP::SmartFieldArchive* TateChuYokoFieldArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SmartFieldArchive* TateChuYokoFieldArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.TateChuYokoFieldArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::SmartFieldArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SmartFieldArchive* TateChuYokoFieldArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SmartFieldArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SmartFieldArchive* TateChuYokoFieldArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.TateChuYokoFieldArchive.super)
  return _internal_mutable_super();
}
inline void TateChuYokoFieldArchive::set_allocated_super(::TSWP::SmartFieldArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TateChuYokoFieldArchive.super)
}

// -------------------------------------------------------------------

// ChangeArchive

// optional .TSWP.ChangeArchive.ChangeKind kind = 1;
inline bool ChangeArchive::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChangeArchive::has_kind() const {
  return _internal_has_kind();
}
inline void ChangeArchive::clear_kind() {
  kind_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSWP::ChangeArchive_ChangeKind ChangeArchive::_internal_kind() const {
  return static_cast< ::TSWP::ChangeArchive_ChangeKind >(kind_);
}
inline ::TSWP::ChangeArchive_ChangeKind ChangeArchive::kind() const {
  // @@protoc_insertion_point(field_get:TSWP.ChangeArchive.kind)
  return _internal_kind();
}
inline void ChangeArchive::_internal_set_kind(::TSWP::ChangeArchive_ChangeKind value) {
  assert(::TSWP::ChangeArchive_ChangeKind_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  kind_ = value;
}
inline void ChangeArchive::set_kind(::TSWP::ChangeArchive_ChangeKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TSWP.ChangeArchive.kind)
}

// optional .TSP.Reference session = 2;
inline bool ChangeArchive::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || session_ != nullptr);
  return value;
}
inline bool ChangeArchive::has_session() const {
  return _internal_has_session();
}
inline const ::TSP::Reference& ChangeArchive::_internal_session() const {
  const ::TSP::Reference* p = session_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangeArchive::session() const {
  // @@protoc_insertion_point(field_get:TSWP.ChangeArchive.session)
  return _internal_session();
}
inline void ChangeArchive::unsafe_arena_set_allocated_session(
    ::TSP::Reference* session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_);
  }
  session_ = session;
  if (session) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ChangeArchive.session)
}
inline ::TSP::Reference* ChangeArchive::release_session() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = session_;
  session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangeArchive::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_release:TSWP.ChangeArchive.session)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = session_;
  session_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangeArchive::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000002u;
  if (session_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    session_ = p;
  }
  return session_;
}
inline ::TSP::Reference* ChangeArchive::mutable_session() {
  // @@protoc_insertion_point(field_mutable:TSWP.ChangeArchive.session)
  return _internal_mutable_session();
}
inline void ChangeArchive::set_allocated_session(::TSP::Reference* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_);
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session)->GetArena();
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ChangeArchive.session)
}

// optional .TSP.Date date = 3;
inline bool ChangeArchive::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || date_ != nullptr);
  return value;
}
inline bool ChangeArchive::has_date() const {
  return _internal_has_date();
}
inline const ::TSP::Date& ChangeArchive::_internal_date() const {
  const ::TSP::Date* p = date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& ChangeArchive::date() const {
  // @@protoc_insertion_point(field_get:TSWP.ChangeArchive.date)
  return _internal_date();
}
inline void ChangeArchive::unsafe_arena_set_allocated_date(
    ::TSP::Date* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ChangeArchive.date)
}
inline ::TSP::Date* ChangeArchive::release_date() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Date* ChangeArchive::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:TSWP.ChangeArchive.date)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::TSP::Date* ChangeArchive::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000004u;
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArena());
    date_ = p;
  }
  return date_;
}
inline ::TSP::Date* ChangeArchive::mutable_date() {
  // @@protoc_insertion_point(field_mutable:TSWP.ChangeArchive.date)
  return _internal_mutable_date();
}
inline void ChangeArchive::set_allocated_date(::TSP::Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ChangeArchive.date)
}

// optional string text_attribute_uuid_string = 4;
inline bool ChangeArchive::_internal_has_text_attribute_uuid_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeArchive::has_text_attribute_uuid_string() const {
  return _internal_has_text_attribute_uuid_string();
}
inline void ChangeArchive::clear_text_attribute_uuid_string() {
  text_attribute_uuid_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeArchive::text_attribute_uuid_string() const {
  // @@protoc_insertion_point(field_get:TSWP.ChangeArchive.text_attribute_uuid_string)
  return _internal_text_attribute_uuid_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChangeArchive::set_text_attribute_uuid_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSWP.ChangeArchive.text_attribute_uuid_string)
}
inline std::string* ChangeArchive::mutable_text_attribute_uuid_string() {
  // @@protoc_insertion_point(field_mutable:TSWP.ChangeArchive.text_attribute_uuid_string)
  return _internal_mutable_text_attribute_uuid_string();
}
inline const std::string& ChangeArchive::_internal_text_attribute_uuid_string() const {
  return text_attribute_uuid_string_.Get();
}
inline void ChangeArchive::_internal_set_text_attribute_uuid_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChangeArchive::_internal_mutable_text_attribute_uuid_string() {
  _has_bits_[0] |= 0x00000001u;
  return text_attribute_uuid_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChangeArchive::release_text_attribute_uuid_string() {
  // @@protoc_insertion_point(field_release:TSWP.ChangeArchive.text_attribute_uuid_string)
  if (!_internal_has_text_attribute_uuid_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_attribute_uuid_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangeArchive::set_allocated_text_attribute_uuid_string(std::string* text_attribute_uuid_string) {
  if (text_attribute_uuid_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_attribute_uuid_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_attribute_uuid_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ChangeArchive.text_attribute_uuid_string)
}

// -------------------------------------------------------------------

// ChangeSessionArchive

// optional uint32 session_uid = 1;
inline bool ChangeSessionArchive::_internal_has_session_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChangeSessionArchive::has_session_uid() const {
  return _internal_has_session_uid();
}
inline void ChangeSessionArchive::clear_session_uid() {
  session_uid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChangeSessionArchive::_internal_session_uid() const {
  return session_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChangeSessionArchive::session_uid() const {
  // @@protoc_insertion_point(field_get:TSWP.ChangeSessionArchive.session_uid)
  return _internal_session_uid();
}
inline void ChangeSessionArchive::_internal_set_session_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  session_uid_ = value;
}
inline void ChangeSessionArchive::set_session_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_uid(value);
  // @@protoc_insertion_point(field_set:TSWP.ChangeSessionArchive.session_uid)
}

// optional .TSP.Reference author = 2;
inline bool ChangeSessionArchive::_internal_has_author() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || author_ != nullptr);
  return value;
}
inline bool ChangeSessionArchive::has_author() const {
  return _internal_has_author();
}
inline const ::TSP::Reference& ChangeSessionArchive::_internal_author() const {
  const ::TSP::Reference* p = author_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangeSessionArchive::author() const {
  // @@protoc_insertion_point(field_get:TSWP.ChangeSessionArchive.author)
  return _internal_author();
}
inline void ChangeSessionArchive::unsafe_arena_set_allocated_author(
    ::TSP::Reference* author) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  author_ = author;
  if (author) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ChangeSessionArchive.author)
}
inline ::TSP::Reference* ChangeSessionArchive::release_author() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = author_;
  author_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangeSessionArchive::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:TSWP.ChangeSessionArchive.author)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangeSessionArchive::_internal_mutable_author() {
  _has_bits_[0] |= 0x00000001u;
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    author_ = p;
  }
  return author_;
}
inline ::TSP::Reference* ChangeSessionArchive::mutable_author() {
  // @@protoc_insertion_point(field_mutable:TSWP.ChangeSessionArchive.author)
  return _internal_mutable_author();
}
inline void ChangeSessionArchive::set_allocated_author(::TSP::Reference* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author)->GetArena();
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ChangeSessionArchive.author)
}

// optional .TSP.Date date = 3;
inline bool ChangeSessionArchive::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || date_ != nullptr);
  return value;
}
inline bool ChangeSessionArchive::has_date() const {
  return _internal_has_date();
}
inline const ::TSP::Date& ChangeSessionArchive::_internal_date() const {
  const ::TSP::Date* p = date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& ChangeSessionArchive::date() const {
  // @@protoc_insertion_point(field_get:TSWP.ChangeSessionArchive.date)
  return _internal_date();
}
inline void ChangeSessionArchive::unsafe_arena_set_allocated_date(
    ::TSP::Date* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ChangeSessionArchive.date)
}
inline ::TSP::Date* ChangeSessionArchive::release_date() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Date* ChangeSessionArchive::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:TSWP.ChangeSessionArchive.date)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::TSP::Date* ChangeSessionArchive::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000002u;
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArena());
    date_ = p;
  }
  return date_;
}
inline ::TSP::Date* ChangeSessionArchive::mutable_date() {
  // @@protoc_insertion_point(field_mutable:TSWP.ChangeSessionArchive.date)
  return _internal_mutable_date();
}
inline void ChangeSessionArchive::set_allocated_date(::TSP::Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ChangeSessionArchive.date)
}

// -------------------------------------------------------------------

// SectionPlaceholderArchive

// optional .TSP.Reference parent_storage = 1;
inline bool SectionPlaceholderArchive::_internal_has_parent_storage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || parent_storage_ != nullptr);
  return value;
}
inline bool SectionPlaceholderArchive::has_parent_storage() const {
  return _internal_has_parent_storage();
}
inline const ::TSP::Reference& SectionPlaceholderArchive::_internal_parent_storage() const {
  const ::TSP::Reference* p = parent_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionPlaceholderArchive::parent_storage() const {
  // @@protoc_insertion_point(field_get:TSWP.SectionPlaceholderArchive.parent_storage)
  return _internal_parent_storage();
}
inline void SectionPlaceholderArchive::unsafe_arena_set_allocated_parent_storage(
    ::TSP::Reference* parent_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_storage_);
  }
  parent_storage_ = parent_storage;
  if (parent_storage) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SectionPlaceholderArchive.parent_storage)
}
inline ::TSP::Reference* SectionPlaceholderArchive::release_parent_storage() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = parent_storage_;
  parent_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SectionPlaceholderArchive::unsafe_arena_release_parent_storage() {
  // @@protoc_insertion_point(field_release:TSWP.SectionPlaceholderArchive.parent_storage)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = parent_storage_;
  parent_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionPlaceholderArchive::_internal_mutable_parent_storage() {
  _has_bits_[0] |= 0x00000001u;
  if (parent_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    parent_storage_ = p;
  }
  return parent_storage_;
}
inline ::TSP::Reference* SectionPlaceholderArchive::mutable_parent_storage() {
  // @@protoc_insertion_point(field_mutable:TSWP.SectionPlaceholderArchive.parent_storage)
  return _internal_mutable_parent_storage();
}
inline void SectionPlaceholderArchive::set_allocated_parent_storage(::TSP::Reference* parent_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_storage_);
  }
  if (parent_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_storage)->GetArena();
    if (message_arena != submessage_arena) {
      parent_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parent_storage_ = parent_storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SectionPlaceholderArchive.parent_storage)
}

// -------------------------------------------------------------------

// HyperlinkSelectionArchive

// -------------------------------------------------------------------

// FlowInfoArchive

// optional .TSP.Reference text_storage = 1;
inline bool FlowInfoArchive::_internal_has_text_storage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || text_storage_ != nullptr);
  return value;
}
inline bool FlowInfoArchive::has_text_storage() const {
  return _internal_has_text_storage();
}
inline const ::TSP::Reference& FlowInfoArchive::_internal_text_storage() const {
  const ::TSP::Reference* p = text_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FlowInfoArchive::text_storage() const {
  // @@protoc_insertion_point(field_get:TSWP.FlowInfoArchive.text_storage)
  return _internal_text_storage();
}
inline void FlowInfoArchive::unsafe_arena_set_allocated_text_storage(
    ::TSP::Reference* text_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_storage_);
  }
  text_storage_ = text_storage;
  if (text_storage) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.FlowInfoArchive.text_storage)
}
inline ::TSP::Reference* FlowInfoArchive::release_text_storage() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = text_storage_;
  text_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* FlowInfoArchive::unsafe_arena_release_text_storage() {
  // @@protoc_insertion_point(field_release:TSWP.FlowInfoArchive.text_storage)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = text_storage_;
  text_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FlowInfoArchive::_internal_mutable_text_storage() {
  _has_bits_[0] |= 0x00000001u;
  if (text_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    text_storage_ = p;
  }
  return text_storage_;
}
inline ::TSP::Reference* FlowInfoArchive::mutable_text_storage() {
  // @@protoc_insertion_point(field_mutable:TSWP.FlowInfoArchive.text_storage)
  return _internal_mutable_text_storage();
}
inline void FlowInfoArchive::set_allocated_text_storage(::TSP::Reference* text_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_storage_);
  }
  if (text_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_storage)->GetArena();
    if (message_arena != submessage_arena) {
      text_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_storage_ = text_storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.FlowInfoArchive.text_storage)
}

// repeated .TSP.Reference textboxes = 2;
inline int FlowInfoArchive::_internal_textboxes_size() const {
  return textboxes_.size();
}
inline int FlowInfoArchive::textboxes_size() const {
  return _internal_textboxes_size();
}
inline ::TSP::Reference* FlowInfoArchive::mutable_textboxes(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.FlowInfoArchive.textboxes)
  return textboxes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
FlowInfoArchive::mutable_textboxes() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.FlowInfoArchive.textboxes)
  return &textboxes_;
}
inline const ::TSP::Reference& FlowInfoArchive::_internal_textboxes(int index) const {
  return textboxes_.Get(index);
}
inline const ::TSP::Reference& FlowInfoArchive::textboxes(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.FlowInfoArchive.textboxes)
  return _internal_textboxes(index);
}
inline ::TSP::Reference* FlowInfoArchive::_internal_add_textboxes() {
  return textboxes_.Add();
}
inline ::TSP::Reference* FlowInfoArchive::add_textboxes() {
  // @@protoc_insertion_point(field_add:TSWP.FlowInfoArchive.textboxes)
  return _internal_add_textboxes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
FlowInfoArchive::textboxes() const {
  // @@protoc_insertion_point(field_list:TSWP.FlowInfoArchive.textboxes)
  return textboxes_;
}

// optional uint32 user_interface_identifier = 3;
inline bool FlowInfoArchive::_internal_has_user_interface_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FlowInfoArchive::has_user_interface_identifier() const {
  return _internal_has_user_interface_identifier();
}
inline void FlowInfoArchive::clear_user_interface_identifier() {
  user_interface_identifier_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowInfoArchive::_internal_user_interface_identifier() const {
  return user_interface_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowInfoArchive::user_interface_identifier() const {
  // @@protoc_insertion_point(field_get:TSWP.FlowInfoArchive.user_interface_identifier)
  return _internal_user_interface_identifier();
}
inline void FlowInfoArchive::_internal_set_user_interface_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_interface_identifier_ = value;
}
inline void FlowInfoArchive::set_user_interface_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_interface_identifier(value);
  // @@protoc_insertion_point(field_set:TSWP.FlowInfoArchive.user_interface_identifier)
}

// -------------------------------------------------------------------

// FlowInfoContainerArchive

// repeated .TSP.Reference flow_infos = 1;
inline int FlowInfoContainerArchive::_internal_flow_infos_size() const {
  return flow_infos_.size();
}
inline int FlowInfoContainerArchive::flow_infos_size() const {
  return _internal_flow_infos_size();
}
inline ::TSP::Reference* FlowInfoContainerArchive::mutable_flow_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.FlowInfoContainerArchive.flow_infos)
  return flow_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
FlowInfoContainerArchive::mutable_flow_infos() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.FlowInfoContainerArchive.flow_infos)
  return &flow_infos_;
}
inline const ::TSP::Reference& FlowInfoContainerArchive::_internal_flow_infos(int index) const {
  return flow_infos_.Get(index);
}
inline const ::TSP::Reference& FlowInfoContainerArchive::flow_infos(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.FlowInfoContainerArchive.flow_infos)
  return _internal_flow_infos(index);
}
inline ::TSP::Reference* FlowInfoContainerArchive::_internal_add_flow_infos() {
  return flow_infos_.Add();
}
inline ::TSP::Reference* FlowInfoContainerArchive::add_flow_infos() {
  // @@protoc_insertion_point(field_add:TSWP.FlowInfoContainerArchive.flow_infos)
  return _internal_add_flow_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
FlowInfoContainerArchive::flow_infos() const {
  // @@protoc_insertion_point(field_list:TSWP.FlowInfoContainerArchive.flow_infos)
  return flow_infos_;
}

// optional uint32 next_user_interface_identifier = 2;
inline bool FlowInfoContainerArchive::_internal_has_next_user_interface_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FlowInfoContainerArchive::has_next_user_interface_identifier() const {
  return _internal_has_next_user_interface_identifier();
}
inline void FlowInfoContainerArchive::clear_next_user_interface_identifier() {
  next_user_interface_identifier_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowInfoContainerArchive::_internal_next_user_interface_identifier() const {
  return next_user_interface_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowInfoContainerArchive::next_user_interface_identifier() const {
  // @@protoc_insertion_point(field_get:TSWP.FlowInfoContainerArchive.next_user_interface_identifier)
  return _internal_next_user_interface_identifier();
}
inline void FlowInfoContainerArchive::_internal_set_next_user_interface_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  next_user_interface_identifier_ = value;
}
inline void FlowInfoContainerArchive::set_next_user_interface_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_user_interface_identifier(value);
  // @@protoc_insertion_point(field_set:TSWP.FlowInfoContainerArchive.next_user_interface_identifier)
}

// -------------------------------------------------------------------

// DropCapArchive

// optional .TSWP.DropCapArchive.DropCapType type = 1 [default = TSWPDropCapTypeText];
inline bool DropCapArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DropCapArchive::has_type() const {
  return _internal_has_type();
}
inline void DropCapArchive::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::TSWP::DropCapArchive_DropCapType DropCapArchive::_internal_type() const {
  return static_cast< ::TSWP::DropCapArchive_DropCapType >(type_);
}
inline ::TSWP::DropCapArchive_DropCapType DropCapArchive::type() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.type)
  return _internal_type();
}
inline void DropCapArchive::_internal_set_type(::TSWP::DropCapArchive_DropCapType value) {
  assert(::TSWP::DropCapArchive_DropCapType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void DropCapArchive::set_type(::TSWP::DropCapArchive_DropCapType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.type)
}

// optional uint32 number_of_lines = 2 [default = 3];
inline bool DropCapArchive::_internal_has_number_of_lines() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DropCapArchive::has_number_of_lines() const {
  return _internal_has_number_of_lines();
}
inline void DropCapArchive::clear_number_of_lines() {
  number_of_lines_ = 3u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropCapArchive::_internal_number_of_lines() const {
  return number_of_lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropCapArchive::number_of_lines() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.number_of_lines)
  return _internal_number_of_lines();
}
inline void DropCapArchive::_internal_set_number_of_lines(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  number_of_lines_ = value;
}
inline void DropCapArchive::set_number_of_lines(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_lines(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.number_of_lines)
}

// optional uint32 number_of_raised_lines = 3 [default = 0];
inline bool DropCapArchive::_internal_has_number_of_raised_lines() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DropCapArchive::has_number_of_raised_lines() const {
  return _internal_has_number_of_raised_lines();
}
inline void DropCapArchive::clear_number_of_raised_lines() {
  number_of_raised_lines_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropCapArchive::_internal_number_of_raised_lines() const {
  return number_of_raised_lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropCapArchive::number_of_raised_lines() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.number_of_raised_lines)
  return _internal_number_of_raised_lines();
}
inline void DropCapArchive::_internal_set_number_of_raised_lines(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  number_of_raised_lines_ = value;
}
inline void DropCapArchive::set_number_of_raised_lines(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_raised_lines(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.number_of_raised_lines)
}

// optional float deprecated_outdent = 4;
inline bool DropCapArchive::_internal_has_deprecated_outdent() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DropCapArchive::has_deprecated_outdent() const {
  return _internal_has_deprecated_outdent();
}
inline void DropCapArchive::clear_deprecated_outdent() {
  deprecated_outdent_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float DropCapArchive::_internal_deprecated_outdent() const {
  return deprecated_outdent_;
}
inline float DropCapArchive::deprecated_outdent() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.deprecated_outdent)
  return _internal_deprecated_outdent();
}
inline void DropCapArchive::_internal_set_deprecated_outdent(float value) {
  _has_bits_[0] |= 0x00000004u;
  deprecated_outdent_ = value;
}
inline void DropCapArchive::set_deprecated_outdent(float value) {
  _internal_set_deprecated_outdent(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.deprecated_outdent)
}

// optional double outdent = 11 [default = 0];
inline bool DropCapArchive::_internal_has_outdent() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DropCapArchive::has_outdent() const {
  return _internal_has_outdent();
}
inline void DropCapArchive::clear_outdent() {
  outdent_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double DropCapArchive::_internal_outdent() const {
  return outdent_;
}
inline double DropCapArchive::outdent() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.outdent)
  return _internal_outdent();
}
inline void DropCapArchive::_internal_set_outdent(double value) {
  _has_bits_[0] |= 0x00000100u;
  outdent_ = value;
}
inline void DropCapArchive::set_outdent(double value) {
  _internal_set_outdent(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.outdent)
}

// optional float deprecated_padding = 5;
inline bool DropCapArchive::_internal_has_deprecated_padding() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DropCapArchive::has_deprecated_padding() const {
  return _internal_has_deprecated_padding();
}
inline void DropCapArchive::clear_deprecated_padding() {
  deprecated_padding_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DropCapArchive::_internal_deprecated_padding() const {
  return deprecated_padding_;
}
inline float DropCapArchive::deprecated_padding() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.deprecated_padding)
  return _internal_deprecated_padding();
}
inline void DropCapArchive::_internal_set_deprecated_padding(float value) {
  _has_bits_[0] |= 0x00000008u;
  deprecated_padding_ = value;
}
inline void DropCapArchive::set_deprecated_padding(float value) {
  _internal_set_deprecated_padding(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.deprecated_padding)
}

// optional double padding = 12 [default = 0];
inline bool DropCapArchive::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DropCapArchive::has_padding() const {
  return _internal_has_padding();
}
inline void DropCapArchive::clear_padding() {
  padding_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double DropCapArchive::_internal_padding() const {
  return padding_;
}
inline double DropCapArchive::padding() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.padding)
  return _internal_padding();
}
inline void DropCapArchive::_internal_set_padding(double value) {
  _has_bits_[0] |= 0x00000200u;
  padding_ = value;
}
inline void DropCapArchive::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.padding)
}

// optional .TSWP.DropCapArchive.DropCapWrapType wrap_type = 6 [default = TSWPDropCapWrapTypeRectangular];
inline bool DropCapArchive::_internal_has_wrap_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DropCapArchive::has_wrap_type() const {
  return _internal_has_wrap_type();
}
inline void DropCapArchive::clear_wrap_type() {
  wrap_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::TSWP::DropCapArchive_DropCapWrapType DropCapArchive::_internal_wrap_type() const {
  return static_cast< ::TSWP::DropCapArchive_DropCapWrapType >(wrap_type_);
}
inline ::TSWP::DropCapArchive_DropCapWrapType DropCapArchive::wrap_type() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.wrap_type)
  return _internal_wrap_type();
}
inline void DropCapArchive::_internal_set_wrap_type(::TSWP::DropCapArchive_DropCapWrapType value) {
  assert(::TSWP::DropCapArchive_DropCapWrapType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  wrap_type_ = value;
}
inline void DropCapArchive::set_wrap_type(::TSWP::DropCapArchive_DropCapWrapType value) {
  _internal_set_wrap_type(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.wrap_type)
}

// optional bool shape_enabled = 7 [default = false];
inline bool DropCapArchive::_internal_has_shape_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DropCapArchive::has_shape_enabled() const {
  return _internal_has_shape_enabled();
}
inline void DropCapArchive::clear_shape_enabled() {
  shape_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool DropCapArchive::_internal_shape_enabled() const {
  return shape_enabled_;
}
inline bool DropCapArchive::shape_enabled() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.shape_enabled)
  return _internal_shape_enabled();
}
inline void DropCapArchive::_internal_set_shape_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  shape_enabled_ = value;
}
inline void DropCapArchive::set_shape_enabled(bool value) {
  _internal_set_shape_enabled(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.shape_enabled)
}

// optional float deprecated_corner_radius = 8;
inline bool DropCapArchive::_internal_has_deprecated_corner_radius() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DropCapArchive::has_deprecated_corner_radius() const {
  return _internal_has_deprecated_corner_radius();
}
inline void DropCapArchive::clear_deprecated_corner_radius() {
  deprecated_corner_radius_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float DropCapArchive::_internal_deprecated_corner_radius() const {
  return deprecated_corner_radius_;
}
inline float DropCapArchive::deprecated_corner_radius() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.deprecated_corner_radius)
  return _internal_deprecated_corner_radius();
}
inline void DropCapArchive::_internal_set_deprecated_corner_radius(float value) {
  _has_bits_[0] |= 0x00000040u;
  deprecated_corner_radius_ = value;
}
inline void DropCapArchive::set_deprecated_corner_radius(float value) {
  _internal_set_deprecated_corner_radius(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.deprecated_corner_radius)
}

// optional double corner_radius = 13 [default = 0];
inline bool DropCapArchive::_internal_has_corner_radius() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DropCapArchive::has_corner_radius() const {
  return _internal_has_corner_radius();
}
inline void DropCapArchive::clear_corner_radius() {
  corner_radius_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double DropCapArchive::_internal_corner_radius() const {
  return corner_radius_;
}
inline double DropCapArchive::corner_radius() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.corner_radius)
  return _internal_corner_radius();
}
inline void DropCapArchive::_internal_set_corner_radius(double value) {
  _has_bits_[0] |= 0x00000400u;
  corner_radius_ = value;
}
inline void DropCapArchive::set_corner_radius(double value) {
  _internal_set_corner_radius(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.corner_radius)
}

// optional float deprecated_character_scale = 9;
inline bool DropCapArchive::_internal_has_deprecated_character_scale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DropCapArchive::has_deprecated_character_scale() const {
  return _internal_has_deprecated_character_scale();
}
inline void DropCapArchive::clear_deprecated_character_scale() {
  deprecated_character_scale_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float DropCapArchive::_internal_deprecated_character_scale() const {
  return deprecated_character_scale_;
}
inline float DropCapArchive::deprecated_character_scale() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.deprecated_character_scale)
  return _internal_deprecated_character_scale();
}
inline void DropCapArchive::_internal_set_deprecated_character_scale(float value) {
  _has_bits_[0] |= 0x00000080u;
  deprecated_character_scale_ = value;
}
inline void DropCapArchive::set_deprecated_character_scale(float value) {
  _internal_set_deprecated_character_scale(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.deprecated_character_scale)
}

// optional double character_scale = 14 [default = 1];
inline bool DropCapArchive::_internal_has_character_scale() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DropCapArchive::has_character_scale() const {
  return _internal_has_character_scale();
}
inline void DropCapArchive::clear_character_scale() {
  character_scale_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline double DropCapArchive::_internal_character_scale() const {
  return character_scale_;
}
inline double DropCapArchive::character_scale() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.character_scale)
  return _internal_character_scale();
}
inline void DropCapArchive::_internal_set_character_scale(double value) {
  _has_bits_[0] |= 0x00002000u;
  character_scale_ = value;
}
inline void DropCapArchive::set_character_scale(double value) {
  _internal_set_character_scale(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.character_scale)
}

// optional uint32 number_of_characters = 10 [default = 1];
inline bool DropCapArchive::_internal_has_number_of_characters() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DropCapArchive::has_number_of_characters() const {
  return _internal_has_number_of_characters();
}
inline void DropCapArchive::clear_number_of_characters() {
  number_of_characters_ = 1u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropCapArchive::_internal_number_of_characters() const {
  return number_of_characters_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropCapArchive::number_of_characters() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapArchive.number_of_characters)
  return _internal_number_of_characters();
}
inline void DropCapArchive::_internal_set_number_of_characters(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  number_of_characters_ = value;
}
inline void DropCapArchive::set_number_of_characters(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_characters(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapArchive.number_of_characters)
}

// -------------------------------------------------------------------

// DropCapStylePropertiesArchive

// optional .TSWP.DropCapArchive drop_cap = 1;
inline bool DropCapStylePropertiesArchive::_internal_has_drop_cap() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || drop_cap_ != nullptr);
  return value;
}
inline bool DropCapStylePropertiesArchive::has_drop_cap() const {
  return _internal_has_drop_cap();
}
inline void DropCapStylePropertiesArchive::clear_drop_cap() {
  if (drop_cap_ != nullptr) drop_cap_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::DropCapArchive& DropCapStylePropertiesArchive::_internal_drop_cap() const {
  const ::TSWP::DropCapArchive* p = drop_cap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::DropCapArchive&>(
      ::TSWP::_DropCapArchive_default_instance_);
}
inline const ::TSWP::DropCapArchive& DropCapStylePropertiesArchive::drop_cap() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapStylePropertiesArchive.drop_cap)
  return _internal_drop_cap();
}
inline void DropCapStylePropertiesArchive::unsafe_arena_set_allocated_drop_cap(
    ::TSWP::DropCapArchive* drop_cap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_cap_);
  }
  drop_cap_ = drop_cap;
  if (drop_cap) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.DropCapStylePropertiesArchive.drop_cap)
}
inline ::TSWP::DropCapArchive* DropCapStylePropertiesArchive::release_drop_cap() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::DropCapArchive* temp = drop_cap_;
  drop_cap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::DropCapArchive* DropCapStylePropertiesArchive::unsafe_arena_release_drop_cap() {
  // @@protoc_insertion_point(field_release:TSWP.DropCapStylePropertiesArchive.drop_cap)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::DropCapArchive* temp = drop_cap_;
  drop_cap_ = nullptr;
  return temp;
}
inline ::TSWP::DropCapArchive* DropCapStylePropertiesArchive::_internal_mutable_drop_cap() {
  _has_bits_[0] |= 0x00000001u;
  if (drop_cap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::DropCapArchive>(GetArena());
    drop_cap_ = p;
  }
  return drop_cap_;
}
inline ::TSWP::DropCapArchive* DropCapStylePropertiesArchive::mutable_drop_cap() {
  // @@protoc_insertion_point(field_mutable:TSWP.DropCapStylePropertiesArchive.drop_cap)
  return _internal_mutable_drop_cap();
}
inline void DropCapStylePropertiesArchive::set_allocated_drop_cap(::TSWP::DropCapArchive* drop_cap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete drop_cap_;
  }
  if (drop_cap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(drop_cap);
    if (message_arena != submessage_arena) {
      drop_cap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_cap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  drop_cap_ = drop_cap;
  // @@protoc_insertion_point(field_set_allocated:TSWP.DropCapStylePropertiesArchive.drop_cap)
}

// optional .TSD.StrokeArchive drop_cap_shape_stroke = 3;
inline bool DropCapStylePropertiesArchive::_internal_has_drop_cap_shape_stroke() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || drop_cap_shape_stroke_ != nullptr);
  return value;
}
inline bool DropCapStylePropertiesArchive::has_drop_cap_shape_stroke() const {
  return _internal_has_drop_cap_shape_stroke();
}
inline const ::TSD::StrokeArchive& DropCapStylePropertiesArchive::_internal_drop_cap_shape_stroke() const {
  const ::TSD::StrokeArchive* p = drop_cap_shape_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& DropCapStylePropertiesArchive::drop_cap_shape_stroke() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_stroke)
  return _internal_drop_cap_shape_stroke();
}
inline void DropCapStylePropertiesArchive::unsafe_arena_set_allocated_drop_cap_shape_stroke(
    ::TSD::StrokeArchive* drop_cap_shape_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_cap_shape_stroke_);
  }
  drop_cap_shape_stroke_ = drop_cap_shape_stroke;
  if (drop_cap_shape_stroke) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_stroke)
}
inline ::TSD::StrokeArchive* DropCapStylePropertiesArchive::release_drop_cap_shape_stroke() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = drop_cap_shape_stroke_;
  drop_cap_shape_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* DropCapStylePropertiesArchive::unsafe_arena_release_drop_cap_shape_stroke() {
  // @@protoc_insertion_point(field_release:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_stroke)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = drop_cap_shape_stroke_;
  drop_cap_shape_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* DropCapStylePropertiesArchive::_internal_mutable_drop_cap_shape_stroke() {
  _has_bits_[0] |= 0x00000002u;
  if (drop_cap_shape_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    drop_cap_shape_stroke_ = p;
  }
  return drop_cap_shape_stroke_;
}
inline ::TSD::StrokeArchive* DropCapStylePropertiesArchive::mutable_drop_cap_shape_stroke() {
  // @@protoc_insertion_point(field_mutable:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_stroke)
  return _internal_mutable_drop_cap_shape_stroke();
}
inline void DropCapStylePropertiesArchive::set_allocated_drop_cap_shape_stroke(::TSD::StrokeArchive* drop_cap_shape_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_cap_shape_stroke_);
  }
  if (drop_cap_shape_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_cap_shape_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      drop_cap_shape_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_cap_shape_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  drop_cap_shape_stroke_ = drop_cap_shape_stroke;
  // @@protoc_insertion_point(field_set_allocated:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_stroke)
}

// optional bool drop_cap_shape_fill_null = 4;
inline bool DropCapStylePropertiesArchive::_internal_has_drop_cap_shape_fill_null() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DropCapStylePropertiesArchive::has_drop_cap_shape_fill_null() const {
  return _internal_has_drop_cap_shape_fill_null();
}
inline void DropCapStylePropertiesArchive::clear_drop_cap_shape_fill_null() {
  drop_cap_shape_fill_null_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DropCapStylePropertiesArchive::_internal_drop_cap_shape_fill_null() const {
  return drop_cap_shape_fill_null_;
}
inline bool DropCapStylePropertiesArchive::drop_cap_shape_fill_null() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_fill_null)
  return _internal_drop_cap_shape_fill_null();
}
inline void DropCapStylePropertiesArchive::_internal_set_drop_cap_shape_fill_null(bool value) {
  _has_bits_[0] |= 0x00000008u;
  drop_cap_shape_fill_null_ = value;
}
inline void DropCapStylePropertiesArchive::set_drop_cap_shape_fill_null(bool value) {
  _internal_set_drop_cap_shape_fill_null(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_fill_null)
}

// optional .TSD.FillArchive drop_cap_shape_fill = 5;
inline bool DropCapStylePropertiesArchive::_internal_has_drop_cap_shape_fill() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || drop_cap_shape_fill_ != nullptr);
  return value;
}
inline bool DropCapStylePropertiesArchive::has_drop_cap_shape_fill() const {
  return _internal_has_drop_cap_shape_fill();
}
inline const ::TSD::FillArchive& DropCapStylePropertiesArchive::_internal_drop_cap_shape_fill() const {
  const ::TSD::FillArchive* p = drop_cap_shape_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& DropCapStylePropertiesArchive::drop_cap_shape_fill() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_fill)
  return _internal_drop_cap_shape_fill();
}
inline void DropCapStylePropertiesArchive::unsafe_arena_set_allocated_drop_cap_shape_fill(
    ::TSD::FillArchive* drop_cap_shape_fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_cap_shape_fill_);
  }
  drop_cap_shape_fill_ = drop_cap_shape_fill;
  if (drop_cap_shape_fill) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_fill)
}
inline ::TSD::FillArchive* DropCapStylePropertiesArchive::release_drop_cap_shape_fill() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FillArchive* temp = drop_cap_shape_fill_;
  drop_cap_shape_fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* DropCapStylePropertiesArchive::unsafe_arena_release_drop_cap_shape_fill() {
  // @@protoc_insertion_point(field_release:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_fill)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FillArchive* temp = drop_cap_shape_fill_;
  drop_cap_shape_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* DropCapStylePropertiesArchive::_internal_mutable_drop_cap_shape_fill() {
  _has_bits_[0] |= 0x00000004u;
  if (drop_cap_shape_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    drop_cap_shape_fill_ = p;
  }
  return drop_cap_shape_fill_;
}
inline ::TSD::FillArchive* DropCapStylePropertiesArchive::mutable_drop_cap_shape_fill() {
  // @@protoc_insertion_point(field_mutable:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_fill)
  return _internal_mutable_drop_cap_shape_fill();
}
inline void DropCapStylePropertiesArchive::set_allocated_drop_cap_shape_fill(::TSD::FillArchive* drop_cap_shape_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_cap_shape_fill_);
  }
  if (drop_cap_shape_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_cap_shape_fill)->GetArena();
    if (message_arena != submessage_arena) {
      drop_cap_shape_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_cap_shape_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  drop_cap_shape_fill_ = drop_cap_shape_fill;
  // @@protoc_insertion_point(field_set_allocated:TSWP.DropCapStylePropertiesArchive.drop_cap_shape_fill)
}

// -------------------------------------------------------------------

// DropCapStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool DropCapStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DropCapStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& DropCapStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& DropCapStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapStyleArchive.super)
  return _internal_super();
}
inline void DropCapStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.DropCapStyleArchive.super)
}
inline ::TSS::StyleArchive* DropCapStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* DropCapStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.DropCapStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* DropCapStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* DropCapStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSWP.DropCapStyleArchive.super)
  return _internal_mutable_super();
}
inline void DropCapStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.DropCapStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool DropCapStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DropCapStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void DropCapStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropCapStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropCapStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapStyleArchive.override_count)
  return _internal_override_count();
}
inline void DropCapStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  override_count_ = value;
}
inline void DropCapStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:TSWP.DropCapStyleArchive.override_count)
}

// optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
inline bool DropCapStyleArchive::_internal_has_char_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || char_properties_ != nullptr);
  return value;
}
inline bool DropCapStyleArchive::has_char_properties() const {
  return _internal_has_char_properties();
}
inline void DropCapStyleArchive::clear_char_properties() {
  if (char_properties_ != nullptr) char_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSWP::CharacterStylePropertiesArchive& DropCapStyleArchive::_internal_char_properties() const {
  const ::TSWP::CharacterStylePropertiesArchive* p = char_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::CharacterStylePropertiesArchive&>(
      ::TSWP::_CharacterStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::CharacterStylePropertiesArchive& DropCapStyleArchive::char_properties() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapStyleArchive.char_properties)
  return _internal_char_properties();
}
inline void DropCapStyleArchive::unsafe_arena_set_allocated_char_properties(
    ::TSWP::CharacterStylePropertiesArchive* char_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_properties_);
  }
  char_properties_ = char_properties;
  if (char_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.DropCapStyleArchive.char_properties)
}
inline ::TSWP::CharacterStylePropertiesArchive* DropCapStyleArchive::release_char_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* DropCapStyleArchive::unsafe_arena_release_char_properties() {
  // @@protoc_insertion_point(field_release:TSWP.DropCapStyleArchive.char_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* DropCapStyleArchive::_internal_mutable_char_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (char_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::CharacterStylePropertiesArchive>(GetArena());
    char_properties_ = p;
  }
  return char_properties_;
}
inline ::TSWP::CharacterStylePropertiesArchive* DropCapStyleArchive::mutable_char_properties() {
  // @@protoc_insertion_point(field_mutable:TSWP.DropCapStyleArchive.char_properties)
  return _internal_mutable_char_properties();
}
inline void DropCapStyleArchive::set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete char_properties_;
  }
  if (char_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(char_properties);
    if (message_arena != submessage_arena) {
      char_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  char_properties_ = char_properties;
  // @@protoc_insertion_point(field_set_allocated:TSWP.DropCapStyleArchive.char_properties)
}

// optional .TSWP.DropCapStylePropertiesArchive drop_cap_properties = 12;
inline bool DropCapStyleArchive::_internal_has_drop_cap_properties() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || drop_cap_properties_ != nullptr);
  return value;
}
inline bool DropCapStyleArchive::has_drop_cap_properties() const {
  return _internal_has_drop_cap_properties();
}
inline void DropCapStyleArchive::clear_drop_cap_properties() {
  if (drop_cap_properties_ != nullptr) drop_cap_properties_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::DropCapStylePropertiesArchive& DropCapStyleArchive::_internal_drop_cap_properties() const {
  const ::TSWP::DropCapStylePropertiesArchive* p = drop_cap_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::DropCapStylePropertiesArchive&>(
      ::TSWP::_DropCapStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::DropCapStylePropertiesArchive& DropCapStyleArchive::drop_cap_properties() const {
  // @@protoc_insertion_point(field_get:TSWP.DropCapStyleArchive.drop_cap_properties)
  return _internal_drop_cap_properties();
}
inline void DropCapStyleArchive::unsafe_arena_set_allocated_drop_cap_properties(
    ::TSWP::DropCapStylePropertiesArchive* drop_cap_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_cap_properties_);
  }
  drop_cap_properties_ = drop_cap_properties;
  if (drop_cap_properties) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.DropCapStyleArchive.drop_cap_properties)
}
inline ::TSWP::DropCapStylePropertiesArchive* DropCapStyleArchive::release_drop_cap_properties() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::DropCapStylePropertiesArchive* temp = drop_cap_properties_;
  drop_cap_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::DropCapStylePropertiesArchive* DropCapStyleArchive::unsafe_arena_release_drop_cap_properties() {
  // @@protoc_insertion_point(field_release:TSWP.DropCapStyleArchive.drop_cap_properties)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::DropCapStylePropertiesArchive* temp = drop_cap_properties_;
  drop_cap_properties_ = nullptr;
  return temp;
}
inline ::TSWP::DropCapStylePropertiesArchive* DropCapStyleArchive::_internal_mutable_drop_cap_properties() {
  _has_bits_[0] |= 0x00000004u;
  if (drop_cap_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::DropCapStylePropertiesArchive>(GetArena());
    drop_cap_properties_ = p;
  }
  return drop_cap_properties_;
}
inline ::TSWP::DropCapStylePropertiesArchive* DropCapStyleArchive::mutable_drop_cap_properties() {
  // @@protoc_insertion_point(field_mutable:TSWP.DropCapStyleArchive.drop_cap_properties)
  return _internal_mutable_drop_cap_properties();
}
inline void DropCapStyleArchive::set_allocated_drop_cap_properties(::TSWP::DropCapStylePropertiesArchive* drop_cap_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete drop_cap_properties_;
  }
  if (drop_cap_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(drop_cap_properties);
    if (message_arena != submessage_arena) {
      drop_cap_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_cap_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  drop_cap_properties_ = drop_cap_properties;
  // @@protoc_insertion_point(field_set_allocated:TSWP.DropCapStyleArchive.drop_cap_properties)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSWP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSWP::StorageArchive_KindType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::StorageArchive_KindType>() {
  return ::TSWP::StorageArchive_KindType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::CharacterStylePropertiesArchive_CapitalizationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::CharacterStylePropertiesArchive_CapitalizationType>() {
  return ::TSWP::CharacterStylePropertiesArchive_CapitalizationType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::CharacterStylePropertiesArchive_UnderlineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::CharacterStylePropertiesArchive_UnderlineType>() {
  return ::TSWP::CharacterStylePropertiesArchive_UnderlineType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::CharacterStylePropertiesArchive_LigaturesType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::CharacterStylePropertiesArchive_LigaturesType>() {
  return ::TSWP::CharacterStylePropertiesArchive_LigaturesType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::CharacterStylePropertiesArchive_StrikethruType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::CharacterStylePropertiesArchive_StrikethruType>() {
  return ::TSWP::CharacterStylePropertiesArchive_StrikethruType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::CharacterStylePropertiesArchive_SuperscriptType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::CharacterStylePropertiesArchive_SuperscriptType>() {
  return ::TSWP::CharacterStylePropertiesArchive_SuperscriptType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::TabArchive_TabAlignmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::TabArchive_TabAlignmentType>() {
  return ::TSWP::TabArchive_TabAlignmentType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::LineSpacingArchive_LineSpacingModeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::LineSpacingArchive_LineSpacingModeType>() {
  return ::TSWP::LineSpacingArchive_LineSpacingModeType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType>() {
  return ::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType>() {
  return ::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType>() {
  return ::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::ListStyleArchive_LabelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::ListStyleArchive_LabelType>() {
  return ::TSWP::ListStyleArchive_LabelType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::ListStyleArchive_NumberType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::ListStyleArchive_NumberType>() {
  return ::TSWP::ListStyleArchive_NumberType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType>() {
  return ::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType>() {
  return ::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::UndoTransaction_UndoKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::UndoTransaction_UndoKind>() {
  return ::TSWP::UndoTransaction_UndoKind_descriptor();
}
template <> struct is_proto_enum< ::TSWP::UndoTransaction_ActionKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::UndoTransaction_ActionKind>() {
  return ::TSWP::UndoTransaction_ActionKind_descriptor();
}
template <> struct is_proto_enum< ::TSWP::UndoTransaction_ActionGroupKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::UndoTransaction_ActionGroupKind>() {
  return ::TSWP::UndoTransaction_ActionGroupKind_descriptor();
}
template <> struct is_proto_enum< ::TSWP::TextualAttachmentArchive_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::TextualAttachmentArchive_Kind>() {
  return ::TSWP::TextualAttachmentArchive_Kind_descriptor();
}
template <> struct is_proto_enum< ::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan>() {
  return ::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor();
}
template <> struct is_proto_enum< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle>() {
  return ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor();
}
template <> struct is_proto_enum< ::TSWP::MergeSmartFieldArchive_MergeCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::MergeSmartFieldArchive_MergeCategory>() {
  return ::TSWP::MergeSmartFieldArchive_MergeCategory_descriptor();
}
template <> struct is_proto_enum< ::TSWP::ChangeArchive_ChangeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::ChangeArchive_ChangeKind>() {
  return ::TSWP::ChangeArchive_ChangeKind_descriptor();
}
template <> struct is_proto_enum< ::TSWP::DropCapArchive_DropCapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::DropCapArchive_DropCapType>() {
  return ::TSWP::DropCapArchive_DropCapType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::DropCapArchive_DropCapWrapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::DropCapArchive_DropCapWrapType>() {
  return ::TSWP::DropCapArchive_DropCapWrapType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::SelectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::SelectionType>() {
  return ::TSWP::SelectionType_descriptor();
}
template <> struct is_proto_enum< ::TSWP::StyleInsertionBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::StyleInsertionBehavior>() {
  return ::TSWP::StyleInsertionBehavior_descriptor();
}
template <> struct is_proto_enum< ::TSWP::CaretAffinity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::CaretAffinity>() {
  return ::TSWP::CaretAffinity_descriptor();
}
template <> struct is_proto_enum< ::TSWP::WritingDirectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::WritingDirectionType>() {
  return ::TSWP::WritingDirectionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSWPArchives_2eproto
