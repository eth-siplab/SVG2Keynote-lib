// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSDCommandArchives.proto

#include "TSDCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSD {
constexpr UndoObjectArchive::UndoObjectArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_()
  , keys_()
  , counts_()
  , stylesheet_(nullptr){}
struct UndoObjectArchiveDefaultTypeInternal {
  constexpr UndoObjectArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoObjectArchiveDefaultTypeInternal() {}
  union {
    UndoObjectArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoObjectArchiveDefaultTypeInternal _UndoObjectArchive_default_instance_;
constexpr GroupDrawablesCommandArchive::GroupDrawablesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawables_()
  , super_(nullptr)
  , group_(nullptr){}
struct GroupDrawablesCommandArchiveDefaultTypeInternal {
  constexpr GroupDrawablesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    GroupDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupDrawablesCommandArchiveDefaultTypeInternal _GroupDrawablesCommandArchive_default_instance_;
constexpr UngroupGroupCommandArchive::UngroupGroupCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawables_()
  , super_(nullptr)
  , group_(nullptr){}
struct UngroupGroupCommandArchiveDefaultTypeInternal {
  constexpr UngroupGroupCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UngroupGroupCommandArchiveDefaultTypeInternal() {}
  union {
    UngroupGroupCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UngroupGroupCommandArchiveDefaultTypeInternal _UngroupGroupCommandArchive_default_instance_;
constexpr ContainerRemoveChildrenCommandArchive::ContainerRemoveChildrenCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_()
  , children_()
  , super_(nullptr)
  , container_id_path_(nullptr){}
struct ContainerRemoveChildrenCommandArchiveDefaultTypeInternal {
  constexpr ContainerRemoveChildrenCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerRemoveChildrenCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerRemoveChildrenCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerRemoveChildrenCommandArchiveDefaultTypeInternal _ContainerRemoveChildrenCommandArchive_default_instance_;
constexpr ContainerRemoveDrawablesCommandArchive::ContainerRemoveDrawablesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal {
  constexpr ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerRemoveDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal _ContainerRemoveDrawablesCommandArchive_default_instance_;
constexpr ContainerInsertChildrenCommandArchive::ContainerInsertChildrenCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : children_()
  , args_list_()
  , custom_format_keys_()
  , super_(nullptr)
  , container_id_path_(nullptr)
  , undo_object_(nullptr){}
struct ContainerInsertChildrenCommandArchiveDefaultTypeInternal {
  constexpr ContainerInsertChildrenCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerInsertChildrenCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerInsertChildrenCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerInsertChildrenCommandArchiveDefaultTypeInternal _ContainerInsertChildrenCommandArchive_default_instance_;
constexpr ContainerInsertDrawablesCommandArchive::ContainerInsertDrawablesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawables_()
  , super_(nullptr){}
struct ContainerInsertDrawablesCommandArchiveDefaultTypeInternal {
  constexpr ContainerInsertDrawablesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerInsertDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerInsertDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerInsertDrawablesCommandArchiveDefaultTypeInternal _ContainerInsertDrawablesCommandArchive_default_instance_;
constexpr ContainerReorderChildrenCommandArchive::ContainerReorderChildrenCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_()
  , super_(nullptr)
  , container_id_path_(nullptr){}
struct ContainerReorderChildrenCommandArchiveDefaultTypeInternal {
  constexpr ContainerReorderChildrenCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerReorderChildrenCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerReorderChildrenCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerReorderChildrenCommandArchiveDefaultTypeInternal _ContainerReorderChildrenCommandArchive_default_instance_;
constexpr GroupUngroupInformativeCommandArchive::GroupUngroupInformativeCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : removed_infos_()
  , inserted_infos_()
  , super_(nullptr)
  , command_type_(0)
{}
struct GroupUngroupInformativeCommandArchiveDefaultTypeInternal {
  constexpr GroupUngroupInformativeCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupUngroupInformativeCommandArchiveDefaultTypeInternal() {}
  union {
    GroupUngroupInformativeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupUngroupInformativeCommandArchiveDefaultTypeInternal _GroupUngroupInformativeCommandArchive_default_instance_;
constexpr InfoCommandArchive::InfoCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , info_id_path_(nullptr){}
struct InfoCommandArchiveDefaultTypeInternal {
  constexpr InfoCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InfoCommandArchiveDefaultTypeInternal() {}
  union {
    InfoCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InfoCommandArchiveDefaultTypeInternal _InfoCommandArchive_default_instance_;
constexpr ConnectionLineConnectCommandArchive::ConnectionLineConnectCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , connected_from_id_(nullptr)
  , connected_to_id_(nullptr)
  , old_connected_to_id_(nullptr)
  , old_connected_from_id_(nullptr){}
struct ConnectionLineConnectCommandArchiveDefaultTypeInternal {
  constexpr ConnectionLineConnectCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionLineConnectCommandArchiveDefaultTypeInternal() {}
  union {
    ConnectionLineConnectCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionLineConnectCommandArchiveDefaultTypeInternal _ConnectionLineConnectCommandArchive_default_instance_;
constexpr InfoGeometryCommandArchive::InfoGeometryCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , newgeometry_(nullptr)
  , oldgeometry_(nullptr)
  , matchobjectplaceholdergeometry_(false)
  , oldmatchobjectplaceholdergeometry_(false)
  , shouldtriggerrtuanimation_(false)
  , initiatedonweb_(false){}
struct InfoGeometryCommandArchiveDefaultTypeInternal {
  constexpr InfoGeometryCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    InfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InfoGeometryCommandArchiveDefaultTypeInternal _InfoGeometryCommandArchive_default_instance_;
constexpr DrawablePathSourceCommandArchive::DrawablePathSourceCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_path_source_(nullptr)
  , new_path_source_(nullptr){}
struct DrawablePathSourceCommandArchiveDefaultTypeInternal {
  constexpr DrawablePathSourceCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawablePathSourceCommandArchiveDefaultTypeInternal() {}
  union {
    DrawablePathSourceCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawablePathSourceCommandArchiveDefaultTypeInternal _DrawablePathSourceCommandArchive_default_instance_;
constexpr InstantAlphaCommandArchive::InstantAlphaCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , oldpath_(nullptr)
  , newpath_(nullptr){}
struct InstantAlphaCommandArchiveDefaultTypeInternal {
  constexpr InstantAlphaCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstantAlphaCommandArchiveDefaultTypeInternal() {}
  union {
    InstantAlphaCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstantAlphaCommandArchiveDefaultTypeInternal _InstantAlphaCommandArchive_default_instance_;
constexpr DrawableApplyThemeCommandArchive::DrawableApplyThemeCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , info_(nullptr)
  , style_(nullptr){}
struct DrawableApplyThemeCommandArchiveDefaultTypeInternal {
  constexpr DrawableApplyThemeCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableApplyThemeCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableApplyThemeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableApplyThemeCommandArchiveDefaultTypeInternal _DrawableApplyThemeCommandArchive_default_instance_;
constexpr AbstractStyleCommandArchive::AbstractStyleCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct AbstractStyleCommandArchiveDefaultTypeInternal {
  constexpr AbstractStyleCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AbstractStyleCommandArchiveDefaultTypeInternal() {}
  union {
    AbstractStyleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AbstractStyleCommandArchiveDefaultTypeInternal _AbstractStyleCommandArchive_default_instance_;
constexpr StyledInfoSetStyleCommandArchive::StyledInfoSetStyleCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , new_style_(nullptr)
  , rollback_style_(nullptr){}
struct StyledInfoSetStyleCommandArchiveDefaultTypeInternal {
  constexpr StyledInfoSetStyleCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyledInfoSetStyleCommandArchiveDefaultTypeInternal() {}
  union {
    StyledInfoSetStyleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyledInfoSetStyleCommandArchiveDefaultTypeInternal _StyledInfoSetStyleCommandArchive_default_instance_;
constexpr BaseApplyPresetCommandArchive::BaseApplyPresetCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , preset_style_(nullptr)
  , rollback_style_(nullptr){}
struct BaseApplyPresetCommandArchiveDefaultTypeInternal {
  constexpr BaseApplyPresetCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseApplyPresetCommandArchiveDefaultTypeInternal() {}
  union {
    BaseApplyPresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseApplyPresetCommandArchiveDefaultTypeInternal _BaseApplyPresetCommandArchive_default_instance_;
constexpr ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ShapeApplyPresetCommandArchiveDefaultTypeInternal {
  constexpr ShapeApplyPresetCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeApplyPresetCommandArchiveDefaultTypeInternal() {}
  union {
    ShapeApplyPresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeApplyPresetCommandArchiveDefaultTypeInternal _ShapeApplyPresetCommandArchive_default_instance_;
constexpr MediaApplyPresetCommandArchive::MediaApplyPresetCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct MediaApplyPresetCommandArchiveDefaultTypeInternal {
  constexpr MediaApplyPresetCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaApplyPresetCommandArchiveDefaultTypeInternal() {}
  union {
    MediaApplyPresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaApplyPresetCommandArchiveDefaultTypeInternal _MediaApplyPresetCommandArchive_default_instance_;
constexpr ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , change_(nullptr){}
struct ShapeStyleSetValueCommandArchiveDefaultTypeInternal {
  constexpr ShapeStyleSetValueCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeStyleSetValueCommandArchiveDefaultTypeInternal() {}
  union {
    ShapeStyleSetValueCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeStyleSetValueCommandArchiveDefaultTypeInternal _ShapeStyleSetValueCommandArchive_default_instance_;
constexpr BaseStyleSetValueCommandArchive::BaseStyleSetValueCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_style_(nullptr)
  , is_border_change_(false){}
struct BaseStyleSetValueCommandArchiveDefaultTypeInternal {
  constexpr BaseStyleSetValueCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseStyleSetValueCommandArchiveDefaultTypeInternal() {}
  union {
    BaseStyleSetValueCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseStyleSetValueCommandArchiveDefaultTypeInternal _BaseStyleSetValueCommandArchive_default_instance_;
constexpr MovieSetValueCommandArchive_PropertyValue::MovieSetValueCommandArchive_PropertyValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : posterimagedata_(nullptr)
  , media_(nullptr)
  , starttime_(0)
  , endtime_(0)
  , postertime_(0)
  , loopoption_(0)

  , volume_(0)
  , autoplay_(false)
  , playsacrossslides_(false){}
struct MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal {
  constexpr MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal() {}
  union {
    MovieSetValueCommandArchive_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal _MovieSetValueCommandArchive_PropertyValue_default_instance_;
constexpr MovieSetValueCommandArchive::MovieSetValueCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , value_(nullptr)
  , oldvalue_(nullptr)
  , importedauxiliarymedia_(nullptr)
  , oldimportedauxiliarymedia_(nullptr)
  , property_(0){}
struct MovieSetValueCommandArchiveDefaultTypeInternal {
  constexpr MovieSetValueCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovieSetValueCommandArchiveDefaultTypeInternal() {}
  union {
    MovieSetValueCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovieSetValueCommandArchiveDefaultTypeInternal _MovieSetValueCommandArchive_default_instance_;
constexpr MediaStyleSetValueCommandArchive::MediaStyleSetValueCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , change_(nullptr){}
struct MediaStyleSetValueCommandArchiveDefaultTypeInternal {
  constexpr MediaStyleSetValueCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaStyleSetValueCommandArchiveDefaultTypeInternal() {}
  union {
    MediaStyleSetValueCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaStyleSetValueCommandArchiveDefaultTypeInternal _MediaStyleSetValueCommandArchive_default_instance_;
constexpr ImageMediaCommandArchive::ImageMediaCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , database_newimagedata_(nullptr)
  , database_oldimagedata_(nullptr)
  , database_oldoriginalimagedata_(nullptr)
  , oldnaturalsize_(nullptr)
  , database_neworiginalimagedata_(nullptr)
  , newimagedata_(nullptr)
  , oldimagedata_(nullptr)
  , oldoriginalimagedata_(nullptr)
  , neworiginalimagedata_(nullptr)
  , oldimageadjustments_(nullptr)
  , oldadjustedimagedata_(nullptr)
  , oldenhancedimagedata_(nullptr)
  , imageadjustments_(nullptr)
  , adjustedimagedata_(nullptr)
  , enhancedimagedata_(nullptr)
  , newthumbnailimagedata_(nullptr)
  , oldthumbnailimagedata_(nullptr)
  , thumbnailadjustedimagedata_(nullptr)
  , oldthumbnailadjustedimagedata_(nullptr){}
struct ImageMediaCommandArchiveDefaultTypeInternal {
  constexpr ImageMediaCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageMediaCommandArchiveDefaultTypeInternal() {}
  union {
    ImageMediaCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageMediaCommandArchiveDefaultTypeInternal _ImageMediaCommandArchive_default_instance_;
constexpr MediaOriginalSizeCommandArchive::MediaOriginalSizeCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : propertyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , neworiginalsize_(nullptr)
  , oldoriginalsize_(nullptr){}
struct MediaOriginalSizeCommandArchiveDefaultTypeInternal {
  constexpr MediaOriginalSizeCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaOriginalSizeCommandArchiveDefaultTypeInternal() {}
  union {
    MediaOriginalSizeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaOriginalSizeCommandArchiveDefaultTypeInternal _MediaOriginalSizeCommandArchive_default_instance_;
constexpr MediaInfoGeometryCommandArchive::MediaInfoGeometryCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , neworiginalsize_(nullptr)
  , oldoriginalsize_(nullptr){}
struct MediaInfoGeometryCommandArchiveDefaultTypeInternal {
  constexpr MediaInfoGeometryCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaInfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    MediaInfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaInfoGeometryCommandArchiveDefaultTypeInternal _MediaInfoGeometryCommandArchive_default_instance_;
constexpr ImageNaturalSizeCommandArchive::ImageNaturalSizeCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , new_natural_size_(nullptr)
  , old_natural_size_(nullptr){}
struct ImageNaturalSizeCommandArchiveDefaultTypeInternal {
  constexpr ImageNaturalSizeCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageNaturalSizeCommandArchiveDefaultTypeInternal() {}
  union {
    ImageNaturalSizeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageNaturalSizeCommandArchiveDefaultTypeInternal _ImageNaturalSizeCommandArchive_default_instance_;
constexpr ImageMaskCommandArchive::ImageMaskCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , newmaskinfo_(nullptr)
  , oldmaskinfo_(nullptr){}
struct ImageMaskCommandArchiveDefaultTypeInternal {
  constexpr ImageMaskCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageMaskCommandArchiveDefaultTypeInternal() {}
  union {
    ImageMaskCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageMaskCommandArchiveDefaultTypeInternal _ImageMaskCommandArchive_default_instance_;
constexpr ImageAdjustmentsCommandArchive::ImageAdjustmentsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_image_adjustments_(nullptr)
  , new_image_adjustments_(nullptr)
  , adjustedimagedata_(nullptr)
  , replacedadjustedimagedata_(nullptr)
  , enhancedimagedata_(nullptr)
  , replacedenhancedimagedata_(nullptr)
  , thumbnailadjustedimagedata_(nullptr)
  , replacedthumbnailadjustedimagedata_(nullptr){}
struct ImageAdjustmentsCommandArchiveDefaultTypeInternal {
  constexpr ImageAdjustmentsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageAdjustmentsCommandArchiveDefaultTypeInternal() {}
  union {
    ImageAdjustmentsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageAdjustmentsCommandArchiveDefaultTypeInternal _ImageAdjustmentsCommandArchive_default_instance_;
constexpr MediaFlagsCommandArchive::MediaFlagsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , was_media_replaced_(false)
  , is_placeholder_(false)
  , old_was_media_replaced_(false)
  , old_is_placeholder_(false){}
struct MediaFlagsCommandArchiveDefaultTypeInternal {
  constexpr MediaFlagsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaFlagsCommandArchiveDefaultTypeInternal() {}
  union {
    MediaFlagsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaFlagsCommandArchiveDefaultTypeInternal _MediaFlagsCommandArchive_default_instance_;
constexpr DrawablesCommandGroupArchive::DrawablesCommandGroupArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , obsolete_selection_(nullptr)
  , modelforselection_(nullptr)
  , archivedselection_(nullptr)
  , fordrag_(false)
  , type_(1)
{}
struct DrawablesCommandGroupArchiveDefaultTypeInternal {
  constexpr DrawablesCommandGroupArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawablesCommandGroupArchiveDefaultTypeInternal() {}
  union {
    DrawablesCommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawablesCommandGroupArchiveDefaultTypeInternal _DrawablesCommandGroupArchive_default_instance_;
constexpr ExteriorTextWrapCommandArchive::ExteriorTextWrapCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_exterior_text_wrap_(nullptr)
  , type_(0u)
  , direction_(0u)
  , fit_type_(0u)
  , margin_(0)
  , alpha_threshold_(0)
  , is_html_wrap_(false){}
struct ExteriorTextWrapCommandArchiveDefaultTypeInternal {
  constexpr ExteriorTextWrapCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExteriorTextWrapCommandArchiveDefaultTypeInternal() {}
  union {
    ExteriorTextWrapCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExteriorTextWrapCommandArchiveDefaultTypeInternal _ExteriorTextWrapCommandArchive_default_instance_;
constexpr DrawableHyperlinkCommandArchive::DrawableHyperlinkCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oldhyperlink_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , newhyperlink_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct DrawableHyperlinkCommandArchiveDefaultTypeInternal {
  constexpr DrawableHyperlinkCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableHyperlinkCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableHyperlinkCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableHyperlinkCommandArchiveDefaultTypeInternal _DrawableHyperlinkCommandArchive_default_instance_;
constexpr CommentInvalidatingCommandSelectionBehaviorArchive::CommentInvalidatingCommandSelectionBehaviorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , annotation_displaying_command_(nullptr)
  , begin_editing_on_undo_(false)
  , begin_editing_on_redo_(false)
  , should_invalidate_on_undo_(false)
  , should_invalidate_on_redo_(false){}
struct CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal {
  constexpr CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    CommentInvalidatingCommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal _CommentInvalidatingCommandSelectionBehaviorArchive_default_instance_;
constexpr ImageReplaceCommandArchive::ImageReplaceCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , new_image_data_(nullptr)
  , new_original_image_data_(nullptr)
  , old_image_data_(nullptr)
  , old_original_image_data_(nullptr)
  , instant_alpha_path_(nullptr)
  , old_instant_alpha_path_(nullptr)
  , natural_size_for_iapath_(nullptr)
  , old_natural_size_for_iapath_(nullptr)
  , target_image_geometry_(nullptr)
  , old_target_image_geometry_(nullptr)
  , target_mask_geometry_(nullptr)
  , old_target_mask_geometry_(nullptr)
  , image_adjustments_(nullptr)
  , adjusted_image_data_(nullptr)
  , enhanced_image_data_(nullptr)
  , old_image_adjustments_(nullptr)
  , old_adjusted_image_data_(nullptr)
  , old_enhanced_image_data_(nullptr)
  , thumbnail_image_data_(nullptr)
  , old_thumbnail_image_data_(nullptr)
  , thumbnail_adjusted_image_data_(nullptr)
  , old_thumbnail_adjusted_image_data_(nullptr)
  , natural_size_(nullptr)
  , old_natural_size_(nullptr){}
struct ImageReplaceCommandArchiveDefaultTypeInternal {
  constexpr ImageReplaceCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageReplaceCommandArchiveDefaultTypeInternal() {}
  union {
    ImageReplaceCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageReplaceCommandArchiveDefaultTypeInternal _ImageReplaceCommandArchive_default_instance_;
constexpr DrawableLockCommandArchive::DrawableLockCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , locked_(false)
  , was_locked_(false){}
struct DrawableLockCommandArchiveDefaultTypeInternal {
  constexpr DrawableLockCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableLockCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableLockCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableLockCommandArchiveDefaultTypeInternal _DrawableLockCommandArchive_default_instance_;
constexpr DrawableInfoCommentCommandArchive::DrawableInfoCommentCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_comment_(nullptr)
  , new_comment_(nullptr)
  , forward_variant_(0)

  , inverse_variant_(0)
{}
struct DrawableInfoCommentCommandArchiveDefaultTypeInternal {
  constexpr DrawableInfoCommentCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableInfoCommentCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableInfoCommentCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableInfoCommentCommandArchiveDefaultTypeInternal _DrawableInfoCommentCommandArchive_default_instance_;
constexpr DrawablePencilAnnotationCommandArchive::DrawablePencilAnnotationCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , pencil_annotation_to_add_(nullptr)
  , pencil_annotation_to_remove_(nullptr){}
struct DrawablePencilAnnotationCommandArchiveDefaultTypeInternal {
  constexpr DrawablePencilAnnotationCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawablePencilAnnotationCommandArchiveDefaultTypeInternal() {}
  union {
    DrawablePencilAnnotationCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawablePencilAnnotationCommandArchiveDefaultTypeInternal _DrawablePencilAnnotationCommandArchive_default_instance_;
constexpr AbstractGuideCommandArchive::AbstractGuideCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_guides_()
  , new_guides_()
  , super_(nullptr){}
struct AbstractGuideCommandArchiveDefaultTypeInternal {
  constexpr AbstractGuideCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AbstractGuideCommandArchiveDefaultTypeInternal() {}
  union {
    AbstractGuideCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AbstractGuideCommandArchiveDefaultTypeInternal _AbstractGuideCommandArchive_default_instance_;
constexpr GuideCommandArchive::GuideCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_id_path_(nullptr){}
struct GuideCommandArchiveDefaultTypeInternal {
  constexpr GuideCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GuideCommandArchiveDefaultTypeInternal() {}
  union {
    GuideCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GuideCommandArchiveDefaultTypeInternal _GuideCommandArchive_default_instance_;
constexpr DrawableAspectRatioLockedCommandArchive::DrawableAspectRatioLockedCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , aspect_ratio_locked_(false)
  , was_aspect_ratio_locked_(false){}
struct DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal {
  constexpr DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableAspectRatioLockedCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal _DrawableAspectRatioLockedCommandArchive_default_instance_;
constexpr DrawableAccessibilityDescriptionCommandArchive::DrawableAccessibilityDescriptionCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accessibility_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , old_accessibility_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal {
  constexpr DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableAccessibilityDescriptionCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal _DrawableAccessibilityDescriptionCommandArchive_default_instance_;
constexpr PasteStyleCommandArchive::PasteStyleCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , new_style_(nullptr)
  , rollback_style_(nullptr)
  , tail_end_on_left_(false){}
struct PasteStyleCommandArchiveDefaultTypeInternal {
  constexpr PasteStyleCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PasteStyleCommandArchiveDefaultTypeInternal() {}
  union {
    PasteStyleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PasteStyleCommandArchiveDefaultTypeInternal _PasteStyleCommandArchive_default_instance_;
constexpr ImageInfoAbstractGeometryCommandArchive::ImageInfoAbstractGeometryCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , new_image_geometry_(nullptr)
  , old_image_geometry_(nullptr)
  , new_mask_geometry_(nullptr)
  , old_mask_geometry_(nullptr)
  , new_mask_path_source_(nullptr)
  , old_mask_path_source_(nullptr)
  , new_image_original_size_(nullptr)
  , old_image_original_size_(nullptr){}
struct ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal {
  constexpr ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    ImageInfoAbstractGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal _ImageInfoAbstractGeometryCommandArchive_default_instance_;
constexpr ImageInfoGeometryCommandArchive::ImageInfoGeometryCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ImageInfoGeometryCommandArchiveDefaultTypeInternal {
  constexpr ImageInfoGeometryCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageInfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    ImageInfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageInfoGeometryCommandArchiveDefaultTypeInternal _ImageInfoGeometryCommandArchive_default_instance_;
constexpr ImageInfoMaskGeometryCommandArchive::ImageInfoMaskGeometryCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal {
  constexpr ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    ImageInfoMaskGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal _ImageInfoMaskGeometryCommandArchive_default_instance_;
constexpr InfoCollectionSelectionTransformerHelperArchive::InfoCollectionSelectionTransformerHelperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_uuid_path_list_(){}
struct InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal {
  constexpr InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal() {}
  union {
    InfoCollectionSelectionTransformerHelperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal _InfoCollectionSelectionTransformerHelperArchive_default_instance_;
constexpr DrawableSelectionTransformerArchive::DrawableSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transformer_helper_(nullptr)
  , untransformed_drawable_selection_(nullptr){}
struct DrawableSelectionTransformerArchiveDefaultTypeInternal {
  constexpr DrawableSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    DrawableSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableSelectionTransformerArchiveDefaultTypeInternal _DrawableSelectionTransformerArchive_default_instance_;
constexpr InfoHyperlinkSelectionTransformerArchive::InfoHyperlinkSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal {
  constexpr InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    InfoHyperlinkSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal _InfoHyperlinkSelectionTransformerArchive_default_instance_;
constexpr CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transformer_helper_(nullptr){}
struct CanvasSelectionTransformerArchiveDefaultTypeInternal {
  constexpr CanvasSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
constexpr PathSelectionTransformerArchive::PathSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PathSelectionTransformerArchiveDefaultTypeInternal {
  constexpr PathSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    PathSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathSelectionTransformerArchiveDefaultTypeInternal _PathSelectionTransformerArchive_default_instance_;
constexpr ShapeSelectionTransformerArchive::ShapeSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ShapeSelectionTransformerArchiveDefaultTypeInternal {
  constexpr ShapeSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ShapeSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeSelectionTransformerArchiveDefaultTypeInternal _ShapeSelectionTransformerArchive_default_instance_;
constexpr GroupSelectionTransformerArchive::GroupSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct GroupSelectionTransformerArchiveDefaultTypeInternal {
  constexpr GroupSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    GroupSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupSelectionTransformerArchiveDefaultTypeInternal _GroupSelectionTransformerArchive_default_instance_;
constexpr PencilAnnotationSelectionTransformerArchive::PencilAnnotationSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pencil_annotation_uuid_(nullptr){}
struct PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal {
  constexpr PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal _PencilAnnotationSelectionTransformerArchive_default_instance_;
constexpr FreehandDrawingOpacityCommandArchive::FreehandDrawingOpacityCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , opacity_(0)
  , old_opacity_(0){}
struct FreehandDrawingOpacityCommandArchiveDefaultTypeInternal {
  constexpr FreehandDrawingOpacityCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreehandDrawingOpacityCommandArchiveDefaultTypeInternal() {}
  union {
    FreehandDrawingOpacityCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreehandDrawingOpacityCommandArchiveDefaultTypeInternal _FreehandDrawingOpacityCommandArchive_default_instance_;
constexpr FreehandDrawingAnimationCommandArchive::FreehandDrawingAnimationCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , animation_(nullptr)
  , old_animation_(nullptr){}
struct FreehandDrawingAnimationCommandArchiveDefaultTypeInternal {
  constexpr FreehandDrawingAnimationCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreehandDrawingAnimationCommandArchiveDefaultTypeInternal() {}
  union {
    FreehandDrawingAnimationCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreehandDrawingAnimationCommandArchiveDefaultTypeInternal _FreehandDrawingAnimationCommandArchive_default_instance_;
constexpr InsertCaptionOrTitleCommandArchive::InsertCaptionOrTitleCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , drawable_info_id_path_(nullptr)
  , caption_or_title_info_(nullptr)
  , added_caption_or_title_uuid_(nullptr)
  , undo_object_(nullptr)
  , caption_or_title_kind_(1)
{}
struct InsertCaptionOrTitleCommandArchiveDefaultTypeInternal {
  constexpr InsertCaptionOrTitleCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertCaptionOrTitleCommandArchiveDefaultTypeInternal() {}
  union {
    InsertCaptionOrTitleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertCaptionOrTitleCommandArchiveDefaultTypeInternal _InsertCaptionOrTitleCommandArchive_default_instance_;
constexpr RemoveCaptionOrTitleCommandArchive::RemoveCaptionOrTitleCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , drawable_info_id_path_(nullptr)
  , removed_caption_or_title_info_(nullptr)
  , removed_caption_or_title_uuid_(nullptr)
  , caption_or_title_kind_(1)
{}
struct RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal {
  constexpr RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal() {}
  union {
    RemoveCaptionOrTitleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal _RemoveCaptionOrTitleCommandArchive_default_instance_;
constexpr SetCaptionOrTitleVisibilityCommandArchive::SetCaptionOrTitleVisibilityCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , hidden_(false)
  , was_hidden_(false)
  , caption_or_title_kind_(1)
{}
struct SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal {
  constexpr SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal() {}
  union {
    SetCaptionOrTitleVisibilityCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal _SetCaptionOrTitleVisibilityCommandArchive_default_instance_;
}  // namespace TSD
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSDCommandArchives_2eproto[61];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSDCommandArchives_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSDCommandArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSDCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, stylesheet_),
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, objects_),
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, keys_),
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, counts_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, drawables_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, group_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, drawables_),
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, group_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, container_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, children_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveDrawablesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveDrawablesCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, container_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, children_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, undo_object_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertDrawablesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertDrawablesCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertDrawablesCommandArchive, drawables_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, container_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, args_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, removed_infos_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, inserted_infos_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, command_type_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCommandArchive, info_id_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, connected_from_id_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, connected_to_id_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, old_connected_to_id_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, old_connected_from_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, newgeometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, oldgeometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, matchobjectplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, oldmatchobjectplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, shouldtriggerrtuanimation_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, initiatedonweb_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, old_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, new_path_source_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, oldpath_),
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, newpath_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, info_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractStyleCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractStyleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractStyleCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, new_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, rollback_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, preset_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, rollback_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeApplyPresetCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeApplyPresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeApplyPresetCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaApplyPresetCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaApplyPresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaApplyPresetCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleSetValueCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleSetValueCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleSetValueCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleSetValueCommandArchive, change_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, old_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, is_border_change_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, starttime_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, endtime_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, postertime_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, posterimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, autoplay_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, loopoption_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, volume_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, media_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, playsacrossslides_),
  2,
  3,
  4,
  0,
  7,
  5,
  6,
  1,
  8,
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, property_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, oldvalue_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, importedauxiliarymedia_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, oldimportedauxiliarymedia_),
  0,
  5,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleSetValueCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleSetValueCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleSetValueCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleSetValueCommandArchive, change_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, newimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, oldimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, oldoriginalimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, oldnaturalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, neworiginalimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, oldimageadjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, oldadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, oldenhancedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, imageadjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, adjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, enhancedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, newthumbnailimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, oldthumbnailimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, thumbnailadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, oldthumbnailadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, database_newimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, database_oldimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, database_oldoriginalimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, database_neworiginalimagedata_),
  0,
  6,
  7,
  8,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, neworiginalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, oldoriginalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, propertyname_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, neworiginalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, oldoriginalsize_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, new_natural_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, old_natural_size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, newmaskinfo_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, oldmaskinfo_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, old_image_adjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, new_image_adjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, adjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, replacedadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, enhancedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, replacedenhancedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, thumbnailadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, replacedthumbnailadjustedimagedata_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, was_media_replaced_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, is_placeholder_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, old_was_media_replaced_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, old_is_placeholder_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, property_name_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, obsolete_selection_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, modelforselection_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, fordrag_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, archivedselection_),
  0,
  1,
  2,
  5,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, old_exterior_text_wrap_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, direction_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, fit_type_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, margin_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, alpha_threshold_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, is_html_wrap_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, oldhyperlink_url_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, newhyperlink_url_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, annotation_displaying_command_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, begin_editing_on_undo_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, begin_editing_on_redo_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, should_invalidate_on_undo_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, should_invalidate_on_redo_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, new_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, new_original_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_original_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, instant_alpha_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_instant_alpha_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, natural_size_for_iapath_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_natural_size_for_iapath_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, target_image_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_target_image_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, target_mask_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_target_mask_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, image_adjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, adjusted_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, enhanced_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_image_adjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_adjusted_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_enhanced_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, thumbnail_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_thumbnail_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, thumbnail_adjusted_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_thumbnail_adjusted_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, natural_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, old_natural_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, locked_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, was_locked_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, old_comment_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, new_comment_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, forward_variant_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, inverse_variant_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, pencil_annotation_to_add_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, pencil_annotation_to_remove_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, old_guides_),
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, new_guides_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::GuideCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GuideCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideCommandArchive, storage_id_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, aspect_ratio_locked_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, was_aspect_ratio_locked_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, accessibility_description_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, old_accessibility_description_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, new_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, rollback_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, tail_end_on_left_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, new_image_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, old_image_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, new_mask_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, old_mask_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, new_mask_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, old_mask_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, new_image_original_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, old_image_original_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoGeometryCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoGeometryCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoMaskGeometryCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoMaskGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoMaskGeometryCommandArchive, super_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCollectionSelectionTransformerHelperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCollectionSelectionTransformerHelperArchive, info_uuid_path_list_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionTransformerArchive, transformer_helper_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionTransformerArchive, untransformed_drawable_selection_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoHyperlinkSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionTransformerArchive, transformer_helper_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::PathSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeSelectionTransformerArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionTransformerArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationSelectionTransformerArchive, pencil_annotation_uuid_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, old_opacity_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, animation_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, old_animation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, drawable_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, caption_or_title_info_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, added_caption_or_title_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, caption_or_title_kind_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, undo_object_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, drawable_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, removed_caption_or_title_info_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, removed_caption_or_title_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, caption_or_title_kind_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, caption_or_title_kind_),
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, hidden_),
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, was_hidden_),
  0,
  3,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::TSD::UndoObjectArchive)},
  { 13, 21, sizeof(::TSD::GroupDrawablesCommandArchive)},
  { 24, 32, sizeof(::TSD::UngroupGroupCommandArchive)},
  { 35, 44, sizeof(::TSD::ContainerRemoveChildrenCommandArchive)},
  { 48, 54, sizeof(::TSD::ContainerRemoveDrawablesCommandArchive)},
  { 55, 66, sizeof(::TSD::ContainerInsertChildrenCommandArchive)},
  { 72, 79, sizeof(::TSD::ContainerInsertDrawablesCommandArchive)},
  { 81, 89, sizeof(::TSD::ContainerReorderChildrenCommandArchive)},
  { 92, 101, sizeof(::TSD::GroupUngroupInformativeCommandArchive)},
  { 105, 112, sizeof(::TSD::InfoCommandArchive)},
  { 114, 124, sizeof(::TSD::ConnectionLineConnectCommandArchive)},
  { 129, 141, sizeof(::TSD::InfoGeometryCommandArchive)},
  { 148, 156, sizeof(::TSD::DrawablePathSourceCommandArchive)},
  { 159, 167, sizeof(::TSD::InstantAlphaCommandArchive)},
  { 170, 178, sizeof(::TSD::DrawableApplyThemeCommandArchive)},
  { 181, 187, sizeof(::TSD::AbstractStyleCommandArchive)},
  { 188, 196, sizeof(::TSD::StyledInfoSetStyleCommandArchive)},
  { 199, 207, sizeof(::TSD::BaseApplyPresetCommandArchive)},
  { 210, 216, sizeof(::TSD::ShapeApplyPresetCommandArchive)},
  { 217, 223, sizeof(::TSD::MediaApplyPresetCommandArchive)},
  { 224, 231, sizeof(::TSD::ShapeStyleSetValueCommandArchive)},
  { 233, 241, sizeof(::TSD::BaseStyleSetValueCommandArchive)},
  { 244, 258, sizeof(::TSD::MovieSetValueCommandArchive_PropertyValue)},
  { 267, 278, sizeof(::TSD::MovieSetValueCommandArchive)},
  { 284, 291, sizeof(::TSD::MediaStyleSetValueCommandArchive)},
  { 293, 318, sizeof(::TSD::ImageMediaCommandArchive)},
  { 338, 347, sizeof(::TSD::MediaOriginalSizeCommandArchive)},
  { 351, 359, sizeof(::TSD::MediaInfoGeometryCommandArchive)},
  { 362, 370, sizeof(::TSD::ImageNaturalSizeCommandArchive)},
  { 373, 381, sizeof(::TSD::ImageMaskCommandArchive)},
  { 384, 398, sizeof(::TSD::ImageAdjustmentsCommandArchive)},
  { 407, 418, sizeof(::TSD::MediaFlagsCommandArchive)},
  { 424, 435, sizeof(::TSD::DrawablesCommandGroupArchive)},
  { 441, 454, sizeof(::TSD::ExteriorTextWrapCommandArchive)},
  { 462, 470, sizeof(::TSD::DrawableHyperlinkCommandArchive)},
  { 473, 484, sizeof(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive)},
  { 490, 520, sizeof(::TSD::ImageReplaceCommandArchive)},
  { 545, 553, sizeof(::TSD::DrawableLockCommandArchive)},
  { 556, 566, sizeof(::TSD::DrawableInfoCommentCommandArchive)},
  { 571, 579, sizeof(::TSD::DrawablePencilAnnotationCommandArchive)},
  { 582, 590, sizeof(::TSD::AbstractGuideCommandArchive)},
  { 593, 600, sizeof(::TSD::GuideCommandArchive)},
  { 602, 610, sizeof(::TSD::DrawableAspectRatioLockedCommandArchive)},
  { 613, 621, sizeof(::TSD::DrawableAccessibilityDescriptionCommandArchive)},
  { 624, 633, sizeof(::TSD::PasteStyleCommandArchive)},
  { 637, 651, sizeof(::TSD::ImageInfoAbstractGeometryCommandArchive)},
  { 660, 666, sizeof(::TSD::ImageInfoGeometryCommandArchive)},
  { 667, 673, sizeof(::TSD::ImageInfoMaskGeometryCommandArchive)},
  { 674, -1, sizeof(::TSD::InfoCollectionSelectionTransformerHelperArchive)},
  { 680, 687, sizeof(::TSD::DrawableSelectionTransformerArchive)},
  { 689, -1, sizeof(::TSD::InfoHyperlinkSelectionTransformerArchive)},
  { 694, 700, sizeof(::TSD::CanvasSelectionTransformerArchive)},
  { 701, -1, sizeof(::TSD::PathSelectionTransformerArchive)},
  { 706, 712, sizeof(::TSD::ShapeSelectionTransformerArchive)},
  { 713, 719, sizeof(::TSD::GroupSelectionTransformerArchive)},
  { 720, 726, sizeof(::TSD::PencilAnnotationSelectionTransformerArchive)},
  { 727, 735, sizeof(::TSD::FreehandDrawingOpacityCommandArchive)},
  { 738, 746, sizeof(::TSD::FreehandDrawingAnimationCommandArchive)},
  { 749, 760, sizeof(::TSD::InsertCaptionOrTitleCommandArchive)},
  { 766, 776, sizeof(::TSD::RemoveCaptionOrTitleCommandArchive)},
  { 781, 790, sizeof(::TSD::SetCaptionOrTitleVisibilityCommandArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_UndoObjectArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GroupDrawablesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_UngroupGroupCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ContainerRemoveChildrenCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ContainerRemoveDrawablesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ContainerInsertChildrenCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ContainerInsertDrawablesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ContainerReorderChildrenCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GroupUngroupInformativeCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_InfoCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ConnectionLineConnectCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_InfoGeometryCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawablePathSourceCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_InstantAlphaCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableApplyThemeCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_AbstractStyleCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_StyledInfoSetStyleCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_BaseApplyPresetCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ShapeApplyPresetCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MediaApplyPresetCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ShapeStyleSetValueCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_BaseStyleSetValueCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MovieSetValueCommandArchive_PropertyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MovieSetValueCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MediaStyleSetValueCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageMediaCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MediaOriginalSizeCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MediaInfoGeometryCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageNaturalSizeCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageMaskCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageAdjustmentsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MediaFlagsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawablesCommandGroupArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ExteriorTextWrapCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableHyperlinkCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_CommentInvalidatingCommandSelectionBehaviorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageReplaceCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableLockCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableInfoCommentCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawablePencilAnnotationCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_AbstractGuideCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GuideCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableAspectRatioLockedCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableAccessibilityDescriptionCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PasteStyleCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageInfoAbstractGeometryCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageInfoGeometryCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageInfoMaskGeometryCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_InfoHyperlinkSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_CanvasSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PathSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ShapeSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GroupSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PencilAnnotationSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_FreehandDrawingOpacityCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_FreehandDrawingAnimationCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_InsertCaptionOrTitleCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_RemoveCaptionOrTitleCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SetCaptionOrTitleVisibilityCommandArchive_default_instance_),
};

const char descriptor_table_protodef_TSDCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TSDCommandArchives.proto\022\003TSD\032\021TSPMess"
  "ages.proto\032\021TSKArchives.proto\032\021TSSArchiv"
  "es.proto\032\021TSDArchives.proto\032\025TSDArchives"
  ".sos.proto\"v\n\021UndoObjectArchive\022\"\n\nstyle"
  "sheet\030\002 \001(\0132\016.TSP.Reference\022\037\n\007objects\030\001"
  " \003(\0132\016.TSP.Reference\022\014\n\004keys\030\003 \003(\t\022\016\n\006co"
  "unts\030\004 \003(\r\"\204\001\n\034GroupDrawablesCommandArch"
  "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
  "!\n\tdrawables\030\002 \003(\0132\016.TSP.Reference\022\035\n\005gr"
  "oup\030\003 \001(\0132\016.TSP.Reference\"\202\001\n\032UngroupGro"
  "upCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Co"
  "mmandArchive\022!\n\tdrawables\030\002 \003(\0132\016.TSP.Re"
  "ference\022\035\n\005group\030\003 \001(\0132\016.TSP.Reference\"\306"
  "\001\n%ContainerRemoveChildrenCommandArchive"
  "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022(\n\021"
  "container_id_path\030\002 \001(\0132\r.TSP.UUIDPath\022-"
  "\n\targs_list\030\003 \003(\0132\032.TSK.RemoveIdOperatio"
  "nArgs\022 \n\010children\030\004 \003(\0132\016.TSP.Reference\""
  "c\n&ContainerRemoveDrawablesCommandArchiv"
  "e\0229\n\005super\030\001 \002(\0132*.TSD.ContainerRemoveCh"
  "ildrenCommandArchive\"\217\002\n%ContainerInsert"
  "ChildrenCommandArchive\022\"\n\005super\030\001 \002(\0132\023."
  "TSK.CommandArchive\022(\n\021container_id_path\030"
  "\002 \001(\0132\r.TSP.UUIDPath\022 \n\010children\030\003 \003(\0132\016"
  ".TSP.Reference\022*\n\targs_list\030\004 \003(\0132\027.TSK."
  "AddIdOperationArgs\022%\n\022custom_format_keys"
  "\030\005 \003(\0132\t.TSP.UUID\022#\n\013undo_object\030\006 \001(\0132\016"
  ".TSP.Reference\"\206\001\n&ContainerInsertDrawab"
  "lesCommandArchive\0229\n\005super\030\001 \002(\0132*.TSD.C"
  "ontainerInsertChildrenCommandArchive\022!\n\t"
  "drawables\030\002 \003(\0132\016.TSP.Reference\"\250\001\n&Cont"
  "ainerReorderChildrenCommandArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\022(\n\021contai"
  "ner_id_path\030\002 \001(\0132\r.TSP.UUIDPath\0220\n\targs"
  "_list\030\003 \003(\0132\035.TSK.RearrangeIdOperationAr"
  "gs\"\217\002\n%GroupUngroupInformativeCommandArc"
  "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\022%\n\rremoved_infos\030\002 \003(\0132\016.TSP.Reference\022"
  "&\n\016inserted_infos\030\003 \003(\0132\016.TSP.Reference\022"
  "L\n\014command_type\030\004 \001(\01626.TSD.GroupUngroup"
  "InformativeCommandArchive.CommandType\"%\n"
  "\013CommandType\022\t\n\005Group\020\000\022\013\n\007Ungroup\020\001\"]\n\022"
  "InfoCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
  "CommandArchive\022#\n\014info_id_path\030\002 \001(\0132\r.T"
  "SP.UUIDPath\"\351\001\n#ConnectionLineConnectCom"
  "mandArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoCom"
  "mandArchive\022$\n\021connected_from_id\030\004 \001(\0132\t"
  ".TSP.UUID\022\"\n\017connected_to_id\030\005 \001(\0132\t.TSP"
  ".UUID\022&\n\023old_connected_to_id\030\006 \001(\0132\t.TSP"
  ".UUID\022(\n\025old_connected_from_id\030\007 \001(\0132\t.T"
  "SP.UUID\"\250\002\n\032InfoGeometryCommandArchive\022&"
  "\n\005super\030\001 \002(\0132\027.TSD.InfoCommandArchive\022)"
  "\n\013newGeometry\030\002 \001(\0132\024.TSD.GeometryArchiv"
  "e\022)\n\013oldGeometry\030\003 \001(\0132\024.TSD.GeometryArc"
  "hive\022&\n\036matchObjectPlaceholderGeometry\030\004"
  " \001(\010\022)\n!oldMatchObjectPlaceholderGeometr"
  "y\030\005 \001(\010\022!\n\031shouldTriggerRtuAnimation\030\006 \001"
  "(\010\022\026\n\016initiatedOnWeb\030\007 \001(\010\"\254\001\n DrawableP"
  "athSourceCommandArchive\022&\n\005super\030\001 \002(\0132\027"
  ".TSD.InfoCommandArchive\022/\n\017old_path_sour"
  "ce\030\002 \001(\0132\026.TSD.PathSourceArchive\022/\n\017new_"
  "path_source\030\003 \001(\0132\026.TSD.PathSourceArchiv"
  "e\"|\n\032InstantAlphaCommandArchive\022&\n\005super"
  "\030\001 \002(\0132\027.TSD.InfoCommandArchive\022\032\n\007oldpa"
  "th\030\002 \001(\0132\t.TSP.Path\022\032\n\007newpath\030\003 \001(\0132\t.T"
  "SP.Path\"\222\001\n DrawableApplyThemeCommandArc"
  "hive\0221\n\005super\030\001 \002(\0132\".TSS.ApplyThemeChil"
  "dCommandArchive\022\034\n\004info\030\002 \001(\0132\016.TSP.Refe"
  "rence\022\035\n\005style\030\003 \001(\0132\016.TSP.Reference\"E\n\033"
  "AbstractStyleCommandArchive\022&\n\005super\030\001 \002"
  "(\0132\027.TSD.InfoCommandArchive\"\236\001\n StyledIn"
  "foSetStyleCommandArchive\022/\n\005super\030\001 \002(\0132"
  " .TSD.AbstractStyleCommandArchive\022!\n\tnew"
  "_style\030\002 \001(\0132\016.TSP.Reference\022&\n\016rollback"
  "_style\030\004 \001(\0132\016.TSP.Reference\"\236\001\n\035BaseApp"
  "lyPresetCommandArchive\022/\n\005super\030\001 \002(\0132 ."
  "TSD.AbstractStyleCommandArchive\022$\n\014prese"
  "t_style\030\002 \001(\0132\016.TSP.Reference\022&\n\016rollbac"
  "k_style\030\004 \001(\0132\016.TSP.Reference\"S\n\036ShapeAp"
  "plyPresetCommandArchive\0221\n\005super\030\001 \002(\0132\""
  ".TSD.BaseApplyPresetCommandArchive\"S\n\036Me"
  "diaApplyPresetCommandArchive\0221\n\005super\030\001 "
  "\002(\0132\".TSD.BaseApplyPresetCommandArchive\""
  "\227\001\n ShapeStyleSetValueCommandArchive\0223\n\005"
  "super\030\001 \002(\0132$.TSD.BaseStyleSetValueComma"
  "ndArchive\022>\n\006change\030\004 \001(\0132..TSDSOS.BaseS"
  "hapeStylePropertyChangeSetArchive\"\217\001\n\037Ba"
  "seStyleSetValueCommandArchive\022/\n\005super\030\001"
  " \002(\0132 .TSD.AbstractStyleCommandArchive\022!"
  "\n\told_style\030\004 \001(\0132\016.TSP.Reference\022\030\n\020is_"
  "border_change\030\005 \002(\010\"\221\005\n\033MovieSetValueCom"
  "mandArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoCom"
  "mandArchive\022\020\n\010property\030\002 \001(\005\022=\n\005value\030\003"
  " \001(\0132..TSD.MovieSetValueCommandArchive.P"
  "ropertyValue\022@\n\010oldValue\030\004 \001(\0132..TSD.Mov"
  "ieSetValueCommandArchive.PropertyValue\0222"
  "\n\026importedauxiliarymedia\030\005 \001(\0132\022.TSP.Dat"
  "aReference\0225\n\031oldimportedauxiliarymedia\030"
  "\006 \001(\0132\022.TSP.DataReference\032\225\002\n\rPropertyVa"
  "lue\022\021\n\tstarttime\030\001 \001(\001\022\017\n\007endtime\030\002 \001(\001\022"
  "\022\n\npostertime\030\003 \001(\001\022+\n\017posterimagedata\030\004"
  " \001(\0132\022.TSP.DataReference\022\020\n\010autoplay\030\005 \001"
  "(\010\022\?\n\nloopOption\030\006 \001(\0162+.TSD.MovieSetVal"
  "ueCommandArchive.LoopOption\022\016\n\006volume\030\007 "
  "\001(\002\022!\n\005media\030\010 \001(\0132\022.TSP.DataReference\022\031"
  "\n\021playsAcrossSlides\030\t \001(\010\"4\n\nLoopOption\022"
  "\010\n\004None\020\000\022\n\n\006Repeat\020\001\022\020\n\014BackAndForth\020\002\""
  "\223\001\n MediaStyleSetValueCommandArchive\0223\n\005"
  "super\030\001 \002(\0132$.TSD.BaseStyleSetValueComma"
  "ndArchive\022:\n\006change\030\004 \001(\0132*.TSDSOS.Media"
  "StylePropertyChangeSetArchive\"\367\007\n\030ImageM"
  "ediaCommandArchive\022&\n\005super\030\001 \002(\0132\027.TSD."
  "InfoCommandArchive\022(\n\014newImageData\030\010 \001(\013"
  "2\022.TSP.DataReference\022(\n\014oldImageData\030\t \001"
  "(\0132\022.TSP.DataReference\0220\n\024oldOriginalIma"
  "geData\030\n \001(\0132\022.TSP.DataReference\022!\n\016oldN"
  "aturalSize\030\006 \001(\0132\t.TSP.Size\0220\n\024newOrigin"
  "alImageData\030\013 \001(\0132\022.TSP.DataReference\0229\n"
  "\023oldImageAdjustments\030\014 \001(\0132\034.TSD.ImageAd"
  "justmentsArchive\0220\n\024oldAdjustedImageData"
  "\030\r \001(\0132\022.TSP.DataReference\0220\n\024oldEnhance"
  "dImageData\030\016 \001(\0132\022.TSP.DataReference\0226\n\020"
  "imageAdjustments\030\017 \001(\0132\034.TSD.ImageAdjust"
  "mentsArchive\022-\n\021adjustedImageData\030\020 \001(\0132"
  "\022.TSP.DataReference\022-\n\021enhancedImageData"
  "\030\021 \001(\0132\022.TSP.DataReference\0221\n\025newThumbna"
  "ilImageData\030\022 \001(\0132\022.TSP.DataReference\0221\n"
  "\025oldThumbnailImageData\030\023 \001(\0132\022.TSP.DataR"
  "eference\0226\n\032thumbnailAdjustedImageData\030\024"
  " \001(\0132\022.TSP.DataReference\0229\n\035oldThumbnail"
  "AdjustedImageData\030\025 \001(\0132\022.TSP.DataRefere"
  "nce\022-\n\025database_newImageData\030\003 \001(\0132\016.TSP"
  ".Reference\022-\n\025database_oldImageData\030\004 \001("
  "\0132\016.TSP.Reference\0225\n\035database_oldOrigina"
  "lImageData\030\005 \001(\0132\016.TSP.Reference\0225\n\035data"
  "base_newOriginalImageData\030\007 \001(\0132\016.TSP.Re"
  "ference\"\247\001\n\037MediaOriginalSizeCommandArch"
  "ive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoCommandArch"
  "ive\022\"\n\017newOriginalSize\030\002 \001(\0132\t.TSP.Size\022"
  "\"\n\017oldOriginalSize\030\003 \001(\0132\t.TSP.Size\022\024\n\014p"
  "ropertyName\030\004 \002(\t\"\231\001\n\037MediaInfoGeometryC"
  "ommandArchive\022.\n\005super\030\001 \002(\0132\037.TSD.InfoG"
  "eometryCommandArchive\022\"\n\017newOriginalSize"
  "\030\002 \002(\0132\t.TSP.Size\022\"\n\017oldOriginalSize\030\003 \002"
  "(\0132\t.TSP.Size\"\222\001\n\036ImageNaturalSizeComman"
  "dArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoComman"
  "dArchive\022#\n\020new_natural_size\030\002 \001(\0132\t.TSP"
  ".Size\022#\n\020old_natural_size\030\003 \001(\0132\t.TSP.Si"
  "ze\"\213\001\n\027ImageMaskCommandArchive\022&\n\005super\030"
  "\001 \002(\0132\027.TSD.InfoCommandArchive\022#\n\013newMas"
  "kInfo\030\002 \001(\0132\016.TSP.Reference\022#\n\013oldMaskIn"
  "fo\030\003 \001(\0132\016.TSP.Reference\"\206\004\n\036ImageAdjust"
  "mentsCommandArchive\022&\n\005super\030\001 \002(\0132\027.TSD"
  ".InfoCommandArchive\022;\n\025old_image_adjustm"
  "ents\030\002 \001(\0132\034.TSD.ImageAdjustmentsArchive"
  "\022;\n\025new_image_adjustments\030\003 \001(\0132\034.TSD.Im"
  "ageAdjustmentsArchive\022-\n\021adjustedImageDa"
  "ta\030\004 \001(\0132\022.TSP.DataReference\0225\n\031replaced"
  "AdjustedImageData\030\005 \001(\0132\022.TSP.DataRefere"
  "nce\022-\n\021enhancedImageData\030\006 \001(\0132\022.TSP.Dat"
  "aReference\0225\n\031replacedEnhancedImageData\030"
  "\007 \001(\0132\022.TSP.DataReference\0226\n\032thumbnailAd"
  "justedImageData\030\010 \001(\0132\022.TSP.DataReferenc"
  "e\022>\n\"replacedThumbnailAdjustedImageData\030"
  "\t \001(\0132\022.TSP.DataReference\"\311\001\n\030MediaFlags"
  "CommandArchive\022&\n\005super\030\001 \002(\0132\027.TSD.Info"
  "CommandArchive\022\032\n\022was_media_replaced\030\005 \001"
  "(\010\022\026\n\016is_placeholder\030\006 \001(\010\022\036\n\026old_was_me"
  "dia_replaced\030\007 \001(\010\022\032\n\022old_is_placeholder"
  "\030\010 \001(\010\022\025\n\rproperty_name\030\004 \002(\t\"\377\002\n\034Drawab"
  "lesCommandGroupArchive\022\'\n\005super\030\001 \002(\0132\030."
  "TSK.CommandGroupArchive\0227\n\022obsolete_sele"
  "ction\030\002 \001(\0132\033.TSD.CanvasSelectionArchive"
  "\022)\n\021modelforselection\030\003 \001(\0132\016.TSP.Refere"
  "nce\022I\n\004type\030\004 \001(\0162;.TSD.DrawablesCommand"
  "GroupArchive.DrawablesCommandGroupType\022\017"
  "\n\007forDrag\030\005 \001(\010\022)\n\021archivedselection\030\006 \001"
  "(\0132\016.TSP.Reference\"K\n\031DrawablesCommandGr"
  "oupType\022\020\n\014Constructive\020\001\022\017\n\013Destructive"
  "\020\002\022\013\n\007InPlace\020\003\"\370\001\n\036ExteriorTextWrapComm"
  "andArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoComm"
  "andArchive\022<\n\026old_exterior_text_wrap\030\003 \001"
  "(\0132\034.TSD.ExteriorTextWrapArchive\022\014\n\004type"
  "\030\004 \001(\r\022\021\n\tdirection\030\005 \001(\r\022\020\n\010fit_type\030\006 "
  "\001(\r\022\016\n\006margin\030\007 \001(\002\022\027\n\017alpha_threshold\030\010"
  " \001(\002\022\024\n\014is_html_wrap\030\t \001(\010\"}\n\037DrawableHy"
  "perlinkCommandArchive\022&\n\005super\030\001 \002(\0132\027.T"
  "SD.InfoCommandArchive\022\030\n\020oldhyperlink_ur"
  "l\030\002 \001(\t\022\030\n\020newhyperlink_url\030\003 \001(\t\"\244\002\n2Co"
  "mmentInvalidatingCommandSelectionBehavio"
  "rArchive\0223\n\005super\030\001 \002(\0132$.TSK.CommandSel"
  "ectionBehaviorArchive\0225\n\035annotation_disp"
  "laying_command\030\002 \001(\0132\016.TSP.Reference\022\035\n\025"
  "begin_editing_on_undo\030\003 \001(\010\022\035\n\025begin_edi"
  "ting_on_redo\030\004 \001(\010\022!\n\031should_invalidate_"
  "on_undo\030\005 \001(\010\022!\n\031should_invalidate_on_re"
  "do\030\006 \001(\010\"\370\t\n\032ImageReplaceCommandArchive\022"
  "&\n\005super\030\001 \002(\0132\027.TSD.InfoCommandArchive\022"
  "*\n\016new_image_data\030\002 \001(\0132\022.TSP.DataRefere"
  "nce\0223\n\027new_original_image_data\030\003 \001(\0132\022.T"
  "SP.DataReference\022*\n\016old_image_data\030\004 \001(\013"
  "2\022.TSP.DataReference\0223\n\027old_original_ima"
  "ge_data\030\005 \001(\0132\022.TSP.DataReference\022%\n\022ins"
  "tant_alpha_path\030\006 \001(\0132\t.TSP.Path\022)\n\026old_"
  "instant_alpha_path\030\007 \001(\0132\t.TSP.Path\022*\n\027n"
  "atural_size_for_IAPath\030\010 \001(\0132\t.TSP.Size\022"
  ".\n\033old_natural_size_for_IAPath\030\t \001(\0132\t.T"
  "SP.Size\0223\n\025target_image_geometry\030\n \001(\0132\024"
  ".TSD.GeometryArchive\0227\n\031old_target_image"
  "_geometry\030\014 \001(\0132\024.TSD.GeometryArchive\0222\n"
  "\024target_mask_geometry\030\r \001(\0132\024.TSD.Geomet"
  "ryArchive\0226\n\030old_target_mask_geometry\030\016 "
  "\001(\0132\024.TSD.GeometryArchive\0227\n\021image_adjus"
  "tments\030\017 \001(\0132\034.TSD.ImageAdjustmentsArchi"
  "ve\022/\n\023adjusted_image_data\030\020 \001(\0132\022.TSP.Da"
  "taReference\022/\n\023enhanced_image_data\030\021 \001(\013"
  "2\022.TSP.DataReference\022;\n\025old_image_adjust"
  "ments\030\022 \001(\0132\034.TSD.ImageAdjustmentsArchiv"
  "e\0223\n\027old_adjusted_image_data\030\023 \001(\0132\022.TSP"
  ".DataReference\0223\n\027old_enhanced_image_dat"
  "a\030\024 \001(\0132\022.TSP.DataReference\0220\n\024thumbnail"
  "_image_data\030\025 \001(\0132\022.TSP.DataReference\0224\n"
  "\030old_thumbnail_image_data\030\026 \001(\0132\022.TSP.Da"
  "taReference\0229\n\035thumbnail_adjusted_image_"
  "data\030\027 \001(\0132\022.TSP.DataReference\022=\n!old_th"
  "umbnail_adjusted_image_data\030\030 \001(\0132\022.TSP."
  "DataReference\022\037\n\014natural_size\030\031 \001(\0132\t.TS"
  "P.Size\022#\n\020old_natural_size\030\032 \001(\0132\t.TSP.S"
  "ize\"h\n\032DrawableLockCommandArchive\022&\n\005sup"
  "er\030\001 \002(\0132\027.TSD.InfoCommandArchive\022\016\n\006loc"
  "ked\030\002 \001(\010\022\022\n\nwas_locked\030\003 \001(\010\"\377\001\n!Drawab"
  "leInfoCommentCommandArchive\022&\n\005super\030\001 \002"
  "(\0132\027.TSD.InfoCommandArchive\022#\n\013old_comme"
  "nt\030\002 \001(\0132\016.TSP.Reference\022#\n\013new_comment\030"
  "\003 \001(\0132\016.TSP.Reference\0223\n\017forward_variant"
  "\030\004 \001(\0162\032.TSD.CommentCommandVariant\0223\n\017in"
  "verse_variant\030\005 \001(\0162\032.TSD.CommentCommand"
  "Variant\"\267\001\n&DrawablePencilAnnotationComm"
  "andArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoComm"
  "andArchive\0220\n\030pencil_annotation_to_add\030\002"
  " \001(\0132\016.TSP.Reference\0223\n\033pencil_annotatio"
  "n_to_remove\030\003 \001(\0132\016.TSP.Reference\"\245\001\n\033Ab"
  "stractGuideCommandArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\0220\n\nold_guides\030\007 \003("
  "\0132\034.TSD.UserDefinedGuideArchive\0220\n\nnew_g"
  "uides\030\010 \003(\0132\034.TSD.UserDefinedGuideArchiv"
  "e\"n\n\023GuideCommandArchive\022/\n\005super\030\001 \002(\0132"
  " .TSD.AbstractGuideCommandArchive\022&\n\017sto"
  "rage_id_path\030\002 \002(\0132\r.TSP.UUIDPath\"\217\001\n\'Dr"
  "awableAspectRatioLockedCommandArchive\022&\n"
  "\005super\030\001 \002(\0132\027.TSD.InfoCommandArchive\022\033\n"
  "\023aspect_ratio_locked\030\002 \001(\010\022\037\n\027was_aspect"
  "_ratio_locked\030\003 \001(\010\"\242\001\n.DrawableAccessib"
  "ilityDescriptionCommandArchive\022&\n\005super\030"
  "\001 \002(\0132\027.TSD.InfoCommandArchive\022!\n\031access"
  "ibility_description\030\002 \001(\t\022%\n\035old_accessi"
  "bility_description\030\003 \001(\t\"\260\001\n\030PasteStyleC"
  "ommandArchive\022/\n\005super\030\001 \002(\0132 .TSD.Abstr"
  "actStyleCommandArchive\022!\n\tnew_style\030\002 \001("
  "\0132\016.TSP.Reference\022&\n\016rollback_style\030\005 \001("
  "\0132\016.TSP.Reference\022\030\n\020tail_end_on_left\030\004 "
  "\001(\010\"\333\003\n\'ImageInfoAbstractGeometryCommand"
  "Archive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoCommand"
  "Archive\0220\n\022new_image_geometry\030\002 \001(\0132\024.TS"
  "D.GeometryArchive\0220\n\022old_image_geometry\030"
  "\003 \001(\0132\024.TSD.GeometryArchive\022/\n\021new_mask_"
  "geometry\030\004 \001(\0132\024.TSD.GeometryArchive\022/\n\021"
  "old_mask_geometry\030\005 \001(\0132\024.TSD.GeometryAr"
  "chive\0224\n\024new_mask_path_source\030\006 \001(\0132\026.TS"
  "D.PathSourceArchive\0224\n\024old_mask_path_sou"
  "rce\030\007 \001(\0132\026.TSD.PathSourceArchive\022*\n\027new"
  "_image_original_size\030\010 \001(\0132\t.TSP.Size\022*\n"
  "\027old_image_original_size\030\t \001(\0132\t.TSP.Siz"
  "e\"^\n\037ImageInfoGeometryCommandArchive\022;\n\005"
  "super\030\001 \002(\0132,.TSD.ImageInfoAbstractGeome"
  "tryCommandArchive\"b\n#ImageInfoMaskGeomet"
  "ryCommandArchive\022;\n\005super\030\001 \002(\0132,.TSD.Im"
  "ageInfoAbstractGeometryCommandArchive\"]\n"
  "/InfoCollectionSelectionTransformerHelpe"
  "rArchive\022*\n\023info_uuid_path_list\030\001 \003(\0132\r."
  "TSP.UUIDPath\"\261\001\n#DrawableSelectionTransf"
  "ormerArchive\022P\n\022transformer_helper\030\001 \002(\013"
  "24.TSD.InfoCollectionSelectionTransforme"
  "rHelperArchive\0228\n untransformed_drawable"
  "_selection\030\002 \002(\0132\016.TSP.Reference\"*\n(Info"
  "HyperlinkSelectionTransformerArchive\"u\n!"
  "CanvasSelectionTransformerArchive\022P\n\022tra"
  "nsformer_helper\030\001 \002(\01324.TSD.InfoCollecti"
  "onSelectionTransformerHelperArchive\"!\n\037P"
  "athSelectionTransformerArchive\"[\n ShapeS"
  "electionTransformerArchive\0227\n\005super\030\001 \002("
  "\0132(.TSD.DrawableSelectionTransformerArch"
  "ive\"[\n GroupSelectionTransformerArchive\022"
  "7\n\005super\030\001 \002(\0132(.TSD.DrawableSelectionTr"
  "ansformerArchive\"X\n+PencilAnnotationSele"
  "ctionTransformerArchive\022)\n\026pencil_annota"
  "tion_uuid\030\001 \002(\0132\t.TSP.UUID\"t\n$FreehandDr"
  "awingOpacityCommandArchive\022&\n\005super\030\001 \002("
  "\0132\027.TSD.InfoCommandArchive\022\017\n\007opacity\030\002 "
  "\001(\001\022\023\n\013old_opacity\030\003 \001(\001\"\306\001\n&FreehandDra"
  "wingAnimationCommandArchive\022&\n\005super\030\001 \002"
  "(\0132\027.TSD.InfoCommandArchive\0227\n\tanimation"
  "\030\002 \001(\0132$.TSD.FreehandDrawingAnimationArc"
  "hive\022;\n\rold_animation\030\003 \001(\0132$.TSD.Freeha"
  "ndDrawingAnimationArchive\"\262\002\n\"InsertCapt"
  "ionOrTitleCommandArchive\022\"\n\005super\030\001 \002(\0132"
  "\023.TSK.CommandArchive\022,\n\025drawable_info_id"
  "_path\030\002 \001(\0132\r.TSP.UUIDPath\022-\n\025caption_or"
  "_title_info\030\003 \001(\0132\016.TSP.Reference\022.\n\033add"
  "ed_caption_or_title_uuid\030\004 \001(\0132\t.TSP.UUI"
  "D\0226\n\025caption_or_title_kind\030\005 \001(\0162\027.TSD.C"
  "aptionOrTitleKind\022#\n\013undo_object\030\006 \001(\0132\016"
  ".TSP.Reference\"\227\002\n\"RemoveCaptionOrTitleC"
  "ommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\022,\n\025drawable_info_id_path\030\002 \001(\013"
  "2\r.TSP.UUIDPath\0225\n\035removed_caption_or_ti"
  "tle_info\030\003 \001(\0132\016.TSP.Reference\0220\n\035remove"
  "d_caption_or_title_uuid\030\004 \001(\0132\t.TSP.UUID"
  "\0226\n\025caption_or_title_kind\030\005 \001(\0162\027.TSD.Ca"
  "ptionOrTitleKind\"\257\001\n)SetCaptionOrTitleVi"
  "sibilityCommandArchive\022&\n\005super\030\001 \002(\0132\027."
  "TSD.InfoCommandArchive\0226\n\025caption_or_tit"
  "le_kind\030\002 \001(\0162\027.TSD.CaptionOrTitleKind\022\016"
  "\n\006hidden\030\003 \001(\010\022\022\n\nwas_hidden\030\004 \001(\010*V\n\025Co"
  "mmentCommandVariant\022\017\n\013BaseComment\020\000\022\014\n\010"
  "AddReply\020\001\022\r\n\tEditReply\020\002\022\017\n\013DeleteReply"
  "\020\003*,\n\022CaptionOrTitleKind\022\013\n\007Caption\020\001\022\t\n"
  "\005Title\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSDCommandArchives_2eproto_deps[5] = {
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDArchives_2esos_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSDCommandArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSDCommandArchives_2eproto = {
  false, false, 13088, descriptor_table_protodef_TSDCommandArchives_2eproto, "TSDCommandArchives.proto", 
  &descriptor_table_TSDCommandArchives_2eproto_once, descriptor_table_TSDCommandArchives_2eproto_deps, 5, 61,
  schemas, file_default_instances, TableStruct_TSDCommandArchives_2eproto::offsets,
  file_level_metadata_TSDCommandArchives_2eproto, file_level_enum_descriptors_TSDCommandArchives_2eproto, file_level_service_descriptors_TSDCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSDCommandArchives_2eproto_getter() {
  return &descriptor_table_TSDCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSDCommandArchives_2eproto(&descriptor_table_TSDCommandArchives_2eproto);
namespace TSD {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupUngroupInformativeCommandArchive_CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[0];
}
bool GroupUngroupInformativeCommandArchive_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::Group;
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::Ungroup;
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::CommandType_MIN;
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::CommandType_MAX;
constexpr int GroupUngroupInformativeCommandArchive::CommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovieSetValueCommandArchive_LoopOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[1];
}
bool MovieSetValueCommandArchive_LoopOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::None;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::Repeat;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::BackAndForth;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::LoopOption_MIN;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::LoopOption_MAX;
constexpr int MovieSetValueCommandArchive::LoopOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[2];
}
bool DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::Constructive;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::Destructive;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::InPlace;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::DrawablesCommandGroupType_MIN;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::DrawablesCommandGroupType_MAX;
constexpr int DrawablesCommandGroupArchive::DrawablesCommandGroupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommentCommandVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[3];
}
bool CommentCommandVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaptionOrTitleKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[4];
}
bool CaptionOrTitleKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UndoObjectArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoObjectArchive>()._has_bits_);
  static const ::TSP::Reference& stylesheet(const UndoObjectArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
UndoObjectArchive::_Internal::stylesheet(const UndoObjectArchive* msg) {
  return *msg->stylesheet_;
}
void UndoObjectArchive::clear_stylesheet() {
  if (stylesheet_ != nullptr) stylesheet_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UndoObjectArchive::clear_objects() {
  objects_.Clear();
}
UndoObjectArchive::UndoObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena),
  keys_(arena),
  counts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.UndoObjectArchive)
}
UndoObjectArchive::UndoObjectArchive(const UndoObjectArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      objects_(from.objects_),
      keys_(from.keys_),
      counts_(from.counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stylesheet()) {
    stylesheet_ = new ::TSP::Reference(*from.stylesheet_);
  } else {
    stylesheet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.UndoObjectArchive)
}

void UndoObjectArchive::SharedCtor() {
stylesheet_ = nullptr;
}

UndoObjectArchive::~UndoObjectArchive() {
  // @@protoc_insertion_point(destructor:TSD.UndoObjectArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UndoObjectArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stylesheet_;
}

void UndoObjectArchive::ArenaDtor(void* object) {
  UndoObjectArchive* _this = reinterpret_cast< UndoObjectArchive* >(object);
  (void)_this;
}
void UndoObjectArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoObjectArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoObjectArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.UndoObjectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  keys_.Clear();
  counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stylesheet_ != nullptr);
    stylesheet_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoObjectArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference stylesheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.UndoObjectArchive.keys");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 counts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_counts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoObjectArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.UndoObjectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objects(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference stylesheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stylesheet(this), target, stream);
  }

  // repeated string keys = 3;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.UndoObjectArchive.keys");
    target = stream->WriteString(3, s, target);
  }

  // repeated uint32 counts = 4;
  for (int i = 0, n = this->_internal_counts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_counts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.UndoObjectArchive)
  return target;
}

size_t UndoObjectArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.UndoObjectArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  // repeated uint32 counts = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->counts_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_counts_size());
    total_size += data_size;
  }

  // optional .TSP.Reference stylesheet = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stylesheet_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndoObjectArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.UndoObjectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UndoObjectArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UndoObjectArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.UndoObjectArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.UndoObjectArchive)
    MergeFrom(*source);
  }
}

void UndoObjectArchive::MergeFrom(const UndoObjectArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.UndoObjectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  keys_.MergeFrom(from.keys_);
  counts_.MergeFrom(from.counts_);
  if (from._internal_has_stylesheet()) {
    _internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(from._internal_stylesheet());
  }
}

void UndoObjectArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.UndoObjectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoObjectArchive::CopyFrom(const UndoObjectArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.UndoObjectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoObjectArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(objects_)) return false;
  if (_internal_has_stylesheet()) {
    if (!stylesheet_->IsInitialized()) return false;
  }
  return true;
}

void UndoObjectArchive::InternalSwap(UndoObjectArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objects_.InternalSwap(&other->objects_);
  keys_.InternalSwap(&other->keys_);
  counts_.InternalSwap(&other->counts_);
  swap(stylesheet_, other->stylesheet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoObjectArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[0]);
}

// ===================================================================

class GroupDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupDrawablesCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const GroupDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& group(const GroupDrawablesCommandArchive* msg);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
GroupDrawablesCommandArchive::_Internal::super(const GroupDrawablesCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
GroupDrawablesCommandArchive::_Internal::group(const GroupDrawablesCommandArchive* msg) {
  return *msg->group_;
}
void GroupDrawablesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GroupDrawablesCommandArchive::clear_drawables() {
  drawables_.Clear();
}
void GroupDrawablesCommandArchive::clear_group() {
  if (group_ != nullptr) group_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GroupDrawablesCommandArchive::GroupDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GroupDrawablesCommandArchive)
}
GroupDrawablesCommandArchive::GroupDrawablesCommandArchive(const GroupDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawables_(from.drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_group()) {
    group_ = new ::TSP::Reference(*from.group_);
  } else {
    group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.GroupDrawablesCommandArchive)
}

void GroupDrawablesCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&super_)) + sizeof(group_));
}

GroupDrawablesCommandArchive::~GroupDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.GroupDrawablesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete group_;
}

void GroupDrawablesCommandArchive::ArenaDtor(void* object) {
  GroupDrawablesCommandArchive* _this = reinterpret_cast< GroupDrawablesCommandArchive* >(object);
  (void)_this;
}
void GroupDrawablesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupDrawablesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GroupDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_ != nullptr);
      group_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupDrawablesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupDrawablesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GroupDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference drawables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_drawables(i), target, stream);
  }

  // optional .TSP.Reference group = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GroupDrawablesCommandArchive)
  return target;
}

size_t GroupDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GroupDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 2;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference group = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupDrawablesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GroupDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupDrawablesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupDrawablesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GroupDrawablesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GroupDrawablesCommandArchive)
    MergeFrom(*source);
  }
}

void GroupDrawablesCommandArchive::MergeFrom(const GroupDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GroupDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawables_.MergeFrom(from.drawables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_group()->::TSP::Reference::MergeFrom(from._internal_group());
    }
  }
}

void GroupDrawablesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GroupDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupDrawablesCommandArchive::CopyFrom(const GroupDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GroupDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_group()) {
    if (!group_->IsInitialized()) return false;
  }
  return true;
}

void GroupDrawablesCommandArchive::InternalSwap(GroupDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawables_.InternalSwap(&other->drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupDrawablesCommandArchive, group_)
      + sizeof(GroupDrawablesCommandArchive::group_)
      - PROTOBUF_FIELD_OFFSET(GroupDrawablesCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupDrawablesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[1]);
}

// ===================================================================

class UngroupGroupCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UngroupGroupCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const UngroupGroupCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& group(const UngroupGroupCommandArchive* msg);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
UngroupGroupCommandArchive::_Internal::super(const UngroupGroupCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
UngroupGroupCommandArchive::_Internal::group(const UngroupGroupCommandArchive* msg) {
  return *msg->group_;
}
void UngroupGroupCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UngroupGroupCommandArchive::clear_drawables() {
  drawables_.Clear();
}
void UngroupGroupCommandArchive::clear_group() {
  if (group_ != nullptr) group_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UngroupGroupCommandArchive::UngroupGroupCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.UngroupGroupCommandArchive)
}
UngroupGroupCommandArchive::UngroupGroupCommandArchive(const UngroupGroupCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawables_(from.drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_group()) {
    group_ = new ::TSP::Reference(*from.group_);
  } else {
    group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.UngroupGroupCommandArchive)
}

void UngroupGroupCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&super_)) + sizeof(group_));
}

UngroupGroupCommandArchive::~UngroupGroupCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.UngroupGroupCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UngroupGroupCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete group_;
}

void UngroupGroupCommandArchive::ArenaDtor(void* object) {
  UngroupGroupCommandArchive* _this = reinterpret_cast< UngroupGroupCommandArchive* >(object);
  (void)_this;
}
void UngroupGroupCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UngroupGroupCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UngroupGroupCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.UngroupGroupCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_ != nullptr);
      group_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UngroupGroupCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UngroupGroupCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.UngroupGroupCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference drawables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_drawables(i), target, stream);
  }

  // optional .TSP.Reference group = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.UngroupGroupCommandArchive)
  return target;
}

size_t UngroupGroupCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.UngroupGroupCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 2;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference group = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UngroupGroupCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.UngroupGroupCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UngroupGroupCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UngroupGroupCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.UngroupGroupCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.UngroupGroupCommandArchive)
    MergeFrom(*source);
  }
}

void UngroupGroupCommandArchive::MergeFrom(const UngroupGroupCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.UngroupGroupCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawables_.MergeFrom(from.drawables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_group()->::TSP::Reference::MergeFrom(from._internal_group());
    }
  }
}

void UngroupGroupCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.UngroupGroupCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UngroupGroupCommandArchive::CopyFrom(const UngroupGroupCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.UngroupGroupCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UngroupGroupCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_group()) {
    if (!group_->IsInitialized()) return false;
  }
  return true;
}

void UngroupGroupCommandArchive::InternalSwap(UngroupGroupCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawables_.InternalSwap(&other->drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UngroupGroupCommandArchive, group_)
      + sizeof(UngroupGroupCommandArchive::group_)
      - PROTOBUF_FIELD_OFFSET(UngroupGroupCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UngroupGroupCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[2]);
}

// ===================================================================

class ContainerRemoveChildrenCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerRemoveChildrenCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ContainerRemoveChildrenCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& container_id_path(const ContainerRemoveChildrenCommandArchive* msg);
  static void set_has_container_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ContainerRemoveChildrenCommandArchive::_Internal::super(const ContainerRemoveChildrenCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
ContainerRemoveChildrenCommandArchive::_Internal::container_id_path(const ContainerRemoveChildrenCommandArchive* msg) {
  return *msg->container_id_path_;
}
void ContainerRemoveChildrenCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ContainerRemoveChildrenCommandArchive::clear_container_id_path() {
  if (container_id_path_ != nullptr) container_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ContainerRemoveChildrenCommandArchive::clear_args_list() {
  args_list_.Clear();
}
void ContainerRemoveChildrenCommandArchive::clear_children() {
  children_.Clear();
}
ContainerRemoveChildrenCommandArchive::ContainerRemoveChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerRemoveChildrenCommandArchive)
}
ContainerRemoveChildrenCommandArchive::ContainerRemoveChildrenCommandArchive(const ContainerRemoveChildrenCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_list_(from.args_list_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_container_id_path()) {
    container_id_path_ = new ::TSP::UUIDPath(*from.container_id_path_);
  } else {
    container_id_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerRemoveChildrenCommandArchive)
}

void ContainerRemoveChildrenCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&container_id_path_) -
    reinterpret_cast<char*>(&super_)) + sizeof(container_id_path_));
}

ContainerRemoveChildrenCommandArchive::~ContainerRemoveChildrenCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerRemoveChildrenCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerRemoveChildrenCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete container_id_path_;
}

void ContainerRemoveChildrenCommandArchive::ArenaDtor(void* object) {
  ContainerRemoveChildrenCommandArchive* _this = reinterpret_cast< ContainerRemoveChildrenCommandArchive* >(object);
  (void)_this;
}
void ContainerRemoveChildrenCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerRemoveChildrenCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainerRemoveChildrenCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerRemoveChildrenCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(container_id_path_ != nullptr);
      container_id_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerRemoveChildrenCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath container_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RemoveIdOperationArgs args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference children = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerRemoveChildrenCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerRemoveChildrenCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::container_id_path(this), target, stream);
  }

  // repeated .TSK.RemoveIdOperationArgs args_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_args_list(i), target, stream);
  }

  // repeated .TSP.Reference children = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerRemoveChildrenCommandArchive)
  return target;
}

size_t ContainerRemoveChildrenCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerRemoveChildrenCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RemoveIdOperationArgs args_list = 3;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference children = 4;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_id_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerRemoveChildrenCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ContainerRemoveChildrenCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerRemoveChildrenCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerRemoveChildrenCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ContainerRemoveChildrenCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ContainerRemoveChildrenCommandArchive)
    MergeFrom(*source);
  }
}

void ContainerRemoveChildrenCommandArchive::MergeFrom(const ContainerRemoveChildrenCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerRemoveChildrenCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
  children_.MergeFrom(from.children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_container_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_container_id_path());
    }
  }
}

void ContainerRemoveChildrenCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ContainerRemoveChildrenCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerRemoveChildrenCommandArchive::CopyFrom(const ContainerRemoveChildrenCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerRemoveChildrenCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerRemoveChildrenCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(children_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_container_id_path()) {
    if (!container_id_path_->IsInitialized()) return false;
  }
  return true;
}

void ContainerRemoveChildrenCommandArchive::InternalSwap(ContainerRemoveChildrenCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_list_.InternalSwap(&other->args_list_);
  children_.InternalSwap(&other->children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, container_id_path_)
      + sizeof(ContainerRemoveChildrenCommandArchive::container_id_path_)
      - PROTOBUF_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerRemoveChildrenCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[3]);
}

// ===================================================================

class ContainerRemoveDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerRemoveDrawablesCommandArchive>()._has_bits_);
  static const ::TSD::ContainerRemoveChildrenCommandArchive& super(const ContainerRemoveDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ContainerRemoveChildrenCommandArchive&
ContainerRemoveDrawablesCommandArchive::_Internal::super(const ContainerRemoveDrawablesCommandArchive* msg) {
  return *msg->super_;
}
ContainerRemoveDrawablesCommandArchive::ContainerRemoveDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerRemoveDrawablesCommandArchive)
}
ContainerRemoveDrawablesCommandArchive::ContainerRemoveDrawablesCommandArchive(const ContainerRemoveDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ContainerRemoveChildrenCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerRemoveDrawablesCommandArchive)
}

void ContainerRemoveDrawablesCommandArchive::SharedCtor() {
super_ = nullptr;
}

ContainerRemoveDrawablesCommandArchive::~ContainerRemoveDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerRemoveDrawablesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerRemoveDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ContainerRemoveDrawablesCommandArchive::ArenaDtor(void* object) {
  ContainerRemoveDrawablesCommandArchive* _this = reinterpret_cast< ContainerRemoveDrawablesCommandArchive* >(object);
  (void)_this;
}
void ContainerRemoveDrawablesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerRemoveDrawablesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainerRemoveDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerRemoveDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerRemoveDrawablesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerRemoveDrawablesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerRemoveDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerRemoveDrawablesCommandArchive)
  return target;
}

size_t ContainerRemoveDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerRemoveDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerRemoveDrawablesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ContainerRemoveDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerRemoveDrawablesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerRemoveDrawablesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ContainerRemoveDrawablesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ContainerRemoveDrawablesCommandArchive)
    MergeFrom(*source);
  }
}

void ContainerRemoveDrawablesCommandArchive::MergeFrom(const ContainerRemoveDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerRemoveDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::ContainerRemoveChildrenCommandArchive::MergeFrom(from._internal_super());
  }
}

void ContainerRemoveDrawablesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ContainerRemoveDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerRemoveDrawablesCommandArchive::CopyFrom(const ContainerRemoveDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerRemoveDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerRemoveDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ContainerRemoveDrawablesCommandArchive::InternalSwap(ContainerRemoveDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerRemoveDrawablesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[4]);
}

// ===================================================================

class ContainerInsertChildrenCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerInsertChildrenCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ContainerInsertChildrenCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& container_id_path(const ContainerInsertChildrenCommandArchive* msg);
  static void set_has_container_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_object(const ContainerInsertChildrenCommandArchive* msg);
  static void set_has_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ContainerInsertChildrenCommandArchive::_Internal::super(const ContainerInsertChildrenCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
ContainerInsertChildrenCommandArchive::_Internal::container_id_path(const ContainerInsertChildrenCommandArchive* msg) {
  return *msg->container_id_path_;
}
const ::TSP::Reference&
ContainerInsertChildrenCommandArchive::_Internal::undo_object(const ContainerInsertChildrenCommandArchive* msg) {
  return *msg->undo_object_;
}
void ContainerInsertChildrenCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ContainerInsertChildrenCommandArchive::clear_container_id_path() {
  if (container_id_path_ != nullptr) container_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ContainerInsertChildrenCommandArchive::clear_children() {
  children_.Clear();
}
void ContainerInsertChildrenCommandArchive::clear_args_list() {
  args_list_.Clear();
}
void ContainerInsertChildrenCommandArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void ContainerInsertChildrenCommandArchive::clear_undo_object() {
  if (undo_object_ != nullptr) undo_object_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ContainerInsertChildrenCommandArchive::ContainerInsertChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena),
  args_list_(arena),
  custom_format_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerInsertChildrenCommandArchive)
}
ContainerInsertChildrenCommandArchive::ContainerInsertChildrenCommandArchive(const ContainerInsertChildrenCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      children_(from.children_),
      args_list_(from.args_list_),
      custom_format_keys_(from.custom_format_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_container_id_path()) {
    container_id_path_ = new ::TSP::UUIDPath(*from.container_id_path_);
  } else {
    container_id_path_ = nullptr;
  }
  if (from._internal_has_undo_object()) {
    undo_object_ = new ::TSP::Reference(*from.undo_object_);
  } else {
    undo_object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerInsertChildrenCommandArchive)
}

void ContainerInsertChildrenCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_object_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_object_));
}

ContainerInsertChildrenCommandArchive::~ContainerInsertChildrenCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerInsertChildrenCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerInsertChildrenCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete container_id_path_;
  if (this != internal_default_instance()) delete undo_object_;
}

void ContainerInsertChildrenCommandArchive::ArenaDtor(void* object) {
  ContainerInsertChildrenCommandArchive* _this = reinterpret_cast< ContainerInsertChildrenCommandArchive* >(object);
  (void)_this;
}
void ContainerInsertChildrenCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerInsertChildrenCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainerInsertChildrenCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerInsertChildrenCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  args_list_.Clear();
  custom_format_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(container_id_path_ != nullptr);
      container_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_object_ != nullptr);
      undo_object_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerInsertChildrenCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath container_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.AddIdOperationArgs args_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerInsertChildrenCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerInsertChildrenCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::container_id_path(this), target, stream);
  }

  // repeated .TSP.Reference children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_children(i), target, stream);
  }

  // repeated .TSK.AddIdOperationArgs args_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_args_list(i), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_custom_format_keys(i), target, stream);
  }

  // optional .TSP.Reference undo_object = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerInsertChildrenCommandArchive)
  return target;
}

size_t ContainerInsertChildrenCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerInsertChildrenCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 3;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.AddIdOperationArgs args_list = 4;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.UUIDPath container_id_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *container_id_path_);
    }

    // optional .TSP.Reference undo_object = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_object_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerInsertChildrenCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ContainerInsertChildrenCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerInsertChildrenCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerInsertChildrenCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ContainerInsertChildrenCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ContainerInsertChildrenCommandArchive)
    MergeFrom(*source);
  }
}

void ContainerInsertChildrenCommandArchive::MergeFrom(const ContainerInsertChildrenCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerInsertChildrenCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  args_list_.MergeFrom(from.args_list_);
  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_container_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_container_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_object()->::TSP::Reference::MergeFrom(from._internal_undo_object());
    }
  }
}

void ContainerInsertChildrenCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ContainerInsertChildrenCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInsertChildrenCommandArchive::CopyFrom(const ContainerInsertChildrenCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerInsertChildrenCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInsertChildrenCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(children_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_container_id_path()) {
    if (!container_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_undo_object()) {
    if (!undo_object_->IsInitialized()) return false;
  }
  return true;
}

void ContainerInsertChildrenCommandArchive::InternalSwap(ContainerInsertChildrenCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  children_.InternalSwap(&other->children_);
  args_list_.InternalSwap(&other->args_list_);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, undo_object_)
      + sizeof(ContainerInsertChildrenCommandArchive::undo_object_)
      - PROTOBUF_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerInsertChildrenCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[5]);
}

// ===================================================================

class ContainerInsertDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerInsertDrawablesCommandArchive>()._has_bits_);
  static const ::TSD::ContainerInsertChildrenCommandArchive& super(const ContainerInsertDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ContainerInsertChildrenCommandArchive&
ContainerInsertDrawablesCommandArchive::_Internal::super(const ContainerInsertDrawablesCommandArchive* msg) {
  return *msg->super_;
}
void ContainerInsertDrawablesCommandArchive::clear_drawables() {
  drawables_.Clear();
}
ContainerInsertDrawablesCommandArchive::ContainerInsertDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerInsertDrawablesCommandArchive)
}
ContainerInsertDrawablesCommandArchive::ContainerInsertDrawablesCommandArchive(const ContainerInsertDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawables_(from.drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ContainerInsertChildrenCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerInsertDrawablesCommandArchive)
}

void ContainerInsertDrawablesCommandArchive::SharedCtor() {
super_ = nullptr;
}

ContainerInsertDrawablesCommandArchive::~ContainerInsertDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerInsertDrawablesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerInsertDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ContainerInsertDrawablesCommandArchive::ArenaDtor(void* object) {
  ContainerInsertDrawablesCommandArchive* _this = reinterpret_cast< ContainerInsertDrawablesCommandArchive* >(object);
  (void)_this;
}
void ContainerInsertDrawablesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerInsertDrawablesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainerInsertDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerInsertDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerInsertDrawablesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerInsertDrawablesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerInsertDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference drawables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_drawables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerInsertDrawablesCommandArchive)
  return target;
}

size_t ContainerInsertDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerInsertDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 2;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerInsertDrawablesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ContainerInsertDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerInsertDrawablesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerInsertDrawablesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ContainerInsertDrawablesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ContainerInsertDrawablesCommandArchive)
    MergeFrom(*source);
  }
}

void ContainerInsertDrawablesCommandArchive::MergeFrom(const ContainerInsertDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerInsertDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawables_.MergeFrom(from.drawables_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::ContainerInsertChildrenCommandArchive::MergeFrom(from._internal_super());
  }
}

void ContainerInsertDrawablesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ContainerInsertDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInsertDrawablesCommandArchive::CopyFrom(const ContainerInsertDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerInsertDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInsertDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ContainerInsertDrawablesCommandArchive::InternalSwap(ContainerInsertDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawables_.InternalSwap(&other->drawables_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerInsertDrawablesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[6]);
}

// ===================================================================

class ContainerReorderChildrenCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerReorderChildrenCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ContainerReorderChildrenCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& container_id_path(const ContainerReorderChildrenCommandArchive* msg);
  static void set_has_container_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ContainerReorderChildrenCommandArchive::_Internal::super(const ContainerReorderChildrenCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
ContainerReorderChildrenCommandArchive::_Internal::container_id_path(const ContainerReorderChildrenCommandArchive* msg) {
  return *msg->container_id_path_;
}
void ContainerReorderChildrenCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ContainerReorderChildrenCommandArchive::clear_container_id_path() {
  if (container_id_path_ != nullptr) container_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ContainerReorderChildrenCommandArchive::clear_args_list() {
  args_list_.Clear();
}
ContainerReorderChildrenCommandArchive::ContainerReorderChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerReorderChildrenCommandArchive)
}
ContainerReorderChildrenCommandArchive::ContainerReorderChildrenCommandArchive(const ContainerReorderChildrenCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_list_(from.args_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_container_id_path()) {
    container_id_path_ = new ::TSP::UUIDPath(*from.container_id_path_);
  } else {
    container_id_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerReorderChildrenCommandArchive)
}

void ContainerReorderChildrenCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&container_id_path_) -
    reinterpret_cast<char*>(&super_)) + sizeof(container_id_path_));
}

ContainerReorderChildrenCommandArchive::~ContainerReorderChildrenCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerReorderChildrenCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerReorderChildrenCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete container_id_path_;
}

void ContainerReorderChildrenCommandArchive::ArenaDtor(void* object) {
  ContainerReorderChildrenCommandArchive* _this = reinterpret_cast< ContainerReorderChildrenCommandArchive* >(object);
  (void)_this;
}
void ContainerReorderChildrenCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerReorderChildrenCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainerReorderChildrenCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerReorderChildrenCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(container_id_path_ != nullptr);
      container_id_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerReorderChildrenCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath container_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerReorderChildrenCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerReorderChildrenCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::container_id_path(this), target, stream);
  }

  // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_args_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerReorderChildrenCommandArchive)
  return target;
}

size_t ContainerReorderChildrenCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerReorderChildrenCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_id_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerReorderChildrenCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ContainerReorderChildrenCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerReorderChildrenCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerReorderChildrenCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ContainerReorderChildrenCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ContainerReorderChildrenCommandArchive)
    MergeFrom(*source);
  }
}

void ContainerReorderChildrenCommandArchive::MergeFrom(const ContainerReorderChildrenCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerReorderChildrenCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_container_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_container_id_path());
    }
  }
}

void ContainerReorderChildrenCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ContainerReorderChildrenCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerReorderChildrenCommandArchive::CopyFrom(const ContainerReorderChildrenCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerReorderChildrenCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerReorderChildrenCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_container_id_path()) {
    if (!container_id_path_->IsInitialized()) return false;
  }
  return true;
}

void ContainerReorderChildrenCommandArchive::InternalSwap(ContainerReorderChildrenCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_list_.InternalSwap(&other->args_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, container_id_path_)
      + sizeof(ContainerReorderChildrenCommandArchive::container_id_path_)
      - PROTOBUF_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerReorderChildrenCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[7]);
}

// ===================================================================

class GroupUngroupInformativeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupUngroupInformativeCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const GroupUngroupInformativeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
GroupUngroupInformativeCommandArchive::_Internal::super(const GroupUngroupInformativeCommandArchive* msg) {
  return *msg->super_;
}
void GroupUngroupInformativeCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GroupUngroupInformativeCommandArchive::clear_removed_infos() {
  removed_infos_.Clear();
}
void GroupUngroupInformativeCommandArchive::clear_inserted_infos() {
  inserted_infos_.Clear();
}
GroupUngroupInformativeCommandArchive::GroupUngroupInformativeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  removed_infos_(arena),
  inserted_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GroupUngroupInformativeCommandArchive)
}
GroupUngroupInformativeCommandArchive::GroupUngroupInformativeCommandArchive(const GroupUngroupInformativeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      removed_infos_(from.removed_infos_),
      inserted_infos_(from.inserted_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  command_type_ = from.command_type_;
  // @@protoc_insertion_point(copy_constructor:TSD.GroupUngroupInformativeCommandArchive)
}

void GroupUngroupInformativeCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_type_) -
    reinterpret_cast<char*>(&super_)) + sizeof(command_type_));
}

GroupUngroupInformativeCommandArchive::~GroupUngroupInformativeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.GroupUngroupInformativeCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupUngroupInformativeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void GroupUngroupInformativeCommandArchive::ArenaDtor(void* object) {
  GroupUngroupInformativeCommandArchive* _this = reinterpret_cast< GroupUngroupInformativeCommandArchive* >(object);
  (void)_this;
}
void GroupUngroupInformativeCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupUngroupInformativeCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupUngroupInformativeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GroupUngroupInformativeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removed_infos_.Clear();
  inserted_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  command_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupUngroupInformativeCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference removed_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference inserted_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inserted_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSD.GroupUngroupInformativeCommandArchive.CommandType command_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::GroupUngroupInformativeCommandArchive_CommandType_IsValid(val))) {
            _internal_set_command_type(static_cast<::TSD::GroupUngroupInformativeCommandArchive_CommandType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupUngroupInformativeCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GroupUngroupInformativeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference removed_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_removed_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_removed_infos(i), target, stream);
  }

  // repeated .TSP.Reference inserted_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inserted_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_inserted_infos(i), target, stream);
  }

  // optional .TSD.GroupUngroupInformativeCommandArchive.CommandType command_type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_command_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GroupUngroupInformativeCommandArchive)
  return target;
}

size_t GroupUngroupInformativeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GroupUngroupInformativeCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference removed_infos = 2;
  total_size += 1UL * this->_internal_removed_infos_size();
  for (const auto& msg : this->removed_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference inserted_infos = 3;
  total_size += 1UL * this->_internal_inserted_infos_size();
  for (const auto& msg : this->inserted_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSD.GroupUngroupInformativeCommandArchive.CommandType command_type = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUngroupInformativeCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GroupUngroupInformativeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupUngroupInformativeCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupUngroupInformativeCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GroupUngroupInformativeCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GroupUngroupInformativeCommandArchive)
    MergeFrom(*source);
  }
}

void GroupUngroupInformativeCommandArchive::MergeFrom(const GroupUngroupInformativeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GroupUngroupInformativeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  removed_infos_.MergeFrom(from.removed_infos_);
  inserted_infos_.MergeFrom(from.inserted_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      command_type_ = from.command_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupUngroupInformativeCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GroupUngroupInformativeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUngroupInformativeCommandArchive::CopyFrom(const GroupUngroupInformativeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GroupUngroupInformativeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUngroupInformativeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(removed_infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inserted_infos_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void GroupUngroupInformativeCommandArchive::InternalSwap(GroupUngroupInformativeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  removed_infos_.InternalSwap(&other->removed_infos_);
  inserted_infos_.InternalSwap(&other->inserted_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupUngroupInformativeCommandArchive, command_type_)
      + sizeof(GroupUngroupInformativeCommandArchive::command_type_)
      - PROTOBUF_FIELD_OFFSET(GroupUngroupInformativeCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUngroupInformativeCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[8]);
}

// ===================================================================

class InfoCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InfoCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const InfoCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& info_id_path(const InfoCommandArchive* msg);
  static void set_has_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InfoCommandArchive::_Internal::super(const InfoCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
InfoCommandArchive::_Internal::info_id_path(const InfoCommandArchive* msg) {
  return *msg->info_id_path_;
}
void InfoCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InfoCommandArchive::clear_info_id_path() {
  if (info_id_path_ != nullptr) info_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
InfoCommandArchive::InfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.InfoCommandArchive)
}
InfoCommandArchive::InfoCommandArchive(const InfoCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_info_id_path()) {
    info_id_path_ = new ::TSP::UUIDPath(*from.info_id_path_);
  } else {
    info_id_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.InfoCommandArchive)
}

void InfoCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&info_id_path_) -
    reinterpret_cast<char*>(&super_)) + sizeof(info_id_path_));
}

InfoCommandArchive::~InfoCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.InfoCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InfoCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete info_id_path_;
}

void InfoCommandArchive::ArenaDtor(void* object) {
  InfoCommandArchive* _this = reinterpret_cast< InfoCommandArchive* >(object);
  (void)_this;
}
void InfoCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_id_path_ != nullptr);
      info_id_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info_id_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InfoCommandArchive)
  return target;
}

size_t InfoCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InfoCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath info_id_path = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_id_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.InfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.InfoCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.InfoCommandArchive)
    MergeFrom(*source);
  }
}

void InfoCommandArchive::MergeFrom(const InfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.InfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_info_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_info_id_path());
    }
  }
}

void InfoCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.InfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoCommandArchive::CopyFrom(const InfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_info_id_path()) {
    if (!info_id_path_->IsInitialized()) return false;
  }
  return true;
}

void InfoCommandArchive::InternalSwap(InfoCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoCommandArchive, info_id_path_)
      + sizeof(InfoCommandArchive::info_id_path_)
      - PROTOBUF_FIELD_OFFSET(InfoCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[9]);
}

// ===================================================================

class ConnectionLineConnectCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionLineConnectCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& connected_from_id(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_connected_from_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& connected_to_id(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_connected_to_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& old_connected_to_id(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_old_connected_to_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& old_connected_from_id(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_old_connected_from_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ConnectionLineConnectCommandArchive::_Internal::super(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
ConnectionLineConnectCommandArchive::_Internal::connected_from_id(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->connected_from_id_;
}
const ::TSP::UUID&
ConnectionLineConnectCommandArchive::_Internal::connected_to_id(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->connected_to_id_;
}
const ::TSP::UUID&
ConnectionLineConnectCommandArchive::_Internal::old_connected_to_id(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->old_connected_to_id_;
}
const ::TSP::UUID&
ConnectionLineConnectCommandArchive::_Internal::old_connected_from_id(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->old_connected_from_id_;
}
void ConnectionLineConnectCommandArchive::clear_connected_from_id() {
  if (connected_from_id_ != nullptr) connected_from_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ConnectionLineConnectCommandArchive::clear_connected_to_id() {
  if (connected_to_id_ != nullptr) connected_to_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ConnectionLineConnectCommandArchive::clear_old_connected_to_id() {
  if (old_connected_to_id_ != nullptr) old_connected_to_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ConnectionLineConnectCommandArchive::clear_old_connected_from_id() {
  if (old_connected_from_id_ != nullptr) old_connected_from_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ConnectionLineConnectCommandArchive::ConnectionLineConnectCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ConnectionLineConnectCommandArchive)
}
ConnectionLineConnectCommandArchive::ConnectionLineConnectCommandArchive(const ConnectionLineConnectCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_connected_from_id()) {
    connected_from_id_ = new ::TSP::UUID(*from.connected_from_id_);
  } else {
    connected_from_id_ = nullptr;
  }
  if (from._internal_has_connected_to_id()) {
    connected_to_id_ = new ::TSP::UUID(*from.connected_to_id_);
  } else {
    connected_to_id_ = nullptr;
  }
  if (from._internal_has_old_connected_to_id()) {
    old_connected_to_id_ = new ::TSP::UUID(*from.old_connected_to_id_);
  } else {
    old_connected_to_id_ = nullptr;
  }
  if (from._internal_has_old_connected_from_id()) {
    old_connected_from_id_ = new ::TSP::UUID(*from.old_connected_from_id_);
  } else {
    old_connected_from_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ConnectionLineConnectCommandArchive)
}

void ConnectionLineConnectCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_connected_from_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_connected_from_id_));
}

ConnectionLineConnectCommandArchive::~ConnectionLineConnectCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ConnectionLineConnectCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectionLineConnectCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete connected_from_id_;
  if (this != internal_default_instance()) delete connected_to_id_;
  if (this != internal_default_instance()) delete old_connected_to_id_;
  if (this != internal_default_instance()) delete old_connected_from_id_;
}

void ConnectionLineConnectCommandArchive::ArenaDtor(void* object) {
  ConnectionLineConnectCommandArchive* _this = reinterpret_cast< ConnectionLineConnectCommandArchive* >(object);
  (void)_this;
}
void ConnectionLineConnectCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionLineConnectCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionLineConnectCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ConnectionLineConnectCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(connected_from_id_ != nullptr);
      connected_from_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(connected_to_id_ != nullptr);
      connected_to_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_connected_to_id_ != nullptr);
      old_connected_to_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(old_connected_from_id_ != nullptr);
      old_connected_from_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionLineConnectCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID connected_from_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connected_from_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID connected_to_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_connected_to_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID old_connected_to_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_connected_to_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID old_connected_from_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_connected_from_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionLineConnectCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ConnectionLineConnectCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUID connected_from_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::connected_from_id(this), target, stream);
  }

  // optional .TSP.UUID connected_to_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::connected_to_id(this), target, stream);
  }

  // optional .TSP.UUID old_connected_to_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::old_connected_to_id(this), target, stream);
  }

  // optional .TSP.UUID old_connected_from_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::old_connected_from_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ConnectionLineConnectCommandArchive)
  return target;
}

size_t ConnectionLineConnectCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ConnectionLineConnectCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.UUID connected_from_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connected_from_id_);
    }

    // optional .TSP.UUID connected_to_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connected_to_id_);
    }

    // optional .TSP.UUID old_connected_to_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_connected_to_id_);
    }

    // optional .TSP.UUID old_connected_from_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_connected_from_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionLineConnectCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ConnectionLineConnectCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionLineConnectCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionLineConnectCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ConnectionLineConnectCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ConnectionLineConnectCommandArchive)
    MergeFrom(*source);
  }
}

void ConnectionLineConnectCommandArchive::MergeFrom(const ConnectionLineConnectCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ConnectionLineConnectCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_connected_from_id()->::TSP::UUID::MergeFrom(from._internal_connected_from_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_connected_to_id()->::TSP::UUID::MergeFrom(from._internal_connected_to_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_connected_to_id()->::TSP::UUID::MergeFrom(from._internal_old_connected_to_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_old_connected_from_id()->::TSP::UUID::MergeFrom(from._internal_old_connected_from_id());
    }
  }
}

void ConnectionLineConnectCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ConnectionLineConnectCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionLineConnectCommandArchive::CopyFrom(const ConnectionLineConnectCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ConnectionLineConnectCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionLineConnectCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_connected_from_id()) {
    if (!connected_from_id_->IsInitialized()) return false;
  }
  if (_internal_has_connected_to_id()) {
    if (!connected_to_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_connected_to_id()) {
    if (!old_connected_to_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_connected_from_id()) {
    if (!old_connected_from_id_->IsInitialized()) return false;
  }
  return true;
}

void ConnectionLineConnectCommandArchive::InternalSwap(ConnectionLineConnectCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionLineConnectCommandArchive, old_connected_from_id_)
      + sizeof(ConnectionLineConnectCommandArchive::old_connected_from_id_)
      - PROTOBUF_FIELD_OFFSET(ConnectionLineConnectCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionLineConnectCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[10]);
}

// ===================================================================

class InfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InfoGeometryCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const InfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::GeometryArchive& newgeometry(const InfoGeometryCommandArchive* msg);
  static void set_has_newgeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::GeometryArchive& oldgeometry(const InfoGeometryCommandArchive* msg);
  static void set_has_oldgeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_matchobjectplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oldmatchobjectplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shouldtriggerrtuanimation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_initiatedonweb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
InfoGeometryCommandArchive::_Internal::super(const InfoGeometryCommandArchive* msg) {
  return *msg->super_;
}
const ::TSD::GeometryArchive&
InfoGeometryCommandArchive::_Internal::newgeometry(const InfoGeometryCommandArchive* msg) {
  return *msg->newgeometry_;
}
const ::TSD::GeometryArchive&
InfoGeometryCommandArchive::_Internal::oldgeometry(const InfoGeometryCommandArchive* msg) {
  return *msg->oldgeometry_;
}
void InfoGeometryCommandArchive::clear_newgeometry() {
  if (newgeometry_ != nullptr) newgeometry_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InfoGeometryCommandArchive::clear_oldgeometry() {
  if (oldgeometry_ != nullptr) oldgeometry_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
InfoGeometryCommandArchive::InfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.InfoGeometryCommandArchive)
}
InfoGeometryCommandArchive::InfoGeometryCommandArchive(const InfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_newgeometry()) {
    newgeometry_ = new ::TSD::GeometryArchive(*from.newgeometry_);
  } else {
    newgeometry_ = nullptr;
  }
  if (from._internal_has_oldgeometry()) {
    oldgeometry_ = new ::TSD::GeometryArchive(*from.oldgeometry_);
  } else {
    oldgeometry_ = nullptr;
  }
  ::memcpy(&matchobjectplaceholdergeometry_, &from.matchobjectplaceholdergeometry_,
    static_cast<size_t>(reinterpret_cast<char*>(&initiatedonweb_) -
    reinterpret_cast<char*>(&matchobjectplaceholdergeometry_)) + sizeof(initiatedonweb_));
  // @@protoc_insertion_point(copy_constructor:TSD.InfoGeometryCommandArchive)
}

void InfoGeometryCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initiatedonweb_) -
    reinterpret_cast<char*>(&super_)) + sizeof(initiatedonweb_));
}

InfoGeometryCommandArchive::~InfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.InfoGeometryCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete newgeometry_;
  if (this != internal_default_instance()) delete oldgeometry_;
}

void InfoGeometryCommandArchive::ArenaDtor(void* object) {
  InfoGeometryCommandArchive* _this = reinterpret_cast< InfoGeometryCommandArchive* >(object);
  (void)_this;
}
void InfoGeometryCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoGeometryCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(newgeometry_ != nullptr);
      newgeometry_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(oldgeometry_ != nullptr);
      oldgeometry_->Clear();
    }
  }
  ::memset(&matchobjectplaceholdergeometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initiatedonweb_) -
      reinterpret_cast<char*>(&matchobjectplaceholdergeometry_)) + sizeof(initiatedonweb_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoGeometryCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive newGeometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newgeometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive oldGeometry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldgeometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool matchObjectPlaceholderGeometry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_matchobjectplaceholdergeometry(&has_bits);
          matchobjectplaceholdergeometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool oldMatchObjectPlaceholderGeometry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_oldmatchobjectplaceholdergeometry(&has_bits);
          oldmatchobjectplaceholdergeometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shouldTriggerRtuAnimation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_shouldtriggerrtuanimation(&has_bits);
          shouldtriggerrtuanimation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initiatedOnWeb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_initiatedonweb(&has_bits);
          initiatedonweb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoGeometryCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.GeometryArchive newGeometry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newgeometry(this), target, stream);
  }

  // optional .TSD.GeometryArchive oldGeometry = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::oldgeometry(this), target, stream);
  }

  // optional bool matchObjectPlaceholderGeometry = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_matchobjectplaceholdergeometry(), target);
  }

  // optional bool oldMatchObjectPlaceholderGeometry = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_oldmatchobjectplaceholdergeometry(), target);
  }

  // optional bool shouldTriggerRtuAnimation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_shouldtriggerrtuanimation(), target);
  }

  // optional bool initiatedOnWeb = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_initiatedonweb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InfoGeometryCommandArchive)
  return target;
}

size_t InfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InfoGeometryCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .TSD.GeometryArchive newGeometry = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *newgeometry_);
    }

    // optional .TSD.GeometryArchive oldGeometry = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldgeometry_);
    }

    // optional bool matchObjectPlaceholderGeometry = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool oldMatchObjectPlaceholderGeometry = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool shouldTriggerRtuAnimation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool initiatedOnWeb = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoGeometryCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.InfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoGeometryCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoGeometryCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.InfoGeometryCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.InfoGeometryCommandArchive)
    MergeFrom(*source);
  }
}

void InfoGeometryCommandArchive::MergeFrom(const InfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.InfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_newgeometry()->::TSD::GeometryArchive::MergeFrom(from._internal_newgeometry());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_oldgeometry()->::TSD::GeometryArchive::MergeFrom(from._internal_oldgeometry());
    }
    if (cached_has_bits & 0x00000008u) {
      matchobjectplaceholdergeometry_ = from.matchobjectplaceholdergeometry_;
    }
    if (cached_has_bits & 0x00000010u) {
      oldmatchobjectplaceholdergeometry_ = from.oldmatchobjectplaceholdergeometry_;
    }
    if (cached_has_bits & 0x00000020u) {
      shouldtriggerrtuanimation_ = from.shouldtriggerrtuanimation_;
    }
    if (cached_has_bits & 0x00000040u) {
      initiatedonweb_ = from.initiatedonweb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InfoGeometryCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.InfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoGeometryCommandArchive::CopyFrom(const InfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_newgeometry()) {
    if (!newgeometry_->IsInitialized()) return false;
  }
  if (_internal_has_oldgeometry()) {
    if (!oldgeometry_->IsInitialized()) return false;
  }
  return true;
}

void InfoGeometryCommandArchive::InternalSwap(InfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoGeometryCommandArchive, initiatedonweb_)
      + sizeof(InfoGeometryCommandArchive::initiatedonweb_)
      - PROTOBUF_FIELD_OFFSET(InfoGeometryCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoGeometryCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[11]);
}

// ===================================================================

class DrawablePathSourceCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawablePathSourceCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawablePathSourceCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::PathSourceArchive& old_path_source(const DrawablePathSourceCommandArchive* msg);
  static void set_has_old_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::PathSourceArchive& new_path_source(const DrawablePathSourceCommandArchive* msg);
  static void set_has_new_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawablePathSourceCommandArchive::_Internal::super(const DrawablePathSourceCommandArchive* msg) {
  return *msg->super_;
}
const ::TSD::PathSourceArchive&
DrawablePathSourceCommandArchive::_Internal::old_path_source(const DrawablePathSourceCommandArchive* msg) {
  return *msg->old_path_source_;
}
const ::TSD::PathSourceArchive&
DrawablePathSourceCommandArchive::_Internal::new_path_source(const DrawablePathSourceCommandArchive* msg) {
  return *msg->new_path_source_;
}
void DrawablePathSourceCommandArchive::clear_old_path_source() {
  if (old_path_source_ != nullptr) old_path_source_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DrawablePathSourceCommandArchive::clear_new_path_source() {
  if (new_path_source_ != nullptr) new_path_source_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DrawablePathSourceCommandArchive::DrawablePathSourceCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawablePathSourceCommandArchive)
}
DrawablePathSourceCommandArchive::DrawablePathSourceCommandArchive(const DrawablePathSourceCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_path_source()) {
    old_path_source_ = new ::TSD::PathSourceArchive(*from.old_path_source_);
  } else {
    old_path_source_ = nullptr;
  }
  if (from._internal_has_new_path_source()) {
    new_path_source_ = new ::TSD::PathSourceArchive(*from.new_path_source_);
  } else {
    new_path_source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawablePathSourceCommandArchive)
}

void DrawablePathSourceCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_path_source_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_path_source_));
}

DrawablePathSourceCommandArchive::~DrawablePathSourceCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawablePathSourceCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawablePathSourceCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_path_source_;
  if (this != internal_default_instance()) delete new_path_source_;
}

void DrawablePathSourceCommandArchive::ArenaDtor(void* object) {
  DrawablePathSourceCommandArchive* _this = reinterpret_cast< DrawablePathSourceCommandArchive* >(object);
  (void)_this;
}
void DrawablePathSourceCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawablePathSourceCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawablePathSourceCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawablePathSourceCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_path_source_ != nullptr);
      old_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_path_source_ != nullptr);
      new_path_source_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawablePathSourceCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive old_path_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive new_path_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawablePathSourceCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawablePathSourceCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.PathSourceArchive old_path_source = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_path_source(this), target, stream);
  }

  // optional .TSD.PathSourceArchive new_path_source = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_path_source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawablePathSourceCommandArchive)
  return target;
}

size_t DrawablePathSourceCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawablePathSourceCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSD.PathSourceArchive old_path_source = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_path_source_);
    }

    // optional .TSD.PathSourceArchive new_path_source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_path_source_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawablePathSourceCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawablePathSourceCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawablePathSourceCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawablePathSourceCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawablePathSourceCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawablePathSourceCommandArchive)
    MergeFrom(*source);
  }
}

void DrawablePathSourceCommandArchive::MergeFrom(const DrawablePathSourceCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawablePathSourceCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_path_source()->::TSD::PathSourceArchive::MergeFrom(from._internal_old_path_source());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_path_source()->::TSD::PathSourceArchive::MergeFrom(from._internal_new_path_source());
    }
  }
}

void DrawablePathSourceCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawablePathSourceCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawablePathSourceCommandArchive::CopyFrom(const DrawablePathSourceCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawablePathSourceCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablePathSourceCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_path_source()) {
    if (!old_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_new_path_source()) {
    if (!new_path_source_->IsInitialized()) return false;
  }
  return true;
}

void DrawablePathSourceCommandArchive::InternalSwap(DrawablePathSourceCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawablePathSourceCommandArchive, new_path_source_)
      + sizeof(DrawablePathSourceCommandArchive::new_path_source_)
      - PROTOBUF_FIELD_OFFSET(DrawablePathSourceCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawablePathSourceCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[12]);
}

// ===================================================================

class InstantAlphaCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InstantAlphaCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const InstantAlphaCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Path& oldpath(const InstantAlphaCommandArchive* msg);
  static void set_has_oldpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Path& newpath(const InstantAlphaCommandArchive* msg);
  static void set_has_newpath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
InstantAlphaCommandArchive::_Internal::super(const InstantAlphaCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Path&
InstantAlphaCommandArchive::_Internal::oldpath(const InstantAlphaCommandArchive* msg) {
  return *msg->oldpath_;
}
const ::TSP::Path&
InstantAlphaCommandArchive::_Internal::newpath(const InstantAlphaCommandArchive* msg) {
  return *msg->newpath_;
}
void InstantAlphaCommandArchive::clear_oldpath() {
  if (oldpath_ != nullptr) oldpath_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InstantAlphaCommandArchive::clear_newpath() {
  if (newpath_ != nullptr) newpath_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
InstantAlphaCommandArchive::InstantAlphaCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.InstantAlphaCommandArchive)
}
InstantAlphaCommandArchive::InstantAlphaCommandArchive(const InstantAlphaCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_oldpath()) {
    oldpath_ = new ::TSP::Path(*from.oldpath_);
  } else {
    oldpath_ = nullptr;
  }
  if (from._internal_has_newpath()) {
    newpath_ = new ::TSP::Path(*from.newpath_);
  } else {
    newpath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.InstantAlphaCommandArchive)
}

void InstantAlphaCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&newpath_) -
    reinterpret_cast<char*>(&super_)) + sizeof(newpath_));
}

InstantAlphaCommandArchive::~InstantAlphaCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.InstantAlphaCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstantAlphaCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete oldpath_;
  if (this != internal_default_instance()) delete newpath_;
}

void InstantAlphaCommandArchive::ArenaDtor(void* object) {
  InstantAlphaCommandArchive* _this = reinterpret_cast< InstantAlphaCommandArchive* >(object);
  (void)_this;
}
void InstantAlphaCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstantAlphaCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstantAlphaCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InstantAlphaCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(oldpath_ != nullptr);
      oldpath_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(newpath_ != nullptr);
      newpath_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstantAlphaCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Path oldpath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Path newpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstantAlphaCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InstantAlphaCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Path oldpath = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::oldpath(this), target, stream);
  }

  // optional .TSP.Path newpath = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::newpath(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InstantAlphaCommandArchive)
  return target;
}

size_t InstantAlphaCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InstantAlphaCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Path oldpath = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldpath_);
    }

    // optional .TSP.Path newpath = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *newpath_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstantAlphaCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.InstantAlphaCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InstantAlphaCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstantAlphaCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.InstantAlphaCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.InstantAlphaCommandArchive)
    MergeFrom(*source);
  }
}

void InstantAlphaCommandArchive::MergeFrom(const InstantAlphaCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.InstantAlphaCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_oldpath()->::TSP::Path::MergeFrom(from._internal_oldpath());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_newpath()->::TSP::Path::MergeFrom(from._internal_newpath());
    }
  }
}

void InstantAlphaCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.InstantAlphaCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantAlphaCommandArchive::CopyFrom(const InstantAlphaCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InstantAlphaCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantAlphaCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_oldpath()) {
    if (!oldpath_->IsInitialized()) return false;
  }
  if (_internal_has_newpath()) {
    if (!newpath_->IsInitialized()) return false;
  }
  return true;
}

void InstantAlphaCommandArchive::InternalSwap(InstantAlphaCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstantAlphaCommandArchive, newpath_)
      + sizeof(InstantAlphaCommandArchive::newpath_)
      - PROTOBUF_FIELD_OFFSET(InstantAlphaCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstantAlphaCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[13]);
}

// ===================================================================

class DrawableApplyThemeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableApplyThemeCommandArchive>()._has_bits_);
  static const ::TSS::ApplyThemeChildCommandArchive& super(const DrawableApplyThemeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info(const DrawableApplyThemeCommandArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& style(const DrawableApplyThemeCommandArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::ApplyThemeChildCommandArchive&
DrawableApplyThemeCommandArchive::_Internal::super(const DrawableApplyThemeCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
DrawableApplyThemeCommandArchive::_Internal::info(const DrawableApplyThemeCommandArchive* msg) {
  return *msg->info_;
}
const ::TSP::Reference&
DrawableApplyThemeCommandArchive::_Internal::style(const DrawableApplyThemeCommandArchive* msg) {
  return *msg->style_;
}
void DrawableApplyThemeCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DrawableApplyThemeCommandArchive::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DrawableApplyThemeCommandArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DrawableApplyThemeCommandArchive::DrawableApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableApplyThemeCommandArchive)
}
DrawableApplyThemeCommandArchive::DrawableApplyThemeCommandArchive(const DrawableApplyThemeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::ApplyThemeChildCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::TSP::Reference(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableApplyThemeCommandArchive)
}

void DrawableApplyThemeCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(style_));
}

DrawableApplyThemeCommandArchive::~DrawableApplyThemeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableApplyThemeCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableApplyThemeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete style_;
}

void DrawableApplyThemeCommandArchive::ArenaDtor(void* object) {
  DrawableApplyThemeCommandArchive* _this = reinterpret_cast< DrawableApplyThemeCommandArchive* >(object);
  (void)_this;
}
void DrawableApplyThemeCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableApplyThemeCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableApplyThemeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableApplyThemeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableApplyThemeCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableApplyThemeCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableApplyThemeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // optional .TSP.Reference style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableApplyThemeCommandArchive)
  return target;
}

size_t DrawableApplyThemeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableApplyThemeCommandArchive)
  size_t total_size = 0;

  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .TSP.Reference style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableApplyThemeCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableApplyThemeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableApplyThemeCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableApplyThemeCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableApplyThemeCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableApplyThemeCommandArchive)
    MergeFrom(*source);
  }
}

void DrawableApplyThemeCommandArchive::MergeFrom(const DrawableApplyThemeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableApplyThemeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_info()->::TSP::Reference::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
  }
}

void DrawableApplyThemeCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableApplyThemeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableApplyThemeCommandArchive::CopyFrom(const DrawableApplyThemeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableApplyThemeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableApplyThemeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  return true;
}

void DrawableApplyThemeCommandArchive::InternalSwap(DrawableApplyThemeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableApplyThemeCommandArchive, style_)
      + sizeof(DrawableApplyThemeCommandArchive::style_)
      - PROTOBUF_FIELD_OFFSET(DrawableApplyThemeCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableApplyThemeCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[14]);
}

// ===================================================================

class AbstractStyleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AbstractStyleCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const AbstractStyleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
AbstractStyleCommandArchive::_Internal::super(const AbstractStyleCommandArchive* msg) {
  return *msg->super_;
}
AbstractStyleCommandArchive::AbstractStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.AbstractStyleCommandArchive)
}
AbstractStyleCommandArchive::AbstractStyleCommandArchive(const AbstractStyleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.AbstractStyleCommandArchive)
}

void AbstractStyleCommandArchive::SharedCtor() {
super_ = nullptr;
}

AbstractStyleCommandArchive::~AbstractStyleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.AbstractStyleCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbstractStyleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void AbstractStyleCommandArchive::ArenaDtor(void* object) {
  AbstractStyleCommandArchive* _this = reinterpret_cast< AbstractStyleCommandArchive* >(object);
  (void)_this;
}
void AbstractStyleCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbstractStyleCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AbstractStyleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.AbstractStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbstractStyleCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbstractStyleCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.AbstractStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.AbstractStyleCommandArchive)
  return target;
}

size_t AbstractStyleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.AbstractStyleCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbstractStyleCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.AbstractStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const AbstractStyleCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbstractStyleCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.AbstractStyleCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.AbstractStyleCommandArchive)
    MergeFrom(*source);
  }
}

void AbstractStyleCommandArchive::MergeFrom(const AbstractStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.AbstractStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
  }
}

void AbstractStyleCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.AbstractStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbstractStyleCommandArchive::CopyFrom(const AbstractStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.AbstractStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractStyleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void AbstractStyleCommandArchive::InternalSwap(AbstractStyleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbstractStyleCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[15]);
}

// ===================================================================

class StyledInfoSetStyleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyledInfoSetStyleCommandArchive>()._has_bits_);
  static const ::TSD::AbstractStyleCommandArchive& super(const StyledInfoSetStyleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& new_style(const StyledInfoSetStyleCommandArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& rollback_style(const StyledInfoSetStyleCommandArchive* msg);
  static void set_has_rollback_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::AbstractStyleCommandArchive&
StyledInfoSetStyleCommandArchive::_Internal::super(const StyledInfoSetStyleCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
StyledInfoSetStyleCommandArchive::_Internal::new_style(const StyledInfoSetStyleCommandArchive* msg) {
  return *msg->new_style_;
}
const ::TSP::Reference&
StyledInfoSetStyleCommandArchive::_Internal::rollback_style(const StyledInfoSetStyleCommandArchive* msg) {
  return *msg->rollback_style_;
}
void StyledInfoSetStyleCommandArchive::clear_new_style() {
  if (new_style_ != nullptr) new_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StyledInfoSetStyleCommandArchive::clear_rollback_style() {
  if (rollback_style_ != nullptr) rollback_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
StyledInfoSetStyleCommandArchive::StyledInfoSetStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.StyledInfoSetStyleCommandArchive)
}
StyledInfoSetStyleCommandArchive::StyledInfoSetStyleCommandArchive(const StyledInfoSetStyleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::AbstractStyleCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_new_style()) {
    new_style_ = new ::TSP::Reference(*from.new_style_);
  } else {
    new_style_ = nullptr;
  }
  if (from._internal_has_rollback_style()) {
    rollback_style_ = new ::TSP::Reference(*from.rollback_style_);
  } else {
    rollback_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.StyledInfoSetStyleCommandArchive)
}

void StyledInfoSetStyleCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rollback_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(rollback_style_));
}

StyledInfoSetStyleCommandArchive::~StyledInfoSetStyleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.StyledInfoSetStyleCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyledInfoSetStyleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete new_style_;
  if (this != internal_default_instance()) delete rollback_style_;
}

void StyledInfoSetStyleCommandArchive::ArenaDtor(void* object) {
  StyledInfoSetStyleCommandArchive* _this = reinterpret_cast< StyledInfoSetStyleCommandArchive* >(object);
  (void)_this;
}
void StyledInfoSetStyleCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyledInfoSetStyleCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyledInfoSetStyleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.StyledInfoSetStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_style_ != nullptr);
      new_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rollback_style_ != nullptr);
      rollback_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyledInfoSetStyleCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractStyleCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference new_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyledInfoSetStyleCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.StyledInfoSetStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference new_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_style(this), target, stream);
  }

  // optional .TSP.Reference rollback_style = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rollback_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.StyledInfoSetStyleCommandArchive)
  return target;
}

size_t StyledInfoSetStyleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.StyledInfoSetStyleCommandArchive)
  size_t total_size = 0;

  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference new_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_style_);
    }

    // optional .TSP.Reference rollback_style = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rollback_style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyledInfoSetStyleCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.StyledInfoSetStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyledInfoSetStyleCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyledInfoSetStyleCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.StyledInfoSetStyleCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.StyledInfoSetStyleCommandArchive)
    MergeFrom(*source);
  }
}

void StyledInfoSetStyleCommandArchive::MergeFrom(const StyledInfoSetStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.StyledInfoSetStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::AbstractStyleCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_style()->::TSP::Reference::MergeFrom(from._internal_new_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rollback_style()->::TSP::Reference::MergeFrom(from._internal_rollback_style());
    }
  }
}

void StyledInfoSetStyleCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.StyledInfoSetStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyledInfoSetStyleCommandArchive::CopyFrom(const StyledInfoSetStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.StyledInfoSetStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyledInfoSetStyleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!new_style_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_style()) {
    if (!rollback_style_->IsInitialized()) return false;
  }
  return true;
}

void StyledInfoSetStyleCommandArchive::InternalSwap(StyledInfoSetStyleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyledInfoSetStyleCommandArchive, rollback_style_)
      + sizeof(StyledInfoSetStyleCommandArchive::rollback_style_)
      - PROTOBUF_FIELD_OFFSET(StyledInfoSetStyleCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyledInfoSetStyleCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[16]);
}

// ===================================================================

class BaseApplyPresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseApplyPresetCommandArchive>()._has_bits_);
  static const ::TSD::AbstractStyleCommandArchive& super(const BaseApplyPresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& preset_style(const BaseApplyPresetCommandArchive* msg);
  static void set_has_preset_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& rollback_style(const BaseApplyPresetCommandArchive* msg);
  static void set_has_rollback_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::AbstractStyleCommandArchive&
BaseApplyPresetCommandArchive::_Internal::super(const BaseApplyPresetCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
BaseApplyPresetCommandArchive::_Internal::preset_style(const BaseApplyPresetCommandArchive* msg) {
  return *msg->preset_style_;
}
const ::TSP::Reference&
BaseApplyPresetCommandArchive::_Internal::rollback_style(const BaseApplyPresetCommandArchive* msg) {
  return *msg->rollback_style_;
}
void BaseApplyPresetCommandArchive::clear_preset_style() {
  if (preset_style_ != nullptr) preset_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void BaseApplyPresetCommandArchive::clear_rollback_style() {
  if (rollback_style_ != nullptr) rollback_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BaseApplyPresetCommandArchive::BaseApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.BaseApplyPresetCommandArchive)
}
BaseApplyPresetCommandArchive::BaseApplyPresetCommandArchive(const BaseApplyPresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::AbstractStyleCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_preset_style()) {
    preset_style_ = new ::TSP::Reference(*from.preset_style_);
  } else {
    preset_style_ = nullptr;
  }
  if (from._internal_has_rollback_style()) {
    rollback_style_ = new ::TSP::Reference(*from.rollback_style_);
  } else {
    rollback_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.BaseApplyPresetCommandArchive)
}

void BaseApplyPresetCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rollback_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(rollback_style_));
}

BaseApplyPresetCommandArchive::~BaseApplyPresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.BaseApplyPresetCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseApplyPresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete preset_style_;
  if (this != internal_default_instance()) delete rollback_style_;
}

void BaseApplyPresetCommandArchive::ArenaDtor(void* object) {
  BaseApplyPresetCommandArchive* _this = reinterpret_cast< BaseApplyPresetCommandArchive* >(object);
  (void)_this;
}
void BaseApplyPresetCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseApplyPresetCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseApplyPresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.BaseApplyPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(preset_style_ != nullptr);
      preset_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rollback_style_ != nullptr);
      rollback_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseApplyPresetCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractStyleCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference preset_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseApplyPresetCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.BaseApplyPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference preset_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::preset_style(this), target, stream);
  }

  // optional .TSP.Reference rollback_style = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rollback_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.BaseApplyPresetCommandArchive)
  return target;
}

size_t BaseApplyPresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.BaseApplyPresetCommandArchive)
  size_t total_size = 0;

  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference preset_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preset_style_);
    }

    // optional .TSP.Reference rollback_style = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rollback_style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseApplyPresetCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.BaseApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseApplyPresetCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseApplyPresetCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.BaseApplyPresetCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.BaseApplyPresetCommandArchive)
    MergeFrom(*source);
  }
}

void BaseApplyPresetCommandArchive::MergeFrom(const BaseApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.BaseApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::AbstractStyleCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_preset_style()->::TSP::Reference::MergeFrom(from._internal_preset_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rollback_style()->::TSP::Reference::MergeFrom(from._internal_rollback_style());
    }
  }
}

void BaseApplyPresetCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.BaseApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseApplyPresetCommandArchive::CopyFrom(const BaseApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.BaseApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseApplyPresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_preset_style()) {
    if (!preset_style_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_style()) {
    if (!rollback_style_->IsInitialized()) return false;
  }
  return true;
}

void BaseApplyPresetCommandArchive::InternalSwap(BaseApplyPresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseApplyPresetCommandArchive, rollback_style_)
      + sizeof(BaseApplyPresetCommandArchive::rollback_style_)
      - PROTOBUF_FIELD_OFFSET(BaseApplyPresetCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseApplyPresetCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[17]);
}

// ===================================================================

class ShapeApplyPresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeApplyPresetCommandArchive>()._has_bits_);
  static const ::TSD::BaseApplyPresetCommandArchive& super(const ShapeApplyPresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseApplyPresetCommandArchive&
ShapeApplyPresetCommandArchive::_Internal::super(const ShapeApplyPresetCommandArchive* msg) {
  return *msg->super_;
}
ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ShapeApplyPresetCommandArchive)
}
ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(const ShapeApplyPresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::BaseApplyPresetCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ShapeApplyPresetCommandArchive)
}

void ShapeApplyPresetCommandArchive::SharedCtor() {
super_ = nullptr;
}

ShapeApplyPresetCommandArchive::~ShapeApplyPresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShapeApplyPresetCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeApplyPresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ShapeApplyPresetCommandArchive::ArenaDtor(void* object) {
  ShapeApplyPresetCommandArchive* _this = reinterpret_cast< ShapeApplyPresetCommandArchive* >(object);
  (void)_this;
}
void ShapeApplyPresetCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeApplyPresetCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeApplyPresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShapeApplyPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeApplyPresetCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseApplyPresetCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeApplyPresetCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShapeApplyPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShapeApplyPresetCommandArchive)
  return target;
}

size_t ShapeApplyPresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShapeApplyPresetCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeApplyPresetCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ShapeApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeApplyPresetCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeApplyPresetCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ShapeApplyPresetCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ShapeApplyPresetCommandArchive)
    MergeFrom(*source);
  }
}

void ShapeApplyPresetCommandArchive::MergeFrom(const ShapeApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShapeApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::BaseApplyPresetCommandArchive::MergeFrom(from._internal_super());
  }
}

void ShapeApplyPresetCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ShapeApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeApplyPresetCommandArchive::CopyFrom(const ShapeApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShapeApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeApplyPresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ShapeApplyPresetCommandArchive::InternalSwap(ShapeApplyPresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeApplyPresetCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[18]);
}

// ===================================================================

class MediaApplyPresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaApplyPresetCommandArchive>()._has_bits_);
  static const ::TSD::BaseApplyPresetCommandArchive& super(const MediaApplyPresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseApplyPresetCommandArchive&
MediaApplyPresetCommandArchive::_Internal::super(const MediaApplyPresetCommandArchive* msg) {
  return *msg->super_;
}
MediaApplyPresetCommandArchive::MediaApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaApplyPresetCommandArchive)
}
MediaApplyPresetCommandArchive::MediaApplyPresetCommandArchive(const MediaApplyPresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::BaseApplyPresetCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.MediaApplyPresetCommandArchive)
}

void MediaApplyPresetCommandArchive::SharedCtor() {
super_ = nullptr;
}

MediaApplyPresetCommandArchive::~MediaApplyPresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaApplyPresetCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaApplyPresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void MediaApplyPresetCommandArchive::ArenaDtor(void* object) {
  MediaApplyPresetCommandArchive* _this = reinterpret_cast< MediaApplyPresetCommandArchive* >(object);
  (void)_this;
}
void MediaApplyPresetCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaApplyPresetCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaApplyPresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaApplyPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaApplyPresetCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseApplyPresetCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaApplyPresetCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaApplyPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaApplyPresetCommandArchive)
  return target;
}

size_t MediaApplyPresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaApplyPresetCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaApplyPresetCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MediaApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaApplyPresetCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaApplyPresetCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MediaApplyPresetCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MediaApplyPresetCommandArchive)
    MergeFrom(*source);
  }
}

void MediaApplyPresetCommandArchive::MergeFrom(const MediaApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::BaseApplyPresetCommandArchive::MergeFrom(from._internal_super());
  }
}

void MediaApplyPresetCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MediaApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaApplyPresetCommandArchive::CopyFrom(const MediaApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaApplyPresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void MediaApplyPresetCommandArchive::InternalSwap(MediaApplyPresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaApplyPresetCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[19]);
}

// ===================================================================

class ShapeStyleSetValueCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeStyleSetValueCommandArchive>()._has_bits_);
  static const ::TSD::BaseStyleSetValueCommandArchive& super(const ShapeStyleSetValueCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive& change(const ShapeStyleSetValueCommandArchive* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseStyleSetValueCommandArchive&
ShapeStyleSetValueCommandArchive::_Internal::super(const ShapeStyleSetValueCommandArchive* msg) {
  return *msg->super_;
}
const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive&
ShapeStyleSetValueCommandArchive::_Internal::change(const ShapeStyleSetValueCommandArchive* msg) {
  return *msg->change_;
}
void ShapeStyleSetValueCommandArchive::clear_change() {
  if (change_ != nullptr) change_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ShapeStyleSetValueCommandArchive)
}
ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(const ShapeStyleSetValueCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::BaseStyleSetValueCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_change()) {
    change_ = new ::TSDSOS::BaseShapeStylePropertyChangeSetArchive(*from.change_);
  } else {
    change_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ShapeStyleSetValueCommandArchive)
}

void ShapeStyleSetValueCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&super_)) + sizeof(change_));
}

ShapeStyleSetValueCommandArchive::~ShapeStyleSetValueCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShapeStyleSetValueCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeStyleSetValueCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete change_;
}

void ShapeStyleSetValueCommandArchive::ArenaDtor(void* object) {
  ShapeStyleSetValueCommandArchive* _this = reinterpret_cast< ShapeStyleSetValueCommandArchive* >(object);
  (void)_this;
}
void ShapeStyleSetValueCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeStyleSetValueCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeStyleSetValueCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShapeStyleSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(change_ != nullptr);
      change_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeStyleSetValueCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseStyleSetValueCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.BaseShapeStylePropertyChangeSetArchive change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeStyleSetValueCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShapeStyleSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSDSOS.BaseShapeStylePropertyChangeSetArchive change = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::change(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShapeStyleSetValueCommandArchive)
  return target;
}

size_t ShapeStyleSetValueCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShapeStyleSetValueCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSDSOS.BaseShapeStylePropertyChangeSetArchive change = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *change_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeStyleSetValueCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ShapeStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeStyleSetValueCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeStyleSetValueCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ShapeStyleSetValueCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ShapeStyleSetValueCommandArchive)
    MergeFrom(*source);
  }
}

void ShapeStyleSetValueCommandArchive::MergeFrom(const ShapeStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShapeStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::BaseStyleSetValueCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_change()->::TSDSOS::BaseShapeStylePropertyChangeSetArchive::MergeFrom(from._internal_change());
    }
  }
}

void ShapeStyleSetValueCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ShapeStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeStyleSetValueCommandArchive::CopyFrom(const ShapeStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShapeStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStyleSetValueCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_change()) {
    if (!change_->IsInitialized()) return false;
  }
  return true;
}

void ShapeStyleSetValueCommandArchive::InternalSwap(ShapeStyleSetValueCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, change_)
      + sizeof(ShapeStyleSetValueCommandArchive::change_)
      - PROTOBUF_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeStyleSetValueCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[20]);
}

// ===================================================================

class BaseStyleSetValueCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseStyleSetValueCommandArchive>()._has_bits_);
  static const ::TSD::AbstractStyleCommandArchive& super(const BaseStyleSetValueCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& old_style(const BaseStyleSetValueCommandArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_border_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSD::AbstractStyleCommandArchive&
BaseStyleSetValueCommandArchive::_Internal::super(const BaseStyleSetValueCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
BaseStyleSetValueCommandArchive::_Internal::old_style(const BaseStyleSetValueCommandArchive* msg) {
  return *msg->old_style_;
}
void BaseStyleSetValueCommandArchive::clear_old_style() {
  if (old_style_ != nullptr) old_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BaseStyleSetValueCommandArchive::BaseStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.BaseStyleSetValueCommandArchive)
}
BaseStyleSetValueCommandArchive::BaseStyleSetValueCommandArchive(const BaseStyleSetValueCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::AbstractStyleCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_style()) {
    old_style_ = new ::TSP::Reference(*from.old_style_);
  } else {
    old_style_ = nullptr;
  }
  is_border_change_ = from.is_border_change_;
  // @@protoc_insertion_point(copy_constructor:TSD.BaseStyleSetValueCommandArchive)
}

void BaseStyleSetValueCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_border_change_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_border_change_));
}

BaseStyleSetValueCommandArchive::~BaseStyleSetValueCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.BaseStyleSetValueCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseStyleSetValueCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_style_;
}

void BaseStyleSetValueCommandArchive::ArenaDtor(void* object) {
  BaseStyleSetValueCommandArchive* _this = reinterpret_cast< BaseStyleSetValueCommandArchive* >(object);
  (void)_this;
}
void BaseStyleSetValueCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseStyleSetValueCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseStyleSetValueCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.BaseStyleSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_style_ != nullptr);
      old_style_->Clear();
    }
  }
  is_border_change_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseStyleSetValueCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractStyleCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_border_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_border_change(&has_bits);
          is_border_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseStyleSetValueCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.BaseStyleSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference old_style = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_style(this), target, stream);
  }

  // required bool is_border_change = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_border_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.BaseStyleSetValueCommandArchive)
  return target;
}

size_t BaseStyleSetValueCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.BaseStyleSetValueCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.AbstractStyleCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_is_border_change()) {
    // required bool is_border_change = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t BaseStyleSetValueCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.BaseStyleSetValueCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSD.AbstractStyleCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool is_border_change = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_style = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseStyleSetValueCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.BaseStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseStyleSetValueCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseStyleSetValueCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.BaseStyleSetValueCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.BaseStyleSetValueCommandArchive)
    MergeFrom(*source);
  }
}

void BaseStyleSetValueCommandArchive::MergeFrom(const BaseStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.BaseStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::AbstractStyleCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_style()->::TSP::Reference::MergeFrom(from._internal_old_style());
    }
    if (cached_has_bits & 0x00000004u) {
      is_border_change_ = from.is_border_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BaseStyleSetValueCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.BaseStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseStyleSetValueCommandArchive::CopyFrom(const BaseStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.BaseStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStyleSetValueCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_style()) {
    if (!old_style_->IsInitialized()) return false;
  }
  return true;
}

void BaseStyleSetValueCommandArchive::InternalSwap(BaseStyleSetValueCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseStyleSetValueCommandArchive, is_border_change_)
      + sizeof(BaseStyleSetValueCommandArchive::is_border_change_)
      - PROTOBUF_FIELD_OFFSET(BaseStyleSetValueCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseStyleSetValueCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[21]);
}

// ===================================================================

class MovieSetValueCommandArchive_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieSetValueCommandArchive_PropertyValue>()._has_bits_);
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_postertime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::DataReference& posterimagedata(const MovieSetValueCommandArchive_PropertyValue* msg);
  static void set_has_posterimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autoplay(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_loopoption(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::DataReference& media(const MovieSetValueCommandArchive_PropertyValue* msg);
  static void set_has_media(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playsacrossslides(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::TSP::DataReference&
MovieSetValueCommandArchive_PropertyValue::_Internal::posterimagedata(const MovieSetValueCommandArchive_PropertyValue* msg) {
  return *msg->posterimagedata_;
}
const ::TSP::DataReference&
MovieSetValueCommandArchive_PropertyValue::_Internal::media(const MovieSetValueCommandArchive_PropertyValue* msg) {
  return *msg->media_;
}
void MovieSetValueCommandArchive_PropertyValue::clear_posterimagedata() {
  if (posterimagedata_ != nullptr) posterimagedata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MovieSetValueCommandArchive_PropertyValue::clear_media() {
  if (media_ != nullptr) media_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MovieSetValueCommandArchive_PropertyValue::MovieSetValueCommandArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MovieSetValueCommandArchive.PropertyValue)
}
MovieSetValueCommandArchive_PropertyValue::MovieSetValueCommandArchive_PropertyValue(const MovieSetValueCommandArchive_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_posterimagedata()) {
    posterimagedata_ = new ::TSP::DataReference(*from.posterimagedata_);
  } else {
    posterimagedata_ = nullptr;
  }
  if (from._internal_has_media()) {
    media_ = new ::TSP::DataReference(*from.media_);
  } else {
    media_ = nullptr;
  }
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&playsacrossslides_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(playsacrossslides_));
  // @@protoc_insertion_point(copy_constructor:TSD.MovieSetValueCommandArchive.PropertyValue)
}

void MovieSetValueCommandArchive_PropertyValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&posterimagedata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playsacrossslides_) -
    reinterpret_cast<char*>(&posterimagedata_)) + sizeof(playsacrossslides_));
}

MovieSetValueCommandArchive_PropertyValue::~MovieSetValueCommandArchive_PropertyValue() {
  // @@protoc_insertion_point(destructor:TSD.MovieSetValueCommandArchive.PropertyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovieSetValueCommandArchive_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete posterimagedata_;
  if (this != internal_default_instance()) delete media_;
}

void MovieSetValueCommandArchive_PropertyValue::ArenaDtor(void* object) {
  MovieSetValueCommandArchive_PropertyValue* _this = reinterpret_cast< MovieSetValueCommandArchive_PropertyValue* >(object);
  (void)_this;
}
void MovieSetValueCommandArchive_PropertyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieSetValueCommandArchive_PropertyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovieSetValueCommandArchive_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(posterimagedata_ != nullptr);
      posterimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(media_ != nullptr);
      media_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&starttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&autoplay_) -
        reinterpret_cast<char*>(&starttime_)) + sizeof(autoplay_));
  }
  playsacrossslides_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieSetValueCommandArchive_PropertyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double starttime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double endtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double postertime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_postertime(&has_bits);
          postertime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference posterimagedata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_posterimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool autoplay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_autoplay(&has_bits);
          autoplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::MovieSetValueCommandArchive_LoopOption_IsValid(val))) {
            _internal_set_loopoption(static_cast<::TSD::MovieSetValueCommandArchive_LoopOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference media = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_media(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool playsAcrossSlides = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_playsacrossslides(&has_bits);
          playsacrossslides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovieSetValueCommandArchive_PropertyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double starttime = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_starttime(), target);
  }

  // optional double endtime = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_endtime(), target);
  }

  // optional double postertime = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_postertime(), target);
  }

  // optional .TSP.DataReference posterimagedata = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::posterimagedata(this), target, stream);
  }

  // optional bool autoplay = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_autoplay(), target);
  }

  // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_loopoption(), target);
  }

  // optional float volume = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_volume(), target);
  }

  // optional .TSP.DataReference media = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::media(this), target, stream);
  }

  // optional bool playsAcrossSlides = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_playsacrossslides(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MovieSetValueCommandArchive.PropertyValue)
  return target;
}

size_t MovieSetValueCommandArchive_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.DataReference posterimagedata = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *posterimagedata_);
    }

    // optional .TSP.DataReference media = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *media_);
    }

    // optional double starttime = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double endtime = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double postertime = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_loopoption());
    }

    // optional float volume = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool autoplay = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool playsAcrossSlides = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovieSetValueCommandArchive_PropertyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieSetValueCommandArchive_PropertyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovieSetValueCommandArchive_PropertyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MovieSetValueCommandArchive.PropertyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MovieSetValueCommandArchive.PropertyValue)
    MergeFrom(*source);
  }
}

void MovieSetValueCommandArchive_PropertyValue::MergeFrom(const MovieSetValueCommandArchive_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_posterimagedata()->::TSP::DataReference::MergeFrom(from._internal_posterimagedata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_media()->::TSP::DataReference::MergeFrom(from._internal_media());
    }
    if (cached_has_bits & 0x00000004u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      endtime_ = from.endtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      postertime_ = from.postertime_;
    }
    if (cached_has_bits & 0x00000020u) {
      loopoption_ = from.loopoption_;
    }
    if (cached_has_bits & 0x00000040u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000080u) {
      autoplay_ = from.autoplay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_playsacrossslides(from._internal_playsacrossslides());
  }
}

void MovieSetValueCommandArchive_PropertyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieSetValueCommandArchive_PropertyValue::CopyFrom(const MovieSetValueCommandArchive_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSetValueCommandArchive_PropertyValue::IsInitialized() const {
  if (_internal_has_posterimagedata()) {
    if (!posterimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_media()) {
    if (!media_->IsInitialized()) return false;
  }
  return true;
}

void MovieSetValueCommandArchive_PropertyValue::InternalSwap(MovieSetValueCommandArchive_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, playsacrossslides_)
      + sizeof(MovieSetValueCommandArchive_PropertyValue::playsacrossslides_)
      - PROTOBUF_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, posterimagedata_)>(
          reinterpret_cast<char*>(&posterimagedata_),
          reinterpret_cast<char*>(&other->posterimagedata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieSetValueCommandArchive_PropertyValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[22]);
}

// ===================================================================

class MovieSetValueCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieSetValueCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const MovieSetValueCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::MovieSetValueCommandArchive_PropertyValue& value(const MovieSetValueCommandArchive* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::MovieSetValueCommandArchive_PropertyValue& oldvalue(const MovieSetValueCommandArchive* msg);
  static void set_has_oldvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& importedauxiliarymedia(const MovieSetValueCommandArchive* msg);
  static void set_has_importedauxiliarymedia(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::DataReference& oldimportedauxiliarymedia(const MovieSetValueCommandArchive* msg);
  static void set_has_oldimportedauxiliarymedia(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
MovieSetValueCommandArchive::_Internal::super(const MovieSetValueCommandArchive* msg) {
  return *msg->super_;
}
const ::TSD::MovieSetValueCommandArchive_PropertyValue&
MovieSetValueCommandArchive::_Internal::value(const MovieSetValueCommandArchive* msg) {
  return *msg->value_;
}
const ::TSD::MovieSetValueCommandArchive_PropertyValue&
MovieSetValueCommandArchive::_Internal::oldvalue(const MovieSetValueCommandArchive* msg) {
  return *msg->oldvalue_;
}
const ::TSP::DataReference&
MovieSetValueCommandArchive::_Internal::importedauxiliarymedia(const MovieSetValueCommandArchive* msg) {
  return *msg->importedauxiliarymedia_;
}
const ::TSP::DataReference&
MovieSetValueCommandArchive::_Internal::oldimportedauxiliarymedia(const MovieSetValueCommandArchive* msg) {
  return *msg->oldimportedauxiliarymedia_;
}
void MovieSetValueCommandArchive::clear_importedauxiliarymedia() {
  if (importedauxiliarymedia_ != nullptr) importedauxiliarymedia_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void MovieSetValueCommandArchive::clear_oldimportedauxiliarymedia() {
  if (oldimportedauxiliarymedia_ != nullptr) oldimportedauxiliarymedia_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
MovieSetValueCommandArchive::MovieSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MovieSetValueCommandArchive)
}
MovieSetValueCommandArchive::MovieSetValueCommandArchive(const MovieSetValueCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::TSD::MovieSetValueCommandArchive_PropertyValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_oldvalue()) {
    oldvalue_ = new ::TSD::MovieSetValueCommandArchive_PropertyValue(*from.oldvalue_);
  } else {
    oldvalue_ = nullptr;
  }
  if (from._internal_has_importedauxiliarymedia()) {
    importedauxiliarymedia_ = new ::TSP::DataReference(*from.importedauxiliarymedia_);
  } else {
    importedauxiliarymedia_ = nullptr;
  }
  if (from._internal_has_oldimportedauxiliarymedia()) {
    oldimportedauxiliarymedia_ = new ::TSP::DataReference(*from.oldimportedauxiliarymedia_);
  } else {
    oldimportedauxiliarymedia_ = nullptr;
  }
  property_ = from.property_;
  // @@protoc_insertion_point(copy_constructor:TSD.MovieSetValueCommandArchive)
}

void MovieSetValueCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
    reinterpret_cast<char*>(&super_)) + sizeof(property_));
}

MovieSetValueCommandArchive::~MovieSetValueCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MovieSetValueCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovieSetValueCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete oldvalue_;
  if (this != internal_default_instance()) delete importedauxiliarymedia_;
  if (this != internal_default_instance()) delete oldimportedauxiliarymedia_;
}

void MovieSetValueCommandArchive::ArenaDtor(void* object) {
  MovieSetValueCommandArchive* _this = reinterpret_cast< MovieSetValueCommandArchive* >(object);
  (void)_this;
}
void MovieSetValueCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieSetValueCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovieSetValueCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MovieSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(oldvalue_ != nullptr);
      oldvalue_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(importedauxiliarymedia_ != nullptr);
      importedauxiliarymedia_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(oldimportedauxiliarymedia_ != nullptr);
      oldimportedauxiliarymedia_->Clear();
    }
  }
  property_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieSetValueCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_property(&has_bits);
          property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.MovieSetValueCommandArchive.PropertyValue oldValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference importedauxiliarymedia = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_importedauxiliarymedia(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldimportedauxiliarymedia = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldimportedauxiliarymedia(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovieSetValueCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MovieSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional int32 property = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_property(), target);
  }

  // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  // optional .TSD.MovieSetValueCommandArchive.PropertyValue oldValue = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::oldvalue(this), target, stream);
  }

  // optional .TSP.DataReference importedauxiliarymedia = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::importedauxiliarymedia(this), target, stream);
  }

  // optional .TSP.DataReference oldimportedauxiliarymedia = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::oldimportedauxiliarymedia(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MovieSetValueCommandArchive)
  return target;
}

size_t MovieSetValueCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MovieSetValueCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .TSD.MovieSetValueCommandArchive.PropertyValue oldValue = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldvalue_);
    }

    // optional .TSP.DataReference importedauxiliarymedia = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *importedauxiliarymedia_);
    }

    // optional .TSP.DataReference oldimportedauxiliarymedia = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldimportedauxiliarymedia_);
    }

    // optional int32 property = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_property());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovieSetValueCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MovieSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieSetValueCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovieSetValueCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MovieSetValueCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MovieSetValueCommandArchive)
    MergeFrom(*source);
  }
}

void MovieSetValueCommandArchive::MergeFrom(const MovieSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MovieSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::TSD::MovieSetValueCommandArchive_PropertyValue::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_oldvalue()->::TSD::MovieSetValueCommandArchive_PropertyValue::MergeFrom(from._internal_oldvalue());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_importedauxiliarymedia()->::TSP::DataReference::MergeFrom(from._internal_importedauxiliarymedia());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_oldimportedauxiliarymedia()->::TSP::DataReference::MergeFrom(from._internal_oldimportedauxiliarymedia());
    }
    if (cached_has_bits & 0x00000020u) {
      property_ = from.property_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MovieSetValueCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MovieSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieSetValueCommandArchive::CopyFrom(const MovieSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MovieSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSetValueCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  if (_internal_has_oldvalue()) {
    if (!oldvalue_->IsInitialized()) return false;
  }
  if (_internal_has_importedauxiliarymedia()) {
    if (!importedauxiliarymedia_->IsInitialized()) return false;
  }
  if (_internal_has_oldimportedauxiliarymedia()) {
    if (!oldimportedauxiliarymedia_->IsInitialized()) return false;
  }
  return true;
}

void MovieSetValueCommandArchive::InternalSwap(MovieSetValueCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieSetValueCommandArchive, property_)
      + sizeof(MovieSetValueCommandArchive::property_)
      - PROTOBUF_FIELD_OFFSET(MovieSetValueCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieSetValueCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[23]);
}

// ===================================================================

class MediaStyleSetValueCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaStyleSetValueCommandArchive>()._has_bits_);
  static const ::TSD::BaseStyleSetValueCommandArchive& super(const MediaStyleSetValueCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSDSOS::MediaStylePropertyChangeSetArchive& change(const MediaStyleSetValueCommandArchive* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseStyleSetValueCommandArchive&
MediaStyleSetValueCommandArchive::_Internal::super(const MediaStyleSetValueCommandArchive* msg) {
  return *msg->super_;
}
const ::TSDSOS::MediaStylePropertyChangeSetArchive&
MediaStyleSetValueCommandArchive::_Internal::change(const MediaStyleSetValueCommandArchive* msg) {
  return *msg->change_;
}
void MediaStyleSetValueCommandArchive::clear_change() {
  if (change_ != nullptr) change_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MediaStyleSetValueCommandArchive::MediaStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaStyleSetValueCommandArchive)
}
MediaStyleSetValueCommandArchive::MediaStyleSetValueCommandArchive(const MediaStyleSetValueCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::BaseStyleSetValueCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_change()) {
    change_ = new ::TSDSOS::MediaStylePropertyChangeSetArchive(*from.change_);
  } else {
    change_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.MediaStyleSetValueCommandArchive)
}

void MediaStyleSetValueCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&super_)) + sizeof(change_));
}

MediaStyleSetValueCommandArchive::~MediaStyleSetValueCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaStyleSetValueCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaStyleSetValueCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete change_;
}

void MediaStyleSetValueCommandArchive::ArenaDtor(void* object) {
  MediaStyleSetValueCommandArchive* _this = reinterpret_cast< MediaStyleSetValueCommandArchive* >(object);
  (void)_this;
}
void MediaStyleSetValueCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaStyleSetValueCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaStyleSetValueCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaStyleSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(change_ != nullptr);
      change_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaStyleSetValueCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseStyleSetValueCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaStyleSetValueCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaStyleSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::change(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaStyleSetValueCommandArchive)
  return target;
}

size_t MediaStyleSetValueCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaStyleSetValueCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *change_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaStyleSetValueCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MediaStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaStyleSetValueCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaStyleSetValueCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MediaStyleSetValueCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MediaStyleSetValueCommandArchive)
    MergeFrom(*source);
  }
}

void MediaStyleSetValueCommandArchive::MergeFrom(const MediaStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::BaseStyleSetValueCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_change()->::TSDSOS::MediaStylePropertyChangeSetArchive::MergeFrom(from._internal_change());
    }
  }
}

void MediaStyleSetValueCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MediaStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaStyleSetValueCommandArchive::CopyFrom(const MediaStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStyleSetValueCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_change()) {
    if (!change_->IsInitialized()) return false;
  }
  return true;
}

void MediaStyleSetValueCommandArchive::InternalSwap(MediaStyleSetValueCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaStyleSetValueCommandArchive, change_)
      + sizeof(MediaStyleSetValueCommandArchive::change_)
      - PROTOBUF_FIELD_OFFSET(MediaStyleSetValueCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaStyleSetValueCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[24]);
}

// ===================================================================

class ImageMediaCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageMediaCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageMediaCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& newimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_newimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::DataReference& oldimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::DataReference& oldoriginalimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldoriginalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Size& oldnaturalsize(const ImageMediaCommandArchive* msg);
  static void set_has_oldnaturalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::DataReference& neworiginalimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_neworiginalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::ImageAdjustmentsArchive& oldimageadjustments(const ImageMediaCommandArchive* msg);
  static void set_has_oldimageadjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::DataReference& oldadjustedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::DataReference& oldenhancedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldenhancedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::ImageAdjustmentsArchive& imageadjustments(const ImageMediaCommandArchive* msg);
  static void set_has_imageadjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::DataReference& adjustedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_adjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::DataReference& enhancedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_enhancedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::DataReference& newthumbnailimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_newthumbnailimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::DataReference& oldthumbnailimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldthumbnailimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::DataReference& thumbnailadjustedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_thumbnailadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::DataReference& oldthumbnailadjustedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldthumbnailadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Reference& database_newimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_database_newimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& database_oldimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_database_oldimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& database_oldoriginalimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_database_oldoriginalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& database_neworiginalimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_database_neworiginalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageMediaCommandArchive::_Internal::super(const ImageMediaCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::newimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->newimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->oldimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldoriginalimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->oldoriginalimagedata_;
}
const ::TSP::Size&
ImageMediaCommandArchive::_Internal::oldnaturalsize(const ImageMediaCommandArchive* msg) {
  return *msg->oldnaturalsize_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::neworiginalimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->neworiginalimagedata_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageMediaCommandArchive::_Internal::oldimageadjustments(const ImageMediaCommandArchive* msg) {
  return *msg->oldimageadjustments_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldadjustedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->oldadjustedimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldenhancedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->oldenhancedimagedata_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageMediaCommandArchive::_Internal::imageadjustments(const ImageMediaCommandArchive* msg) {
  return *msg->imageadjustments_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::adjustedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->adjustedimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::enhancedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->enhancedimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::newthumbnailimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->newthumbnailimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldthumbnailimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->oldthumbnailimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::thumbnailadjustedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->thumbnailadjustedimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldthumbnailadjustedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->oldthumbnailadjustedimagedata_;
}
const ::TSP::Reference&
ImageMediaCommandArchive::_Internal::database_newimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->database_newimagedata_;
}
const ::TSP::Reference&
ImageMediaCommandArchive::_Internal::database_oldimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->database_oldimagedata_;
}
const ::TSP::Reference&
ImageMediaCommandArchive::_Internal::database_oldoriginalimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->database_oldoriginalimagedata_;
}
const ::TSP::Reference&
ImageMediaCommandArchive::_Internal::database_neworiginalimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->database_neworiginalimagedata_;
}
void ImageMediaCommandArchive::clear_newimagedata() {
  if (newimagedata_ != nullptr) newimagedata_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ImageMediaCommandArchive::clear_oldimagedata() {
  if (oldimagedata_ != nullptr) oldimagedata_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ImageMediaCommandArchive::clear_oldoriginalimagedata() {
  if (oldoriginalimagedata_ != nullptr) oldoriginalimagedata_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ImageMediaCommandArchive::clear_oldnaturalsize() {
  if (oldnaturalsize_ != nullptr) oldnaturalsize_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ImageMediaCommandArchive::clear_neworiginalimagedata() {
  if (neworiginalimagedata_ != nullptr) neworiginalimagedata_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ImageMediaCommandArchive::clear_oldimageadjustments() {
  if (oldimageadjustments_ != nullptr) oldimageadjustments_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ImageMediaCommandArchive::clear_oldadjustedimagedata() {
  if (oldadjustedimagedata_ != nullptr) oldadjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ImageMediaCommandArchive::clear_oldenhancedimagedata() {
  if (oldenhancedimagedata_ != nullptr) oldenhancedimagedata_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ImageMediaCommandArchive::clear_imageadjustments() {
  if (imageadjustments_ != nullptr) imageadjustments_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void ImageMediaCommandArchive::clear_adjustedimagedata() {
  if (adjustedimagedata_ != nullptr) adjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void ImageMediaCommandArchive::clear_enhancedimagedata() {
  if (enhancedimagedata_ != nullptr) enhancedimagedata_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void ImageMediaCommandArchive::clear_newthumbnailimagedata() {
  if (newthumbnailimagedata_ != nullptr) newthumbnailimagedata_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void ImageMediaCommandArchive::clear_oldthumbnailimagedata() {
  if (oldthumbnailimagedata_ != nullptr) oldthumbnailimagedata_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void ImageMediaCommandArchive::clear_thumbnailadjustedimagedata() {
  if (thumbnailadjustedimagedata_ != nullptr) thumbnailadjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void ImageMediaCommandArchive::clear_oldthumbnailadjustedimagedata() {
  if (oldthumbnailadjustedimagedata_ != nullptr) oldthumbnailadjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void ImageMediaCommandArchive::clear_database_newimagedata() {
  if (database_newimagedata_ != nullptr) database_newimagedata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ImageMediaCommandArchive::clear_database_oldimagedata() {
  if (database_oldimagedata_ != nullptr) database_oldimagedata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ImageMediaCommandArchive::clear_database_oldoriginalimagedata() {
  if (database_oldoriginalimagedata_ != nullptr) database_oldoriginalimagedata_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ImageMediaCommandArchive::clear_database_neworiginalimagedata() {
  if (database_neworiginalimagedata_ != nullptr) database_neworiginalimagedata_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ImageMediaCommandArchive::ImageMediaCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageMediaCommandArchive)
}
ImageMediaCommandArchive::ImageMediaCommandArchive(const ImageMediaCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_database_newimagedata()) {
    database_newimagedata_ = new ::TSP::Reference(*from.database_newimagedata_);
  } else {
    database_newimagedata_ = nullptr;
  }
  if (from._internal_has_database_oldimagedata()) {
    database_oldimagedata_ = new ::TSP::Reference(*from.database_oldimagedata_);
  } else {
    database_oldimagedata_ = nullptr;
  }
  if (from._internal_has_database_oldoriginalimagedata()) {
    database_oldoriginalimagedata_ = new ::TSP::Reference(*from.database_oldoriginalimagedata_);
  } else {
    database_oldoriginalimagedata_ = nullptr;
  }
  if (from._internal_has_oldnaturalsize()) {
    oldnaturalsize_ = new ::TSP::Size(*from.oldnaturalsize_);
  } else {
    oldnaturalsize_ = nullptr;
  }
  if (from._internal_has_database_neworiginalimagedata()) {
    database_neworiginalimagedata_ = new ::TSP::Reference(*from.database_neworiginalimagedata_);
  } else {
    database_neworiginalimagedata_ = nullptr;
  }
  if (from._internal_has_newimagedata()) {
    newimagedata_ = new ::TSP::DataReference(*from.newimagedata_);
  } else {
    newimagedata_ = nullptr;
  }
  if (from._internal_has_oldimagedata()) {
    oldimagedata_ = new ::TSP::DataReference(*from.oldimagedata_);
  } else {
    oldimagedata_ = nullptr;
  }
  if (from._internal_has_oldoriginalimagedata()) {
    oldoriginalimagedata_ = new ::TSP::DataReference(*from.oldoriginalimagedata_);
  } else {
    oldoriginalimagedata_ = nullptr;
  }
  if (from._internal_has_neworiginalimagedata()) {
    neworiginalimagedata_ = new ::TSP::DataReference(*from.neworiginalimagedata_);
  } else {
    neworiginalimagedata_ = nullptr;
  }
  if (from._internal_has_oldimageadjustments()) {
    oldimageadjustments_ = new ::TSD::ImageAdjustmentsArchive(*from.oldimageadjustments_);
  } else {
    oldimageadjustments_ = nullptr;
  }
  if (from._internal_has_oldadjustedimagedata()) {
    oldadjustedimagedata_ = new ::TSP::DataReference(*from.oldadjustedimagedata_);
  } else {
    oldadjustedimagedata_ = nullptr;
  }
  if (from._internal_has_oldenhancedimagedata()) {
    oldenhancedimagedata_ = new ::TSP::DataReference(*from.oldenhancedimagedata_);
  } else {
    oldenhancedimagedata_ = nullptr;
  }
  if (from._internal_has_imageadjustments()) {
    imageadjustments_ = new ::TSD::ImageAdjustmentsArchive(*from.imageadjustments_);
  } else {
    imageadjustments_ = nullptr;
  }
  if (from._internal_has_adjustedimagedata()) {
    adjustedimagedata_ = new ::TSP::DataReference(*from.adjustedimagedata_);
  } else {
    adjustedimagedata_ = nullptr;
  }
  if (from._internal_has_enhancedimagedata()) {
    enhancedimagedata_ = new ::TSP::DataReference(*from.enhancedimagedata_);
  } else {
    enhancedimagedata_ = nullptr;
  }
  if (from._internal_has_newthumbnailimagedata()) {
    newthumbnailimagedata_ = new ::TSP::DataReference(*from.newthumbnailimagedata_);
  } else {
    newthumbnailimagedata_ = nullptr;
  }
  if (from._internal_has_oldthumbnailimagedata()) {
    oldthumbnailimagedata_ = new ::TSP::DataReference(*from.oldthumbnailimagedata_);
  } else {
    oldthumbnailimagedata_ = nullptr;
  }
  if (from._internal_has_thumbnailadjustedimagedata()) {
    thumbnailadjustedimagedata_ = new ::TSP::DataReference(*from.thumbnailadjustedimagedata_);
  } else {
    thumbnailadjustedimagedata_ = nullptr;
  }
  if (from._internal_has_oldthumbnailadjustedimagedata()) {
    oldthumbnailadjustedimagedata_ = new ::TSP::DataReference(*from.oldthumbnailadjustedimagedata_);
  } else {
    oldthumbnailadjustedimagedata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageMediaCommandArchive)
}

void ImageMediaCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oldthumbnailadjustedimagedata_) -
    reinterpret_cast<char*>(&super_)) + sizeof(oldthumbnailadjustedimagedata_));
}

ImageMediaCommandArchive::~ImageMediaCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageMediaCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageMediaCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete database_newimagedata_;
  if (this != internal_default_instance()) delete database_oldimagedata_;
  if (this != internal_default_instance()) delete database_oldoriginalimagedata_;
  if (this != internal_default_instance()) delete oldnaturalsize_;
  if (this != internal_default_instance()) delete database_neworiginalimagedata_;
  if (this != internal_default_instance()) delete newimagedata_;
  if (this != internal_default_instance()) delete oldimagedata_;
  if (this != internal_default_instance()) delete oldoriginalimagedata_;
  if (this != internal_default_instance()) delete neworiginalimagedata_;
  if (this != internal_default_instance()) delete oldimageadjustments_;
  if (this != internal_default_instance()) delete oldadjustedimagedata_;
  if (this != internal_default_instance()) delete oldenhancedimagedata_;
  if (this != internal_default_instance()) delete imageadjustments_;
  if (this != internal_default_instance()) delete adjustedimagedata_;
  if (this != internal_default_instance()) delete enhancedimagedata_;
  if (this != internal_default_instance()) delete newthumbnailimagedata_;
  if (this != internal_default_instance()) delete oldthumbnailimagedata_;
  if (this != internal_default_instance()) delete thumbnailadjustedimagedata_;
  if (this != internal_default_instance()) delete oldthumbnailadjustedimagedata_;
}

void ImageMediaCommandArchive::ArenaDtor(void* object) {
  ImageMediaCommandArchive* _this = reinterpret_cast< ImageMediaCommandArchive* >(object);
  (void)_this;
}
void ImageMediaCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageMediaCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageMediaCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageMediaCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(database_newimagedata_ != nullptr);
      database_newimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(database_oldimagedata_ != nullptr);
      database_oldimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(database_oldoriginalimagedata_ != nullptr);
      database_oldoriginalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(oldnaturalsize_ != nullptr);
      oldnaturalsize_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(database_neworiginalimagedata_ != nullptr);
      database_neworiginalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(newimagedata_ != nullptr);
      newimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(oldimagedata_ != nullptr);
      oldimagedata_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(oldoriginalimagedata_ != nullptr);
      oldoriginalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(neworiginalimagedata_ != nullptr);
      neworiginalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(oldimageadjustments_ != nullptr);
      oldimageadjustments_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(oldadjustedimagedata_ != nullptr);
      oldadjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(oldenhancedimagedata_ != nullptr);
      oldenhancedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(imageadjustments_ != nullptr);
      imageadjustments_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(adjustedimagedata_ != nullptr);
      adjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(enhancedimagedata_ != nullptr);
      enhancedimagedata_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(newthumbnailimagedata_ != nullptr);
      newthumbnailimagedata_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(oldthumbnailimagedata_ != nullptr);
      oldthumbnailimagedata_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(thumbnailadjustedimagedata_ != nullptr);
      thumbnailadjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(oldthumbnailadjustedimagedata_ != nullptr);
      oldthumbnailadjustedimagedata_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageMediaCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_newImageData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_newimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_oldImageData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_oldimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_oldOriginalImageData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_oldoriginalimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size oldNaturalSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldnaturalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_newOriginalImageData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_neworiginalimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference newImageData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_newimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldImageData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldOriginalImageData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldoriginalimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference newOriginalImageData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_neworiginalimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldimageadjustments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldAdjustedImageData = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldadjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldEnhancedImageData = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldenhancedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_imageadjustments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference adjustedImageData = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference enhancedImageData = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_enhancedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference newThumbnailImageData = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_newthumbnailimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldThumbnailImageData = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldthumbnailimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnailAdjustedImageData = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnailadjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldThumbnailAdjustedImageData = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldthumbnailadjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageMediaCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageMediaCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference database_newImageData = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::database_newimagedata(this), target, stream);
  }

  // optional .TSP.Reference database_oldImageData = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::database_oldimagedata(this), target, stream);
  }

  // optional .TSP.Reference database_oldOriginalImageData = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::database_oldoriginalimagedata(this), target, stream);
  }

  // optional .TSP.Size oldNaturalSize = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::oldnaturalsize(this), target, stream);
  }

  // optional .TSP.Reference database_newOriginalImageData = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::database_neworiginalimagedata(this), target, stream);
  }

  // optional .TSP.DataReference newImageData = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::newimagedata(this), target, stream);
  }

  // optional .TSP.DataReference oldImageData = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::oldimagedata(this), target, stream);
  }

  // optional .TSP.DataReference oldOriginalImageData = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::oldoriginalimagedata(this), target, stream);
  }

  // optional .TSP.DataReference newOriginalImageData = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::neworiginalimagedata(this), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::oldimageadjustments(this), target, stream);
  }

  // optional .TSP.DataReference oldAdjustedImageData = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::oldadjustedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference oldEnhancedImageData = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::oldenhancedimagedata(this), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::imageadjustments(this), target, stream);
  }

  // optional .TSP.DataReference adjustedImageData = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::adjustedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference enhancedImageData = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::enhancedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference newThumbnailImageData = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::newthumbnailimagedata(this), target, stream);
  }

  // optional .TSP.DataReference oldThumbnailImageData = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::oldthumbnailimagedata(this), target, stream);
  }

  // optional .TSP.DataReference thumbnailAdjustedImageData = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::thumbnailadjustedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference oldThumbnailAdjustedImageData = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::oldthumbnailadjustedimagedata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageMediaCommandArchive)
  return target;
}

size_t ImageMediaCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageMediaCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSP.Reference database_newImageData = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_newimagedata_);
    }

    // optional .TSP.Reference database_oldImageData = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_oldimagedata_);
    }

    // optional .TSP.Reference database_oldOriginalImageData = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_oldoriginalimagedata_);
    }

    // optional .TSP.Size oldNaturalSize = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldnaturalsize_);
    }

    // optional .TSP.Reference database_newOriginalImageData = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_neworiginalimagedata_);
    }

    // optional .TSP.DataReference newImageData = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *newimagedata_);
    }

    // optional .TSP.DataReference oldImageData = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldimagedata_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.DataReference oldOriginalImageData = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldoriginalimagedata_);
    }

    // optional .TSP.DataReference newOriginalImageData = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *neworiginalimagedata_);
    }

    // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldimageadjustments_);
    }

    // optional .TSP.DataReference oldAdjustedImageData = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldadjustedimagedata_);
    }

    // optional .TSP.DataReference oldEnhancedImageData = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldenhancedimagedata_);
    }

    // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imageadjustments_);
    }

    // optional .TSP.DataReference adjustedImageData = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjustedimagedata_);
    }

    // optional .TSP.DataReference enhancedImageData = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enhancedimagedata_);
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional .TSP.DataReference newThumbnailImageData = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *newthumbnailimagedata_);
    }

    // optional .TSP.DataReference oldThumbnailImageData = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldthumbnailimagedata_);
    }

    // optional .TSP.DataReference thumbnailAdjustedImageData = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thumbnailadjustedimagedata_);
    }

    // optional .TSP.DataReference oldThumbnailAdjustedImageData = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldthumbnailadjustedimagedata_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageMediaCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageMediaCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageMediaCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageMediaCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageMediaCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageMediaCommandArchive)
    MergeFrom(*source);
  }
}

void ImageMediaCommandArchive::MergeFrom(const ImageMediaCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageMediaCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_database_newimagedata()->::TSP::Reference::MergeFrom(from._internal_database_newimagedata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_database_oldimagedata()->::TSP::Reference::MergeFrom(from._internal_database_oldimagedata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_database_oldoriginalimagedata()->::TSP::Reference::MergeFrom(from._internal_database_oldoriginalimagedata());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_oldnaturalsize()->::TSP::Size::MergeFrom(from._internal_oldnaturalsize());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_database_neworiginalimagedata()->::TSP::Reference::MergeFrom(from._internal_database_neworiginalimagedata());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_newimagedata()->::TSP::DataReference::MergeFrom(from._internal_newimagedata());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_oldimagedata()->::TSP::DataReference::MergeFrom(from._internal_oldimagedata());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_oldoriginalimagedata()->::TSP::DataReference::MergeFrom(from._internal_oldoriginalimagedata());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_neworiginalimagedata()->::TSP::DataReference::MergeFrom(from._internal_neworiginalimagedata());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_oldimageadjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from._internal_oldimageadjustments());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_oldadjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_oldadjustedimagedata());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_oldenhancedimagedata()->::TSP::DataReference::MergeFrom(from._internal_oldenhancedimagedata());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_imageadjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from._internal_imageadjustments());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_adjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_adjustedimagedata());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_enhancedimagedata()->::TSP::DataReference::MergeFrom(from._internal_enhancedimagedata());
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_newthumbnailimagedata()->::TSP::DataReference::MergeFrom(from._internal_newthumbnailimagedata());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_oldthumbnailimagedata()->::TSP::DataReference::MergeFrom(from._internal_oldthumbnailimagedata());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_thumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_thumbnailadjustedimagedata());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_oldthumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_oldthumbnailadjustedimagedata());
    }
  }
}

void ImageMediaCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageMediaCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMediaCommandArchive::CopyFrom(const ImageMediaCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageMediaCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMediaCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_database_newimagedata()) {
    if (!database_newimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_database_oldimagedata()) {
    if (!database_oldimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_database_oldoriginalimagedata()) {
    if (!database_oldoriginalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldnaturalsize()) {
    if (!oldnaturalsize_->IsInitialized()) return false;
  }
  if (_internal_has_database_neworiginalimagedata()) {
    if (!database_neworiginalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_newimagedata()) {
    if (!newimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldimagedata()) {
    if (!oldimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldoriginalimagedata()) {
    if (!oldoriginalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_neworiginalimagedata()) {
    if (!neworiginalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldadjustedimagedata()) {
    if (!oldadjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldenhancedimagedata()) {
    if (!oldenhancedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_adjustedimagedata()) {
    if (!adjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_enhancedimagedata()) {
    if (!enhancedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_newthumbnailimagedata()) {
    if (!newthumbnailimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldthumbnailimagedata()) {
    if (!oldthumbnailimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnailadjustedimagedata()) {
    if (!thumbnailadjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldthumbnailadjustedimagedata()) {
    if (!oldthumbnailadjustedimagedata_->IsInitialized()) return false;
  }
  return true;
}

void ImageMediaCommandArchive::InternalSwap(ImageMediaCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageMediaCommandArchive, oldthumbnailadjustedimagedata_)
      + sizeof(ImageMediaCommandArchive::oldthumbnailadjustedimagedata_)
      - PROTOBUF_FIELD_OFFSET(ImageMediaCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMediaCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[25]);
}

// ===================================================================

class MediaOriginalSizeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaOriginalSizeCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const MediaOriginalSizeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& neworiginalsize(const MediaOriginalSizeCommandArchive* msg);
  static void set_has_neworiginalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Size& oldoriginalsize(const MediaOriginalSizeCommandArchive* msg);
  static void set_has_oldoriginalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_propertyname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::InfoCommandArchive&
MediaOriginalSizeCommandArchive::_Internal::super(const MediaOriginalSizeCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Size&
MediaOriginalSizeCommandArchive::_Internal::neworiginalsize(const MediaOriginalSizeCommandArchive* msg) {
  return *msg->neworiginalsize_;
}
const ::TSP::Size&
MediaOriginalSizeCommandArchive::_Internal::oldoriginalsize(const MediaOriginalSizeCommandArchive* msg) {
  return *msg->oldoriginalsize_;
}
void MediaOriginalSizeCommandArchive::clear_neworiginalsize() {
  if (neworiginalsize_ != nullptr) neworiginalsize_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void MediaOriginalSizeCommandArchive::clear_oldoriginalsize() {
  if (oldoriginalsize_ != nullptr) oldoriginalsize_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
MediaOriginalSizeCommandArchive::MediaOriginalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaOriginalSizeCommandArchive)
}
MediaOriginalSizeCommandArchive::MediaOriginalSizeCommandArchive(const MediaOriginalSizeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  propertyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_propertyname()) {
    propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_propertyname(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_neworiginalsize()) {
    neworiginalsize_ = new ::TSP::Size(*from.neworiginalsize_);
  } else {
    neworiginalsize_ = nullptr;
  }
  if (from._internal_has_oldoriginalsize()) {
    oldoriginalsize_ = new ::TSP::Size(*from.oldoriginalsize_);
  } else {
    oldoriginalsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.MediaOriginalSizeCommandArchive)
}

void MediaOriginalSizeCommandArchive::SharedCtor() {
propertyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oldoriginalsize_) -
    reinterpret_cast<char*>(&super_)) + sizeof(oldoriginalsize_));
}

MediaOriginalSizeCommandArchive::~MediaOriginalSizeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaOriginalSizeCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaOriginalSizeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  propertyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete neworiginalsize_;
  if (this != internal_default_instance()) delete oldoriginalsize_;
}

void MediaOriginalSizeCommandArchive::ArenaDtor(void* object) {
  MediaOriginalSizeCommandArchive* _this = reinterpret_cast< MediaOriginalSizeCommandArchive* >(object);
  (void)_this;
}
void MediaOriginalSizeCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaOriginalSizeCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaOriginalSizeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaOriginalSizeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      propertyname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(neworiginalsize_ != nullptr);
      neworiginalsize_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(oldoriginalsize_ != nullptr);
      oldoriginalsize_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaOriginalSizeCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size newOriginalSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_neworiginalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size oldOriginalSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldoriginalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string propertyName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_propertyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.MediaOriginalSizeCommandArchive.propertyName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaOriginalSizeCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaOriginalSizeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Size newOriginalSize = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::neworiginalsize(this), target, stream);
  }

  // optional .TSP.Size oldOriginalSize = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::oldoriginalsize(this), target, stream);
  }

  // required string propertyName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_propertyname().data(), static_cast<int>(this->_internal_propertyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MediaOriginalSizeCommandArchive.propertyName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_propertyname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaOriginalSizeCommandArchive)
  return target;
}

size_t MediaOriginalSizeCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.MediaOriginalSizeCommandArchive)
  size_t total_size = 0;

  if (_internal_has_propertyname()) {
    // required string propertyName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propertyname());
  }

  if (_internal_has_super()) {
    // required .TSD.InfoCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t MediaOriginalSizeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaOriginalSizeCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string propertyName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propertyname());

    // required .TSD.InfoCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.Size newOriginalSize = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *neworiginalsize_);
    }

    // optional .TSP.Size oldOriginalSize = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldoriginalsize_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaOriginalSizeCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MediaOriginalSizeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaOriginalSizeCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaOriginalSizeCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MediaOriginalSizeCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MediaOriginalSizeCommandArchive)
    MergeFrom(*source);
  }
}

void MediaOriginalSizeCommandArchive::MergeFrom(const MediaOriginalSizeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaOriginalSizeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_propertyname(from._internal_propertyname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_neworiginalsize()->::TSP::Size::MergeFrom(from._internal_neworiginalsize());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_oldoriginalsize()->::TSP::Size::MergeFrom(from._internal_oldoriginalsize());
    }
  }
}

void MediaOriginalSizeCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MediaOriginalSizeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaOriginalSizeCommandArchive::CopyFrom(const MediaOriginalSizeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaOriginalSizeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaOriginalSizeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_neworiginalsize()) {
    if (!neworiginalsize_->IsInitialized()) return false;
  }
  if (_internal_has_oldoriginalsize()) {
    if (!oldoriginalsize_->IsInitialized()) return false;
  }
  return true;
}

void MediaOriginalSizeCommandArchive::InternalSwap(MediaOriginalSizeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  propertyname_.Swap(&other->propertyname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaOriginalSizeCommandArchive, oldoriginalsize_)
      + sizeof(MediaOriginalSizeCommandArchive::oldoriginalsize_)
      - PROTOBUF_FIELD_OFFSET(MediaOriginalSizeCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaOriginalSizeCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[26]);
}

// ===================================================================

class MediaInfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfoGeometryCommandArchive>()._has_bits_);
  static const ::TSD::InfoGeometryCommandArchive& super(const MediaInfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& neworiginalsize(const MediaInfoGeometryCommandArchive* msg);
  static void set_has_neworiginalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& oldoriginalsize(const MediaInfoGeometryCommandArchive* msg);
  static void set_has_oldoriginalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSD::InfoGeometryCommandArchive&
MediaInfoGeometryCommandArchive::_Internal::super(const MediaInfoGeometryCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Size&
MediaInfoGeometryCommandArchive::_Internal::neworiginalsize(const MediaInfoGeometryCommandArchive* msg) {
  return *msg->neworiginalsize_;
}
const ::TSP::Size&
MediaInfoGeometryCommandArchive::_Internal::oldoriginalsize(const MediaInfoGeometryCommandArchive* msg) {
  return *msg->oldoriginalsize_;
}
void MediaInfoGeometryCommandArchive::clear_neworiginalsize() {
  if (neworiginalsize_ != nullptr) neworiginalsize_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MediaInfoGeometryCommandArchive::clear_oldoriginalsize() {
  if (oldoriginalsize_ != nullptr) oldoriginalsize_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MediaInfoGeometryCommandArchive::MediaInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaInfoGeometryCommandArchive)
}
MediaInfoGeometryCommandArchive::MediaInfoGeometryCommandArchive(const MediaInfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoGeometryCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_neworiginalsize()) {
    neworiginalsize_ = new ::TSP::Size(*from.neworiginalsize_);
  } else {
    neworiginalsize_ = nullptr;
  }
  if (from._internal_has_oldoriginalsize()) {
    oldoriginalsize_ = new ::TSP::Size(*from.oldoriginalsize_);
  } else {
    oldoriginalsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.MediaInfoGeometryCommandArchive)
}

void MediaInfoGeometryCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oldoriginalsize_) -
    reinterpret_cast<char*>(&super_)) + sizeof(oldoriginalsize_));
}

MediaInfoGeometryCommandArchive::~MediaInfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaInfoGeometryCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaInfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete neworiginalsize_;
  if (this != internal_default_instance()) delete oldoriginalsize_;
}

void MediaInfoGeometryCommandArchive::ArenaDtor(void* object) {
  MediaInfoGeometryCommandArchive* _this = reinterpret_cast< MediaInfoGeometryCommandArchive* >(object);
  (void)_this;
}
void MediaInfoGeometryCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaInfoGeometryCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaInfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaInfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(neworiginalsize_ != nullptr);
      neworiginalsize_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(oldoriginalsize_ != nullptr);
      oldoriginalsize_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaInfoGeometryCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoGeometryCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Size newOriginalSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_neworiginalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Size oldOriginalSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldoriginalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaInfoGeometryCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaInfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoGeometryCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Size newOriginalSize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::neworiginalsize(this), target, stream);
  }

  // required .TSP.Size oldOriginalSize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::oldoriginalsize(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaInfoGeometryCommandArchive)
  return target;
}

size_t MediaInfoGeometryCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.MediaInfoGeometryCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.InfoGeometryCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_neworiginalsize()) {
    // required .TSP.Size newOriginalSize = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neworiginalsize_);
  }

  if (_internal_has_oldoriginalsize()) {
    // required .TSP.Size oldOriginalSize = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oldoriginalsize_);
  }

  return total_size;
}
size_t MediaInfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaInfoGeometryCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSD.InfoGeometryCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Size newOriginalSize = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neworiginalsize_);

    // required .TSP.Size oldOriginalSize = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oldoriginalsize_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaInfoGeometryCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MediaInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaInfoGeometryCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaInfoGeometryCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MediaInfoGeometryCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MediaInfoGeometryCommandArchive)
    MergeFrom(*source);
  }
}

void MediaInfoGeometryCommandArchive::MergeFrom(const MediaInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoGeometryCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_neworiginalsize()->::TSP::Size::MergeFrom(from._internal_neworiginalsize());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_oldoriginalsize()->::TSP::Size::MergeFrom(from._internal_oldoriginalsize());
    }
  }
}

void MediaInfoGeometryCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MediaInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaInfoGeometryCommandArchive::CopyFrom(const MediaInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaInfoGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_neworiginalsize()) {
    if (!neworiginalsize_->IsInitialized()) return false;
  }
  if (_internal_has_oldoriginalsize()) {
    if (!oldoriginalsize_->IsInitialized()) return false;
  }
  return true;
}

void MediaInfoGeometryCommandArchive::InternalSwap(MediaInfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaInfoGeometryCommandArchive, oldoriginalsize_)
      + sizeof(MediaInfoGeometryCommandArchive::oldoriginalsize_)
      - PROTOBUF_FIELD_OFFSET(MediaInfoGeometryCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaInfoGeometryCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[27]);
}

// ===================================================================

class ImageNaturalSizeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageNaturalSizeCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageNaturalSizeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& new_natural_size(const ImageNaturalSizeCommandArchive* msg);
  static void set_has_new_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& old_natural_size(const ImageNaturalSizeCommandArchive* msg);
  static void set_has_old_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageNaturalSizeCommandArchive::_Internal::super(const ImageNaturalSizeCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Size&
ImageNaturalSizeCommandArchive::_Internal::new_natural_size(const ImageNaturalSizeCommandArchive* msg) {
  return *msg->new_natural_size_;
}
const ::TSP::Size&
ImageNaturalSizeCommandArchive::_Internal::old_natural_size(const ImageNaturalSizeCommandArchive* msg) {
  return *msg->old_natural_size_;
}
void ImageNaturalSizeCommandArchive::clear_new_natural_size() {
  if (new_natural_size_ != nullptr) new_natural_size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ImageNaturalSizeCommandArchive::clear_old_natural_size() {
  if (old_natural_size_ != nullptr) old_natural_size_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ImageNaturalSizeCommandArchive::ImageNaturalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageNaturalSizeCommandArchive)
}
ImageNaturalSizeCommandArchive::ImageNaturalSizeCommandArchive(const ImageNaturalSizeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_new_natural_size()) {
    new_natural_size_ = new ::TSP::Size(*from.new_natural_size_);
  } else {
    new_natural_size_ = nullptr;
  }
  if (from._internal_has_old_natural_size()) {
    old_natural_size_ = new ::TSP::Size(*from.old_natural_size_);
  } else {
    old_natural_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageNaturalSizeCommandArchive)
}

void ImageNaturalSizeCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_natural_size_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_natural_size_));
}

ImageNaturalSizeCommandArchive::~ImageNaturalSizeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageNaturalSizeCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageNaturalSizeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete new_natural_size_;
  if (this != internal_default_instance()) delete old_natural_size_;
}

void ImageNaturalSizeCommandArchive::ArenaDtor(void* object) {
  ImageNaturalSizeCommandArchive* _this = reinterpret_cast< ImageNaturalSizeCommandArchive* >(object);
  (void)_this;
}
void ImageNaturalSizeCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageNaturalSizeCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageNaturalSizeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageNaturalSizeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_natural_size_ != nullptr);
      new_natural_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_natural_size_ != nullptr);
      old_natural_size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageNaturalSizeCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size new_natural_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_natural_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size old_natural_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_natural_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageNaturalSizeCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageNaturalSizeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Size new_natural_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_natural_size(this), target, stream);
  }

  // optional .TSP.Size old_natural_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_natural_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageNaturalSizeCommandArchive)
  return target;
}

size_t ImageNaturalSizeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageNaturalSizeCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Size new_natural_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_natural_size_);
    }

    // optional .TSP.Size old_natural_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_natural_size_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageNaturalSizeCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageNaturalSizeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageNaturalSizeCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageNaturalSizeCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageNaturalSizeCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageNaturalSizeCommandArchive)
    MergeFrom(*source);
  }
}

void ImageNaturalSizeCommandArchive::MergeFrom(const ImageNaturalSizeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageNaturalSizeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_natural_size()->::TSP::Size::MergeFrom(from._internal_new_natural_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_natural_size()->::TSP::Size::MergeFrom(from._internal_old_natural_size());
    }
  }
}

void ImageNaturalSizeCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageNaturalSizeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageNaturalSizeCommandArchive::CopyFrom(const ImageNaturalSizeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageNaturalSizeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageNaturalSizeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_new_natural_size()) {
    if (!new_natural_size_->IsInitialized()) return false;
  }
  if (_internal_has_old_natural_size()) {
    if (!old_natural_size_->IsInitialized()) return false;
  }
  return true;
}

void ImageNaturalSizeCommandArchive::InternalSwap(ImageNaturalSizeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageNaturalSizeCommandArchive, old_natural_size_)
      + sizeof(ImageNaturalSizeCommandArchive::old_natural_size_)
      - PROTOBUF_FIELD_OFFSET(ImageNaturalSizeCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageNaturalSizeCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[28]);
}

// ===================================================================

class ImageMaskCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageMaskCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageMaskCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& newmaskinfo(const ImageMaskCommandArchive* msg);
  static void set_has_newmaskinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& oldmaskinfo(const ImageMaskCommandArchive* msg);
  static void set_has_oldmaskinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageMaskCommandArchive::_Internal::super(const ImageMaskCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ImageMaskCommandArchive::_Internal::newmaskinfo(const ImageMaskCommandArchive* msg) {
  return *msg->newmaskinfo_;
}
const ::TSP::Reference&
ImageMaskCommandArchive::_Internal::oldmaskinfo(const ImageMaskCommandArchive* msg) {
  return *msg->oldmaskinfo_;
}
void ImageMaskCommandArchive::clear_newmaskinfo() {
  if (newmaskinfo_ != nullptr) newmaskinfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ImageMaskCommandArchive::clear_oldmaskinfo() {
  if (oldmaskinfo_ != nullptr) oldmaskinfo_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ImageMaskCommandArchive::ImageMaskCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageMaskCommandArchive)
}
ImageMaskCommandArchive::ImageMaskCommandArchive(const ImageMaskCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_newmaskinfo()) {
    newmaskinfo_ = new ::TSP::Reference(*from.newmaskinfo_);
  } else {
    newmaskinfo_ = nullptr;
  }
  if (from._internal_has_oldmaskinfo()) {
    oldmaskinfo_ = new ::TSP::Reference(*from.oldmaskinfo_);
  } else {
    oldmaskinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageMaskCommandArchive)
}

void ImageMaskCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oldmaskinfo_) -
    reinterpret_cast<char*>(&super_)) + sizeof(oldmaskinfo_));
}

ImageMaskCommandArchive::~ImageMaskCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageMaskCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageMaskCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete newmaskinfo_;
  if (this != internal_default_instance()) delete oldmaskinfo_;
}

void ImageMaskCommandArchive::ArenaDtor(void* object) {
  ImageMaskCommandArchive* _this = reinterpret_cast< ImageMaskCommandArchive* >(object);
  (void)_this;
}
void ImageMaskCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageMaskCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageMaskCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageMaskCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(newmaskinfo_ != nullptr);
      newmaskinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(oldmaskinfo_ != nullptr);
      oldmaskinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageMaskCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference newMaskInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newmaskinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference oldMaskInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldmaskinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageMaskCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageMaskCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference newMaskInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newmaskinfo(this), target, stream);
  }

  // optional .TSP.Reference oldMaskInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::oldmaskinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageMaskCommandArchive)
  return target;
}

size_t ImageMaskCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageMaskCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference newMaskInfo = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *newmaskinfo_);
    }

    // optional .TSP.Reference oldMaskInfo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldmaskinfo_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageMaskCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageMaskCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageMaskCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageMaskCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageMaskCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageMaskCommandArchive)
    MergeFrom(*source);
  }
}

void ImageMaskCommandArchive::MergeFrom(const ImageMaskCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageMaskCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_newmaskinfo()->::TSP::Reference::MergeFrom(from._internal_newmaskinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_oldmaskinfo()->::TSP::Reference::MergeFrom(from._internal_oldmaskinfo());
    }
  }
}

void ImageMaskCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageMaskCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMaskCommandArchive::CopyFrom(const ImageMaskCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageMaskCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMaskCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_newmaskinfo()) {
    if (!newmaskinfo_->IsInitialized()) return false;
  }
  if (_internal_has_oldmaskinfo()) {
    if (!oldmaskinfo_->IsInitialized()) return false;
  }
  return true;
}

void ImageMaskCommandArchive::InternalSwap(ImageMaskCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageMaskCommandArchive, oldmaskinfo_)
      + sizeof(ImageMaskCommandArchive::oldmaskinfo_)
      - PROTOBUF_FIELD_OFFSET(ImageMaskCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMaskCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[29]);
}

// ===================================================================

class ImageAdjustmentsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageAdjustmentsCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::ImageAdjustmentsArchive& old_image_adjustments(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_old_image_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::ImageAdjustmentsArchive& new_image_adjustments(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_new_image_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& adjustedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_adjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::DataReference& replacedadjustedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_replacedadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::DataReference& enhancedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_enhancedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::DataReference& replacedenhancedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_replacedenhancedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::DataReference& thumbnailadjustedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_thumbnailadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::DataReference& replacedthumbnailadjustedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_replacedthumbnailadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageAdjustmentsCommandArchive::_Internal::super(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageAdjustmentsCommandArchive::_Internal::old_image_adjustments(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->old_image_adjustments_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageAdjustmentsCommandArchive::_Internal::new_image_adjustments(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->new_image_adjustments_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::adjustedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->adjustedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::replacedadjustedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->replacedadjustedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::enhancedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->enhancedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::replacedenhancedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->replacedenhancedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::thumbnailadjustedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->thumbnailadjustedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::replacedthumbnailadjustedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->replacedthumbnailadjustedimagedata_;
}
void ImageAdjustmentsCommandArchive::clear_old_image_adjustments() {
  if (old_image_adjustments_ != nullptr) old_image_adjustments_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ImageAdjustmentsCommandArchive::clear_new_image_adjustments() {
  if (new_image_adjustments_ != nullptr) new_image_adjustments_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ImageAdjustmentsCommandArchive::clear_adjustedimagedata() {
  if (adjustedimagedata_ != nullptr) adjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ImageAdjustmentsCommandArchive::clear_replacedadjustedimagedata() {
  if (replacedadjustedimagedata_ != nullptr) replacedadjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ImageAdjustmentsCommandArchive::clear_enhancedimagedata() {
  if (enhancedimagedata_ != nullptr) enhancedimagedata_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ImageAdjustmentsCommandArchive::clear_replacedenhancedimagedata() {
  if (replacedenhancedimagedata_ != nullptr) replacedenhancedimagedata_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ImageAdjustmentsCommandArchive::clear_thumbnailadjustedimagedata() {
  if (thumbnailadjustedimagedata_ != nullptr) thumbnailadjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ImageAdjustmentsCommandArchive::clear_replacedthumbnailadjustedimagedata() {
  if (replacedthumbnailadjustedimagedata_ != nullptr) replacedthumbnailadjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
ImageAdjustmentsCommandArchive::ImageAdjustmentsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageAdjustmentsCommandArchive)
}
ImageAdjustmentsCommandArchive::ImageAdjustmentsCommandArchive(const ImageAdjustmentsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_image_adjustments()) {
    old_image_adjustments_ = new ::TSD::ImageAdjustmentsArchive(*from.old_image_adjustments_);
  } else {
    old_image_adjustments_ = nullptr;
  }
  if (from._internal_has_new_image_adjustments()) {
    new_image_adjustments_ = new ::TSD::ImageAdjustmentsArchive(*from.new_image_adjustments_);
  } else {
    new_image_adjustments_ = nullptr;
  }
  if (from._internal_has_adjustedimagedata()) {
    adjustedimagedata_ = new ::TSP::DataReference(*from.adjustedimagedata_);
  } else {
    adjustedimagedata_ = nullptr;
  }
  if (from._internal_has_replacedadjustedimagedata()) {
    replacedadjustedimagedata_ = new ::TSP::DataReference(*from.replacedadjustedimagedata_);
  } else {
    replacedadjustedimagedata_ = nullptr;
  }
  if (from._internal_has_enhancedimagedata()) {
    enhancedimagedata_ = new ::TSP::DataReference(*from.enhancedimagedata_);
  } else {
    enhancedimagedata_ = nullptr;
  }
  if (from._internal_has_replacedenhancedimagedata()) {
    replacedenhancedimagedata_ = new ::TSP::DataReference(*from.replacedenhancedimagedata_);
  } else {
    replacedenhancedimagedata_ = nullptr;
  }
  if (from._internal_has_thumbnailadjustedimagedata()) {
    thumbnailadjustedimagedata_ = new ::TSP::DataReference(*from.thumbnailadjustedimagedata_);
  } else {
    thumbnailadjustedimagedata_ = nullptr;
  }
  if (from._internal_has_replacedthumbnailadjustedimagedata()) {
    replacedthumbnailadjustedimagedata_ = new ::TSP::DataReference(*from.replacedthumbnailadjustedimagedata_);
  } else {
    replacedthumbnailadjustedimagedata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageAdjustmentsCommandArchive)
}

void ImageAdjustmentsCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replacedthumbnailadjustedimagedata_) -
    reinterpret_cast<char*>(&super_)) + sizeof(replacedthumbnailadjustedimagedata_));
}

ImageAdjustmentsCommandArchive::~ImageAdjustmentsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageAdjustmentsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageAdjustmentsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_image_adjustments_;
  if (this != internal_default_instance()) delete new_image_adjustments_;
  if (this != internal_default_instance()) delete adjustedimagedata_;
  if (this != internal_default_instance()) delete replacedadjustedimagedata_;
  if (this != internal_default_instance()) delete enhancedimagedata_;
  if (this != internal_default_instance()) delete replacedenhancedimagedata_;
  if (this != internal_default_instance()) delete thumbnailadjustedimagedata_;
  if (this != internal_default_instance()) delete replacedthumbnailadjustedimagedata_;
}

void ImageAdjustmentsCommandArchive::ArenaDtor(void* object) {
  ImageAdjustmentsCommandArchive* _this = reinterpret_cast< ImageAdjustmentsCommandArchive* >(object);
  (void)_this;
}
void ImageAdjustmentsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageAdjustmentsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageAdjustmentsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageAdjustmentsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_image_adjustments_ != nullptr);
      old_image_adjustments_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_image_adjustments_ != nullptr);
      new_image_adjustments_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(adjustedimagedata_ != nullptr);
      adjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(replacedadjustedimagedata_ != nullptr);
      replacedadjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(enhancedimagedata_ != nullptr);
      enhancedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(replacedenhancedimagedata_ != nullptr);
      replacedenhancedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(thumbnailadjustedimagedata_ != nullptr);
      thumbnailadjustedimagedata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(replacedthumbnailadjustedimagedata_ != nullptr);
    replacedthumbnailadjustedimagedata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageAdjustmentsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_adjustments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_image_adjustments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference adjustedImageData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference replacedAdjustedImageData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacedadjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference enhancedImageData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_enhancedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference replacedEnhancedImageData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacedenhancedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnailAdjustedImageData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnailadjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference replacedThumbnailAdjustedImageData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacedthumbnailadjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageAdjustmentsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageAdjustmentsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_image_adjustments(this), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_image_adjustments(this), target, stream);
  }

  // optional .TSP.DataReference adjustedImageData = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::adjustedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference replacedAdjustedImageData = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::replacedadjustedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference enhancedImageData = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::enhancedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference replacedEnhancedImageData = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::replacedenhancedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference thumbnailAdjustedImageData = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::thumbnailadjustedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference replacedThumbnailAdjustedImageData = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::replacedthumbnailadjustedimagedata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageAdjustmentsCommandArchive)
  return target;
}

size_t ImageAdjustmentsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageAdjustmentsCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_image_adjustments_);
    }

    // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_image_adjustments_);
    }

    // optional .TSP.DataReference adjustedImageData = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjustedimagedata_);
    }

    // optional .TSP.DataReference replacedAdjustedImageData = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replacedadjustedimagedata_);
    }

    // optional .TSP.DataReference enhancedImageData = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enhancedimagedata_);
    }

    // optional .TSP.DataReference replacedEnhancedImageData = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replacedenhancedimagedata_);
    }

    // optional .TSP.DataReference thumbnailAdjustedImageData = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thumbnailadjustedimagedata_);
    }

  }
  // optional .TSP.DataReference replacedThumbnailAdjustedImageData = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replacedthumbnailadjustedimagedata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageAdjustmentsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageAdjustmentsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageAdjustmentsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageAdjustmentsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageAdjustmentsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageAdjustmentsCommandArchive)
    MergeFrom(*source);
  }
}

void ImageAdjustmentsCommandArchive::MergeFrom(const ImageAdjustmentsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageAdjustmentsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from._internal_old_image_adjustments());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from._internal_new_image_adjustments());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_adjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_adjustedimagedata());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_replacedadjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_replacedadjustedimagedata());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_enhancedimagedata()->::TSP::DataReference::MergeFrom(from._internal_enhancedimagedata());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_replacedenhancedimagedata()->::TSP::DataReference::MergeFrom(from._internal_replacedenhancedimagedata());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_thumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_thumbnailadjustedimagedata());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_replacedthumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_replacedthumbnailadjustedimagedata());
  }
}

void ImageAdjustmentsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageAdjustmentsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageAdjustmentsCommandArchive::CopyFrom(const ImageAdjustmentsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageAdjustmentsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageAdjustmentsCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_adjustedimagedata()) {
    if (!adjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_replacedadjustedimagedata()) {
    if (!replacedadjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_enhancedimagedata()) {
    if (!enhancedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_replacedenhancedimagedata()) {
    if (!replacedenhancedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnailadjustedimagedata()) {
    if (!thumbnailadjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_replacedthumbnailadjustedimagedata()) {
    if (!replacedthumbnailadjustedimagedata_->IsInitialized()) return false;
  }
  return true;
}

void ImageAdjustmentsCommandArchive::InternalSwap(ImageAdjustmentsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageAdjustmentsCommandArchive, replacedthumbnailadjustedimagedata_)
      + sizeof(ImageAdjustmentsCommandArchive::replacedthumbnailadjustedimagedata_)
      - PROTOBUF_FIELD_OFFSET(ImageAdjustmentsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageAdjustmentsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[30]);
}

// ===================================================================

class MediaFlagsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaFlagsCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const MediaFlagsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_media_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_was_media_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_old_is_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_property_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::InfoCommandArchive&
MediaFlagsCommandArchive::_Internal::super(const MediaFlagsCommandArchive* msg) {
  return *msg->super_;
}
MediaFlagsCommandArchive::MediaFlagsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaFlagsCommandArchive)
}
MediaFlagsCommandArchive::MediaFlagsCommandArchive(const MediaFlagsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property_name()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&was_media_replaced_, &from.was_media_replaced_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_is_placeholder_) -
    reinterpret_cast<char*>(&was_media_replaced_)) + sizeof(old_is_placeholder_));
  // @@protoc_insertion_point(copy_constructor:TSD.MediaFlagsCommandArchive)
}

void MediaFlagsCommandArchive::SharedCtor() {
property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_is_placeholder_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_is_placeholder_));
}

MediaFlagsCommandArchive::~MediaFlagsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaFlagsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaFlagsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void MediaFlagsCommandArchive::ArenaDtor(void* object) {
  MediaFlagsCommandArchive* _this = reinterpret_cast< MediaFlagsCommandArchive* >(object);
  (void)_this;
}
void MediaFlagsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaFlagsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaFlagsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaFlagsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      property_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  ::memset(&was_media_replaced_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_is_placeholder_) -
      reinterpret_cast<char*>(&was_media_replaced_)) + sizeof(old_is_placeholder_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaFlagsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string property_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.MediaFlagsCommandArchive.property_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_media_replaced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_was_media_replaced(&has_bits);
          was_media_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_placeholder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_placeholder(&has_bits);
          is_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool old_was_media_replaced = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_old_was_media_replaced(&has_bits);
          old_was_media_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool old_is_placeholder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_old_is_placeholder(&has_bits);
          old_is_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaFlagsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaFlagsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required string property_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MediaFlagsCommandArchive.property_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_property_name(), target);
  }

  // optional bool was_media_replaced = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_was_media_replaced(), target);
  }

  // optional bool is_placeholder = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_placeholder(), target);
  }

  // optional bool old_was_media_replaced = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_old_was_media_replaced(), target);
  }

  // optional bool old_is_placeholder = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_old_is_placeholder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaFlagsCommandArchive)
  return target;
}

size_t MediaFlagsCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.MediaFlagsCommandArchive)
  size_t total_size = 0;

  if (_internal_has_property_name()) {
    // required string property_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property_name());
  }

  if (_internal_has_super()) {
    // required .TSD.InfoCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t MediaFlagsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaFlagsCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string property_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property_name());

    // required .TSD.InfoCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional bool was_media_replaced = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_placeholder = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool old_was_media_replaced = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool old_is_placeholder = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaFlagsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MediaFlagsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaFlagsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaFlagsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MediaFlagsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MediaFlagsCommandArchive)
    MergeFrom(*source);
  }
}

void MediaFlagsCommandArchive::MergeFrom(const MediaFlagsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaFlagsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property_name(from._internal_property_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      was_media_replaced_ = from.was_media_replaced_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_placeholder_ = from.is_placeholder_;
    }
    if (cached_has_bits & 0x00000010u) {
      old_was_media_replaced_ = from.old_was_media_replaced_;
    }
    if (cached_has_bits & 0x00000020u) {
      old_is_placeholder_ = from.old_is_placeholder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaFlagsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MediaFlagsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaFlagsCommandArchive::CopyFrom(const MediaFlagsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaFlagsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaFlagsCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void MediaFlagsCommandArchive::InternalSwap(MediaFlagsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaFlagsCommandArchive, old_is_placeholder_)
      + sizeof(MediaFlagsCommandArchive::old_is_placeholder_)
      - PROTOBUF_FIELD_OFFSET(MediaFlagsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaFlagsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[31]);
}

// ===================================================================

class DrawablesCommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawablesCommandGroupArchive>()._has_bits_);
  static const ::TSK::CommandGroupArchive& super(const DrawablesCommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::CanvasSelectionArchive& obsolete_selection(const DrawablesCommandGroupArchive* msg);
  static void set_has_obsolete_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& modelforselection(const DrawablesCommandGroupArchive* msg);
  static void set_has_modelforselection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fordrag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& archivedselection(const DrawablesCommandGroupArchive* msg);
  static void set_has_archivedselection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandGroupArchive&
DrawablesCommandGroupArchive::_Internal::super(const DrawablesCommandGroupArchive* msg) {
  return *msg->super_;
}
const ::TSD::CanvasSelectionArchive&
DrawablesCommandGroupArchive::_Internal::obsolete_selection(const DrawablesCommandGroupArchive* msg) {
  return *msg->obsolete_selection_;
}
const ::TSP::Reference&
DrawablesCommandGroupArchive::_Internal::modelforselection(const DrawablesCommandGroupArchive* msg) {
  return *msg->modelforselection_;
}
const ::TSP::Reference&
DrawablesCommandGroupArchive::_Internal::archivedselection(const DrawablesCommandGroupArchive* msg) {
  return *msg->archivedselection_;
}
void DrawablesCommandGroupArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DrawablesCommandGroupArchive::clear_obsolete_selection() {
  if (obsolete_selection_ != nullptr) obsolete_selection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DrawablesCommandGroupArchive::clear_modelforselection() {
  if (modelforselection_ != nullptr) modelforselection_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void DrawablesCommandGroupArchive::clear_archivedselection() {
  if (archivedselection_ != nullptr) archivedselection_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
DrawablesCommandGroupArchive::DrawablesCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawablesCommandGroupArchive)
}
DrawablesCommandGroupArchive::DrawablesCommandGroupArchive(const DrawablesCommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandGroupArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_obsolete_selection()) {
    obsolete_selection_ = new ::TSD::CanvasSelectionArchive(*from.obsolete_selection_);
  } else {
    obsolete_selection_ = nullptr;
  }
  if (from._internal_has_modelforselection()) {
    modelforselection_ = new ::TSP::Reference(*from.modelforselection_);
  } else {
    modelforselection_ = nullptr;
  }
  if (from._internal_has_archivedselection()) {
    archivedselection_ = new ::TSP::Reference(*from.archivedselection_);
  } else {
    archivedselection_ = nullptr;
  }
  ::memcpy(&fordrag_, &from.fordrag_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&fordrag_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawablesCommandGroupArchive)
}

void DrawablesCommandGroupArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fordrag_) -
    reinterpret_cast<char*>(&super_)) + sizeof(fordrag_));
type_ = 1;
}

DrawablesCommandGroupArchive::~DrawablesCommandGroupArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawablesCommandGroupArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawablesCommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete obsolete_selection_;
  if (this != internal_default_instance()) delete modelforselection_;
  if (this != internal_default_instance()) delete archivedselection_;
}

void DrawablesCommandGroupArchive::ArenaDtor(void* object) {
  DrawablesCommandGroupArchive* _this = reinterpret_cast< DrawablesCommandGroupArchive* >(object);
  (void)_this;
}
void DrawablesCommandGroupArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawablesCommandGroupArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawablesCommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawablesCommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(obsolete_selection_ != nullptr);
      obsolete_selection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(modelforselection_ != nullptr);
      modelforselection_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(archivedselection_ != nullptr);
      archivedselection_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    fordrag_ = false;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawablesCommandGroupArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsolete_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference modelforselection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modelforselection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool forDrag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fordrag(&has_bits);
          fordrag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference archivedselection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_archivedselection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawablesCommandGroupArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawablesCommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandGroupArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::obsolete_selection(this), target, stream);
  }

  // optional .TSP.Reference modelforselection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modelforselection(this), target, stream);
  }

  // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional bool forDrag = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fordrag(), target);
  }

  // optional .TSP.Reference archivedselection = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::archivedselection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawablesCommandGroupArchive)
  return target;
}

size_t DrawablesCommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawablesCommandGroupArchive)
  size_t total_size = 0;

  // required .TSK.CommandGroupArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obsolete_selection_);
    }

    // optional .TSP.Reference modelforselection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *modelforselection_);
    }

    // optional .TSP.Reference archivedselection = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *archivedselection_);
    }

    // optional bool forDrag = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawablesCommandGroupArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawablesCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawablesCommandGroupArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawablesCommandGroupArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawablesCommandGroupArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawablesCommandGroupArchive)
    MergeFrom(*source);
  }
}

void DrawablesCommandGroupArchive::MergeFrom(const DrawablesCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawablesCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandGroupArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_obsolete_selection()->::TSD::CanvasSelectionArchive::MergeFrom(from._internal_obsolete_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_modelforselection()->::TSP::Reference::MergeFrom(from._internal_modelforselection());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_archivedselection()->::TSP::Reference::MergeFrom(from._internal_archivedselection());
    }
    if (cached_has_bits & 0x00000010u) {
      fordrag_ = from.fordrag_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrawablesCommandGroupArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawablesCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawablesCommandGroupArchive::CopyFrom(const DrawablesCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawablesCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablesCommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_obsolete_selection()) {
    if (!obsolete_selection_->IsInitialized()) return false;
  }
  if (_internal_has_modelforselection()) {
    if (!modelforselection_->IsInitialized()) return false;
  }
  if (_internal_has_archivedselection()) {
    if (!archivedselection_->IsInitialized()) return false;
  }
  return true;
}

void DrawablesCommandGroupArchive::InternalSwap(DrawablesCommandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawablesCommandGroupArchive, fordrag_)
      + sizeof(DrawablesCommandGroupArchive::fordrag_)
      - PROTOBUF_FIELD_OFFSET(DrawablesCommandGroupArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawablesCommandGroupArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[32]);
}

// ===================================================================

class ExteriorTextWrapCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExteriorTextWrapCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ExteriorTextWrapCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::ExteriorTextWrapArchive& old_exterior_text_wrap(const ExteriorTextWrapCommandArchive* msg);
  static void set_has_old_exterior_text_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_alpha_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_html_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ExteriorTextWrapCommandArchive::_Internal::super(const ExteriorTextWrapCommandArchive* msg) {
  return *msg->super_;
}
const ::TSD::ExteriorTextWrapArchive&
ExteriorTextWrapCommandArchive::_Internal::old_exterior_text_wrap(const ExteriorTextWrapCommandArchive* msg) {
  return *msg->old_exterior_text_wrap_;
}
void ExteriorTextWrapCommandArchive::clear_old_exterior_text_wrap() {
  if (old_exterior_text_wrap_ != nullptr) old_exterior_text_wrap_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ExteriorTextWrapCommandArchive::ExteriorTextWrapCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ExteriorTextWrapCommandArchive)
}
ExteriorTextWrapCommandArchive::ExteriorTextWrapCommandArchive(const ExteriorTextWrapCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_exterior_text_wrap()) {
    old_exterior_text_wrap_ = new ::TSD::ExteriorTextWrapArchive(*from.old_exterior_text_wrap_);
  } else {
    old_exterior_text_wrap_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_html_wrap_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_html_wrap_));
  // @@protoc_insertion_point(copy_constructor:TSD.ExteriorTextWrapCommandArchive)
}

void ExteriorTextWrapCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_html_wrap_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_html_wrap_));
}

ExteriorTextWrapCommandArchive::~ExteriorTextWrapCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ExteriorTextWrapCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExteriorTextWrapCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_exterior_text_wrap_;
}

void ExteriorTextWrapCommandArchive::ArenaDtor(void* object) {
  ExteriorTextWrapCommandArchive* _this = reinterpret_cast< ExteriorTextWrapCommandArchive* >(object);
  (void)_this;
}
void ExteriorTextWrapCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExteriorTextWrapCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExteriorTextWrapCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ExteriorTextWrapCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_exterior_text_wrap_ != nullptr);
      old_exterior_text_wrap_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_html_wrap_) -
        reinterpret_cast<char*>(&type_)) + sizeof(is_html_wrap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExteriorTextWrapCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ExteriorTextWrapArchive old_exterior_text_wrap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_exterior_text_wrap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fit_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_fit_type(&has_bits);
          fit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float margin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_margin(&has_bits);
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float alpha_threshold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_alpha_threshold(&has_bits);
          alpha_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_html_wrap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_html_wrap(&has_bits);
          is_html_wrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExteriorTextWrapCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ExteriorTextWrapCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.ExteriorTextWrapArchive old_exterior_text_wrap = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_exterior_text_wrap(this), target, stream);
  }

  // optional uint32 type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // optional uint32 direction = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_direction(), target);
  }

  // optional uint32 fit_type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fit_type(), target);
  }

  // optional float margin = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_margin(), target);
  }

  // optional float alpha_threshold = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_alpha_threshold(), target);
  }

  // optional bool is_html_wrap = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_html_wrap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ExteriorTextWrapCommandArchive)
  return target;
}

size_t ExteriorTextWrapCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ExteriorTextWrapCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.ExteriorTextWrapArchive old_exterior_text_wrap = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_exterior_text_wrap_);
    }

    // optional uint32 type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 direction = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_direction());
    }

    // optional uint32 fit_type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fit_type());
    }

    // optional float margin = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float alpha_threshold = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool is_html_wrap = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExteriorTextWrapCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ExteriorTextWrapCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ExteriorTextWrapCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExteriorTextWrapCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ExteriorTextWrapCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ExteriorTextWrapCommandArchive)
    MergeFrom(*source);
  }
}

void ExteriorTextWrapCommandArchive::MergeFrom(const ExteriorTextWrapCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ExteriorTextWrapCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_exterior_text_wrap()->::TSD::ExteriorTextWrapArchive::MergeFrom(from._internal_old_exterior_text_wrap());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      fit_type_ = from.fit_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      margin_ = from.margin_;
    }
    if (cached_has_bits & 0x00000040u) {
      alpha_threshold_ = from.alpha_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_html_wrap_ = from.is_html_wrap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExteriorTextWrapCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ExteriorTextWrapCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExteriorTextWrapCommandArchive::CopyFrom(const ExteriorTextWrapCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ExteriorTextWrapCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExteriorTextWrapCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ExteriorTextWrapCommandArchive::InternalSwap(ExteriorTextWrapCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExteriorTextWrapCommandArchive, is_html_wrap_)
      + sizeof(ExteriorTextWrapCommandArchive::is_html_wrap_)
      - PROTOBUF_FIELD_OFFSET(ExteriorTextWrapCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExteriorTextWrapCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[33]);
}

// ===================================================================

class DrawableHyperlinkCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableHyperlinkCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableHyperlinkCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_oldhyperlink_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newhyperlink_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableHyperlinkCommandArchive::_Internal::super(const DrawableHyperlinkCommandArchive* msg) {
  return *msg->super_;
}
DrawableHyperlinkCommandArchive::DrawableHyperlinkCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableHyperlinkCommandArchive)
}
DrawableHyperlinkCommandArchive::DrawableHyperlinkCommandArchive(const DrawableHyperlinkCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oldhyperlink_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_oldhyperlink_url()) {
    oldhyperlink_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oldhyperlink_url(), 
      GetArena());
  }
  newhyperlink_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_newhyperlink_url()) {
    newhyperlink_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newhyperlink_url(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableHyperlinkCommandArchive)
}

void DrawableHyperlinkCommandArchive::SharedCtor() {
oldhyperlink_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
newhyperlink_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

DrawableHyperlinkCommandArchive::~DrawableHyperlinkCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableHyperlinkCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableHyperlinkCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  oldhyperlink_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newhyperlink_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void DrawableHyperlinkCommandArchive::ArenaDtor(void* object) {
  DrawableHyperlinkCommandArchive* _this = reinterpret_cast< DrawableHyperlinkCommandArchive* >(object);
  (void)_this;
}
void DrawableHyperlinkCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableHyperlinkCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableHyperlinkCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableHyperlinkCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      oldhyperlink_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      newhyperlink_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableHyperlinkCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string oldhyperlink_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_oldhyperlink_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string newhyperlink_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_newhyperlink_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.DrawableHyperlinkCommandArchive.newhyperlink_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableHyperlinkCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableHyperlinkCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string oldhyperlink_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldhyperlink_url().data(), static_cast<int>(this->_internal_oldhyperlink_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oldhyperlink_url(), target);
  }

  // optional string newhyperlink_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newhyperlink_url().data(), static_cast<int>(this->_internal_newhyperlink_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableHyperlinkCommandArchive.newhyperlink_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_newhyperlink_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableHyperlinkCommandArchive)
  return target;
}

size_t DrawableHyperlinkCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableHyperlinkCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string oldhyperlink_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oldhyperlink_url());
    }

    // optional string newhyperlink_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_newhyperlink_url());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableHyperlinkCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableHyperlinkCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableHyperlinkCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableHyperlinkCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableHyperlinkCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableHyperlinkCommandArchive)
    MergeFrom(*source);
  }
}

void DrawableHyperlinkCommandArchive::MergeFrom(const DrawableHyperlinkCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableHyperlinkCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_oldhyperlink_url(from._internal_oldhyperlink_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_newhyperlink_url(from._internal_newhyperlink_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
  }
}

void DrawableHyperlinkCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableHyperlinkCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableHyperlinkCommandArchive::CopyFrom(const DrawableHyperlinkCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableHyperlinkCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableHyperlinkCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void DrawableHyperlinkCommandArchive::InternalSwap(DrawableHyperlinkCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  oldhyperlink_url_.Swap(&other->oldhyperlink_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newhyperlink_url_.Swap(&other->newhyperlink_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableHyperlinkCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[34]);
}

// ===================================================================

class CommentInvalidatingCommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentInvalidatingCommandSelectionBehaviorArchive>()._has_bits_);
  static const ::TSK::CommandSelectionBehaviorArchive& super(const CommentInvalidatingCommandSelectionBehaviorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& annotation_displaying_command(const CommentInvalidatingCommandSelectionBehaviorArchive* msg);
  static void set_has_annotation_displaying_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_begin_editing_on_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_begin_editing_on_redo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_should_invalidate_on_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_should_invalidate_on_redo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandSelectionBehaviorArchive&
CommentInvalidatingCommandSelectionBehaviorArchive::_Internal::super(const CommentInvalidatingCommandSelectionBehaviorArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommentInvalidatingCommandSelectionBehaviorArchive::_Internal::annotation_displaying_command(const CommentInvalidatingCommandSelectionBehaviorArchive* msg) {
  return *msg->annotation_displaying_command_;
}
void CommentInvalidatingCommandSelectionBehaviorArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommentInvalidatingCommandSelectionBehaviorArchive::clear_annotation_displaying_command() {
  if (annotation_displaying_command_ != nullptr) annotation_displaying_command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommentInvalidatingCommandSelectionBehaviorArchive::CommentInvalidatingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
}
CommentInvalidatingCommandSelectionBehaviorArchive::CommentInvalidatingCommandSelectionBehaviorArchive(const CommentInvalidatingCommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandSelectionBehaviorArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_annotation_displaying_command()) {
    annotation_displaying_command_ = new ::TSP::Reference(*from.annotation_displaying_command_);
  } else {
    annotation_displaying_command_ = nullptr;
  }
  ::memcpy(&begin_editing_on_undo_, &from.begin_editing_on_undo_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_invalidate_on_redo_) -
    reinterpret_cast<char*>(&begin_editing_on_undo_)) + sizeof(should_invalidate_on_redo_));
  // @@protoc_insertion_point(copy_constructor:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
}

void CommentInvalidatingCommandSelectionBehaviorArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_invalidate_on_redo_) -
    reinterpret_cast<char*>(&super_)) + sizeof(should_invalidate_on_redo_));
}

CommentInvalidatingCommandSelectionBehaviorArchive::~CommentInvalidatingCommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommentInvalidatingCommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete annotation_displaying_command_;
}

void CommentInvalidatingCommandSelectionBehaviorArchive::ArenaDtor(void* object) {
  CommentInvalidatingCommandSelectionBehaviorArchive* _this = reinterpret_cast< CommentInvalidatingCommandSelectionBehaviorArchive* >(object);
  (void)_this;
}
void CommentInvalidatingCommandSelectionBehaviorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommentInvalidatingCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommentInvalidatingCommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(annotation_displaying_command_ != nullptr);
      annotation_displaying_command_->Clear();
    }
  }
  ::memset(&begin_editing_on_undo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&should_invalidate_on_redo_) -
      reinterpret_cast<char*>(&begin_editing_on_undo_)) + sizeof(should_invalidate_on_redo_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentInvalidatingCommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandSelectionBehaviorArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference annotation_displaying_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_displaying_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool begin_editing_on_undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_begin_editing_on_undo(&has_bits);
          begin_editing_on_undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool begin_editing_on_redo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_begin_editing_on_redo(&has_bits);
          begin_editing_on_redo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_invalidate_on_undo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_should_invalidate_on_undo(&has_bits);
          should_invalidate_on_undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_invalidate_on_redo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_should_invalidate_on_redo(&has_bits);
          should_invalidate_on_redo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommentInvalidatingCommandSelectionBehaviorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference annotation_displaying_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::annotation_displaying_command(this), target, stream);
  }

  // optional bool begin_editing_on_undo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_begin_editing_on_undo(), target);
  }

  // optional bool begin_editing_on_redo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_begin_editing_on_redo(), target);
  }

  // optional bool should_invalidate_on_undo = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_should_invalidate_on_undo(), target);
  }

  // optional bool should_invalidate_on_redo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_should_invalidate_on_redo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  return target;
}

size_t CommentInvalidatingCommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  size_t total_size = 0;

  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSP.Reference annotation_displaying_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *annotation_displaying_command_);
    }

    // optional bool begin_editing_on_undo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool begin_editing_on_redo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool should_invalidate_on_undo = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool should_invalidate_on_redo = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentInvalidatingCommandSelectionBehaviorArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentInvalidatingCommandSelectionBehaviorArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommentInvalidatingCommandSelectionBehaviorArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
    MergeFrom(*source);
  }
}

void CommentInvalidatingCommandSelectionBehaviorArchive::MergeFrom(const CommentInvalidatingCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandSelectionBehaviorArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_annotation_displaying_command()->::TSP::Reference::MergeFrom(from._internal_annotation_displaying_command());
    }
    if (cached_has_bits & 0x00000004u) {
      begin_editing_on_undo_ = from.begin_editing_on_undo_;
    }
    if (cached_has_bits & 0x00000008u) {
      begin_editing_on_redo_ = from.begin_editing_on_redo_;
    }
    if (cached_has_bits & 0x00000010u) {
      should_invalidate_on_undo_ = from.should_invalidate_on_undo_;
    }
    if (cached_has_bits & 0x00000020u) {
      should_invalidate_on_redo_ = from.should_invalidate_on_redo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommentInvalidatingCommandSelectionBehaviorArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentInvalidatingCommandSelectionBehaviorArchive::CopyFrom(const CommentInvalidatingCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentInvalidatingCommandSelectionBehaviorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_annotation_displaying_command()) {
    if (!annotation_displaying_command_->IsInitialized()) return false;
  }
  return true;
}

void CommentInvalidatingCommandSelectionBehaviorArchive::InternalSwap(CommentInvalidatingCommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommentInvalidatingCommandSelectionBehaviorArchive, should_invalidate_on_redo_)
      + sizeof(CommentInvalidatingCommandSelectionBehaviorArchive::should_invalidate_on_redo_)
      - PROTOBUF_FIELD_OFFSET(CommentInvalidatingCommandSelectionBehaviorArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentInvalidatingCommandSelectionBehaviorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[35]);
}

// ===================================================================

class ImageReplaceCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageReplaceCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageReplaceCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& new_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_new_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::DataReference& new_original_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_new_original_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& old_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::DataReference& old_original_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_original_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Path& instant_alpha_path(const ImageReplaceCommandArchive* msg);
  static void set_has_instant_alpha_path(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Path& old_instant_alpha_path(const ImageReplaceCommandArchive* msg);
  static void set_has_old_instant_alpha_path(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Size& natural_size_for_iapath(const ImageReplaceCommandArchive* msg);
  static void set_has_natural_size_for_iapath(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Size& old_natural_size_for_iapath(const ImageReplaceCommandArchive* msg);
  static void set_has_old_natural_size_for_iapath(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::GeometryArchive& target_image_geometry(const ImageReplaceCommandArchive* msg);
  static void set_has_target_image_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::GeometryArchive& old_target_image_geometry(const ImageReplaceCommandArchive* msg);
  static void set_has_old_target_image_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::GeometryArchive& target_mask_geometry(const ImageReplaceCommandArchive* msg);
  static void set_has_target_mask_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::GeometryArchive& old_target_mask_geometry(const ImageReplaceCommandArchive* msg);
  static void set_has_old_target_mask_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::ImageAdjustmentsArchive& image_adjustments(const ImageReplaceCommandArchive* msg);
  static void set_has_image_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::DataReference& adjusted_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_adjusted_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::DataReference& enhanced_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_enhanced_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::ImageAdjustmentsArchive& old_image_adjustments(const ImageReplaceCommandArchive* msg);
  static void set_has_old_image_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::DataReference& old_adjusted_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_adjusted_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::DataReference& old_enhanced_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_enhanced_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::DataReference& thumbnail_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_thumbnail_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::DataReference& old_thumbnail_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_thumbnail_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::DataReference& thumbnail_adjusted_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_thumbnail_adjusted_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::DataReference& old_thumbnail_adjusted_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_thumbnail_adjusted_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSP::Size& natural_size(const ImageReplaceCommandArchive* msg);
  static void set_has_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Size& old_natural_size(const ImageReplaceCommandArchive* msg);
  static void set_has_old_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageReplaceCommandArchive::_Internal::super(const ImageReplaceCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::new_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->new_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::new_original_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->new_original_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->old_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_original_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->old_original_image_data_;
}
const ::TSP::Path&
ImageReplaceCommandArchive::_Internal::instant_alpha_path(const ImageReplaceCommandArchive* msg) {
  return *msg->instant_alpha_path_;
}
const ::TSP::Path&
ImageReplaceCommandArchive::_Internal::old_instant_alpha_path(const ImageReplaceCommandArchive* msg) {
  return *msg->old_instant_alpha_path_;
}
const ::TSP::Size&
ImageReplaceCommandArchive::_Internal::natural_size_for_iapath(const ImageReplaceCommandArchive* msg) {
  return *msg->natural_size_for_iapath_;
}
const ::TSP::Size&
ImageReplaceCommandArchive::_Internal::old_natural_size_for_iapath(const ImageReplaceCommandArchive* msg) {
  return *msg->old_natural_size_for_iapath_;
}
const ::TSD::GeometryArchive&
ImageReplaceCommandArchive::_Internal::target_image_geometry(const ImageReplaceCommandArchive* msg) {
  return *msg->target_image_geometry_;
}
const ::TSD::GeometryArchive&
ImageReplaceCommandArchive::_Internal::old_target_image_geometry(const ImageReplaceCommandArchive* msg) {
  return *msg->old_target_image_geometry_;
}
const ::TSD::GeometryArchive&
ImageReplaceCommandArchive::_Internal::target_mask_geometry(const ImageReplaceCommandArchive* msg) {
  return *msg->target_mask_geometry_;
}
const ::TSD::GeometryArchive&
ImageReplaceCommandArchive::_Internal::old_target_mask_geometry(const ImageReplaceCommandArchive* msg) {
  return *msg->old_target_mask_geometry_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageReplaceCommandArchive::_Internal::image_adjustments(const ImageReplaceCommandArchive* msg) {
  return *msg->image_adjustments_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::adjusted_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->adjusted_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::enhanced_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->enhanced_image_data_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageReplaceCommandArchive::_Internal::old_image_adjustments(const ImageReplaceCommandArchive* msg) {
  return *msg->old_image_adjustments_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_adjusted_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->old_adjusted_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_enhanced_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->old_enhanced_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::thumbnail_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->thumbnail_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_thumbnail_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->old_thumbnail_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::thumbnail_adjusted_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->thumbnail_adjusted_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_thumbnail_adjusted_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->old_thumbnail_adjusted_image_data_;
}
const ::TSP::Size&
ImageReplaceCommandArchive::_Internal::natural_size(const ImageReplaceCommandArchive* msg) {
  return *msg->natural_size_;
}
const ::TSP::Size&
ImageReplaceCommandArchive::_Internal::old_natural_size(const ImageReplaceCommandArchive* msg) {
  return *msg->old_natural_size_;
}
void ImageReplaceCommandArchive::clear_new_image_data() {
  if (new_image_data_ != nullptr) new_image_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ImageReplaceCommandArchive::clear_new_original_image_data() {
  if (new_original_image_data_ != nullptr) new_original_image_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ImageReplaceCommandArchive::clear_old_image_data() {
  if (old_image_data_ != nullptr) old_image_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ImageReplaceCommandArchive::clear_old_original_image_data() {
  if (old_original_image_data_ != nullptr) old_original_image_data_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ImageReplaceCommandArchive::clear_instant_alpha_path() {
  if (instant_alpha_path_ != nullptr) instant_alpha_path_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ImageReplaceCommandArchive::clear_old_instant_alpha_path() {
  if (old_instant_alpha_path_ != nullptr) old_instant_alpha_path_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ImageReplaceCommandArchive::clear_natural_size_for_iapath() {
  if (natural_size_for_iapath_ != nullptr) natural_size_for_iapath_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ImageReplaceCommandArchive::clear_old_natural_size_for_iapath() {
  if (old_natural_size_for_iapath_ != nullptr) old_natural_size_for_iapath_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ImageReplaceCommandArchive::clear_target_image_geometry() {
  if (target_image_geometry_ != nullptr) target_image_geometry_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ImageReplaceCommandArchive::clear_old_target_image_geometry() {
  if (old_target_image_geometry_ != nullptr) old_target_image_geometry_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ImageReplaceCommandArchive::clear_target_mask_geometry() {
  if (target_mask_geometry_ != nullptr) target_mask_geometry_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ImageReplaceCommandArchive::clear_old_target_mask_geometry() {
  if (old_target_mask_geometry_ != nullptr) old_target_mask_geometry_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ImageReplaceCommandArchive::clear_image_adjustments() {
  if (image_adjustments_ != nullptr) image_adjustments_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void ImageReplaceCommandArchive::clear_adjusted_image_data() {
  if (adjusted_image_data_ != nullptr) adjusted_image_data_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void ImageReplaceCommandArchive::clear_enhanced_image_data() {
  if (enhanced_image_data_ != nullptr) enhanced_image_data_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void ImageReplaceCommandArchive::clear_old_image_adjustments() {
  if (old_image_adjustments_ != nullptr) old_image_adjustments_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void ImageReplaceCommandArchive::clear_old_adjusted_image_data() {
  if (old_adjusted_image_data_ != nullptr) old_adjusted_image_data_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void ImageReplaceCommandArchive::clear_old_enhanced_image_data() {
  if (old_enhanced_image_data_ != nullptr) old_enhanced_image_data_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void ImageReplaceCommandArchive::clear_thumbnail_image_data() {
  if (thumbnail_image_data_ != nullptr) thumbnail_image_data_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void ImageReplaceCommandArchive::clear_old_thumbnail_image_data() {
  if (old_thumbnail_image_data_ != nullptr) old_thumbnail_image_data_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void ImageReplaceCommandArchive::clear_thumbnail_adjusted_image_data() {
  if (thumbnail_adjusted_image_data_ != nullptr) thumbnail_adjusted_image_data_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void ImageReplaceCommandArchive::clear_old_thumbnail_adjusted_image_data() {
  if (old_thumbnail_adjusted_image_data_ != nullptr) old_thumbnail_adjusted_image_data_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void ImageReplaceCommandArchive::clear_natural_size() {
  if (natural_size_ != nullptr) natural_size_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void ImageReplaceCommandArchive::clear_old_natural_size() {
  if (old_natural_size_ != nullptr) old_natural_size_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
ImageReplaceCommandArchive::ImageReplaceCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageReplaceCommandArchive)
}
ImageReplaceCommandArchive::ImageReplaceCommandArchive(const ImageReplaceCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_new_image_data()) {
    new_image_data_ = new ::TSP::DataReference(*from.new_image_data_);
  } else {
    new_image_data_ = nullptr;
  }
  if (from._internal_has_new_original_image_data()) {
    new_original_image_data_ = new ::TSP::DataReference(*from.new_original_image_data_);
  } else {
    new_original_image_data_ = nullptr;
  }
  if (from._internal_has_old_image_data()) {
    old_image_data_ = new ::TSP::DataReference(*from.old_image_data_);
  } else {
    old_image_data_ = nullptr;
  }
  if (from._internal_has_old_original_image_data()) {
    old_original_image_data_ = new ::TSP::DataReference(*from.old_original_image_data_);
  } else {
    old_original_image_data_ = nullptr;
  }
  if (from._internal_has_instant_alpha_path()) {
    instant_alpha_path_ = new ::TSP::Path(*from.instant_alpha_path_);
  } else {
    instant_alpha_path_ = nullptr;
  }
  if (from._internal_has_old_instant_alpha_path()) {
    old_instant_alpha_path_ = new ::TSP::Path(*from.old_instant_alpha_path_);
  } else {
    old_instant_alpha_path_ = nullptr;
  }
  if (from._internal_has_natural_size_for_iapath()) {
    natural_size_for_iapath_ = new ::TSP::Size(*from.natural_size_for_iapath_);
  } else {
    natural_size_for_iapath_ = nullptr;
  }
  if (from._internal_has_old_natural_size_for_iapath()) {
    old_natural_size_for_iapath_ = new ::TSP::Size(*from.old_natural_size_for_iapath_);
  } else {
    old_natural_size_for_iapath_ = nullptr;
  }
  if (from._internal_has_target_image_geometry()) {
    target_image_geometry_ = new ::TSD::GeometryArchive(*from.target_image_geometry_);
  } else {
    target_image_geometry_ = nullptr;
  }
  if (from._internal_has_old_target_image_geometry()) {
    old_target_image_geometry_ = new ::TSD::GeometryArchive(*from.old_target_image_geometry_);
  } else {
    old_target_image_geometry_ = nullptr;
  }
  if (from._internal_has_target_mask_geometry()) {
    target_mask_geometry_ = new ::TSD::GeometryArchive(*from.target_mask_geometry_);
  } else {
    target_mask_geometry_ = nullptr;
  }
  if (from._internal_has_old_target_mask_geometry()) {
    old_target_mask_geometry_ = new ::TSD::GeometryArchive(*from.old_target_mask_geometry_);
  } else {
    old_target_mask_geometry_ = nullptr;
  }
  if (from._internal_has_image_adjustments()) {
    image_adjustments_ = new ::TSD::ImageAdjustmentsArchive(*from.image_adjustments_);
  } else {
    image_adjustments_ = nullptr;
  }
  if (from._internal_has_adjusted_image_data()) {
    adjusted_image_data_ = new ::TSP::DataReference(*from.adjusted_image_data_);
  } else {
    adjusted_image_data_ = nullptr;
  }
  if (from._internal_has_enhanced_image_data()) {
    enhanced_image_data_ = new ::TSP::DataReference(*from.enhanced_image_data_);
  } else {
    enhanced_image_data_ = nullptr;
  }
  if (from._internal_has_old_image_adjustments()) {
    old_image_adjustments_ = new ::TSD::ImageAdjustmentsArchive(*from.old_image_adjustments_);
  } else {
    old_image_adjustments_ = nullptr;
  }
  if (from._internal_has_old_adjusted_image_data()) {
    old_adjusted_image_data_ = new ::TSP::DataReference(*from.old_adjusted_image_data_);
  } else {
    old_adjusted_image_data_ = nullptr;
  }
  if (from._internal_has_old_enhanced_image_data()) {
    old_enhanced_image_data_ = new ::TSP::DataReference(*from.old_enhanced_image_data_);
  } else {
    old_enhanced_image_data_ = nullptr;
  }
  if (from._internal_has_thumbnail_image_data()) {
    thumbnail_image_data_ = new ::TSP::DataReference(*from.thumbnail_image_data_);
  } else {
    thumbnail_image_data_ = nullptr;
  }
  if (from._internal_has_old_thumbnail_image_data()) {
    old_thumbnail_image_data_ = new ::TSP::DataReference(*from.old_thumbnail_image_data_);
  } else {
    old_thumbnail_image_data_ = nullptr;
  }
  if (from._internal_has_thumbnail_adjusted_image_data()) {
    thumbnail_adjusted_image_data_ = new ::TSP::DataReference(*from.thumbnail_adjusted_image_data_);
  } else {
    thumbnail_adjusted_image_data_ = nullptr;
  }
  if (from._internal_has_old_thumbnail_adjusted_image_data()) {
    old_thumbnail_adjusted_image_data_ = new ::TSP::DataReference(*from.old_thumbnail_adjusted_image_data_);
  } else {
    old_thumbnail_adjusted_image_data_ = nullptr;
  }
  if (from._internal_has_natural_size()) {
    natural_size_ = new ::TSP::Size(*from.natural_size_);
  } else {
    natural_size_ = nullptr;
  }
  if (from._internal_has_old_natural_size()) {
    old_natural_size_ = new ::TSP::Size(*from.old_natural_size_);
  } else {
    old_natural_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageReplaceCommandArchive)
}

void ImageReplaceCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_natural_size_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_natural_size_));
}

ImageReplaceCommandArchive::~ImageReplaceCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageReplaceCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageReplaceCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete new_image_data_;
  if (this != internal_default_instance()) delete new_original_image_data_;
  if (this != internal_default_instance()) delete old_image_data_;
  if (this != internal_default_instance()) delete old_original_image_data_;
  if (this != internal_default_instance()) delete instant_alpha_path_;
  if (this != internal_default_instance()) delete old_instant_alpha_path_;
  if (this != internal_default_instance()) delete natural_size_for_iapath_;
  if (this != internal_default_instance()) delete old_natural_size_for_iapath_;
  if (this != internal_default_instance()) delete target_image_geometry_;
  if (this != internal_default_instance()) delete old_target_image_geometry_;
  if (this != internal_default_instance()) delete target_mask_geometry_;
  if (this != internal_default_instance()) delete old_target_mask_geometry_;
  if (this != internal_default_instance()) delete image_adjustments_;
  if (this != internal_default_instance()) delete adjusted_image_data_;
  if (this != internal_default_instance()) delete enhanced_image_data_;
  if (this != internal_default_instance()) delete old_image_adjustments_;
  if (this != internal_default_instance()) delete old_adjusted_image_data_;
  if (this != internal_default_instance()) delete old_enhanced_image_data_;
  if (this != internal_default_instance()) delete thumbnail_image_data_;
  if (this != internal_default_instance()) delete old_thumbnail_image_data_;
  if (this != internal_default_instance()) delete thumbnail_adjusted_image_data_;
  if (this != internal_default_instance()) delete old_thumbnail_adjusted_image_data_;
  if (this != internal_default_instance()) delete natural_size_;
  if (this != internal_default_instance()) delete old_natural_size_;
}

void ImageReplaceCommandArchive::ArenaDtor(void* object) {
  ImageReplaceCommandArchive* _this = reinterpret_cast< ImageReplaceCommandArchive* >(object);
  (void)_this;
}
void ImageReplaceCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageReplaceCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageReplaceCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageReplaceCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_image_data_ != nullptr);
      new_image_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_original_image_data_ != nullptr);
      new_original_image_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_image_data_ != nullptr);
      old_image_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(old_original_image_data_ != nullptr);
      old_original_image_data_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(instant_alpha_path_ != nullptr);
      instant_alpha_path_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(old_instant_alpha_path_ != nullptr);
      old_instant_alpha_path_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(natural_size_for_iapath_ != nullptr);
      natural_size_for_iapath_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(old_natural_size_for_iapath_ != nullptr);
      old_natural_size_for_iapath_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(target_image_geometry_ != nullptr);
      target_image_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(old_target_image_geometry_ != nullptr);
      old_target_image_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(target_mask_geometry_ != nullptr);
      target_mask_geometry_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(old_target_mask_geometry_ != nullptr);
      old_target_mask_geometry_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(image_adjustments_ != nullptr);
      image_adjustments_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(adjusted_image_data_ != nullptr);
      adjusted_image_data_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(enhanced_image_data_ != nullptr);
      enhanced_image_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(old_image_adjustments_ != nullptr);
      old_image_adjustments_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(old_adjusted_image_data_ != nullptr);
      old_adjusted_image_data_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(old_enhanced_image_data_ != nullptr);
      old_enhanced_image_data_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(thumbnail_image_data_ != nullptr);
      thumbnail_image_data_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(old_thumbnail_image_data_ != nullptr);
      old_thumbnail_image_data_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(thumbnail_adjusted_image_data_ != nullptr);
      thumbnail_adjusted_image_data_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(old_thumbnail_adjusted_image_data_ != nullptr);
      old_thumbnail_adjusted_image_data_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(natural_size_ != nullptr);
      natural_size_->Clear();
    }
  }
  if (cached_has_bits & 0x01000000u) {
    GOOGLE_DCHECK(old_natural_size_ != nullptr);
    old_natural_size_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageReplaceCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference new_image_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference new_original_image_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_original_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_image_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_original_image_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_original_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Path instant_alpha_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_instant_alpha_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Path old_instant_alpha_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_instant_alpha_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size natural_size_for_IAPath = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_natural_size_for_iapath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size old_natural_size_for_IAPath = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_natural_size_for_iapath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive target_image_geometry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_image_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive old_target_image_geometry = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_target_image_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive target_mask_geometry = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_mask_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive old_target_mask_geometry = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_target_mask_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive image_adjustments = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_adjustments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference adjusted_image_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjusted_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference enhanced_image_data = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_enhanced_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_adjustments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_adjusted_image_data = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_adjusted_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_enhanced_image_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_enhanced_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnail_image_data = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnail_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_thumbnail_image_data = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_thumbnail_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnail_adjusted_image_data = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnail_adjusted_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_thumbnail_adjusted_image_data = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_thumbnail_adjusted_image_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size natural_size = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_natural_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size old_natural_size = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_natural_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageReplaceCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageReplaceCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.DataReference new_image_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_image_data(this), target, stream);
  }

  // optional .TSP.DataReference new_original_image_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_original_image_data(this), target, stream);
  }

  // optional .TSP.DataReference old_image_data = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_image_data(this), target, stream);
  }

  // optional .TSP.DataReference old_original_image_data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::old_original_image_data(this), target, stream);
  }

  // optional .TSP.Path instant_alpha_path = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::instant_alpha_path(this), target, stream);
  }

  // optional .TSP.Path old_instant_alpha_path = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::old_instant_alpha_path(this), target, stream);
  }

  // optional .TSP.Size natural_size_for_IAPath = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::natural_size_for_iapath(this), target, stream);
  }

  // optional .TSP.Size old_natural_size_for_IAPath = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::old_natural_size_for_iapath(this), target, stream);
  }

  // optional .TSD.GeometryArchive target_image_geometry = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::target_image_geometry(this), target, stream);
  }

  // optional .TSD.GeometryArchive old_target_image_geometry = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::old_target_image_geometry(this), target, stream);
  }

  // optional .TSD.GeometryArchive target_mask_geometry = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::target_mask_geometry(this), target, stream);
  }

  // optional .TSD.GeometryArchive old_target_mask_geometry = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::old_target_mask_geometry(this), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive image_adjustments = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::image_adjustments(this), target, stream);
  }

  // optional .TSP.DataReference adjusted_image_data = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::adjusted_image_data(this), target, stream);
  }

  // optional .TSP.DataReference enhanced_image_data = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::enhanced_image_data(this), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::old_image_adjustments(this), target, stream);
  }

  // optional .TSP.DataReference old_adjusted_image_data = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::old_adjusted_image_data(this), target, stream);
  }

  // optional .TSP.DataReference old_enhanced_image_data = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::old_enhanced_image_data(this), target, stream);
  }

  // optional .TSP.DataReference thumbnail_image_data = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::thumbnail_image_data(this), target, stream);
  }

  // optional .TSP.DataReference old_thumbnail_image_data = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::old_thumbnail_image_data(this), target, stream);
  }

  // optional .TSP.DataReference thumbnail_adjusted_image_data = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::thumbnail_adjusted_image_data(this), target, stream);
  }

  // optional .TSP.DataReference old_thumbnail_adjusted_image_data = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::old_thumbnail_adjusted_image_data(this), target, stream);
  }

  // optional .TSP.Size natural_size = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::natural_size(this), target, stream);
  }

  // optional .TSP.Size old_natural_size = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::old_natural_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageReplaceCommandArchive)
  return target;
}

size_t ImageReplaceCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageReplaceCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSP.DataReference new_image_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_image_data_);
    }

    // optional .TSP.DataReference new_original_image_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_original_image_data_);
    }

    // optional .TSP.DataReference old_image_data = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_image_data_);
    }

    // optional .TSP.DataReference old_original_image_data = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_original_image_data_);
    }

    // optional .TSP.Path instant_alpha_path = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instant_alpha_path_);
    }

    // optional .TSP.Path old_instant_alpha_path = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_instant_alpha_path_);
    }

    // optional .TSP.Size natural_size_for_IAPath = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *natural_size_for_iapath_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Size old_natural_size_for_IAPath = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_natural_size_for_iapath_);
    }

    // optional .TSD.GeometryArchive target_image_geometry = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_image_geometry_);
    }

    // optional .TSD.GeometryArchive old_target_image_geometry = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_target_image_geometry_);
    }

    // optional .TSD.GeometryArchive target_mask_geometry = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_mask_geometry_);
    }

    // optional .TSD.GeometryArchive old_target_mask_geometry = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_target_mask_geometry_);
    }

    // optional .TSD.ImageAdjustmentsArchive image_adjustments = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_adjustments_);
    }

    // optional .TSP.DataReference adjusted_image_data = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjusted_image_data_);
    }

    // optional .TSP.DataReference enhanced_image_data = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enhanced_image_data_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_image_adjustments_);
    }

    // optional .TSP.DataReference old_adjusted_image_data = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_adjusted_image_data_);
    }

    // optional .TSP.DataReference old_enhanced_image_data = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_enhanced_image_data_);
    }

    // optional .TSP.DataReference thumbnail_image_data = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thumbnail_image_data_);
    }

    // optional .TSP.DataReference old_thumbnail_image_data = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_thumbnail_image_data_);
    }

    // optional .TSP.DataReference thumbnail_adjusted_image_data = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thumbnail_adjusted_image_data_);
    }

    // optional .TSP.DataReference old_thumbnail_adjusted_image_data = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_thumbnail_adjusted_image_data_);
    }

    // optional .TSP.Size natural_size = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *natural_size_);
    }

  }
  // optional .TSP.Size old_natural_size = 26;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_natural_size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageReplaceCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageReplaceCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageReplaceCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageReplaceCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageReplaceCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageReplaceCommandArchive)
    MergeFrom(*source);
  }
}

void ImageReplaceCommandArchive::MergeFrom(const ImageReplaceCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageReplaceCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_image_data()->::TSP::DataReference::MergeFrom(from._internal_new_image_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_original_image_data()->::TSP::DataReference::MergeFrom(from._internal_new_original_image_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_image_data()->::TSP::DataReference::MergeFrom(from._internal_old_image_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_old_original_image_data()->::TSP::DataReference::MergeFrom(from._internal_old_original_image_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_instant_alpha_path()->::TSP::Path::MergeFrom(from._internal_instant_alpha_path());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_old_instant_alpha_path()->::TSP::Path::MergeFrom(from._internal_old_instant_alpha_path());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_natural_size_for_iapath()->::TSP::Size::MergeFrom(from._internal_natural_size_for_iapath());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_old_natural_size_for_iapath()->::TSP::Size::MergeFrom(from._internal_old_natural_size_for_iapath());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_target_image_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_target_image_geometry());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_old_target_image_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_old_target_image_geometry());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_target_mask_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_target_mask_geometry());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_old_target_mask_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_old_target_mask_geometry());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from._internal_image_adjustments());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_adjusted_image_data()->::TSP::DataReference::MergeFrom(from._internal_adjusted_image_data());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_enhanced_image_data()->::TSP::DataReference::MergeFrom(from._internal_enhanced_image_data());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_old_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from._internal_old_image_adjustments());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_old_adjusted_image_data()->::TSP::DataReference::MergeFrom(from._internal_old_adjusted_image_data());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_old_enhanced_image_data()->::TSP::DataReference::MergeFrom(from._internal_old_enhanced_image_data());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_thumbnail_image_data()->::TSP::DataReference::MergeFrom(from._internal_thumbnail_image_data());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_old_thumbnail_image_data()->::TSP::DataReference::MergeFrom(from._internal_old_thumbnail_image_data());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_thumbnail_adjusted_image_data()->::TSP::DataReference::MergeFrom(from._internal_thumbnail_adjusted_image_data());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_old_thumbnail_adjusted_image_data()->::TSP::DataReference::MergeFrom(from._internal_old_thumbnail_adjusted_image_data());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_natural_size()->::TSP::Size::MergeFrom(from._internal_natural_size());
    }
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_mutable_old_natural_size()->::TSP::Size::MergeFrom(from._internal_old_natural_size());
  }
}

void ImageReplaceCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageReplaceCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageReplaceCommandArchive::CopyFrom(const ImageReplaceCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageReplaceCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageReplaceCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_new_image_data()) {
    if (!new_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_new_original_image_data()) {
    if (!new_original_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_image_data()) {
    if (!old_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_original_image_data()) {
    if (!old_original_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_instant_alpha_path()) {
    if (!instant_alpha_path_->IsInitialized()) return false;
  }
  if (_internal_has_old_instant_alpha_path()) {
    if (!old_instant_alpha_path_->IsInitialized()) return false;
  }
  if (_internal_has_natural_size_for_iapath()) {
    if (!natural_size_for_iapath_->IsInitialized()) return false;
  }
  if (_internal_has_old_natural_size_for_iapath()) {
    if (!old_natural_size_for_iapath_->IsInitialized()) return false;
  }
  if (_internal_has_target_image_geometry()) {
    if (!target_image_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_old_target_image_geometry()) {
    if (!old_target_image_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_target_mask_geometry()) {
    if (!target_mask_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_old_target_mask_geometry()) {
    if (!old_target_mask_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_adjusted_image_data()) {
    if (!adjusted_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_enhanced_image_data()) {
    if (!enhanced_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_adjusted_image_data()) {
    if (!old_adjusted_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_enhanced_image_data()) {
    if (!old_enhanced_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnail_image_data()) {
    if (!thumbnail_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_thumbnail_image_data()) {
    if (!old_thumbnail_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnail_adjusted_image_data()) {
    if (!thumbnail_adjusted_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_thumbnail_adjusted_image_data()) {
    if (!old_thumbnail_adjusted_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_natural_size()) {
    if (!natural_size_->IsInitialized()) return false;
  }
  if (_internal_has_old_natural_size()) {
    if (!old_natural_size_->IsInitialized()) return false;
  }
  return true;
}

void ImageReplaceCommandArchive::InternalSwap(ImageReplaceCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageReplaceCommandArchive, old_natural_size_)
      + sizeof(ImageReplaceCommandArchive::old_natural_size_)
      - PROTOBUF_FIELD_OFFSET(ImageReplaceCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageReplaceCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[36]);
}

// ===================================================================

class DrawableLockCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableLockCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableLockCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableLockCommandArchive::_Internal::super(const DrawableLockCommandArchive* msg) {
  return *msg->super_;
}
DrawableLockCommandArchive::DrawableLockCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableLockCommandArchive)
}
DrawableLockCommandArchive::DrawableLockCommandArchive(const DrawableLockCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&locked_, &from.locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&was_locked_) -
    reinterpret_cast<char*>(&locked_)) + sizeof(was_locked_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableLockCommandArchive)
}

void DrawableLockCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&was_locked_) -
    reinterpret_cast<char*>(&super_)) + sizeof(was_locked_));
}

DrawableLockCommandArchive::~DrawableLockCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableLockCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableLockCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void DrawableLockCommandArchive::ArenaDtor(void* object) {
  DrawableLockCommandArchive* _this = reinterpret_cast< DrawableLockCommandArchive* >(object);
  (void)_this;
}
void DrawableLockCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableLockCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableLockCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableLockCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  ::memset(&locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&was_locked_) -
      reinterpret_cast<char*>(&locked_)) + sizeof(was_locked_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableLockCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool locked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_locked(&has_bits);
          locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_locked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_was_locked(&has_bits);
          was_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableLockCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableLockCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool locked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_locked(), target);
  }

  // optional bool was_locked = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_was_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableLockCommandArchive)
  return target;
}

size_t DrawableLockCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableLockCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool locked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool was_locked = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableLockCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableLockCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableLockCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableLockCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableLockCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableLockCommandArchive)
    MergeFrom(*source);
  }
}

void DrawableLockCommandArchive::MergeFrom(const DrawableLockCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableLockCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      locked_ = from.locked_;
    }
    if (cached_has_bits & 0x00000004u) {
      was_locked_ = from.was_locked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrawableLockCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableLockCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableLockCommandArchive::CopyFrom(const DrawableLockCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableLockCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableLockCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void DrawableLockCommandArchive::InternalSwap(DrawableLockCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableLockCommandArchive, was_locked_)
      + sizeof(DrawableLockCommandArchive::was_locked_)
      - PROTOBUF_FIELD_OFFSET(DrawableLockCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableLockCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[37]);
}

// ===================================================================

class DrawableInfoCommentCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableInfoCommentCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableInfoCommentCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& old_comment(const DrawableInfoCommentCommandArchive* msg);
  static void set_has_old_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_comment(const DrawableInfoCommentCommandArchive* msg);
  static void set_has_new_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_forward_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inverse_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableInfoCommentCommandArchive::_Internal::super(const DrawableInfoCommentCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
DrawableInfoCommentCommandArchive::_Internal::old_comment(const DrawableInfoCommentCommandArchive* msg) {
  return *msg->old_comment_;
}
const ::TSP::Reference&
DrawableInfoCommentCommandArchive::_Internal::new_comment(const DrawableInfoCommentCommandArchive* msg) {
  return *msg->new_comment_;
}
void DrawableInfoCommentCommandArchive::clear_old_comment() {
  if (old_comment_ != nullptr) old_comment_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DrawableInfoCommentCommandArchive::clear_new_comment() {
  if (new_comment_ != nullptr) new_comment_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DrawableInfoCommentCommandArchive::DrawableInfoCommentCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableInfoCommentCommandArchive)
}
DrawableInfoCommentCommandArchive::DrawableInfoCommentCommandArchive(const DrawableInfoCommentCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_comment()) {
    old_comment_ = new ::TSP::Reference(*from.old_comment_);
  } else {
    old_comment_ = nullptr;
  }
  if (from._internal_has_new_comment()) {
    new_comment_ = new ::TSP::Reference(*from.new_comment_);
  } else {
    new_comment_ = nullptr;
  }
  ::memcpy(&forward_variant_, &from.forward_variant_,
    static_cast<size_t>(reinterpret_cast<char*>(&inverse_variant_) -
    reinterpret_cast<char*>(&forward_variant_)) + sizeof(inverse_variant_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableInfoCommentCommandArchive)
}

void DrawableInfoCommentCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverse_variant_) -
    reinterpret_cast<char*>(&super_)) + sizeof(inverse_variant_));
}

DrawableInfoCommentCommandArchive::~DrawableInfoCommentCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableInfoCommentCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableInfoCommentCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_comment_;
  if (this != internal_default_instance()) delete new_comment_;
}

void DrawableInfoCommentCommandArchive::ArenaDtor(void* object) {
  DrawableInfoCommentCommandArchive* _this = reinterpret_cast< DrawableInfoCommentCommandArchive* >(object);
  (void)_this;
}
void DrawableInfoCommentCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableInfoCommentCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableInfoCommentCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableInfoCommentCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_comment_ != nullptr);
      old_comment_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_comment_ != nullptr);
      new_comment_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&forward_variant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inverse_variant_) -
        reinterpret_cast<char*>(&forward_variant_)) + sizeof(inverse_variant_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableInfoCommentCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_comment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference new_comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_comment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant forward_variant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_forward_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant inverse_variant = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_inverse_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableInfoCommentCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableInfoCommentCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference old_comment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_comment(this), target, stream);
  }

  // optional .TSP.Reference new_comment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_comment(this), target, stream);
  }

  // optional .TSD.CommentCommandVariant forward_variant = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_forward_variant(), target);
  }

  // optional .TSD.CommentCommandVariant inverse_variant = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_inverse_variant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableInfoCommentCommandArchive)
  return target;
}

size_t DrawableInfoCommentCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableInfoCommentCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.Reference old_comment = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_comment_);
    }

    // optional .TSP.Reference new_comment = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_comment_);
    }

    // optional .TSD.CommentCommandVariant forward_variant = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_forward_variant());
    }

    // optional .TSD.CommentCommandVariant inverse_variant = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inverse_variant());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableInfoCommentCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableInfoCommentCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableInfoCommentCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableInfoCommentCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableInfoCommentCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableInfoCommentCommandArchive)
    MergeFrom(*source);
  }
}

void DrawableInfoCommentCommandArchive::MergeFrom(const DrawableInfoCommentCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableInfoCommentCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_comment()->::TSP::Reference::MergeFrom(from._internal_old_comment());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_comment()->::TSP::Reference::MergeFrom(from._internal_new_comment());
    }
    if (cached_has_bits & 0x00000008u) {
      forward_variant_ = from.forward_variant_;
    }
    if (cached_has_bits & 0x00000010u) {
      inverse_variant_ = from.inverse_variant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrawableInfoCommentCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableInfoCommentCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableInfoCommentCommandArchive::CopyFrom(const DrawableInfoCommentCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableInfoCommentCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableInfoCommentCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_comment()) {
    if (!old_comment_->IsInitialized()) return false;
  }
  if (_internal_has_new_comment()) {
    if (!new_comment_->IsInitialized()) return false;
  }
  return true;
}

void DrawableInfoCommentCommandArchive::InternalSwap(DrawableInfoCommentCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableInfoCommentCommandArchive, inverse_variant_)
      + sizeof(DrawableInfoCommentCommandArchive::inverse_variant_)
      - PROTOBUF_FIELD_OFFSET(DrawableInfoCommentCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableInfoCommentCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[38]);
}

// ===================================================================

class DrawablePencilAnnotationCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawablePencilAnnotationCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawablePencilAnnotationCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& pencil_annotation_to_add(const DrawablePencilAnnotationCommandArchive* msg);
  static void set_has_pencil_annotation_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& pencil_annotation_to_remove(const DrawablePencilAnnotationCommandArchive* msg);
  static void set_has_pencil_annotation_to_remove(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawablePencilAnnotationCommandArchive::_Internal::super(const DrawablePencilAnnotationCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
DrawablePencilAnnotationCommandArchive::_Internal::pencil_annotation_to_add(const DrawablePencilAnnotationCommandArchive* msg) {
  return *msg->pencil_annotation_to_add_;
}
const ::TSP::Reference&
DrawablePencilAnnotationCommandArchive::_Internal::pencil_annotation_to_remove(const DrawablePencilAnnotationCommandArchive* msg) {
  return *msg->pencil_annotation_to_remove_;
}
void DrawablePencilAnnotationCommandArchive::clear_pencil_annotation_to_add() {
  if (pencil_annotation_to_add_ != nullptr) pencil_annotation_to_add_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DrawablePencilAnnotationCommandArchive::clear_pencil_annotation_to_remove() {
  if (pencil_annotation_to_remove_ != nullptr) pencil_annotation_to_remove_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DrawablePencilAnnotationCommandArchive::DrawablePencilAnnotationCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawablePencilAnnotationCommandArchive)
}
DrawablePencilAnnotationCommandArchive::DrawablePencilAnnotationCommandArchive(const DrawablePencilAnnotationCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_pencil_annotation_to_add()) {
    pencil_annotation_to_add_ = new ::TSP::Reference(*from.pencil_annotation_to_add_);
  } else {
    pencil_annotation_to_add_ = nullptr;
  }
  if (from._internal_has_pencil_annotation_to_remove()) {
    pencil_annotation_to_remove_ = new ::TSP::Reference(*from.pencil_annotation_to_remove_);
  } else {
    pencil_annotation_to_remove_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawablePencilAnnotationCommandArchive)
}

void DrawablePencilAnnotationCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pencil_annotation_to_remove_) -
    reinterpret_cast<char*>(&super_)) + sizeof(pencil_annotation_to_remove_));
}

DrawablePencilAnnotationCommandArchive::~DrawablePencilAnnotationCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawablePencilAnnotationCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawablePencilAnnotationCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete pencil_annotation_to_add_;
  if (this != internal_default_instance()) delete pencil_annotation_to_remove_;
}

void DrawablePencilAnnotationCommandArchive::ArenaDtor(void* object) {
  DrawablePencilAnnotationCommandArchive* _this = reinterpret_cast< DrawablePencilAnnotationCommandArchive* >(object);
  (void)_this;
}
void DrawablePencilAnnotationCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawablePencilAnnotationCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawablePencilAnnotationCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawablePencilAnnotationCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pencil_annotation_to_add_ != nullptr);
      pencil_annotation_to_add_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pencil_annotation_to_remove_ != nullptr);
      pencil_annotation_to_remove_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawablePencilAnnotationCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference pencil_annotation_to_add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_to_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference pencil_annotation_to_remove = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_to_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawablePencilAnnotationCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawablePencilAnnotationCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference pencil_annotation_to_add = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pencil_annotation_to_add(this), target, stream);
  }

  // optional .TSP.Reference pencil_annotation_to_remove = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pencil_annotation_to_remove(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawablePencilAnnotationCommandArchive)
  return target;
}

size_t DrawablePencilAnnotationCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawablePencilAnnotationCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference pencil_annotation_to_add = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pencil_annotation_to_add_);
    }

    // optional .TSP.Reference pencil_annotation_to_remove = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pencil_annotation_to_remove_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawablePencilAnnotationCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawablePencilAnnotationCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawablePencilAnnotationCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawablePencilAnnotationCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawablePencilAnnotationCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawablePencilAnnotationCommandArchive)
    MergeFrom(*source);
  }
}

void DrawablePencilAnnotationCommandArchive::MergeFrom(const DrawablePencilAnnotationCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawablePencilAnnotationCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pencil_annotation_to_add()->::TSP::Reference::MergeFrom(from._internal_pencil_annotation_to_add());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pencil_annotation_to_remove()->::TSP::Reference::MergeFrom(from._internal_pencil_annotation_to_remove());
    }
  }
}

void DrawablePencilAnnotationCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawablePencilAnnotationCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawablePencilAnnotationCommandArchive::CopyFrom(const DrawablePencilAnnotationCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawablePencilAnnotationCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablePencilAnnotationCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_to_add()) {
    if (!pencil_annotation_to_add_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_to_remove()) {
    if (!pencil_annotation_to_remove_->IsInitialized()) return false;
  }
  return true;
}

void DrawablePencilAnnotationCommandArchive::InternalSwap(DrawablePencilAnnotationCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawablePencilAnnotationCommandArchive, pencil_annotation_to_remove_)
      + sizeof(DrawablePencilAnnotationCommandArchive::pencil_annotation_to_remove_)
      - PROTOBUF_FIELD_OFFSET(DrawablePencilAnnotationCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawablePencilAnnotationCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[39]);
}

// ===================================================================

class AbstractGuideCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AbstractGuideCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const AbstractGuideCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
AbstractGuideCommandArchive::_Internal::super(const AbstractGuideCommandArchive* msg) {
  return *msg->super_;
}
void AbstractGuideCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AbstractGuideCommandArchive::clear_old_guides() {
  old_guides_.Clear();
}
void AbstractGuideCommandArchive::clear_new_guides() {
  new_guides_.Clear();
}
AbstractGuideCommandArchive::AbstractGuideCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  old_guides_(arena),
  new_guides_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.AbstractGuideCommandArchive)
}
AbstractGuideCommandArchive::AbstractGuideCommandArchive(const AbstractGuideCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      old_guides_(from.old_guides_),
      new_guides_(from.new_guides_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.AbstractGuideCommandArchive)
}

void AbstractGuideCommandArchive::SharedCtor() {
super_ = nullptr;
}

AbstractGuideCommandArchive::~AbstractGuideCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.AbstractGuideCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbstractGuideCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void AbstractGuideCommandArchive::ArenaDtor(void* object) {
  AbstractGuideCommandArchive* _this = reinterpret_cast< AbstractGuideCommandArchive* >(object);
  (void)_this;
}
void AbstractGuideCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbstractGuideCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AbstractGuideCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.AbstractGuideCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_guides_.Clear();
  new_guides_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbstractGuideCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSD.UserDefinedGuideArchive old_guides = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_guides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSD.UserDefinedGuideArchive new_guides = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_guides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbstractGuideCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.AbstractGuideCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSD.UserDefinedGuideArchive old_guides = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_guides_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_old_guides(i), target, stream);
  }

  // repeated .TSD.UserDefinedGuideArchive new_guides = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_guides_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_new_guides(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.AbstractGuideCommandArchive)
  return target;
}

size_t AbstractGuideCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.AbstractGuideCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSD.UserDefinedGuideArchive old_guides = 7;
  total_size += 1UL * this->_internal_old_guides_size();
  for (const auto& msg : this->old_guides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.UserDefinedGuideArchive new_guides = 8;
  total_size += 1UL * this->_internal_new_guides_size();
  for (const auto& msg : this->new_guides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbstractGuideCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.AbstractGuideCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const AbstractGuideCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbstractGuideCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.AbstractGuideCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.AbstractGuideCommandArchive)
    MergeFrom(*source);
  }
}

void AbstractGuideCommandArchive::MergeFrom(const AbstractGuideCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.AbstractGuideCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_guides_.MergeFrom(from.old_guides_);
  new_guides_.MergeFrom(from.new_guides_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
}

void AbstractGuideCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.AbstractGuideCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbstractGuideCommandArchive::CopyFrom(const AbstractGuideCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.AbstractGuideCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractGuideCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void AbstractGuideCommandArchive::InternalSwap(AbstractGuideCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  old_guides_.InternalSwap(&other->old_guides_);
  new_guides_.InternalSwap(&other->new_guides_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbstractGuideCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[40]);
}

// ===================================================================

class GuideCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GuideCommandArchive>()._has_bits_);
  static const ::TSD::AbstractGuideCommandArchive& super(const GuideCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& storage_id_path(const GuideCommandArchive* msg);
  static void set_has_storage_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::AbstractGuideCommandArchive&
GuideCommandArchive::_Internal::super(const GuideCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
GuideCommandArchive::_Internal::storage_id_path(const GuideCommandArchive* msg) {
  return *msg->storage_id_path_;
}
void GuideCommandArchive::clear_storage_id_path() {
  if (storage_id_path_ != nullptr) storage_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GuideCommandArchive::GuideCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GuideCommandArchive)
}
GuideCommandArchive::GuideCommandArchive(const GuideCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::AbstractGuideCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage_id_path()) {
    storage_id_path_ = new ::TSP::UUIDPath(*from.storage_id_path_);
  } else {
    storage_id_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.GuideCommandArchive)
}

void GuideCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storage_id_path_) -
    reinterpret_cast<char*>(&super_)) + sizeof(storage_id_path_));
}

GuideCommandArchive::~GuideCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.GuideCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuideCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_id_path_;
}

void GuideCommandArchive::ArenaDtor(void* object) {
  GuideCommandArchive* _this = reinterpret_cast< GuideCommandArchive* >(object);
  (void)_this;
}
void GuideCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuideCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GuideCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GuideCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_id_path_ != nullptr);
      storage_id_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuideCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractGuideCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath storage_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuideCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GuideCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.AbstractGuideCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath storage_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage_id_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GuideCommandArchive)
  return target;
}

size_t GuideCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.GuideCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.AbstractGuideCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_storage_id_path()) {
    // required .TSP.UUIDPath storage_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_id_path_);
  }

  return total_size;
}
size_t GuideCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GuideCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.AbstractGuideCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath storage_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_id_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuideCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GuideCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GuideCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuideCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GuideCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GuideCommandArchive)
    MergeFrom(*source);
  }
}

void GuideCommandArchive::MergeFrom(const GuideCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GuideCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::AbstractGuideCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_storage_id_path());
    }
  }
}

void GuideCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GuideCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideCommandArchive::CopyFrom(const GuideCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GuideCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage_id_path()) {
    if (!storage_id_path_->IsInitialized()) return false;
  }
  return true;
}

void GuideCommandArchive::InternalSwap(GuideCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuideCommandArchive, storage_id_path_)
      + sizeof(GuideCommandArchive::storage_id_path_)
      - PROTOBUF_FIELD_OFFSET(GuideCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuideCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[41]);
}

// ===================================================================

class DrawableAspectRatioLockedCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableAspectRatioLockedCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableAspectRatioLockedCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aspect_ratio_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_aspect_ratio_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableAspectRatioLockedCommandArchive::_Internal::super(const DrawableAspectRatioLockedCommandArchive* msg) {
  return *msg->super_;
}
DrawableAspectRatioLockedCommandArchive::DrawableAspectRatioLockedCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableAspectRatioLockedCommandArchive)
}
DrawableAspectRatioLockedCommandArchive::DrawableAspectRatioLockedCommandArchive(const DrawableAspectRatioLockedCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&aspect_ratio_locked_, &from.aspect_ratio_locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&was_aspect_ratio_locked_) -
    reinterpret_cast<char*>(&aspect_ratio_locked_)) + sizeof(was_aspect_ratio_locked_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableAspectRatioLockedCommandArchive)
}

void DrawableAspectRatioLockedCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&was_aspect_ratio_locked_) -
    reinterpret_cast<char*>(&super_)) + sizeof(was_aspect_ratio_locked_));
}

DrawableAspectRatioLockedCommandArchive::~DrawableAspectRatioLockedCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableAspectRatioLockedCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableAspectRatioLockedCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void DrawableAspectRatioLockedCommandArchive::ArenaDtor(void* object) {
  DrawableAspectRatioLockedCommandArchive* _this = reinterpret_cast< DrawableAspectRatioLockedCommandArchive* >(object);
  (void)_this;
}
void DrawableAspectRatioLockedCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableAspectRatioLockedCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableAspectRatioLockedCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableAspectRatioLockedCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  ::memset(&aspect_ratio_locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&was_aspect_ratio_locked_) -
      reinterpret_cast<char*>(&aspect_ratio_locked_)) + sizeof(was_aspect_ratio_locked_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableAspectRatioLockedCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool aspect_ratio_locked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_aspect_ratio_locked(&has_bits);
          aspect_ratio_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_aspect_ratio_locked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_was_aspect_ratio_locked(&has_bits);
          was_aspect_ratio_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableAspectRatioLockedCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableAspectRatioLockedCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool aspect_ratio_locked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_aspect_ratio_locked(), target);
  }

  // optional bool was_aspect_ratio_locked = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_was_aspect_ratio_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableAspectRatioLockedCommandArchive)
  return target;
}

size_t DrawableAspectRatioLockedCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableAspectRatioLockedCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool aspect_ratio_locked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool was_aspect_ratio_locked = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableAspectRatioLockedCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableAspectRatioLockedCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableAspectRatioLockedCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableAspectRatioLockedCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableAspectRatioLockedCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableAspectRatioLockedCommandArchive)
    MergeFrom(*source);
  }
}

void DrawableAspectRatioLockedCommandArchive::MergeFrom(const DrawableAspectRatioLockedCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableAspectRatioLockedCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      aspect_ratio_locked_ = from.aspect_ratio_locked_;
    }
    if (cached_has_bits & 0x00000004u) {
      was_aspect_ratio_locked_ = from.was_aspect_ratio_locked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrawableAspectRatioLockedCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableAspectRatioLockedCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableAspectRatioLockedCommandArchive::CopyFrom(const DrawableAspectRatioLockedCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableAspectRatioLockedCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableAspectRatioLockedCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void DrawableAspectRatioLockedCommandArchive::InternalSwap(DrawableAspectRatioLockedCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableAspectRatioLockedCommandArchive, was_aspect_ratio_locked_)
      + sizeof(DrawableAspectRatioLockedCommandArchive::was_aspect_ratio_locked_)
      - PROTOBUF_FIELD_OFFSET(DrawableAspectRatioLockedCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableAspectRatioLockedCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[42]);
}

// ===================================================================

class DrawableAccessibilityDescriptionCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableAccessibilityDescriptionCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableAccessibilityDescriptionCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accessibility_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_accessibility_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableAccessibilityDescriptionCommandArchive::_Internal::super(const DrawableAccessibilityDescriptionCommandArchive* msg) {
  return *msg->super_;
}
DrawableAccessibilityDescriptionCommandArchive::DrawableAccessibilityDescriptionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableAccessibilityDescriptionCommandArchive)
}
DrawableAccessibilityDescriptionCommandArchive::DrawableAccessibilityDescriptionCommandArchive(const DrawableAccessibilityDescriptionCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accessibility_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_accessibility_description()) {
    accessibility_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accessibility_description(), 
      GetArena());
  }
  old_accessibility_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_old_accessibility_description()) {
    old_accessibility_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_accessibility_description(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableAccessibilityDescriptionCommandArchive)
}

void DrawableAccessibilityDescriptionCommandArchive::SharedCtor() {
accessibility_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
old_accessibility_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

DrawableAccessibilityDescriptionCommandArchive::~DrawableAccessibilityDescriptionCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableAccessibilityDescriptionCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableAccessibilityDescriptionCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accessibility_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_accessibility_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void DrawableAccessibilityDescriptionCommandArchive::ArenaDtor(void* object) {
  DrawableAccessibilityDescriptionCommandArchive* _this = reinterpret_cast< DrawableAccessibilityDescriptionCommandArchive* >(object);
  (void)_this;
}
void DrawableAccessibilityDescriptionCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableAccessibilityDescriptionCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableAccessibilityDescriptionCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      accessibility_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      old_accessibility_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableAccessibilityDescriptionCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string accessibility_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_accessibility_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string old_accessibility_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_old_accessibility_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.DrawableAccessibilityDescriptionCommandArchive.old_accessibility_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableAccessibilityDescriptionCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string accessibility_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accessibility_description().data(), static_cast<int>(this->_internal_accessibility_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accessibility_description(), target);
  }

  // optional string old_accessibility_description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_accessibility_description().data(), static_cast<int>(this->_internal_old_accessibility_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableAccessibilityDescriptionCommandArchive.old_accessibility_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_old_accessibility_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableAccessibilityDescriptionCommandArchive)
  return target;
}

size_t DrawableAccessibilityDescriptionCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string accessibility_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accessibility_description());
    }

    // optional string old_accessibility_description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_accessibility_description());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableAccessibilityDescriptionCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableAccessibilityDescriptionCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableAccessibilityDescriptionCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableAccessibilityDescriptionCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableAccessibilityDescriptionCommandArchive)
    MergeFrom(*source);
  }
}

void DrawableAccessibilityDescriptionCommandArchive::MergeFrom(const DrawableAccessibilityDescriptionCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_accessibility_description(from._internal_accessibility_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_old_accessibility_description(from._internal_old_accessibility_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
  }
}

void DrawableAccessibilityDescriptionCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableAccessibilityDescriptionCommandArchive::CopyFrom(const DrawableAccessibilityDescriptionCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableAccessibilityDescriptionCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void DrawableAccessibilityDescriptionCommandArchive::InternalSwap(DrawableAccessibilityDescriptionCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accessibility_description_.Swap(&other->accessibility_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_accessibility_description_.Swap(&other->old_accessibility_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableAccessibilityDescriptionCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[43]);
}

// ===================================================================

class PasteStyleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteStyleCommandArchive>()._has_bits_);
  static const ::TSD::AbstractStyleCommandArchive& super(const PasteStyleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& new_style(const PasteStyleCommandArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& rollback_style(const PasteStyleCommandArchive* msg);
  static void set_has_rollback_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tail_end_on_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::AbstractStyleCommandArchive&
PasteStyleCommandArchive::_Internal::super(const PasteStyleCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
PasteStyleCommandArchive::_Internal::new_style(const PasteStyleCommandArchive* msg) {
  return *msg->new_style_;
}
const ::TSP::Reference&
PasteStyleCommandArchive::_Internal::rollback_style(const PasteStyleCommandArchive* msg) {
  return *msg->rollback_style_;
}
void PasteStyleCommandArchive::clear_new_style() {
  if (new_style_ != nullptr) new_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PasteStyleCommandArchive::clear_rollback_style() {
  if (rollback_style_ != nullptr) rollback_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PasteStyleCommandArchive::PasteStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PasteStyleCommandArchive)
}
PasteStyleCommandArchive::PasteStyleCommandArchive(const PasteStyleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::AbstractStyleCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_new_style()) {
    new_style_ = new ::TSP::Reference(*from.new_style_);
  } else {
    new_style_ = nullptr;
  }
  if (from._internal_has_rollback_style()) {
    rollback_style_ = new ::TSP::Reference(*from.rollback_style_);
  } else {
    rollback_style_ = nullptr;
  }
  tail_end_on_left_ = from.tail_end_on_left_;
  // @@protoc_insertion_point(copy_constructor:TSD.PasteStyleCommandArchive)
}

void PasteStyleCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tail_end_on_left_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tail_end_on_left_));
}

PasteStyleCommandArchive::~PasteStyleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.PasteStyleCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PasteStyleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete new_style_;
  if (this != internal_default_instance()) delete rollback_style_;
}

void PasteStyleCommandArchive::ArenaDtor(void* object) {
  PasteStyleCommandArchive* _this = reinterpret_cast< PasteStyleCommandArchive* >(object);
  (void)_this;
}
void PasteStyleCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PasteStyleCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasteStyleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PasteStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_style_ != nullptr);
      new_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rollback_style_ != nullptr);
      rollback_style_->Clear();
    }
  }
  tail_end_on_left_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteStyleCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractStyleCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference new_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tail_end_on_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tail_end_on_left(&has_bits);
          tail_end_on_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PasteStyleCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PasteStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference new_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_style(this), target, stream);
  }

  // optional bool tail_end_on_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_tail_end_on_left(), target);
  }

  // optional .TSP.Reference rollback_style = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rollback_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PasteStyleCommandArchive)
  return target;
}

size_t PasteStyleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PasteStyleCommandArchive)
  size_t total_size = 0;

  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference new_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_style_);
    }

    // optional .TSP.Reference rollback_style = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rollback_style_);
    }

    // optional bool tail_end_on_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasteStyleCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PasteStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PasteStyleCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PasteStyleCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PasteStyleCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PasteStyleCommandArchive)
    MergeFrom(*source);
  }
}

void PasteStyleCommandArchive::MergeFrom(const PasteStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PasteStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::AbstractStyleCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_style()->::TSP::Reference::MergeFrom(from._internal_new_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rollback_style()->::TSP::Reference::MergeFrom(from._internal_rollback_style());
    }
    if (cached_has_bits & 0x00000008u) {
      tail_end_on_left_ = from.tail_end_on_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PasteStyleCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PasteStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteStyleCommandArchive::CopyFrom(const PasteStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PasteStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteStyleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!new_style_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_style()) {
    if (!rollback_style_->IsInitialized()) return false;
  }
  return true;
}

void PasteStyleCommandArchive::InternalSwap(PasteStyleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteStyleCommandArchive, tail_end_on_left_)
      + sizeof(PasteStyleCommandArchive::tail_end_on_left_)
      - PROTOBUF_FIELD_OFFSET(PasteStyleCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteStyleCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[44]);
}

// ===================================================================

class ImageInfoAbstractGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageInfoAbstractGeometryCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::GeometryArchive& new_image_geometry(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_new_image_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::GeometryArchive& old_image_geometry(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_old_image_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::GeometryArchive& new_mask_geometry(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_new_mask_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::GeometryArchive& old_mask_geometry(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_old_mask_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::PathSourceArchive& new_mask_path_source(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_new_mask_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::PathSourceArchive& old_mask_path_source(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_old_mask_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Size& new_image_original_size(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_new_image_original_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Size& old_image_original_size(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_old_image_original_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::super(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->super_;
}
const ::TSD::GeometryArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::new_image_geometry(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->new_image_geometry_;
}
const ::TSD::GeometryArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::old_image_geometry(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->old_image_geometry_;
}
const ::TSD::GeometryArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::new_mask_geometry(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->new_mask_geometry_;
}
const ::TSD::GeometryArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::old_mask_geometry(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->old_mask_geometry_;
}
const ::TSD::PathSourceArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::new_mask_path_source(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->new_mask_path_source_;
}
const ::TSD::PathSourceArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::old_mask_path_source(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->old_mask_path_source_;
}
const ::TSP::Size&
ImageInfoAbstractGeometryCommandArchive::_Internal::new_image_original_size(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->new_image_original_size_;
}
const ::TSP::Size&
ImageInfoAbstractGeometryCommandArchive::_Internal::old_image_original_size(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->old_image_original_size_;
}
void ImageInfoAbstractGeometryCommandArchive::clear_new_image_geometry() {
  if (new_image_geometry_ != nullptr) new_image_geometry_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_old_image_geometry() {
  if (old_image_geometry_ != nullptr) old_image_geometry_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_new_mask_geometry() {
  if (new_mask_geometry_ != nullptr) new_mask_geometry_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_old_mask_geometry() {
  if (old_mask_geometry_ != nullptr) old_mask_geometry_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_new_mask_path_source() {
  if (new_mask_path_source_ != nullptr) new_mask_path_source_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_old_mask_path_source() {
  if (old_mask_path_source_ != nullptr) old_mask_path_source_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_new_image_original_size() {
  if (new_image_original_size_ != nullptr) new_image_original_size_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_old_image_original_size() {
  if (old_image_original_size_ != nullptr) old_image_original_size_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
ImageInfoAbstractGeometryCommandArchive::ImageInfoAbstractGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageInfoAbstractGeometryCommandArchive)
}
ImageInfoAbstractGeometryCommandArchive::ImageInfoAbstractGeometryCommandArchive(const ImageInfoAbstractGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_new_image_geometry()) {
    new_image_geometry_ = new ::TSD::GeometryArchive(*from.new_image_geometry_);
  } else {
    new_image_geometry_ = nullptr;
  }
  if (from._internal_has_old_image_geometry()) {
    old_image_geometry_ = new ::TSD::GeometryArchive(*from.old_image_geometry_);
  } else {
    old_image_geometry_ = nullptr;
  }
  if (from._internal_has_new_mask_geometry()) {
    new_mask_geometry_ = new ::TSD::GeometryArchive(*from.new_mask_geometry_);
  } else {
    new_mask_geometry_ = nullptr;
  }
  if (from._internal_has_old_mask_geometry()) {
    old_mask_geometry_ = new ::TSD::GeometryArchive(*from.old_mask_geometry_);
  } else {
    old_mask_geometry_ = nullptr;
  }
  if (from._internal_has_new_mask_path_source()) {
    new_mask_path_source_ = new ::TSD::PathSourceArchive(*from.new_mask_path_source_);
  } else {
    new_mask_path_source_ = nullptr;
  }
  if (from._internal_has_old_mask_path_source()) {
    old_mask_path_source_ = new ::TSD::PathSourceArchive(*from.old_mask_path_source_);
  } else {
    old_mask_path_source_ = nullptr;
  }
  if (from._internal_has_new_image_original_size()) {
    new_image_original_size_ = new ::TSP::Size(*from.new_image_original_size_);
  } else {
    new_image_original_size_ = nullptr;
  }
  if (from._internal_has_old_image_original_size()) {
    old_image_original_size_ = new ::TSP::Size(*from.old_image_original_size_);
  } else {
    old_image_original_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageInfoAbstractGeometryCommandArchive)
}

void ImageInfoAbstractGeometryCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_image_original_size_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_image_original_size_));
}

ImageInfoAbstractGeometryCommandArchive::~ImageInfoAbstractGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageInfoAbstractGeometryCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageInfoAbstractGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete new_image_geometry_;
  if (this != internal_default_instance()) delete old_image_geometry_;
  if (this != internal_default_instance()) delete new_mask_geometry_;
  if (this != internal_default_instance()) delete old_mask_geometry_;
  if (this != internal_default_instance()) delete new_mask_path_source_;
  if (this != internal_default_instance()) delete old_mask_path_source_;
  if (this != internal_default_instance()) delete new_image_original_size_;
  if (this != internal_default_instance()) delete old_image_original_size_;
}

void ImageInfoAbstractGeometryCommandArchive::ArenaDtor(void* object) {
  ImageInfoAbstractGeometryCommandArchive* _this = reinterpret_cast< ImageInfoAbstractGeometryCommandArchive* >(object);
  (void)_this;
}
void ImageInfoAbstractGeometryCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageInfoAbstractGeometryCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageInfoAbstractGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_image_geometry_ != nullptr);
      new_image_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_image_geometry_ != nullptr);
      old_image_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_mask_geometry_ != nullptr);
      new_mask_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(old_mask_geometry_ != nullptr);
      old_mask_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(new_mask_path_source_ != nullptr);
      new_mask_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(old_mask_path_source_ != nullptr);
      old_mask_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(new_image_original_size_ != nullptr);
      new_image_original_size_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(old_image_original_size_ != nullptr);
    old_image_original_size_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfoAbstractGeometryCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive new_image_geometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_image_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive old_image_geometry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive new_mask_geometry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_mask_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive old_mask_geometry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_mask_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive new_mask_path_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_mask_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive old_mask_path_source = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_mask_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size new_image_original_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_image_original_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size old_image_original_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_original_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageInfoAbstractGeometryCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.GeometryArchive new_image_geometry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_image_geometry(this), target, stream);
  }

  // optional .TSD.GeometryArchive old_image_geometry = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_image_geometry(this), target, stream);
  }

  // optional .TSD.GeometryArchive new_mask_geometry = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_mask_geometry(this), target, stream);
  }

  // optional .TSD.GeometryArchive old_mask_geometry = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::old_mask_geometry(this), target, stream);
  }

  // optional .TSD.PathSourceArchive new_mask_path_source = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::new_mask_path_source(this), target, stream);
  }

  // optional .TSD.PathSourceArchive old_mask_path_source = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::old_mask_path_source(this), target, stream);
  }

  // optional .TSP.Size new_image_original_size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::new_image_original_size(this), target, stream);
  }

  // optional .TSP.Size old_image_original_size = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::old_image_original_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageInfoAbstractGeometryCommandArchive)
  return target;
}

size_t ImageInfoAbstractGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.GeometryArchive new_image_geometry = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_image_geometry_);
    }

    // optional .TSD.GeometryArchive old_image_geometry = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_image_geometry_);
    }

    // optional .TSD.GeometryArchive new_mask_geometry = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_mask_geometry_);
    }

    // optional .TSD.GeometryArchive old_mask_geometry = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_mask_geometry_);
    }

    // optional .TSD.PathSourceArchive new_mask_path_source = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_mask_path_source_);
    }

    // optional .TSD.PathSourceArchive old_mask_path_source = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_mask_path_source_);
    }

    // optional .TSP.Size new_image_original_size = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_image_original_size_);
    }

  }
  // optional .TSP.Size old_image_original_size = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_image_original_size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageInfoAbstractGeometryCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfoAbstractGeometryCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageInfoAbstractGeometryCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageInfoAbstractGeometryCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageInfoAbstractGeometryCommandArchive)
    MergeFrom(*source);
  }
}

void ImageInfoAbstractGeometryCommandArchive::MergeFrom(const ImageInfoAbstractGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_image_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_new_image_geometry());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_image_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_old_image_geometry());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_new_mask_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_new_mask_geometry());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_old_mask_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_old_mask_geometry());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_new_mask_path_source()->::TSD::PathSourceArchive::MergeFrom(from._internal_new_mask_path_source());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_old_mask_path_source()->::TSD::PathSourceArchive::MergeFrom(from._internal_old_mask_path_source());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_new_image_original_size()->::TSP::Size::MergeFrom(from._internal_new_image_original_size());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_old_image_original_size()->::TSP::Size::MergeFrom(from._internal_old_image_original_size());
  }
}

void ImageInfoAbstractGeometryCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfoAbstractGeometryCommandArchive::CopyFrom(const ImageInfoAbstractGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfoAbstractGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_new_image_geometry()) {
    if (!new_image_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_old_image_geometry()) {
    if (!old_image_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_new_mask_geometry()) {
    if (!new_mask_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_old_mask_geometry()) {
    if (!old_mask_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_new_mask_path_source()) {
    if (!new_mask_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_old_mask_path_source()) {
    if (!old_mask_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_new_image_original_size()) {
    if (!new_image_original_size_->IsInitialized()) return false;
  }
  if (_internal_has_old_image_original_size()) {
    if (!old_image_original_size_->IsInitialized()) return false;
  }
  return true;
}

void ImageInfoAbstractGeometryCommandArchive::InternalSwap(ImageInfoAbstractGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageInfoAbstractGeometryCommandArchive, old_image_original_size_)
      + sizeof(ImageInfoAbstractGeometryCommandArchive::old_image_original_size_)
      - PROTOBUF_FIELD_OFFSET(ImageInfoAbstractGeometryCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfoAbstractGeometryCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[45]);
}

// ===================================================================

class ImageInfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageInfoGeometryCommandArchive>()._has_bits_);
  static const ::TSD::ImageInfoAbstractGeometryCommandArchive& super(const ImageInfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ImageInfoAbstractGeometryCommandArchive&
ImageInfoGeometryCommandArchive::_Internal::super(const ImageInfoGeometryCommandArchive* msg) {
  return *msg->super_;
}
ImageInfoGeometryCommandArchive::ImageInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageInfoGeometryCommandArchive)
}
ImageInfoGeometryCommandArchive::ImageInfoGeometryCommandArchive(const ImageInfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ImageInfoAbstractGeometryCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageInfoGeometryCommandArchive)
}

void ImageInfoGeometryCommandArchive::SharedCtor() {
super_ = nullptr;
}

ImageInfoGeometryCommandArchive::~ImageInfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageInfoGeometryCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageInfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ImageInfoGeometryCommandArchive::ArenaDtor(void* object) {
  ImageInfoGeometryCommandArchive* _this = reinterpret_cast< ImageInfoGeometryCommandArchive* >(object);
  (void)_this;
}
void ImageInfoGeometryCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageInfoGeometryCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageInfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageInfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfoGeometryCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageInfoGeometryCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageInfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageInfoGeometryCommandArchive)
  return target;
}

size_t ImageInfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageInfoGeometryCommandArchive)
  size_t total_size = 0;

  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageInfoGeometryCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfoGeometryCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageInfoGeometryCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageInfoGeometryCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageInfoGeometryCommandArchive)
    MergeFrom(*source);
  }
}

void ImageInfoGeometryCommandArchive::MergeFrom(const ImageInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::ImageInfoAbstractGeometryCommandArchive::MergeFrom(from._internal_super());
  }
}

void ImageInfoGeometryCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfoGeometryCommandArchive::CopyFrom(const ImageInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfoGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ImageInfoGeometryCommandArchive::InternalSwap(ImageInfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfoGeometryCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[46]);
}

// ===================================================================

class ImageInfoMaskGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageInfoMaskGeometryCommandArchive>()._has_bits_);
  static const ::TSD::ImageInfoAbstractGeometryCommandArchive& super(const ImageInfoMaskGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ImageInfoAbstractGeometryCommandArchive&
ImageInfoMaskGeometryCommandArchive::_Internal::super(const ImageInfoMaskGeometryCommandArchive* msg) {
  return *msg->super_;
}
ImageInfoMaskGeometryCommandArchive::ImageInfoMaskGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageInfoMaskGeometryCommandArchive)
}
ImageInfoMaskGeometryCommandArchive::ImageInfoMaskGeometryCommandArchive(const ImageInfoMaskGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ImageInfoAbstractGeometryCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageInfoMaskGeometryCommandArchive)
}

void ImageInfoMaskGeometryCommandArchive::SharedCtor() {
super_ = nullptr;
}

ImageInfoMaskGeometryCommandArchive::~ImageInfoMaskGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageInfoMaskGeometryCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageInfoMaskGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ImageInfoMaskGeometryCommandArchive::ArenaDtor(void* object) {
  ImageInfoMaskGeometryCommandArchive* _this = reinterpret_cast< ImageInfoMaskGeometryCommandArchive* >(object);
  (void)_this;
}
void ImageInfoMaskGeometryCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageInfoMaskGeometryCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageInfoMaskGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageInfoMaskGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfoMaskGeometryCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageInfoMaskGeometryCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageInfoMaskGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageInfoMaskGeometryCommandArchive)
  return target;
}

size_t ImageInfoMaskGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageInfoMaskGeometryCommandArchive)
  size_t total_size = 0;

  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageInfoMaskGeometryCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageInfoMaskGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfoMaskGeometryCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageInfoMaskGeometryCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageInfoMaskGeometryCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageInfoMaskGeometryCommandArchive)
    MergeFrom(*source);
  }
}

void ImageInfoMaskGeometryCommandArchive::MergeFrom(const ImageInfoMaskGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageInfoMaskGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::ImageInfoAbstractGeometryCommandArchive::MergeFrom(from._internal_super());
  }
}

void ImageInfoMaskGeometryCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageInfoMaskGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfoMaskGeometryCommandArchive::CopyFrom(const ImageInfoMaskGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageInfoMaskGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfoMaskGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ImageInfoMaskGeometryCommandArchive::InternalSwap(ImageInfoMaskGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfoMaskGeometryCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[47]);
}

// ===================================================================

class InfoCollectionSelectionTransformerHelperArchive::_Internal {
 public:
};

void InfoCollectionSelectionTransformerHelperArchive::clear_info_uuid_path_list() {
  info_uuid_path_list_.Clear();
}
InfoCollectionSelectionTransformerHelperArchive::InfoCollectionSelectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_uuid_path_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.InfoCollectionSelectionTransformerHelperArchive)
}
InfoCollectionSelectionTransformerHelperArchive::InfoCollectionSelectionTransformerHelperArchive(const InfoCollectionSelectionTransformerHelperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_uuid_path_list_(from.info_uuid_path_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.InfoCollectionSelectionTransformerHelperArchive)
}

void InfoCollectionSelectionTransformerHelperArchive::SharedCtor() {
}

InfoCollectionSelectionTransformerHelperArchive::~InfoCollectionSelectionTransformerHelperArchive() {
  // @@protoc_insertion_point(destructor:TSD.InfoCollectionSelectionTransformerHelperArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InfoCollectionSelectionTransformerHelperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InfoCollectionSelectionTransformerHelperArchive::ArenaDtor(void* object) {
  InfoCollectionSelectionTransformerHelperArchive* _this = reinterpret_cast< InfoCollectionSelectionTransformerHelperArchive* >(object);
  (void)_this;
}
void InfoCollectionSelectionTransformerHelperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoCollectionSelectionTransformerHelperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoCollectionSelectionTransformerHelperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_uuid_path_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoCollectionSelectionTransformerHelperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUIDPath info_uuid_path_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_uuid_path_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoCollectionSelectionTransformerHelperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath info_uuid_path_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_uuid_path_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_info_uuid_path_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InfoCollectionSelectionTransformerHelperArchive)
  return target;
}

size_t InfoCollectionSelectionTransformerHelperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath info_uuid_path_list = 1;
  total_size += 1UL * this->_internal_info_uuid_path_list_size();
  for (const auto& msg : this->info_uuid_path_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoCollectionSelectionTransformerHelperArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoCollectionSelectionTransformerHelperArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoCollectionSelectionTransformerHelperArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.InfoCollectionSelectionTransformerHelperArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.InfoCollectionSelectionTransformerHelperArchive)
    MergeFrom(*source);
  }
}

void InfoCollectionSelectionTransformerHelperArchive::MergeFrom(const InfoCollectionSelectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_uuid_path_list_.MergeFrom(from.info_uuid_path_list_);
}

void InfoCollectionSelectionTransformerHelperArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoCollectionSelectionTransformerHelperArchive::CopyFrom(const InfoCollectionSelectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoCollectionSelectionTransformerHelperArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(info_uuid_path_list_)) return false;
  return true;
}

void InfoCollectionSelectionTransformerHelperArchive::InternalSwap(InfoCollectionSelectionTransformerHelperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  info_uuid_path_list_.InternalSwap(&other->info_uuid_path_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoCollectionSelectionTransformerHelperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[48]);
}

// ===================================================================

class DrawableSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableSelectionTransformerArchive>()._has_bits_);
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper(const DrawableSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& untransformed_drawable_selection(const DrawableSelectionTransformerArchive* msg);
  static void set_has_untransformed_drawable_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
DrawableSelectionTransformerArchive::_Internal::transformer_helper(const DrawableSelectionTransformerArchive* msg) {
  return *msg->transformer_helper_;
}
const ::TSP::Reference&
DrawableSelectionTransformerArchive::_Internal::untransformed_drawable_selection(const DrawableSelectionTransformerArchive* msg) {
  return *msg->untransformed_drawable_selection_;
}
void DrawableSelectionTransformerArchive::clear_untransformed_drawable_selection() {
  if (untransformed_drawable_selection_ != nullptr) untransformed_drawable_selection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DrawableSelectionTransformerArchive::DrawableSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableSelectionTransformerArchive)
}
DrawableSelectionTransformerArchive::DrawableSelectionTransformerArchive(const DrawableSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    transformer_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from.transformer_helper_);
  } else {
    transformer_helper_ = nullptr;
  }
  if (from._internal_has_untransformed_drawable_selection()) {
    untransformed_drawable_selection_ = new ::TSP::Reference(*from.untransformed_drawable_selection_);
  } else {
    untransformed_drawable_selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableSelectionTransformerArchive)
}

void DrawableSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transformer_helper_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&untransformed_drawable_selection_) -
    reinterpret_cast<char*>(&transformer_helper_)) + sizeof(untransformed_drawable_selection_));
}

DrawableSelectionTransformerArchive::~DrawableSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transformer_helper_;
  if (this != internal_default_instance()) delete untransformed_drawable_selection_;
}

void DrawableSelectionTransformerArchive::ArenaDtor(void* object) {
  DrawableSelectionTransformerArchive* _this = reinterpret_cast< DrawableSelectionTransformerArchive* >(object);
  (void)_this;
}
void DrawableSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(transformer_helper_ != nullptr);
      transformer_helper_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(untransformed_drawable_selection_ != nullptr);
      untransformed_drawable_selection_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference untransformed_drawable_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_untransformed_drawable_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transformer_helper(this), target, stream);
  }

  // required .TSP.Reference untransformed_drawable_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::untransformed_drawable_selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableSelectionTransformerArchive)
  return target;
}

size_t DrawableSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.DrawableSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_transformer_helper()) {
    // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_helper_);
  }

  if (_internal_has_untransformed_drawable_selection()) {
    // required .TSP.Reference untransformed_drawable_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *untransformed_drawable_selection_);
  }

  return total_size;
}
size_t DrawableSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_helper_);

    // required .TSP.Reference untransformed_drawable_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *untransformed_drawable_selection_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void DrawableSelectionTransformerArchive::MergeFrom(const DrawableSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_transformer_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_transformer_helper());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_untransformed_drawable_selection()->::TSP::Reference::MergeFrom(from._internal_untransformed_drawable_selection());
    }
  }
}

void DrawableSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableSelectionTransformerArchive::CopyFrom(const DrawableSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!transformer_helper_->IsInitialized()) return false;
  }
  if (_internal_has_untransformed_drawable_selection()) {
    if (!untransformed_drawable_selection_->IsInitialized()) return false;
  }
  return true;
}

void DrawableSelectionTransformerArchive::InternalSwap(DrawableSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableSelectionTransformerArchive, untransformed_drawable_selection_)
      + sizeof(DrawableSelectionTransformerArchive::untransformed_drawable_selection_)
      - PROTOBUF_FIELD_OFFSET(DrawableSelectionTransformerArchive, transformer_helper_)>(
          reinterpret_cast<char*>(&transformer_helper_),
          reinterpret_cast<char*>(&other->transformer_helper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[49]);
}

// ===================================================================

class InfoHyperlinkSelectionTransformerArchive::_Internal {
 public:
};

InfoHyperlinkSelectionTransformerArchive::InfoHyperlinkSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.InfoHyperlinkSelectionTransformerArchive)
}
InfoHyperlinkSelectionTransformerArchive::InfoHyperlinkSelectionTransformerArchive(const InfoHyperlinkSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.InfoHyperlinkSelectionTransformerArchive)
}

void InfoHyperlinkSelectionTransformerArchive::SharedCtor() {
}

InfoHyperlinkSelectionTransformerArchive::~InfoHyperlinkSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.InfoHyperlinkSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InfoHyperlinkSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InfoHyperlinkSelectionTransformerArchive::ArenaDtor(void* object) {
  InfoHyperlinkSelectionTransformerArchive* _this = reinterpret_cast< InfoHyperlinkSelectionTransformerArchive* >(object);
  (void)_this;
}
void InfoHyperlinkSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoHyperlinkSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoHyperlinkSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InfoHyperlinkSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoHyperlinkSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoHyperlinkSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InfoHyperlinkSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InfoHyperlinkSelectionTransformerArchive)
  return target;
}

size_t InfoHyperlinkSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InfoHyperlinkSelectionTransformerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoHyperlinkSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.InfoHyperlinkSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoHyperlinkSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoHyperlinkSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.InfoHyperlinkSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.InfoHyperlinkSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void InfoHyperlinkSelectionTransformerArchive::MergeFrom(const InfoHyperlinkSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.InfoHyperlinkSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InfoHyperlinkSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.InfoHyperlinkSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoHyperlinkSelectionTransformerArchive::CopyFrom(const InfoHyperlinkSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InfoHyperlinkSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoHyperlinkSelectionTransformerArchive::IsInitialized() const {
  return true;
}

void InfoHyperlinkSelectionTransformerArchive::InternalSwap(InfoHyperlinkSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoHyperlinkSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[50]);
}

// ===================================================================

class CanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CanvasSelectionTransformerArchive>()._has_bits_);
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper(const CanvasSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
CanvasSelectionTransformerArchive::_Internal::transformer_helper(const CanvasSelectionTransformerArchive* msg) {
  return *msg->transformer_helper_;
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.CanvasSelectionTransformerArchive)
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    transformer_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from.transformer_helper_);
  } else {
    transformer_helper_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.CanvasSelectionTransformerArchive)
}

void CanvasSelectionTransformerArchive::SharedCtor() {
transformer_helper_ = nullptr;
}

CanvasSelectionTransformerArchive::~CanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.CanvasSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transformer_helper_;
}

void CanvasSelectionTransformerArchive::ArenaDtor(void* object) {
  CanvasSelectionTransformerArchive* _this = reinterpret_cast< CanvasSelectionTransformerArchive* >(object);
  (void)_this;
}
void CanvasSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.CanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(transformer_helper_ != nullptr);
    transformer_helper_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanvasSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.CanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transformer_helper(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.CanvasSelectionTransformerArchive)
  return target;
}

size_t CanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.CanvasSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_helper_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanvasSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.CanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CanvasSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanvasSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.CanvasSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.CanvasSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void CanvasSelectionTransformerArchive::MergeFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.CanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transformer_helper()) {
    _internal_mutable_transformer_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_transformer_helper());
  }
}

void CanvasSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.CanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanvasSelectionTransformerArchive::CopyFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.CanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionTransformerArchive::InternalSwap(CanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(transformer_helper_, other->transformer_helper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[51]);
}

// ===================================================================

class PathSelectionTransformerArchive::_Internal {
 public:
};

PathSelectionTransformerArchive::PathSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PathSelectionTransformerArchive)
}
PathSelectionTransformerArchive::PathSelectionTransformerArchive(const PathSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.PathSelectionTransformerArchive)
}

void PathSelectionTransformerArchive::SharedCtor() {
}

PathSelectionTransformerArchive::~PathSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.PathSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PathSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PathSelectionTransformerArchive::ArenaDtor(void* object) {
  PathSelectionTransformerArchive* _this = reinterpret_cast< PathSelectionTransformerArchive* >(object);
  (void)_this;
}
void PathSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PathSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PathSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PathSelectionTransformerArchive)
  return target;
}

size_t PathSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PathSelectionTransformerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PathSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PathSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PathSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PathSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void PathSelectionTransformerArchive::MergeFrom(const PathSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PathSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PathSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PathSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathSelectionTransformerArchive::CopyFrom(const PathSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PathSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSelectionTransformerArchive::IsInitialized() const {
  return true;
}

void PathSelectionTransformerArchive::InternalSwap(PathSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[52]);
}

// ===================================================================

class ShapeSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeSelectionTransformerArchive>()._has_bits_);
  static const ::TSD::DrawableSelectionTransformerArchive& super(const ShapeSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableSelectionTransformerArchive&
ShapeSelectionTransformerArchive::_Internal::super(const ShapeSelectionTransformerArchive* msg) {
  return *msg->super_;
}
ShapeSelectionTransformerArchive::ShapeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ShapeSelectionTransformerArchive)
}
ShapeSelectionTransformerArchive::ShapeSelectionTransformerArchive(const ShapeSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableSelectionTransformerArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ShapeSelectionTransformerArchive)
}

void ShapeSelectionTransformerArchive::SharedCtor() {
super_ = nullptr;
}

ShapeSelectionTransformerArchive::~ShapeSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShapeSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ShapeSelectionTransformerArchive::ArenaDtor(void* object) {
  ShapeSelectionTransformerArchive* _this = reinterpret_cast< ShapeSelectionTransformerArchive* >(object);
  (void)_this;
}
void ShapeSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShapeSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableSelectionTransformerArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShapeSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShapeSelectionTransformerArchive)
  return target;
}

size_t ShapeSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShapeSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ShapeSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ShapeSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ShapeSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void ShapeSelectionTransformerArchive::MergeFrom(const ShapeSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShapeSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::DrawableSelectionTransformerArchive::MergeFrom(from._internal_super());
  }
}

void ShapeSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ShapeSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeSelectionTransformerArchive::CopyFrom(const ShapeSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShapeSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ShapeSelectionTransformerArchive::InternalSwap(ShapeSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[53]);
}

// ===================================================================

class GroupSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupSelectionTransformerArchive>()._has_bits_);
  static const ::TSD::DrawableSelectionTransformerArchive& super(const GroupSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableSelectionTransformerArchive&
GroupSelectionTransformerArchive::_Internal::super(const GroupSelectionTransformerArchive* msg) {
  return *msg->super_;
}
GroupSelectionTransformerArchive::GroupSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GroupSelectionTransformerArchive)
}
GroupSelectionTransformerArchive::GroupSelectionTransformerArchive(const GroupSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableSelectionTransformerArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.GroupSelectionTransformerArchive)
}

void GroupSelectionTransformerArchive::SharedCtor() {
super_ = nullptr;
}

GroupSelectionTransformerArchive::~GroupSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.GroupSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void GroupSelectionTransformerArchive::ArenaDtor(void* object) {
  GroupSelectionTransformerArchive* _this = reinterpret_cast< GroupSelectionTransformerArchive* >(object);
  (void)_this;
}
void GroupSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GroupSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableSelectionTransformerArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GroupSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GroupSelectionTransformerArchive)
  return target;
}

size_t GroupSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GroupSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GroupSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GroupSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GroupSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void GroupSelectionTransformerArchive::MergeFrom(const GroupSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GroupSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::DrawableSelectionTransformerArchive::MergeFrom(from._internal_super());
  }
}

void GroupSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GroupSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupSelectionTransformerArchive::CopyFrom(const GroupSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GroupSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void GroupSelectionTransformerArchive::InternalSwap(GroupSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[54]);
}

// ===================================================================

class PencilAnnotationSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::UUID& pencil_annotation_uuid(const PencilAnnotationSelectionTransformerArchive* msg);
  static void set_has_pencil_annotation_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
PencilAnnotationSelectionTransformerArchive::_Internal::pencil_annotation_uuid(const PencilAnnotationSelectionTransformerArchive* msg) {
  return *msg->pencil_annotation_uuid_;
}
void PencilAnnotationSelectionTransformerArchive::clear_pencil_annotation_uuid() {
  if (pencil_annotation_uuid_ != nullptr) pencil_annotation_uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PencilAnnotationSelectionTransformerArchive::PencilAnnotationSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PencilAnnotationSelectionTransformerArchive)
}
PencilAnnotationSelectionTransformerArchive::PencilAnnotationSelectionTransformerArchive(const PencilAnnotationSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pencil_annotation_uuid()) {
    pencil_annotation_uuid_ = new ::TSP::UUID(*from.pencil_annotation_uuid_);
  } else {
    pencil_annotation_uuid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.PencilAnnotationSelectionTransformerArchive)
}

void PencilAnnotationSelectionTransformerArchive::SharedCtor() {
pencil_annotation_uuid_ = nullptr;
}

PencilAnnotationSelectionTransformerArchive::~PencilAnnotationSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.PencilAnnotationSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PencilAnnotationSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pencil_annotation_uuid_;
}

void PencilAnnotationSelectionTransformerArchive::ArenaDtor(void* object) {
  PencilAnnotationSelectionTransformerArchive* _this = reinterpret_cast< PencilAnnotationSelectionTransformerArchive* >(object);
  (void)_this;
}
void PencilAnnotationSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PencilAnnotationSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PencilAnnotationSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PencilAnnotationSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pencil_annotation_uuid_ != nullptr);
    pencil_annotation_uuid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID pencil_annotation_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PencilAnnotationSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PencilAnnotationSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID pencil_annotation_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pencil_annotation_uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PencilAnnotationSelectionTransformerArchive)
  return target;
}

size_t PencilAnnotationSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PencilAnnotationSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSP.UUID pencil_annotation_uuid = 1;
  if (_internal_has_pencil_annotation_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pencil_annotation_uuid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PencilAnnotationSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PencilAnnotationSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PencilAnnotationSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PencilAnnotationSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PencilAnnotationSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PencilAnnotationSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void PencilAnnotationSelectionTransformerArchive::MergeFrom(const PencilAnnotationSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PencilAnnotationSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pencil_annotation_uuid()) {
    _internal_mutable_pencil_annotation_uuid()->::TSP::UUID::MergeFrom(from._internal_pencil_annotation_uuid());
  }
}

void PencilAnnotationSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PencilAnnotationSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PencilAnnotationSelectionTransformerArchive::CopyFrom(const PencilAnnotationSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PencilAnnotationSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_pencil_annotation_uuid()) {
    if (!pencil_annotation_uuid_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationSelectionTransformerArchive::InternalSwap(PencilAnnotationSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pencil_annotation_uuid_, other->pencil_annotation_uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[55]);
}

// ===================================================================

class FreehandDrawingOpacityCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FreehandDrawingOpacityCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const FreehandDrawingOpacityCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
FreehandDrawingOpacityCommandArchive::_Internal::super(const FreehandDrawingOpacityCommandArchive* msg) {
  return *msg->super_;
}
FreehandDrawingOpacityCommandArchive::FreehandDrawingOpacityCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.FreehandDrawingOpacityCommandArchive)
}
FreehandDrawingOpacityCommandArchive::FreehandDrawingOpacityCommandArchive(const FreehandDrawingOpacityCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&opacity_, &from.opacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_opacity_) -
    reinterpret_cast<char*>(&opacity_)) + sizeof(old_opacity_));
  // @@protoc_insertion_point(copy_constructor:TSD.FreehandDrawingOpacityCommandArchive)
}

void FreehandDrawingOpacityCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_opacity_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_opacity_));
}

FreehandDrawingOpacityCommandArchive::~FreehandDrawingOpacityCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.FreehandDrawingOpacityCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreehandDrawingOpacityCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void FreehandDrawingOpacityCommandArchive::ArenaDtor(void* object) {
  FreehandDrawingOpacityCommandArchive* _this = reinterpret_cast< FreehandDrawingOpacityCommandArchive* >(object);
  (void)_this;
}
void FreehandDrawingOpacityCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreehandDrawingOpacityCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreehandDrawingOpacityCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FreehandDrawingOpacityCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&opacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&old_opacity_) -
        reinterpret_cast<char*>(&opacity_)) + sizeof(old_opacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreehandDrawingOpacityCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double opacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double old_opacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_old_opacity(&has_bits);
          old_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreehandDrawingOpacityCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FreehandDrawingOpacityCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional double opacity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_opacity(), target);
  }

  // optional double old_opacity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_old_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FreehandDrawingOpacityCommandArchive)
  return target;
}

size_t FreehandDrawingOpacityCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FreehandDrawingOpacityCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional double opacity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double old_opacity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreehandDrawingOpacityCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.FreehandDrawingOpacityCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FreehandDrawingOpacityCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreehandDrawingOpacityCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.FreehandDrawingOpacityCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.FreehandDrawingOpacityCommandArchive)
    MergeFrom(*source);
  }
}

void FreehandDrawingOpacityCommandArchive::MergeFrom(const FreehandDrawingOpacityCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.FreehandDrawingOpacityCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      opacity_ = from.opacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      old_opacity_ = from.old_opacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FreehandDrawingOpacityCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.FreehandDrawingOpacityCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreehandDrawingOpacityCommandArchive::CopyFrom(const FreehandDrawingOpacityCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FreehandDrawingOpacityCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreehandDrawingOpacityCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void FreehandDrawingOpacityCommandArchive::InternalSwap(FreehandDrawingOpacityCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreehandDrawingOpacityCommandArchive, old_opacity_)
      + sizeof(FreehandDrawingOpacityCommandArchive::old_opacity_)
      - PROTOBUF_FIELD_OFFSET(FreehandDrawingOpacityCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreehandDrawingOpacityCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[56]);
}

// ===================================================================

class FreehandDrawingAnimationCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FreehandDrawingAnimationCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const FreehandDrawingAnimationCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::FreehandDrawingAnimationArchive& animation(const FreehandDrawingAnimationCommandArchive* msg);
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::FreehandDrawingAnimationArchive& old_animation(const FreehandDrawingAnimationCommandArchive* msg);
  static void set_has_old_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
FreehandDrawingAnimationCommandArchive::_Internal::super(const FreehandDrawingAnimationCommandArchive* msg) {
  return *msg->super_;
}
const ::TSD::FreehandDrawingAnimationArchive&
FreehandDrawingAnimationCommandArchive::_Internal::animation(const FreehandDrawingAnimationCommandArchive* msg) {
  return *msg->animation_;
}
const ::TSD::FreehandDrawingAnimationArchive&
FreehandDrawingAnimationCommandArchive::_Internal::old_animation(const FreehandDrawingAnimationCommandArchive* msg) {
  return *msg->old_animation_;
}
void FreehandDrawingAnimationCommandArchive::clear_animation() {
  if (animation_ != nullptr) animation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FreehandDrawingAnimationCommandArchive::clear_old_animation() {
  if (old_animation_ != nullptr) old_animation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FreehandDrawingAnimationCommandArchive::FreehandDrawingAnimationCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.FreehandDrawingAnimationCommandArchive)
}
FreehandDrawingAnimationCommandArchive::FreehandDrawingAnimationCommandArchive(const FreehandDrawingAnimationCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_animation()) {
    animation_ = new ::TSD::FreehandDrawingAnimationArchive(*from.animation_);
  } else {
    animation_ = nullptr;
  }
  if (from._internal_has_old_animation()) {
    old_animation_ = new ::TSD::FreehandDrawingAnimationArchive(*from.old_animation_);
  } else {
    old_animation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.FreehandDrawingAnimationCommandArchive)
}

void FreehandDrawingAnimationCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_animation_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_animation_));
}

FreehandDrawingAnimationCommandArchive::~FreehandDrawingAnimationCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.FreehandDrawingAnimationCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreehandDrawingAnimationCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete animation_;
  if (this != internal_default_instance()) delete old_animation_;
}

void FreehandDrawingAnimationCommandArchive::ArenaDtor(void* object) {
  FreehandDrawingAnimationCommandArchive* _this = reinterpret_cast< FreehandDrawingAnimationCommandArchive* >(object);
  (void)_this;
}
void FreehandDrawingAnimationCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreehandDrawingAnimationCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreehandDrawingAnimationCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FreehandDrawingAnimationCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(animation_ != nullptr);
      animation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_animation_ != nullptr);
      old_animation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreehandDrawingAnimationCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FreehandDrawingAnimationArchive animation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FreehandDrawingAnimationArchive old_animation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_animation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreehandDrawingAnimationCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FreehandDrawingAnimationCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.FreehandDrawingAnimationArchive animation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::animation(this), target, stream);
  }

  // optional .TSD.FreehandDrawingAnimationArchive old_animation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_animation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FreehandDrawingAnimationCommandArchive)
  return target;
}

size_t FreehandDrawingAnimationCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FreehandDrawingAnimationCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSD.FreehandDrawingAnimationArchive animation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *animation_);
    }

    // optional .TSD.FreehandDrawingAnimationArchive old_animation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_animation_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreehandDrawingAnimationCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.FreehandDrawingAnimationCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FreehandDrawingAnimationCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreehandDrawingAnimationCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.FreehandDrawingAnimationCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.FreehandDrawingAnimationCommandArchive)
    MergeFrom(*source);
  }
}

void FreehandDrawingAnimationCommandArchive::MergeFrom(const FreehandDrawingAnimationCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.FreehandDrawingAnimationCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_animation()->::TSD::FreehandDrawingAnimationArchive::MergeFrom(from._internal_animation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_animation()->::TSD::FreehandDrawingAnimationArchive::MergeFrom(from._internal_old_animation());
    }
  }
}

void FreehandDrawingAnimationCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.FreehandDrawingAnimationCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreehandDrawingAnimationCommandArchive::CopyFrom(const FreehandDrawingAnimationCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FreehandDrawingAnimationCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreehandDrawingAnimationCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void FreehandDrawingAnimationCommandArchive::InternalSwap(FreehandDrawingAnimationCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreehandDrawingAnimationCommandArchive, old_animation_)
      + sizeof(FreehandDrawingAnimationCommandArchive::old_animation_)
      - PROTOBUF_FIELD_OFFSET(FreehandDrawingAnimationCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreehandDrawingAnimationCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[57]);
}

// ===================================================================

class InsertCaptionOrTitleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertCaptionOrTitleCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& drawable_info_id_path(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_drawable_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& caption_or_title_info(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_caption_or_title_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& added_caption_or_title_uuid(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_added_caption_or_title_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caption_or_title_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& undo_object(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InsertCaptionOrTitleCommandArchive::_Internal::super(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
InsertCaptionOrTitleCommandArchive::_Internal::drawable_info_id_path(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->drawable_info_id_path_;
}
const ::TSP::Reference&
InsertCaptionOrTitleCommandArchive::_Internal::caption_or_title_info(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->caption_or_title_info_;
}
const ::TSP::UUID&
InsertCaptionOrTitleCommandArchive::_Internal::added_caption_or_title_uuid(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->added_caption_or_title_uuid_;
}
const ::TSP::Reference&
InsertCaptionOrTitleCommandArchive::_Internal::undo_object(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->undo_object_;
}
void InsertCaptionOrTitleCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InsertCaptionOrTitleCommandArchive::clear_drawable_info_id_path() {
  if (drawable_info_id_path_ != nullptr) drawable_info_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InsertCaptionOrTitleCommandArchive::clear_caption_or_title_info() {
  if (caption_or_title_info_ != nullptr) caption_or_title_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void InsertCaptionOrTitleCommandArchive::clear_added_caption_or_title_uuid() {
  if (added_caption_or_title_uuid_ != nullptr) added_caption_or_title_uuid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void InsertCaptionOrTitleCommandArchive::clear_undo_object() {
  if (undo_object_ != nullptr) undo_object_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
InsertCaptionOrTitleCommandArchive::InsertCaptionOrTitleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.InsertCaptionOrTitleCommandArchive)
}
InsertCaptionOrTitleCommandArchive::InsertCaptionOrTitleCommandArchive(const InsertCaptionOrTitleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_drawable_info_id_path()) {
    drawable_info_id_path_ = new ::TSP::UUIDPath(*from.drawable_info_id_path_);
  } else {
    drawable_info_id_path_ = nullptr;
  }
  if (from._internal_has_caption_or_title_info()) {
    caption_or_title_info_ = new ::TSP::Reference(*from.caption_or_title_info_);
  } else {
    caption_or_title_info_ = nullptr;
  }
  if (from._internal_has_added_caption_or_title_uuid()) {
    added_caption_or_title_uuid_ = new ::TSP::UUID(*from.added_caption_or_title_uuid_);
  } else {
    added_caption_or_title_uuid_ = nullptr;
  }
  if (from._internal_has_undo_object()) {
    undo_object_ = new ::TSP::Reference(*from.undo_object_);
  } else {
    undo_object_ = nullptr;
  }
  caption_or_title_kind_ = from.caption_or_title_kind_;
  // @@protoc_insertion_point(copy_constructor:TSD.InsertCaptionOrTitleCommandArchive)
}

void InsertCaptionOrTitleCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_object_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_object_));
caption_or_title_kind_ = 1;
}

InsertCaptionOrTitleCommandArchive::~InsertCaptionOrTitleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.InsertCaptionOrTitleCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertCaptionOrTitleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete drawable_info_id_path_;
  if (this != internal_default_instance()) delete caption_or_title_info_;
  if (this != internal_default_instance()) delete added_caption_or_title_uuid_;
  if (this != internal_default_instance()) delete undo_object_;
}

void InsertCaptionOrTitleCommandArchive::ArenaDtor(void* object) {
  InsertCaptionOrTitleCommandArchive* _this = reinterpret_cast< InsertCaptionOrTitleCommandArchive* >(object);
  (void)_this;
}
void InsertCaptionOrTitleCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertCaptionOrTitleCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertCaptionOrTitleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InsertCaptionOrTitleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(drawable_info_id_path_ != nullptr);
      drawable_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(caption_or_title_info_ != nullptr);
      caption_or_title_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(added_caption_or_title_uuid_ != nullptr);
      added_caption_or_title_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_object_ != nullptr);
      undo_object_->Clear();
    }
    caption_or_title_kind_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertCaptionOrTitleCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath drawable_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_info_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference caption_or_title_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption_or_title_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID added_caption_or_title_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_added_caption_or_title_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CaptionOrTitleKind_IsValid(val))) {
            _internal_set_caption_or_title_kind(static_cast<::TSD::CaptionOrTitleKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertCaptionOrTitleCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InsertCaptionOrTitleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath drawable_info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::drawable_info_id_path(this), target, stream);
  }

  // optional .TSP.Reference caption_or_title_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::caption_or_title_info(this), target, stream);
  }

  // optional .TSP.UUID added_caption_or_title_uuid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::added_caption_or_title_uuid(this), target, stream);
  }

  // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_caption_or_title_kind(), target);
  }

  // optional .TSP.Reference undo_object = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InsertCaptionOrTitleCommandArchive)
  return target;
}

size_t InsertCaptionOrTitleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InsertCaptionOrTitleCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSP.UUIDPath drawable_info_id_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_info_id_path_);
    }

    // optional .TSP.Reference caption_or_title_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caption_or_title_info_);
    }

    // optional .TSP.UUID added_caption_or_title_uuid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *added_caption_or_title_uuid_);
    }

    // optional .TSP.Reference undo_object = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_object_);
    }

    // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caption_or_title_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertCaptionOrTitleCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.InsertCaptionOrTitleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertCaptionOrTitleCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertCaptionOrTitleCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.InsertCaptionOrTitleCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.InsertCaptionOrTitleCommandArchive)
    MergeFrom(*source);
  }
}

void InsertCaptionOrTitleCommandArchive::MergeFrom(const InsertCaptionOrTitleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.InsertCaptionOrTitleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_drawable_info_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_drawable_info_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_caption_or_title_info()->::TSP::Reference::MergeFrom(from._internal_caption_or_title_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_added_caption_or_title_uuid()->::TSP::UUID::MergeFrom(from._internal_added_caption_or_title_uuid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_object()->::TSP::Reference::MergeFrom(from._internal_undo_object());
    }
    if (cached_has_bits & 0x00000020u) {
      caption_or_title_kind_ = from.caption_or_title_kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsertCaptionOrTitleCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.InsertCaptionOrTitleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertCaptionOrTitleCommandArchive::CopyFrom(const InsertCaptionOrTitleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InsertCaptionOrTitleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertCaptionOrTitleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_info_id_path()) {
    if (!drawable_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_caption_or_title_info()) {
    if (!caption_or_title_info_->IsInitialized()) return false;
  }
  if (_internal_has_added_caption_or_title_uuid()) {
    if (!added_caption_or_title_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_undo_object()) {
    if (!undo_object_->IsInitialized()) return false;
  }
  return true;
}

void InsertCaptionOrTitleCommandArchive::InternalSwap(InsertCaptionOrTitleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertCaptionOrTitleCommandArchive, undo_object_)
      + sizeof(InsertCaptionOrTitleCommandArchive::undo_object_)
      - PROTOBUF_FIELD_OFFSET(InsertCaptionOrTitleCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
  swap(caption_or_title_kind_, other->caption_or_title_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertCaptionOrTitleCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[58]);
}

// ===================================================================

class RemoveCaptionOrTitleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveCaptionOrTitleCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const RemoveCaptionOrTitleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& drawable_info_id_path(const RemoveCaptionOrTitleCommandArchive* msg);
  static void set_has_drawable_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& removed_caption_or_title_info(const RemoveCaptionOrTitleCommandArchive* msg);
  static void set_has_removed_caption_or_title_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& removed_caption_or_title_uuid(const RemoveCaptionOrTitleCommandArchive* msg);
  static void set_has_removed_caption_or_title_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caption_or_title_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
RemoveCaptionOrTitleCommandArchive::_Internal::super(const RemoveCaptionOrTitleCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
RemoveCaptionOrTitleCommandArchive::_Internal::drawable_info_id_path(const RemoveCaptionOrTitleCommandArchive* msg) {
  return *msg->drawable_info_id_path_;
}
const ::TSP::Reference&
RemoveCaptionOrTitleCommandArchive::_Internal::removed_caption_or_title_info(const RemoveCaptionOrTitleCommandArchive* msg) {
  return *msg->removed_caption_or_title_info_;
}
const ::TSP::UUID&
RemoveCaptionOrTitleCommandArchive::_Internal::removed_caption_or_title_uuid(const RemoveCaptionOrTitleCommandArchive* msg) {
  return *msg->removed_caption_or_title_uuid_;
}
void RemoveCaptionOrTitleCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveCaptionOrTitleCommandArchive::clear_drawable_info_id_path() {
  if (drawable_info_id_path_ != nullptr) drawable_info_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RemoveCaptionOrTitleCommandArchive::clear_removed_caption_or_title_info() {
  if (removed_caption_or_title_info_ != nullptr) removed_caption_or_title_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void RemoveCaptionOrTitleCommandArchive::clear_removed_caption_or_title_uuid() {
  if (removed_caption_or_title_uuid_ != nullptr) removed_caption_or_title_uuid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
RemoveCaptionOrTitleCommandArchive::RemoveCaptionOrTitleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.RemoveCaptionOrTitleCommandArchive)
}
RemoveCaptionOrTitleCommandArchive::RemoveCaptionOrTitleCommandArchive(const RemoveCaptionOrTitleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_drawable_info_id_path()) {
    drawable_info_id_path_ = new ::TSP::UUIDPath(*from.drawable_info_id_path_);
  } else {
    drawable_info_id_path_ = nullptr;
  }
  if (from._internal_has_removed_caption_or_title_info()) {
    removed_caption_or_title_info_ = new ::TSP::Reference(*from.removed_caption_or_title_info_);
  } else {
    removed_caption_or_title_info_ = nullptr;
  }
  if (from._internal_has_removed_caption_or_title_uuid()) {
    removed_caption_or_title_uuid_ = new ::TSP::UUID(*from.removed_caption_or_title_uuid_);
  } else {
    removed_caption_or_title_uuid_ = nullptr;
  }
  caption_or_title_kind_ = from.caption_or_title_kind_;
  // @@protoc_insertion_point(copy_constructor:TSD.RemoveCaptionOrTitleCommandArchive)
}

void RemoveCaptionOrTitleCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&removed_caption_or_title_uuid_) -
    reinterpret_cast<char*>(&super_)) + sizeof(removed_caption_or_title_uuid_));
caption_or_title_kind_ = 1;
}

RemoveCaptionOrTitleCommandArchive::~RemoveCaptionOrTitleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.RemoveCaptionOrTitleCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveCaptionOrTitleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete drawable_info_id_path_;
  if (this != internal_default_instance()) delete removed_caption_or_title_info_;
  if (this != internal_default_instance()) delete removed_caption_or_title_uuid_;
}

void RemoveCaptionOrTitleCommandArchive::ArenaDtor(void* object) {
  RemoveCaptionOrTitleCommandArchive* _this = reinterpret_cast< RemoveCaptionOrTitleCommandArchive* >(object);
  (void)_this;
}
void RemoveCaptionOrTitleCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveCaptionOrTitleCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveCaptionOrTitleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.RemoveCaptionOrTitleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(drawable_info_id_path_ != nullptr);
      drawable_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(removed_caption_or_title_info_ != nullptr);
      removed_caption_or_title_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(removed_caption_or_title_uuid_ != nullptr);
      removed_caption_or_title_uuid_->Clear();
    }
    caption_or_title_kind_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveCaptionOrTitleCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath drawable_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_info_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference removed_caption_or_title_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_caption_or_title_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID removed_caption_or_title_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_caption_or_title_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CaptionOrTitleKind_IsValid(val))) {
            _internal_set_caption_or_title_kind(static_cast<::TSD::CaptionOrTitleKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveCaptionOrTitleCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.RemoveCaptionOrTitleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath drawable_info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::drawable_info_id_path(this), target, stream);
  }

  // optional .TSP.Reference removed_caption_or_title_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::removed_caption_or_title_info(this), target, stream);
  }

  // optional .TSP.UUID removed_caption_or_title_uuid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::removed_caption_or_title_uuid(this), target, stream);
  }

  // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_caption_or_title_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.RemoveCaptionOrTitleCommandArchive)
  return target;
}

size_t RemoveCaptionOrTitleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.RemoveCaptionOrTitleCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.UUIDPath drawable_info_id_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_info_id_path_);
    }

    // optional .TSP.Reference removed_caption_or_title_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *removed_caption_or_title_info_);
    }

    // optional .TSP.UUID removed_caption_or_title_uuid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *removed_caption_or_title_uuid_);
    }

    // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caption_or_title_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveCaptionOrTitleCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.RemoveCaptionOrTitleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveCaptionOrTitleCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveCaptionOrTitleCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.RemoveCaptionOrTitleCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.RemoveCaptionOrTitleCommandArchive)
    MergeFrom(*source);
  }
}

void RemoveCaptionOrTitleCommandArchive::MergeFrom(const RemoveCaptionOrTitleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.RemoveCaptionOrTitleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_drawable_info_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_drawable_info_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_removed_caption_or_title_info()->::TSP::Reference::MergeFrom(from._internal_removed_caption_or_title_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_removed_caption_or_title_uuid()->::TSP::UUID::MergeFrom(from._internal_removed_caption_or_title_uuid());
    }
    if (cached_has_bits & 0x00000010u) {
      caption_or_title_kind_ = from.caption_or_title_kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoveCaptionOrTitleCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.RemoveCaptionOrTitleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCaptionOrTitleCommandArchive::CopyFrom(const RemoveCaptionOrTitleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.RemoveCaptionOrTitleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCaptionOrTitleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_info_id_path()) {
    if (!drawable_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_removed_caption_or_title_info()) {
    if (!removed_caption_or_title_info_->IsInitialized()) return false;
  }
  if (_internal_has_removed_caption_or_title_uuid()) {
    if (!removed_caption_or_title_uuid_->IsInitialized()) return false;
  }
  return true;
}

void RemoveCaptionOrTitleCommandArchive::InternalSwap(RemoveCaptionOrTitleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveCaptionOrTitleCommandArchive, removed_caption_or_title_uuid_)
      + sizeof(RemoveCaptionOrTitleCommandArchive::removed_caption_or_title_uuid_)
      - PROTOBUF_FIELD_OFFSET(RemoveCaptionOrTitleCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
  swap(caption_or_title_kind_, other->caption_or_title_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveCaptionOrTitleCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[59]);
}

// ===================================================================

class SetCaptionOrTitleVisibilityCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SetCaptionOrTitleVisibilityCommandArchive>()._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const SetCaptionOrTitleVisibilityCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caption_or_title_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
SetCaptionOrTitleVisibilityCommandArchive::_Internal::super(const SetCaptionOrTitleVisibilityCommandArchive* msg) {
  return *msg->super_;
}
SetCaptionOrTitleVisibilityCommandArchive::SetCaptionOrTitleVisibilityCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SetCaptionOrTitleVisibilityCommandArchive)
}
SetCaptionOrTitleVisibilityCommandArchive::SetCaptionOrTitleVisibilityCommandArchive(const SetCaptionOrTitleVisibilityCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&hidden_, &from.hidden_,
    static_cast<size_t>(reinterpret_cast<char*>(&caption_or_title_kind_) -
    reinterpret_cast<char*>(&hidden_)) + sizeof(caption_or_title_kind_));
  // @@protoc_insertion_point(copy_constructor:TSD.SetCaptionOrTitleVisibilityCommandArchive)
}

void SetCaptionOrTitleVisibilityCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&was_hidden_) -
    reinterpret_cast<char*>(&super_)) + sizeof(was_hidden_));
caption_or_title_kind_ = 1;
}

SetCaptionOrTitleVisibilityCommandArchive::~SetCaptionOrTitleVisibilityCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetCaptionOrTitleVisibilityCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void SetCaptionOrTitleVisibilityCommandArchive::ArenaDtor(void* object) {
  SetCaptionOrTitleVisibilityCommandArchive* _this = reinterpret_cast< SetCaptionOrTitleVisibilityCommandArchive* >(object);
  (void)_this;
}
void SetCaptionOrTitleVisibilityCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCaptionOrTitleVisibilityCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetCaptionOrTitleVisibilityCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  ::memset(&hidden_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&was_hidden_) -
      reinterpret_cast<char*>(&hidden_)) + sizeof(was_hidden_));
  caption_or_title_kind_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCaptionOrTitleVisibilityCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CaptionOrTitleKind_IsValid(val))) {
            _internal_set_caption_or_title_kind(static_cast<::TSD::CaptionOrTitleKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool hidden = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hidden(&has_bits);
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_was_hidden(&has_bits);
          was_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCaptionOrTitleVisibilityCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_caption_or_title_kind(), target);
  }

  // optional bool hidden = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hidden(), target);
  }

  // optional bool was_hidden = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_was_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  return target;
}

size_t SetCaptionOrTitleVisibilityCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bool hidden = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool was_hidden = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caption_or_title_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCaptionOrTitleVisibilityCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCaptionOrTitleVisibilityCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCaptionOrTitleVisibilityCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SetCaptionOrTitleVisibilityCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SetCaptionOrTitleVisibilityCommandArchive)
    MergeFrom(*source);
  }
}

void SetCaptionOrTitleVisibilityCommandArchive::MergeFrom(const SetCaptionOrTitleVisibilityCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      hidden_ = from.hidden_;
    }
    if (cached_has_bits & 0x00000004u) {
      was_hidden_ = from.was_hidden_;
    }
    if (cached_has_bits & 0x00000008u) {
      caption_or_title_kind_ = from.caption_or_title_kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetCaptionOrTitleVisibilityCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCaptionOrTitleVisibilityCommandArchive::CopyFrom(const SetCaptionOrTitleVisibilityCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCaptionOrTitleVisibilityCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void SetCaptionOrTitleVisibilityCommandArchive::InternalSwap(SetCaptionOrTitleVisibilityCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetCaptionOrTitleVisibilityCommandArchive, was_hidden_)
      + sizeof(SetCaptionOrTitleVisibilityCommandArchive::was_hidden_)
      - PROTOBUF_FIELD_OFFSET(SetCaptionOrTitleVisibilityCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
  swap(caption_or_title_kind_, other->caption_or_title_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCaptionOrTitleVisibilityCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[60]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSD
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSD::UndoObjectArchive* Arena::CreateMaybeMessage< ::TSD::UndoObjectArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::UndoObjectArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GroupDrawablesCommandArchive* Arena::CreateMaybeMessage< ::TSD::GroupDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GroupDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::UngroupGroupCommandArchive* Arena::CreateMaybeMessage< ::TSD::UngroupGroupCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::UngroupGroupCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerRemoveChildrenCommandArchive* Arena::CreateMaybeMessage< ::TSD::ContainerRemoveChildrenCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerRemoveChildrenCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerRemoveDrawablesCommandArchive* Arena::CreateMaybeMessage< ::TSD::ContainerRemoveDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerRemoveDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerInsertChildrenCommandArchive* Arena::CreateMaybeMessage< ::TSD::ContainerInsertChildrenCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerInsertChildrenCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerInsertDrawablesCommandArchive* Arena::CreateMaybeMessage< ::TSD::ContainerInsertDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerInsertDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerReorderChildrenCommandArchive* Arena::CreateMaybeMessage< ::TSD::ContainerReorderChildrenCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerReorderChildrenCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GroupUngroupInformativeCommandArchive* Arena::CreateMaybeMessage< ::TSD::GroupUngroupInformativeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GroupUngroupInformativeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InfoCommandArchive* Arena::CreateMaybeMessage< ::TSD::InfoCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InfoCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ConnectionLineConnectCommandArchive* Arena::CreateMaybeMessage< ::TSD::ConnectionLineConnectCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ConnectionLineConnectCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InfoGeometryCommandArchive* Arena::CreateMaybeMessage< ::TSD::InfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InfoGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawablePathSourceCommandArchive* Arena::CreateMaybeMessage< ::TSD::DrawablePathSourceCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawablePathSourceCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InstantAlphaCommandArchive* Arena::CreateMaybeMessage< ::TSD::InstantAlphaCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InstantAlphaCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableApplyThemeCommandArchive* Arena::CreateMaybeMessage< ::TSD::DrawableApplyThemeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableApplyThemeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::AbstractStyleCommandArchive* Arena::CreateMaybeMessage< ::TSD::AbstractStyleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::AbstractStyleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::StyledInfoSetStyleCommandArchive* Arena::CreateMaybeMessage< ::TSD::StyledInfoSetStyleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::StyledInfoSetStyleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::BaseApplyPresetCommandArchive* Arena::CreateMaybeMessage< ::TSD::BaseApplyPresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::BaseApplyPresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShapeApplyPresetCommandArchive* Arena::CreateMaybeMessage< ::TSD::ShapeApplyPresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShapeApplyPresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaApplyPresetCommandArchive* Arena::CreateMaybeMessage< ::TSD::MediaApplyPresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaApplyPresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShapeStyleSetValueCommandArchive* Arena::CreateMaybeMessage< ::TSD::ShapeStyleSetValueCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShapeStyleSetValueCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::BaseStyleSetValueCommandArchive* Arena::CreateMaybeMessage< ::TSD::BaseStyleSetValueCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::BaseStyleSetValueCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MovieSetValueCommandArchive_PropertyValue* Arena::CreateMaybeMessage< ::TSD::MovieSetValueCommandArchive_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MovieSetValueCommandArchive_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MovieSetValueCommandArchive* Arena::CreateMaybeMessage< ::TSD::MovieSetValueCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MovieSetValueCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaStyleSetValueCommandArchive* Arena::CreateMaybeMessage< ::TSD::MediaStyleSetValueCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaStyleSetValueCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageMediaCommandArchive* Arena::CreateMaybeMessage< ::TSD::ImageMediaCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageMediaCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaOriginalSizeCommandArchive* Arena::CreateMaybeMessage< ::TSD::MediaOriginalSizeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaOriginalSizeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaInfoGeometryCommandArchive* Arena::CreateMaybeMessage< ::TSD::MediaInfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaInfoGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageNaturalSizeCommandArchive* Arena::CreateMaybeMessage< ::TSD::ImageNaturalSizeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageNaturalSizeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageMaskCommandArchive* Arena::CreateMaybeMessage< ::TSD::ImageMaskCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageMaskCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageAdjustmentsCommandArchive* Arena::CreateMaybeMessage< ::TSD::ImageAdjustmentsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageAdjustmentsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaFlagsCommandArchive* Arena::CreateMaybeMessage< ::TSD::MediaFlagsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaFlagsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawablesCommandGroupArchive* Arena::CreateMaybeMessage< ::TSD::DrawablesCommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawablesCommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ExteriorTextWrapCommandArchive* Arena::CreateMaybeMessage< ::TSD::ExteriorTextWrapCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ExteriorTextWrapCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableHyperlinkCommandArchive* Arena::CreateMaybeMessage< ::TSD::DrawableHyperlinkCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableHyperlinkCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::CommentInvalidatingCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage< ::TSD::CommentInvalidatingCommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::CommentInvalidatingCommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageReplaceCommandArchive* Arena::CreateMaybeMessage< ::TSD::ImageReplaceCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageReplaceCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableLockCommandArchive* Arena::CreateMaybeMessage< ::TSD::DrawableLockCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableLockCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableInfoCommentCommandArchive* Arena::CreateMaybeMessage< ::TSD::DrawableInfoCommentCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableInfoCommentCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawablePencilAnnotationCommandArchive* Arena::CreateMaybeMessage< ::TSD::DrawablePencilAnnotationCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawablePencilAnnotationCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::AbstractGuideCommandArchive* Arena::CreateMaybeMessage< ::TSD::AbstractGuideCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::AbstractGuideCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GuideCommandArchive* Arena::CreateMaybeMessage< ::TSD::GuideCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GuideCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableAspectRatioLockedCommandArchive* Arena::CreateMaybeMessage< ::TSD::DrawableAspectRatioLockedCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableAspectRatioLockedCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableAccessibilityDescriptionCommandArchive* Arena::CreateMaybeMessage< ::TSD::DrawableAccessibilityDescriptionCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableAccessibilityDescriptionCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PasteStyleCommandArchive* Arena::CreateMaybeMessage< ::TSD::PasteStyleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PasteStyleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageInfoAbstractGeometryCommandArchive* Arena::CreateMaybeMessage< ::TSD::ImageInfoAbstractGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageInfoAbstractGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageInfoGeometryCommandArchive* Arena::CreateMaybeMessage< ::TSD::ImageInfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageInfoGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageInfoMaskGeometryCommandArchive* Arena::CreateMaybeMessage< ::TSD::ImageInfoMaskGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageInfoMaskGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InfoCollectionSelectionTransformerHelperArchive* Arena::CreateMaybeMessage< ::TSD::InfoCollectionSelectionTransformerHelperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InfoCollectionSelectionTransformerHelperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSD::DrawableSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InfoHyperlinkSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSD::InfoHyperlinkSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InfoHyperlinkSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::CanvasSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSD::CanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::CanvasSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PathSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSD::PathSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PathSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShapeSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSD::ShapeSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShapeSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GroupSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSD::GroupSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GroupSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PencilAnnotationSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSD::PencilAnnotationSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PencilAnnotationSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FreehandDrawingOpacityCommandArchive* Arena::CreateMaybeMessage< ::TSD::FreehandDrawingOpacityCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FreehandDrawingOpacityCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FreehandDrawingAnimationCommandArchive* Arena::CreateMaybeMessage< ::TSD::FreehandDrawingAnimationCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FreehandDrawingAnimationCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InsertCaptionOrTitleCommandArchive* Arena::CreateMaybeMessage< ::TSD::InsertCaptionOrTitleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InsertCaptionOrTitleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::RemoveCaptionOrTitleCommandArchive* Arena::CreateMaybeMessage< ::TSD::RemoveCaptionOrTitleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::RemoveCaptionOrTitleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SetCaptionOrTitleVisibilityCommandArchive* Arena::CreateMaybeMessage< ::TSD::SetCaptionOrTitleVisibilityCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SetCaptionOrTitleVisibilityCommandArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
