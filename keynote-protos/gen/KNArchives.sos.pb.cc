// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNArchives.sos.proto

#include "KNArchives.sos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KNSOS {
constexpr SpecSetTransitionAttributesArchive::SpecSetTransitionAttributesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transition_attributes_(nullptr)
  , unset_(false){}
struct SpecSetTransitionAttributesArchiveDefaultTypeInternal {
  constexpr SpecSetTransitionAttributesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetTransitionAttributesArchiveDefaultTypeInternal() {}
  union {
    SpecSetTransitionAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetTransitionAttributesArchiveDefaultTypeInternal _SpecSetTransitionAttributesArchive_default_instance_;
constexpr SpecTransitionAttributesArchive::SpecTransitionAttributesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_set_transition_attributes_(nullptr){}
struct SpecTransitionAttributesArchiveDefaultTypeInternal {
  constexpr SpecTransitionAttributesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecTransitionAttributesArchiveDefaultTypeInternal() {}
  union {
    SpecTransitionAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecTransitionAttributesArchiveDefaultTypeInternal _SpecTransitionAttributesArchive_default_instance_;
constexpr SlideStylePropertyChangeSetArchive::SlideStylePropertyChangeSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fill_(nullptr)
  , slide_transition_(nullptr)
  , fill_undefined_(false)
  , slide_transition_undefined_(false){}
struct SlideStylePropertyChangeSetArchiveDefaultTypeInternal {
  constexpr SlideStylePropertyChangeSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideStylePropertyChangeSetArchiveDefaultTypeInternal() {}
  union {
    SlideStylePropertyChangeSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideStylePropertyChangeSetArchiveDefaultTypeInternal _SlideStylePropertyChangeSetArchive_default_instance_;
}  // namespace KNSOS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_KNArchives_2esos_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_KNArchives_2esos_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_KNArchives_2esos_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_KNArchives_2esos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KNSOS::SpecSetTransitionAttributesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KNSOS::SpecSetTransitionAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KNSOS::SpecSetTransitionAttributesArchive, transition_attributes_),
  PROTOBUF_FIELD_OFFSET(::KNSOS::SpecSetTransitionAttributesArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KNSOS::SpecTransitionAttributesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KNSOS::SpecTransitionAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KNSOS::SpecTransitionAttributesArchive, spec_set_transition_attributes_),
  0,
  PROTOBUF_FIELD_OFFSET(::KNSOS::SlideStylePropertyChangeSetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KNSOS::SlideStylePropertyChangeSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KNSOS::SlideStylePropertyChangeSetArchive, fill_),
  PROTOBUF_FIELD_OFFSET(::KNSOS::SlideStylePropertyChangeSetArchive, fill_undefined_),
  PROTOBUF_FIELD_OFFSET(::KNSOS::SlideStylePropertyChangeSetArchive, slide_transition_),
  PROTOBUF_FIELD_OFFSET(::KNSOS::SlideStylePropertyChangeSetArchive, slide_transition_undefined_),
  0,
  2,
  1,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::KNSOS::SpecSetTransitionAttributesArchive)},
  { 9, 15, sizeof(::KNSOS::SpecTransitionAttributesArchive)},
  { 16, 25, sizeof(::KNSOS::SlideStylePropertyChangeSetArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KNSOS::_SpecSetTransitionAttributesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KNSOS::_SpecTransitionAttributesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KNSOS::_SlideStylePropertyChangeSetArchive_default_instance_),
};

const char descriptor_table_protodef_KNArchives_2esos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024KNArchives.sos.proto\022\005KNSOS\032\020KNArchive"
  "s.proto\032\025TSDArchives.sos.proto\"s\n\"SpecSe"
  "tTransitionAttributesArchive\022>\n\025transiti"
  "on_attributes\030\001 \001(\0132\037.KN.TransitionAttri"
  "butesArchive\022\r\n\005unset\030\002 \002(\010\"t\n\037SpecTrans"
  "itionAttributesArchive\022Q\n\036spec_set_trans"
  "ition_attributes\030\001 \001(\0132).KNSOS.SpecSetTr"
  "ansitionAttributesArchive\"\311\001\n\"SlideStyle"
  "PropertyChangeSetArchive\022%\n\004fill\030\001 \001(\0132\027"
  ".TSDSOS.SpecFillArchive\022\026\n\016fill_undefine"
  "d\030\002 \001(\010\022@\n\020slide_transition\030\003 \001(\0132&.KNSO"
  "S.SpecTransitionAttributesArchive\022\"\n\032sli"
  "de_transition_undefined\030\004 \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_KNArchives_2esos_2eproto_deps[2] = {
  &::descriptor_table_KNArchives_2eproto,
  &::descriptor_table_TSDArchives_2esos_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_KNArchives_2esos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KNArchives_2esos_2eproto = {
  false, false, 509, descriptor_table_protodef_KNArchives_2esos_2eproto, "KNArchives.sos.proto", 
  &descriptor_table_KNArchives_2esos_2eproto_once, descriptor_table_KNArchives_2esos_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_KNArchives_2esos_2eproto::offsets,
  file_level_metadata_KNArchives_2esos_2eproto, file_level_enum_descriptors_KNArchives_2esos_2eproto, file_level_service_descriptors_KNArchives_2esos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_KNArchives_2esos_2eproto_getter() {
  return &descriptor_table_KNArchives_2esos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_KNArchives_2esos_2eproto(&descriptor_table_KNArchives_2esos_2eproto);
namespace KNSOS {

// ===================================================================

class SpecSetTransitionAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetTransitionAttributesArchive>()._has_bits_);
  static const ::KN::TransitionAttributesArchive& transition_attributes(const SpecSetTransitionAttributesArchive* msg);
  static void set_has_transition_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::KN::TransitionAttributesArchive&
SpecSetTransitionAttributesArchive::_Internal::transition_attributes(const SpecSetTransitionAttributesArchive* msg) {
  return *msg->transition_attributes_;
}
void SpecSetTransitionAttributesArchive::clear_transition_attributes() {
  if (transition_attributes_ != nullptr) transition_attributes_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecSetTransitionAttributesArchive::SpecSetTransitionAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KNSOS.SpecSetTransitionAttributesArchive)
}
SpecSetTransitionAttributesArchive::SpecSetTransitionAttributesArchive(const SpecSetTransitionAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transition_attributes()) {
    transition_attributes_ = new ::KN::TransitionAttributesArchive(*from.transition_attributes_);
  } else {
    transition_attributes_ = nullptr;
  }
  unset_ = from.unset_;
  // @@protoc_insertion_point(copy_constructor:KNSOS.SpecSetTransitionAttributesArchive)
}

void SpecSetTransitionAttributesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transition_attributes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&transition_attributes_)) + sizeof(unset_));
}

SpecSetTransitionAttributesArchive::~SpecSetTransitionAttributesArchive() {
  // @@protoc_insertion_point(destructor:KNSOS.SpecSetTransitionAttributesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecSetTransitionAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transition_attributes_;
}

void SpecSetTransitionAttributesArchive::ArenaDtor(void* object) {
  SpecSetTransitionAttributesArchive* _this = reinterpret_cast< SpecSetTransitionAttributesArchive* >(object);
  (void)_this;
}
void SpecSetTransitionAttributesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetTransitionAttributesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetTransitionAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KNSOS.SpecSetTransitionAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(transition_attributes_ != nullptr);
    transition_attributes_->Clear();
  }
  unset_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetTransitionAttributesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KN.TransitionAttributesArchive transition_attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetTransitionAttributesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KNSOS.SpecSetTransitionAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KN.TransitionAttributesArchive transition_attributes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transition_attributes(this), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KNSOS.SpecSetTransitionAttributesArchive)
  return target;
}

size_t SpecSetTransitionAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KNSOS.SpecSetTransitionAttributesArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.TransitionAttributesArchive transition_attributes = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transition_attributes_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecSetTransitionAttributesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KNSOS.SpecSetTransitionAttributesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecSetTransitionAttributesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecSetTransitionAttributesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KNSOS.SpecSetTransitionAttributesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KNSOS.SpecSetTransitionAttributesArchive)
    MergeFrom(*source);
  }
}

void SpecSetTransitionAttributesArchive::MergeFrom(const SpecSetTransitionAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KNSOS.SpecSetTransitionAttributesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_transition_attributes()->::KN::TransitionAttributesArchive::MergeFrom(from._internal_transition_attributes());
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecSetTransitionAttributesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KNSOS.SpecSetTransitionAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecSetTransitionAttributesArchive::CopyFrom(const SpecSetTransitionAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KNSOS.SpecSetTransitionAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetTransitionAttributesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_transition_attributes()) {
    if (!transition_attributes_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetTransitionAttributesArchive::InternalSwap(SpecSetTransitionAttributesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetTransitionAttributesArchive, unset_)
      + sizeof(SpecSetTransitionAttributesArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetTransitionAttributesArchive, transition_attributes_)>(
          reinterpret_cast<char*>(&transition_attributes_),
          reinterpret_cast<char*>(&other->transition_attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetTransitionAttributesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2esos_2eproto_getter, &descriptor_table_KNArchives_2esos_2eproto_once,
      file_level_metadata_KNArchives_2esos_2eproto[0]);
}

// ===================================================================

class SpecTransitionAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecTransitionAttributesArchive>()._has_bits_);
  static const ::KNSOS::SpecSetTransitionAttributesArchive& spec_set_transition_attributes(const SpecTransitionAttributesArchive* msg);
  static void set_has_spec_set_transition_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::KNSOS::SpecSetTransitionAttributesArchive&
SpecTransitionAttributesArchive::_Internal::spec_set_transition_attributes(const SpecTransitionAttributesArchive* msg) {
  return *msg->spec_set_transition_attributes_;
}
SpecTransitionAttributesArchive::SpecTransitionAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KNSOS.SpecTransitionAttributesArchive)
}
SpecTransitionAttributesArchive::SpecTransitionAttributesArchive(const SpecTransitionAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_transition_attributes()) {
    spec_set_transition_attributes_ = new ::KNSOS::SpecSetTransitionAttributesArchive(*from.spec_set_transition_attributes_);
  } else {
    spec_set_transition_attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KNSOS.SpecTransitionAttributesArchive)
}

void SpecTransitionAttributesArchive::SharedCtor() {
spec_set_transition_attributes_ = nullptr;
}

SpecTransitionAttributesArchive::~SpecTransitionAttributesArchive() {
  // @@protoc_insertion_point(destructor:KNSOS.SpecTransitionAttributesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecTransitionAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spec_set_transition_attributes_;
}

void SpecTransitionAttributesArchive::ArenaDtor(void* object) {
  SpecTransitionAttributesArchive* _this = reinterpret_cast< SpecTransitionAttributesArchive* >(object);
  (void)_this;
}
void SpecTransitionAttributesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecTransitionAttributesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecTransitionAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KNSOS.SpecTransitionAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_set_transition_attributes_ != nullptr);
    spec_set_transition_attributes_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecTransitionAttributesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KNSOS.SpecSetTransitionAttributesArchive spec_set_transition_attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_transition_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecTransitionAttributesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KNSOS.SpecTransitionAttributesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KNSOS.SpecSetTransitionAttributesArchive spec_set_transition_attributes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_set_transition_attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KNSOS.SpecTransitionAttributesArchive)
  return target;
}

size_t SpecTransitionAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KNSOS.SpecTransitionAttributesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KNSOS.SpecSetTransitionAttributesArchive spec_set_transition_attributes = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_set_transition_attributes_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecTransitionAttributesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KNSOS.SpecTransitionAttributesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecTransitionAttributesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecTransitionAttributesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KNSOS.SpecTransitionAttributesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KNSOS.SpecTransitionAttributesArchive)
    MergeFrom(*source);
  }
}

void SpecTransitionAttributesArchive::MergeFrom(const SpecTransitionAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KNSOS.SpecTransitionAttributesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec_set_transition_attributes()) {
    _internal_mutable_spec_set_transition_attributes()->::KNSOS::SpecSetTransitionAttributesArchive::MergeFrom(from._internal_spec_set_transition_attributes());
  }
}

void SpecTransitionAttributesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KNSOS.SpecTransitionAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecTransitionAttributesArchive::CopyFrom(const SpecTransitionAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KNSOS.SpecTransitionAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecTransitionAttributesArchive::IsInitialized() const {
  if (_internal_has_spec_set_transition_attributes()) {
    if (!spec_set_transition_attributes_->IsInitialized()) return false;
  }
  return true;
}

void SpecTransitionAttributesArchive::InternalSwap(SpecTransitionAttributesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spec_set_transition_attributes_, other->spec_set_transition_attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecTransitionAttributesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2esos_2eproto_getter, &descriptor_table_KNArchives_2esos_2eproto_once,
      file_level_metadata_KNArchives_2esos_2eproto[1]);
}

// ===================================================================

class SlideStylePropertyChangeSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideStylePropertyChangeSetArchive>()._has_bits_);
  static const ::TSDSOS::SpecFillArchive& fill(const SlideStylePropertyChangeSetArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fill_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KNSOS::SpecTransitionAttributesArchive& slide_transition(const SlideStylePropertyChangeSetArchive* msg);
  static void set_has_slide_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slide_transition_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSDSOS::SpecFillArchive&
SlideStylePropertyChangeSetArchive::_Internal::fill(const SlideStylePropertyChangeSetArchive* msg) {
  return *msg->fill_;
}
const ::KNSOS::SpecTransitionAttributesArchive&
SlideStylePropertyChangeSetArchive::_Internal::slide_transition(const SlideStylePropertyChangeSetArchive* msg) {
  return *msg->slide_transition_;
}
void SlideStylePropertyChangeSetArchive::clear_fill() {
  if (fill_ != nullptr) fill_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SlideStylePropertyChangeSetArchive::SlideStylePropertyChangeSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KNSOS.SlideStylePropertyChangeSetArchive)
}
SlideStylePropertyChangeSetArchive::SlideStylePropertyChangeSetArchive(const SlideStylePropertyChangeSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    fill_ = new ::TSDSOS::SpecFillArchive(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  if (from._internal_has_slide_transition()) {
    slide_transition_ = new ::KNSOS::SpecTransitionAttributesArchive(*from.slide_transition_);
  } else {
    slide_transition_ = nullptr;
  }
  ::memcpy(&fill_undefined_, &from.fill_undefined_,
    static_cast<size_t>(reinterpret_cast<char*>(&slide_transition_undefined_) -
    reinterpret_cast<char*>(&fill_undefined_)) + sizeof(slide_transition_undefined_));
  // @@protoc_insertion_point(copy_constructor:KNSOS.SlideStylePropertyChangeSetArchive)
}

void SlideStylePropertyChangeSetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slide_transition_undefined_) -
    reinterpret_cast<char*>(&fill_)) + sizeof(slide_transition_undefined_));
}

SlideStylePropertyChangeSetArchive::~SlideStylePropertyChangeSetArchive() {
  // @@protoc_insertion_point(destructor:KNSOS.SlideStylePropertyChangeSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SlideStylePropertyChangeSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fill_;
  if (this != internal_default_instance()) delete slide_transition_;
}

void SlideStylePropertyChangeSetArchive::ArenaDtor(void* object) {
  SlideStylePropertyChangeSetArchive* _this = reinterpret_cast< SlideStylePropertyChangeSetArchive* >(object);
  (void)_this;
}
void SlideStylePropertyChangeSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideStylePropertyChangeSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideStylePropertyChangeSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KNSOS.SlideStylePropertyChangeSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fill_ != nullptr);
      fill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_transition_ != nullptr);
      slide_transition_->Clear();
    }
  }
  ::memset(&fill_undefined_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slide_transition_undefined_) -
      reinterpret_cast<char*>(&fill_undefined_)) + sizeof(slide_transition_undefined_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideStylePropertyChangeSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSDSOS.SpecFillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fill_undefined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fill_undefined(&has_bits);
          fill_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KNSOS.SpecTransitionAttributesArchive slide_transition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_transition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool slide_transition_undefined = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_slide_transition_undefined(&has_bits);
          slide_transition_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideStylePropertyChangeSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KNSOS.SlideStylePropertyChangeSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSDSOS.SpecFillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fill(this), target, stream);
  }

  // optional bool fill_undefined = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_fill_undefined(), target);
  }

  // optional .KNSOS.SpecTransitionAttributesArchive slide_transition = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::slide_transition(this), target, stream);
  }

  // optional bool slide_transition_undefined = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_slide_transition_undefined(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KNSOS.SlideStylePropertyChangeSetArchive)
  return target;
}

size_t SlideStylePropertyChangeSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KNSOS.SlideStylePropertyChangeSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSDSOS.SpecFillArchive fill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fill_);
    }

    // optional .KNSOS.SpecTransitionAttributesArchive slide_transition = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slide_transition_);
    }

    // optional bool fill_undefined = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool slide_transition_undefined = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlideStylePropertyChangeSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KNSOS.SlideStylePropertyChangeSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SlideStylePropertyChangeSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlideStylePropertyChangeSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KNSOS.SlideStylePropertyChangeSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KNSOS.SlideStylePropertyChangeSetArchive)
    MergeFrom(*source);
  }
}

void SlideStylePropertyChangeSetArchive::MergeFrom(const SlideStylePropertyChangeSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KNSOS.SlideStylePropertyChangeSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fill()->::TSDSOS::SpecFillArchive::MergeFrom(from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_transition()->::KNSOS::SpecTransitionAttributesArchive::MergeFrom(from._internal_slide_transition());
    }
    if (cached_has_bits & 0x00000004u) {
      fill_undefined_ = from.fill_undefined_;
    }
    if (cached_has_bits & 0x00000008u) {
      slide_transition_undefined_ = from.slide_transition_undefined_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SlideStylePropertyChangeSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KNSOS.SlideStylePropertyChangeSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideStylePropertyChangeSetArchive::CopyFrom(const SlideStylePropertyChangeSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KNSOS.SlideStylePropertyChangeSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideStylePropertyChangeSetArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!fill_->IsInitialized()) return false;
  }
  if (_internal_has_slide_transition()) {
    if (!slide_transition_->IsInitialized()) return false;
  }
  return true;
}

void SlideStylePropertyChangeSetArchive::InternalSwap(SlideStylePropertyChangeSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideStylePropertyChangeSetArchive, slide_transition_undefined_)
      + sizeof(SlideStylePropertyChangeSetArchive::slide_transition_undefined_)
      - PROTOBUF_FIELD_OFFSET(SlideStylePropertyChangeSetArchive, fill_)>(
          reinterpret_cast<char*>(&fill_),
          reinterpret_cast<char*>(&other->fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideStylePropertyChangeSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNArchives_2esos_2eproto_getter, &descriptor_table_KNArchives_2esos_2eproto_once,
      file_level_metadata_KNArchives_2esos_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KNSOS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KNSOS::SpecSetTransitionAttributesArchive* Arena::CreateMaybeMessage< ::KNSOS::SpecSetTransitionAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KNSOS::SpecSetTransitionAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KNSOS::SpecTransitionAttributesArchive* Arena::CreateMaybeMessage< ::KNSOS::SpecTransitionAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KNSOS::SpecTransitionAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KNSOS::SlideStylePropertyChangeSetArchive* Arena::CreateMaybeMessage< ::KNSOS::SlideStylePropertyChangeSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KNSOS::SlideStylePropertyChangeSetArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
