// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KNArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KNArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSCHArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KNArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KNArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[51]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KNArchives_2eproto;
namespace KN {
class ActionGhostSelectionArchive;
struct ActionGhostSelectionArchiveDefaultTypeInternal;
extern ActionGhostSelectionArchiveDefaultTypeInternal _ActionGhostSelectionArchive_default_instance_;
class AnimationAttributesArchive;
struct AnimationAttributesArchiveDefaultTypeInternal;
extern AnimationAttributesArchiveDefaultTypeInternal _AnimationAttributesArchive_default_instance_;
class BuildArchive;
struct BuildArchiveDefaultTypeInternal;
extern BuildArchiveDefaultTypeInternal _BuildArchive_default_instance_;
class BuildAttributeTupleArchive;
struct BuildAttributeTupleArchiveDefaultTypeInternal;
extern BuildAttributeTupleArchiveDefaultTypeInternal _BuildAttributeTupleArchive_default_instance_;
class BuildAttributeValueArchive;
struct BuildAttributeValueArchiveDefaultTypeInternal;
extern BuildAttributeValueArchiveDefaultTypeInternal _BuildAttributeValueArchive_default_instance_;
class BuildAttributesArchive;
struct BuildAttributesArchiveDefaultTypeInternal;
extern BuildAttributesArchiveDefaultTypeInternal _BuildAttributesArchive_default_instance_;
class BuildChunkArchive;
struct BuildChunkArchiveDefaultTypeInternal;
extern BuildChunkArchiveDefaultTypeInternal _BuildChunkArchive_default_instance_;
class BuildChunkIdentifierArchive;
struct BuildChunkIdentifierArchiveDefaultTypeInternal;
extern BuildChunkIdentifierArchiveDefaultTypeInternal _BuildChunkIdentifierArchive_default_instance_;
class CanvasSelectionArchive;
struct CanvasSelectionArchiveDefaultTypeInternal;
extern CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
class ClassicStylesheetRecordArchive;
struct ClassicStylesheetRecordArchiveDefaultTypeInternal;
extern ClassicStylesheetRecordArchiveDefaultTypeInternal _ClassicStylesheetRecordArchive_default_instance_;
class ClassicThemeRecordArchive;
struct ClassicThemeRecordArchiveDefaultTypeInternal;
extern ClassicThemeRecordArchiveDefaultTypeInternal _ClassicThemeRecordArchive_default_instance_;
class DesktopUILayoutArchive;
struct DesktopUILayoutArchiveDefaultTypeInternal;
extern DesktopUILayoutArchiveDefaultTypeInternal _DesktopUILayoutArchive_default_instance_;
class DocumentArchive;
struct DocumentArchiveDefaultTypeInternal;
extern DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
class IOSRestorableViewStateRootArchive;
struct IOSRestorableViewStateRootArchiveDefaultTypeInternal;
extern IOSRestorableViewStateRootArchiveDefaultTypeInternal _IOSRestorableViewStateRootArchive_default_instance_;
class IOSSavedPlaybackStateArchive;
struct IOSSavedPlaybackStateArchiveDefaultTypeInternal;
extern IOSSavedPlaybackStateArchiveDefaultTypeInternal _IOSSavedPlaybackStateArchive_default_instance_;
class MixedIdOperationArgs;
struct MixedIdOperationArgsDefaultTypeInternal;
extern MixedIdOperationArgsDefaultTypeInternal _MixedIdOperationArgs_default_instance_;
class MovieSegmentArchive;
struct MovieSegmentArchiveDefaultTypeInternal;
extern MovieSegmentArchiveDefaultTypeInternal _MovieSegmentArchive_default_instance_;
class NoteArchive;
struct NoteArchiveDefaultTypeInternal;
extern NoteArchiveDefaultTypeInternal _NoteArchive_default_instance_;
class PasteboardNativeStorageArchive;
struct PasteboardNativeStorageArchiveDefaultTypeInternal;
extern PasteboardNativeStorageArchiveDefaultTypeInternal _PasteboardNativeStorageArchive_default_instance_;
class PlaceholderArchive;
struct PlaceholderArchiveDefaultTypeInternal;
extern PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
class PresenterNotesSelectionArchive;
struct PresenterNotesSelectionArchiveDefaultTypeInternal;
extern PresenterNotesSelectionArchiveDefaultTypeInternal _PresenterNotesSelectionArchive_default_instance_;
class PrototypeForUndoTemplateChangeArchive;
struct PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal;
extern PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal _PrototypeForUndoTemplateChangeArchive_default_instance_;
class RecordingArchive;
struct RecordingArchiveDefaultTypeInternal;
extern RecordingArchiveDefaultTypeInternal _RecordingArchive_default_instance_;
class RecordingCorrectionHistory;
struct RecordingCorrectionHistoryDefaultTypeInternal;
extern RecordingCorrectionHistoryDefaultTypeInternal _RecordingCorrectionHistory_default_instance_;
class RecordingEventArchive;
struct RecordingEventArchiveDefaultTypeInternal;
extern RecordingEventArchiveDefaultTypeInternal _RecordingEventArchive_default_instance_;
class RecordingEventTrackArchive;
struct RecordingEventTrackArchiveDefaultTypeInternal;
extern RecordingEventTrackArchiveDefaultTypeInternal _RecordingEventTrackArchive_default_instance_;
class RecordingLaserEventArchive;
struct RecordingLaserEventArchiveDefaultTypeInternal;
extern RecordingLaserEventArchiveDefaultTypeInternal _RecordingLaserEventArchive_default_instance_;
class RecordingMovieEventArchive;
struct RecordingMovieEventArchiveDefaultTypeInternal;
extern RecordingMovieEventArchiveDefaultTypeInternal _RecordingMovieEventArchive_default_instance_;
class RecordingMovieTrackArchive;
struct RecordingMovieTrackArchiveDefaultTypeInternal;
extern RecordingMovieTrackArchiveDefaultTypeInternal _RecordingMovieTrackArchive_default_instance_;
class RecordingNavigationEventArchive;
struct RecordingNavigationEventArchiveDefaultTypeInternal;
extern RecordingNavigationEventArchiveDefaultTypeInternal _RecordingNavigationEventArchive_default_instance_;
class RecordingPauseEventArchive;
struct RecordingPauseEventArchiveDefaultTypeInternal;
extern RecordingPauseEventArchiveDefaultTypeInternal _RecordingPauseEventArchive_default_instance_;
class RecordingSyncState;
struct RecordingSyncStateDefaultTypeInternal;
extern RecordingSyncStateDefaultTypeInternal _RecordingSyncState_default_instance_;
class ShowArchive;
struct ShowArchiveDefaultTypeInternal;
extern ShowArchiveDefaultTypeInternal _ShowArchive_default_instance_;
class SlideArchive;
struct SlideArchiveDefaultTypeInternal;
extern SlideArchiveDefaultTypeInternal _SlideArchive_default_instance_;
class SlideArchive_InstructionalTextMap;
struct SlideArchive_InstructionalTextMapDefaultTypeInternal;
extern SlideArchive_InstructionalTextMapDefaultTypeInternal _SlideArchive_InstructionalTextMap_default_instance_;
class SlideArchive_InstructionalTextMap_InstructionalTextMapEntry;
struct SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal;
extern SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal _SlideArchive_InstructionalTextMap_InstructionalTextMapEntry_default_instance_;
class SlideArchive_SageTagMapEntry;
struct SlideArchive_SageTagMapEntryDefaultTypeInternal;
extern SlideArchive_SageTagMapEntryDefaultTypeInternal _SlideArchive_SageTagMapEntry_default_instance_;
class SlideCollectionSelectionArchive;
struct SlideCollectionSelectionArchiveDefaultTypeInternal;
extern SlideCollectionSelectionArchiveDefaultTypeInternal _SlideCollectionSelectionArchive_default_instance_;
class SlideCollectionSelectionArchive_OutlineSelection;
struct SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal;
extern SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal _SlideCollectionSelectionArchive_OutlineSelection_default_instance_;
class SlideNodeArchive;
struct SlideNodeArchiveDefaultTypeInternal;
extern SlideNodeArchiveDefaultTypeInternal _SlideNodeArchive_default_instance_;
class SlideNodeArchive_SlideSpecificHyperlinkMapEntry;
struct SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal;
extern SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal _SlideNodeArchive_SlideSpecificHyperlinkMapEntry_default_instance_;
class SlideNumberAttachmentArchive;
struct SlideNumberAttachmentArchiveDefaultTypeInternal;
extern SlideNumberAttachmentArchiveDefaultTypeInternal _SlideNumberAttachmentArchive_default_instance_;
class SlideStyleArchive;
struct SlideStyleArchiveDefaultTypeInternal;
extern SlideStyleArchiveDefaultTypeInternal _SlideStyleArchive_default_instance_;
class SlideStylePropertiesArchive;
struct SlideStylePropertiesArchiveDefaultTypeInternal;
extern SlideStylePropertiesArchiveDefaultTypeInternal _SlideStylePropertiesArchive_default_instance_;
class SlideTreeArchive;
struct SlideTreeArchiveDefaultTypeInternal;
extern SlideTreeArchiveDefaultTypeInternal _SlideTreeArchive_default_instance_;
class Soundtrack;
struct SoundtrackDefaultTypeInternal;
extern SoundtrackDefaultTypeInternal _Soundtrack_default_instance_;
class ThemeArchive;
struct ThemeArchiveDefaultTypeInternal;
extern ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
class ThemeCustomTimingCurveArchive;
struct ThemeCustomTimingCurveArchiveDefaultTypeInternal;
extern ThemeCustomTimingCurveArchiveDefaultTypeInternal _ThemeCustomTimingCurveArchive_default_instance_;
class TransitionArchive;
struct TransitionArchiveDefaultTypeInternal;
extern TransitionArchiveDefaultTypeInternal _TransitionArchive_default_instance_;
class TransitionAttributesArchive;
struct TransitionAttributesArchiveDefaultTypeInternal;
extern TransitionAttributesArchiveDefaultTypeInternal _TransitionAttributesArchive_default_instance_;
class UIStateArchive;
struct UIStateArchiveDefaultTypeInternal;
extern UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> ::KN::ActionGhostSelectionArchive* Arena::CreateMaybeMessage<::KN::ActionGhostSelectionArchive>(Arena*);
template<> ::KN::AnimationAttributesArchive* Arena::CreateMaybeMessage<::KN::AnimationAttributesArchive>(Arena*);
template<> ::KN::BuildArchive* Arena::CreateMaybeMessage<::KN::BuildArchive>(Arena*);
template<> ::KN::BuildAttributeTupleArchive* Arena::CreateMaybeMessage<::KN::BuildAttributeTupleArchive>(Arena*);
template<> ::KN::BuildAttributeValueArchive* Arena::CreateMaybeMessage<::KN::BuildAttributeValueArchive>(Arena*);
template<> ::KN::BuildAttributesArchive* Arena::CreateMaybeMessage<::KN::BuildAttributesArchive>(Arena*);
template<> ::KN::BuildChunkArchive* Arena::CreateMaybeMessage<::KN::BuildChunkArchive>(Arena*);
template<> ::KN::BuildChunkIdentifierArchive* Arena::CreateMaybeMessage<::KN::BuildChunkIdentifierArchive>(Arena*);
template<> ::KN::CanvasSelectionArchive* Arena::CreateMaybeMessage<::KN::CanvasSelectionArchive>(Arena*);
template<> ::KN::ClassicStylesheetRecordArchive* Arena::CreateMaybeMessage<::KN::ClassicStylesheetRecordArchive>(Arena*);
template<> ::KN::ClassicThemeRecordArchive* Arena::CreateMaybeMessage<::KN::ClassicThemeRecordArchive>(Arena*);
template<> ::KN::DesktopUILayoutArchive* Arena::CreateMaybeMessage<::KN::DesktopUILayoutArchive>(Arena*);
template<> ::KN::DocumentArchive* Arena::CreateMaybeMessage<::KN::DocumentArchive>(Arena*);
template<> ::KN::IOSRestorableViewStateRootArchive* Arena::CreateMaybeMessage<::KN::IOSRestorableViewStateRootArchive>(Arena*);
template<> ::KN::IOSSavedPlaybackStateArchive* Arena::CreateMaybeMessage<::KN::IOSSavedPlaybackStateArchive>(Arena*);
template<> ::KN::MixedIdOperationArgs* Arena::CreateMaybeMessage<::KN::MixedIdOperationArgs>(Arena*);
template<> ::KN::MovieSegmentArchive* Arena::CreateMaybeMessage<::KN::MovieSegmentArchive>(Arena*);
template<> ::KN::NoteArchive* Arena::CreateMaybeMessage<::KN::NoteArchive>(Arena*);
template<> ::KN::PasteboardNativeStorageArchive* Arena::CreateMaybeMessage<::KN::PasteboardNativeStorageArchive>(Arena*);
template<> ::KN::PlaceholderArchive* Arena::CreateMaybeMessage<::KN::PlaceholderArchive>(Arena*);
template<> ::KN::PresenterNotesSelectionArchive* Arena::CreateMaybeMessage<::KN::PresenterNotesSelectionArchive>(Arena*);
template<> ::KN::PrototypeForUndoTemplateChangeArchive* Arena::CreateMaybeMessage<::KN::PrototypeForUndoTemplateChangeArchive>(Arena*);
template<> ::KN::RecordingArchive* Arena::CreateMaybeMessage<::KN::RecordingArchive>(Arena*);
template<> ::KN::RecordingCorrectionHistory* Arena::CreateMaybeMessage<::KN::RecordingCorrectionHistory>(Arena*);
template<> ::KN::RecordingEventArchive* Arena::CreateMaybeMessage<::KN::RecordingEventArchive>(Arena*);
template<> ::KN::RecordingEventTrackArchive* Arena::CreateMaybeMessage<::KN::RecordingEventTrackArchive>(Arena*);
template<> ::KN::RecordingLaserEventArchive* Arena::CreateMaybeMessage<::KN::RecordingLaserEventArchive>(Arena*);
template<> ::KN::RecordingMovieEventArchive* Arena::CreateMaybeMessage<::KN::RecordingMovieEventArchive>(Arena*);
template<> ::KN::RecordingMovieTrackArchive* Arena::CreateMaybeMessage<::KN::RecordingMovieTrackArchive>(Arena*);
template<> ::KN::RecordingNavigationEventArchive* Arena::CreateMaybeMessage<::KN::RecordingNavigationEventArchive>(Arena*);
template<> ::KN::RecordingPauseEventArchive* Arena::CreateMaybeMessage<::KN::RecordingPauseEventArchive>(Arena*);
template<> ::KN::RecordingSyncState* Arena::CreateMaybeMessage<::KN::RecordingSyncState>(Arena*);
template<> ::KN::ShowArchive* Arena::CreateMaybeMessage<::KN::ShowArchive>(Arena*);
template<> ::KN::SlideArchive* Arena::CreateMaybeMessage<::KN::SlideArchive>(Arena*);
template<> ::KN::SlideArchive_InstructionalTextMap* Arena::CreateMaybeMessage<::KN::SlideArchive_InstructionalTextMap>(Arena*);
template<> ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* Arena::CreateMaybeMessage<::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry>(Arena*);
template<> ::KN::SlideArchive_SageTagMapEntry* Arena::CreateMaybeMessage<::KN::SlideArchive_SageTagMapEntry>(Arena*);
template<> ::KN::SlideCollectionSelectionArchive* Arena::CreateMaybeMessage<::KN::SlideCollectionSelectionArchive>(Arena*);
template<> ::KN::SlideCollectionSelectionArchive_OutlineSelection* Arena::CreateMaybeMessage<::KN::SlideCollectionSelectionArchive_OutlineSelection>(Arena*);
template<> ::KN::SlideNodeArchive* Arena::CreateMaybeMessage<::KN::SlideNodeArchive>(Arena*);
template<> ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry* Arena::CreateMaybeMessage<::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry>(Arena*);
template<> ::KN::SlideNumberAttachmentArchive* Arena::CreateMaybeMessage<::KN::SlideNumberAttachmentArchive>(Arena*);
template<> ::KN::SlideStyleArchive* Arena::CreateMaybeMessage<::KN::SlideStyleArchive>(Arena*);
template<> ::KN::SlideStylePropertiesArchive* Arena::CreateMaybeMessage<::KN::SlideStylePropertiesArchive>(Arena*);
template<> ::KN::SlideTreeArchive* Arena::CreateMaybeMessage<::KN::SlideTreeArchive>(Arena*);
template<> ::KN::Soundtrack* Arena::CreateMaybeMessage<::KN::Soundtrack>(Arena*);
template<> ::KN::ThemeArchive* Arena::CreateMaybeMessage<::KN::ThemeArchive>(Arena*);
template<> ::KN::ThemeCustomTimingCurveArchive* Arena::CreateMaybeMessage<::KN::ThemeCustomTimingCurveArchive>(Arena*);
template<> ::KN::TransitionArchive* Arena::CreateMaybeMessage<::KN::TransitionArchive>(Arena*);
template<> ::KN::TransitionAttributesArchive* Arena::CreateMaybeMessage<::KN::TransitionAttributesArchive>(Arena*);
template<> ::KN::UIStateArchive* Arena::CreateMaybeMessage<::KN::UIStateArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KN {

enum TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType : int {
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeLinear = 1,
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseIn = 2,
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseOut = 3,
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseInEaseOut = 4,
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeCustom = 5
};
bool TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(int value);
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MIN = TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeLinear;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MAX = TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeCustom;
constexpr int TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_ARRAYSIZE = TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor();
template<typename T>
inline const std::string& TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor(), enum_t_value);
}
inline bool TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType>(
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor(), name, value);
}
enum TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType : int {
  TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByObject = 1,
  TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByWord = 2,
  TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByCharacter = 3,
  TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByLine = 4
};
bool TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(int value);
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MIN = TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByObject;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MAX = TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByLine;
constexpr int TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_ARRAYSIZE = TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor();
template<typename T>
inline const std::string& TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor(), enum_t_value);
}
inline bool TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType>(
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor(), name, value);
}
enum BuildAttributeValueArchive_BuildAttributeValueType : int {
  BuildAttributeValueArchive_BuildAttributeValueType_k_integer = 0,
  BuildAttributeValueArchive_BuildAttributeValueType_k_double = 2,
  BuildAttributeValueArchive_BuildAttributeValueType_k_bool = 3,
  BuildAttributeValueArchive_BuildAttributeValueType_k_string = 4,
  BuildAttributeValueArchive_BuildAttributeValueType_k_path_source = 5,
  BuildAttributeValueArchive_BuildAttributeValueType_k_color = 6
};
bool BuildAttributeValueArchive_BuildAttributeValueType_IsValid(int value);
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive_BuildAttributeValueType_BuildAttributeValueType_MIN = BuildAttributeValueArchive_BuildAttributeValueType_k_integer;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive_BuildAttributeValueType_BuildAttributeValueType_MAX = BuildAttributeValueArchive_BuildAttributeValueType_k_color;
constexpr int BuildAttributeValueArchive_BuildAttributeValueType_BuildAttributeValueType_ARRAYSIZE = BuildAttributeValueArchive_BuildAttributeValueType_BuildAttributeValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributeValueArchive_BuildAttributeValueType_descriptor();
template<typename T>
inline const std::string& BuildAttributeValueArchive_BuildAttributeValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributeValueArchive_BuildAttributeValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributeValueArchive_BuildAttributeValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributeValueArchive_BuildAttributeValueType_descriptor(), enum_t_value);
}
inline bool BuildAttributeValueArchive_BuildAttributeValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributeValueArchive_BuildAttributeValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributeValueArchive_BuildAttributeValueType>(
    BuildAttributeValueArchive_BuildAttributeValueType_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesAcceleration : int {
  BuildAttributesArchive_BuildAttributesAcceleration_kNone = 0,
  BuildAttributesArchive_BuildAttributesAcceleration_kEaseIn = 1,
  BuildAttributesArchive_BuildAttributesAcceleration_kEaseOut = 2,
  BuildAttributesArchive_BuildAttributesAcceleration_kEaseBoth = 3,
  BuildAttributesArchive_BuildAttributesAcceleration_kCustom = 4
};
bool BuildAttributesArchive_BuildAttributesAcceleration_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MIN = BuildAttributesArchive_BuildAttributesAcceleration_kNone;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MAX = BuildAttributesArchive_BuildAttributesAcceleration_kCustom;
constexpr int BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_ARRAYSIZE = BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesAcceleration_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesAcceleration_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesAcceleration>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesAcceleration_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesAcceleration_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesAcceleration_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesAcceleration* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesAcceleration>(
    BuildAttributesArchive_BuildAttributesAcceleration_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesRotationDirection : int {
  BuildAttributesArchive_BuildAttributesRotationDirection_kClockwise = 31,
  BuildAttributesArchive_BuildAttributesRotationDirection_kCounterclockwise = 32
};
bool BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MIN = BuildAttributesArchive_BuildAttributesRotationDirection_kClockwise;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MAX = BuildAttributesArchive_BuildAttributesRotationDirection_kCounterclockwise;
constexpr int BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_ARRAYSIZE = BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesRotationDirection_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesRotationDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesRotationDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesRotationDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesRotationDirection_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesRotationDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesRotationDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesRotationDirection>(
    BuildAttributesArchive_BuildAttributesRotationDirection_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesCurveStyle : int {
  BuildAttributesArchive_BuildAttributesCurveStyle_kStraight = 0,
  BuildAttributesArchive_BuildAttributesCurveStyle_kCurved = 1
};
bool BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MIN = BuildAttributesArchive_BuildAttributesCurveStyle_kStraight;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MAX = BuildAttributesArchive_BuildAttributesCurveStyle_kCurved;
constexpr int BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_ARRAYSIZE = BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesCurveStyle_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesCurveStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesCurveStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesCurveStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesCurveStyle_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesCurveStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesCurveStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesCurveStyle>(
    BuildAttributesArchive_BuildAttributesCurveStyle_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesTextDelivery : int {
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryUndefined = 0,
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByObject = 1,
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByWord = 2,
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByCharacter = 3,
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByLine = 4
};
bool BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MIN = BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryUndefined;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MAX = BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByLine;
constexpr int BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_ARRAYSIZE = BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesTextDelivery_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesTextDelivery_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesTextDelivery>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesTextDelivery_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesTextDelivery_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesTextDelivery_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesTextDelivery* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesTextDelivery>(
    BuildAttributesArchive_BuildAttributesTextDelivery_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesDeliveryOption : int {
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionUndefined = 0,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionForward = 1,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionBackward = 2,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionFromCenter = 3,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionFromEdges = 4,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionRandom = 5
};
bool BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MIN = BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionUndefined;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MAX = BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionRandom;
constexpr int BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_ARRAYSIZE = BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesDeliveryOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesDeliveryOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesDeliveryOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesDeliveryOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesDeliveryOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesDeliveryOption>(
    BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor(), name, value);
}
enum BuildAttributesArchive_ActionBuildAttributesJiggleIntensity : int {
  BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensitySmall = 0,
  BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityMedium = 1,
  BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityLarge = 2
};
bool BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(int value);
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MIN = BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensitySmall;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MAX = BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityLarge;
constexpr int BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_ARRAYSIZE = BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_ActionBuildAttributesJiggleIntensity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_ActionBuildAttributesJiggleIntensity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_ActionBuildAttributesJiggleIntensity>(
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor(), name, value);
}
enum PlaceholderArchive_Kind : int {
  PlaceholderArchive_Kind_kKindPlaceholder = 0,
  PlaceholderArchive_Kind_kKindSlideNumberPlaceholder = 1,
  PlaceholderArchive_Kind_kKindTitlePlaceholder = 2,
  PlaceholderArchive_Kind_kKindBodyPlaceholder = 3,
  PlaceholderArchive_Kind_kKindObjectPlaceholder = 4
};
bool PlaceholderArchive_Kind_IsValid(int value);
constexpr PlaceholderArchive_Kind PlaceholderArchive_Kind_Kind_MIN = PlaceholderArchive_Kind_kKindPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive_Kind_Kind_MAX = PlaceholderArchive_Kind_kKindObjectPlaceholder;
constexpr int PlaceholderArchive_Kind_Kind_ARRAYSIZE = PlaceholderArchive_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceholderArchive_Kind_descriptor();
template<typename T>
inline const std::string& PlaceholderArchive_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlaceholderArchive_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlaceholderArchive_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlaceholderArchive_Kind_descriptor(), enum_t_value);
}
inline bool PlaceholderArchive_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlaceholderArchive_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlaceholderArchive_Kind>(
    PlaceholderArchive_Kind_descriptor(), name, value);
}
enum DesktopUILayoutArchive_SidebarViewMode : int {
  DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeNavigator = 0,
  DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeOutline = 1
};
bool DesktopUILayoutArchive_SidebarViewMode_IsValid(int value);
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MIN = DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeNavigator;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MAX = DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeOutline;
constexpr int DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_ARRAYSIZE = DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_SidebarViewMode_descriptor();
template<typename T>
inline const std::string& DesktopUILayoutArchive_SidebarViewMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DesktopUILayoutArchive_SidebarViewMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DesktopUILayoutArchive_SidebarViewMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DesktopUILayoutArchive_SidebarViewMode_descriptor(), enum_t_value);
}
inline bool DesktopUILayoutArchive_SidebarViewMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DesktopUILayoutArchive_SidebarViewMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DesktopUILayoutArchive_SidebarViewMode>(
    DesktopUILayoutArchive_SidebarViewMode_descriptor(), name, value);
}
enum DesktopUILayoutArchive_InspectorPaneViewMode : int {
  DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat = 0,
  DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeAnimate = 1,
  DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeSetup = 2
};
bool DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(int value);
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MIN = DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX = DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeSetup;
constexpr int DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_ARRAYSIZE = DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_InspectorPaneViewMode_descriptor();
template<typename T>
inline const std::string& DesktopUILayoutArchive_InspectorPaneViewMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DesktopUILayoutArchive_InspectorPaneViewMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DesktopUILayoutArchive_InspectorPaneViewMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DesktopUILayoutArchive_InspectorPaneViewMode_descriptor(), enum_t_value);
}
inline bool DesktopUILayoutArchive_InspectorPaneViewMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DesktopUILayoutArchive_InspectorPaneViewMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DesktopUILayoutArchive_InspectorPaneViewMode>(
    DesktopUILayoutArchive_InspectorPaneViewMode_descriptor(), name, value);
}
enum IOSSavedPlaybackStateArchive_PresentationType : int {
  IOSSavedPlaybackStateArchive_PresentationType_Manual = 1,
  IOSSavedPlaybackStateArchive_PresentationType_Record = 2,
  IOSSavedPlaybackStateArchive_PresentationType_PlayRecording = 3,
  IOSSavedPlaybackStateArchive_PresentationType_Rehearse = 4,
  IOSSavedPlaybackStateArchive_PresentationType_Showcast = 5
};
bool IOSSavedPlaybackStateArchive_PresentationType_IsValid(int value);
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive_PresentationType_PresentationType_MIN = IOSSavedPlaybackStateArchive_PresentationType_Manual;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive_PresentationType_PresentationType_MAX = IOSSavedPlaybackStateArchive_PresentationType_Showcast;
constexpr int IOSSavedPlaybackStateArchive_PresentationType_PresentationType_ARRAYSIZE = IOSSavedPlaybackStateArchive_PresentationType_PresentationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOSSavedPlaybackStateArchive_PresentationType_descriptor();
template<typename T>
inline const std::string& IOSSavedPlaybackStateArchive_PresentationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IOSSavedPlaybackStateArchive_PresentationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IOSSavedPlaybackStateArchive_PresentationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IOSSavedPlaybackStateArchive_PresentationType_descriptor(), enum_t_value);
}
inline bool IOSSavedPlaybackStateArchive_PresentationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IOSSavedPlaybackStateArchive_PresentationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IOSSavedPlaybackStateArchive_PresentationType>(
    IOSSavedPlaybackStateArchive_PresentationType_descriptor(), name, value);
}
enum ShowArchive_KNShowMode : int {
  ShowArchive_KNShowMode_kKNShowModeNormal = 0,
  ShowArchive_KNShowMode_kKNShowModeAutoPlay = 1,
  ShowArchive_KNShowMode_kKNShowModeHyperlinksOnly = 2
};
bool ShowArchive_KNShowMode_IsValid(int value);
constexpr ShowArchive_KNShowMode ShowArchive_KNShowMode_KNShowMode_MIN = ShowArchive_KNShowMode_kKNShowModeNormal;
constexpr ShowArchive_KNShowMode ShowArchive_KNShowMode_KNShowMode_MAX = ShowArchive_KNShowMode_kKNShowModeHyperlinksOnly;
constexpr int ShowArchive_KNShowMode_KNShowMode_ARRAYSIZE = ShowArchive_KNShowMode_KNShowMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShowArchive_KNShowMode_descriptor();
template<typename T>
inline const std::string& ShowArchive_KNShowMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShowArchive_KNShowMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShowArchive_KNShowMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShowArchive_KNShowMode_descriptor(), enum_t_value);
}
inline bool ShowArchive_KNShowMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShowArchive_KNShowMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShowArchive_KNShowMode>(
    ShowArchive_KNShowMode_descriptor(), name, value);
}
enum RecordingArchive_RecordingSyncStateEnum : int {
  RecordingArchive_RecordingSyncStateEnum_kRecordingSyncStateInSyncWithShow = 0,
  RecordingArchive_RecordingSyncStateEnum_kRecordingSyncStateOutOfSyncWithShow = 1
};
bool RecordingArchive_RecordingSyncStateEnum_IsValid(int value);
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive_RecordingSyncStateEnum_RecordingSyncStateEnum_MIN = RecordingArchive_RecordingSyncStateEnum_kRecordingSyncStateInSyncWithShow;
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive_RecordingSyncStateEnum_RecordingSyncStateEnum_MAX = RecordingArchive_RecordingSyncStateEnum_kRecordingSyncStateOutOfSyncWithShow;
constexpr int RecordingArchive_RecordingSyncStateEnum_RecordingSyncStateEnum_ARRAYSIZE = RecordingArchive_RecordingSyncStateEnum_RecordingSyncStateEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingArchive_RecordingSyncStateEnum_descriptor();
template<typename T>
inline const std::string& RecordingArchive_RecordingSyncStateEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordingArchive_RecordingSyncStateEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordingArchive_RecordingSyncStateEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordingArchive_RecordingSyncStateEnum_descriptor(), enum_t_value);
}
inline bool RecordingArchive_RecordingSyncStateEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecordingArchive_RecordingSyncStateEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordingArchive_RecordingSyncStateEnum>(
    RecordingArchive_RecordingSyncStateEnum_descriptor(), name, value);
}
enum RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase : int {
  RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationNone = 0,
  RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationStart = 1,
  RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationEnd = 2
};
bool RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(int value);
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MIN = RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationNone;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MAX = RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationEnd;
constexpr int RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_ARRAYSIZE = RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor();
template<typename T>
inline const std::string& RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor(), enum_t_value);
}
inline bool RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase>(
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor(), name, value);
}
enum RecordingPauseEventArchive_RecordingPauseEventType : int {
  RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeResume = 0,
  RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypePause = 1,
  RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithBlack = 2,
  RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithWhite = 3
};
bool RecordingPauseEventArchive_RecordingPauseEventType_IsValid(int value);
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MIN = RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeResume;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MAX = RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithWhite;
constexpr int RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_ARRAYSIZE = RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingPauseEventArchive_RecordingPauseEventType_descriptor();
template<typename T>
inline const std::string& RecordingPauseEventArchive_RecordingPauseEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordingPauseEventArchive_RecordingPauseEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordingPauseEventArchive_RecordingPauseEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordingPauseEventArchive_RecordingPauseEventType_descriptor(), enum_t_value);
}
inline bool RecordingPauseEventArchive_RecordingPauseEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecordingPauseEventArchive_RecordingPauseEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordingPauseEventArchive_RecordingPauseEventType>(
    RecordingPauseEventArchive_RecordingPauseEventType_descriptor(), name, value);
}
enum RecordingMovieEventArchive_RecordingMovieEventType : int {
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventNone = 0,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventSeek = 1,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventSetRate = 2,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventStartPlayback = 3,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventStopPlayback = 4,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventBeginScrubbing = 5,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventEndScrubbing = 6
};
bool RecordingMovieEventArchive_RecordingMovieEventType_IsValid(int value);
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MIN = RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventNone;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MAX = RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventEndScrubbing;
constexpr int RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_ARRAYSIZE = RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingMovieEventArchive_RecordingMovieEventType_descriptor();
template<typename T>
inline const std::string& RecordingMovieEventArchive_RecordingMovieEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordingMovieEventArchive_RecordingMovieEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordingMovieEventArchive_RecordingMovieEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordingMovieEventArchive_RecordingMovieEventType_descriptor(), enum_t_value);
}
inline bool RecordingMovieEventArchive_RecordingMovieEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecordingMovieEventArchive_RecordingMovieEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordingMovieEventArchive_RecordingMovieEventType>(
    RecordingMovieEventArchive_RecordingMovieEventType_descriptor(), name, value);
}
enum Soundtrack_SoundtrackMode : int {
  Soundtrack_SoundtrackMode_kKNSoundtrackModePlayOnce = 0,
  Soundtrack_SoundtrackMode_kKNSoundtrackModeLoop = 1,
  Soundtrack_SoundtrackMode_kKNSoundtrackModeDoNotPlay = 2
};
bool Soundtrack_SoundtrackMode_IsValid(int value);
constexpr Soundtrack_SoundtrackMode Soundtrack_SoundtrackMode_SoundtrackMode_MIN = Soundtrack_SoundtrackMode_kKNSoundtrackModePlayOnce;
constexpr Soundtrack_SoundtrackMode Soundtrack_SoundtrackMode_SoundtrackMode_MAX = Soundtrack_SoundtrackMode_kKNSoundtrackModeDoNotPlay;
constexpr int Soundtrack_SoundtrackMode_SoundtrackMode_ARRAYSIZE = Soundtrack_SoundtrackMode_SoundtrackMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Soundtrack_SoundtrackMode_descriptor();
template<typename T>
inline const std::string& Soundtrack_SoundtrackMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Soundtrack_SoundtrackMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Soundtrack_SoundtrackMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Soundtrack_SoundtrackMode_descriptor(), enum_t_value);
}
inline bool Soundtrack_SoundtrackMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Soundtrack_SoundtrackMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Soundtrack_SoundtrackMode>(
    Soundtrack_SoundtrackMode_descriptor(), name, value);
}
enum MixedIdOperationArgs_ArgsListKind : int {
  MixedIdOperationArgs_ArgsListKind_Add = 0,
  MixedIdOperationArgs_ArgsListKind_Remove = 1,
  MixedIdOperationArgs_ArgsListKind_ShowPlaceholder = 2,
  MixedIdOperationArgs_ArgsListKind_HidePlaceholder = 3
};
bool MixedIdOperationArgs_ArgsListKind_IsValid(int value);
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs_ArgsListKind_ArgsListKind_MIN = MixedIdOperationArgs_ArgsListKind_Add;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs_ArgsListKind_ArgsListKind_MAX = MixedIdOperationArgs_ArgsListKind_HidePlaceholder;
constexpr int MixedIdOperationArgs_ArgsListKind_ArgsListKind_ARRAYSIZE = MixedIdOperationArgs_ArgsListKind_ArgsListKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MixedIdOperationArgs_ArgsListKind_descriptor();
template<typename T>
inline const std::string& MixedIdOperationArgs_ArgsListKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MixedIdOperationArgs_ArgsListKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MixedIdOperationArgs_ArgsListKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MixedIdOperationArgs_ArgsListKind_descriptor(), enum_t_value);
}
inline bool MixedIdOperationArgs_ArgsListKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MixedIdOperationArgs_ArgsListKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MixedIdOperationArgs_ArgsListKind>(
    MixedIdOperationArgs_ArgsListKind_descriptor(), name, value);
}
// ===================================================================

class AnimationAttributesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.AnimationAttributesArchive) */ {
 public:
  inline AnimationAttributesArchive() : AnimationAttributesArchive(nullptr) {}
  ~AnimationAttributesArchive() override;
  explicit constexpr AnimationAttributesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnimationAttributesArchive(const AnimationAttributesArchive& from);
  AnimationAttributesArchive(AnimationAttributesArchive&& from) noexcept
    : AnimationAttributesArchive() {
    *this = ::std::move(from);
  }

  inline AnimationAttributesArchive& operator=(const AnimationAttributesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationAttributesArchive& operator=(AnimationAttributesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationAttributesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnimationAttributesArchive* internal_default_instance() {
    return reinterpret_cast<const AnimationAttributesArchive*>(
               &_AnimationAttributesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnimationAttributesArchive& a, AnimationAttributesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationAttributesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationAttributesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationAttributesArchive* New() const final {
    return new AnimationAttributesArchive();
  }

  AnimationAttributesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationAttributesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnimationAttributesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnimationAttributesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationAttributesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.AnimationAttributesArchive";
  }
  protected:
  explicit AnimationAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationTypeFieldNumber = 1,
    kEffectFieldNumber = 2,
    kCustomEffectTimingCurveThemeName1FieldNumber = 13,
    kCustomEffectTimingCurveThemeName2FieldNumber = 14,
    kCustomEffectTimingCurveThemeName3FieldNumber = 15,
    kColorFieldNumber = 7,
    kCustomEffectTimingCurve1FieldNumber = 8,
    kCustomEffectTimingCurve2FieldNumber = 9,
    kCustomEffectTimingCurve3FieldNumber = 10,
    kDurationFieldNumber = 3,
    kDelayFieldNumber = 5,
    kDirectionFieldNumber = 4,
    kRandomNumberSeedFieldNumber = 11,
    kCustomDetailFieldNumber = 12,
    kIsAutomaticFieldNumber = 6,
    kWritingDirectionIsRtlFieldNumber = 16,
  };
  // optional string animation_type = 1;
  bool has_animation_type() const;
  private:
  bool _internal_has_animation_type() const;
  public:
  void clear_animation_type();
  const std::string& animation_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animation_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animation_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_animation_type();
  void set_allocated_animation_type(std::string* animation_type);
  private:
  const std::string& _internal_animation_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animation_type(const std::string& value);
  std::string* _internal_mutable_animation_type();
  public:

  // optional string effect = 2;
  bool has_effect() const;
  private:
  bool _internal_has_effect() const;
  public:
  void clear_effect();
  const std::string& effect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_effect(ArgT0&& arg0, ArgT... args);
  std::string* mutable_effect();
  PROTOBUF_MUST_USE_RESULT std::string* release_effect();
  void set_allocated_effect(std::string* effect);
  private:
  const std::string& _internal_effect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effect(const std::string& value);
  std::string* _internal_mutable_effect();
  public:

  // optional string custom_effect_timing_curve_theme_name_1 = 13;
  bool has_custom_effect_timing_curve_theme_name_1() const;
  private:
  bool _internal_has_custom_effect_timing_curve_theme_name_1() const;
  public:
  void clear_custom_effect_timing_curve_theme_name_1();
  const std::string& custom_effect_timing_curve_theme_name_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_effect_timing_curve_theme_name_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_effect_timing_curve_theme_name_1();
  PROTOBUF_MUST_USE_RESULT std::string* release_custom_effect_timing_curve_theme_name_1();
  void set_allocated_custom_effect_timing_curve_theme_name_1(std::string* custom_effect_timing_curve_theme_name_1);
  private:
  const std::string& _internal_custom_effect_timing_curve_theme_name_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_effect_timing_curve_theme_name_1(const std::string& value);
  std::string* _internal_mutable_custom_effect_timing_curve_theme_name_1();
  public:

  // optional string custom_effect_timing_curve_theme_name_2 = 14;
  bool has_custom_effect_timing_curve_theme_name_2() const;
  private:
  bool _internal_has_custom_effect_timing_curve_theme_name_2() const;
  public:
  void clear_custom_effect_timing_curve_theme_name_2();
  const std::string& custom_effect_timing_curve_theme_name_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_effect_timing_curve_theme_name_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_effect_timing_curve_theme_name_2();
  PROTOBUF_MUST_USE_RESULT std::string* release_custom_effect_timing_curve_theme_name_2();
  void set_allocated_custom_effect_timing_curve_theme_name_2(std::string* custom_effect_timing_curve_theme_name_2);
  private:
  const std::string& _internal_custom_effect_timing_curve_theme_name_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_effect_timing_curve_theme_name_2(const std::string& value);
  std::string* _internal_mutable_custom_effect_timing_curve_theme_name_2();
  public:

  // optional string custom_effect_timing_curve_theme_name_3 = 15;
  bool has_custom_effect_timing_curve_theme_name_3() const;
  private:
  bool _internal_has_custom_effect_timing_curve_theme_name_3() const;
  public:
  void clear_custom_effect_timing_curve_theme_name_3();
  const std::string& custom_effect_timing_curve_theme_name_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_effect_timing_curve_theme_name_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_effect_timing_curve_theme_name_3();
  PROTOBUF_MUST_USE_RESULT std::string* release_custom_effect_timing_curve_theme_name_3();
  void set_allocated_custom_effect_timing_curve_theme_name_3(std::string* custom_effect_timing_curve_theme_name_3);
  private:
  const std::string& _internal_custom_effect_timing_curve_theme_name_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_effect_timing_curve_theme_name_3(const std::string& value);
  std::string* _internal_mutable_custom_effect_timing_curve_theme_name_3();
  public:

  // optional .TSP.Color color = 7;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::TSP::Color& color() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Color* release_color();
  ::TSP::Color* mutable_color();
  void set_allocated_color(::TSP::Color* color);
  private:
  const ::TSP::Color& _internal_color() const;
  ::TSP::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::TSP::Color* color);
  ::TSP::Color* unsafe_arena_release_color();

  // optional .TSD.PathSourceArchive custom_effect_timing_curve_1 = 8;
  bool has_custom_effect_timing_curve_1() const;
  private:
  bool _internal_has_custom_effect_timing_curve_1() const;
  public:
  void clear_custom_effect_timing_curve_1();
  const ::TSD::PathSourceArchive& custom_effect_timing_curve_1() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::PathSourceArchive* release_custom_effect_timing_curve_1();
  ::TSD::PathSourceArchive* mutable_custom_effect_timing_curve_1();
  void set_allocated_custom_effect_timing_curve_1(::TSD::PathSourceArchive* custom_effect_timing_curve_1);
  private:
  const ::TSD::PathSourceArchive& _internal_custom_effect_timing_curve_1() const;
  ::TSD::PathSourceArchive* _internal_mutable_custom_effect_timing_curve_1();
  public:
  void unsafe_arena_set_allocated_custom_effect_timing_curve_1(
      ::TSD::PathSourceArchive* custom_effect_timing_curve_1);
  ::TSD::PathSourceArchive* unsafe_arena_release_custom_effect_timing_curve_1();

  // optional .TSD.PathSourceArchive custom_effect_timing_curve_2 = 9;
  bool has_custom_effect_timing_curve_2() const;
  private:
  bool _internal_has_custom_effect_timing_curve_2() const;
  public:
  void clear_custom_effect_timing_curve_2();
  const ::TSD::PathSourceArchive& custom_effect_timing_curve_2() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::PathSourceArchive* release_custom_effect_timing_curve_2();
  ::TSD::PathSourceArchive* mutable_custom_effect_timing_curve_2();
  void set_allocated_custom_effect_timing_curve_2(::TSD::PathSourceArchive* custom_effect_timing_curve_2);
  private:
  const ::TSD::PathSourceArchive& _internal_custom_effect_timing_curve_2() const;
  ::TSD::PathSourceArchive* _internal_mutable_custom_effect_timing_curve_2();
  public:
  void unsafe_arena_set_allocated_custom_effect_timing_curve_2(
      ::TSD::PathSourceArchive* custom_effect_timing_curve_2);
  ::TSD::PathSourceArchive* unsafe_arena_release_custom_effect_timing_curve_2();

  // optional .TSD.PathSourceArchive custom_effect_timing_curve_3 = 10;
  bool has_custom_effect_timing_curve_3() const;
  private:
  bool _internal_has_custom_effect_timing_curve_3() const;
  public:
  void clear_custom_effect_timing_curve_3();
  const ::TSD::PathSourceArchive& custom_effect_timing_curve_3() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::PathSourceArchive* release_custom_effect_timing_curve_3();
  ::TSD::PathSourceArchive* mutable_custom_effect_timing_curve_3();
  void set_allocated_custom_effect_timing_curve_3(::TSD::PathSourceArchive* custom_effect_timing_curve_3);
  private:
  const ::TSD::PathSourceArchive& _internal_custom_effect_timing_curve_3() const;
  ::TSD::PathSourceArchive* _internal_mutable_custom_effect_timing_curve_3();
  public:
  void unsafe_arena_set_allocated_custom_effect_timing_curve_3(
      ::TSD::PathSourceArchive* custom_effect_timing_curve_3);
  ::TSD::PathSourceArchive* unsafe_arena_release_custom_effect_timing_curve_3();

  // optional double duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // optional double delay = 5;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  double delay() const;
  void set_delay(double value);
  private:
  double _internal_delay() const;
  void _internal_set_delay(double value);
  public:

  // optional uint32 direction = 4;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 random_number_seed = 11;
  bool has_random_number_seed() const;
  private:
  bool _internal_has_random_number_seed() const;
  public:
  void clear_random_number_seed();
  ::PROTOBUF_NAMESPACE_ID::uint32 random_number_seed() const;
  void set_random_number_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_random_number_seed() const;
  void _internal_set_random_number_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double custom_detail = 12;
  bool has_custom_detail() const;
  private:
  bool _internal_has_custom_detail() const;
  public:
  void clear_custom_detail();
  double custom_detail() const;
  void set_custom_detail(double value);
  private:
  double _internal_custom_detail() const;
  void _internal_set_custom_detail(double value);
  public:

  // optional bool is_automatic = 6;
  bool has_is_automatic() const;
  private:
  bool _internal_has_is_automatic() const;
  public:
  void clear_is_automatic();
  bool is_automatic() const;
  void set_is_automatic(bool value);
  private:
  bool _internal_is_automatic() const;
  void _internal_set_is_automatic(bool value);
  public:

  // optional bool writing_direction_is_rtl = 16;
  bool has_writing_direction_is_rtl() const;
  private:
  bool _internal_has_writing_direction_is_rtl() const;
  public:
  void clear_writing_direction_is_rtl();
  bool writing_direction_is_rtl() const;
  void set_writing_direction_is_rtl(bool value);
  private:
  bool _internal_writing_direction_is_rtl() const;
  void _internal_set_writing_direction_is_rtl(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.AnimationAttributesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animation_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_effect_timing_curve_theme_name_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_effect_timing_curve_theme_name_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_effect_timing_curve_theme_name_3_;
  ::TSP::Color* color_;
  ::TSD::PathSourceArchive* custom_effect_timing_curve_1_;
  ::TSD::PathSourceArchive* custom_effect_timing_curve_2_;
  ::TSD::PathSourceArchive* custom_effect_timing_curve_3_;
  double duration_;
  double delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 random_number_seed_;
  double custom_detail_;
  bool is_automatic_;
  bool writing_direction_is_rtl_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class TransitionAttributesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.TransitionAttributesArchive) */ {
 public:
  inline TransitionAttributesArchive() : TransitionAttributesArchive(nullptr) {}
  ~TransitionAttributesArchive() override;
  explicit constexpr TransitionAttributesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitionAttributesArchive(const TransitionAttributesArchive& from);
  TransitionAttributesArchive(TransitionAttributesArchive&& from) noexcept
    : TransitionAttributesArchive() {
    *this = ::std::move(from);
  }

  inline TransitionAttributesArchive& operator=(const TransitionAttributesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitionAttributesArchive& operator=(TransitionAttributesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitionAttributesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitionAttributesArchive* internal_default_instance() {
    return reinterpret_cast<const TransitionAttributesArchive*>(
               &_TransitionAttributesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransitionAttributesArchive& a, TransitionAttributesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitionAttributesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitionAttributesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransitionAttributesArchive* New() const final {
    return new TransitionAttributesArchive();
  }

  TransitionAttributesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransitionAttributesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransitionAttributesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransitionAttributesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitionAttributesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.TransitionAttributesArchive";
  }
  protected:
  explicit TransitionAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveType;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveTypeLinear =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeLinear;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveTypeEaseIn =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseIn;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveTypeEaseOut =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseOut;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveTypeEaseInEaseOut =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseInEaseOut;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveTypeCustom =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeCustom;
  static inline bool TransitionCustomAttributesTimingCurveType_IsValid(int value) {
    return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(value);
  }
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveType_MIN =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MIN;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveType_MAX =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MAX;
  static constexpr int TransitionCustomAttributesTimingCurveType_ARRAYSIZE =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TransitionCustomAttributesTimingCurveType_descriptor() {
    return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor();
  }
  template<typename T>
  static inline const std::string& TransitionCustomAttributesTimingCurveType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TransitionCustomAttributesTimingCurveType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TransitionCustomAttributesTimingCurveType_Name.");
    return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Name(enum_t_value);
  }
  static inline bool TransitionCustomAttributesTimingCurveType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TransitionCustomAttributesTimingCurveType* value) {
    return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Parse(name, value);
  }

  typedef TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryType;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryTypeByObject =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByObject;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryTypeByWord =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByWord;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryTypeByCharacter =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByCharacter;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryTypeByLine =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByLine;
  static inline bool TransitionCustomAttributesTextDeliveryType_IsValid(int value) {
    return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(value);
  }
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryType_MIN =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MIN;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryType_MAX =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MAX;
  static constexpr int TransitionCustomAttributesTextDeliveryType_ARRAYSIZE =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TransitionCustomAttributesTextDeliveryType_descriptor() {
    return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor();
  }
  template<typename T>
  static inline const std::string& TransitionCustomAttributesTextDeliveryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TransitionCustomAttributesTextDeliveryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TransitionCustomAttributesTextDeliveryType_Name.");
    return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Name(enum_t_value);
  }
  static inline bool TransitionCustomAttributesTextDeliveryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TransitionCustomAttributesTextDeliveryType* value) {
    return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseAnimationTypeFieldNumber = 1,
    kDatabaseEffectFieldNumber = 2,
    kDatabaseColorFieldNumber = 7,
    kAnimationAttributesFieldNumber = 8,
    kDatabaseDurationFieldNumber = 3,
    kDatabaseDirectionFieldNumber = 4,
    kDatabaseDelayFieldNumber = 5,
    kCustomTwistFieldNumber = 9,
    kCustomMosaicSizeFieldNumber = 10,
    kCustomMosaicTypeFieldNumber = 11,
    kCustomBounceFieldNumber = 12,
    kCustomMagicMoveFadeUnmatchedObjectsFieldNumber = 13,
    kCustomMotionBlurFieldNumber = 17,
    kDatabaseIsAutomaticFieldNumber = 6,
    kCustomTravelDistanceFieldNumber = 18,
    kCustomTimingCurveFieldNumber = 15,
    kCustomTextDeliveryTypeFieldNumber = 16,
  };
  // optional string database_animation_type = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_animation_type() const;
  private:
  bool _internal_has_database_animation_type() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_animation_type();
  PROTOBUF_DEPRECATED const std::string& database_animation_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_database_animation_type(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_database_animation_type();
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED std::string* release_database_animation_type();
  PROTOBUF_DEPRECATED void set_allocated_database_animation_type(std::string* database_animation_type);
  private:
  const std::string& _internal_database_animation_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_animation_type(const std::string& value);
  std::string* _internal_mutable_database_animation_type();
  public:

  // optional string database_effect = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_effect() const;
  private:
  bool _internal_has_database_effect() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_effect();
  PROTOBUF_DEPRECATED const std::string& database_effect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_database_effect(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_database_effect();
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED std::string* release_database_effect();
  PROTOBUF_DEPRECATED void set_allocated_database_effect(std::string* database_effect);
  private:
  const std::string& _internal_database_effect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_effect(const std::string& value);
  std::string* _internal_mutable_database_effect();
  public:

  // optional .TSP.Color database_color = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_color() const;
  private:
  bool _internal_has_database_color() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_color();
  PROTOBUF_DEPRECATED const ::TSP::Color& database_color() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Color* release_database_color();
  PROTOBUF_DEPRECATED ::TSP::Color* mutable_database_color();
  PROTOBUF_DEPRECATED void set_allocated_database_color(::TSP::Color* database_color);
  private:
  const ::TSP::Color& _internal_database_color() const;
  ::TSP::Color* _internal_mutable_database_color();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_database_color(
      ::TSP::Color* database_color);
  PROTOBUF_DEPRECATED ::TSP::Color* unsafe_arena_release_database_color();

  // optional .KN.AnimationAttributesArchive animationAttributes = 8;
  bool has_animationattributes() const;
  private:
  bool _internal_has_animationattributes() const;
  public:
  void clear_animationattributes();
  const ::KN::AnimationAttributesArchive& animationattributes() const;
  PROTOBUF_MUST_USE_RESULT ::KN::AnimationAttributesArchive* release_animationattributes();
  ::KN::AnimationAttributesArchive* mutable_animationattributes();
  void set_allocated_animationattributes(::KN::AnimationAttributesArchive* animationattributes);
  private:
  const ::KN::AnimationAttributesArchive& _internal_animationattributes() const;
  ::KN::AnimationAttributesArchive* _internal_mutable_animationattributes();
  public:
  void unsafe_arena_set_allocated_animationattributes(
      ::KN::AnimationAttributesArchive* animationattributes);
  ::KN::AnimationAttributesArchive* unsafe_arena_release_animationattributes();

  // optional double database_duration = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_duration() const;
  private:
  bool _internal_has_database_duration() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_duration();
  PROTOBUF_DEPRECATED double database_duration() const;
  PROTOBUF_DEPRECATED void set_database_duration(double value);
  private:
  double _internal_database_duration() const;
  void _internal_set_database_duration(double value);
  public:

  // optional uint32 database_direction = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_direction() const;
  private:
  bool _internal_has_database_direction() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_direction();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 database_direction() const;
  PROTOBUF_DEPRECATED void set_database_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_database_direction() const;
  void _internal_set_database_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float database_delay = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_delay() const;
  private:
  bool _internal_has_database_delay() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_delay();
  PROTOBUF_DEPRECATED float database_delay() const;
  PROTOBUF_DEPRECATED void set_database_delay(float value);
  private:
  float _internal_database_delay() const;
  void _internal_set_database_delay(float value);
  public:

  // optional float custom_twist = 9;
  bool has_custom_twist() const;
  private:
  bool _internal_has_custom_twist() const;
  public:
  void clear_custom_twist();
  float custom_twist() const;
  void set_custom_twist(float value);
  private:
  float _internal_custom_twist() const;
  void _internal_set_custom_twist(float value);
  public:

  // optional uint32 custom_mosaic_size = 10;
  bool has_custom_mosaic_size() const;
  private:
  bool _internal_has_custom_mosaic_size() const;
  public:
  void clear_custom_mosaic_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_mosaic_size() const;
  void set_custom_mosaic_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_mosaic_size() const;
  void _internal_set_custom_mosaic_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 custom_mosaic_type = 11;
  bool has_custom_mosaic_type() const;
  private:
  bool _internal_has_custom_mosaic_type() const;
  public:
  void clear_custom_mosaic_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_mosaic_type() const;
  void set_custom_mosaic_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_mosaic_type() const;
  void _internal_set_custom_mosaic_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool custom_bounce = 12;
  bool has_custom_bounce() const;
  private:
  bool _internal_has_custom_bounce() const;
  public:
  void clear_custom_bounce();
  bool custom_bounce() const;
  void set_custom_bounce(bool value);
  private:
  bool _internal_custom_bounce() const;
  void _internal_set_custom_bounce(bool value);
  public:

  // optional bool custom_magic_move_fade_unmatched_objects = 13;
  bool has_custom_magic_move_fade_unmatched_objects() const;
  private:
  bool _internal_has_custom_magic_move_fade_unmatched_objects() const;
  public:
  void clear_custom_magic_move_fade_unmatched_objects();
  bool custom_magic_move_fade_unmatched_objects() const;
  void set_custom_magic_move_fade_unmatched_objects(bool value);
  private:
  bool _internal_custom_magic_move_fade_unmatched_objects() const;
  void _internal_set_custom_magic_move_fade_unmatched_objects(bool value);
  public:

  // optional bool custom_motion_blur = 17;
  bool has_custom_motion_blur() const;
  private:
  bool _internal_has_custom_motion_blur() const;
  public:
  void clear_custom_motion_blur();
  bool custom_motion_blur() const;
  void set_custom_motion_blur(bool value);
  private:
  bool _internal_custom_motion_blur() const;
  void _internal_set_custom_motion_blur(bool value);
  public:

  // optional bool database_is_automatic = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_is_automatic() const;
  private:
  bool _internal_has_database_is_automatic() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_is_automatic();
  PROTOBUF_DEPRECATED bool database_is_automatic() const;
  PROTOBUF_DEPRECATED void set_database_is_automatic(bool value);
  private:
  bool _internal_database_is_automatic() const;
  void _internal_set_database_is_automatic(bool value);
  public:

  // optional float custom_travel_distance = 18;
  bool has_custom_travel_distance() const;
  private:
  bool _internal_has_custom_travel_distance() const;
  public:
  void clear_custom_travel_distance();
  float custom_travel_distance() const;
  void set_custom_travel_distance(float value);
  private:
  float _internal_custom_travel_distance() const;
  void _internal_set_custom_travel_distance(float value);
  public:

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
  bool has_custom_timing_curve() const;
  private:
  bool _internal_has_custom_timing_curve() const;
  public:
  void clear_custom_timing_curve();
  ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType custom_timing_curve() const;
  void set_custom_timing_curve(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType value);
  private:
  ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType _internal_custom_timing_curve() const;
  void _internal_set_custom_timing_curve(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType value);
  public:

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
  bool has_custom_text_delivery_type() const;
  private:
  bool _internal_has_custom_text_delivery_type() const;
  public:
  void clear_custom_text_delivery_type();
  ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType custom_text_delivery_type() const;
  void set_custom_text_delivery_type(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType value);
  private:
  ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType _internal_custom_text_delivery_type() const;
  void _internal_set_custom_text_delivery_type(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType value);
  public:

  // @@protoc_insertion_point(class_scope:KN.TransitionAttributesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_animation_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_effect_;
  ::TSP::Color* database_color_;
  ::KN::AnimationAttributesArchive* animationattributes_;
  double database_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 database_direction_;
  float database_delay_;
  float custom_twist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_mosaic_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_mosaic_type_;
  bool custom_bounce_;
  bool custom_magic_move_fade_unmatched_objects_;
  bool custom_motion_blur_;
  bool database_is_automatic_;
  float custom_travel_distance_;
  int custom_timing_curve_;
  int custom_text_delivery_type_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class TransitionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.TransitionArchive) */ {
 public:
  inline TransitionArchive() : TransitionArchive(nullptr) {}
  ~TransitionArchive() override;
  explicit constexpr TransitionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitionArchive(const TransitionArchive& from);
  TransitionArchive(TransitionArchive&& from) noexcept
    : TransitionArchive() {
    *this = ::std::move(from);
  }

  inline TransitionArchive& operator=(const TransitionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitionArchive& operator=(TransitionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitionArchive* internal_default_instance() {
    return reinterpret_cast<const TransitionArchive*>(
               &_TransitionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransitionArchive& a, TransitionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitionArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransitionArchive* New() const final {
    return new TransitionArchive();
  }

  TransitionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransitionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransitionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransitionArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.TransitionArchive";
  }
  protected:
  explicit TransitionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
  };
  // required .KN.TransitionAttributesArchive attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::KN::TransitionAttributesArchive& attributes() const;
  PROTOBUF_MUST_USE_RESULT ::KN::TransitionAttributesArchive* release_attributes();
  ::KN::TransitionAttributesArchive* mutable_attributes();
  void set_allocated_attributes(::KN::TransitionAttributesArchive* attributes);
  private:
  const ::KN::TransitionAttributesArchive& _internal_attributes() const;
  ::KN::TransitionAttributesArchive* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::KN::TransitionAttributesArchive* attributes);
  ::KN::TransitionAttributesArchive* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:KN.TransitionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::KN::TransitionAttributesArchive* attributes_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class BuildChunkArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.BuildChunkArchive) */ {
 public:
  inline BuildChunkArchive() : BuildChunkArchive(nullptr) {}
  ~BuildChunkArchive() override;
  explicit constexpr BuildChunkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildChunkArchive(const BuildChunkArchive& from);
  BuildChunkArchive(BuildChunkArchive&& from) noexcept
    : BuildChunkArchive() {
    *this = ::std::move(from);
  }

  inline BuildChunkArchive& operator=(const BuildChunkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildChunkArchive& operator=(BuildChunkArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildChunkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildChunkArchive* internal_default_instance() {
    return reinterpret_cast<const BuildChunkArchive*>(
               &_BuildChunkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BuildChunkArchive& a, BuildChunkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildChunkArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildChunkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildChunkArchive* New() const final {
    return new BuildChunkArchive();
  }

  BuildChunkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildChunkArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildChunkArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BuildChunkArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildChunkArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.BuildChunkArchive";
  }
  protected:
  explicit BuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildFieldNumber = 1,
    kBuildChunkIdentifierFieldNumber = 7,
    kBuildIdFieldNumber = 8,
    kDelayFieldNumber = 3,
    kDurationFieldNumber = 4,
    kIndexFieldNumber = 2,
    kAutomaticFieldNumber = 5,
    kReferentFieldNumber = 6,
  };
  // optional .TSP.Reference build = 1;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  const ::TSP::Reference& build() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_build();
  ::TSP::Reference* mutable_build();
  void set_allocated_build(::TSP::Reference* build);
  private:
  const ::TSP::Reference& _internal_build() const;
  ::TSP::Reference* _internal_mutable_build();
  public:
  void unsafe_arena_set_allocated_build(
      ::TSP::Reference* build);
  ::TSP::Reference* unsafe_arena_release_build();

  // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 7;
  bool has_build_chunk_identifier() const;
  private:
  bool _internal_has_build_chunk_identifier() const;
  public:
  void clear_build_chunk_identifier();
  const ::KN::BuildChunkIdentifierArchive& build_chunk_identifier() const;
  PROTOBUF_MUST_USE_RESULT ::KN::BuildChunkIdentifierArchive* release_build_chunk_identifier();
  ::KN::BuildChunkIdentifierArchive* mutable_build_chunk_identifier();
  void set_allocated_build_chunk_identifier(::KN::BuildChunkIdentifierArchive* build_chunk_identifier);
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_build_chunk_identifier() const;
  ::KN::BuildChunkIdentifierArchive* _internal_mutable_build_chunk_identifier();
  public:
  void unsafe_arena_set_allocated_build_chunk_identifier(
      ::KN::BuildChunkIdentifierArchive* build_chunk_identifier);
  ::KN::BuildChunkIdentifierArchive* unsafe_arena_release_build_chunk_identifier();

  // optional .TSP.UUID build_id = 8;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  const ::TSP::UUID& build_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_build_id();
  ::TSP::UUID* mutable_build_id();
  void set_allocated_build_id(::TSP::UUID* build_id);
  private:
  const ::TSP::UUID& _internal_build_id() const;
  ::TSP::UUID* _internal_mutable_build_id();
  public:
  void unsafe_arena_set_allocated_build_id(
      ::TSP::UUID* build_id);
  ::TSP::UUID* unsafe_arena_release_build_id();

  // optional double delay = 3;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  double delay() const;
  void set_delay(double value);
  private:
  double _internal_delay() const;
  void _internal_set_delay(double value);
  public:

  // optional double duration = 4;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // optional uint32 index = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  PROTOBUF_DEPRECATED void clear_index();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  PROTOBUF_DEPRECATED void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool automatic = 5;
  bool has_automatic() const;
  private:
  bool _internal_has_automatic() const;
  public:
  void clear_automatic();
  bool automatic() const;
  void set_automatic(bool value);
  private:
  bool _internal_automatic() const;
  void _internal_set_automatic(bool value);
  public:

  // optional bool referent = 6;
  bool has_referent() const;
  private:
  bool _internal_has_referent() const;
  public:
  void clear_referent();
  bool referent() const;
  void set_referent(bool value);
  private:
  bool _internal_referent() const;
  void _internal_set_referent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.BuildChunkArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* build_;
  ::KN::BuildChunkIdentifierArchive* build_chunk_identifier_;
  ::TSP::UUID* build_id_;
  double delay_;
  double duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  bool automatic_;
  bool referent_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class BuildChunkIdentifierArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.BuildChunkIdentifierArchive) */ {
 public:
  inline BuildChunkIdentifierArchive() : BuildChunkIdentifierArchive(nullptr) {}
  ~BuildChunkIdentifierArchive() override;
  explicit constexpr BuildChunkIdentifierArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildChunkIdentifierArchive(const BuildChunkIdentifierArchive& from);
  BuildChunkIdentifierArchive(BuildChunkIdentifierArchive&& from) noexcept
    : BuildChunkIdentifierArchive() {
    *this = ::std::move(from);
  }

  inline BuildChunkIdentifierArchive& operator=(const BuildChunkIdentifierArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildChunkIdentifierArchive& operator=(BuildChunkIdentifierArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildChunkIdentifierArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildChunkIdentifierArchive* internal_default_instance() {
    return reinterpret_cast<const BuildChunkIdentifierArchive*>(
               &_BuildChunkIdentifierArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BuildChunkIdentifierArchive& a, BuildChunkIdentifierArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildChunkIdentifierArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildChunkIdentifierArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildChunkIdentifierArchive* New() const final {
    return new BuildChunkIdentifierArchive();
  }

  BuildChunkIdentifierArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildChunkIdentifierArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildChunkIdentifierArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BuildChunkIdentifierArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildChunkIdentifierArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.BuildChunkIdentifierArchive";
  }
  protected:
  explicit BuildChunkIdentifierArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildIdFieldNumber = 1,
    kBuildChunkIdFieldNumber = 2,
  };
  // optional .TSP.UUID build_id = 1;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  const ::TSP::UUID& build_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_build_id();
  ::TSP::UUID* mutable_build_id();
  void set_allocated_build_id(::TSP::UUID* build_id);
  private:
  const ::TSP::UUID& _internal_build_id() const;
  ::TSP::UUID* _internal_mutable_build_id();
  public:
  void unsafe_arena_set_allocated_build_id(
      ::TSP::UUID* build_id);
  ::TSP::UUID* unsafe_arena_release_build_id();

  // optional int32 build_chunk_id = 2;
  bool has_build_chunk_id() const;
  private:
  bool _internal_has_build_chunk_id() const;
  public:
  void clear_build_chunk_id();
  ::PROTOBUF_NAMESPACE_ID::int32 build_chunk_id() const;
  void set_build_chunk_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_build_chunk_id() const;
  void _internal_set_build_chunk_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KN.BuildChunkIdentifierArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* build_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 build_chunk_id_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class BuildAttributeValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.BuildAttributeValueArchive) */ {
 public:
  inline BuildAttributeValueArchive() : BuildAttributeValueArchive(nullptr) {}
  ~BuildAttributeValueArchive() override;
  explicit constexpr BuildAttributeValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildAttributeValueArchive(const BuildAttributeValueArchive& from);
  BuildAttributeValueArchive(BuildAttributeValueArchive&& from) noexcept
    : BuildAttributeValueArchive() {
    *this = ::std::move(from);
  }

  inline BuildAttributeValueArchive& operator=(const BuildAttributeValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAttributeValueArchive& operator=(BuildAttributeValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildAttributeValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildAttributeValueArchive* internal_default_instance() {
    return reinterpret_cast<const BuildAttributeValueArchive*>(
               &_BuildAttributeValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BuildAttributeValueArchive& a, BuildAttributeValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAttributeValueArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAttributeValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAttributeValueArchive* New() const final {
    return new BuildAttributeValueArchive();
  }

  BuildAttributeValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAttributeValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildAttributeValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BuildAttributeValueArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAttributeValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.BuildAttributeValueArchive";
  }
  protected:
  explicit BuildAttributeValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueType;
  static constexpr BuildAttributeValueType k_integer =
    BuildAttributeValueArchive_BuildAttributeValueType_k_integer;
  static constexpr BuildAttributeValueType k_double =
    BuildAttributeValueArchive_BuildAttributeValueType_k_double;
  static constexpr BuildAttributeValueType k_bool =
    BuildAttributeValueArchive_BuildAttributeValueType_k_bool;
  static constexpr BuildAttributeValueType k_string =
    BuildAttributeValueArchive_BuildAttributeValueType_k_string;
  static constexpr BuildAttributeValueType k_path_source =
    BuildAttributeValueArchive_BuildAttributeValueType_k_path_source;
  static constexpr BuildAttributeValueType k_color =
    BuildAttributeValueArchive_BuildAttributeValueType_k_color;
  static inline bool BuildAttributeValueType_IsValid(int value) {
    return BuildAttributeValueArchive_BuildAttributeValueType_IsValid(value);
  }
  static constexpr BuildAttributeValueType BuildAttributeValueType_MIN =
    BuildAttributeValueArchive_BuildAttributeValueType_BuildAttributeValueType_MIN;
  static constexpr BuildAttributeValueType BuildAttributeValueType_MAX =
    BuildAttributeValueArchive_BuildAttributeValueType_BuildAttributeValueType_MAX;
  static constexpr int BuildAttributeValueType_ARRAYSIZE =
    BuildAttributeValueArchive_BuildAttributeValueType_BuildAttributeValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributeValueType_descriptor() {
    return BuildAttributeValueArchive_BuildAttributeValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributeValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributeValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributeValueType_Name.");
    return BuildAttributeValueArchive_BuildAttributeValueType_Name(enum_t_value);
  }
  static inline bool BuildAttributeValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributeValueType* value) {
    return BuildAttributeValueArchive_BuildAttributeValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 4,
    kPathSourceValueFieldNumber = 5,
    kColorValueFieldNumber = 6,
    kDoubleValueFieldNumber = 2,
    kIntegerValueFieldNumber = 1,
    kBoolValueFieldNumber = 3,
    kTypeFieldNumber = 7,
  };
  // optional string string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional .TSD.PathSourceArchive path_source_value = 5;
  bool has_path_source_value() const;
  private:
  bool _internal_has_path_source_value() const;
  public:
  void clear_path_source_value();
  const ::TSD::PathSourceArchive& path_source_value() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::PathSourceArchive* release_path_source_value();
  ::TSD::PathSourceArchive* mutable_path_source_value();
  void set_allocated_path_source_value(::TSD::PathSourceArchive* path_source_value);
  private:
  const ::TSD::PathSourceArchive& _internal_path_source_value() const;
  ::TSD::PathSourceArchive* _internal_mutable_path_source_value();
  public:
  void unsafe_arena_set_allocated_path_source_value(
      ::TSD::PathSourceArchive* path_source_value);
  ::TSD::PathSourceArchive* unsafe_arena_release_path_source_value();

  // optional .TSP.Color color_value = 6;
  bool has_color_value() const;
  private:
  bool _internal_has_color_value() const;
  public:
  void clear_color_value();
  const ::TSP::Color& color_value() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Color* release_color_value();
  ::TSP::Color* mutable_color_value();
  void set_allocated_color_value(::TSP::Color* color_value);
  private:
  const ::TSP::Color& _internal_color_value() const;
  ::TSP::Color* _internal_mutable_color_value();
  public:
  void unsafe_arena_set_allocated_color_value(
      ::TSP::Color* color_value);
  ::TSP::Color* unsafe_arena_release_color_value();

  // optional double double_value = 2;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional uint32 integer_value = 1;
  bool has_integer_value() const;
  private:
  bool _internal_has_integer_value() const;
  public:
  void clear_integer_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 integer_value() const;
  void set_integer_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_integer_value() const;
  void _internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool bool_value = 3;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // optional .KN.BuildAttributeValueArchive.BuildAttributeValueType type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::KN::BuildAttributeValueArchive_BuildAttributeValueType type() const;
  void set_type(::KN::BuildAttributeValueArchive_BuildAttributeValueType value);
  private:
  ::KN::BuildAttributeValueArchive_BuildAttributeValueType _internal_type() const;
  void _internal_set_type(::KN::BuildAttributeValueArchive_BuildAttributeValueType value);
  public:

  // @@protoc_insertion_point(class_scope:KN.BuildAttributeValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::TSD::PathSourceArchive* path_source_value_;
  ::TSP::Color* color_value_;
  double double_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 integer_value_;
  bool bool_value_;
  int type_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class BuildAttributeTupleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.BuildAttributeTupleArchive) */ {
 public:
  inline BuildAttributeTupleArchive() : BuildAttributeTupleArchive(nullptr) {}
  ~BuildAttributeTupleArchive() override;
  explicit constexpr BuildAttributeTupleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildAttributeTupleArchive(const BuildAttributeTupleArchive& from);
  BuildAttributeTupleArchive(BuildAttributeTupleArchive&& from) noexcept
    : BuildAttributeTupleArchive() {
    *this = ::std::move(from);
  }

  inline BuildAttributeTupleArchive& operator=(const BuildAttributeTupleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAttributeTupleArchive& operator=(BuildAttributeTupleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildAttributeTupleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildAttributeTupleArchive* internal_default_instance() {
    return reinterpret_cast<const BuildAttributeTupleArchive*>(
               &_BuildAttributeTupleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BuildAttributeTupleArchive& a, BuildAttributeTupleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAttributeTupleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAttributeTupleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAttributeTupleArchive* New() const final {
    return new BuildAttributeTupleArchive();
  }

  BuildAttributeTupleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAttributeTupleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildAttributeTupleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BuildAttributeTupleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAttributeTupleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.BuildAttributeTupleArchive";
  }
  protected:
  explicit BuildAttributeTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 1,
    kValueFieldNumber = 2,
    kBuildIdFieldNumber = 3,
    kBuildChunkIdentifierFieldNumber = 4,
  };
  // optional string property = 1;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_MUST_USE_RESULT std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // optional .KN.BuildAttributeValueArchive value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::KN::BuildAttributeValueArchive& value() const;
  PROTOBUF_MUST_USE_RESULT ::KN::BuildAttributeValueArchive* release_value();
  ::KN::BuildAttributeValueArchive* mutable_value();
  void set_allocated_value(::KN::BuildAttributeValueArchive* value);
  private:
  const ::KN::BuildAttributeValueArchive& _internal_value() const;
  ::KN::BuildAttributeValueArchive* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::KN::BuildAttributeValueArchive* value);
  ::KN::BuildAttributeValueArchive* unsafe_arena_release_value();

  // optional .TSP.UUID build_id = 3;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  const ::TSP::UUID& build_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_build_id();
  ::TSP::UUID* mutable_build_id();
  void set_allocated_build_id(::TSP::UUID* build_id);
  private:
  const ::TSP::UUID& _internal_build_id() const;
  ::TSP::UUID* _internal_mutable_build_id();
  public:
  void unsafe_arena_set_allocated_build_id(
      ::TSP::UUID* build_id);
  ::TSP::UUID* unsafe_arena_release_build_id();

  // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 4;
  bool has_build_chunk_identifier() const;
  private:
  bool _internal_has_build_chunk_identifier() const;
  public:
  void clear_build_chunk_identifier();
  const ::KN::BuildChunkIdentifierArchive& build_chunk_identifier() const;
  PROTOBUF_MUST_USE_RESULT ::KN::BuildChunkIdentifierArchive* release_build_chunk_identifier();
  ::KN::BuildChunkIdentifierArchive* mutable_build_chunk_identifier();
  void set_allocated_build_chunk_identifier(::KN::BuildChunkIdentifierArchive* build_chunk_identifier);
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_build_chunk_identifier() const;
  ::KN::BuildChunkIdentifierArchive* _internal_mutable_build_chunk_identifier();
  public:
  void unsafe_arena_set_allocated_build_chunk_identifier(
      ::KN::BuildChunkIdentifierArchive* build_chunk_identifier);
  ::KN::BuildChunkIdentifierArchive* unsafe_arena_release_build_chunk_identifier();

  // @@protoc_insertion_point(class_scope:KN.BuildAttributeTupleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::KN::BuildAttributeValueArchive* value_;
  ::TSP::UUID* build_id_;
  ::KN::BuildChunkIdentifierArchive* build_chunk_identifier_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class BuildAttributesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.BuildAttributesArchive) */ {
 public:
  inline BuildAttributesArchive() : BuildAttributesArchive(nullptr) {}
  ~BuildAttributesArchive() override;
  explicit constexpr BuildAttributesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildAttributesArchive(const BuildAttributesArchive& from);
  BuildAttributesArchive(BuildAttributesArchive&& from) noexcept
    : BuildAttributesArchive() {
    *this = ::std::move(from);
  }

  inline BuildAttributesArchive& operator=(const BuildAttributesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAttributesArchive& operator=(BuildAttributesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildAttributesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildAttributesArchive* internal_default_instance() {
    return reinterpret_cast<const BuildAttributesArchive*>(
               &_BuildAttributesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BuildAttributesArchive& a, BuildAttributesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAttributesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAttributesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAttributesArchive* New() const final {
    return new BuildAttributesArchive();
  }

  BuildAttributesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAttributesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildAttributesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BuildAttributesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAttributesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.BuildAttributesArchive";
  }
  protected:
  explicit BuildAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesAcceleration;
  static constexpr BuildAttributesAcceleration kNone =
    BuildAttributesArchive_BuildAttributesAcceleration_kNone;
  static constexpr BuildAttributesAcceleration kEaseIn =
    BuildAttributesArchive_BuildAttributesAcceleration_kEaseIn;
  static constexpr BuildAttributesAcceleration kEaseOut =
    BuildAttributesArchive_BuildAttributesAcceleration_kEaseOut;
  static constexpr BuildAttributesAcceleration kEaseBoth =
    BuildAttributesArchive_BuildAttributesAcceleration_kEaseBoth;
  static constexpr BuildAttributesAcceleration kCustom =
    BuildAttributesArchive_BuildAttributesAcceleration_kCustom;
  static inline bool BuildAttributesAcceleration_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesAcceleration_IsValid(value);
  }
  static constexpr BuildAttributesAcceleration BuildAttributesAcceleration_MIN =
    BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MIN;
  static constexpr BuildAttributesAcceleration BuildAttributesAcceleration_MAX =
    BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MAX;
  static constexpr int BuildAttributesAcceleration_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesAcceleration_descriptor() {
    return BuildAttributesArchive_BuildAttributesAcceleration_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesAcceleration_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesAcceleration>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesAcceleration_Name.");
    return BuildAttributesArchive_BuildAttributesAcceleration_Name(enum_t_value);
  }
  static inline bool BuildAttributesAcceleration_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesAcceleration* value) {
    return BuildAttributesArchive_BuildAttributesAcceleration_Parse(name, value);
  }

  typedef BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesRotationDirection;
  static constexpr BuildAttributesRotationDirection kClockwise =
    BuildAttributesArchive_BuildAttributesRotationDirection_kClockwise;
  static constexpr BuildAttributesRotationDirection kCounterclockwise =
    BuildAttributesArchive_BuildAttributesRotationDirection_kCounterclockwise;
  static inline bool BuildAttributesRotationDirection_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(value);
  }
  static constexpr BuildAttributesRotationDirection BuildAttributesRotationDirection_MIN =
    BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MIN;
  static constexpr BuildAttributesRotationDirection BuildAttributesRotationDirection_MAX =
    BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MAX;
  static constexpr int BuildAttributesRotationDirection_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesRotationDirection_descriptor() {
    return BuildAttributesArchive_BuildAttributesRotationDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesRotationDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesRotationDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesRotationDirection_Name.");
    return BuildAttributesArchive_BuildAttributesRotationDirection_Name(enum_t_value);
  }
  static inline bool BuildAttributesRotationDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesRotationDirection* value) {
    return BuildAttributesArchive_BuildAttributesRotationDirection_Parse(name, value);
  }

  typedef BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesCurveStyle;
  static constexpr BuildAttributesCurveStyle kStraight =
    BuildAttributesArchive_BuildAttributesCurveStyle_kStraight;
  static constexpr BuildAttributesCurveStyle kCurved =
    BuildAttributesArchive_BuildAttributesCurveStyle_kCurved;
  static inline bool BuildAttributesCurveStyle_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(value);
  }
  static constexpr BuildAttributesCurveStyle BuildAttributesCurveStyle_MIN =
    BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MIN;
  static constexpr BuildAttributesCurveStyle BuildAttributesCurveStyle_MAX =
    BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MAX;
  static constexpr int BuildAttributesCurveStyle_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesCurveStyle_descriptor() {
    return BuildAttributesArchive_BuildAttributesCurveStyle_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesCurveStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesCurveStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesCurveStyle_Name.");
    return BuildAttributesArchive_BuildAttributesCurveStyle_Name(enum_t_value);
  }
  static inline bool BuildAttributesCurveStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesCurveStyle* value) {
    return BuildAttributesArchive_BuildAttributesCurveStyle_Parse(name, value);
  }

  typedef BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesTextDelivery;
  static constexpr BuildAttributesTextDelivery kTextDeliveryUndefined =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryUndefined;
  static constexpr BuildAttributesTextDelivery kTextDeliveryByObject =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByObject;
  static constexpr BuildAttributesTextDelivery kTextDeliveryByWord =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByWord;
  static constexpr BuildAttributesTextDelivery kTextDeliveryByCharacter =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByCharacter;
  static constexpr BuildAttributesTextDelivery kTextDeliveryByLine =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByLine;
  static inline bool BuildAttributesTextDelivery_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(value);
  }
  static constexpr BuildAttributesTextDelivery BuildAttributesTextDelivery_MIN =
    BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MIN;
  static constexpr BuildAttributesTextDelivery BuildAttributesTextDelivery_MAX =
    BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MAX;
  static constexpr int BuildAttributesTextDelivery_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesTextDelivery_descriptor() {
    return BuildAttributesArchive_BuildAttributesTextDelivery_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesTextDelivery_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesTextDelivery>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesTextDelivery_Name.");
    return BuildAttributesArchive_BuildAttributesTextDelivery_Name(enum_t_value);
  }
  static inline bool BuildAttributesTextDelivery_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesTextDelivery* value) {
    return BuildAttributesArchive_BuildAttributesTextDelivery_Parse(name, value);
  }

  typedef BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesDeliveryOption;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionUndefined =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionUndefined;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionForward =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionForward;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionBackward =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionBackward;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionFromCenter =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionFromCenter;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionFromEdges =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionFromEdges;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionRandom =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionRandom;
  static inline bool BuildAttributesDeliveryOption_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(value);
  }
  static constexpr BuildAttributesDeliveryOption BuildAttributesDeliveryOption_MIN =
    BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MIN;
  static constexpr BuildAttributesDeliveryOption BuildAttributesDeliveryOption_MAX =
    BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MAX;
  static constexpr int BuildAttributesDeliveryOption_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesDeliveryOption_descriptor() {
    return BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesDeliveryOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesDeliveryOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesDeliveryOption_Name.");
    return BuildAttributesArchive_BuildAttributesDeliveryOption_Name(enum_t_value);
  }
  static inline bool BuildAttributesDeliveryOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesDeliveryOption* value) {
    return BuildAttributesArchive_BuildAttributesDeliveryOption_Parse(name, value);
  }

  typedef BuildAttributesArchive_ActionBuildAttributesJiggleIntensity ActionBuildAttributesJiggleIntensity;
  static constexpr ActionBuildAttributesJiggleIntensity kJiggleIntensitySmall =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensitySmall;
  static constexpr ActionBuildAttributesJiggleIntensity kJiggleIntensityMedium =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityMedium;
  static constexpr ActionBuildAttributesJiggleIntensity kJiggleIntensityLarge =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityLarge;
  static inline bool ActionBuildAttributesJiggleIntensity_IsValid(int value) {
    return BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(value);
  }
  static constexpr ActionBuildAttributesJiggleIntensity ActionBuildAttributesJiggleIntensity_MIN =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MIN;
  static constexpr ActionBuildAttributesJiggleIntensity ActionBuildAttributesJiggleIntensity_MAX =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MAX;
  static constexpr int ActionBuildAttributesJiggleIntensity_ARRAYSIZE =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActionBuildAttributesJiggleIntensity_descriptor() {
    return BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor();
  }
  template<typename T>
  static inline const std::string& ActionBuildAttributesJiggleIntensity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionBuildAttributesJiggleIntensity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionBuildAttributesJiggleIntensity_Name.");
    return BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Name(enum_t_value);
  }
  static inline bool ActionBuildAttributesJiggleIntensity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActionBuildAttributesJiggleIntensity* value) {
    return BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseAnimationTypeFieldNumber = 1,
    kDatabaseEffectFieldNumber = 2,
    kMotionPathStringFieldNumber = 15,
    kDatabaseColorFieldNumber = 16,
    kAnimationAttributesFieldNumber = 18,
    kActionMotionPathSourceFieldNumber = 22,
    kDatabaseDirectionFieldNumber = 3,
    kEventTriggerFieldNumber = 4,
    kDatabaseDelayFieldNumber = 5,
    kDelayAutomaticAfterFieldNumber = 6,
    kDelayAutomaticWithFieldNumber = 7,
    kDatabaseDurationFieldNumber = 8,
    kActionRotationAngleFieldNumber = 9,
    kActionScaleSizeFieldNumber = 11,
    kActionColorAlphaFieldNumber = 12,
    kActionAccelerationFieldNumber = 13,
    kCurveStyleFieldNumber = 14,
    kChartRotation3DFieldNumber = 17,
    kCustomTextDeliveryFieldNumber = 20,
    kCustomDeliveryOptionFieldNumber = 21,
    kCustomActionScaleFieldNumber = 25,
    kCustomActionRepeatCountFieldNumber = 24,
    kCustomBounceFieldNumber = 19,
    kCustomActionDecayFieldNumber = 23,
    kCustomMotionBlurFieldNumber = 29,
    kCustomIncludeEndpointsFieldNumber = 30,
    kCustomActionJiggleIntensityFieldNumber = 26,
    kStartOffsetFieldNumber = 27,
    kEndOffsetFieldNumber = 28,
    kCustomShineFieldNumber = 33,
    kCustomCursorFieldNumber = 36,
    kCustomAlignToPathFieldNumber = 37,
    kCustomScaleAmountFieldNumber = 34,
    kCustomTravelDistanceFieldNumber = 35,
    kActionRotationDirectionFieldNumber = 10,
  };
  // optional string database_animationType = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_animationtype() const;
  private:
  bool _internal_has_database_animationtype() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_animationtype();
  PROTOBUF_DEPRECATED const std::string& database_animationtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_database_animationtype(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_database_animationtype();
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED std::string* release_database_animationtype();
  PROTOBUF_DEPRECATED void set_allocated_database_animationtype(std::string* database_animationtype);
  private:
  const std::string& _internal_database_animationtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_animationtype(const std::string& value);
  std::string* _internal_mutable_database_animationtype();
  public:

  // optional string database_effect = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_effect() const;
  private:
  bool _internal_has_database_effect() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_effect();
  PROTOBUF_DEPRECATED const std::string& database_effect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_database_effect(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_database_effect();
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED std::string* release_database_effect();
  PROTOBUF_DEPRECATED void set_allocated_database_effect(std::string* database_effect);
  private:
  const std::string& _internal_database_effect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_effect(const std::string& value);
  std::string* _internal_mutable_database_effect();
  public:

  // optional string motionPathString = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_motionpathstring() const;
  private:
  bool _internal_has_motionpathstring() const;
  public:
  PROTOBUF_DEPRECATED void clear_motionpathstring();
  PROTOBUF_DEPRECATED const std::string& motionpathstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_motionpathstring(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_motionpathstring();
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED std::string* release_motionpathstring();
  PROTOBUF_DEPRECATED void set_allocated_motionpathstring(std::string* motionpathstring);
  private:
  const std::string& _internal_motionpathstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_motionpathstring(const std::string& value);
  std::string* _internal_mutable_motionpathstring();
  public:

  // optional .TSP.Color database_color = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_color() const;
  private:
  bool _internal_has_database_color() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_color();
  PROTOBUF_DEPRECATED const ::TSP::Color& database_color() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Color* release_database_color();
  PROTOBUF_DEPRECATED ::TSP::Color* mutable_database_color();
  PROTOBUF_DEPRECATED void set_allocated_database_color(::TSP::Color* database_color);
  private:
  const ::TSP::Color& _internal_database_color() const;
  ::TSP::Color* _internal_mutable_database_color();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_database_color(
      ::TSP::Color* database_color);
  PROTOBUF_DEPRECATED ::TSP::Color* unsafe_arena_release_database_color();

  // optional .KN.AnimationAttributesArchive animationAttributes = 18;
  bool has_animationattributes() const;
  private:
  bool _internal_has_animationattributes() const;
  public:
  void clear_animationattributes();
  const ::KN::AnimationAttributesArchive& animationattributes() const;
  PROTOBUF_MUST_USE_RESULT ::KN::AnimationAttributesArchive* release_animationattributes();
  ::KN::AnimationAttributesArchive* mutable_animationattributes();
  void set_allocated_animationattributes(::KN::AnimationAttributesArchive* animationattributes);
  private:
  const ::KN::AnimationAttributesArchive& _internal_animationattributes() const;
  ::KN::AnimationAttributesArchive* _internal_mutable_animationattributes();
  public:
  void unsafe_arena_set_allocated_animationattributes(
      ::KN::AnimationAttributesArchive* animationattributes);
  ::KN::AnimationAttributesArchive* unsafe_arena_release_animationattributes();

  // optional .TSD.PathSourceArchive action_motionPathSource = 22;
  bool has_action_motionpathsource() const;
  private:
  bool _internal_has_action_motionpathsource() const;
  public:
  void clear_action_motionpathsource();
  const ::TSD::PathSourceArchive& action_motionpathsource() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::PathSourceArchive* release_action_motionpathsource();
  ::TSD::PathSourceArchive* mutable_action_motionpathsource();
  void set_allocated_action_motionpathsource(::TSD::PathSourceArchive* action_motionpathsource);
  private:
  const ::TSD::PathSourceArchive& _internal_action_motionpathsource() const;
  ::TSD::PathSourceArchive* _internal_mutable_action_motionpathsource();
  public:
  void unsafe_arena_set_allocated_action_motionpathsource(
      ::TSD::PathSourceArchive* action_motionpathsource);
  ::TSD::PathSourceArchive* unsafe_arena_release_action_motionpathsource();

  // optional uint32 database_direction = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_direction() const;
  private:
  bool _internal_has_database_direction() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_direction();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 database_direction() const;
  PROTOBUF_DEPRECATED void set_database_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_database_direction() const;
  void _internal_set_database_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 eventTrigger = 4;
  bool has_eventtrigger() const;
  private:
  bool _internal_has_eventtrigger() const;
  public:
  void clear_eventtrigger();
  ::PROTOBUF_NAMESPACE_ID::uint32 eventtrigger() const;
  void set_eventtrigger(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eventtrigger() const;
  void _internal_set_eventtrigger(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double database_delay = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_delay() const;
  private:
  bool _internal_has_database_delay() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_delay();
  PROTOBUF_DEPRECATED double database_delay() const;
  PROTOBUF_DEPRECATED void set_database_delay(double value);
  private:
  double _internal_database_delay() const;
  void _internal_set_database_delay(double value);
  public:

  // optional double delayAutomaticAfter = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_delayautomaticafter() const;
  private:
  bool _internal_has_delayautomaticafter() const;
  public:
  PROTOBUF_DEPRECATED void clear_delayautomaticafter();
  PROTOBUF_DEPRECATED double delayautomaticafter() const;
  PROTOBUF_DEPRECATED void set_delayautomaticafter(double value);
  private:
  double _internal_delayautomaticafter() const;
  void _internal_set_delayautomaticafter(double value);
  public:

  // optional double delayAutomaticWith = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_delayautomaticwith() const;
  private:
  bool _internal_has_delayautomaticwith() const;
  public:
  PROTOBUF_DEPRECATED void clear_delayautomaticwith();
  PROTOBUF_DEPRECATED double delayautomaticwith() const;
  PROTOBUF_DEPRECATED void set_delayautomaticwith(double value);
  private:
  double _internal_delayautomaticwith() const;
  void _internal_set_delayautomaticwith(double value);
  public:

  // optional double database_duration = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_duration() const;
  private:
  bool _internal_has_database_duration() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_duration();
  PROTOBUF_DEPRECATED double database_duration() const;
  PROTOBUF_DEPRECATED void set_database_duration(double value);
  private:
  double _internal_database_duration() const;
  void _internal_set_database_duration(double value);
  public:

  // optional double action_rotationAngle = 9;
  bool has_action_rotationangle() const;
  private:
  bool _internal_has_action_rotationangle() const;
  public:
  void clear_action_rotationangle();
  double action_rotationangle() const;
  void set_action_rotationangle(double value);
  private:
  double _internal_action_rotationangle() const;
  void _internal_set_action_rotationangle(double value);
  public:

  // optional double action_scaleSize = 11;
  bool has_action_scalesize() const;
  private:
  bool _internal_has_action_scalesize() const;
  public:
  void clear_action_scalesize();
  double action_scalesize() const;
  void set_action_scalesize(double value);
  private:
  double _internal_action_scalesize() const;
  void _internal_set_action_scalesize(double value);
  public:

  // optional double action_colorAlpha = 12;
  bool has_action_coloralpha() const;
  private:
  bool _internal_has_action_coloralpha() const;
  public:
  void clear_action_coloralpha();
  double action_coloralpha() const;
  void set_action_coloralpha(double value);
  private:
  double _internal_action_coloralpha() const;
  void _internal_set_action_coloralpha(double value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
  bool has_action_acceleration() const;
  private:
  bool _internal_has_action_acceleration() const;
  public:
  void clear_action_acceleration();
  ::KN::BuildAttributesArchive_BuildAttributesAcceleration action_acceleration() const;
  void set_action_acceleration(::KN::BuildAttributesArchive_BuildAttributesAcceleration value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesAcceleration _internal_action_acceleration() const;
  void _internal_set_action_acceleration(::KN::BuildAttributesArchive_BuildAttributesAcceleration value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
  bool has_curvestyle() const;
  private:
  bool _internal_has_curvestyle() const;
  public:
  void clear_curvestyle();
  ::KN::BuildAttributesArchive_BuildAttributesCurveStyle curvestyle() const;
  void set_curvestyle(::KN::BuildAttributesArchive_BuildAttributesCurveStyle value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesCurveStyle _internal_curvestyle() const;
  void _internal_set_curvestyle(::KN::BuildAttributesArchive_BuildAttributesCurveStyle value);
  public:

  // optional double ChartRotation3D = 17;
  bool has_chartrotation3d() const;
  private:
  bool _internal_has_chartrotation3d() const;
  public:
  void clear_chartrotation3d();
  double chartrotation3d() const;
  void set_chartrotation3d(double value);
  private:
  double _internal_chartrotation3d() const;
  void _internal_set_chartrotation3d(double value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
  bool has_custom_textdelivery() const;
  private:
  bool _internal_has_custom_textdelivery() const;
  public:
  void clear_custom_textdelivery();
  ::KN::BuildAttributesArchive_BuildAttributesTextDelivery custom_textdelivery() const;
  void set_custom_textdelivery(::KN::BuildAttributesArchive_BuildAttributesTextDelivery value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesTextDelivery _internal_custom_textdelivery() const;
  void _internal_set_custom_textdelivery(::KN::BuildAttributesArchive_BuildAttributesTextDelivery value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
  bool has_custom_deliveryoption() const;
  private:
  bool _internal_has_custom_deliveryoption() const;
  public:
  void clear_custom_deliveryoption();
  ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption custom_deliveryoption() const;
  void set_custom_deliveryoption(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption _internal_custom_deliveryoption() const;
  void _internal_set_custom_deliveryoption(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption value);
  public:

  // optional double custom_action_scale = 25;
  bool has_custom_action_scale() const;
  private:
  bool _internal_has_custom_action_scale() const;
  public:
  void clear_custom_action_scale();
  double custom_action_scale() const;
  void set_custom_action_scale(double value);
  private:
  double _internal_custom_action_scale() const;
  void _internal_set_custom_action_scale(double value);
  public:

  // optional uint32 custom_action_repeatCount = 24;
  bool has_custom_action_repeatcount() const;
  private:
  bool _internal_has_custom_action_repeatcount() const;
  public:
  void clear_custom_action_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_action_repeatcount() const;
  void set_custom_action_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_action_repeatcount() const;
  void _internal_set_custom_action_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool custom_bounce = 19;
  bool has_custom_bounce() const;
  private:
  bool _internal_has_custom_bounce() const;
  public:
  void clear_custom_bounce();
  bool custom_bounce() const;
  void set_custom_bounce(bool value);
  private:
  bool _internal_custom_bounce() const;
  void _internal_set_custom_bounce(bool value);
  public:

  // optional bool custom_action_decay = 23;
  bool has_custom_action_decay() const;
  private:
  bool _internal_has_custom_action_decay() const;
  public:
  void clear_custom_action_decay();
  bool custom_action_decay() const;
  void set_custom_action_decay(bool value);
  private:
  bool _internal_custom_action_decay() const;
  void _internal_set_custom_action_decay(bool value);
  public:

  // optional bool custom_motion_blur = 29;
  bool has_custom_motion_blur() const;
  private:
  bool _internal_has_custom_motion_blur() const;
  public:
  void clear_custom_motion_blur();
  bool custom_motion_blur() const;
  void set_custom_motion_blur(bool value);
  private:
  bool _internal_custom_motion_blur() const;
  void _internal_set_custom_motion_blur(bool value);
  public:

  // optional bool custom_include_endpoints = 30;
  bool has_custom_include_endpoints() const;
  private:
  bool _internal_has_custom_include_endpoints() const;
  public:
  void clear_custom_include_endpoints();
  bool custom_include_endpoints() const;
  void set_custom_include_endpoints(bool value);
  private:
  bool _internal_custom_include_endpoints() const;
  void _internal_set_custom_include_endpoints(bool value);
  public:

  // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
  bool has_custom_action_jiggleintensity() const;
  private:
  bool _internal_has_custom_action_jiggleintensity() const;
  public:
  void clear_custom_action_jiggleintensity();
  ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity custom_action_jiggleintensity() const;
  void set_custom_action_jiggleintensity(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity value);
  private:
  ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity _internal_custom_action_jiggleintensity() const;
  void _internal_set_custom_action_jiggleintensity(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity value);
  public:

  // optional uint32 startOffset = 27;
  bool has_startoffset() const;
  private:
  bool _internal_has_startoffset() const;
  public:
  void clear_startoffset();
  ::PROTOBUF_NAMESPACE_ID::uint32 startoffset() const;
  void set_startoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_startoffset() const;
  void _internal_set_startoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 endOffset = 28;
  bool has_endoffset() const;
  private:
  bool _internal_has_endoffset() const;
  public:
  void clear_endoffset();
  ::PROTOBUF_NAMESPACE_ID::uint32 endoffset() const;
  void set_endoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endoffset() const;
  void _internal_set_endoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool custom_shine = 33;
  bool has_custom_shine() const;
  private:
  bool _internal_has_custom_shine() const;
  public:
  void clear_custom_shine();
  bool custom_shine() const;
  void set_custom_shine(bool value);
  private:
  bool _internal_custom_shine() const;
  void _internal_set_custom_shine(bool value);
  public:

  // optional bool custom_cursor = 36;
  bool has_custom_cursor() const;
  private:
  bool _internal_has_custom_cursor() const;
  public:
  void clear_custom_cursor();
  bool custom_cursor() const;
  void set_custom_cursor(bool value);
  private:
  bool _internal_custom_cursor() const;
  void _internal_set_custom_cursor(bool value);
  public:

  // optional bool custom_align_to_path = 37;
  bool has_custom_align_to_path() const;
  private:
  bool _internal_has_custom_align_to_path() const;
  public:
  void clear_custom_align_to_path();
  bool custom_align_to_path() const;
  void set_custom_align_to_path(bool value);
  private:
  bool _internal_custom_align_to_path() const;
  void _internal_set_custom_align_to_path(bool value);
  public:

  // optional double custom_scale_amount = 34;
  bool has_custom_scale_amount() const;
  private:
  bool _internal_has_custom_scale_amount() const;
  public:
  void clear_custom_scale_amount();
  double custom_scale_amount() const;
  void set_custom_scale_amount(double value);
  private:
  double _internal_custom_scale_amount() const;
  void _internal_set_custom_scale_amount(double value);
  public:

  // optional double custom_travel_distance = 35;
  bool has_custom_travel_distance() const;
  private:
  bool _internal_has_custom_travel_distance() const;
  public:
  void clear_custom_travel_distance();
  double custom_travel_distance() const;
  void set_custom_travel_distance(double value);
  private:
  double _internal_custom_travel_distance() const;
  void _internal_set_custom_travel_distance(double value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
  bool has_action_rotationdirection() const;
  private:
  bool _internal_has_action_rotationdirection() const;
  public:
  void clear_action_rotationdirection();
  ::KN::BuildAttributesArchive_BuildAttributesRotationDirection action_rotationdirection() const;
  void set_action_rotationdirection(::KN::BuildAttributesArchive_BuildAttributesRotationDirection value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesRotationDirection _internal_action_rotationdirection() const;
  void _internal_set_action_rotationdirection(::KN::BuildAttributesArchive_BuildAttributesRotationDirection value);
  public:

  // @@protoc_insertion_point(class_scope:KN.BuildAttributesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_animationtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_effect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motionpathstring_;
  ::TSP::Color* database_color_;
  ::KN::AnimationAttributesArchive* animationattributes_;
  ::TSD::PathSourceArchive* action_motionpathsource_;
  ::PROTOBUF_NAMESPACE_ID::uint32 database_direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eventtrigger_;
  double database_delay_;
  double delayautomaticafter_;
  double delayautomaticwith_;
  double database_duration_;
  double action_rotationangle_;
  double action_scalesize_;
  double action_coloralpha_;
  int action_acceleration_;
  int curvestyle_;
  double chartrotation3d_;
  int custom_textdelivery_;
  int custom_deliveryoption_;
  double custom_action_scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_action_repeatcount_;
  bool custom_bounce_;
  bool custom_action_decay_;
  bool custom_motion_blur_;
  bool custom_include_endpoints_;
  int custom_action_jiggleintensity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 startoffset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endoffset_;
  bool custom_shine_;
  bool custom_cursor_;
  bool custom_align_to_path_;
  double custom_scale_amount_;
  double custom_travel_distance_;
  int action_rotationdirection_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class BuildArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.BuildArchive) */ {
 public:
  inline BuildArchive() : BuildArchive(nullptr) {}
  ~BuildArchive() override;
  explicit constexpr BuildArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildArchive(const BuildArchive& from);
  BuildArchive(BuildArchive&& from) noexcept
    : BuildArchive() {
    *this = ::std::move(from);
  }

  inline BuildArchive& operator=(const BuildArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildArchive& operator=(BuildArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildArchive* internal_default_instance() {
    return reinterpret_cast<const BuildArchive*>(
               &_BuildArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BuildArchive& a, BuildArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildArchive* New() const final {
    return new BuildArchive();
  }

  BuildArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BuildArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.BuildArchive";
  }
  protected:
  explicit BuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeliveryFieldNumber = 2,
    kDrawableFieldNumber = 1,
    kAttributesFieldNumber = 4,
    kDurationFieldNumber = 3,
    kChunkIdSeedFieldNumber = 5,
  };
  // required string delivery = 2;
  bool has_delivery() const;
  private:
  bool _internal_has_delivery() const;
  public:
  void clear_delivery();
  const std::string& delivery() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delivery(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delivery();
  PROTOBUF_MUST_USE_RESULT std::string* release_delivery();
  void set_allocated_delivery(std::string* delivery);
  private:
  const std::string& _internal_delivery() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delivery(const std::string& value);
  std::string* _internal_mutable_delivery();
  public:

  // optional .TSP.Reference drawable = 1;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::TSP::Reference& drawable() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_drawable();
  ::TSP::Reference* mutable_drawable();
  void set_allocated_drawable(::TSP::Reference* drawable);
  private:
  const ::TSP::Reference& _internal_drawable() const;
  ::TSP::Reference* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::TSP::Reference* drawable);
  ::TSP::Reference* unsafe_arena_release_drawable();

  // required .KN.BuildAttributesArchive attributes = 4;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::KN::BuildAttributesArchive& attributes() const;
  PROTOBUF_MUST_USE_RESULT ::KN::BuildAttributesArchive* release_attributes();
  ::KN::BuildAttributesArchive* mutable_attributes();
  void set_allocated_attributes(::KN::BuildAttributesArchive* attributes);
  private:
  const ::KN::BuildAttributesArchive& _internal_attributes() const;
  ::KN::BuildAttributesArchive* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::KN::BuildAttributesArchive* attributes);
  ::KN::BuildAttributesArchive* unsafe_arena_release_attributes();

  // optional double duration = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  PROTOBUF_DEPRECATED void clear_duration();
  PROTOBUF_DEPRECATED double duration() const;
  PROTOBUF_DEPRECATED void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // optional int32 chunk_id_seed = 5;
  bool has_chunk_id_seed() const;
  private:
  bool _internal_has_chunk_id_seed() const;
  public:
  void clear_chunk_id_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_id_seed() const;
  void set_chunk_id_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunk_id_seed() const;
  void _internal_set_chunk_id_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KN.BuildArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delivery_;
  ::TSP::Reference* drawable_;
  ::KN::BuildAttributesArchive* attributes_;
  double duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_id_seed_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.PlaceholderArchive) */ {
 public:
  inline PlaceholderArchive() : PlaceholderArchive(nullptr) {}
  ~PlaceholderArchive() override;
  explicit constexpr PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceholderArchive(const PlaceholderArchive& from);
  PlaceholderArchive(PlaceholderArchive&& from) noexcept
    : PlaceholderArchive() {
    *this = ::std::move(from);
  }

  inline PlaceholderArchive& operator=(const PlaceholderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderArchive& operator=(PlaceholderArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderArchive* internal_default_instance() {
    return reinterpret_cast<const PlaceholderArchive*>(
               &_PlaceholderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PlaceholderArchive& a, PlaceholderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderArchive* New() const final {
    return new PlaceholderArchive();
  }

  PlaceholderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaceholderArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlaceholderArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.PlaceholderArchive";
  }
  protected:
  explicit PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlaceholderArchive_Kind Kind;
  static constexpr Kind kKindPlaceholder =
    PlaceholderArchive_Kind_kKindPlaceholder;
  static constexpr Kind kKindSlideNumberPlaceholder =
    PlaceholderArchive_Kind_kKindSlideNumberPlaceholder;
  static constexpr Kind kKindTitlePlaceholder =
    PlaceholderArchive_Kind_kKindTitlePlaceholder;
  static constexpr Kind kKindBodyPlaceholder =
    PlaceholderArchive_Kind_kKindBodyPlaceholder;
  static constexpr Kind kKindObjectPlaceholder =
    PlaceholderArchive_Kind_kKindObjectPlaceholder;
  static inline bool Kind_IsValid(int value) {
    return PlaceholderArchive_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    PlaceholderArchive_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    PlaceholderArchive_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    PlaceholderArchive_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return PlaceholderArchive_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return PlaceholderArchive_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return PlaceholderArchive_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kKindFieldNumber = 2,
  };
  // required .TSWP.ShapeInfoArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ShapeInfoArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ShapeInfoArchive* release_super();
  ::TSWP::ShapeInfoArchive* mutable_super();
  void set_allocated_super(::TSWP::ShapeInfoArchive* super);
  private:
  const ::TSWP::ShapeInfoArchive& _internal_super() const;
  ::TSWP::ShapeInfoArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ShapeInfoArchive* super);
  ::TSWP::ShapeInfoArchive* unsafe_arena_release_super();

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::KN::PlaceholderArchive_Kind kind() const;
  void set_kind(::KN::PlaceholderArchive_Kind value);
  private:
  ::KN::PlaceholderArchive_Kind _internal_kind() const;
  void _internal_set_kind(::KN::PlaceholderArchive_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:KN.PlaceholderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ShapeInfoArchive* super_;
  int kind_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class NoteArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.NoteArchive) */ {
 public:
  inline NoteArchive() : NoteArchive(nullptr) {}
  ~NoteArchive() override;
  explicit constexpr NoteArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteArchive(const NoteArchive& from);
  NoteArchive(NoteArchive&& from) noexcept
    : NoteArchive() {
    *this = ::std::move(from);
  }

  inline NoteArchive& operator=(const NoteArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteArchive& operator=(NoteArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteArchive* internal_default_instance() {
    return reinterpret_cast<const NoteArchive*>(
               &_NoteArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NoteArchive& a, NoteArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoteArchive* New() const final {
    return new NoteArchive();
  }

  NoteArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoteArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NoteArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.NoteArchive";
  }
  protected:
  explicit NoteArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainedStorageFieldNumber = 1,
  };
  // required .TSP.Reference containedStorage = 1;
  bool has_containedstorage() const;
  private:
  bool _internal_has_containedstorage() const;
  public:
  void clear_containedstorage();
  const ::TSP::Reference& containedstorage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_containedstorage();
  ::TSP::Reference* mutable_containedstorage();
  void set_allocated_containedstorage(::TSP::Reference* containedstorage);
  private:
  const ::TSP::Reference& _internal_containedstorage() const;
  ::TSP::Reference* _internal_mutable_containedstorage();
  public:
  void unsafe_arena_set_allocated_containedstorage(
      ::TSP::Reference* containedstorage);
  ::TSP::Reference* unsafe_arena_release_containedstorage();

  // @@protoc_insertion_point(class_scope:KN.NoteArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* containedstorage_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ClassicStylesheetRecordArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ClassicStylesheetRecordArchive) */ {
 public:
  inline ClassicStylesheetRecordArchive() : ClassicStylesheetRecordArchive(nullptr) {}
  ~ClassicStylesheetRecordArchive() override;
  explicit constexpr ClassicStylesheetRecordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassicStylesheetRecordArchive(const ClassicStylesheetRecordArchive& from);
  ClassicStylesheetRecordArchive(ClassicStylesheetRecordArchive&& from) noexcept
    : ClassicStylesheetRecordArchive() {
    *this = ::std::move(from);
  }

  inline ClassicStylesheetRecordArchive& operator=(const ClassicStylesheetRecordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassicStylesheetRecordArchive& operator=(ClassicStylesheetRecordArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassicStylesheetRecordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassicStylesheetRecordArchive* internal_default_instance() {
    return reinterpret_cast<const ClassicStylesheetRecordArchive*>(
               &_ClassicStylesheetRecordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClassicStylesheetRecordArchive& a, ClassicStylesheetRecordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassicStylesheetRecordArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassicStylesheetRecordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassicStylesheetRecordArchive* New() const final {
    return new ClassicStylesheetRecordArchive();
  }

  ClassicStylesheetRecordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassicStylesheetRecordArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassicStylesheetRecordArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClassicStylesheetRecordArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassicStylesheetRecordArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ClassicStylesheetRecordArchive";
  }
  protected:
  explicit ClassicStylesheetRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierToStyleMapFieldNumber = 1,
    kDeprecatedThemeFieldNumber = 2,
  };
  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  int identifier_to_style_map_size() const;
  private:
  int _internal_identifier_to_style_map_size() const;
  public:
  void clear_identifier_to_style_map();
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* mutable_identifier_to_style_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
      mutable_identifier_to_style_map();
  private:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& _internal_identifier_to_style_map(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* _internal_add_identifier_to_style_map();
  public:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& identifier_to_style_map(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* add_identifier_to_style_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
      identifier_to_style_map() const;

  // optional .TSP.Reference deprecated_theme = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_theme() const;
  private:
  bool _internal_has_deprecated_theme() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_theme();
  PROTOBUF_DEPRECATED const ::TSP::Reference& deprecated_theme() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_deprecated_theme();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_deprecated_theme();
  PROTOBUF_DEPRECATED void set_allocated_deprecated_theme(::TSP::Reference* deprecated_theme);
  private:
  const ::TSP::Reference& _internal_deprecated_theme() const;
  ::TSP::Reference* _internal_mutable_deprecated_theme();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_deprecated_theme(
      ::TSP::Reference* deprecated_theme);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_deprecated_theme();

  // @@protoc_insertion_point(class_scope:KN.ClassicStylesheetRecordArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry > identifier_to_style_map_;
  ::TSP::Reference* deprecated_theme_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ClassicThemeRecordArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ClassicThemeRecordArchive) */ {
 public:
  inline ClassicThemeRecordArchive() : ClassicThemeRecordArchive(nullptr) {}
  ~ClassicThemeRecordArchive() override;
  explicit constexpr ClassicThemeRecordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassicThemeRecordArchive(const ClassicThemeRecordArchive& from);
  ClassicThemeRecordArchive(ClassicThemeRecordArchive&& from) noexcept
    : ClassicThemeRecordArchive() {
    *this = ::std::move(from);
  }

  inline ClassicThemeRecordArchive& operator=(const ClassicThemeRecordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassicThemeRecordArchive& operator=(ClassicThemeRecordArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassicThemeRecordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassicThemeRecordArchive* internal_default_instance() {
    return reinterpret_cast<const ClassicThemeRecordArchive*>(
               &_ClassicThemeRecordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClassicThemeRecordArchive& a, ClassicThemeRecordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassicThemeRecordArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassicThemeRecordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassicThemeRecordArchive* New() const final {
    return new ClassicThemeRecordArchive();
  }

  ClassicThemeRecordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassicThemeRecordArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassicThemeRecordArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClassicThemeRecordArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassicThemeRecordArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ClassicThemeRecordArchive";
  }
  protected:
  explicit ClassicThemeRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplatesFieldNumber = 3,
    kUuidFieldNumber = 1,
    kStylesheetRecordFieldNumber = 2,
  };
  // repeated .TSP.Reference templates = 3;
  int templates_size() const;
  private:
  int _internal_templates_size() const;
  public:
  void clear_templates();
  ::TSP::Reference* mutable_templates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_templates();
  private:
  const ::TSP::Reference& _internal_templates(int index) const;
  ::TSP::Reference* _internal_add_templates();
  public:
  const ::TSP::Reference& templates(int index) const;
  ::TSP::Reference* add_templates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      templates() const;

  // optional string uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional .TSP.Reference stylesheetRecord = 2;
  bool has_stylesheetrecord() const;
  private:
  bool _internal_has_stylesheetrecord() const;
  public:
  void clear_stylesheetrecord();
  const ::TSP::Reference& stylesheetrecord() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_stylesheetrecord();
  ::TSP::Reference* mutable_stylesheetrecord();
  void set_allocated_stylesheetrecord(::TSP::Reference* stylesheetrecord);
  private:
  const ::TSP::Reference& _internal_stylesheetrecord() const;
  ::TSP::Reference* _internal_mutable_stylesheetrecord();
  public:
  void unsafe_arena_set_allocated_stylesheetrecord(
      ::TSP::Reference* stylesheetrecord);
  ::TSP::Reference* unsafe_arena_release_stylesheetrecord();

  // @@protoc_insertion_point(class_scope:KN.ClassicThemeRecordArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > templates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::TSP::Reference* stylesheetrecord_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideArchive_SageTagMapEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideArchive.SageTagMapEntry) */ {
 public:
  inline SlideArchive_SageTagMapEntry() : SlideArchive_SageTagMapEntry(nullptr) {}
  ~SlideArchive_SageTagMapEntry() override;
  explicit constexpr SlideArchive_SageTagMapEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideArchive_SageTagMapEntry(const SlideArchive_SageTagMapEntry& from);
  SlideArchive_SageTagMapEntry(SlideArchive_SageTagMapEntry&& from) noexcept
    : SlideArchive_SageTagMapEntry() {
    *this = ::std::move(from);
  }

  inline SlideArchive_SageTagMapEntry& operator=(const SlideArchive_SageTagMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideArchive_SageTagMapEntry& operator=(SlideArchive_SageTagMapEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideArchive_SageTagMapEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideArchive_SageTagMapEntry* internal_default_instance() {
    return reinterpret_cast<const SlideArchive_SageTagMapEntry*>(
               &_SlideArchive_SageTagMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SlideArchive_SageTagMapEntry& a, SlideArchive_SageTagMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideArchive_SageTagMapEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideArchive_SageTagMapEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideArchive_SageTagMapEntry* New() const final {
    return new SlideArchive_SageTagMapEntry();
  }

  SlideArchive_SageTagMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideArchive_SageTagMapEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideArchive_SageTagMapEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideArchive_SageTagMapEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideArchive_SageTagMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideArchive.SageTagMapEntry";
  }
  protected:
  explicit SlideArchive_SageTagMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // required string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_MUST_USE_RESULT std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // required .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:KN.SlideArchive.SageTagMapEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::TSP::Reference* info_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideArchive_InstructionalTextMap_InstructionalTextMapEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry) */ {
 public:
  inline SlideArchive_InstructionalTextMap_InstructionalTextMapEntry() : SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(nullptr) {}
  ~SlideArchive_InstructionalTextMap_InstructionalTextMapEntry() override;
  explicit constexpr SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& from);
  SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(SlideArchive_InstructionalTextMap_InstructionalTextMapEntry&& from) noexcept
    : SlideArchive_InstructionalTextMap_InstructionalTextMapEntry() {
    *this = ::std::move(from);
  }

  inline SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& operator=(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& operator=(SlideArchive_InstructionalTextMap_InstructionalTextMapEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* internal_default_instance() {
    return reinterpret_cast<const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry*>(
               &_SlideArchive_InstructionalTextMap_InstructionalTextMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& a, SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* New() const final {
    return new SlideArchive_InstructionalTextMap_InstructionalTextMapEntry();
  }

  SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideArchive_InstructionalTextMap_InstructionalTextMapEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry";
  }
  protected:
  explicit SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstructionalTextFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // required string instructional_text = 2;
  bool has_instructional_text() const;
  private:
  bool _internal_has_instructional_text() const;
  public:
  void clear_instructional_text();
  const std::string& instructional_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instructional_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instructional_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_instructional_text();
  void set_allocated_instructional_text(std::string* instructional_text);
  private:
  const std::string& _internal_instructional_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instructional_text(const std::string& value);
  std::string* _internal_mutable_instructional_text();
  public:

  // optional .TSP.Reference info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instructional_text_;
  ::TSP::Reference* info_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideArchive_InstructionalTextMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideArchive.InstructionalTextMap) */ {
 public:
  inline SlideArchive_InstructionalTextMap() : SlideArchive_InstructionalTextMap(nullptr) {}
  ~SlideArchive_InstructionalTextMap() override;
  explicit constexpr SlideArchive_InstructionalTextMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideArchive_InstructionalTextMap(const SlideArchive_InstructionalTextMap& from);
  SlideArchive_InstructionalTextMap(SlideArchive_InstructionalTextMap&& from) noexcept
    : SlideArchive_InstructionalTextMap() {
    *this = ::std::move(from);
  }

  inline SlideArchive_InstructionalTextMap& operator=(const SlideArchive_InstructionalTextMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideArchive_InstructionalTextMap& operator=(SlideArchive_InstructionalTextMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideArchive_InstructionalTextMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideArchive_InstructionalTextMap* internal_default_instance() {
    return reinterpret_cast<const SlideArchive_InstructionalTextMap*>(
               &_SlideArchive_InstructionalTextMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SlideArchive_InstructionalTextMap& a, SlideArchive_InstructionalTextMap& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideArchive_InstructionalTextMap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideArchive_InstructionalTextMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideArchive_InstructionalTextMap* New() const final {
    return new SlideArchive_InstructionalTextMap();
  }

  SlideArchive_InstructionalTextMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideArchive_InstructionalTextMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideArchive_InstructionalTextMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideArchive_InstructionalTextMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideArchive_InstructionalTextMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideArchive.InstructionalTextMap";
  }
  protected:
  explicit SlideArchive_InstructionalTextMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SlideArchive_InstructionalTextMap_InstructionalTextMapEntry InstructionalTextMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kInstructionalTextForInfosFieldNumber = 1,
  };
  // repeated .KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry instructional_text_for_infos = 1;
  int instructional_text_for_infos_size() const;
  private:
  int _internal_instructional_text_for_infos_size() const;
  public:
  void clear_instructional_text_for_infos();
  ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* mutable_instructional_text_for_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry >*
      mutable_instructional_text_for_infos();
  private:
  const ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& _internal_instructional_text_for_infos(int index) const;
  ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* _internal_add_instructional_text_for_infos();
  public:
  const ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& instructional_text_for_infos(int index) const;
  ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* add_instructional_text_for_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry >&
      instructional_text_for_infos() const;

  // @@protoc_insertion_point(class_scope:KN.SlideArchive.InstructionalTextMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry > instructional_text_for_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideArchive) */ {
 public:
  inline SlideArchive() : SlideArchive(nullptr) {}
  ~SlideArchive() override;
  explicit constexpr SlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideArchive(const SlideArchive& from);
  SlideArchive(SlideArchive&& from) noexcept
    : SlideArchive() {
    *this = ::std::move(from);
  }

  inline SlideArchive& operator=(const SlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideArchive& operator=(SlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideArchive* internal_default_instance() {
    return reinterpret_cast<const SlideArchive*>(
               &_SlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SlideArchive& a, SlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideArchive* New() const final {
    return new SlideArchive();
  }

  SlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideArchive";
  }
  protected:
  explicit SlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SlideArchive_SageTagMapEntry SageTagMapEntry;
  typedef SlideArchive_InstructionalTextMap InstructionalTextMap;

  // accessors -------------------------------------------------------

  enum : int {
    kBuildsFieldNumber = 2,
    kBuildChunkArchivesFieldNumber = 3,
    kOwnedDrawablesFieldNumber = 7,
    kStaticGuidesFieldNumber = 18,
    kSageTagToInfoMapFieldNumber = 28,
    kBodyParagraphStylesFieldNumber = 31,
    kBodyListStylesFieldNumber = 35,
    kDrawablesZOrderFieldNumber = 42,
    kBuildChunksFieldNumber = 43,
    kInfosUsingObjectPlaceholderGeometryFieldNumber = 44,
    kNameFieldNumber = 10,
    kThumbnailTextForTitlePlaceholderFieldNumber = 37,
    kThumbnailTextForBodyPlaceholderFieldNumber = 38,
    kStyleFieldNumber = 1,
    kTransitionFieldNumber = 4,
    kTitlePlaceholderFieldNumber = 5,
    kBodyPlaceholderFieldNumber = 6,
    kTitlePlaceholderGeometryFieldNumber = 11,
    kBodyPlaceholderGeometryFieldNumber = 14,
    kTemplateSlideFieldNumber = 17,
    kSlideNumberPlaceholderFieldNumber = 20,
    kSlideNumberPlaceholderGeometryFieldNumber = 21,
    kTitleLayoutPropertiesFieldNumber = 24,
    kBodyLayoutPropertiesFieldNumber = 25,
    kSlideNumberLayoutPropertiesFieldNumber = 26,
    kNoteFieldNumber = 27,
    kClassicStylesheetRecordFieldNumber = 29,
    kObjectPlaceholderFieldNumber = 30,
    kUserDefinedGuideStorageFieldNumber = 36,
    kInfoUsingObjectPlaceholderGeometryFieldNumber = 39,
    kInstructionalTextMapFieldNumber = 45,
    kTitlePlaceholderShapeStyleIndexFieldNumber = 12,
    kTitlePlaceholderTextStyleIndexFieldNumber = 13,
    kBodyPlaceholderShapeStyleIndexFieldNumber = 15,
    kBodyPlaceholderTextStyleIndexFieldNumber = 16,
    kSlideNumberPlaceholderShapeStyleIndexFieldNumber = 22,
    kSlideNumberPlaceholderTextStyleIndexFieldNumber = 23,
    kSlideObjectsLayerWithTemplateFieldNumber = 41,
    kInDocumentFieldNumber = 19,
    kDeprecatedObjectPlaceholderVisibleForExportFieldNumber = 34,
    kInfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometryFieldNumber = 40,
  };
  // repeated .TSP.Reference builds = 2;
  int builds_size() const;
  private:
  int _internal_builds_size() const;
  public:
  void clear_builds();
  ::TSP::Reference* mutable_builds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_builds();
  private:
  const ::TSP::Reference& _internal_builds(int index) const;
  ::TSP::Reference* _internal_add_builds();
  public:
  const ::TSP::Reference& builds(int index) const;
  ::TSP::Reference* add_builds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      builds() const;

  // repeated .KN.BuildChunkArchive buildChunkArchives = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int buildchunkarchives_size() const;
  private:
  int _internal_buildchunkarchives_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_buildchunkarchives();
  PROTOBUF_DEPRECATED ::KN::BuildChunkArchive* mutable_buildchunkarchives(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >*
      mutable_buildchunkarchives();
  private:
  const ::KN::BuildChunkArchive& _internal_buildchunkarchives(int index) const;
  ::KN::BuildChunkArchive* _internal_add_buildchunkarchives();
  public:
  PROTOBUF_DEPRECATED const ::KN::BuildChunkArchive& buildchunkarchives(int index) const;
  PROTOBUF_DEPRECATED ::KN::BuildChunkArchive* add_buildchunkarchives();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >&
      buildchunkarchives() const;

  // repeated .TSP.Reference owned_drawables = 7;
  int owned_drawables_size() const;
  private:
  int _internal_owned_drawables_size() const;
  public:
  void clear_owned_drawables();
  ::TSP::Reference* mutable_owned_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_owned_drawables();
  private:
  const ::TSP::Reference& _internal_owned_drawables(int index) const;
  ::TSP::Reference* _internal_add_owned_drawables();
  public:
  const ::TSP::Reference& owned_drawables(int index) const;
  ::TSP::Reference* add_owned_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      owned_drawables() const;

  // repeated .TSD.GuideArchive staticGuides = 18;
  int staticguides_size() const;
  private:
  int _internal_staticguides_size() const;
  public:
  void clear_staticguides();
  ::TSD::GuideArchive* mutable_staticguides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive >*
      mutable_staticguides();
  private:
  const ::TSD::GuideArchive& _internal_staticguides(int index) const;
  ::TSD::GuideArchive* _internal_add_staticguides();
  public:
  const ::TSD::GuideArchive& staticguides(int index) const;
  ::TSD::GuideArchive* add_staticguides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive >&
      staticguides() const;

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  int sage_tag_to_info_map_size() const;
  private:
  int _internal_sage_tag_to_info_map_size() const;
  public:
  void clear_sage_tag_to_info_map();
  ::KN::SlideArchive_SageTagMapEntry* mutable_sage_tag_to_info_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry >*
      mutable_sage_tag_to_info_map();
  private:
  const ::KN::SlideArchive_SageTagMapEntry& _internal_sage_tag_to_info_map(int index) const;
  ::KN::SlideArchive_SageTagMapEntry* _internal_add_sage_tag_to_info_map();
  public:
  const ::KN::SlideArchive_SageTagMapEntry& sage_tag_to_info_map(int index) const;
  ::KN::SlideArchive_SageTagMapEntry* add_sage_tag_to_info_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry >&
      sage_tag_to_info_map() const;

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  int bodyparagraphstyles_size() const;
  private:
  int _internal_bodyparagraphstyles_size() const;
  public:
  void clear_bodyparagraphstyles();
  ::TSP::Reference* mutable_bodyparagraphstyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_bodyparagraphstyles();
  private:
  const ::TSP::Reference& _internal_bodyparagraphstyles(int index) const;
  ::TSP::Reference* _internal_add_bodyparagraphstyles();
  public:
  const ::TSP::Reference& bodyparagraphstyles(int index) const;
  ::TSP::Reference* add_bodyparagraphstyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      bodyparagraphstyles() const;

  // repeated .TSP.Reference bodyListStyles = 35;
  int bodyliststyles_size() const;
  private:
  int _internal_bodyliststyles_size() const;
  public:
  void clear_bodyliststyles();
  ::TSP::Reference* mutable_bodyliststyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_bodyliststyles();
  private:
  const ::TSP::Reference& _internal_bodyliststyles(int index) const;
  ::TSP::Reference* _internal_add_bodyliststyles();
  public:
  const ::TSP::Reference& bodyliststyles(int index) const;
  ::TSP::Reference* add_bodyliststyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      bodyliststyles() const;

  // repeated .TSP.Reference drawables_z_order = 42;
  int drawables_z_order_size() const;
  private:
  int _internal_drawables_z_order_size() const;
  public:
  void clear_drawables_z_order();
  ::TSP::Reference* mutable_drawables_z_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables_z_order();
  private:
  const ::TSP::Reference& _internal_drawables_z_order(int index) const;
  ::TSP::Reference* _internal_add_drawables_z_order();
  public:
  const ::TSP::Reference& drawables_z_order(int index) const;
  ::TSP::Reference* add_drawables_z_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables_z_order() const;

  // repeated .TSP.Reference buildChunks = 43;
  int buildchunks_size() const;
  private:
  int _internal_buildchunks_size() const;
  public:
  void clear_buildchunks();
  ::TSP::Reference* mutable_buildchunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_buildchunks();
  private:
  const ::TSP::Reference& _internal_buildchunks(int index) const;
  ::TSP::Reference* _internal_add_buildchunks();
  public:
  const ::TSP::Reference& buildchunks(int index) const;
  ::TSP::Reference* add_buildchunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      buildchunks() const;

  // repeated .TSP.Reference infos_using_object_placeholder_geometry = 44;
  int infos_using_object_placeholder_geometry_size() const;
  private:
  int _internal_infos_using_object_placeholder_geometry_size() const;
  public:
  void clear_infos_using_object_placeholder_geometry();
  ::TSP::Reference* mutable_infos_using_object_placeholder_geometry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos_using_object_placeholder_geometry();
  private:
  const ::TSP::Reference& _internal_infos_using_object_placeholder_geometry(int index) const;
  ::TSP::Reference* _internal_add_infos_using_object_placeholder_geometry();
  public:
  const ::TSP::Reference& infos_using_object_placeholder_geometry(int index) const;
  ::TSP::Reference* add_infos_using_object_placeholder_geometry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      infos_using_object_placeholder_geometry() const;

  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string thumbnailTextForTitlePlaceholder = 37;
  bool has_thumbnailtextfortitleplaceholder() const;
  private:
  bool _internal_has_thumbnailtextfortitleplaceholder() const;
  public:
  void clear_thumbnailtextfortitleplaceholder();
  const std::string& thumbnailtextfortitleplaceholder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnailtextfortitleplaceholder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnailtextfortitleplaceholder();
  PROTOBUF_MUST_USE_RESULT std::string* release_thumbnailtextfortitleplaceholder();
  void set_allocated_thumbnailtextfortitleplaceholder(std::string* thumbnailtextfortitleplaceholder);
  private:
  const std::string& _internal_thumbnailtextfortitleplaceholder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnailtextfortitleplaceholder(const std::string& value);
  std::string* _internal_mutable_thumbnailtextfortitleplaceholder();
  public:

  // optional string thumbnailTextForBodyPlaceholder = 38;
  bool has_thumbnailtextforbodyplaceholder() const;
  private:
  bool _internal_has_thumbnailtextforbodyplaceholder() const;
  public:
  void clear_thumbnailtextforbodyplaceholder();
  const std::string& thumbnailtextforbodyplaceholder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnailtextforbodyplaceholder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnailtextforbodyplaceholder();
  PROTOBUF_MUST_USE_RESULT std::string* release_thumbnailtextforbodyplaceholder();
  void set_allocated_thumbnailtextforbodyplaceholder(std::string* thumbnailtextforbodyplaceholder);
  private:
  const std::string& _internal_thumbnailtextforbodyplaceholder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnailtextforbodyplaceholder(const std::string& value);
  std::string* _internal_mutable_thumbnailtextforbodyplaceholder();
  public:

  // required .TSP.Reference style = 1;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // required .KN.TransitionArchive transition = 4;
  bool has_transition() const;
  private:
  bool _internal_has_transition() const;
  public:
  void clear_transition();
  const ::KN::TransitionArchive& transition() const;
  PROTOBUF_MUST_USE_RESULT ::KN::TransitionArchive* release_transition();
  ::KN::TransitionArchive* mutable_transition();
  void set_allocated_transition(::KN::TransitionArchive* transition);
  private:
  const ::KN::TransitionArchive& _internal_transition() const;
  ::KN::TransitionArchive* _internal_mutable_transition();
  public:
  void unsafe_arena_set_allocated_transition(
      ::KN::TransitionArchive* transition);
  ::KN::TransitionArchive* unsafe_arena_release_transition();

  // optional .TSP.Reference titlePlaceholder = 5;
  bool has_titleplaceholder() const;
  private:
  bool _internal_has_titleplaceholder() const;
  public:
  void clear_titleplaceholder();
  const ::TSP::Reference& titleplaceholder() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_titleplaceholder();
  ::TSP::Reference* mutable_titleplaceholder();
  void set_allocated_titleplaceholder(::TSP::Reference* titleplaceholder);
  private:
  const ::TSP::Reference& _internal_titleplaceholder() const;
  ::TSP::Reference* _internal_mutable_titleplaceholder();
  public:
  void unsafe_arena_set_allocated_titleplaceholder(
      ::TSP::Reference* titleplaceholder);
  ::TSP::Reference* unsafe_arena_release_titleplaceholder();

  // optional .TSP.Reference bodyPlaceholder = 6;
  bool has_bodyplaceholder() const;
  private:
  bool _internal_has_bodyplaceholder() const;
  public:
  void clear_bodyplaceholder();
  const ::TSP::Reference& bodyplaceholder() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_bodyplaceholder();
  ::TSP::Reference* mutable_bodyplaceholder();
  void set_allocated_bodyplaceholder(::TSP::Reference* bodyplaceholder);
  private:
  const ::TSP::Reference& _internal_bodyplaceholder() const;
  ::TSP::Reference* _internal_mutable_bodyplaceholder();
  public:
  void unsafe_arena_set_allocated_bodyplaceholder(
      ::TSP::Reference* bodyplaceholder);
  ::TSP::Reference* unsafe_arena_release_bodyplaceholder();

  // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
  bool has_titleplaceholdergeometry() const;
  private:
  bool _internal_has_titleplaceholdergeometry() const;
  public:
  void clear_titleplaceholdergeometry();
  const ::TSD::GeometryArchive& titleplaceholdergeometry() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::GeometryArchive* release_titleplaceholdergeometry();
  ::TSD::GeometryArchive* mutable_titleplaceholdergeometry();
  void set_allocated_titleplaceholdergeometry(::TSD::GeometryArchive* titleplaceholdergeometry);
  private:
  const ::TSD::GeometryArchive& _internal_titleplaceholdergeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_titleplaceholdergeometry();
  public:
  void unsafe_arena_set_allocated_titleplaceholdergeometry(
      ::TSD::GeometryArchive* titleplaceholdergeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_titleplaceholdergeometry();

  // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
  bool has_bodyplaceholdergeometry() const;
  private:
  bool _internal_has_bodyplaceholdergeometry() const;
  public:
  void clear_bodyplaceholdergeometry();
  const ::TSD::GeometryArchive& bodyplaceholdergeometry() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::GeometryArchive* release_bodyplaceholdergeometry();
  ::TSD::GeometryArchive* mutable_bodyplaceholdergeometry();
  void set_allocated_bodyplaceholdergeometry(::TSD::GeometryArchive* bodyplaceholdergeometry);
  private:
  const ::TSD::GeometryArchive& _internal_bodyplaceholdergeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_bodyplaceholdergeometry();
  public:
  void unsafe_arena_set_allocated_bodyplaceholdergeometry(
      ::TSD::GeometryArchive* bodyplaceholdergeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_bodyplaceholdergeometry();

  // optional .TSP.Reference template_slide = 17;
  bool has_template_slide() const;
  private:
  bool _internal_has_template_slide() const;
  public:
  void clear_template_slide();
  const ::TSP::Reference& template_slide() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_template_slide();
  ::TSP::Reference* mutable_template_slide();
  void set_allocated_template_slide(::TSP::Reference* template_slide);
  private:
  const ::TSP::Reference& _internal_template_slide() const;
  ::TSP::Reference* _internal_mutable_template_slide();
  public:
  void unsafe_arena_set_allocated_template_slide(
      ::TSP::Reference* template_slide);
  ::TSP::Reference* unsafe_arena_release_template_slide();

  // optional .TSP.Reference slideNumberPlaceholder = 20;
  bool has_slidenumberplaceholder() const;
  private:
  bool _internal_has_slidenumberplaceholder() const;
  public:
  void clear_slidenumberplaceholder();
  const ::TSP::Reference& slidenumberplaceholder() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_slidenumberplaceholder();
  ::TSP::Reference* mutable_slidenumberplaceholder();
  void set_allocated_slidenumberplaceholder(::TSP::Reference* slidenumberplaceholder);
  private:
  const ::TSP::Reference& _internal_slidenumberplaceholder() const;
  ::TSP::Reference* _internal_mutable_slidenumberplaceholder();
  public:
  void unsafe_arena_set_allocated_slidenumberplaceholder(
      ::TSP::Reference* slidenumberplaceholder);
  ::TSP::Reference* unsafe_arena_release_slidenumberplaceholder();

  // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
  bool has_slidenumberplaceholdergeometry() const;
  private:
  bool _internal_has_slidenumberplaceholdergeometry() const;
  public:
  void clear_slidenumberplaceholdergeometry();
  const ::TSD::GeometryArchive& slidenumberplaceholdergeometry() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::GeometryArchive* release_slidenumberplaceholdergeometry();
  ::TSD::GeometryArchive* mutable_slidenumberplaceholdergeometry();
  void set_allocated_slidenumberplaceholdergeometry(::TSD::GeometryArchive* slidenumberplaceholdergeometry);
  private:
  const ::TSD::GeometryArchive& _internal_slidenumberplaceholdergeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_slidenumberplaceholdergeometry();
  public:
  void unsafe_arena_set_allocated_slidenumberplaceholdergeometry(
      ::TSD::GeometryArchive* slidenumberplaceholdergeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_slidenumberplaceholdergeometry();

  // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
  bool has_titlelayoutproperties() const;
  private:
  bool _internal_has_titlelayoutproperties() const;
  public:
  void clear_titlelayoutproperties();
  const ::TSWP::ShapeStylePropertiesArchive& titlelayoutproperties() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ShapeStylePropertiesArchive* release_titlelayoutproperties();
  ::TSWP::ShapeStylePropertiesArchive* mutable_titlelayoutproperties();
  void set_allocated_titlelayoutproperties(::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties);
  private:
  const ::TSWP::ShapeStylePropertiesArchive& _internal_titlelayoutproperties() const;
  ::TSWP::ShapeStylePropertiesArchive* _internal_mutable_titlelayoutproperties();
  public:
  void unsafe_arena_set_allocated_titlelayoutproperties(
      ::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties);
  ::TSWP::ShapeStylePropertiesArchive* unsafe_arena_release_titlelayoutproperties();

  // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
  bool has_bodylayoutproperties() const;
  private:
  bool _internal_has_bodylayoutproperties() const;
  public:
  void clear_bodylayoutproperties();
  const ::TSWP::ShapeStylePropertiesArchive& bodylayoutproperties() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ShapeStylePropertiesArchive* release_bodylayoutproperties();
  ::TSWP::ShapeStylePropertiesArchive* mutable_bodylayoutproperties();
  void set_allocated_bodylayoutproperties(::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties);
  private:
  const ::TSWP::ShapeStylePropertiesArchive& _internal_bodylayoutproperties() const;
  ::TSWP::ShapeStylePropertiesArchive* _internal_mutable_bodylayoutproperties();
  public:
  void unsafe_arena_set_allocated_bodylayoutproperties(
      ::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties);
  ::TSWP::ShapeStylePropertiesArchive* unsafe_arena_release_bodylayoutproperties();

  // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
  bool has_slidenumberlayoutproperties() const;
  private:
  bool _internal_has_slidenumberlayoutproperties() const;
  public:
  void clear_slidenumberlayoutproperties();
  const ::TSWP::ShapeStylePropertiesArchive& slidenumberlayoutproperties() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ShapeStylePropertiesArchive* release_slidenumberlayoutproperties();
  ::TSWP::ShapeStylePropertiesArchive* mutable_slidenumberlayoutproperties();
  void set_allocated_slidenumberlayoutproperties(::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties);
  private:
  const ::TSWP::ShapeStylePropertiesArchive& _internal_slidenumberlayoutproperties() const;
  ::TSWP::ShapeStylePropertiesArchive* _internal_mutable_slidenumberlayoutproperties();
  public:
  void unsafe_arena_set_allocated_slidenumberlayoutproperties(
      ::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties);
  ::TSWP::ShapeStylePropertiesArchive* unsafe_arena_release_slidenumberlayoutproperties();

  // optional .TSP.Reference note = 27;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const ::TSP::Reference& note() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_note();
  ::TSP::Reference* mutable_note();
  void set_allocated_note(::TSP::Reference* note);
  private:
  const ::TSP::Reference& _internal_note() const;
  ::TSP::Reference* _internal_mutable_note();
  public:
  void unsafe_arena_set_allocated_note(
      ::TSP::Reference* note);
  ::TSP::Reference* unsafe_arena_release_note();

  // optional .TSP.Reference classicStylesheetRecord = 29;
  bool has_classicstylesheetrecord() const;
  private:
  bool _internal_has_classicstylesheetrecord() const;
  public:
  void clear_classicstylesheetrecord();
  const ::TSP::Reference& classicstylesheetrecord() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_classicstylesheetrecord();
  ::TSP::Reference* mutable_classicstylesheetrecord();
  void set_allocated_classicstylesheetrecord(::TSP::Reference* classicstylesheetrecord);
  private:
  const ::TSP::Reference& _internal_classicstylesheetrecord() const;
  ::TSP::Reference* _internal_mutable_classicstylesheetrecord();
  public:
  void unsafe_arena_set_allocated_classicstylesheetrecord(
      ::TSP::Reference* classicstylesheetrecord);
  ::TSP::Reference* unsafe_arena_release_classicstylesheetrecord();

  // optional .TSP.Reference objectPlaceholder = 30;
  bool has_objectplaceholder() const;
  private:
  bool _internal_has_objectplaceholder() const;
  public:
  void clear_objectplaceholder();
  const ::TSP::Reference& objectplaceholder() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_objectplaceholder();
  ::TSP::Reference* mutable_objectplaceholder();
  void set_allocated_objectplaceholder(::TSP::Reference* objectplaceholder);
  private:
  const ::TSP::Reference& _internal_objectplaceholder() const;
  ::TSP::Reference* _internal_mutable_objectplaceholder();
  public:
  void unsafe_arena_set_allocated_objectplaceholder(
      ::TSP::Reference* objectplaceholder);
  ::TSP::Reference* unsafe_arena_release_objectplaceholder();

  // optional .TSP.Reference userDefinedGuideStorage = 36;
  bool has_userdefinedguidestorage() const;
  private:
  bool _internal_has_userdefinedguidestorage() const;
  public:
  void clear_userdefinedguidestorage();
  const ::TSP::Reference& userdefinedguidestorage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_userdefinedguidestorage();
  ::TSP::Reference* mutable_userdefinedguidestorage();
  void set_allocated_userdefinedguidestorage(::TSP::Reference* userdefinedguidestorage);
  private:
  const ::TSP::Reference& _internal_userdefinedguidestorage() const;
  ::TSP::Reference* _internal_mutable_userdefinedguidestorage();
  public:
  void unsafe_arena_set_allocated_userdefinedguidestorage(
      ::TSP::Reference* userdefinedguidestorage);
  ::TSP::Reference* unsafe_arena_release_userdefinedguidestorage();

  // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
  bool has_info_using_object_placeholder_geometry() const;
  private:
  bool _internal_has_info_using_object_placeholder_geometry() const;
  public:
  void clear_info_using_object_placeholder_geometry();
  const ::TSP::Reference& info_using_object_placeholder_geometry() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_info_using_object_placeholder_geometry();
  ::TSP::Reference* mutable_info_using_object_placeholder_geometry();
  void set_allocated_info_using_object_placeholder_geometry(::TSP::Reference* info_using_object_placeholder_geometry);
  private:
  const ::TSP::Reference& _internal_info_using_object_placeholder_geometry() const;
  ::TSP::Reference* _internal_mutable_info_using_object_placeholder_geometry();
  public:
  void unsafe_arena_set_allocated_info_using_object_placeholder_geometry(
      ::TSP::Reference* info_using_object_placeholder_geometry);
  ::TSP::Reference* unsafe_arena_release_info_using_object_placeholder_geometry();

  // optional .KN.SlideArchive.InstructionalTextMap instructional_text_map = 45;
  bool has_instructional_text_map() const;
  private:
  bool _internal_has_instructional_text_map() const;
  public:
  void clear_instructional_text_map();
  const ::KN::SlideArchive_InstructionalTextMap& instructional_text_map() const;
  PROTOBUF_MUST_USE_RESULT ::KN::SlideArchive_InstructionalTextMap* release_instructional_text_map();
  ::KN::SlideArchive_InstructionalTextMap* mutable_instructional_text_map();
  void set_allocated_instructional_text_map(::KN::SlideArchive_InstructionalTextMap* instructional_text_map);
  private:
  const ::KN::SlideArchive_InstructionalTextMap& _internal_instructional_text_map() const;
  ::KN::SlideArchive_InstructionalTextMap* _internal_mutable_instructional_text_map();
  public:
  void unsafe_arena_set_allocated_instructional_text_map(
      ::KN::SlideArchive_InstructionalTextMap* instructional_text_map);
  ::KN::SlideArchive_InstructionalTextMap* unsafe_arena_release_instructional_text_map();

  // optional uint32 titlePlaceholderShapeStyleIndex = 12;
  bool has_titleplaceholdershapestyleindex() const;
  private:
  bool _internal_has_titleplaceholdershapestyleindex() const;
  public:
  void clear_titleplaceholdershapestyleindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 titleplaceholdershapestyleindex() const;
  void set_titleplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_titleplaceholdershapestyleindex() const;
  void _internal_set_titleplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 titlePlaceholderTextStyleIndex = 13;
  bool has_titleplaceholdertextstyleindex() const;
  private:
  bool _internal_has_titleplaceholdertextstyleindex() const;
  public:
  void clear_titleplaceholdertextstyleindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 titleplaceholdertextstyleindex() const;
  void set_titleplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_titleplaceholdertextstyleindex() const;
  void _internal_set_titleplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
  bool has_bodyplaceholdershapestyleindex() const;
  private:
  bool _internal_has_bodyplaceholdershapestyleindex() const;
  public:
  void clear_bodyplaceholdershapestyleindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyplaceholdershapestyleindex() const;
  void set_bodyplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bodyplaceholdershapestyleindex() const;
  void _internal_set_bodyplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bodyPlaceholderTextStyleIndex = 16;
  bool has_bodyplaceholdertextstyleindex() const;
  private:
  bool _internal_has_bodyplaceholdertextstyleindex() const;
  public:
  void clear_bodyplaceholdertextstyleindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyplaceholdertextstyleindex() const;
  void set_bodyplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bodyplaceholdertextstyleindex() const;
  void _internal_set_bodyplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
  bool has_slidenumberplaceholdershapestyleindex() const;
  private:
  bool _internal_has_slidenumberplaceholdershapestyleindex() const;
  public:
  void clear_slidenumberplaceholdershapestyleindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 slidenumberplaceholdershapestyleindex() const;
  void set_slidenumberplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slidenumberplaceholdershapestyleindex() const;
  void _internal_set_slidenumberplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
  bool has_slidenumberplaceholdertextstyleindex() const;
  private:
  bool _internal_has_slidenumberplaceholdertextstyleindex() const;
  public:
  void clear_slidenumberplaceholdertextstyleindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 slidenumberplaceholdertextstyleindex() const;
  void set_slidenumberplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slidenumberplaceholdertextstyleindex() const;
  void _internal_set_slidenumberplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool slide_objects_layer_with_template = 41 [default = false];
  bool has_slide_objects_layer_with_template() const;
  private:
  bool _internal_has_slide_objects_layer_with_template() const;
  public:
  void clear_slide_objects_layer_with_template();
  bool slide_objects_layer_with_template() const;
  void set_slide_objects_layer_with_template(bool value);
  private:
  bool _internal_slide_objects_layer_with_template() const;
  void _internal_set_slide_objects_layer_with_template(bool value);
  public:

  // required bool inDocument = 19;
  bool has_indocument() const;
  private:
  bool _internal_has_indocument() const;
  public:
  void clear_indocument();
  bool indocument() const;
  void set_indocument(bool value);
  private:
  bool _internal_indocument() const;
  void _internal_set_indocument(bool value);
  public:

  // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
  bool has_deprecated_objectplaceholdervisibleforexport() const;
  private:
  bool _internal_has_deprecated_objectplaceholdervisibleforexport() const;
  public:
  void clear_deprecated_objectplaceholdervisibleforexport();
  bool deprecated_objectplaceholdervisibleforexport() const;
  void set_deprecated_objectplaceholdervisibleforexport(bool value);
  private:
  bool _internal_deprecated_objectplaceholdervisibleforexport() const;
  void _internal_set_deprecated_objectplaceholdervisibleforexport(bool value);
  public:

  // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
  bool has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const;
  private:
  bool _internal_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const;
  public:
  void clear_info_using_object_placeholder_geometry_matches_object_placeholder_geometry();
  bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const;
  void set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(bool value);
  private:
  bool _internal_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const;
  void _internal_set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > builds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive > buildchunkarchives_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > owned_drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive > staticguides_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry > sage_tag_to_info_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > bodyparagraphstyles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > bodyliststyles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_z_order_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > buildchunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > infos_using_object_placeholder_geometry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnailtextfortitleplaceholder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnailtextforbodyplaceholder_;
  ::TSP::Reference* style_;
  ::KN::TransitionArchive* transition_;
  ::TSP::Reference* titleplaceholder_;
  ::TSP::Reference* bodyplaceholder_;
  ::TSD::GeometryArchive* titleplaceholdergeometry_;
  ::TSD::GeometryArchive* bodyplaceholdergeometry_;
  ::TSP::Reference* template_slide_;
  ::TSP::Reference* slidenumberplaceholder_;
  ::TSD::GeometryArchive* slidenumberplaceholdergeometry_;
  ::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties_;
  ::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties_;
  ::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties_;
  ::TSP::Reference* note_;
  ::TSP::Reference* classicstylesheetrecord_;
  ::TSP::Reference* objectplaceholder_;
  ::TSP::Reference* userdefinedguidestorage_;
  ::TSP::Reference* info_using_object_placeholder_geometry_;
  ::KN::SlideArchive_InstructionalTextMap* instructional_text_map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 titleplaceholdershapestyleindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 titleplaceholdertextstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyplaceholdershapestyleindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyplaceholdertextstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slidenumberplaceholdershapestyleindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slidenumberplaceholdertextstyleindex_;
  bool slide_objects_layer_with_template_;
  bool indocument_;
  bool deprecated_objectplaceholdervisibleforexport_;
  bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideNodeArchive_SlideSpecificHyperlinkMapEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry) */ {
 public:
  inline SlideNodeArchive_SlideSpecificHyperlinkMapEntry() : SlideNodeArchive_SlideSpecificHyperlinkMapEntry(nullptr) {}
  ~SlideNodeArchive_SlideSpecificHyperlinkMapEntry() override;
  explicit constexpr SlideNodeArchive_SlideSpecificHyperlinkMapEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideNodeArchive_SlideSpecificHyperlinkMapEntry(const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& from);
  SlideNodeArchive_SlideSpecificHyperlinkMapEntry(SlideNodeArchive_SlideSpecificHyperlinkMapEntry&& from) noexcept
    : SlideNodeArchive_SlideSpecificHyperlinkMapEntry() {
    *this = ::std::move(from);
  }

  inline SlideNodeArchive_SlideSpecificHyperlinkMapEntry& operator=(const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideNodeArchive_SlideSpecificHyperlinkMapEntry& operator=(SlideNodeArchive_SlideSpecificHyperlinkMapEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideNodeArchive_SlideSpecificHyperlinkMapEntry* internal_default_instance() {
    return reinterpret_cast<const SlideNodeArchive_SlideSpecificHyperlinkMapEntry*>(
               &_SlideNodeArchive_SlideSpecificHyperlinkMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SlideNodeArchive_SlideSpecificHyperlinkMapEntry& a, SlideNodeArchive_SlideSpecificHyperlinkMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideNodeArchive_SlideSpecificHyperlinkMapEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideNodeArchive_SlideSpecificHyperlinkMapEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideNodeArchive_SlideSpecificHyperlinkMapEntry* New() const final {
    return new SlideNodeArchive_SlideSpecificHyperlinkMapEntry();
  }

  SlideNodeArchive_SlideSpecificHyperlinkMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideNodeArchive_SlideSpecificHyperlinkMapEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideNodeArchive_SlideSpecificHyperlinkMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry";
  }
  protected:
  explicit SlideNodeArchive_SlideSpecificHyperlinkMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoOrStorageIDStringFieldNumber = 2,
    kSlideNodeIDStringFieldNumber = 1,
  };
  // repeated string infoOrStorageIDString = 2;
  int infoorstorageidstring_size() const;
  private:
  int _internal_infoorstorageidstring_size() const;
  public:
  void clear_infoorstorageidstring();
  const std::string& infoorstorageidstring(int index) const;
  std::string* mutable_infoorstorageidstring(int index);
  void set_infoorstorageidstring(int index, const std::string& value);
  void set_infoorstorageidstring(int index, std::string&& value);
  void set_infoorstorageidstring(int index, const char* value);
  void set_infoorstorageidstring(int index, const char* value, size_t size);
  std::string* add_infoorstorageidstring();
  void add_infoorstorageidstring(const std::string& value);
  void add_infoorstorageidstring(std::string&& value);
  void add_infoorstorageidstring(const char* value);
  void add_infoorstorageidstring(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& infoorstorageidstring() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_infoorstorageidstring();
  private:
  const std::string& _internal_infoorstorageidstring(int index) const;
  std::string* _internal_add_infoorstorageidstring();
  public:

  // required string slideNodeIDString = 1;
  bool has_slidenodeidstring() const;
  private:
  bool _internal_has_slidenodeidstring() const;
  public:
  void clear_slidenodeidstring();
  const std::string& slidenodeidstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slidenodeidstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slidenodeidstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_slidenodeidstring();
  void set_allocated_slidenodeidstring(std::string* slidenodeidstring);
  private:
  const std::string& _internal_slidenodeidstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slidenodeidstring(const std::string& value);
  std::string* _internal_mutable_slidenodeidstring();
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> infoorstorageidstring_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slidenodeidstring_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideNodeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideNodeArchive) */ {
 public:
  inline SlideNodeArchive() : SlideNodeArchive(nullptr) {}
  ~SlideNodeArchive() override;
  explicit constexpr SlideNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideNodeArchive(const SlideNodeArchive& from);
  SlideNodeArchive(SlideNodeArchive&& from) noexcept
    : SlideNodeArchive() {
    *this = ::std::move(from);
  }

  inline SlideNodeArchive& operator=(const SlideNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideNodeArchive& operator=(SlideNodeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideNodeArchive* internal_default_instance() {
    return reinterpret_cast<const SlideNodeArchive*>(
               &_SlideNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SlideNodeArchive& a, SlideNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideNodeArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideNodeArchive* New() const final {
    return new SlideNodeArchive();
  }

  SlideNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideNodeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideNodeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideNodeArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideNodeArchive";
  }
  protected:
  explicit SlideNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SlideNodeArchive_SlideSpecificHyperlinkMapEntry SlideSpecificHyperlinkMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 1,
    kDatabaseThumbnailsFieldNumber = 9,
    kThumbnailSizesFieldNumber = 10,
    kThumbnailsFieldNumber = 16,
    kSlideSpecificHyperlinkMapFieldNumber = 24,
    kDigestsForDatasNeedingDownloadForThumbnailFieldNumber = 25,
    kUniqueIdentifierFieldNumber = 11,
    kCopyFromSlideIdentifierFieldNumber = 12,
    kSlideFieldNumber = 2,
    kDatabaseThumbnailFieldNumber = 3,
    kThumbnailsAreDirtyFieldNumber = 14,
    kIsHiddenFieldNumber = 4,
    kIsCollapsedFieldNumber = 5,
    kIsCollapsedInOutlineViewFieldNumber = 17,
    kHasBodyInOutlineViewFieldNumber = 19,
    kHasBuildsFieldNumber = 6,
    kHasTransitionFieldNumber = 7,
    kHasNoteFieldNumber = 8,
    kSlideSpecificHyperlinkCountFieldNumber = 13,
    kBuildEventCountFieldNumber = 15,
    kIsSlideNumberVisibleFieldNumber = 18,
    kBuildEventCountIsUpToDateFieldNumber = 22,
    kHasExplicitBuildsFieldNumber = 20,
    kHasExplicitBuildsIsUpToDateFieldNumber = 23,
    kBuildEventCountCacheVersionFieldNumber = 26,
    kHasExplicitBuildsCacheVersionFieldNumber = 27,
    kHasBackgroundAlphaFieldNumber = 28,
    kDepthFieldNumber = 21,
  };
  // repeated .TSP.Reference children = 1;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // repeated .TSP.Reference database_thumbnails = 9 [deprecated = true];
  PROTOBUF_DEPRECATED int database_thumbnails_size() const;
  private:
  int _internal_database_thumbnails_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_thumbnails();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_database_thumbnails(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_database_thumbnails();
  private:
  const ::TSP::Reference& _internal_database_thumbnails(int index) const;
  ::TSP::Reference* _internal_add_database_thumbnails();
  public:
  PROTOBUF_DEPRECATED const ::TSP::Reference& database_thumbnails(int index) const;
  PROTOBUF_DEPRECATED ::TSP::Reference* add_database_thumbnails();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      database_thumbnails() const;

  // repeated .TSP.Size thumbnailSizes = 10;
  int thumbnailsizes_size() const;
  private:
  int _internal_thumbnailsizes_size() const;
  public:
  void clear_thumbnailsizes();
  ::TSP::Size* mutable_thumbnailsizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >*
      mutable_thumbnailsizes();
  private:
  const ::TSP::Size& _internal_thumbnailsizes(int index) const;
  ::TSP::Size* _internal_add_thumbnailsizes();
  public:
  const ::TSP::Size& thumbnailsizes(int index) const;
  ::TSP::Size* add_thumbnailsizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >&
      thumbnailsizes() const;

  // repeated .TSP.DataReference thumbnails = 16;
  int thumbnails_size() const;
  private:
  int _internal_thumbnails_size() const;
  public:
  void clear_thumbnails();
  ::TSP::DataReference* mutable_thumbnails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
      mutable_thumbnails();
  private:
  const ::TSP::DataReference& _internal_thumbnails(int index) const;
  ::TSP::DataReference* _internal_add_thumbnails();
  public:
  const ::TSP::DataReference& thumbnails(int index) const;
  ::TSP::DataReference* add_thumbnails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
      thumbnails() const;

  // repeated .KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry slideSpecificHyperlinkMap = 24;
  int slidespecifichyperlinkmap_size() const;
  private:
  int _internal_slidespecifichyperlinkmap_size() const;
  public:
  void clear_slidespecifichyperlinkmap();
  ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry* mutable_slidespecifichyperlinkmap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry >*
      mutable_slidespecifichyperlinkmap();
  private:
  const ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry& _internal_slidespecifichyperlinkmap(int index) const;
  ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry* _internal_add_slidespecifichyperlinkmap();
  public:
  const ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry& slidespecifichyperlinkmap(int index) const;
  ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry* add_slidespecifichyperlinkmap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry >&
      slidespecifichyperlinkmap() const;

  // repeated string digests_for_datas_needing_download_for_thumbnail = 25;
  int digests_for_datas_needing_download_for_thumbnail_size() const;
  private:
  int _internal_digests_for_datas_needing_download_for_thumbnail_size() const;
  public:
  void clear_digests_for_datas_needing_download_for_thumbnail();
  const std::string& digests_for_datas_needing_download_for_thumbnail(int index) const;
  std::string* mutable_digests_for_datas_needing_download_for_thumbnail(int index);
  void set_digests_for_datas_needing_download_for_thumbnail(int index, const std::string& value);
  void set_digests_for_datas_needing_download_for_thumbnail(int index, std::string&& value);
  void set_digests_for_datas_needing_download_for_thumbnail(int index, const char* value);
  void set_digests_for_datas_needing_download_for_thumbnail(int index, const char* value, size_t size);
  std::string* add_digests_for_datas_needing_download_for_thumbnail();
  void add_digests_for_datas_needing_download_for_thumbnail(const std::string& value);
  void add_digests_for_datas_needing_download_for_thumbnail(std::string&& value);
  void add_digests_for_datas_needing_download_for_thumbnail(const char* value);
  void add_digests_for_datas_needing_download_for_thumbnail(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& digests_for_datas_needing_download_for_thumbnail() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_digests_for_datas_needing_download_for_thumbnail();
  private:
  const std::string& _internal_digests_for_datas_needing_download_for_thumbnail(int index) const;
  std::string* _internal_add_digests_for_datas_needing_download_for_thumbnail();
  public:

  // optional string uniqueIdentifier = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_uniqueidentifier() const;
  private:
  bool _internal_has_uniqueidentifier() const;
  public:
  PROTOBUF_DEPRECATED void clear_uniqueidentifier();
  PROTOBUF_DEPRECATED const std::string& uniqueidentifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_uniqueidentifier(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_uniqueidentifier();
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED std::string* release_uniqueidentifier();
  PROTOBUF_DEPRECATED void set_allocated_uniqueidentifier(std::string* uniqueidentifier);
  private:
  const std::string& _internal_uniqueidentifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uniqueidentifier(const std::string& value);
  std::string* _internal_mutable_uniqueidentifier();
  public:

  // optional string copyFromSlideIdentifier = 12;
  bool has_copyfromslideidentifier() const;
  private:
  bool _internal_has_copyfromslideidentifier() const;
  public:
  void clear_copyfromslideidentifier();
  const std::string& copyfromslideidentifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copyfromslideidentifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copyfromslideidentifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_copyfromslideidentifier();
  void set_allocated_copyfromslideidentifier(std::string* copyfromslideidentifier);
  private:
  const std::string& _internal_copyfromslideidentifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copyfromslideidentifier(const std::string& value);
  std::string* _internal_mutable_copyfromslideidentifier();
  public:

  // optional .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // optional .TSP.Reference database_thumbnail = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_database_thumbnail() const;
  private:
  bool _internal_has_database_thumbnail() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_thumbnail();
  PROTOBUF_DEPRECATED const ::TSP::Reference& database_thumbnail() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_database_thumbnail();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_database_thumbnail();
  PROTOBUF_DEPRECATED void set_allocated_database_thumbnail(::TSP::Reference* database_thumbnail);
  private:
  const ::TSP::Reference& _internal_database_thumbnail() const;
  ::TSP::Reference* _internal_mutable_database_thumbnail();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_database_thumbnail(
      ::TSP::Reference* database_thumbnail);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_database_thumbnail();

  // optional bool thumbnailsAreDirty = 14;
  bool has_thumbnailsaredirty() const;
  private:
  bool _internal_has_thumbnailsaredirty() const;
  public:
  void clear_thumbnailsaredirty();
  bool thumbnailsaredirty() const;
  void set_thumbnailsaredirty(bool value);
  private:
  bool _internal_thumbnailsaredirty() const;
  void _internal_set_thumbnailsaredirty(bool value);
  public:

  // required bool isHidden = 4;
  bool has_ishidden() const;
  private:
  bool _internal_has_ishidden() const;
  public:
  void clear_ishidden();
  bool ishidden() const;
  void set_ishidden(bool value);
  private:
  bool _internal_ishidden() const;
  void _internal_set_ishidden(bool value);
  public:

  // optional bool isCollapsed = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_iscollapsed() const;
  private:
  bool _internal_has_iscollapsed() const;
  public:
  PROTOBUF_DEPRECATED void clear_iscollapsed();
  PROTOBUF_DEPRECATED bool iscollapsed() const;
  PROTOBUF_DEPRECATED void set_iscollapsed(bool value);
  private:
  bool _internal_iscollapsed() const;
  void _internal_set_iscollapsed(bool value);
  public:

  // optional bool isCollapsedInOutlineView = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_iscollapsedinoutlineview() const;
  private:
  bool _internal_has_iscollapsedinoutlineview() const;
  public:
  PROTOBUF_DEPRECATED void clear_iscollapsedinoutlineview();
  PROTOBUF_DEPRECATED bool iscollapsedinoutlineview() const;
  PROTOBUF_DEPRECATED void set_iscollapsedinoutlineview(bool value);
  private:
  bool _internal_iscollapsedinoutlineview() const;
  void _internal_set_iscollapsedinoutlineview(bool value);
  public:

  // optional bool hasBodyInOutlineView = 19 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_hasbodyinoutlineview() const;
  private:
  bool _internal_has_hasbodyinoutlineview() const;
  public:
  PROTOBUF_DEPRECATED void clear_hasbodyinoutlineview();
  PROTOBUF_DEPRECATED bool hasbodyinoutlineview() const;
  PROTOBUF_DEPRECATED void set_hasbodyinoutlineview(bool value);
  private:
  bool _internal_hasbodyinoutlineview() const;
  void _internal_set_hasbodyinoutlineview(bool value);
  public:

  // required bool hasBuilds = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_hasbuilds() const;
  private:
  bool _internal_has_hasbuilds() const;
  public:
  PROTOBUF_DEPRECATED void clear_hasbuilds();
  PROTOBUF_DEPRECATED bool hasbuilds() const;
  PROTOBUF_DEPRECATED void set_hasbuilds(bool value);
  private:
  bool _internal_hasbuilds() const;
  void _internal_set_hasbuilds(bool value);
  public:

  // required bool hasTransition = 7;
  bool has_hastransition() const;
  private:
  bool _internal_has_hastransition() const;
  public:
  void clear_hastransition();
  bool hastransition() const;
  void set_hastransition(bool value);
  private:
  bool _internal_hastransition() const;
  void _internal_set_hastransition(bool value);
  public:

  // optional bool hasNote = 8;
  bool has_hasnote() const;
  private:
  bool _internal_has_hasnote() const;
  public:
  void clear_hasnote();
  bool hasnote() const;
  void set_hasnote(bool value);
  private:
  bool _internal_hasnote() const;
  void _internal_set_hasnote(bool value);
  public:

  // optional uint32 slideSpecificHyperlinkCount = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_slidespecifichyperlinkcount() const;
  private:
  bool _internal_has_slidespecifichyperlinkcount() const;
  public:
  PROTOBUF_DEPRECATED void clear_slidespecifichyperlinkcount();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 slidespecifichyperlinkcount() const;
  PROTOBUF_DEPRECATED void set_slidespecifichyperlinkcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slidespecifichyperlinkcount() const;
  void _internal_set_slidespecifichyperlinkcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 build_event_count = 15;
  bool has_build_event_count() const;
  private:
  bool _internal_has_build_event_count() const;
  public:
  void clear_build_event_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 build_event_count() const;
  void set_build_event_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_build_event_count() const;
  void _internal_set_build_event_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool isSlideNumberVisible = 18 [default = false];
  bool has_isslidenumbervisible() const;
  private:
  bool _internal_has_isslidenumbervisible() const;
  public:
  void clear_isslidenumbervisible();
  bool isslidenumbervisible() const;
  void set_isslidenumbervisible(bool value);
  private:
  bool _internal_isslidenumbervisible() const;
  void _internal_set_isslidenumbervisible(bool value);
  public:

  // optional bool build_event_count_is_up_to_date = 22 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_build_event_count_is_up_to_date() const;
  private:
  bool _internal_has_build_event_count_is_up_to_date() const;
  public:
  PROTOBUF_DEPRECATED void clear_build_event_count_is_up_to_date();
  PROTOBUF_DEPRECATED bool build_event_count_is_up_to_date() const;
  PROTOBUF_DEPRECATED void set_build_event_count_is_up_to_date(bool value);
  private:
  bool _internal_build_event_count_is_up_to_date() const;
  void _internal_set_build_event_count_is_up_to_date(bool value);
  public:

  // optional bool has_explicit_builds = 20;
  bool has_has_explicit_builds() const;
  private:
  bool _internal_has_has_explicit_builds() const;
  public:
  void clear_has_explicit_builds();
  bool has_explicit_builds() const;
  void set_has_explicit_builds(bool value);
  private:
  bool _internal_has_explicit_builds() const;
  void _internal_set_has_explicit_builds(bool value);
  public:

  // optional bool has_explicit_builds_is_up_to_date = 23 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_has_explicit_builds_is_up_to_date() const;
  private:
  bool _internal_has_has_explicit_builds_is_up_to_date() const;
  public:
  PROTOBUF_DEPRECATED void clear_has_explicit_builds_is_up_to_date();
  PROTOBUF_DEPRECATED bool has_explicit_builds_is_up_to_date() const;
  PROTOBUF_DEPRECATED void set_has_explicit_builds_is_up_to_date(bool value);
  private:
  bool _internal_has_explicit_builds_is_up_to_date() const;
  void _internal_set_has_explicit_builds_is_up_to_date(bool value);
  public:

  // optional uint32 build_event_count_cache_version = 26;
  bool has_build_event_count_cache_version() const;
  private:
  bool _internal_has_build_event_count_cache_version() const;
  public:
  void clear_build_event_count_cache_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 build_event_count_cache_version() const;
  void set_build_event_count_cache_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_build_event_count_cache_version() const;
  void _internal_set_build_event_count_cache_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 has_explicit_builds_cache_version = 27;
  bool has_has_explicit_builds_cache_version() const;
  private:
  bool _internal_has_has_explicit_builds_cache_version() const;
  public:
  void clear_has_explicit_builds_cache_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 has_explicit_builds_cache_version() const;
  void set_has_explicit_builds_cache_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_has_explicit_builds_cache_version() const;
  void _internal_set_has_explicit_builds_cache_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool has_background_alpha = 28;
  bool has_has_background_alpha() const;
  private:
  bool _internal_has_has_background_alpha() const;
  public:
  void clear_has_background_alpha();
  bool has_background_alpha() const;
  void set_has_background_alpha(bool value);
  private:
  bool _internal_has_background_alpha() const;
  void _internal_set_has_background_alpha(bool value);
  public:

  // optional uint32 depth = 21 [default = 1];
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > database_thumbnails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size > thumbnailsizes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference > thumbnails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry > slidespecifichyperlinkmap_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> digests_for_datas_needing_download_for_thumbnail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uniqueidentifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copyfromslideidentifier_;
  ::TSP::Reference* slide_;
  ::TSP::Reference* database_thumbnail_;
  bool thumbnailsaredirty_;
  bool ishidden_;
  bool iscollapsed_;
  bool iscollapsedinoutlineview_;
  bool hasbodyinoutlineview_;
  bool hasbuilds_;
  bool hastransition_;
  bool hasnote_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slidespecifichyperlinkcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 build_event_count_;
  bool isslidenumbervisible_;
  bool build_event_count_is_up_to_date_;
  bool has_explicit_builds_;
  bool has_explicit_builds_is_up_to_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 build_event_count_cache_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 has_explicit_builds_cache_version_;
  bool has_background_alpha_;
  ::PROTOBUF_NAMESPACE_ID::uint32 depth_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class DesktopUILayoutArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.DesktopUILayoutArchive) */ {
 public:
  inline DesktopUILayoutArchive() : DesktopUILayoutArchive(nullptr) {}
  ~DesktopUILayoutArchive() override;
  explicit constexpr DesktopUILayoutArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DesktopUILayoutArchive(const DesktopUILayoutArchive& from);
  DesktopUILayoutArchive(DesktopUILayoutArchive&& from) noexcept
    : DesktopUILayoutArchive() {
    *this = ::std::move(from);
  }

  inline DesktopUILayoutArchive& operator=(const DesktopUILayoutArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DesktopUILayoutArchive& operator=(DesktopUILayoutArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DesktopUILayoutArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DesktopUILayoutArchive* internal_default_instance() {
    return reinterpret_cast<const DesktopUILayoutArchive*>(
               &_DesktopUILayoutArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DesktopUILayoutArchive& a, DesktopUILayoutArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DesktopUILayoutArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DesktopUILayoutArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DesktopUILayoutArchive* New() const final {
    return new DesktopUILayoutArchive();
  }

  DesktopUILayoutArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DesktopUILayoutArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DesktopUILayoutArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DesktopUILayoutArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DesktopUILayoutArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.DesktopUILayoutArchive";
  }
  protected:
  explicit DesktopUILayoutArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DesktopUILayoutArchive_SidebarViewMode SidebarViewMode;
  static constexpr SidebarViewMode kSidebarViewModeNavigator =
    DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeNavigator;
  static constexpr SidebarViewMode kSidebarViewModeOutline =
    DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeOutline;
  static inline bool SidebarViewMode_IsValid(int value) {
    return DesktopUILayoutArchive_SidebarViewMode_IsValid(value);
  }
  static constexpr SidebarViewMode SidebarViewMode_MIN =
    DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MIN;
  static constexpr SidebarViewMode SidebarViewMode_MAX =
    DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MAX;
  static constexpr int SidebarViewMode_ARRAYSIZE =
    DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SidebarViewMode_descriptor() {
    return DesktopUILayoutArchive_SidebarViewMode_descriptor();
  }
  template<typename T>
  static inline const std::string& SidebarViewMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SidebarViewMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SidebarViewMode_Name.");
    return DesktopUILayoutArchive_SidebarViewMode_Name(enum_t_value);
  }
  static inline bool SidebarViewMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SidebarViewMode* value) {
    return DesktopUILayoutArchive_SidebarViewMode_Parse(name, value);
  }

  typedef DesktopUILayoutArchive_InspectorPaneViewMode InspectorPaneViewMode;
  static constexpr InspectorPaneViewMode kInspectorPaneViewModeFormat =
    DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat;
  static constexpr InspectorPaneViewMode kInspectorPaneViewModeAnimate =
    DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeAnimate;
  static constexpr InspectorPaneViewMode kInspectorPaneViewModeSetup =
    DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeSetup;
  static inline bool InspectorPaneViewMode_IsValid(int value) {
    return DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(value);
  }
  static constexpr InspectorPaneViewMode InspectorPaneViewMode_MIN =
    DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MIN;
  static constexpr InspectorPaneViewMode InspectorPaneViewMode_MAX =
    DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX;
  static constexpr int InspectorPaneViewMode_ARRAYSIZE =
    DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InspectorPaneViewMode_descriptor() {
    return DesktopUILayoutArchive_InspectorPaneViewMode_descriptor();
  }
  template<typename T>
  static inline const std::string& InspectorPaneViewMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InspectorPaneViewMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InspectorPaneViewMode_Name.");
    return DesktopUILayoutArchive_InspectorPaneViewMode_Name(enum_t_value);
  }
  static inline bool InspectorPaneViewMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InspectorPaneViewMode* value) {
    return DesktopUILayoutArchive_InspectorPaneViewMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSidebarViewModeFieldNumber = 2,
    kSidebarVisibleFieldNumber = 1,
    kNotesVisibleFieldNumber = 3,
    kLightTableVisibleFieldNumber = 5,
    kShowingTemplateSlidesFieldNumber = 8,
    kInspectorPaneViewModeFieldNumber = 7,
    kInspectorPaneAutohiddenFieldNumber = 9,
    kElementListVisibleFieldNumber = 10,
    kInspectorPaneVisibleFieldNumber = 6,
  };
  // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
  bool has_sidebar_view_mode() const;
  private:
  bool _internal_has_sidebar_view_mode() const;
  public:
  void clear_sidebar_view_mode();
  ::KN::DesktopUILayoutArchive_SidebarViewMode sidebar_view_mode() const;
  void set_sidebar_view_mode(::KN::DesktopUILayoutArchive_SidebarViewMode value);
  private:
  ::KN::DesktopUILayoutArchive_SidebarViewMode _internal_sidebar_view_mode() const;
  void _internal_set_sidebar_view_mode(::KN::DesktopUILayoutArchive_SidebarViewMode value);
  public:

  // optional bool sidebar_visible = 1;
  bool has_sidebar_visible() const;
  private:
  bool _internal_has_sidebar_visible() const;
  public:
  void clear_sidebar_visible();
  bool sidebar_visible() const;
  void set_sidebar_visible(bool value);
  private:
  bool _internal_sidebar_visible() const;
  void _internal_set_sidebar_visible(bool value);
  public:

  // optional bool notes_visible = 3;
  bool has_notes_visible() const;
  private:
  bool _internal_has_notes_visible() const;
  public:
  void clear_notes_visible();
  bool notes_visible() const;
  void set_notes_visible(bool value);
  private:
  bool _internal_notes_visible() const;
  void _internal_set_notes_visible(bool value);
  public:

  // optional bool light_table_visible = 5;
  bool has_light_table_visible() const;
  private:
  bool _internal_has_light_table_visible() const;
  public:
  void clear_light_table_visible();
  bool light_table_visible() const;
  void set_light_table_visible(bool value);
  private:
  bool _internal_light_table_visible() const;
  void _internal_set_light_table_visible(bool value);
  public:

  // optional bool showing_template_slides = 8;
  bool has_showing_template_slides() const;
  private:
  bool _internal_has_showing_template_slides() const;
  public:
  void clear_showing_template_slides();
  bool showing_template_slides() const;
  void set_showing_template_slides(bool value);
  private:
  bool _internal_showing_template_slides() const;
  void _internal_set_showing_template_slides(bool value);
  public:

  // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
  bool has_inspector_pane_view_mode() const;
  private:
  bool _internal_has_inspector_pane_view_mode() const;
  public:
  void clear_inspector_pane_view_mode();
  ::KN::DesktopUILayoutArchive_InspectorPaneViewMode inspector_pane_view_mode() const;
  void set_inspector_pane_view_mode(::KN::DesktopUILayoutArchive_InspectorPaneViewMode value);
  private:
  ::KN::DesktopUILayoutArchive_InspectorPaneViewMode _internal_inspector_pane_view_mode() const;
  void _internal_set_inspector_pane_view_mode(::KN::DesktopUILayoutArchive_InspectorPaneViewMode value);
  public:

  // optional bool inspector_pane_autohidden = 9;
  bool has_inspector_pane_autohidden() const;
  private:
  bool _internal_has_inspector_pane_autohidden() const;
  public:
  void clear_inspector_pane_autohidden();
  bool inspector_pane_autohidden() const;
  void set_inspector_pane_autohidden(bool value);
  private:
  bool _internal_inspector_pane_autohidden() const;
  void _internal_set_inspector_pane_autohidden(bool value);
  public:

  // optional bool element_list_visible = 10;
  bool has_element_list_visible() const;
  private:
  bool _internal_has_element_list_visible() const;
  public:
  void clear_element_list_visible();
  bool element_list_visible() const;
  void set_element_list_visible(bool value);
  private:
  bool _internal_element_list_visible() const;
  void _internal_set_element_list_visible(bool value);
  public:

  // optional bool inspector_pane_visible = 6 [default = true];
  bool has_inspector_pane_visible() const;
  private:
  bool _internal_has_inspector_pane_visible() const;
  public:
  void clear_inspector_pane_visible();
  bool inspector_pane_visible() const;
  void set_inspector_pane_visible(bool value);
  private:
  bool _internal_inspector_pane_visible() const;
  void _internal_set_inspector_pane_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.DesktopUILayoutArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int sidebar_view_mode_;
  bool sidebar_visible_;
  bool notes_visible_;
  bool light_table_visible_;
  bool showing_template_slides_;
  int inspector_pane_view_mode_;
  bool inspector_pane_autohidden_;
  bool element_list_visible_;
  bool inspector_pane_visible_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class UIStateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.UIStateArchive) */ {
 public:
  inline UIStateArchive() : UIStateArchive(nullptr) {}
  ~UIStateArchive() override;
  explicit constexpr UIStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UIStateArchive(const UIStateArchive& from);
  UIStateArchive(UIStateArchive&& from) noexcept
    : UIStateArchive() {
    *this = ::std::move(from);
  }

  inline UIStateArchive& operator=(const UIStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIStateArchive& operator=(UIStateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UIStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UIStateArchive* internal_default_instance() {
    return reinterpret_cast<const UIStateArchive*>(
               &_UIStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UIStateArchive& a, UIStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UIStateArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UIStateArchive* New() const final {
    return new UIStateArchive();
  }

  UIStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UIStateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UIStateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UIStateArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.UIStateArchive";
  }
  protected:
  explicit UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedSlideNodesFieldNumber = 6,
    kChartUiStateFieldNumber = 15,
    kCollapsedSlideNodesFieldNumber = 19,
    kOutlineCollapsedSlideNodesFieldNumber = 28,
    kOutlineHasBodySlideNodesFieldNumber = 30,
    kElementListExpandedGroupsFieldNumber = 33,
    kSlideNodeToEditFieldNumber = 1,
    kDeprecatedTemplateSlideNodeToApplyFieldNumber = 2,
    kDeprecatedSlideThumbnailSizeFieldNumber = 3,
    kCanvasOffsetFieldNumber = 5,
    kIPhoneCanvasOffsetFieldNumber = 8,
    kIPhone568CanvasOffsetFieldNumber = 10,
    kDesktopUiLayoutFieldNumber = 11,
    kDesktopCanvasOffsetFieldNumber = 21,
    kDesktopMainContentSizeFieldNumber = 24,
    kDesktopMainWindowOriginFieldNumber = 26,
    kSelectionPathFieldNumber = 29,
    kFreehandDrawingToolkitStateFieldNumber = 37,
    kSelectionPathTransformerFieldNumber = 38,
    kCanvasViewScaleFieldNumber = 4,
    kIPhoneCanvasViewScaleFieldNumber = 7,
    kIPhone568CanvasViewScaleFieldNumber = 9,
    kDesktopCanvasViewScaleFieldNumber = 13,
    kLightTableZoomScaleFieldNumber = 14,
    kDesktopSlideViewContentFitsWindowFieldNumber = 12,
    kShowSlideGuidesFieldNumber = 16,
    kShowTemplateGuidesFieldNumber = 17,
    kShowsCommentsFieldNumber = 18,
    kDesktopNavigatorViewWidthFieldNumber = 22,
    kDesktopOutlineViewWidthFieldNumber = 23,
    kDesktopPresenterNotesViewHeightFieldNumber = 25,
    kCommentsPrintingToggleEnabledFieldNumber = 39,
    kShowsRulerFieldNumber = 20,
    kDesktopOutlineViewDefaultFixedFieldNumber = 31,
    kLightTableHidesSkippedSlidesFieldNumber = 27,
    kDesktopElementListViewWidthFieldNumber = 32,
    kMobileLightTableZoomScaleFieldNumber = 35,
    kShowsMobileLightTableFieldNumber = 34,
    kMobileLightTableHidesSkippedSlidesFieldNumber = 36,
    kShowsMobileOutlineFieldNumber = 40,
    kEditingDisabledFieldNumber = 41,
  };
  // repeated .TSP.Reference selectedSlideNodes = 6 [deprecated = true];
  PROTOBUF_DEPRECATED int selectedslidenodes_size() const;
  private:
  int _internal_selectedslidenodes_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_selectedslidenodes();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_selectedslidenodes(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_selectedslidenodes();
  private:
  const ::TSP::Reference& _internal_selectedslidenodes(int index) const;
  ::TSP::Reference* _internal_add_selectedslidenodes();
  public:
  PROTOBUF_DEPRECATED const ::TSP::Reference& selectedslidenodes(int index) const;
  PROTOBUF_DEPRECATED ::TSP::Reference* add_selectedslidenodes();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      selectedslidenodes() const;

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  int chart_ui_state_size() const;
  private:
  int _internal_chart_ui_state_size() const;
  public:
  void clear_chart_ui_state();
  ::TSCH::ChartUIState* mutable_chart_ui_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
      mutable_chart_ui_state();
  private:
  const ::TSCH::ChartUIState& _internal_chart_ui_state(int index) const;
  ::TSCH::ChartUIState* _internal_add_chart_ui_state();
  public:
  const ::TSCH::ChartUIState& chart_ui_state(int index) const;
  ::TSCH::ChartUIState* add_chart_ui_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
      chart_ui_state() const;

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  int collapsed_slide_nodes_size() const;
  private:
  int _internal_collapsed_slide_nodes_size() const;
  public:
  void clear_collapsed_slide_nodes();
  ::TSP::Reference* mutable_collapsed_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_collapsed_slide_nodes();
  private:
  const ::TSP::Reference& _internal_collapsed_slide_nodes(int index) const;
  ::TSP::Reference* _internal_add_collapsed_slide_nodes();
  public:
  const ::TSP::Reference& collapsed_slide_nodes(int index) const;
  ::TSP::Reference* add_collapsed_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      collapsed_slide_nodes() const;

  // repeated .TSP.Reference outline_collapsed_slide_nodes = 28;
  int outline_collapsed_slide_nodes_size() const;
  private:
  int _internal_outline_collapsed_slide_nodes_size() const;
  public:
  void clear_outline_collapsed_slide_nodes();
  ::TSP::Reference* mutable_outline_collapsed_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_outline_collapsed_slide_nodes();
  private:
  const ::TSP::Reference& _internal_outline_collapsed_slide_nodes(int index) const;
  ::TSP::Reference* _internal_add_outline_collapsed_slide_nodes();
  public:
  const ::TSP::Reference& outline_collapsed_slide_nodes(int index) const;
  ::TSP::Reference* add_outline_collapsed_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      outline_collapsed_slide_nodes() const;

  // repeated .TSP.Reference outline_has_body_slide_nodes = 30;
  int outline_has_body_slide_nodes_size() const;
  private:
  int _internal_outline_has_body_slide_nodes_size() const;
  public:
  void clear_outline_has_body_slide_nodes();
  ::TSP::Reference* mutable_outline_has_body_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_outline_has_body_slide_nodes();
  private:
  const ::TSP::Reference& _internal_outline_has_body_slide_nodes(int index) const;
  ::TSP::Reference* _internal_add_outline_has_body_slide_nodes();
  public:
  const ::TSP::Reference& outline_has_body_slide_nodes(int index) const;
  ::TSP::Reference* add_outline_has_body_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      outline_has_body_slide_nodes() const;

  // repeated .TSP.Reference element_list_expanded_groups = 33;
  int element_list_expanded_groups_size() const;
  private:
  int _internal_element_list_expanded_groups_size() const;
  public:
  void clear_element_list_expanded_groups();
  ::TSP::Reference* mutable_element_list_expanded_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_element_list_expanded_groups();
  private:
  const ::TSP::Reference& _internal_element_list_expanded_groups(int index) const;
  ::TSP::Reference* _internal_add_element_list_expanded_groups();
  public:
  const ::TSP::Reference& element_list_expanded_groups(int index) const;
  ::TSP::Reference* add_element_list_expanded_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      element_list_expanded_groups() const;

  // optional .TSP.Reference slideNodeToEdit = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_slidenodetoedit() const;
  private:
  bool _internal_has_slidenodetoedit() const;
  public:
  PROTOBUF_DEPRECATED void clear_slidenodetoedit();
  PROTOBUF_DEPRECATED const ::TSP::Reference& slidenodetoedit() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_slidenodetoedit();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_slidenodetoedit();
  PROTOBUF_DEPRECATED void set_allocated_slidenodetoedit(::TSP::Reference* slidenodetoedit);
  private:
  const ::TSP::Reference& _internal_slidenodetoedit() const;
  ::TSP::Reference* _internal_mutable_slidenodetoedit();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_slidenodetoedit(
      ::TSP::Reference* slidenodetoedit);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_slidenodetoedit();

  // optional .TSP.Reference deprecated_template_slide_node_to_apply = 2;
  bool has_deprecated_template_slide_node_to_apply() const;
  private:
  bool _internal_has_deprecated_template_slide_node_to_apply() const;
  public:
  void clear_deprecated_template_slide_node_to_apply();
  const ::TSP::Reference& deprecated_template_slide_node_to_apply() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_deprecated_template_slide_node_to_apply();
  ::TSP::Reference* mutable_deprecated_template_slide_node_to_apply();
  void set_allocated_deprecated_template_slide_node_to_apply(::TSP::Reference* deprecated_template_slide_node_to_apply);
  private:
  const ::TSP::Reference& _internal_deprecated_template_slide_node_to_apply() const;
  ::TSP::Reference* _internal_mutable_deprecated_template_slide_node_to_apply();
  public:
  void unsafe_arena_set_allocated_deprecated_template_slide_node_to_apply(
      ::TSP::Reference* deprecated_template_slide_node_to_apply);
  ::TSP::Reference* unsafe_arena_release_deprecated_template_slide_node_to_apply();

  // optional .TSP.Size deprecated_slideThumbnailSize = 3;
  bool has_deprecated_slidethumbnailsize() const;
  private:
  bool _internal_has_deprecated_slidethumbnailsize() const;
  public:
  void clear_deprecated_slidethumbnailsize();
  const ::TSP::Size& deprecated_slidethumbnailsize() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Size* release_deprecated_slidethumbnailsize();
  ::TSP::Size* mutable_deprecated_slidethumbnailsize();
  void set_allocated_deprecated_slidethumbnailsize(::TSP::Size* deprecated_slidethumbnailsize);
  private:
  const ::TSP::Size& _internal_deprecated_slidethumbnailsize() const;
  ::TSP::Size* _internal_mutable_deprecated_slidethumbnailsize();
  public:
  void unsafe_arena_set_allocated_deprecated_slidethumbnailsize(
      ::TSP::Size* deprecated_slidethumbnailsize);
  ::TSP::Size* unsafe_arena_release_deprecated_slidethumbnailsize();

  // optional .TSP.Point canvasOffset = 5;
  bool has_canvasoffset() const;
  private:
  bool _internal_has_canvasoffset() const;
  public:
  void clear_canvasoffset();
  const ::TSP::Point& canvasoffset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Point* release_canvasoffset();
  ::TSP::Point* mutable_canvasoffset();
  void set_allocated_canvasoffset(::TSP::Point* canvasoffset);
  private:
  const ::TSP::Point& _internal_canvasoffset() const;
  ::TSP::Point* _internal_mutable_canvasoffset();
  public:
  void unsafe_arena_set_allocated_canvasoffset(
      ::TSP::Point* canvasoffset);
  ::TSP::Point* unsafe_arena_release_canvasoffset();

  // optional .TSP.Point iPhoneCanvasOffset = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_iphonecanvasoffset() const;
  private:
  bool _internal_has_iphonecanvasoffset() const;
  public:
  PROTOBUF_DEPRECATED void clear_iphonecanvasoffset();
  PROTOBUF_DEPRECATED const ::TSP::Point& iphonecanvasoffset() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Point* release_iphonecanvasoffset();
  PROTOBUF_DEPRECATED ::TSP::Point* mutable_iphonecanvasoffset();
  PROTOBUF_DEPRECATED void set_allocated_iphonecanvasoffset(::TSP::Point* iphonecanvasoffset);
  private:
  const ::TSP::Point& _internal_iphonecanvasoffset() const;
  ::TSP::Point* _internal_mutable_iphonecanvasoffset();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_iphonecanvasoffset(
      ::TSP::Point* iphonecanvasoffset);
  PROTOBUF_DEPRECATED ::TSP::Point* unsafe_arena_release_iphonecanvasoffset();

  // optional .TSP.Point iPhone568CanvasOffset = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_iphone568canvasoffset() const;
  private:
  bool _internal_has_iphone568canvasoffset() const;
  public:
  PROTOBUF_DEPRECATED void clear_iphone568canvasoffset();
  PROTOBUF_DEPRECATED const ::TSP::Point& iphone568canvasoffset() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Point* release_iphone568canvasoffset();
  PROTOBUF_DEPRECATED ::TSP::Point* mutable_iphone568canvasoffset();
  PROTOBUF_DEPRECATED void set_allocated_iphone568canvasoffset(::TSP::Point* iphone568canvasoffset);
  private:
  const ::TSP::Point& _internal_iphone568canvasoffset() const;
  ::TSP::Point* _internal_mutable_iphone568canvasoffset();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_iphone568canvasoffset(
      ::TSP::Point* iphone568canvasoffset);
  PROTOBUF_DEPRECATED ::TSP::Point* unsafe_arena_release_iphone568canvasoffset();

  // optional .TSP.Reference desktop_ui_layout = 11;
  bool has_desktop_ui_layout() const;
  private:
  bool _internal_has_desktop_ui_layout() const;
  public:
  void clear_desktop_ui_layout();
  const ::TSP::Reference& desktop_ui_layout() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_desktop_ui_layout();
  ::TSP::Reference* mutable_desktop_ui_layout();
  void set_allocated_desktop_ui_layout(::TSP::Reference* desktop_ui_layout);
  private:
  const ::TSP::Reference& _internal_desktop_ui_layout() const;
  ::TSP::Reference* _internal_mutable_desktop_ui_layout();
  public:
  void unsafe_arena_set_allocated_desktop_ui_layout(
      ::TSP::Reference* desktop_ui_layout);
  ::TSP::Reference* unsafe_arena_release_desktop_ui_layout();

  // optional .TSP.Point desktop_canvas_offset = 21;
  bool has_desktop_canvas_offset() const;
  private:
  bool _internal_has_desktop_canvas_offset() const;
  public:
  void clear_desktop_canvas_offset();
  const ::TSP::Point& desktop_canvas_offset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Point* release_desktop_canvas_offset();
  ::TSP::Point* mutable_desktop_canvas_offset();
  void set_allocated_desktop_canvas_offset(::TSP::Point* desktop_canvas_offset);
  private:
  const ::TSP::Point& _internal_desktop_canvas_offset() const;
  ::TSP::Point* _internal_mutable_desktop_canvas_offset();
  public:
  void unsafe_arena_set_allocated_desktop_canvas_offset(
      ::TSP::Point* desktop_canvas_offset);
  ::TSP::Point* unsafe_arena_release_desktop_canvas_offset();

  // optional .TSP.Size desktop_main_content_size = 24;
  bool has_desktop_main_content_size() const;
  private:
  bool _internal_has_desktop_main_content_size() const;
  public:
  void clear_desktop_main_content_size();
  const ::TSP::Size& desktop_main_content_size() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Size* release_desktop_main_content_size();
  ::TSP::Size* mutable_desktop_main_content_size();
  void set_allocated_desktop_main_content_size(::TSP::Size* desktop_main_content_size);
  private:
  const ::TSP::Size& _internal_desktop_main_content_size() const;
  ::TSP::Size* _internal_mutable_desktop_main_content_size();
  public:
  void unsafe_arena_set_allocated_desktop_main_content_size(
      ::TSP::Size* desktop_main_content_size);
  ::TSP::Size* unsafe_arena_release_desktop_main_content_size();

  // optional .TSP.Point desktop_main_window_origin = 26;
  bool has_desktop_main_window_origin() const;
  private:
  bool _internal_has_desktop_main_window_origin() const;
  public:
  void clear_desktop_main_window_origin();
  const ::TSP::Point& desktop_main_window_origin() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Point* release_desktop_main_window_origin();
  ::TSP::Point* mutable_desktop_main_window_origin();
  void set_allocated_desktop_main_window_origin(::TSP::Point* desktop_main_window_origin);
  private:
  const ::TSP::Point& _internal_desktop_main_window_origin() const;
  ::TSP::Point* _internal_mutable_desktop_main_window_origin();
  public:
  void unsafe_arena_set_allocated_desktop_main_window_origin(
      ::TSP::Point* desktop_main_window_origin);
  ::TSP::Point* unsafe_arena_release_desktop_main_window_origin();

  // optional .TSK.SelectionPathArchive selection_path = 29;
  bool has_selection_path() const;
  private:
  bool _internal_has_selection_path() const;
  public:
  void clear_selection_path();
  const ::TSK::SelectionPathArchive& selection_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::SelectionPathArchive* release_selection_path();
  ::TSK::SelectionPathArchive* mutable_selection_path();
  void set_allocated_selection_path(::TSK::SelectionPathArchive* selection_path);
  private:
  const ::TSK::SelectionPathArchive& _internal_selection_path() const;
  ::TSK::SelectionPathArchive* _internal_mutable_selection_path();
  public:
  void unsafe_arena_set_allocated_selection_path(
      ::TSK::SelectionPathArchive* selection_path);
  ::TSK::SelectionPathArchive* unsafe_arena_release_selection_path();

  // optional .TSP.Reference freehand_drawing_toolkit_state = 37;
  bool has_freehand_drawing_toolkit_state() const;
  private:
  bool _internal_has_freehand_drawing_toolkit_state() const;
  public:
  void clear_freehand_drawing_toolkit_state();
  const ::TSP::Reference& freehand_drawing_toolkit_state() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_freehand_drawing_toolkit_state();
  ::TSP::Reference* mutable_freehand_drawing_toolkit_state();
  void set_allocated_freehand_drawing_toolkit_state(::TSP::Reference* freehand_drawing_toolkit_state);
  private:
  const ::TSP::Reference& _internal_freehand_drawing_toolkit_state() const;
  ::TSP::Reference* _internal_mutable_freehand_drawing_toolkit_state();
  public:
  void unsafe_arena_set_allocated_freehand_drawing_toolkit_state(
      ::TSP::Reference* freehand_drawing_toolkit_state);
  ::TSP::Reference* unsafe_arena_release_freehand_drawing_toolkit_state();

  // optional .TSP.Reference selection_path_transformer = 38;
  bool has_selection_path_transformer() const;
  private:
  bool _internal_has_selection_path_transformer() const;
  public:
  void clear_selection_path_transformer();
  const ::TSP::Reference& selection_path_transformer() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_selection_path_transformer();
  ::TSP::Reference* mutable_selection_path_transformer();
  void set_allocated_selection_path_transformer(::TSP::Reference* selection_path_transformer);
  private:
  const ::TSP::Reference& _internal_selection_path_transformer() const;
  ::TSP::Reference* _internal_mutable_selection_path_transformer();
  public:
  void unsafe_arena_set_allocated_selection_path_transformer(
      ::TSP::Reference* selection_path_transformer);
  ::TSP::Reference* unsafe_arena_release_selection_path_transformer();

  // optional float canvasViewScale = 4;
  bool has_canvasviewscale() const;
  private:
  bool _internal_has_canvasviewscale() const;
  public:
  void clear_canvasviewscale();
  float canvasviewscale() const;
  void set_canvasviewscale(float value);
  private:
  float _internal_canvasviewscale() const;
  void _internal_set_canvasviewscale(float value);
  public:

  // optional float iPhoneCanvasViewScale = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_iphonecanvasviewscale() const;
  private:
  bool _internal_has_iphonecanvasviewscale() const;
  public:
  PROTOBUF_DEPRECATED void clear_iphonecanvasviewscale();
  PROTOBUF_DEPRECATED float iphonecanvasviewscale() const;
  PROTOBUF_DEPRECATED void set_iphonecanvasviewscale(float value);
  private:
  float _internal_iphonecanvasviewscale() const;
  void _internal_set_iphonecanvasviewscale(float value);
  public:

  // optional float iPhone568CanvasViewScale = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_iphone568canvasviewscale() const;
  private:
  bool _internal_has_iphone568canvasviewscale() const;
  public:
  PROTOBUF_DEPRECATED void clear_iphone568canvasviewscale();
  PROTOBUF_DEPRECATED float iphone568canvasviewscale() const;
  PROTOBUF_DEPRECATED void set_iphone568canvasviewscale(float value);
  private:
  float _internal_iphone568canvasviewscale() const;
  void _internal_set_iphone568canvasviewscale(float value);
  public:

  // optional float desktop_canvas_view_scale = 13;
  bool has_desktop_canvas_view_scale() const;
  private:
  bool _internal_has_desktop_canvas_view_scale() const;
  public:
  void clear_desktop_canvas_view_scale();
  float desktop_canvas_view_scale() const;
  void set_desktop_canvas_view_scale(float value);
  private:
  float _internal_desktop_canvas_view_scale() const;
  void _internal_set_desktop_canvas_view_scale(float value);
  public:

  // optional float light_table_zoom_scale = 14;
  bool has_light_table_zoom_scale() const;
  private:
  bool _internal_has_light_table_zoom_scale() const;
  public:
  void clear_light_table_zoom_scale();
  float light_table_zoom_scale() const;
  void set_light_table_zoom_scale(float value);
  private:
  float _internal_light_table_zoom_scale() const;
  void _internal_set_light_table_zoom_scale(float value);
  public:

  // optional bool desktop_slide_view_content_fits_window = 12;
  bool has_desktop_slide_view_content_fits_window() const;
  private:
  bool _internal_has_desktop_slide_view_content_fits_window() const;
  public:
  void clear_desktop_slide_view_content_fits_window();
  bool desktop_slide_view_content_fits_window() const;
  void set_desktop_slide_view_content_fits_window(bool value);
  private:
  bool _internal_desktop_slide_view_content_fits_window() const;
  void _internal_set_desktop_slide_view_content_fits_window(bool value);
  public:

  // optional bool show_slide_guides = 16;
  bool has_show_slide_guides() const;
  private:
  bool _internal_has_show_slide_guides() const;
  public:
  void clear_show_slide_guides();
  bool show_slide_guides() const;
  void set_show_slide_guides(bool value);
  private:
  bool _internal_show_slide_guides() const;
  void _internal_set_show_slide_guides(bool value);
  public:

  // optional bool show_template_guides = 17;
  bool has_show_template_guides() const;
  private:
  bool _internal_has_show_template_guides() const;
  public:
  void clear_show_template_guides();
  bool show_template_guides() const;
  void set_show_template_guides(bool value);
  private:
  bool _internal_show_template_guides() const;
  void _internal_set_show_template_guides(bool value);
  public:

  // optional bool shows_comments = 18;
  bool has_shows_comments() const;
  private:
  bool _internal_has_shows_comments() const;
  public:
  void clear_shows_comments();
  bool shows_comments() const;
  void set_shows_comments(bool value);
  private:
  bool _internal_shows_comments() const;
  void _internal_set_shows_comments(bool value);
  public:

  // optional float desktop_navigator_view_width = 22;
  bool has_desktop_navigator_view_width() const;
  private:
  bool _internal_has_desktop_navigator_view_width() const;
  public:
  void clear_desktop_navigator_view_width();
  float desktop_navigator_view_width() const;
  void set_desktop_navigator_view_width(float value);
  private:
  float _internal_desktop_navigator_view_width() const;
  void _internal_set_desktop_navigator_view_width(float value);
  public:

  // optional float desktop_outline_view_width = 23;
  bool has_desktop_outline_view_width() const;
  private:
  bool _internal_has_desktop_outline_view_width() const;
  public:
  void clear_desktop_outline_view_width();
  float desktop_outline_view_width() const;
  void set_desktop_outline_view_width(float value);
  private:
  float _internal_desktop_outline_view_width() const;
  void _internal_set_desktop_outline_view_width(float value);
  public:

  // optional float desktop_presenter_notes_view_height = 25;
  bool has_desktop_presenter_notes_view_height() const;
  private:
  bool _internal_has_desktop_presenter_notes_view_height() const;
  public:
  void clear_desktop_presenter_notes_view_height();
  float desktop_presenter_notes_view_height() const;
  void set_desktop_presenter_notes_view_height(float value);
  private:
  float _internal_desktop_presenter_notes_view_height() const;
  void _internal_set_desktop_presenter_notes_view_height(float value);
  public:

  // optional bool comments_printing_toggle_enabled = 39;
  bool has_comments_printing_toggle_enabled() const;
  private:
  bool _internal_has_comments_printing_toggle_enabled() const;
  public:
  void clear_comments_printing_toggle_enabled();
  bool comments_printing_toggle_enabled() const;
  void set_comments_printing_toggle_enabled(bool value);
  private:
  bool _internal_comments_printing_toggle_enabled() const;
  void _internal_set_comments_printing_toggle_enabled(bool value);
  public:

  // optional bool shows_ruler = 20;
  bool has_shows_ruler() const;
  private:
  bool _internal_has_shows_ruler() const;
  public:
  void clear_shows_ruler();
  bool shows_ruler() const;
  void set_shows_ruler(bool value);
  private:
  bool _internal_shows_ruler() const;
  void _internal_set_shows_ruler(bool value);
  public:

  // optional bool desktop_outline_view_default_fixed = 31;
  bool has_desktop_outline_view_default_fixed() const;
  private:
  bool _internal_has_desktop_outline_view_default_fixed() const;
  public:
  void clear_desktop_outline_view_default_fixed();
  bool desktop_outline_view_default_fixed() const;
  void set_desktop_outline_view_default_fixed(bool value);
  private:
  bool _internal_desktop_outline_view_default_fixed() const;
  void _internal_set_desktop_outline_view_default_fixed(bool value);
  public:

  // optional bool light_table_hides_skipped_slides = 27;
  bool has_light_table_hides_skipped_slides() const;
  private:
  bool _internal_has_light_table_hides_skipped_slides() const;
  public:
  void clear_light_table_hides_skipped_slides();
  bool light_table_hides_skipped_slides() const;
  void set_light_table_hides_skipped_slides(bool value);
  private:
  bool _internal_light_table_hides_skipped_slides() const;
  void _internal_set_light_table_hides_skipped_slides(bool value);
  public:

  // optional float desktop_element_list_view_width = 32;
  bool has_desktop_element_list_view_width() const;
  private:
  bool _internal_has_desktop_element_list_view_width() const;
  public:
  void clear_desktop_element_list_view_width();
  float desktop_element_list_view_width() const;
  void set_desktop_element_list_view_width(float value);
  private:
  float _internal_desktop_element_list_view_width() const;
  void _internal_set_desktop_element_list_view_width(float value);
  public:

  // optional float mobile_light_table_zoom_scale = 35;
  bool has_mobile_light_table_zoom_scale() const;
  private:
  bool _internal_has_mobile_light_table_zoom_scale() const;
  public:
  void clear_mobile_light_table_zoom_scale();
  float mobile_light_table_zoom_scale() const;
  void set_mobile_light_table_zoom_scale(float value);
  private:
  float _internal_mobile_light_table_zoom_scale() const;
  void _internal_set_mobile_light_table_zoom_scale(float value);
  public:

  // optional bool shows_mobile_light_table = 34;
  bool has_shows_mobile_light_table() const;
  private:
  bool _internal_has_shows_mobile_light_table() const;
  public:
  void clear_shows_mobile_light_table();
  bool shows_mobile_light_table() const;
  void set_shows_mobile_light_table(bool value);
  private:
  bool _internal_shows_mobile_light_table() const;
  void _internal_set_shows_mobile_light_table(bool value);
  public:

  // optional bool mobile_light_table_hides_skipped_slides = 36;
  bool has_mobile_light_table_hides_skipped_slides() const;
  private:
  bool _internal_has_mobile_light_table_hides_skipped_slides() const;
  public:
  void clear_mobile_light_table_hides_skipped_slides();
  bool mobile_light_table_hides_skipped_slides() const;
  void set_mobile_light_table_hides_skipped_slides(bool value);
  private:
  bool _internal_mobile_light_table_hides_skipped_slides() const;
  void _internal_set_mobile_light_table_hides_skipped_slides(bool value);
  public:

  // optional bool shows_mobile_outline = 40;
  bool has_shows_mobile_outline() const;
  private:
  bool _internal_has_shows_mobile_outline() const;
  public:
  void clear_shows_mobile_outline();
  bool shows_mobile_outline() const;
  void set_shows_mobile_outline(bool value);
  private:
  bool _internal_shows_mobile_outline() const;
  void _internal_set_shows_mobile_outline(bool value);
  public:

  // optional bool editing_disabled = 41;
  bool has_editing_disabled() const;
  private:
  bool _internal_has_editing_disabled() const;
  public:
  void clear_editing_disabled();
  bool editing_disabled() const;
  void set_editing_disabled(bool value);
  private:
  bool _internal_editing_disabled() const;
  void _internal_set_editing_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.UIStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > selectedslidenodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState > chart_ui_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > collapsed_slide_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > outline_collapsed_slide_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > outline_has_body_slide_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > element_list_expanded_groups_;
  ::TSP::Reference* slidenodetoedit_;
  ::TSP::Reference* deprecated_template_slide_node_to_apply_;
  ::TSP::Size* deprecated_slidethumbnailsize_;
  ::TSP::Point* canvasoffset_;
  ::TSP::Point* iphonecanvasoffset_;
  ::TSP::Point* iphone568canvasoffset_;
  ::TSP::Reference* desktop_ui_layout_;
  ::TSP::Point* desktop_canvas_offset_;
  ::TSP::Size* desktop_main_content_size_;
  ::TSP::Point* desktop_main_window_origin_;
  ::TSK::SelectionPathArchive* selection_path_;
  ::TSP::Reference* freehand_drawing_toolkit_state_;
  ::TSP::Reference* selection_path_transformer_;
  float canvasviewscale_;
  float iphonecanvasviewscale_;
  float iphone568canvasviewscale_;
  float desktop_canvas_view_scale_;
  float light_table_zoom_scale_;
  bool desktop_slide_view_content_fits_window_;
  bool show_slide_guides_;
  bool show_template_guides_;
  bool shows_comments_;
  float desktop_navigator_view_width_;
  float desktop_outline_view_width_;
  float desktop_presenter_notes_view_height_;
  bool comments_printing_toggle_enabled_;
  bool shows_ruler_;
  bool desktop_outline_view_default_fixed_;
  bool light_table_hides_skipped_slides_;
  float desktop_element_list_view_width_;
  float mobile_light_table_zoom_scale_;
  bool shows_mobile_light_table_;
  bool mobile_light_table_hides_skipped_slides_;
  bool shows_mobile_outline_;
  bool editing_disabled_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class IOSRestorableViewStateRootArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.IOSRestorableViewStateRootArchive) */ {
 public:
  inline IOSRestorableViewStateRootArchive() : IOSRestorableViewStateRootArchive(nullptr) {}
  ~IOSRestorableViewStateRootArchive() override;
  explicit constexpr IOSRestorableViewStateRootArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IOSRestorableViewStateRootArchive(const IOSRestorableViewStateRootArchive& from);
  IOSRestorableViewStateRootArchive(IOSRestorableViewStateRootArchive&& from) noexcept
    : IOSRestorableViewStateRootArchive() {
    *this = ::std::move(from);
  }

  inline IOSRestorableViewStateRootArchive& operator=(const IOSRestorableViewStateRootArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOSRestorableViewStateRootArchive& operator=(IOSRestorableViewStateRootArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IOSRestorableViewStateRootArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const IOSRestorableViewStateRootArchive* internal_default_instance() {
    return reinterpret_cast<const IOSRestorableViewStateRootArchive*>(
               &_IOSRestorableViewStateRootArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(IOSRestorableViewStateRootArchive& a, IOSRestorableViewStateRootArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(IOSRestorableViewStateRootArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOSRestorableViewStateRootArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IOSRestorableViewStateRootArchive* New() const final {
    return new IOSRestorableViewStateRootArchive();
  }

  IOSRestorableViewStateRootArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOSRestorableViewStateRootArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IOSRestorableViewStateRootArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IOSRestorableViewStateRootArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOSRestorableViewStateRootArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.IOSRestorableViewStateRootArchive";
  }
  protected:
  explicit IOSRestorableViewStateRootArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSavedPlaybackStateFieldNumber = 1,
  };
  // optional .KN.IOSSavedPlaybackStateArchive saved_playback_state = 1;
  bool has_saved_playback_state() const;
  private:
  bool _internal_has_saved_playback_state() const;
  public:
  void clear_saved_playback_state();
  const ::KN::IOSSavedPlaybackStateArchive& saved_playback_state() const;
  PROTOBUF_MUST_USE_RESULT ::KN::IOSSavedPlaybackStateArchive* release_saved_playback_state();
  ::KN::IOSSavedPlaybackStateArchive* mutable_saved_playback_state();
  void set_allocated_saved_playback_state(::KN::IOSSavedPlaybackStateArchive* saved_playback_state);
  private:
  const ::KN::IOSSavedPlaybackStateArchive& _internal_saved_playback_state() const;
  ::KN::IOSSavedPlaybackStateArchive* _internal_mutable_saved_playback_state();
  public:
  void unsafe_arena_set_allocated_saved_playback_state(
      ::KN::IOSSavedPlaybackStateArchive* saved_playback_state);
  ::KN::IOSSavedPlaybackStateArchive* unsafe_arena_release_saved_playback_state();

  // @@protoc_insertion_point(class_scope:KN.IOSRestorableViewStateRootArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::KN::IOSSavedPlaybackStateArchive* saved_playback_state_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class IOSSavedPlaybackStateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.IOSSavedPlaybackStateArchive) */ {
 public:
  inline IOSSavedPlaybackStateArchive() : IOSSavedPlaybackStateArchive(nullptr) {}
  ~IOSSavedPlaybackStateArchive() override;
  explicit constexpr IOSSavedPlaybackStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IOSSavedPlaybackStateArchive(const IOSSavedPlaybackStateArchive& from);
  IOSSavedPlaybackStateArchive(IOSSavedPlaybackStateArchive&& from) noexcept
    : IOSSavedPlaybackStateArchive() {
    *this = ::std::move(from);
  }

  inline IOSSavedPlaybackStateArchive& operator=(const IOSSavedPlaybackStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOSSavedPlaybackStateArchive& operator=(IOSSavedPlaybackStateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IOSSavedPlaybackStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const IOSSavedPlaybackStateArchive* internal_default_instance() {
    return reinterpret_cast<const IOSSavedPlaybackStateArchive*>(
               &_IOSSavedPlaybackStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(IOSSavedPlaybackStateArchive& a, IOSSavedPlaybackStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(IOSSavedPlaybackStateArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOSSavedPlaybackStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IOSSavedPlaybackStateArchive* New() const final {
    return new IOSSavedPlaybackStateArchive();
  }

  IOSSavedPlaybackStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOSSavedPlaybackStateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IOSSavedPlaybackStateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IOSSavedPlaybackStateArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOSSavedPlaybackStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.IOSSavedPlaybackStateArchive";
  }
  protected:
  explicit IOSSavedPlaybackStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IOSSavedPlaybackStateArchive_PresentationType PresentationType;
  static constexpr PresentationType Manual =
    IOSSavedPlaybackStateArchive_PresentationType_Manual;
  static constexpr PresentationType Record =
    IOSSavedPlaybackStateArchive_PresentationType_Record;
  static constexpr PresentationType PlayRecording =
    IOSSavedPlaybackStateArchive_PresentationType_PlayRecording;
  static constexpr PresentationType Rehearse =
    IOSSavedPlaybackStateArchive_PresentationType_Rehearse;
  static constexpr PresentationType Showcast =
    IOSSavedPlaybackStateArchive_PresentationType_Showcast;
  static inline bool PresentationType_IsValid(int value) {
    return IOSSavedPlaybackStateArchive_PresentationType_IsValid(value);
  }
  static constexpr PresentationType PresentationType_MIN =
    IOSSavedPlaybackStateArchive_PresentationType_PresentationType_MIN;
  static constexpr PresentationType PresentationType_MAX =
    IOSSavedPlaybackStateArchive_PresentationType_PresentationType_MAX;
  static constexpr int PresentationType_ARRAYSIZE =
    IOSSavedPlaybackStateArchive_PresentationType_PresentationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PresentationType_descriptor() {
    return IOSSavedPlaybackStateArchive_PresentationType_descriptor();
  }
  template<typename T>
  static inline const std::string& PresentationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PresentationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PresentationType_Name.");
    return IOSSavedPlaybackStateArchive_PresentationType_Name(enum_t_value);
  }
  static inline bool PresentationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PresentationType* value) {
    return IOSSavedPlaybackStateArchive_PresentationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBreadcrumbTrailFieldNumber = 4,
    kSlideNodeIndexFieldNumber = 2,
    kEventIndexFieldNumber = 3,
    kElapsedTimeStartTimeFieldNumber = 7,
    kRecordingPlaybackCurrentTimeFieldNumber = 8,
    kHadExternalDisplayFieldNumber = 5,
    kIsElapsedTimeStartedFieldNumber = 6,
    kShouldShowSlideNavigatorFieldNumber = 9,
    kPresentationTypeFieldNumber = 1,
  };
  // repeated string breadcrumb_trail = 4;
  int breadcrumb_trail_size() const;
  private:
  int _internal_breadcrumb_trail_size() const;
  public:
  void clear_breadcrumb_trail();
  const std::string& breadcrumb_trail(int index) const;
  std::string* mutable_breadcrumb_trail(int index);
  void set_breadcrumb_trail(int index, const std::string& value);
  void set_breadcrumb_trail(int index, std::string&& value);
  void set_breadcrumb_trail(int index, const char* value);
  void set_breadcrumb_trail(int index, const char* value, size_t size);
  std::string* add_breadcrumb_trail();
  void add_breadcrumb_trail(const std::string& value);
  void add_breadcrumb_trail(std::string&& value);
  void add_breadcrumb_trail(const char* value);
  void add_breadcrumb_trail(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& breadcrumb_trail() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_breadcrumb_trail();
  private:
  const std::string& _internal_breadcrumb_trail(int index) const;
  std::string* _internal_add_breadcrumb_trail();
  public:

  // optional uint32 slide_node_index = 2;
  bool has_slide_node_index() const;
  private:
  bool _internal_has_slide_node_index() const;
  public:
  void clear_slide_node_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 slide_node_index() const;
  void set_slide_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slide_node_index() const;
  void _internal_set_slide_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 event_index = 3;
  bool has_event_index() const;
  private:
  bool _internal_has_event_index() const;
  public:
  void clear_event_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_index() const;
  void set_event_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_index() const;
  void _internal_set_event_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double elapsed_time_start_time = 7;
  bool has_elapsed_time_start_time() const;
  private:
  bool _internal_has_elapsed_time_start_time() const;
  public:
  void clear_elapsed_time_start_time();
  double elapsed_time_start_time() const;
  void set_elapsed_time_start_time(double value);
  private:
  double _internal_elapsed_time_start_time() const;
  void _internal_set_elapsed_time_start_time(double value);
  public:

  // optional double recording_playback_current_time = 8;
  bool has_recording_playback_current_time() const;
  private:
  bool _internal_has_recording_playback_current_time() const;
  public:
  void clear_recording_playback_current_time();
  double recording_playback_current_time() const;
  void set_recording_playback_current_time(double value);
  private:
  double _internal_recording_playback_current_time() const;
  void _internal_set_recording_playback_current_time(double value);
  public:

  // optional bool had_external_display = 5;
  bool has_had_external_display() const;
  private:
  bool _internal_has_had_external_display() const;
  public:
  void clear_had_external_display();
  bool had_external_display() const;
  void set_had_external_display(bool value);
  private:
  bool _internal_had_external_display() const;
  void _internal_set_had_external_display(bool value);
  public:

  // optional bool is_elapsed_time_started = 6;
  bool has_is_elapsed_time_started() const;
  private:
  bool _internal_has_is_elapsed_time_started() const;
  public:
  void clear_is_elapsed_time_started();
  bool is_elapsed_time_started() const;
  void set_is_elapsed_time_started(bool value);
  private:
  bool _internal_is_elapsed_time_started() const;
  void _internal_set_is_elapsed_time_started(bool value);
  public:

  // optional bool should_show_slide_navigator = 9;
  bool has_should_show_slide_navigator() const;
  private:
  bool _internal_has_should_show_slide_navigator() const;
  public:
  void clear_should_show_slide_navigator();
  bool should_show_slide_navigator() const;
  void set_should_show_slide_navigator(bool value);
  private:
  bool _internal_should_show_slide_navigator() const;
  void _internal_set_should_show_slide_navigator(bool value);
  public:

  // optional .KN.IOSSavedPlaybackStateArchive.PresentationType presentation_type = 1;
  bool has_presentation_type() const;
  private:
  bool _internal_has_presentation_type() const;
  public:
  void clear_presentation_type();
  ::KN::IOSSavedPlaybackStateArchive_PresentationType presentation_type() const;
  void set_presentation_type(::KN::IOSSavedPlaybackStateArchive_PresentationType value);
  private:
  ::KN::IOSSavedPlaybackStateArchive_PresentationType _internal_presentation_type() const;
  void _internal_set_presentation_type(::KN::IOSSavedPlaybackStateArchive_PresentationType value);
  public:

  // @@protoc_insertion_point(class_scope:KN.IOSSavedPlaybackStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> breadcrumb_trail_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slide_node_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_index_;
  double elapsed_time_start_time_;
  double recording_playback_current_time_;
  bool had_external_display_;
  bool is_elapsed_time_started_;
  bool should_show_slide_navigator_;
  int presentation_type_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class CanvasSelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CanvasSelectionArchive) */ {
 public:
  inline CanvasSelectionArchive() : CanvasSelectionArchive(nullptr) {}
  ~CanvasSelectionArchive() override;
  explicit constexpr CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanvasSelectionArchive(const CanvasSelectionArchive& from);
  CanvasSelectionArchive(CanvasSelectionArchive&& from) noexcept
    : CanvasSelectionArchive() {
    *this = ::std::move(from);
  }

  inline CanvasSelectionArchive& operator=(const CanvasSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanvasSelectionArchive& operator=(CanvasSelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanvasSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanvasSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const CanvasSelectionArchive*>(
               &_CanvasSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CanvasSelectionArchive& a, CanvasSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CanvasSelectionArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanvasSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanvasSelectionArchive* New() const final {
    return new CanvasSelectionArchive();
  }

  CanvasSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanvasSelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanvasSelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CanvasSelectionArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanvasSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CanvasSelectionArchive";
  }
  protected:
  explicit CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
    kDatabaseActionGhostIndexesFieldNumber = 2,
    kActionGhostIndexesFieldNumber = 3,
    kBuildChunksFieldNumber = 4,
    kNonInteractiveInfosFieldNumber = 5,
    kInfosForActionGhostIndexesFieldNumber = 6,
  };
  // repeated .TSP.Reference infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::TSP::Reference* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos();
  private:
  const ::TSP::Reference& _internal_infos(int index) const;
  ::TSP::Reference* _internal_add_infos();
  public:
  const ::TSP::Reference& infos(int index) const;
  ::TSP::Reference* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      infos() const;

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int database_action_ghost_indexes_size() const;
  private:
  int _internal_database_action_ghost_indexes_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_action_ghost_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_database_action_ghost_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_database_action_ghost_indexes() const;
  void _internal_add_database_action_ghost_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_database_action_ghost_indexes();
  public:
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 database_action_ghost_indexes(int index) const;
  PROTOBUF_DEPRECATED void set_database_action_ghost_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED void add_database_action_ghost_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      database_action_ghost_indexes() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_database_action_ghost_indexes();

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  int action_ghost_indexes_size() const;
  private:
  int _internal_action_ghost_indexes_size() const;
  public:
  void clear_action_ghost_indexes();
  ::TSP::IndexSet* mutable_action_ghost_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet >*
      mutable_action_ghost_indexes();
  private:
  const ::TSP::IndexSet& _internal_action_ghost_indexes(int index) const;
  ::TSP::IndexSet* _internal_add_action_ghost_indexes();
  public:
  const ::TSP::IndexSet& action_ghost_indexes(int index) const;
  ::TSP::IndexSet* add_action_ghost_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet >&
      action_ghost_indexes() const;

  // repeated .TSP.Reference build_chunks = 4;
  int build_chunks_size() const;
  private:
  int _internal_build_chunks_size() const;
  public:
  void clear_build_chunks();
  ::TSP::Reference* mutable_build_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_build_chunks();
  private:
  const ::TSP::Reference& _internal_build_chunks(int index) const;
  ::TSP::Reference* _internal_add_build_chunks();
  public:
  const ::TSP::Reference& build_chunks(int index) const;
  ::TSP::Reference* add_build_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      build_chunks() const;

  // repeated .TSP.Reference non_interactive_infos = 5;
  int non_interactive_infos_size() const;
  private:
  int _internal_non_interactive_infos_size() const;
  public:
  void clear_non_interactive_infos();
  ::TSP::Reference* mutable_non_interactive_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_non_interactive_infos();
  private:
  const ::TSP::Reference& _internal_non_interactive_infos(int index) const;
  ::TSP::Reference* _internal_add_non_interactive_infos();
  public:
  const ::TSP::Reference& non_interactive_infos(int index) const;
  ::TSP::Reference* add_non_interactive_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      non_interactive_infos() const;

  // repeated .TSP.Reference infos_for_action_ghost_indexes = 6;
  int infos_for_action_ghost_indexes_size() const;
  private:
  int _internal_infos_for_action_ghost_indexes_size() const;
  public:
  void clear_infos_for_action_ghost_indexes();
  ::TSP::Reference* mutable_infos_for_action_ghost_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos_for_action_ghost_indexes();
  private:
  const ::TSP::Reference& _internal_infos_for_action_ghost_indexes(int index) const;
  ::TSP::Reference* _internal_add_infos_for_action_ghost_indexes();
  public:
  const ::TSP::Reference& infos_for_action_ghost_indexes(int index) const;
  ::TSP::Reference* add_infos_for_action_ghost_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      infos_for_action_ghost_indexes() const;

  // @@protoc_insertion_point(class_scope:KN.CanvasSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > database_action_ghost_indexes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet > action_ghost_indexes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > build_chunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > non_interactive_infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > infos_for_action_ghost_indexes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ActionGhostSelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ActionGhostSelectionArchive) */ {
 public:
  inline ActionGhostSelectionArchive() : ActionGhostSelectionArchive(nullptr) {}
  ~ActionGhostSelectionArchive() override;
  explicit constexpr ActionGhostSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionGhostSelectionArchive(const ActionGhostSelectionArchive& from);
  ActionGhostSelectionArchive(ActionGhostSelectionArchive&& from) noexcept
    : ActionGhostSelectionArchive() {
    *this = ::std::move(from);
  }

  inline ActionGhostSelectionArchive& operator=(const ActionGhostSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionGhostSelectionArchive& operator=(ActionGhostSelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionGhostSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionGhostSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const ActionGhostSelectionArchive*>(
               &_ActionGhostSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ActionGhostSelectionArchive& a, ActionGhostSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionGhostSelectionArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionGhostSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionGhostSelectionArchive* New() const final {
    return new ActionGhostSelectionArchive();
  }

  ActionGhostSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionGhostSelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionGhostSelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActionGhostSelectionArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionGhostSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ActionGhostSelectionArchive";
  }
  protected:
  explicit ActionGhostSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:KN.ActionGhostSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeCustomTimingCurveArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ThemeCustomTimingCurveArchive) */ {
 public:
  inline ThemeCustomTimingCurveArchive() : ThemeCustomTimingCurveArchive(nullptr) {}
  ~ThemeCustomTimingCurveArchive() override;
  explicit constexpr ThemeCustomTimingCurveArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeCustomTimingCurveArchive(const ThemeCustomTimingCurveArchive& from);
  ThemeCustomTimingCurveArchive(ThemeCustomTimingCurveArchive&& from) noexcept
    : ThemeCustomTimingCurveArchive() {
    *this = ::std::move(from);
  }

  inline ThemeCustomTimingCurveArchive& operator=(const ThemeCustomTimingCurveArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeCustomTimingCurveArchive& operator=(ThemeCustomTimingCurveArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeCustomTimingCurveArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeCustomTimingCurveArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeCustomTimingCurveArchive*>(
               &_ThemeCustomTimingCurveArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ThemeCustomTimingCurveArchive& a, ThemeCustomTimingCurveArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeCustomTimingCurveArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeCustomTimingCurveArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeCustomTimingCurveArchive* New() const final {
    return new ThemeCustomTimingCurveArchive();
  }

  ThemeCustomTimingCurveArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeCustomTimingCurveArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemeCustomTimingCurveArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThemeCustomTimingCurveArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeCustomTimingCurveArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ThemeCustomTimingCurveArchive";
  }
  protected:
  explicit ThemeCustomTimingCurveArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCurveFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .TSD.PathSourceArchive curve = 2;
  bool has_curve() const;
  private:
  bool _internal_has_curve() const;
  public:
  void clear_curve();
  const ::TSD::PathSourceArchive& curve() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::PathSourceArchive* release_curve();
  ::TSD::PathSourceArchive* mutable_curve();
  void set_allocated_curve(::TSD::PathSourceArchive* curve);
  private:
  const ::TSD::PathSourceArchive& _internal_curve() const;
  ::TSD::PathSourceArchive* _internal_mutable_curve();
  public:
  void unsafe_arena_set_allocated_curve(
      ::TSD::PathSourceArchive* curve);
  ::TSD::PathSourceArchive* unsafe_arena_release_curve();

  // @@protoc_insertion_point(class_scope:KN.ThemeCustomTimingCurveArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSD::PathSourceArchive* curve_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ThemeArchive) */ {
 public:
  inline ThemeArchive() : ThemeArchive(nullptr) {}
  ~ThemeArchive() override;
  explicit constexpr ThemeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeArchive(const ThemeArchive& from);
  ThemeArchive(ThemeArchive&& from) noexcept
    : ThemeArchive() {
    *this = ::std::move(from);
  }

  inline ThemeArchive& operator=(const ThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeArchive& operator=(ThemeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeArchive*>(
               &_ThemeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ThemeArchive& a, ThemeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeArchive* New() const final {
    return new ThemeArchive();
  }

  ThemeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThemeArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ThemeArchive";
  }
  protected:
  explicit ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplatesFieldNumber = 2,
    kClassicThemeRecordsFieldNumber = 4,
    kCustomEffectTimingCurvesFieldNumber = 8,
    kUuidFieldNumber = 3,
    kSuperFieldNumber = 1,
    kDefaultTemplateSlideNodeFieldNumber = 5,
    kDefaultTemplateSlideNodeReferenceFieldNumber = 6,
    kDefaultTemplateSlideNodeIsOurBestGuessFieldNumber = 7,
  };
  // repeated .TSP.Reference templates = 2;
  int templates_size() const;
  private:
  int _internal_templates_size() const;
  public:
  void clear_templates();
  ::TSP::Reference* mutable_templates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_templates();
  private:
  const ::TSP::Reference& _internal_templates(int index) const;
  ::TSP::Reference* _internal_add_templates();
  public:
  const ::TSP::Reference& templates(int index) const;
  ::TSP::Reference* add_templates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      templates() const;

  // repeated .TSP.Reference classicThemeRecords = 4;
  int classicthemerecords_size() const;
  private:
  int _internal_classicthemerecords_size() const;
  public:
  void clear_classicthemerecords();
  ::TSP::Reference* mutable_classicthemerecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_classicthemerecords();
  private:
  const ::TSP::Reference& _internal_classicthemerecords(int index) const;
  ::TSP::Reference* _internal_add_classicthemerecords();
  public:
  const ::TSP::Reference& classicthemerecords(int index) const;
  ::TSP::Reference* add_classicthemerecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      classicthemerecords() const;

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 8;
  int custom_effect_timing_curves_size() const;
  private:
  int _internal_custom_effect_timing_curves_size() const;
  public:
  void clear_custom_effect_timing_curves();
  ::KN::ThemeCustomTimingCurveArchive* mutable_custom_effect_timing_curves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive >*
      mutable_custom_effect_timing_curves();
  private:
  const ::KN::ThemeCustomTimingCurveArchive& _internal_custom_effect_timing_curves(int index) const;
  ::KN::ThemeCustomTimingCurveArchive* _internal_add_custom_effect_timing_curves();
  public:
  const ::KN::ThemeCustomTimingCurveArchive& custom_effect_timing_curves(int index) const;
  ::KN::ThemeCustomTimingCurveArchive* add_custom_effect_timing_curves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive >&
      custom_effect_timing_curves() const;

  // optional string uuid = 3;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // required .TSS.ThemeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ThemeArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSS::ThemeArchive* release_super();
  ::TSS::ThemeArchive* mutable_super();
  void set_allocated_super(::TSS::ThemeArchive* super);
  private:
  const ::TSS::ThemeArchive& _internal_super() const;
  ::TSS::ThemeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ThemeArchive* super);
  ::TSS::ThemeArchive* unsafe_arena_release_super();

  // optional .TSP.Reference default_template_slide_node = 5;
  bool has_default_template_slide_node() const;
  private:
  bool _internal_has_default_template_slide_node() const;
  public:
  void clear_default_template_slide_node();
  const ::TSP::Reference& default_template_slide_node() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_default_template_slide_node();
  ::TSP::Reference* mutable_default_template_slide_node();
  void set_allocated_default_template_slide_node(::TSP::Reference* default_template_slide_node);
  private:
  const ::TSP::Reference& _internal_default_template_slide_node() const;
  ::TSP::Reference* _internal_mutable_default_template_slide_node();
  public:
  void unsafe_arena_set_allocated_default_template_slide_node(
      ::TSP::Reference* default_template_slide_node);
  ::TSP::Reference* unsafe_arena_release_default_template_slide_node();

  // optional .TSP.Reference default_template_slide_node_reference = 6;
  bool has_default_template_slide_node_reference() const;
  private:
  bool _internal_has_default_template_slide_node_reference() const;
  public:
  void clear_default_template_slide_node_reference();
  const ::TSP::Reference& default_template_slide_node_reference() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_default_template_slide_node_reference();
  ::TSP::Reference* mutable_default_template_slide_node_reference();
  void set_allocated_default_template_slide_node_reference(::TSP::Reference* default_template_slide_node_reference);
  private:
  const ::TSP::Reference& _internal_default_template_slide_node_reference() const;
  ::TSP::Reference* _internal_mutable_default_template_slide_node_reference();
  public:
  void unsafe_arena_set_allocated_default_template_slide_node_reference(
      ::TSP::Reference* default_template_slide_node_reference);
  ::TSP::Reference* unsafe_arena_release_default_template_slide_node_reference();

  // optional bool default_template_slide_node_is_our_best_guess = 7;
  bool has_default_template_slide_node_is_our_best_guess() const;
  private:
  bool _internal_has_default_template_slide_node_is_our_best_guess() const;
  public:
  void clear_default_template_slide_node_is_our_best_guess();
  bool default_template_slide_node_is_our_best_guess() const;
  void set_default_template_slide_node_is_our_best_guess(bool value);
  private:
  bool _internal_default_template_slide_node_is_our_best_guess() const;
  void _internal_set_default_template_slide_node_is_our_best_guess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.ThemeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > templates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > classicthemerecords_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive > custom_effect_timing_curves_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::TSS::ThemeArchive* super_;
  ::TSP::Reference* default_template_slide_node_;
  ::TSP::Reference* default_template_slide_node_reference_;
  bool default_template_slide_node_is_our_best_guess_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideTreeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideTreeArchive) */ {
 public:
  inline SlideTreeArchive() : SlideTreeArchive(nullptr) {}
  ~SlideTreeArchive() override;
  explicit constexpr SlideTreeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideTreeArchive(const SlideTreeArchive& from);
  SlideTreeArchive(SlideTreeArchive&& from) noexcept
    : SlideTreeArchive() {
    *this = ::std::move(from);
  }

  inline SlideTreeArchive& operator=(const SlideTreeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideTreeArchive& operator=(SlideTreeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideTreeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideTreeArchive* internal_default_instance() {
    return reinterpret_cast<const SlideTreeArchive*>(
               &_SlideTreeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SlideTreeArchive& a, SlideTreeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideTreeArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideTreeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideTreeArchive* New() const final {
    return new SlideTreeArchive();
  }

  SlideTreeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideTreeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideTreeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideTreeArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideTreeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideTreeArchive";
  }
  protected:
  explicit SlideTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlidesFieldNumber = 2,
    kRootSlideNodeFieldNumber = 1,
  };
  // repeated .TSP.Reference slides = 2;
  int slides_size() const;
  private:
  int _internal_slides_size() const;
  public:
  void clear_slides();
  ::TSP::Reference* mutable_slides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slides();
  private:
  const ::TSP::Reference& _internal_slides(int index) const;
  ::TSP::Reference* _internal_add_slides();
  public:
  const ::TSP::Reference& slides(int index) const;
  ::TSP::Reference* add_slides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slides() const;

  // optional .TSP.Reference rootSlideNode = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_rootslidenode() const;
  private:
  bool _internal_has_rootslidenode() const;
  public:
  PROTOBUF_DEPRECATED void clear_rootslidenode();
  PROTOBUF_DEPRECATED const ::TSP::Reference& rootslidenode() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_rootslidenode();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_rootslidenode();
  PROTOBUF_DEPRECATED void set_allocated_rootslidenode(::TSP::Reference* rootslidenode);
  private:
  const ::TSP::Reference& _internal_rootslidenode() const;
  ::TSP::Reference* _internal_mutable_rootslidenode();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_rootslidenode(
      ::TSP::Reference* rootslidenode);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_rootslidenode();

  // @@protoc_insertion_point(class_scope:KN.SlideTreeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slides_;
  ::TSP::Reference* rootslidenode_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ShowArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ShowArchive) */ {
 public:
  inline ShowArchive() : ShowArchive(nullptr) {}
  ~ShowArchive() override;
  explicit constexpr ShowArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowArchive(const ShowArchive& from);
  ShowArchive(ShowArchive&& from) noexcept
    : ShowArchive() {
    *this = ::std::move(from);
  }

  inline ShowArchive& operator=(const ShowArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowArchive& operator=(ShowArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowArchive* internal_default_instance() {
    return reinterpret_cast<const ShowArchive*>(
               &_ShowArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ShowArchive& a, ShowArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowArchive* New() const final {
    return new ShowArchive();
  }

  ShowArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShowArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ShowArchive";
  }
  protected:
  explicit ShowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ShowArchive_KNShowMode KNShowMode;
  static constexpr KNShowMode kKNShowModeNormal =
    ShowArchive_KNShowMode_kKNShowModeNormal;
  static constexpr KNShowMode kKNShowModeAutoPlay =
    ShowArchive_KNShowMode_kKNShowModeAutoPlay;
  static constexpr KNShowMode kKNShowModeHyperlinksOnly =
    ShowArchive_KNShowMode_kKNShowModeHyperlinksOnly;
  static inline bool KNShowMode_IsValid(int value) {
    return ShowArchive_KNShowMode_IsValid(value);
  }
  static constexpr KNShowMode KNShowMode_MIN =
    ShowArchive_KNShowMode_KNShowMode_MIN;
  static constexpr KNShowMode KNShowMode_MAX =
    ShowArchive_KNShowMode_KNShowMode_MAX;
  static constexpr int KNShowMode_ARRAYSIZE =
    ShowArchive_KNShowMode_KNShowMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KNShowMode_descriptor() {
    return ShowArchive_KNShowMode_descriptor();
  }
  template<typename T>
  static inline const std::string& KNShowMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KNShowMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KNShowMode_Name.");
    return ShowArchive_KNShowMode_Name(enum_t_value);
  }
  static inline bool KNShowMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KNShowMode* value) {
    return ShowArchive_KNShowMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUiStateFieldNumber = 1,
    kThemeFieldNumber = 2,
    kSlideTreeFieldNumber = 3,
    kSizeFieldNumber = 4,
    kStylesheetFieldNumber = 5,
    kRecordingFieldNumber = 7,
    kSoundtrackFieldNumber = 17,
    kSlideListFieldNumber = 19,
    kModeFieldNumber = 9,
    kSlideNumbersVisibleFieldNumber = 6,
    kLoopPresentationFieldNumber = 8,
    kIdleTimerActiveFieldNumber = 15,
    kAutomaticallyPlaysUponOpenFieldNumber = 18,
    kAutoplayTransitionDelayFieldNumber = 10,
    kAutoplayBuildDelayFieldNumber = 11,
    kIdleTimerDelayFieldNumber = 16,
  };
  // optional .TSP.Reference uiState = 1;
  bool has_uistate() const;
  private:
  bool _internal_has_uistate() const;
  public:
  void clear_uistate();
  const ::TSP::Reference& uistate() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_uistate();
  ::TSP::Reference* mutable_uistate();
  void set_allocated_uistate(::TSP::Reference* uistate);
  private:
  const ::TSP::Reference& _internal_uistate() const;
  ::TSP::Reference* _internal_mutable_uistate();
  public:
  void unsafe_arena_set_allocated_uistate(
      ::TSP::Reference* uistate);
  ::TSP::Reference* unsafe_arena_release_uistate();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .KN.SlideTreeArchive slideTree = 3;
  bool has_slidetree() const;
  private:
  bool _internal_has_slidetree() const;
  public:
  void clear_slidetree();
  const ::KN::SlideTreeArchive& slidetree() const;
  PROTOBUF_MUST_USE_RESULT ::KN::SlideTreeArchive* release_slidetree();
  ::KN::SlideTreeArchive* mutable_slidetree();
  void set_allocated_slidetree(::KN::SlideTreeArchive* slidetree);
  private:
  const ::KN::SlideTreeArchive& _internal_slidetree() const;
  ::KN::SlideTreeArchive* _internal_mutable_slidetree();
  public:
  void unsafe_arena_set_allocated_slidetree(
      ::KN::SlideTreeArchive* slidetree);
  ::KN::SlideTreeArchive* unsafe_arena_release_slidetree();

  // required .TSP.Size size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TSP::Size& size() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Size* release_size();
  ::TSP::Size* mutable_size();
  void set_allocated_size(::TSP::Size* size);
  private:
  const ::TSP::Size& _internal_size() const;
  ::TSP::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TSP::Size* size);
  ::TSP::Size* unsafe_arena_release_size();

  // required .TSP.Reference stylesheet = 5;
  bool has_stylesheet() const;
  private:
  bool _internal_has_stylesheet() const;
  public:
  void clear_stylesheet();
  const ::TSP::Reference& stylesheet() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_stylesheet();
  ::TSP::Reference* mutable_stylesheet();
  void set_allocated_stylesheet(::TSP::Reference* stylesheet);
  private:
  const ::TSP::Reference& _internal_stylesheet() const;
  ::TSP::Reference* _internal_mutable_stylesheet();
  public:
  void unsafe_arena_set_allocated_stylesheet(
      ::TSP::Reference* stylesheet);
  ::TSP::Reference* unsafe_arena_release_stylesheet();

  // optional .TSP.Reference recording = 7;
  bool has_recording() const;
  private:
  bool _internal_has_recording() const;
  public:
  void clear_recording();
  const ::TSP::Reference& recording() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_recording();
  ::TSP::Reference* mutable_recording();
  void set_allocated_recording(::TSP::Reference* recording);
  private:
  const ::TSP::Reference& _internal_recording() const;
  ::TSP::Reference* _internal_mutable_recording();
  public:
  void unsafe_arena_set_allocated_recording(
      ::TSP::Reference* recording);
  ::TSP::Reference* unsafe_arena_release_recording();

  // optional .TSP.Reference soundtrack = 17;
  bool has_soundtrack() const;
  private:
  bool _internal_has_soundtrack() const;
  public:
  void clear_soundtrack();
  const ::TSP::Reference& soundtrack() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_soundtrack();
  ::TSP::Reference* mutable_soundtrack();
  void set_allocated_soundtrack(::TSP::Reference* soundtrack);
  private:
  const ::TSP::Reference& _internal_soundtrack() const;
  ::TSP::Reference* _internal_mutable_soundtrack();
  public:
  void unsafe_arena_set_allocated_soundtrack(
      ::TSP::Reference* soundtrack);
  ::TSP::Reference* unsafe_arena_release_soundtrack();

  // optional .TSP.Reference slideList = 19;
  bool has_slidelist() const;
  private:
  bool _internal_has_slidelist() const;
  public:
  void clear_slidelist();
  const ::TSP::Reference& slidelist() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_slidelist();
  ::TSP::Reference* mutable_slidelist();
  void set_allocated_slidelist(::TSP::Reference* slidelist);
  private:
  const ::TSP::Reference& _internal_slidelist() const;
  ::TSP::Reference* _internal_mutable_slidelist();
  public:
  void unsafe_arena_set_allocated_slidelist(
      ::TSP::Reference* slidelist);
  ::TSP::Reference* unsafe_arena_release_slidelist();

  // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::KN::ShowArchive_KNShowMode mode() const;
  void set_mode(::KN::ShowArchive_KNShowMode value);
  private:
  ::KN::ShowArchive_KNShowMode _internal_mode() const;
  void _internal_set_mode(::KN::ShowArchive_KNShowMode value);
  public:

  // optional bool slideNumbersVisible = 6;
  bool has_slidenumbersvisible() const;
  private:
  bool _internal_has_slidenumbersvisible() const;
  public:
  void clear_slidenumbersvisible();
  bool slidenumbersvisible() const;
  void set_slidenumbersvisible(bool value);
  private:
  bool _internal_slidenumbersvisible() const;
  void _internal_set_slidenumbersvisible(bool value);
  public:

  // optional bool loop_presentation = 8;
  bool has_loop_presentation() const;
  private:
  bool _internal_has_loop_presentation() const;
  public:
  void clear_loop_presentation();
  bool loop_presentation() const;
  void set_loop_presentation(bool value);
  private:
  bool _internal_loop_presentation() const;
  void _internal_set_loop_presentation(bool value);
  public:

  // optional bool idle_timer_active = 15;
  bool has_idle_timer_active() const;
  private:
  bool _internal_has_idle_timer_active() const;
  public:
  void clear_idle_timer_active();
  bool idle_timer_active() const;
  void set_idle_timer_active(bool value);
  private:
  bool _internal_idle_timer_active() const;
  void _internal_set_idle_timer_active(bool value);
  public:

  // optional bool automatically_plays_upon_open = 18;
  bool has_automatically_plays_upon_open() const;
  private:
  bool _internal_has_automatically_plays_upon_open() const;
  public:
  void clear_automatically_plays_upon_open();
  bool automatically_plays_upon_open() const;
  void set_automatically_plays_upon_open(bool value);
  private:
  bool _internal_automatically_plays_upon_open() const;
  void _internal_set_automatically_plays_upon_open(bool value);
  public:

  // optional double autoplay_transition_delay = 10 [default = 5];
  bool has_autoplay_transition_delay() const;
  private:
  bool _internal_has_autoplay_transition_delay() const;
  public:
  void clear_autoplay_transition_delay();
  double autoplay_transition_delay() const;
  void set_autoplay_transition_delay(double value);
  private:
  double _internal_autoplay_transition_delay() const;
  void _internal_set_autoplay_transition_delay(double value);
  public:

  // optional double autoplay_build_delay = 11 [default = 2];
  bool has_autoplay_build_delay() const;
  private:
  bool _internal_has_autoplay_build_delay() const;
  public:
  void clear_autoplay_build_delay();
  double autoplay_build_delay() const;
  void set_autoplay_build_delay(double value);
  private:
  double _internal_autoplay_build_delay() const;
  void _internal_set_autoplay_build_delay(double value);
  public:

  // optional double idle_timer_delay = 16 [default = 900];
  bool has_idle_timer_delay() const;
  private:
  bool _internal_has_idle_timer_delay() const;
  public:
  void clear_idle_timer_delay();
  double idle_timer_delay() const;
  void set_idle_timer_delay(double value);
  private:
  double _internal_idle_timer_delay() const;
  void _internal_set_idle_timer_delay(double value);
  public:

  // @@protoc_insertion_point(class_scope:KN.ShowArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* uistate_;
  ::TSP::Reference* theme_;
  ::KN::SlideTreeArchive* slidetree_;
  ::TSP::Size* size_;
  ::TSP::Reference* stylesheet_;
  ::TSP::Reference* recording_;
  ::TSP::Reference* soundtrack_;
  ::TSP::Reference* slidelist_;
  int mode_;
  bool slidenumbersvisible_;
  bool loop_presentation_;
  bool idle_timer_active_;
  bool automatically_plays_upon_open_;
  double autoplay_transition_delay_;
  double autoplay_build_delay_;
  double idle_timer_delay_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.DocumentArchive) */ {
 public:
  inline DocumentArchive() : DocumentArchive(nullptr) {}
  ~DocumentArchive() override;
  explicit constexpr DocumentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentArchive(const DocumentArchive& from);
  DocumentArchive(DocumentArchive&& from) noexcept
    : DocumentArchive() {
    *this = ::std::move(from);
  }

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentArchive& operator=(DocumentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentArchive*>(
               &_DocumentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DocumentArchive& a, DocumentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentArchive* New() const final {
    return new DocumentArchive();
  }

  DocumentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DocumentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DocumentArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.DocumentArchive";
  }
  protected:
  explicit DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 2,
    kSuperFieldNumber = 3,
    kTablesCustomFormatListFieldNumber = 4,
  };
  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .TSA.DocumentArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSA::DocumentArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSA::DocumentArchive* release_super();
  ::TSA::DocumentArchive* mutable_super();
  void set_allocated_super(::TSA::DocumentArchive* super);
  private:
  const ::TSA::DocumentArchive& _internal_super() const;
  ::TSA::DocumentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSA::DocumentArchive* super);
  ::TSA::DocumentArchive* unsafe_arena_release_super();

  // optional .TSP.Reference tables_custom_format_list = 4;
  bool has_tables_custom_format_list() const;
  private:
  bool _internal_has_tables_custom_format_list() const;
  public:
  void clear_tables_custom_format_list();
  const ::TSP::Reference& tables_custom_format_list() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_tables_custom_format_list();
  ::TSP::Reference* mutable_tables_custom_format_list();
  void set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list);
  private:
  const ::TSP::Reference& _internal_tables_custom_format_list() const;
  ::TSP::Reference* _internal_mutable_tables_custom_format_list();
  public:
  void unsafe_arena_set_allocated_tables_custom_format_list(
      ::TSP::Reference* tables_custom_format_list);
  ::TSP::Reference* unsafe_arena_release_tables_custom_format_list();

  // @@protoc_insertion_point(class_scope:KN.DocumentArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* show_;
  ::TSA::DocumentArchive* super_;
  ::TSP::Reference* tables_custom_format_list_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideStylePropertiesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideStylePropertiesArchive) */ {
 public:
  inline SlideStylePropertiesArchive() : SlideStylePropertiesArchive(nullptr) {}
  ~SlideStylePropertiesArchive() override;
  explicit constexpr SlideStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideStylePropertiesArchive(const SlideStylePropertiesArchive& from);
  SlideStylePropertiesArchive(SlideStylePropertiesArchive&& from) noexcept
    : SlideStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline SlideStylePropertiesArchive& operator=(const SlideStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideStylePropertiesArchive& operator=(SlideStylePropertiesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const SlideStylePropertiesArchive*>(
               &_SlideStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SlideStylePropertiesArchive& a, SlideStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideStylePropertiesArchive* New() const final {
    return new SlideStylePropertiesArchive();
  }

  SlideStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideStylePropertiesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideStylePropertiesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideStylePropertiesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideStylePropertiesArchive";
  }
  protected:
  explicit SlideStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillFieldNumber = 1,
    kTransitionFieldNumber = 2,
    kTransitionNullFieldNumber = 3,
    kTitlePlaceholderVisibilityFieldNumber = 4,
    kBodyPlaceholderVisibilityFieldNumber = 5,
    kObjectPlaceholderVisibilityFieldNumber = 7,
    kSlideNumberPlaceholderVisibilityFieldNumber = 6,
  };
  // optional .TSD.FillArchive fill = 1;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  const ::TSD::FillArchive& fill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_fill();
  ::TSD::FillArchive* mutable_fill();
  void set_allocated_fill(::TSD::FillArchive* fill);
  private:
  const ::TSD::FillArchive& _internal_fill() const;
  ::TSD::FillArchive* _internal_mutable_fill();
  public:
  void unsafe_arena_set_allocated_fill(
      ::TSD::FillArchive* fill);
  ::TSD::FillArchive* unsafe_arena_release_fill();

  // optional .KN.TransitionAttributesArchive transition = 2;
  bool has_transition() const;
  private:
  bool _internal_has_transition() const;
  public:
  void clear_transition();
  const ::KN::TransitionAttributesArchive& transition() const;
  PROTOBUF_MUST_USE_RESULT ::KN::TransitionAttributesArchive* release_transition();
  ::KN::TransitionAttributesArchive* mutable_transition();
  void set_allocated_transition(::KN::TransitionAttributesArchive* transition);
  private:
  const ::KN::TransitionAttributesArchive& _internal_transition() const;
  ::KN::TransitionAttributesArchive* _internal_mutable_transition();
  public:
  void unsafe_arena_set_allocated_transition(
      ::KN::TransitionAttributesArchive* transition);
  ::KN::TransitionAttributesArchive* unsafe_arena_release_transition();

  // optional bool transition_null = 3;
  bool has_transition_null() const;
  private:
  bool _internal_has_transition_null() const;
  public:
  void clear_transition_null();
  bool transition_null() const;
  void set_transition_null(bool value);
  private:
  bool _internal_transition_null() const;
  void _internal_set_transition_null(bool value);
  public:

  // optional bool titlePlaceholderVisibility = 4;
  bool has_titleplaceholdervisibility() const;
  private:
  bool _internal_has_titleplaceholdervisibility() const;
  public:
  void clear_titleplaceholdervisibility();
  bool titleplaceholdervisibility() const;
  void set_titleplaceholdervisibility(bool value);
  private:
  bool _internal_titleplaceholdervisibility() const;
  void _internal_set_titleplaceholdervisibility(bool value);
  public:

  // optional bool bodyPlaceholderVisibility = 5;
  bool has_bodyplaceholdervisibility() const;
  private:
  bool _internal_has_bodyplaceholdervisibility() const;
  public:
  void clear_bodyplaceholdervisibility();
  bool bodyplaceholdervisibility() const;
  void set_bodyplaceholdervisibility(bool value);
  private:
  bool _internal_bodyplaceholdervisibility() const;
  void _internal_set_bodyplaceholdervisibility(bool value);
  public:

  // optional bool objectPlaceholderVisibility = 7;
  bool has_objectplaceholdervisibility() const;
  private:
  bool _internal_has_objectplaceholdervisibility() const;
  public:
  void clear_objectplaceholdervisibility();
  bool objectplaceholdervisibility() const;
  void set_objectplaceholdervisibility(bool value);
  private:
  bool _internal_objectplaceholdervisibility() const;
  void _internal_set_objectplaceholdervisibility(bool value);
  public:

  // optional bool slideNumberPlaceholderVisibility = 6;
  bool has_slidenumberplaceholdervisibility() const;
  private:
  bool _internal_has_slidenumberplaceholdervisibility() const;
  public:
  void clear_slidenumberplaceholdervisibility();
  bool slidenumberplaceholdervisibility() const;
  void set_slidenumberplaceholdervisibility(bool value);
  private:
  bool _internal_slidenumberplaceholdervisibility() const;
  void _internal_set_slidenumberplaceholdervisibility(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::FillArchive* fill_;
  ::KN::TransitionAttributesArchive* transition_;
  bool transition_null_;
  bool titleplaceholdervisibility_;
  bool bodyplaceholdervisibility_;
  bool objectplaceholdervisibility_;
  bool slidenumberplaceholdervisibility_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideStyleArchive) */ {
 public:
  inline SlideStyleArchive() : SlideStyleArchive(nullptr) {}
  ~SlideStyleArchive() override;
  explicit constexpr SlideStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideStyleArchive(const SlideStyleArchive& from);
  SlideStyleArchive(SlideStyleArchive&& from) noexcept
    : SlideStyleArchive() {
    *this = ::std::move(from);
  }

  inline SlideStyleArchive& operator=(const SlideStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideStyleArchive& operator=(SlideStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideStyleArchive* internal_default_instance() {
    return reinterpret_cast<const SlideStyleArchive*>(
               &_SlideStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SlideStyleArchive& a, SlideStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideStyleArchive* New() const final {
    return new SlideStyleArchive();
  }

  SlideStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideStyleArchive";
  }
  protected:
  explicit SlideStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlidePropertiesFieldNumber = 11,
    kOverrideCountFieldNumber = 10,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
  bool has_slide_properties() const;
  private:
  bool _internal_has_slide_properties() const;
  public:
  void clear_slide_properties();
  const ::KN::SlideStylePropertiesArchive& slide_properties() const;
  PROTOBUF_MUST_USE_RESULT ::KN::SlideStylePropertiesArchive* release_slide_properties();
  ::KN::SlideStylePropertiesArchive* mutable_slide_properties();
  void set_allocated_slide_properties(::KN::SlideStylePropertiesArchive* slide_properties);
  private:
  const ::KN::SlideStylePropertiesArchive& _internal_slide_properties() const;
  ::KN::SlideStylePropertiesArchive* _internal_mutable_slide_properties();
  public:
  void unsafe_arena_set_allocated_slide_properties(
      ::KN::SlideStylePropertiesArchive* slide_properties);
  ::KN::SlideStylePropertiesArchive* unsafe_arena_release_slide_properties();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::KN::SlideStylePropertiesArchive* slide_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class PasteboardNativeStorageArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.PasteboardNativeStorageArchive) */ {
 public:
  inline PasteboardNativeStorageArchive() : PasteboardNativeStorageArchive(nullptr) {}
  ~PasteboardNativeStorageArchive() override;
  explicit constexpr PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasteboardNativeStorageArchive(const PasteboardNativeStorageArchive& from);
  PasteboardNativeStorageArchive(PasteboardNativeStorageArchive&& from) noexcept
    : PasteboardNativeStorageArchive() {
    *this = ::std::move(from);
  }

  inline PasteboardNativeStorageArchive& operator=(const PasteboardNativeStorageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasteboardNativeStorageArchive& operator=(PasteboardNativeStorageArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasteboardNativeStorageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasteboardNativeStorageArchive* internal_default_instance() {
    return reinterpret_cast<const PasteboardNativeStorageArchive*>(
               &_PasteboardNativeStorageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PasteboardNativeStorageArchive& a, PasteboardNativeStorageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PasteboardNativeStorageArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasteboardNativeStorageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasteboardNativeStorageArchive* New() const final {
    return new PasteboardNativeStorageArchive();
  }

  PasteboardNativeStorageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasteboardNativeStorageArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PasteboardNativeStorageArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PasteboardNativeStorageArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasteboardNativeStorageArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.PasteboardNativeStorageArchive";
  }
  protected:
  explicit PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 1,
    kBuildsFieldNumber = 2,
    kBuildChunksFieldNumber = 3,
    kSlideNodesFieldNumber = 4,
    kTitleRangesFieldNumber = 6,
    kGeometriesInRootFieldNumber = 7,
    kTemplateSlideNodesFieldNumber = 9,
    kCollapsedSlideNodesFieldNumber = 10,
    kOutlineCollapsedSlideNodesFieldNumber = 11,
    kDisplayedSlideNodesFieldNumber = 12,
    kOutlineHasBodySlideNodesFieldNumber = 13,
    kCustomEffectTimingCurvesFieldNumber = 14,
    kOriginalSlideNodeUUIDsFieldNumber = 15,
    kSlideNodeUniqueIdentifierFieldNumber = 8,
    kOriginalShowSizeFieldNumber = 5,
    kTransitionFieldNumber = 17,
    kSlideNodesHaveDatasNeedingDownloadFieldNumber = 16,
  };
  // repeated .TSP.Reference drawables = 1;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // repeated .TSP.Reference builds = 2;
  int builds_size() const;
  private:
  int _internal_builds_size() const;
  public:
  void clear_builds();
  ::TSP::Reference* mutable_builds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_builds();
  private:
  const ::TSP::Reference& _internal_builds(int index) const;
  ::TSP::Reference* _internal_add_builds();
  public:
  const ::TSP::Reference& builds(int index) const;
  ::TSP::Reference* add_builds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      builds() const;

  // repeated .TSP.Reference buildChunks = 3;
  int buildchunks_size() const;
  private:
  int _internal_buildchunks_size() const;
  public:
  void clear_buildchunks();
  ::TSP::Reference* mutable_buildchunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_buildchunks();
  private:
  const ::TSP::Reference& _internal_buildchunks(int index) const;
  ::TSP::Reference* _internal_add_buildchunks();
  public:
  const ::TSP::Reference& buildchunks(int index) const;
  ::TSP::Reference* add_buildchunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      buildchunks() const;

  // repeated .TSP.Reference slideNodes = 4;
  int slidenodes_size() const;
  private:
  int _internal_slidenodes_size() const;
  public:
  void clear_slidenodes();
  ::TSP::Reference* mutable_slidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slidenodes();
  private:
  const ::TSP::Reference& _internal_slidenodes(int index) const;
  ::TSP::Reference* _internal_add_slidenodes();
  public:
  const ::TSP::Reference& slidenodes(int index) const;
  ::TSP::Reference* add_slidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slidenodes() const;

  // repeated .TSP.Range titleRanges = 6;
  int titleranges_size() const;
  private:
  int _internal_titleranges_size() const;
  public:
  void clear_titleranges();
  ::TSP::Range* mutable_titleranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
      mutable_titleranges();
  private:
  const ::TSP::Range& _internal_titleranges(int index) const;
  ::TSP::Range* _internal_add_titleranges();
  public:
  const ::TSP::Range& titleranges(int index) const;
  ::TSP::Range* add_titleranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
      titleranges() const;

  // repeated .TSD.GeometryArchive geometries_in_root = 7;
  int geometries_in_root_size() const;
  private:
  int _internal_geometries_in_root_size() const;
  public:
  void clear_geometries_in_root();
  ::TSD::GeometryArchive* mutable_geometries_in_root(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GeometryArchive >*
      mutable_geometries_in_root();
  private:
  const ::TSD::GeometryArchive& _internal_geometries_in_root(int index) const;
  ::TSD::GeometryArchive* _internal_add_geometries_in_root();
  public:
  const ::TSD::GeometryArchive& geometries_in_root(int index) const;
  ::TSD::GeometryArchive* add_geometries_in_root();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GeometryArchive >&
      geometries_in_root() const;

  // repeated .TSP.Reference template_slide_nodes = 9;
  int template_slide_nodes_size() const;
  private:
  int _internal_template_slide_nodes_size() const;
  public:
  void clear_template_slide_nodes();
  ::TSP::Reference* mutable_template_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_template_slide_nodes();
  private:
  const ::TSP::Reference& _internal_template_slide_nodes(int index) const;
  ::TSP::Reference* _internal_add_template_slide_nodes();
  public:
  const ::TSP::Reference& template_slide_nodes(int index) const;
  ::TSP::Reference* add_template_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      template_slide_nodes() const;

  // repeated .TSP.Reference collapsedSlideNodes = 10;
  int collapsedslidenodes_size() const;
  private:
  int _internal_collapsedslidenodes_size() const;
  public:
  void clear_collapsedslidenodes();
  ::TSP::Reference* mutable_collapsedslidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_collapsedslidenodes();
  private:
  const ::TSP::Reference& _internal_collapsedslidenodes(int index) const;
  ::TSP::Reference* _internal_add_collapsedslidenodes();
  public:
  const ::TSP::Reference& collapsedslidenodes(int index) const;
  ::TSP::Reference* add_collapsedslidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      collapsedslidenodes() const;

  // repeated .TSP.Reference outlineCollapsedSlideNodes = 11;
  int outlinecollapsedslidenodes_size() const;
  private:
  int _internal_outlinecollapsedslidenodes_size() const;
  public:
  void clear_outlinecollapsedslidenodes();
  ::TSP::Reference* mutable_outlinecollapsedslidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_outlinecollapsedslidenodes();
  private:
  const ::TSP::Reference& _internal_outlinecollapsedslidenodes(int index) const;
  ::TSP::Reference* _internal_add_outlinecollapsedslidenodes();
  public:
  const ::TSP::Reference& outlinecollapsedslidenodes(int index) const;
  ::TSP::Reference* add_outlinecollapsedslidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      outlinecollapsedslidenodes() const;

  // repeated .TSP.Reference displayed_slide_nodes = 12;
  int displayed_slide_nodes_size() const;
  private:
  int _internal_displayed_slide_nodes_size() const;
  public:
  void clear_displayed_slide_nodes();
  ::TSP::Reference* mutable_displayed_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_displayed_slide_nodes();
  private:
  const ::TSP::Reference& _internal_displayed_slide_nodes(int index) const;
  ::TSP::Reference* _internal_add_displayed_slide_nodes();
  public:
  const ::TSP::Reference& displayed_slide_nodes(int index) const;
  ::TSP::Reference* add_displayed_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      displayed_slide_nodes() const;

  // repeated .TSP.Reference outlineHasBodySlideNodes = 13;
  int outlinehasbodyslidenodes_size() const;
  private:
  int _internal_outlinehasbodyslidenodes_size() const;
  public:
  void clear_outlinehasbodyslidenodes();
  ::TSP::Reference* mutable_outlinehasbodyslidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_outlinehasbodyslidenodes();
  private:
  const ::TSP::Reference& _internal_outlinehasbodyslidenodes(int index) const;
  ::TSP::Reference* _internal_add_outlinehasbodyslidenodes();
  public:
  const ::TSP::Reference& outlinehasbodyslidenodes(int index) const;
  ::TSP::Reference* add_outlinehasbodyslidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      outlinehasbodyslidenodes() const;

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 14;
  int custom_effect_timing_curves_size() const;
  private:
  int _internal_custom_effect_timing_curves_size() const;
  public:
  void clear_custom_effect_timing_curves();
  ::KN::ThemeCustomTimingCurveArchive* mutable_custom_effect_timing_curves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive >*
      mutable_custom_effect_timing_curves();
  private:
  const ::KN::ThemeCustomTimingCurveArchive& _internal_custom_effect_timing_curves(int index) const;
  ::KN::ThemeCustomTimingCurveArchive* _internal_add_custom_effect_timing_curves();
  public:
  const ::KN::ThemeCustomTimingCurveArchive& custom_effect_timing_curves(int index) const;
  ::KN::ThemeCustomTimingCurveArchive* add_custom_effect_timing_curves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive >&
      custom_effect_timing_curves() const;

  // repeated string original_slide_node_UUIDs = 15;
  int original_slide_node_uuids_size() const;
  private:
  int _internal_original_slide_node_uuids_size() const;
  public:
  void clear_original_slide_node_uuids();
  const std::string& original_slide_node_uuids(int index) const;
  std::string* mutable_original_slide_node_uuids(int index);
  void set_original_slide_node_uuids(int index, const std::string& value);
  void set_original_slide_node_uuids(int index, std::string&& value);
  void set_original_slide_node_uuids(int index, const char* value);
  void set_original_slide_node_uuids(int index, const char* value, size_t size);
  std::string* add_original_slide_node_uuids();
  void add_original_slide_node_uuids(const std::string& value);
  void add_original_slide_node_uuids(std::string&& value);
  void add_original_slide_node_uuids(const char* value);
  void add_original_slide_node_uuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& original_slide_node_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_original_slide_node_uuids();
  private:
  const std::string& _internal_original_slide_node_uuids(int index) const;
  std::string* _internal_add_original_slide_node_uuids();
  public:

  // optional string slide_node_unique_identifier = 8;
  bool has_slide_node_unique_identifier() const;
  private:
  bool _internal_has_slide_node_unique_identifier() const;
  public:
  void clear_slide_node_unique_identifier();
  const std::string& slide_node_unique_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slide_node_unique_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slide_node_unique_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_slide_node_unique_identifier();
  void set_allocated_slide_node_unique_identifier(std::string* slide_node_unique_identifier);
  private:
  const std::string& _internal_slide_node_unique_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slide_node_unique_identifier(const std::string& value);
  std::string* _internal_mutable_slide_node_unique_identifier();
  public:

  // optional .TSP.Size originalShowSize = 5;
  bool has_originalshowsize() const;
  private:
  bool _internal_has_originalshowsize() const;
  public:
  void clear_originalshowsize();
  const ::TSP::Size& originalshowsize() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Size* release_originalshowsize();
  ::TSP::Size* mutable_originalshowsize();
  void set_allocated_originalshowsize(::TSP::Size* originalshowsize);
  private:
  const ::TSP::Size& _internal_originalshowsize() const;
  ::TSP::Size* _internal_mutable_originalshowsize();
  public:
  void unsafe_arena_set_allocated_originalshowsize(
      ::TSP::Size* originalshowsize);
  ::TSP::Size* unsafe_arena_release_originalshowsize();

  // optional .KN.TransitionArchive transition = 17;
  bool has_transition() const;
  private:
  bool _internal_has_transition() const;
  public:
  void clear_transition();
  const ::KN::TransitionArchive& transition() const;
  PROTOBUF_MUST_USE_RESULT ::KN::TransitionArchive* release_transition();
  ::KN::TransitionArchive* mutable_transition();
  void set_allocated_transition(::KN::TransitionArchive* transition);
  private:
  const ::KN::TransitionArchive& _internal_transition() const;
  ::KN::TransitionArchive* _internal_mutable_transition();
  public:
  void unsafe_arena_set_allocated_transition(
      ::KN::TransitionArchive* transition);
  ::KN::TransitionArchive* unsafe_arena_release_transition();

  // optional bool slide_nodes_have_datas_needing_download = 16;
  bool has_slide_nodes_have_datas_needing_download() const;
  private:
  bool _internal_has_slide_nodes_have_datas_needing_download() const;
  public:
  void clear_slide_nodes_have_datas_needing_download();
  bool slide_nodes_have_datas_needing_download() const;
  void set_slide_nodes_have_datas_needing_download(bool value);
  private:
  bool _internal_slide_nodes_have_datas_needing_download() const;
  void _internal_set_slide_nodes_have_datas_needing_download(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.PasteboardNativeStorageArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > builds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > buildchunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slidenodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range > titleranges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GeometryArchive > geometries_in_root_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > template_slide_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > collapsedslidenodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > outlinecollapsedslidenodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > displayed_slide_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > outlinehasbodyslidenodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive > custom_effect_timing_curves_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> original_slide_node_uuids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slide_node_unique_identifier_;
  ::TSP::Size* originalshowsize_;
  ::KN::TransitionArchive* transition_;
  bool slide_nodes_have_datas_needing_download_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class PrototypeForUndoTemplateChangeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.PrototypeForUndoTemplateChangeArchive) */ {
 public:
  inline PrototypeForUndoTemplateChangeArchive() : PrototypeForUndoTemplateChangeArchive(nullptr) {}
  ~PrototypeForUndoTemplateChangeArchive() override;
  explicit constexpr PrototypeForUndoTemplateChangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrototypeForUndoTemplateChangeArchive(const PrototypeForUndoTemplateChangeArchive& from);
  PrototypeForUndoTemplateChangeArchive(PrototypeForUndoTemplateChangeArchive&& from) noexcept
    : PrototypeForUndoTemplateChangeArchive() {
    *this = ::std::move(from);
  }

  inline PrototypeForUndoTemplateChangeArchive& operator=(const PrototypeForUndoTemplateChangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrototypeForUndoTemplateChangeArchive& operator=(PrototypeForUndoTemplateChangeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrototypeForUndoTemplateChangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrototypeForUndoTemplateChangeArchive* internal_default_instance() {
    return reinterpret_cast<const PrototypeForUndoTemplateChangeArchive*>(
               &_PrototypeForUndoTemplateChangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PrototypeForUndoTemplateChangeArchive& a, PrototypeForUndoTemplateChangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PrototypeForUndoTemplateChangeArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrototypeForUndoTemplateChangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrototypeForUndoTemplateChangeArchive* New() const final {
    return new PrototypeForUndoTemplateChangeArchive();
  }

  PrototypeForUndoTemplateChangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrototypeForUndoTemplateChangeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrototypeForUndoTemplateChangeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PrototypeForUndoTemplateChangeArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrototypeForUndoTemplateChangeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.PrototypeForUndoTemplateChangeArchive";
  }
  protected:
  explicit PrototypeForUndoTemplateChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableInfoIdListFieldNumber = 3,
    kPlaceholdersFieldNumber = 4,
    kPlaceholderTagsListFieldNumber = 5,
    kSlideStyleFieldNumber = 1,
    kTemplateSlideIdFieldNumber = 2,
  };
  // repeated .TSP.UUID drawable_info_id_list = 3;
  int drawable_info_id_list_size() const;
  private:
  int _internal_drawable_info_id_list_size() const;
  public:
  void clear_drawable_info_id_list();
  ::TSP::UUID* mutable_drawable_info_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_drawable_info_id_list();
  private:
  const ::TSP::UUID& _internal_drawable_info_id_list(int index) const;
  ::TSP::UUID* _internal_add_drawable_info_id_list();
  public:
  const ::TSP::UUID& drawable_info_id_list(int index) const;
  ::TSP::UUID* add_drawable_info_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      drawable_info_id_list() const;

  // repeated .TSP.Reference placeholders = 4;
  int placeholders_size() const;
  private:
  int _internal_placeholders_size() const;
  public:
  void clear_placeholders();
  ::TSP::Reference* mutable_placeholders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_placeholders();
  private:
  const ::TSP::Reference& _internal_placeholders(int index) const;
  ::TSP::Reference* _internal_add_placeholders();
  public:
  const ::TSP::Reference& placeholders(int index) const;
  ::TSP::Reference* add_placeholders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      placeholders() const;

  // repeated string placeholder_tags_list = 5;
  int placeholder_tags_list_size() const;
  private:
  int _internal_placeholder_tags_list_size() const;
  public:
  void clear_placeholder_tags_list();
  const std::string& placeholder_tags_list(int index) const;
  std::string* mutable_placeholder_tags_list(int index);
  void set_placeholder_tags_list(int index, const std::string& value);
  void set_placeholder_tags_list(int index, std::string&& value);
  void set_placeholder_tags_list(int index, const char* value);
  void set_placeholder_tags_list(int index, const char* value, size_t size);
  std::string* add_placeholder_tags_list();
  void add_placeholder_tags_list(const std::string& value);
  void add_placeholder_tags_list(std::string&& value);
  void add_placeholder_tags_list(const char* value);
  void add_placeholder_tags_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& placeholder_tags_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_placeholder_tags_list();
  private:
  const std::string& _internal_placeholder_tags_list(int index) const;
  std::string* _internal_add_placeholder_tags_list();
  public:

  // optional .TSP.Reference slide_style = 1;
  bool has_slide_style() const;
  private:
  bool _internal_has_slide_style() const;
  public:
  void clear_slide_style();
  const ::TSP::Reference& slide_style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_slide_style();
  ::TSP::Reference* mutable_slide_style();
  void set_allocated_slide_style(::TSP::Reference* slide_style);
  private:
  const ::TSP::Reference& _internal_slide_style() const;
  ::TSP::Reference* _internal_mutable_slide_style();
  public:
  void unsafe_arena_set_allocated_slide_style(
      ::TSP::Reference* slide_style);
  ::TSP::Reference* unsafe_arena_release_slide_style();

  // required .TSP.UUID template_slide_id = 2;
  bool has_template_slide_id() const;
  private:
  bool _internal_has_template_slide_id() const;
  public:
  void clear_template_slide_id();
  const ::TSP::UUID& template_slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_template_slide_id();
  ::TSP::UUID* mutable_template_slide_id();
  void set_allocated_template_slide_id(::TSP::UUID* template_slide_id);
  private:
  const ::TSP::UUID& _internal_template_slide_id() const;
  ::TSP::UUID* _internal_mutable_template_slide_id();
  public:
  void unsafe_arena_set_allocated_template_slide_id(
      ::TSP::UUID* template_slide_id);
  ::TSP::UUID* unsafe_arena_release_template_slide_id();

  // @@protoc_insertion_point(class_scope:KN.PrototypeForUndoTemplateChangeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > drawable_info_id_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > placeholders_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> placeholder_tags_list_;
  ::TSP::Reference* slide_style_;
  ::TSP::UUID* template_slide_id_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingArchive) */ {
 public:
  inline RecordingArchive() : RecordingArchive(nullptr) {}
  ~RecordingArchive() override;
  explicit constexpr RecordingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingArchive(const RecordingArchive& from);
  RecordingArchive(RecordingArchive&& from) noexcept
    : RecordingArchive() {
    *this = ::std::move(from);
  }

  inline RecordingArchive& operator=(const RecordingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingArchive& operator=(RecordingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingArchive*>(
               &_RecordingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(RecordingArchive& a, RecordingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingArchive* New() const final {
    return new RecordingArchive();
  }

  RecordingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingArchive";
  }
  protected:
  explicit RecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordingArchive_RecordingSyncStateEnum RecordingSyncStateEnum;
  static constexpr RecordingSyncStateEnum kRecordingSyncStateInSyncWithShow =
    RecordingArchive_RecordingSyncStateEnum_kRecordingSyncStateInSyncWithShow;
  static constexpr RecordingSyncStateEnum kRecordingSyncStateOutOfSyncWithShow =
    RecordingArchive_RecordingSyncStateEnum_kRecordingSyncStateOutOfSyncWithShow;
  static inline bool RecordingSyncStateEnum_IsValid(int value) {
    return RecordingArchive_RecordingSyncStateEnum_IsValid(value);
  }
  static constexpr RecordingSyncStateEnum RecordingSyncStateEnum_MIN =
    RecordingArchive_RecordingSyncStateEnum_RecordingSyncStateEnum_MIN;
  static constexpr RecordingSyncStateEnum RecordingSyncStateEnum_MAX =
    RecordingArchive_RecordingSyncStateEnum_RecordingSyncStateEnum_MAX;
  static constexpr int RecordingSyncStateEnum_ARRAYSIZE =
    RecordingArchive_RecordingSyncStateEnum_RecordingSyncStateEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordingSyncStateEnum_descriptor() {
    return RecordingArchive_RecordingSyncStateEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordingSyncStateEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordingSyncStateEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordingSyncStateEnum_Name.");
    return RecordingArchive_RecordingSyncStateEnum_Name(enum_t_value);
  }
  static inline bool RecordingSyncStateEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecordingSyncStateEnum* value) {
    return RecordingArchive_RecordingSyncStateEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventTracksFieldNumber = 1,
    kMovieTrackFieldNumber = 2,
    kModificationDateFieldNumber = 5,
    kSyncStateFieldNumber = 6,
    kCorrectionHistoryFieldNumber = 7,
    kDurationFieldNumber = 3,
    kSyncStateEnumFieldNumber = 4,
  };
  // repeated .TSP.Reference event_tracks = 1;
  int event_tracks_size() const;
  private:
  int _internal_event_tracks_size() const;
  public:
  void clear_event_tracks();
  ::TSP::Reference* mutable_event_tracks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_event_tracks();
  private:
  const ::TSP::Reference& _internal_event_tracks(int index) const;
  ::TSP::Reference* _internal_add_event_tracks();
  public:
  const ::TSP::Reference& event_tracks(int index) const;
  ::TSP::Reference* add_event_tracks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      event_tracks() const;

  // optional .TSP.Reference movie_track = 2;
  bool has_movie_track() const;
  private:
  bool _internal_has_movie_track() const;
  public:
  void clear_movie_track();
  const ::TSP::Reference& movie_track() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_movie_track();
  ::TSP::Reference* mutable_movie_track();
  void set_allocated_movie_track(::TSP::Reference* movie_track);
  private:
  const ::TSP::Reference& _internal_movie_track() const;
  ::TSP::Reference* _internal_mutable_movie_track();
  public:
  void unsafe_arena_set_allocated_movie_track(
      ::TSP::Reference* movie_track);
  ::TSP::Reference* unsafe_arena_release_movie_track();

  // optional .TSP.Date modification_date = 5;
  bool has_modification_date() const;
  private:
  bool _internal_has_modification_date() const;
  public:
  void clear_modification_date();
  const ::TSP::Date& modification_date() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Date* release_modification_date();
  ::TSP::Date* mutable_modification_date();
  void set_allocated_modification_date(::TSP::Date* modification_date);
  private:
  const ::TSP::Date& _internal_modification_date() const;
  ::TSP::Date* _internal_mutable_modification_date();
  public:
  void unsafe_arena_set_allocated_modification_date(
      ::TSP::Date* modification_date);
  ::TSP::Date* unsafe_arena_release_modification_date();

  // optional .KN.RecordingSyncState sync_state = 6;
  bool has_sync_state() const;
  private:
  bool _internal_has_sync_state() const;
  public:
  void clear_sync_state();
  const ::KN::RecordingSyncState& sync_state() const;
  PROTOBUF_MUST_USE_RESULT ::KN::RecordingSyncState* release_sync_state();
  ::KN::RecordingSyncState* mutable_sync_state();
  void set_allocated_sync_state(::KN::RecordingSyncState* sync_state);
  private:
  const ::KN::RecordingSyncState& _internal_sync_state() const;
  ::KN::RecordingSyncState* _internal_mutable_sync_state();
  public:
  void unsafe_arena_set_allocated_sync_state(
      ::KN::RecordingSyncState* sync_state);
  ::KN::RecordingSyncState* unsafe_arena_release_sync_state();

  // optional .KN.RecordingCorrectionHistory correction_history = 7;
  bool has_correction_history() const;
  private:
  bool _internal_has_correction_history() const;
  public:
  void clear_correction_history();
  const ::KN::RecordingCorrectionHistory& correction_history() const;
  PROTOBUF_MUST_USE_RESULT ::KN::RecordingCorrectionHistory* release_correction_history();
  ::KN::RecordingCorrectionHistory* mutable_correction_history();
  void set_allocated_correction_history(::KN::RecordingCorrectionHistory* correction_history);
  private:
  const ::KN::RecordingCorrectionHistory& _internal_correction_history() const;
  ::KN::RecordingCorrectionHistory* _internal_mutable_correction_history();
  public:
  void unsafe_arena_set_allocated_correction_history(
      ::KN::RecordingCorrectionHistory* correction_history);
  ::KN::RecordingCorrectionHistory* unsafe_arena_release_correction_history();

  // optional double duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // optional .KN.RecordingArchive.RecordingSyncStateEnum sync_state_enum = 4 [default = kRecordingSyncStateInSyncWithShow, deprecated = true];
  PROTOBUF_DEPRECATED bool has_sync_state_enum() const;
  private:
  bool _internal_has_sync_state_enum() const;
  public:
  PROTOBUF_DEPRECATED void clear_sync_state_enum();
  PROTOBUF_DEPRECATED ::KN::RecordingArchive_RecordingSyncStateEnum sync_state_enum() const;
  PROTOBUF_DEPRECATED void set_sync_state_enum(::KN::RecordingArchive_RecordingSyncStateEnum value);
  private:
  ::KN::RecordingArchive_RecordingSyncStateEnum _internal_sync_state_enum() const;
  void _internal_set_sync_state_enum(::KN::RecordingArchive_RecordingSyncStateEnum value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > event_tracks_;
  ::TSP::Reference* movie_track_;
  ::TSP::Date* modification_date_;
  ::KN::RecordingSyncState* sync_state_;
  ::KN::RecordingCorrectionHistory* correction_history_;
  double duration_;
  int sync_state_enum_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingSyncState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingSyncState) */ {
 public:
  inline RecordingSyncState() : RecordingSyncState(nullptr) {}
  ~RecordingSyncState() override;
  explicit constexpr RecordingSyncState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingSyncState(const RecordingSyncState& from);
  RecordingSyncState(RecordingSyncState&& from) noexcept
    : RecordingSyncState() {
    *this = ::std::move(from);
  }

  inline RecordingSyncState& operator=(const RecordingSyncState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingSyncState& operator=(RecordingSyncState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingSyncState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingSyncState* internal_default_instance() {
    return reinterpret_cast<const RecordingSyncState*>(
               &_RecordingSyncState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RecordingSyncState& a, RecordingSyncState& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingSyncState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingSyncState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingSyncState* New() const final {
    return new RecordingSyncState();
  }

  RecordingSyncState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingSyncState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingSyncState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingSyncState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingSyncState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingSyncState";
  }
  protected:
  explicit RecordingSyncState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutOfSyncTokenFieldNumber = 1,
    kCanClearOutOfSyncTokenFieldNumber = 2,
  };
  // optional .TSP.UUID out_of_sync_token = 1;
  bool has_out_of_sync_token() const;
  private:
  bool _internal_has_out_of_sync_token() const;
  public:
  void clear_out_of_sync_token();
  const ::TSP::UUID& out_of_sync_token() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_out_of_sync_token();
  ::TSP::UUID* mutable_out_of_sync_token();
  void set_allocated_out_of_sync_token(::TSP::UUID* out_of_sync_token);
  private:
  const ::TSP::UUID& _internal_out_of_sync_token() const;
  ::TSP::UUID* _internal_mutable_out_of_sync_token();
  public:
  void unsafe_arena_set_allocated_out_of_sync_token(
      ::TSP::UUID* out_of_sync_token);
  ::TSP::UUID* unsafe_arena_release_out_of_sync_token();

  // optional bool can_clear_out_of_sync_token = 2 [default = false];
  bool has_can_clear_out_of_sync_token() const;
  private:
  bool _internal_has_can_clear_out_of_sync_token() const;
  public:
  void clear_can_clear_out_of_sync_token();
  bool can_clear_out_of_sync_token() const;
  void set_can_clear_out_of_sync_token(bool value);
  private:
  bool _internal_can_clear_out_of_sync_token() const;
  void _internal_set_can_clear_out_of_sync_token(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingSyncState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* out_of_sync_token_;
  bool can_clear_out_of_sync_token_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingCorrectionHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingCorrectionHistory) */ {
 public:
  inline RecordingCorrectionHistory() : RecordingCorrectionHistory(nullptr) {}
  ~RecordingCorrectionHistory() override;
  explicit constexpr RecordingCorrectionHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingCorrectionHistory(const RecordingCorrectionHistory& from);
  RecordingCorrectionHistory(RecordingCorrectionHistory&& from) noexcept
    : RecordingCorrectionHistory() {
    *this = ::std::move(from);
  }

  inline RecordingCorrectionHistory& operator=(const RecordingCorrectionHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingCorrectionHistory& operator=(RecordingCorrectionHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingCorrectionHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingCorrectionHistory* internal_default_instance() {
    return reinterpret_cast<const RecordingCorrectionHistory*>(
               &_RecordingCorrectionHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RecordingCorrectionHistory& a, RecordingCorrectionHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingCorrectionHistory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingCorrectionHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingCorrectionHistory* New() const final {
    return new RecordingCorrectionHistory();
  }

  RecordingCorrectionHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingCorrectionHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingCorrectionHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingCorrectionHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingCorrectionHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingCorrectionHistory";
  }
  protected:
  explicit RecordingCorrectionHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDidAddMissingEventsForRadar49654305FieldNumber = 1,
  };
  // optional bool did_add_missing_events_for_radar_49654305 = 1;
  bool has_did_add_missing_events_for_radar_49654305() const;
  private:
  bool _internal_has_did_add_missing_events_for_radar_49654305() const;
  public:
  void clear_did_add_missing_events_for_radar_49654305();
  bool did_add_missing_events_for_radar_49654305() const;
  void set_did_add_missing_events_for_radar_49654305(bool value);
  private:
  bool _internal_did_add_missing_events_for_radar_49654305() const;
  void _internal_set_did_add_missing_events_for_radar_49654305(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingCorrectionHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool did_add_missing_events_for_radar_49654305_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingEventTrackArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingEventTrackArchive) */ {
 public:
  inline RecordingEventTrackArchive() : RecordingEventTrackArchive(nullptr) {}
  ~RecordingEventTrackArchive() override;
  explicit constexpr RecordingEventTrackArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingEventTrackArchive(const RecordingEventTrackArchive& from);
  RecordingEventTrackArchive(RecordingEventTrackArchive&& from) noexcept
    : RecordingEventTrackArchive() {
    *this = ::std::move(from);
  }

  inline RecordingEventTrackArchive& operator=(const RecordingEventTrackArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingEventTrackArchive& operator=(RecordingEventTrackArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingEventTrackArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingEventTrackArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingEventTrackArchive*>(
               &_RecordingEventTrackArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RecordingEventTrackArchive& a, RecordingEventTrackArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingEventTrackArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingEventTrackArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingEventTrackArchive* New() const final {
    return new RecordingEventTrackArchive();
  }

  RecordingEventTrackArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingEventTrackArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingEventTrackArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingEventTrackArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingEventTrackArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingEventTrackArchive";
  }
  protected:
  explicit RecordingEventTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .KN.RecordingEventArchive events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::KN::RecordingEventArchive* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive >*
      mutable_events();
  private:
  const ::KN::RecordingEventArchive& _internal_events(int index) const;
  ::KN::RecordingEventArchive* _internal_add_events();
  public:
  const ::KN::RecordingEventArchive& events(int index) const;
  ::KN::RecordingEventArchive* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive >&
      events() const;

  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingEventTrackArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingEventArchive) */ {
 public:
  inline RecordingEventArchive() : RecordingEventArchive(nullptr) {}
  ~RecordingEventArchive() override;
  explicit constexpr RecordingEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingEventArchive(const RecordingEventArchive& from);
  RecordingEventArchive(RecordingEventArchive&& from) noexcept
    : RecordingEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingEventArchive& operator=(const RecordingEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingEventArchive& operator=(RecordingEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingEventArchive*>(
               &_RecordingEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(RecordingEventArchive& a, RecordingEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingEventArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingEventArchive* New() const final {
    return new RecordingEventArchive();
  }

  RecordingEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingEventArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingEventArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingEventArchive";
  }
  protected:
  explicit RecordingEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNavigationEventArchiveFieldNumber = 1000,
    kLaserEventArchiveFieldNumber = 1001,
    kPauseEventArchiveFieldNumber = 1002,
    kMovieEventArchiveFieldNumber = 1003,
    kStartTimeFieldNumber = 1,
  };
  // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
  bool has_navigation_event_archive() const;
  private:
  bool _internal_has_navigation_event_archive() const;
  public:
  void clear_navigation_event_archive();
  const ::KN::RecordingNavigationEventArchive& navigation_event_archive() const;
  PROTOBUF_MUST_USE_RESULT ::KN::RecordingNavigationEventArchive* release_navigation_event_archive();
  ::KN::RecordingNavigationEventArchive* mutable_navigation_event_archive();
  void set_allocated_navigation_event_archive(::KN::RecordingNavigationEventArchive* navigation_event_archive);
  private:
  const ::KN::RecordingNavigationEventArchive& _internal_navigation_event_archive() const;
  ::KN::RecordingNavigationEventArchive* _internal_mutable_navigation_event_archive();
  public:
  void unsafe_arena_set_allocated_navigation_event_archive(
      ::KN::RecordingNavigationEventArchive* navigation_event_archive);
  ::KN::RecordingNavigationEventArchive* unsafe_arena_release_navigation_event_archive();

  // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
  bool has_laser_event_archive() const;
  private:
  bool _internal_has_laser_event_archive() const;
  public:
  void clear_laser_event_archive();
  const ::KN::RecordingLaserEventArchive& laser_event_archive() const;
  PROTOBUF_MUST_USE_RESULT ::KN::RecordingLaserEventArchive* release_laser_event_archive();
  ::KN::RecordingLaserEventArchive* mutable_laser_event_archive();
  void set_allocated_laser_event_archive(::KN::RecordingLaserEventArchive* laser_event_archive);
  private:
  const ::KN::RecordingLaserEventArchive& _internal_laser_event_archive() const;
  ::KN::RecordingLaserEventArchive* _internal_mutable_laser_event_archive();
  public:
  void unsafe_arena_set_allocated_laser_event_archive(
      ::KN::RecordingLaserEventArchive* laser_event_archive);
  ::KN::RecordingLaserEventArchive* unsafe_arena_release_laser_event_archive();

  // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
  bool has_pause_event_archive() const;
  private:
  bool _internal_has_pause_event_archive() const;
  public:
  void clear_pause_event_archive();
  const ::KN::RecordingPauseEventArchive& pause_event_archive() const;
  PROTOBUF_MUST_USE_RESULT ::KN::RecordingPauseEventArchive* release_pause_event_archive();
  ::KN::RecordingPauseEventArchive* mutable_pause_event_archive();
  void set_allocated_pause_event_archive(::KN::RecordingPauseEventArchive* pause_event_archive);
  private:
  const ::KN::RecordingPauseEventArchive& _internal_pause_event_archive() const;
  ::KN::RecordingPauseEventArchive* _internal_mutable_pause_event_archive();
  public:
  void unsafe_arena_set_allocated_pause_event_archive(
      ::KN::RecordingPauseEventArchive* pause_event_archive);
  ::KN::RecordingPauseEventArchive* unsafe_arena_release_pause_event_archive();

  // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
  bool has_movie_event_archive() const;
  private:
  bool _internal_has_movie_event_archive() const;
  public:
  void clear_movie_event_archive();
  const ::KN::RecordingMovieEventArchive& movie_event_archive() const;
  PROTOBUF_MUST_USE_RESULT ::KN::RecordingMovieEventArchive* release_movie_event_archive();
  ::KN::RecordingMovieEventArchive* mutable_movie_event_archive();
  void set_allocated_movie_event_archive(::KN::RecordingMovieEventArchive* movie_event_archive);
  private:
  const ::KN::RecordingMovieEventArchive& _internal_movie_event_archive() const;
  ::KN::RecordingMovieEventArchive* _internal_mutable_movie_event_archive();
  public:
  void unsafe_arena_set_allocated_movie_event_archive(
      ::KN::RecordingMovieEventArchive* movie_event_archive);
  ::KN::RecordingMovieEventArchive* unsafe_arena_release_movie_event_archive();

  // optional double start_time = 1 [default = -1];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::KN::RecordingNavigationEventArchive* navigation_event_archive_;
  ::KN::RecordingLaserEventArchive* laser_event_archive_;
  ::KN::RecordingPauseEventArchive* pause_event_archive_;
  ::KN::RecordingMovieEventArchive* movie_event_archive_;
  double start_time_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingNavigationEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingNavigationEventArchive) */ {
 public:
  inline RecordingNavigationEventArchive() : RecordingNavigationEventArchive(nullptr) {}
  ~RecordingNavigationEventArchive() override;
  explicit constexpr RecordingNavigationEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingNavigationEventArchive(const RecordingNavigationEventArchive& from);
  RecordingNavigationEventArchive(RecordingNavigationEventArchive&& from) noexcept
    : RecordingNavigationEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingNavigationEventArchive& operator=(const RecordingNavigationEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingNavigationEventArchive& operator=(RecordingNavigationEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingNavigationEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingNavigationEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingNavigationEventArchive*>(
               &_RecordingNavigationEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(RecordingNavigationEventArchive& a, RecordingNavigationEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingNavigationEventArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingNavigationEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingNavigationEventArchive* New() const final {
    return new RecordingNavigationEventArchive();
  }

  RecordingNavigationEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingNavigationEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingNavigationEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingNavigationEventArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingNavigationEventArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingNavigationEventArchive";
  }
  protected:
  explicit RecordingNavigationEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventAnimationPhase;
  static constexpr RecordingNavigationEventAnimationPhase kRecordingNavigationEventAnimationNone =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationNone;
  static constexpr RecordingNavigationEventAnimationPhase kRecordingNavigationEventAnimationStart =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationStart;
  static constexpr RecordingNavigationEventAnimationPhase kRecordingNavigationEventAnimationEnd =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationEnd;
  static inline bool RecordingNavigationEventAnimationPhase_IsValid(int value) {
    return RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(value);
  }
  static constexpr RecordingNavigationEventAnimationPhase RecordingNavigationEventAnimationPhase_MIN =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MIN;
  static constexpr RecordingNavigationEventAnimationPhase RecordingNavigationEventAnimationPhase_MAX =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MAX;
  static constexpr int RecordingNavigationEventAnimationPhase_ARRAYSIZE =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordingNavigationEventAnimationPhase_descriptor() {
    return RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordingNavigationEventAnimationPhase_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordingNavigationEventAnimationPhase>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordingNavigationEventAnimationPhase_Name.");
    return RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Name(enum_t_value);
  }
  static inline bool RecordingNavigationEventAnimationPhase_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecordingNavigationEventAnimationPhase* value) {
    return RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetSlideNodeReferenceFieldNumber = 1,
    kTargetSlideNodeIdFieldNumber = 4,
    kTargetEventIndexFieldNumber = 2,
    kAnimationPhaseFieldNumber = 3,
  };
  // optional .TSP.Reference target_slide_node_reference = 1;
  bool has_target_slide_node_reference() const;
  private:
  bool _internal_has_target_slide_node_reference() const;
  public:
  void clear_target_slide_node_reference();
  const ::TSP::Reference& target_slide_node_reference() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_target_slide_node_reference();
  ::TSP::Reference* mutable_target_slide_node_reference();
  void set_allocated_target_slide_node_reference(::TSP::Reference* target_slide_node_reference);
  private:
  const ::TSP::Reference& _internal_target_slide_node_reference() const;
  ::TSP::Reference* _internal_mutable_target_slide_node_reference();
  public:
  void unsafe_arena_set_allocated_target_slide_node_reference(
      ::TSP::Reference* target_slide_node_reference);
  ::TSP::Reference* unsafe_arena_release_target_slide_node_reference();

  // optional .TSP.UUID target_slide_node_id = 4;
  bool has_target_slide_node_id() const;
  private:
  bool _internal_has_target_slide_node_id() const;
  public:
  void clear_target_slide_node_id();
  const ::TSP::UUID& target_slide_node_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_target_slide_node_id();
  ::TSP::UUID* mutable_target_slide_node_id();
  void set_allocated_target_slide_node_id(::TSP::UUID* target_slide_node_id);
  private:
  const ::TSP::UUID& _internal_target_slide_node_id() const;
  ::TSP::UUID* _internal_mutable_target_slide_node_id();
  public:
  void unsafe_arena_set_allocated_target_slide_node_id(
      ::TSP::UUID* target_slide_node_id);
  ::TSP::UUID* unsafe_arena_release_target_slide_node_id();

  // optional uint32 target_event_index = 2;
  bool has_target_event_index() const;
  private:
  bool _internal_has_target_event_index() const;
  public:
  void clear_target_event_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_event_index() const;
  void set_target_event_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_event_index() const;
  void _internal_set_target_event_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
  bool has_animation_phase() const;
  private:
  bool _internal_has_animation_phase() const;
  public:
  void clear_animation_phase();
  ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase animation_phase() const;
  void set_animation_phase(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase value);
  private:
  ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase _internal_animation_phase() const;
  void _internal_set_animation_phase(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingNavigationEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* target_slide_node_reference_;
  ::TSP::UUID* target_slide_node_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_event_index_;
  int animation_phase_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingLaserEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingLaserEventArchive) */ {
 public:
  inline RecordingLaserEventArchive() : RecordingLaserEventArchive(nullptr) {}
  ~RecordingLaserEventArchive() override;
  explicit constexpr RecordingLaserEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingLaserEventArchive(const RecordingLaserEventArchive& from);
  RecordingLaserEventArchive(RecordingLaserEventArchive&& from) noexcept
    : RecordingLaserEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingLaserEventArchive& operator=(const RecordingLaserEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingLaserEventArchive& operator=(RecordingLaserEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingLaserEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingLaserEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingLaserEventArchive*>(
               &_RecordingLaserEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(RecordingLaserEventArchive& a, RecordingLaserEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingLaserEventArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingLaserEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingLaserEventArchive* New() const final {
    return new RecordingLaserEventArchive();
  }

  RecordingLaserEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingLaserEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingLaserEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingLaserEventArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingLaserEventArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingLaserEventArchive";
  }
  protected:
  explicit RecordingLaserEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnscaledLocationFieldNumber = 1,
    kUnitLocationFieldNumber = 2,
  };
  // optional .TSP.Point unscaled_location = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_unscaled_location() const;
  private:
  bool _internal_has_unscaled_location() const;
  public:
  PROTOBUF_DEPRECATED void clear_unscaled_location();
  PROTOBUF_DEPRECATED const ::TSP::Point& unscaled_location() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Point* release_unscaled_location();
  PROTOBUF_DEPRECATED ::TSP::Point* mutable_unscaled_location();
  PROTOBUF_DEPRECATED void set_allocated_unscaled_location(::TSP::Point* unscaled_location);
  private:
  const ::TSP::Point& _internal_unscaled_location() const;
  ::TSP::Point* _internal_mutable_unscaled_location();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_unscaled_location(
      ::TSP::Point* unscaled_location);
  PROTOBUF_DEPRECATED ::TSP::Point* unsafe_arena_release_unscaled_location();

  // optional .TSP.Point unit_location = 2;
  bool has_unit_location() const;
  private:
  bool _internal_has_unit_location() const;
  public:
  void clear_unit_location();
  const ::TSP::Point& unit_location() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Point* release_unit_location();
  ::TSP::Point* mutable_unit_location();
  void set_allocated_unit_location(::TSP::Point* unit_location);
  private:
  const ::TSP::Point& _internal_unit_location() const;
  ::TSP::Point* _internal_mutable_unit_location();
  public:
  void unsafe_arena_set_allocated_unit_location(
      ::TSP::Point* unit_location);
  ::TSP::Point* unsafe_arena_release_unit_location();

  // @@protoc_insertion_point(class_scope:KN.RecordingLaserEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Point* unscaled_location_;
  ::TSP::Point* unit_location_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingPauseEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingPauseEventArchive) */ {
 public:
  inline RecordingPauseEventArchive() : RecordingPauseEventArchive(nullptr) {}
  ~RecordingPauseEventArchive() override;
  explicit constexpr RecordingPauseEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingPauseEventArchive(const RecordingPauseEventArchive& from);
  RecordingPauseEventArchive(RecordingPauseEventArchive&& from) noexcept
    : RecordingPauseEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingPauseEventArchive& operator=(const RecordingPauseEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingPauseEventArchive& operator=(RecordingPauseEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingPauseEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingPauseEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingPauseEventArchive*>(
               &_RecordingPauseEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(RecordingPauseEventArchive& a, RecordingPauseEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingPauseEventArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingPauseEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingPauseEventArchive* New() const final {
    return new RecordingPauseEventArchive();
  }

  RecordingPauseEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingPauseEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingPauseEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingPauseEventArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingPauseEventArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingPauseEventArchive";
  }
  protected:
  explicit RecordingPauseEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventType;
  static constexpr RecordingPauseEventType kRecordingPauseEventTypeResume =
    RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeResume;
  static constexpr RecordingPauseEventType kRecordingPauseEventTypePause =
    RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypePause;
  static constexpr RecordingPauseEventType kRecordingPauseEventTypeConcealWithBlack =
    RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithBlack;
  static constexpr RecordingPauseEventType kRecordingPauseEventTypeConcealWithWhite =
    RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithWhite;
  static inline bool RecordingPauseEventType_IsValid(int value) {
    return RecordingPauseEventArchive_RecordingPauseEventType_IsValid(value);
  }
  static constexpr RecordingPauseEventType RecordingPauseEventType_MIN =
    RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MIN;
  static constexpr RecordingPauseEventType RecordingPauseEventType_MAX =
    RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MAX;
  static constexpr int RecordingPauseEventType_ARRAYSIZE =
    RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordingPauseEventType_descriptor() {
    return RecordingPauseEventArchive_RecordingPauseEventType_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordingPauseEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordingPauseEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordingPauseEventType_Name.");
    return RecordingPauseEventArchive_RecordingPauseEventType_Name(enum_t_value);
  }
  static inline bool RecordingPauseEventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecordingPauseEventType* value) {
    return RecordingPauseEventArchive_RecordingPauseEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPauseEventTypeFieldNumber = 1,
  };
  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  bool has_pause_event_type() const;
  private:
  bool _internal_has_pause_event_type() const;
  public:
  void clear_pause_event_type();
  ::KN::RecordingPauseEventArchive_RecordingPauseEventType pause_event_type() const;
  void set_pause_event_type(::KN::RecordingPauseEventArchive_RecordingPauseEventType value);
  private:
  ::KN::RecordingPauseEventArchive_RecordingPauseEventType _internal_pause_event_type() const;
  void _internal_set_pause_event_type(::KN::RecordingPauseEventArchive_RecordingPauseEventType value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingPauseEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int pause_event_type_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingMovieEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingMovieEventArchive) */ {
 public:
  inline RecordingMovieEventArchive() : RecordingMovieEventArchive(nullptr) {}
  ~RecordingMovieEventArchive() override;
  explicit constexpr RecordingMovieEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingMovieEventArchive(const RecordingMovieEventArchive& from);
  RecordingMovieEventArchive(RecordingMovieEventArchive&& from) noexcept
    : RecordingMovieEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingMovieEventArchive& operator=(const RecordingMovieEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingMovieEventArchive& operator=(RecordingMovieEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingMovieEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingMovieEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingMovieEventArchive*>(
               &_RecordingMovieEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(RecordingMovieEventArchive& a, RecordingMovieEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingMovieEventArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingMovieEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingMovieEventArchive* New() const final {
    return new RecordingMovieEventArchive();
  }

  RecordingMovieEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingMovieEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingMovieEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingMovieEventArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingMovieEventArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingMovieEventArchive";
  }
  protected:
  explicit RecordingMovieEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventType;
  static constexpr RecordingMovieEventType kRecordingMovieEventNone =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventNone;
  static constexpr RecordingMovieEventType kRecordingMovieEventSeek =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventSeek;
  static constexpr RecordingMovieEventType kRecordingMovieEventSetRate =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventSetRate;
  static constexpr RecordingMovieEventType kRecordingMovieEventStartPlayback =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventStartPlayback;
  static constexpr RecordingMovieEventType kRecordingMovieEventStopPlayback =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventStopPlayback;
  static constexpr RecordingMovieEventType kRecordingMovieEventBeginScrubbing =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventBeginScrubbing;
  static constexpr RecordingMovieEventType kRecordingMovieEventEndScrubbing =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventEndScrubbing;
  static inline bool RecordingMovieEventType_IsValid(int value) {
    return RecordingMovieEventArchive_RecordingMovieEventType_IsValid(value);
  }
  static constexpr RecordingMovieEventType RecordingMovieEventType_MIN =
    RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MIN;
  static constexpr RecordingMovieEventType RecordingMovieEventType_MAX =
    RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MAX;
  static constexpr int RecordingMovieEventType_ARRAYSIZE =
    RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordingMovieEventType_descriptor() {
    return RecordingMovieEventArchive_RecordingMovieEventType_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordingMovieEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordingMovieEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordingMovieEventType_Name.");
    return RecordingMovieEventArchive_RecordingMovieEventType_Name(enum_t_value);
  }
  static inline bool RecordingMovieEventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecordingMovieEventType* value) {
    return RecordingMovieEventArchive_RecordingMovieEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMovieInfoReferenceFieldNumber = 1,
    kMovieInfoThatPlayedAcrossSlidesReferenceFieldNumber = 4,
    kMovieSlideNodeIdFieldNumber = 5,
    kMovieEventValueFieldNumber = 3,
    kMovieEventTypeFieldNumber = 2,
  };
  // optional .TSP.Reference movie_info_reference = 1;
  bool has_movie_info_reference() const;
  private:
  bool _internal_has_movie_info_reference() const;
  public:
  void clear_movie_info_reference();
  const ::TSP::Reference& movie_info_reference() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_movie_info_reference();
  ::TSP::Reference* mutable_movie_info_reference();
  void set_allocated_movie_info_reference(::TSP::Reference* movie_info_reference);
  private:
  const ::TSP::Reference& _internal_movie_info_reference() const;
  ::TSP::Reference* _internal_mutable_movie_info_reference();
  public:
  void unsafe_arena_set_allocated_movie_info_reference(
      ::TSP::Reference* movie_info_reference);
  ::TSP::Reference* unsafe_arena_release_movie_info_reference();

  // optional .TSP.Reference movie_info_that_played_across_slides_reference = 4;
  bool has_movie_info_that_played_across_slides_reference() const;
  private:
  bool _internal_has_movie_info_that_played_across_slides_reference() const;
  public:
  void clear_movie_info_that_played_across_slides_reference();
  const ::TSP::Reference& movie_info_that_played_across_slides_reference() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_movie_info_that_played_across_slides_reference();
  ::TSP::Reference* mutable_movie_info_that_played_across_slides_reference();
  void set_allocated_movie_info_that_played_across_slides_reference(::TSP::Reference* movie_info_that_played_across_slides_reference);
  private:
  const ::TSP::Reference& _internal_movie_info_that_played_across_slides_reference() const;
  ::TSP::Reference* _internal_mutable_movie_info_that_played_across_slides_reference();
  public:
  void unsafe_arena_set_allocated_movie_info_that_played_across_slides_reference(
      ::TSP::Reference* movie_info_that_played_across_slides_reference);
  ::TSP::Reference* unsafe_arena_release_movie_info_that_played_across_slides_reference();

  // optional .TSP.UUID movie_slide_node_id = 5;
  bool has_movie_slide_node_id() const;
  private:
  bool _internal_has_movie_slide_node_id() const;
  public:
  void clear_movie_slide_node_id();
  const ::TSP::UUID& movie_slide_node_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_movie_slide_node_id();
  ::TSP::UUID* mutable_movie_slide_node_id();
  void set_allocated_movie_slide_node_id(::TSP::UUID* movie_slide_node_id);
  private:
  const ::TSP::UUID& _internal_movie_slide_node_id() const;
  ::TSP::UUID* _internal_mutable_movie_slide_node_id();
  public:
  void unsafe_arena_set_allocated_movie_slide_node_id(
      ::TSP::UUID* movie_slide_node_id);
  ::TSP::UUID* unsafe_arena_release_movie_slide_node_id();

  // optional double movie_event_value = 3;
  bool has_movie_event_value() const;
  private:
  bool _internal_has_movie_event_value() const;
  public:
  void clear_movie_event_value();
  double movie_event_value() const;
  void set_movie_event_value(double value);
  private:
  double _internal_movie_event_value() const;
  void _internal_set_movie_event_value(double value);
  public:

  // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
  bool has_movie_event_type() const;
  private:
  bool _internal_has_movie_event_type() const;
  public:
  void clear_movie_event_type();
  ::KN::RecordingMovieEventArchive_RecordingMovieEventType movie_event_type() const;
  void set_movie_event_type(::KN::RecordingMovieEventArchive_RecordingMovieEventType value);
  private:
  ::KN::RecordingMovieEventArchive_RecordingMovieEventType _internal_movie_event_type() const;
  void _internal_set_movie_event_type(::KN::RecordingMovieEventArchive_RecordingMovieEventType value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingMovieEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* movie_info_reference_;
  ::TSP::Reference* movie_info_that_played_across_slides_reference_;
  ::TSP::UUID* movie_slide_node_id_;
  double movie_event_value_;
  int movie_event_type_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingMovieTrackArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingMovieTrackArchive) */ {
 public:
  inline RecordingMovieTrackArchive() : RecordingMovieTrackArchive(nullptr) {}
  ~RecordingMovieTrackArchive() override;
  explicit constexpr RecordingMovieTrackArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingMovieTrackArchive(const RecordingMovieTrackArchive& from);
  RecordingMovieTrackArchive(RecordingMovieTrackArchive&& from) noexcept
    : RecordingMovieTrackArchive() {
    *this = ::std::move(from);
  }

  inline RecordingMovieTrackArchive& operator=(const RecordingMovieTrackArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingMovieTrackArchive& operator=(RecordingMovieTrackArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingMovieTrackArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingMovieTrackArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingMovieTrackArchive*>(
               &_RecordingMovieTrackArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(RecordingMovieTrackArchive& a, RecordingMovieTrackArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingMovieTrackArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingMovieTrackArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingMovieTrackArchive* New() const final {
    return new RecordingMovieTrackArchive();
  }

  RecordingMovieTrackArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingMovieTrackArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingMovieTrackArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingMovieTrackArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingMovieTrackArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingMovieTrackArchive";
  }
  protected:
  explicit RecordingMovieTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovieSegmentsFieldNumber = 1,
    kIsMovieSegmentDataTrimmedToDurationFieldNumber = 2,
  };
  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  int movie_segments_size() const;
  private:
  int _internal_movie_segments_size() const;
  public:
  void clear_movie_segments();
  ::KN::MovieSegmentArchive* mutable_movie_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive >*
      mutable_movie_segments();
  private:
  const ::KN::MovieSegmentArchive& _internal_movie_segments(int index) const;
  ::KN::MovieSegmentArchive* _internal_add_movie_segments();
  public:
  const ::KN::MovieSegmentArchive& movie_segments(int index) const;
  ::KN::MovieSegmentArchive* add_movie_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive >&
      movie_segments() const;

  // optional bool is_movie_segment_data_trimmed_to_duration = 2;
  bool has_is_movie_segment_data_trimmed_to_duration() const;
  private:
  bool _internal_has_is_movie_segment_data_trimmed_to_duration() const;
  public:
  void clear_is_movie_segment_data_trimmed_to_duration();
  bool is_movie_segment_data_trimmed_to_duration() const;
  void set_is_movie_segment_data_trimmed_to_duration(bool value);
  private:
  bool _internal_is_movie_segment_data_trimmed_to_duration() const;
  void _internal_set_is_movie_segment_data_trimmed_to_duration(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingMovieTrackArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive > movie_segments_;
  bool is_movie_segment_data_trimmed_to_duration_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class MovieSegmentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.MovieSegmentArchive) */ {
 public:
  inline MovieSegmentArchive() : MovieSegmentArchive(nullptr) {}
  ~MovieSegmentArchive() override;
  explicit constexpr MovieSegmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovieSegmentArchive(const MovieSegmentArchive& from);
  MovieSegmentArchive(MovieSegmentArchive&& from) noexcept
    : MovieSegmentArchive() {
    *this = ::std::move(from);
  }

  inline MovieSegmentArchive& operator=(const MovieSegmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieSegmentArchive& operator=(MovieSegmentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovieSegmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovieSegmentArchive* internal_default_instance() {
    return reinterpret_cast<const MovieSegmentArchive*>(
               &_MovieSegmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(MovieSegmentArchive& a, MovieSegmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieSegmentArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieSegmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovieSegmentArchive* New() const final {
    return new MovieSegmentArchive();
  }

  MovieSegmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovieSegmentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MovieSegmentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MovieSegmentArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieSegmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.MovieSegmentArchive";
  }
  protected:
  explicit MovieSegmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseMovieDataFieldNumber = 1,
    kMovieDataFieldNumber = 3,
    kStartTimeFieldNumber = 2,
  };
  // optional .TSP.Reference database_movie_data = 1;
  bool has_database_movie_data() const;
  private:
  bool _internal_has_database_movie_data() const;
  public:
  void clear_database_movie_data();
  const ::TSP::Reference& database_movie_data() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_database_movie_data();
  ::TSP::Reference* mutable_database_movie_data();
  void set_allocated_database_movie_data(::TSP::Reference* database_movie_data);
  private:
  const ::TSP::Reference& _internal_database_movie_data() const;
  ::TSP::Reference* _internal_mutable_database_movie_data();
  public:
  void unsafe_arena_set_allocated_database_movie_data(
      ::TSP::Reference* database_movie_data);
  ::TSP::Reference* unsafe_arena_release_database_movie_data();

  // optional .TSP.DataReference movie_data = 3;
  bool has_movie_data() const;
  private:
  bool _internal_has_movie_data() const;
  public:
  void clear_movie_data();
  const ::TSP::DataReference& movie_data() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::DataReference* release_movie_data();
  ::TSP::DataReference* mutable_movie_data();
  void set_allocated_movie_data(::TSP::DataReference* movie_data);
  private:
  const ::TSP::DataReference& _internal_movie_data() const;
  ::TSP::DataReference* _internal_mutable_movie_data();
  public:
  void unsafe_arena_set_allocated_movie_data(
      ::TSP::DataReference* movie_data);
  ::TSP::DataReference* unsafe_arena_release_movie_data();

  // optional double start_time = 2 [default = -1];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:KN.MovieSegmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* database_movie_data_;
  ::TSP::DataReference* movie_data_;
  double start_time_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class Soundtrack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.Soundtrack) */ {
 public:
  inline Soundtrack() : Soundtrack(nullptr) {}
  ~Soundtrack() override;
  explicit constexpr Soundtrack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Soundtrack(const Soundtrack& from);
  Soundtrack(Soundtrack&& from) noexcept
    : Soundtrack() {
    *this = ::std::move(from);
  }

  inline Soundtrack& operator=(const Soundtrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Soundtrack& operator=(Soundtrack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Soundtrack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Soundtrack* internal_default_instance() {
    return reinterpret_cast<const Soundtrack*>(
               &_Soundtrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Soundtrack& a, Soundtrack& b) {
    a.Swap(&b);
  }
  inline void Swap(Soundtrack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Soundtrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Soundtrack* New() const final {
    return new Soundtrack();
  }

  Soundtrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Soundtrack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Soundtrack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Soundtrack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Soundtrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.Soundtrack";
  }
  protected:
  explicit Soundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Soundtrack_SoundtrackMode SoundtrackMode;
  static constexpr SoundtrackMode kKNSoundtrackModePlayOnce =
    Soundtrack_SoundtrackMode_kKNSoundtrackModePlayOnce;
  static constexpr SoundtrackMode kKNSoundtrackModeLoop =
    Soundtrack_SoundtrackMode_kKNSoundtrackModeLoop;
  static constexpr SoundtrackMode kKNSoundtrackModeDoNotPlay =
    Soundtrack_SoundtrackMode_kKNSoundtrackModeDoNotPlay;
  static inline bool SoundtrackMode_IsValid(int value) {
    return Soundtrack_SoundtrackMode_IsValid(value);
  }
  static constexpr SoundtrackMode SoundtrackMode_MIN =
    Soundtrack_SoundtrackMode_SoundtrackMode_MIN;
  static constexpr SoundtrackMode SoundtrackMode_MAX =
    Soundtrack_SoundtrackMode_SoundtrackMode_MAX;
  static constexpr int SoundtrackMode_ARRAYSIZE =
    Soundtrack_SoundtrackMode_SoundtrackMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SoundtrackMode_descriptor() {
    return Soundtrack_SoundtrackMode_descriptor();
  }
  template<typename T>
  static inline const std::string& SoundtrackMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SoundtrackMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SoundtrackMode_Name.");
    return Soundtrack_SoundtrackMode_Name(enum_t_value);
  }
  static inline bool SoundtrackMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SoundtrackMode* value) {
    return Soundtrack_SoundtrackMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMovieMediaFieldNumber = 3,
    kVolumeFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // repeated .TSP.DataReference movie_media = 3;
  int movie_media_size() const;
  private:
  int _internal_movie_media_size() const;
  public:
  void clear_movie_media();
  ::TSP::DataReference* mutable_movie_media(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
      mutable_movie_media();
  private:
  const ::TSP::DataReference& _internal_movie_media(int index) const;
  ::TSP::DataReference* _internal_add_movie_media();
  public:
  const ::TSP::DataReference& movie_media(int index) const;
  ::TSP::DataReference* add_movie_media();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
      movie_media() const;

  // optional double volume = 1;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  double volume() const;
  void set_volume(double value);
  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);
  public:

  // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::KN::Soundtrack_SoundtrackMode mode() const;
  void set_mode(::KN::Soundtrack_SoundtrackMode value);
  private:
  ::KN::Soundtrack_SoundtrackMode _internal_mode() const;
  void _internal_set_mode(::KN::Soundtrack_SoundtrackMode value);
  public:

  // @@protoc_insertion_point(class_scope:KN.Soundtrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference > movie_media_;
  double volume_;
  int mode_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideNumberAttachmentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideNumberAttachmentArchive) */ {
 public:
  inline SlideNumberAttachmentArchive() : SlideNumberAttachmentArchive(nullptr) {}
  ~SlideNumberAttachmentArchive() override;
  explicit constexpr SlideNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideNumberAttachmentArchive(const SlideNumberAttachmentArchive& from);
  SlideNumberAttachmentArchive(SlideNumberAttachmentArchive&& from) noexcept
    : SlideNumberAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline SlideNumberAttachmentArchive& operator=(const SlideNumberAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideNumberAttachmentArchive& operator=(SlideNumberAttachmentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideNumberAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideNumberAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const SlideNumberAttachmentArchive*>(
               &_SlideNumberAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SlideNumberAttachmentArchive& a, SlideNumberAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideNumberAttachmentArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideNumberAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideNumberAttachmentArchive* New() const final {
    return new SlideNumberAttachmentArchive();
  }

  SlideNumberAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideNumberAttachmentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideNumberAttachmentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideNumberAttachmentArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideNumberAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideNumberAttachmentArchive";
  }
  protected:
  explicit SlideNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSWP.TextualAttachmentArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::TextualAttachmentArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::TextualAttachmentArchive* release_super();
  ::TSWP::TextualAttachmentArchive* mutable_super();
  void set_allocated_super(::TSWP::TextualAttachmentArchive* super);
  private:
  const ::TSWP::TextualAttachmentArchive& _internal_super() const;
  ::TSWP::TextualAttachmentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::TextualAttachmentArchive* super);
  ::TSWP::TextualAttachmentArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.SlideNumberAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::TextualAttachmentArchive* super_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideCollectionSelectionArchive_OutlineSelection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideCollectionSelectionArchive.OutlineSelection) */ {
 public:
  inline SlideCollectionSelectionArchive_OutlineSelection() : SlideCollectionSelectionArchive_OutlineSelection(nullptr) {}
  ~SlideCollectionSelectionArchive_OutlineSelection() override;
  explicit constexpr SlideCollectionSelectionArchive_OutlineSelection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideCollectionSelectionArchive_OutlineSelection(const SlideCollectionSelectionArchive_OutlineSelection& from);
  SlideCollectionSelectionArchive_OutlineSelection(SlideCollectionSelectionArchive_OutlineSelection&& from) noexcept
    : SlideCollectionSelectionArchive_OutlineSelection() {
    *this = ::std::move(from);
  }

  inline SlideCollectionSelectionArchive_OutlineSelection& operator=(const SlideCollectionSelectionArchive_OutlineSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideCollectionSelectionArchive_OutlineSelection& operator=(SlideCollectionSelectionArchive_OutlineSelection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideCollectionSelectionArchive_OutlineSelection& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideCollectionSelectionArchive_OutlineSelection* internal_default_instance() {
    return reinterpret_cast<const SlideCollectionSelectionArchive_OutlineSelection*>(
               &_SlideCollectionSelectionArchive_OutlineSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SlideCollectionSelectionArchive_OutlineSelection& a, SlideCollectionSelectionArchive_OutlineSelection& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideCollectionSelectionArchive_OutlineSelection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideCollectionSelectionArchive_OutlineSelection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideCollectionSelectionArchive_OutlineSelection* New() const final {
    return new SlideCollectionSelectionArchive_OutlineSelection();
  }

  SlideCollectionSelectionArchive_OutlineSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideCollectionSelectionArchive_OutlineSelection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideCollectionSelectionArchive_OutlineSelection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideCollectionSelectionArchive_OutlineSelection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideCollectionSelectionArchive_OutlineSelection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideCollectionSelectionArchive.OutlineSelection";
  }
  protected:
  explicit SlideCollectionSelectionArchive_OutlineSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodeFieldNumber = 1,
    kSelectedParagraphIndexesFieldNumber = 2,
  };
  // required .TSP.Reference slide_node = 1;
  bool has_slide_node() const;
  private:
  bool _internal_has_slide_node() const;
  public:
  void clear_slide_node();
  const ::TSP::Reference& slide_node() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_slide_node();
  ::TSP::Reference* mutable_slide_node();
  void set_allocated_slide_node(::TSP::Reference* slide_node);
  private:
  const ::TSP::Reference& _internal_slide_node() const;
  ::TSP::Reference* _internal_mutable_slide_node();
  public:
  void unsafe_arena_set_allocated_slide_node(
      ::TSP::Reference* slide_node);
  ::TSP::Reference* unsafe_arena_release_slide_node();

  // required .TSP.IndexSet selected_paragraph_indexes = 2;
  bool has_selected_paragraph_indexes() const;
  private:
  bool _internal_has_selected_paragraph_indexes() const;
  public:
  void clear_selected_paragraph_indexes();
  const ::TSP::IndexSet& selected_paragraph_indexes() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::IndexSet* release_selected_paragraph_indexes();
  ::TSP::IndexSet* mutable_selected_paragraph_indexes();
  void set_allocated_selected_paragraph_indexes(::TSP::IndexSet* selected_paragraph_indexes);
  private:
  const ::TSP::IndexSet& _internal_selected_paragraph_indexes() const;
  ::TSP::IndexSet* _internal_mutable_selected_paragraph_indexes();
  public:
  void unsafe_arena_set_allocated_selected_paragraph_indexes(
      ::TSP::IndexSet* selected_paragraph_indexes);
  ::TSP::IndexSet* unsafe_arena_release_selected_paragraph_indexes();

  // @@protoc_insertion_point(class_scope:KN.SlideCollectionSelectionArchive.OutlineSelection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* slide_node_;
  ::TSP::IndexSet* selected_paragraph_indexes_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideCollectionSelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideCollectionSelectionArchive) */ {
 public:
  inline SlideCollectionSelectionArchive() : SlideCollectionSelectionArchive(nullptr) {}
  ~SlideCollectionSelectionArchive() override;
  explicit constexpr SlideCollectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideCollectionSelectionArchive(const SlideCollectionSelectionArchive& from);
  SlideCollectionSelectionArchive(SlideCollectionSelectionArchive&& from) noexcept
    : SlideCollectionSelectionArchive() {
    *this = ::std::move(from);
  }

  inline SlideCollectionSelectionArchive& operator=(const SlideCollectionSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideCollectionSelectionArchive& operator=(SlideCollectionSelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideCollectionSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideCollectionSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const SlideCollectionSelectionArchive*>(
               &_SlideCollectionSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SlideCollectionSelectionArchive& a, SlideCollectionSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideCollectionSelectionArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideCollectionSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideCollectionSelectionArchive* New() const final {
    return new SlideCollectionSelectionArchive();
  }

  SlideCollectionSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideCollectionSelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideCollectionSelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideCollectionSelectionArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideCollectionSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideCollectionSelectionArchive";
  }
  protected:
  explicit SlideCollectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SlideCollectionSelectionArchive_OutlineSelection OutlineSelection;

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodesFieldNumber = 1,
    kSelectedParagraphIndexesForSlideNodesFieldNumber = 3,
    kSlideNodeToEditFieldNumber = 2,
    kRangeInSelectedParagraphFieldNumber = 4,
  };
  // repeated .TSP.Reference slide_nodes = 1;
  int slide_nodes_size() const;
  private:
  int _internal_slide_nodes_size() const;
  public:
  void clear_slide_nodes();
  ::TSP::Reference* mutable_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slide_nodes();
  private:
  const ::TSP::Reference& _internal_slide_nodes(int index) const;
  ::TSP::Reference* _internal_add_slide_nodes();
  public:
  const ::TSP::Reference& slide_nodes(int index) const;
  ::TSP::Reference* add_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slide_nodes() const;

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  int selected_paragraph_indexes_for_slide_nodes_size() const;
  private:
  int _internal_selected_paragraph_indexes_for_slide_nodes_size() const;
  public:
  void clear_selected_paragraph_indexes_for_slide_nodes();
  ::KN::SlideCollectionSelectionArchive_OutlineSelection* mutable_selected_paragraph_indexes_for_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection >*
      mutable_selected_paragraph_indexes_for_slide_nodes();
  private:
  const ::KN::SlideCollectionSelectionArchive_OutlineSelection& _internal_selected_paragraph_indexes_for_slide_nodes(int index) const;
  ::KN::SlideCollectionSelectionArchive_OutlineSelection* _internal_add_selected_paragraph_indexes_for_slide_nodes();
  public:
  const ::KN::SlideCollectionSelectionArchive_OutlineSelection& selected_paragraph_indexes_for_slide_nodes(int index) const;
  ::KN::SlideCollectionSelectionArchive_OutlineSelection* add_selected_paragraph_indexes_for_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection >&
      selected_paragraph_indexes_for_slide_nodes() const;

  // optional .TSP.Reference slide_node_to_edit = 2;
  bool has_slide_node_to_edit() const;
  private:
  bool _internal_has_slide_node_to_edit() const;
  public:
  void clear_slide_node_to_edit();
  const ::TSP::Reference& slide_node_to_edit() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_slide_node_to_edit();
  ::TSP::Reference* mutable_slide_node_to_edit();
  void set_allocated_slide_node_to_edit(::TSP::Reference* slide_node_to_edit);
  private:
  const ::TSP::Reference& _internal_slide_node_to_edit() const;
  ::TSP::Reference* _internal_mutable_slide_node_to_edit();
  public:
  void unsafe_arena_set_allocated_slide_node_to_edit(
      ::TSP::Reference* slide_node_to_edit);
  ::TSP::Reference* unsafe_arena_release_slide_node_to_edit();

  // optional .TSP.Range range_in_selected_paragraph = 4;
  bool has_range_in_selected_paragraph() const;
  private:
  bool _internal_has_range_in_selected_paragraph() const;
  public:
  void clear_range_in_selected_paragraph();
  const ::TSP::Range& range_in_selected_paragraph() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Range* release_range_in_selected_paragraph();
  ::TSP::Range* mutable_range_in_selected_paragraph();
  void set_allocated_range_in_selected_paragraph(::TSP::Range* range_in_selected_paragraph);
  private:
  const ::TSP::Range& _internal_range_in_selected_paragraph() const;
  ::TSP::Range* _internal_mutable_range_in_selected_paragraph();
  public:
  void unsafe_arena_set_allocated_range_in_selected_paragraph(
      ::TSP::Range* range_in_selected_paragraph);
  ::TSP::Range* unsafe_arena_release_range_in_selected_paragraph();

  // @@protoc_insertion_point(class_scope:KN.SlideCollectionSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slide_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection > selected_paragraph_indexes_for_slide_nodes_;
  ::TSP::Reference* slide_node_to_edit_;
  ::TSP::Range* range_in_selected_paragraph_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class PresenterNotesSelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.PresenterNotesSelectionArchive) */ {
 public:
  inline PresenterNotesSelectionArchive() : PresenterNotesSelectionArchive(nullptr) {}
  ~PresenterNotesSelectionArchive() override;
  explicit constexpr PresenterNotesSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PresenterNotesSelectionArchive(const PresenterNotesSelectionArchive& from);
  PresenterNotesSelectionArchive(PresenterNotesSelectionArchive&& from) noexcept
    : PresenterNotesSelectionArchive() {
    *this = ::std::move(from);
  }

  inline PresenterNotesSelectionArchive& operator=(const PresenterNotesSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresenterNotesSelectionArchive& operator=(PresenterNotesSelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PresenterNotesSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PresenterNotesSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const PresenterNotesSelectionArchive*>(
               &_PresenterNotesSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PresenterNotesSelectionArchive& a, PresenterNotesSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PresenterNotesSelectionArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresenterNotesSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresenterNotesSelectionArchive* New() const final {
    return new PresenterNotesSelectionArchive();
  }

  PresenterNotesSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresenterNotesSelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PresenterNotesSelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PresenterNotesSelectionArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresenterNotesSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.PresenterNotesSelectionArchive";
  }
  protected:
  explicit PresenterNotesSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodeFieldNumber = 1,
  };
  // optional .TSP.Reference slide_node = 1;
  bool has_slide_node() const;
  private:
  bool _internal_has_slide_node() const;
  public:
  void clear_slide_node();
  const ::TSP::Reference& slide_node() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_slide_node();
  ::TSP::Reference* mutable_slide_node();
  void set_allocated_slide_node(::TSP::Reference* slide_node);
  private:
  const ::TSP::Reference& _internal_slide_node() const;
  ::TSP::Reference* _internal_mutable_slide_node();
  public:
  void unsafe_arena_set_allocated_slide_node(
      ::TSP::Reference* slide_node);
  ::TSP::Reference* unsafe_arena_release_slide_node();

  // @@protoc_insertion_point(class_scope:KN.PresenterNotesSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* slide_node_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class MixedIdOperationArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.MixedIdOperationArgs) */ {
 public:
  inline MixedIdOperationArgs() : MixedIdOperationArgs(nullptr) {}
  ~MixedIdOperationArgs() override;
  explicit constexpr MixedIdOperationArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MixedIdOperationArgs(const MixedIdOperationArgs& from);
  MixedIdOperationArgs(MixedIdOperationArgs&& from) noexcept
    : MixedIdOperationArgs() {
    *this = ::std::move(from);
  }

  inline MixedIdOperationArgs& operator=(const MixedIdOperationArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixedIdOperationArgs& operator=(MixedIdOperationArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MixedIdOperationArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const MixedIdOperationArgs* internal_default_instance() {
    return reinterpret_cast<const MixedIdOperationArgs*>(
               &_MixedIdOperationArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(MixedIdOperationArgs& a, MixedIdOperationArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(MixedIdOperationArgs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MixedIdOperationArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MixedIdOperationArgs* New() const final {
    return new MixedIdOperationArgs();
  }

  MixedIdOperationArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MixedIdOperationArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MixedIdOperationArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MixedIdOperationArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixedIdOperationArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.MixedIdOperationArgs";
  }
  protected:
  explicit MixedIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MixedIdOperationArgs_ArgsListKind ArgsListKind;
  static constexpr ArgsListKind Add =
    MixedIdOperationArgs_ArgsListKind_Add;
  static constexpr ArgsListKind Remove =
    MixedIdOperationArgs_ArgsListKind_Remove;
  static constexpr ArgsListKind ShowPlaceholder =
    MixedIdOperationArgs_ArgsListKind_ShowPlaceholder;
  static constexpr ArgsListKind HidePlaceholder =
    MixedIdOperationArgs_ArgsListKind_HidePlaceholder;
  static inline bool ArgsListKind_IsValid(int value) {
    return MixedIdOperationArgs_ArgsListKind_IsValid(value);
  }
  static constexpr ArgsListKind ArgsListKind_MIN =
    MixedIdOperationArgs_ArgsListKind_ArgsListKind_MIN;
  static constexpr ArgsListKind ArgsListKind_MAX =
    MixedIdOperationArgs_ArgsListKind_ArgsListKind_MAX;
  static constexpr int ArgsListKind_ARRAYSIZE =
    MixedIdOperationArgs_ArgsListKind_ArgsListKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ArgsListKind_descriptor() {
    return MixedIdOperationArgs_ArgsListKind_descriptor();
  }
  template<typename T>
  static inline const std::string& ArgsListKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ArgsListKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ArgsListKind_Name.");
    return MixedIdOperationArgs_ArgsListKind_Name(enum_t_value);
  }
  static inline bool ArgsListKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ArgsListKind* value) {
    return MixedIdOperationArgs_ArgsListKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListTypesFieldNumber = 1,
    kAddArgsListFieldNumber = 2,
    kShowPlaceholderArgsListFieldNumber = 3,
    kRemoveArgsListFieldNumber = 4,
    kHidePlaceholderArgsListFieldNumber = 5,
  };
  // repeated .KN.MixedIdOperationArgs.ArgsListKind args_list_types = 1;
  int args_list_types_size() const;
  private:
  int _internal_args_list_types_size() const;
  public:
  void clear_args_list_types();
  private:
  ::KN::MixedIdOperationArgs_ArgsListKind _internal_args_list_types(int index) const;
  void _internal_add_args_list_types(::KN::MixedIdOperationArgs_ArgsListKind value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_args_list_types();
  public:
  ::KN::MixedIdOperationArgs_ArgsListKind args_list_types(int index) const;
  void set_args_list_types(int index, ::KN::MixedIdOperationArgs_ArgsListKind value);
  void add_args_list_types(::KN::MixedIdOperationArgs_ArgsListKind value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& args_list_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_args_list_types();

  // repeated .TSK.AddIdOperationArgs add_args_list = 2;
  int add_args_list_size() const;
  private:
  int _internal_add_args_list_size() const;
  public:
  void clear_add_args_list();
  ::TSK::AddIdOperationArgs* mutable_add_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
      mutable_add_args_list();
  private:
  const ::TSK::AddIdOperationArgs& _internal_add_args_list(int index) const;
  ::TSK::AddIdOperationArgs* _internal_add_add_args_list();
  public:
  const ::TSK::AddIdOperationArgs& add_args_list(int index) const;
  ::TSK::AddIdOperationArgs* add_add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
      add_args_list() const;

  // repeated .TSK.IdPlacementOperationArgs show_placeholder_args_list = 3;
  int show_placeholder_args_list_size() const;
  private:
  int _internal_show_placeholder_args_list_size() const;
  public:
  void clear_show_placeholder_args_list();
  ::TSK::IdPlacementOperationArgs* mutable_show_placeholder_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
      mutable_show_placeholder_args_list();
  private:
  const ::TSK::IdPlacementOperationArgs& _internal_show_placeholder_args_list(int index) const;
  ::TSK::IdPlacementOperationArgs* _internal_add_show_placeholder_args_list();
  public:
  const ::TSK::IdPlacementOperationArgs& show_placeholder_args_list(int index) const;
  ::TSK::IdPlacementOperationArgs* add_show_placeholder_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
      show_placeholder_args_list() const;

  // repeated .TSK.RemoveIdOperationArgs remove_args_list = 4;
  int remove_args_list_size() const;
  private:
  int _internal_remove_args_list_size() const;
  public:
  void clear_remove_args_list();
  ::TSK::RemoveIdOperationArgs* mutable_remove_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
      mutable_remove_args_list();
  private:
  const ::TSK::RemoveIdOperationArgs& _internal_remove_args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* _internal_add_remove_args_list();
  public:
  const ::TSK::RemoveIdOperationArgs& remove_args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* add_remove_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
      remove_args_list() const;

  // repeated .TSK.IdPlacementOperationArgs hide_placeholder_args_list = 5;
  int hide_placeholder_args_list_size() const;
  private:
  int _internal_hide_placeholder_args_list_size() const;
  public:
  void clear_hide_placeholder_args_list();
  ::TSK::IdPlacementOperationArgs* mutable_hide_placeholder_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
      mutable_hide_placeholder_args_list();
  private:
  const ::TSK::IdPlacementOperationArgs& _internal_hide_placeholder_args_list(int index) const;
  ::TSK::IdPlacementOperationArgs* _internal_add_hide_placeholder_args_list();
  public:
  const ::TSK::IdPlacementOperationArgs& hide_placeholder_args_list(int index) const;
  ::TSK::IdPlacementOperationArgs* add_hide_placeholder_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
      hide_placeholder_args_list() const;

  // @@protoc_insertion_point(class_scope:KN.MixedIdOperationArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> args_list_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs > add_args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs > show_placeholder_args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs > remove_args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs > hide_placeholder_args_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KNArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnimationAttributesArchive

// optional string animation_type = 1;
inline bool AnimationAttributesArchive::_internal_has_animation_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_animation_type() const {
  return _internal_has_animation_type();
}
inline void AnimationAttributesArchive::clear_animation_type() {
  animation_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AnimationAttributesArchive::animation_type() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.animation_type)
  return _internal_animation_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnimationAttributesArchive::set_animation_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 animation_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.animation_type)
}
inline std::string* AnimationAttributesArchive::mutable_animation_type() {
  std::string* _s = _internal_mutable_animation_type();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.animation_type)
  return _s;
}
inline const std::string& AnimationAttributesArchive::_internal_animation_type() const {
  return animation_type_.Get();
}
inline void AnimationAttributesArchive::_internal_set_animation_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  animation_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::_internal_mutable_animation_type() {
  _has_bits_[0] |= 0x00000001u;
  return animation_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::release_animation_type() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.animation_type)
  if (!_internal_has_animation_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return animation_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnimationAttributesArchive::set_allocated_animation_type(std::string* animation_type) {
  if (animation_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  animation_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), animation_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.animation_type)
}

// optional string effect = 2;
inline bool AnimationAttributesArchive::_internal_has_effect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_effect() const {
  return _internal_has_effect();
}
inline void AnimationAttributesArchive::clear_effect() {
  effect_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AnimationAttributesArchive::effect() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.effect)
  return _internal_effect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnimationAttributesArchive::set_effect(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.effect)
}
inline std::string* AnimationAttributesArchive::mutable_effect() {
  std::string* _s = _internal_mutable_effect();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.effect)
  return _s;
}
inline const std::string& AnimationAttributesArchive::_internal_effect() const {
  return effect_.Get();
}
inline void AnimationAttributesArchive::_internal_set_effect(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::_internal_mutable_effect() {
  _has_bits_[0] |= 0x00000002u;
  return effect_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::release_effect() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.effect)
  if (!_internal_has_effect()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return effect_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnimationAttributesArchive::set_allocated_effect(std::string* effect) {
  if (effect != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  effect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effect,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.effect)
}

// optional double duration = 3;
inline bool AnimationAttributesArchive::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_duration() const {
  return _internal_has_duration();
}
inline void AnimationAttributesArchive::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double AnimationAttributesArchive::_internal_duration() const {
  return duration_;
}
inline double AnimationAttributesArchive::duration() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.duration)
  return _internal_duration();
}
inline void AnimationAttributesArchive::_internal_set_duration(double value) {
  _has_bits_[0] |= 0x00000200u;
  duration_ = value;
}
inline void AnimationAttributesArchive::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.duration)
}

// optional uint32 direction = 4;
inline bool AnimationAttributesArchive::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_direction() const {
  return _internal_has_direction();
}
inline void AnimationAttributesArchive::clear_direction() {
  direction_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnimationAttributesArchive::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnimationAttributesArchive::direction() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.direction)
  return _internal_direction();
}
inline void AnimationAttributesArchive::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  direction_ = value;
}
inline void AnimationAttributesArchive::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.direction)
}

// optional double delay = 5;
inline bool AnimationAttributesArchive::_internal_has_delay() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_delay() const {
  return _internal_has_delay();
}
inline void AnimationAttributesArchive::clear_delay() {
  delay_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double AnimationAttributesArchive::_internal_delay() const {
  return delay_;
}
inline double AnimationAttributesArchive::delay() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.delay)
  return _internal_delay();
}
inline void AnimationAttributesArchive::_internal_set_delay(double value) {
  _has_bits_[0] |= 0x00000400u;
  delay_ = value;
}
inline void AnimationAttributesArchive::set_delay(double value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.delay)
}

// optional bool is_automatic = 6;
inline bool AnimationAttributesArchive::_internal_has_is_automatic() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_is_automatic() const {
  return _internal_has_is_automatic();
}
inline void AnimationAttributesArchive::clear_is_automatic() {
  is_automatic_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool AnimationAttributesArchive::_internal_is_automatic() const {
  return is_automatic_;
}
inline bool AnimationAttributesArchive::is_automatic() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.is_automatic)
  return _internal_is_automatic();
}
inline void AnimationAttributesArchive::_internal_set_is_automatic(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_automatic_ = value;
}
inline void AnimationAttributesArchive::set_is_automatic(bool value) {
  _internal_set_is_automatic(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.is_automatic)
}

// optional .TSP.Color color = 7;
inline bool AnimationAttributesArchive::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool AnimationAttributesArchive::has_color() const {
  return _internal_has_color();
}
inline const ::TSP::Color& AnimationAttributesArchive::_internal_color() const {
  const ::TSP::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& AnimationAttributesArchive::color() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.color)
  return _internal_color();
}
inline void AnimationAttributesArchive::unsafe_arena_set_allocated_color(
    ::TSP::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.AnimationAttributesArchive.color)
}
inline ::TSP::Color* AnimationAttributesArchive::release_color() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Color* temp = color_;
  color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* AnimationAttributesArchive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.color)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::TSP::Color* AnimationAttributesArchive::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000020u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    color_ = p;
  }
  return color_;
}
inline ::TSP::Color* AnimationAttributesArchive::mutable_color() {
  ::TSP::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.color)
  return _msg;
}
inline void AnimationAttributesArchive::set_allocated_color(::TSP::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.color)
}

// optional .TSD.PathSourceArchive custom_effect_timing_curve_1 = 8;
inline bool AnimationAttributesArchive::_internal_has_custom_effect_timing_curve_1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || custom_effect_timing_curve_1_ != nullptr);
  return value;
}
inline bool AnimationAttributesArchive::has_custom_effect_timing_curve_1() const {
  return _internal_has_custom_effect_timing_curve_1();
}
inline const ::TSD::PathSourceArchive& AnimationAttributesArchive::_internal_custom_effect_timing_curve_1() const {
  const ::TSD::PathSourceArchive* p = custom_effect_timing_curve_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& AnimationAttributesArchive::custom_effect_timing_curve_1() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.custom_effect_timing_curve_1)
  return _internal_custom_effect_timing_curve_1();
}
inline void AnimationAttributesArchive::unsafe_arena_set_allocated_custom_effect_timing_curve_1(
    ::TSD::PathSourceArchive* custom_effect_timing_curve_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_effect_timing_curve_1_);
  }
  custom_effect_timing_curve_1_ = custom_effect_timing_curve_1;
  if (custom_effect_timing_curve_1) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.AnimationAttributesArchive.custom_effect_timing_curve_1)
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::release_custom_effect_timing_curve_1() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::PathSourceArchive* temp = custom_effect_timing_curve_1_;
  custom_effect_timing_curve_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::unsafe_arena_release_custom_effect_timing_curve_1() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.custom_effect_timing_curve_1)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::PathSourceArchive* temp = custom_effect_timing_curve_1_;
  custom_effect_timing_curve_1_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::_internal_mutable_custom_effect_timing_curve_1() {
  _has_bits_[0] |= 0x00000040u;
  if (custom_effect_timing_curve_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    custom_effect_timing_curve_1_ = p;
  }
  return custom_effect_timing_curve_1_;
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::mutable_custom_effect_timing_curve_1() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_custom_effect_timing_curve_1();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.custom_effect_timing_curve_1)
  return _msg;
}
inline void AnimationAttributesArchive::set_allocated_custom_effect_timing_curve_1(::TSD::PathSourceArchive* custom_effect_timing_curve_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_effect_timing_curve_1_);
  }
  if (custom_effect_timing_curve_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_effect_timing_curve_1));
    if (message_arena != submessage_arena) {
      custom_effect_timing_curve_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_effect_timing_curve_1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  custom_effect_timing_curve_1_ = custom_effect_timing_curve_1;
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.custom_effect_timing_curve_1)
}

// optional .TSD.PathSourceArchive custom_effect_timing_curve_2 = 9;
inline bool AnimationAttributesArchive::_internal_has_custom_effect_timing_curve_2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || custom_effect_timing_curve_2_ != nullptr);
  return value;
}
inline bool AnimationAttributesArchive::has_custom_effect_timing_curve_2() const {
  return _internal_has_custom_effect_timing_curve_2();
}
inline const ::TSD::PathSourceArchive& AnimationAttributesArchive::_internal_custom_effect_timing_curve_2() const {
  const ::TSD::PathSourceArchive* p = custom_effect_timing_curve_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& AnimationAttributesArchive::custom_effect_timing_curve_2() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.custom_effect_timing_curve_2)
  return _internal_custom_effect_timing_curve_2();
}
inline void AnimationAttributesArchive::unsafe_arena_set_allocated_custom_effect_timing_curve_2(
    ::TSD::PathSourceArchive* custom_effect_timing_curve_2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_effect_timing_curve_2_);
  }
  custom_effect_timing_curve_2_ = custom_effect_timing_curve_2;
  if (custom_effect_timing_curve_2) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.AnimationAttributesArchive.custom_effect_timing_curve_2)
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::release_custom_effect_timing_curve_2() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::PathSourceArchive* temp = custom_effect_timing_curve_2_;
  custom_effect_timing_curve_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::unsafe_arena_release_custom_effect_timing_curve_2() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.custom_effect_timing_curve_2)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::PathSourceArchive* temp = custom_effect_timing_curve_2_;
  custom_effect_timing_curve_2_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::_internal_mutable_custom_effect_timing_curve_2() {
  _has_bits_[0] |= 0x00000080u;
  if (custom_effect_timing_curve_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    custom_effect_timing_curve_2_ = p;
  }
  return custom_effect_timing_curve_2_;
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::mutable_custom_effect_timing_curve_2() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_custom_effect_timing_curve_2();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.custom_effect_timing_curve_2)
  return _msg;
}
inline void AnimationAttributesArchive::set_allocated_custom_effect_timing_curve_2(::TSD::PathSourceArchive* custom_effect_timing_curve_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_effect_timing_curve_2_);
  }
  if (custom_effect_timing_curve_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_effect_timing_curve_2));
    if (message_arena != submessage_arena) {
      custom_effect_timing_curve_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_effect_timing_curve_2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  custom_effect_timing_curve_2_ = custom_effect_timing_curve_2;
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.custom_effect_timing_curve_2)
}

// optional .TSD.PathSourceArchive custom_effect_timing_curve_3 = 10;
inline bool AnimationAttributesArchive::_internal_has_custom_effect_timing_curve_3() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || custom_effect_timing_curve_3_ != nullptr);
  return value;
}
inline bool AnimationAttributesArchive::has_custom_effect_timing_curve_3() const {
  return _internal_has_custom_effect_timing_curve_3();
}
inline const ::TSD::PathSourceArchive& AnimationAttributesArchive::_internal_custom_effect_timing_curve_3() const {
  const ::TSD::PathSourceArchive* p = custom_effect_timing_curve_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& AnimationAttributesArchive::custom_effect_timing_curve_3() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.custom_effect_timing_curve_3)
  return _internal_custom_effect_timing_curve_3();
}
inline void AnimationAttributesArchive::unsafe_arena_set_allocated_custom_effect_timing_curve_3(
    ::TSD::PathSourceArchive* custom_effect_timing_curve_3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_effect_timing_curve_3_);
  }
  custom_effect_timing_curve_3_ = custom_effect_timing_curve_3;
  if (custom_effect_timing_curve_3) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.AnimationAttributesArchive.custom_effect_timing_curve_3)
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::release_custom_effect_timing_curve_3() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::PathSourceArchive* temp = custom_effect_timing_curve_3_;
  custom_effect_timing_curve_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::unsafe_arena_release_custom_effect_timing_curve_3() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.custom_effect_timing_curve_3)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::PathSourceArchive* temp = custom_effect_timing_curve_3_;
  custom_effect_timing_curve_3_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::_internal_mutable_custom_effect_timing_curve_3() {
  _has_bits_[0] |= 0x00000100u;
  if (custom_effect_timing_curve_3_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    custom_effect_timing_curve_3_ = p;
  }
  return custom_effect_timing_curve_3_;
}
inline ::TSD::PathSourceArchive* AnimationAttributesArchive::mutable_custom_effect_timing_curve_3() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_custom_effect_timing_curve_3();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.custom_effect_timing_curve_3)
  return _msg;
}
inline void AnimationAttributesArchive::set_allocated_custom_effect_timing_curve_3(::TSD::PathSourceArchive* custom_effect_timing_curve_3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_effect_timing_curve_3_);
  }
  if (custom_effect_timing_curve_3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_effect_timing_curve_3));
    if (message_arena != submessage_arena) {
      custom_effect_timing_curve_3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_effect_timing_curve_3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  custom_effect_timing_curve_3_ = custom_effect_timing_curve_3;
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.custom_effect_timing_curve_3)
}

// optional uint32 random_number_seed = 11;
inline bool AnimationAttributesArchive::_internal_has_random_number_seed() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_random_number_seed() const {
  return _internal_has_random_number_seed();
}
inline void AnimationAttributesArchive::clear_random_number_seed() {
  random_number_seed_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnimationAttributesArchive::_internal_random_number_seed() const {
  return random_number_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnimationAttributesArchive::random_number_seed() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.random_number_seed)
  return _internal_random_number_seed();
}
inline void AnimationAttributesArchive::_internal_set_random_number_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  random_number_seed_ = value;
}
inline void AnimationAttributesArchive::set_random_number_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_random_number_seed(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.random_number_seed)
}

// optional double custom_detail = 12;
inline bool AnimationAttributesArchive::_internal_has_custom_detail() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_custom_detail() const {
  return _internal_has_custom_detail();
}
inline void AnimationAttributesArchive::clear_custom_detail() {
  custom_detail_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double AnimationAttributesArchive::_internal_custom_detail() const {
  return custom_detail_;
}
inline double AnimationAttributesArchive::custom_detail() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.custom_detail)
  return _internal_custom_detail();
}
inline void AnimationAttributesArchive::_internal_set_custom_detail(double value) {
  _has_bits_[0] |= 0x00002000u;
  custom_detail_ = value;
}
inline void AnimationAttributesArchive::set_custom_detail(double value) {
  _internal_set_custom_detail(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.custom_detail)
}

// optional string custom_effect_timing_curve_theme_name_1 = 13;
inline bool AnimationAttributesArchive::_internal_has_custom_effect_timing_curve_theme_name_1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_custom_effect_timing_curve_theme_name_1() const {
  return _internal_has_custom_effect_timing_curve_theme_name_1();
}
inline void AnimationAttributesArchive::clear_custom_effect_timing_curve_theme_name_1() {
  custom_effect_timing_curve_theme_name_1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AnimationAttributesArchive::custom_effect_timing_curve_theme_name_1() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_1)
  return _internal_custom_effect_timing_curve_theme_name_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnimationAttributesArchive::set_custom_effect_timing_curve_theme_name_1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 custom_effect_timing_curve_theme_name_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_1)
}
inline std::string* AnimationAttributesArchive::mutable_custom_effect_timing_curve_theme_name_1() {
  std::string* _s = _internal_mutable_custom_effect_timing_curve_theme_name_1();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_1)
  return _s;
}
inline const std::string& AnimationAttributesArchive::_internal_custom_effect_timing_curve_theme_name_1() const {
  return custom_effect_timing_curve_theme_name_1_.Get();
}
inline void AnimationAttributesArchive::_internal_set_custom_effect_timing_curve_theme_name_1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_effect_timing_curve_theme_name_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::_internal_mutable_custom_effect_timing_curve_theme_name_1() {
  _has_bits_[0] |= 0x00000004u;
  return custom_effect_timing_curve_theme_name_1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::release_custom_effect_timing_curve_theme_name_1() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_1)
  if (!_internal_has_custom_effect_timing_curve_theme_name_1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return custom_effect_timing_curve_theme_name_1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnimationAttributesArchive::set_allocated_custom_effect_timing_curve_theme_name_1(std::string* custom_effect_timing_curve_theme_name_1) {
  if (custom_effect_timing_curve_theme_name_1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  custom_effect_timing_curve_theme_name_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_effect_timing_curve_theme_name_1,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_1)
}

// optional string custom_effect_timing_curve_theme_name_2 = 14;
inline bool AnimationAttributesArchive::_internal_has_custom_effect_timing_curve_theme_name_2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_custom_effect_timing_curve_theme_name_2() const {
  return _internal_has_custom_effect_timing_curve_theme_name_2();
}
inline void AnimationAttributesArchive::clear_custom_effect_timing_curve_theme_name_2() {
  custom_effect_timing_curve_theme_name_2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AnimationAttributesArchive::custom_effect_timing_curve_theme_name_2() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_2)
  return _internal_custom_effect_timing_curve_theme_name_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnimationAttributesArchive::set_custom_effect_timing_curve_theme_name_2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 custom_effect_timing_curve_theme_name_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_2)
}
inline std::string* AnimationAttributesArchive::mutable_custom_effect_timing_curve_theme_name_2() {
  std::string* _s = _internal_mutable_custom_effect_timing_curve_theme_name_2();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_2)
  return _s;
}
inline const std::string& AnimationAttributesArchive::_internal_custom_effect_timing_curve_theme_name_2() const {
  return custom_effect_timing_curve_theme_name_2_.Get();
}
inline void AnimationAttributesArchive::_internal_set_custom_effect_timing_curve_theme_name_2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  custom_effect_timing_curve_theme_name_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::_internal_mutable_custom_effect_timing_curve_theme_name_2() {
  _has_bits_[0] |= 0x00000008u;
  return custom_effect_timing_curve_theme_name_2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::release_custom_effect_timing_curve_theme_name_2() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_2)
  if (!_internal_has_custom_effect_timing_curve_theme_name_2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return custom_effect_timing_curve_theme_name_2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnimationAttributesArchive::set_allocated_custom_effect_timing_curve_theme_name_2(std::string* custom_effect_timing_curve_theme_name_2) {
  if (custom_effect_timing_curve_theme_name_2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  custom_effect_timing_curve_theme_name_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_effect_timing_curve_theme_name_2,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_2)
}

// optional string custom_effect_timing_curve_theme_name_3 = 15;
inline bool AnimationAttributesArchive::_internal_has_custom_effect_timing_curve_theme_name_3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_custom_effect_timing_curve_theme_name_3() const {
  return _internal_has_custom_effect_timing_curve_theme_name_3();
}
inline void AnimationAttributesArchive::clear_custom_effect_timing_curve_theme_name_3() {
  custom_effect_timing_curve_theme_name_3_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AnimationAttributesArchive::custom_effect_timing_curve_theme_name_3() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_3)
  return _internal_custom_effect_timing_curve_theme_name_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnimationAttributesArchive::set_custom_effect_timing_curve_theme_name_3(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 custom_effect_timing_curve_theme_name_3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_3)
}
inline std::string* AnimationAttributesArchive::mutable_custom_effect_timing_curve_theme_name_3() {
  std::string* _s = _internal_mutable_custom_effect_timing_curve_theme_name_3();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_3)
  return _s;
}
inline const std::string& AnimationAttributesArchive::_internal_custom_effect_timing_curve_theme_name_3() const {
  return custom_effect_timing_curve_theme_name_3_.Get();
}
inline void AnimationAttributesArchive::_internal_set_custom_effect_timing_curve_theme_name_3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  custom_effect_timing_curve_theme_name_3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::_internal_mutable_custom_effect_timing_curve_theme_name_3() {
  _has_bits_[0] |= 0x00000010u;
  return custom_effect_timing_curve_theme_name_3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::release_custom_effect_timing_curve_theme_name_3() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_3)
  if (!_internal_has_custom_effect_timing_curve_theme_name_3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return custom_effect_timing_curve_theme_name_3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnimationAttributesArchive::set_allocated_custom_effect_timing_curve_theme_name_3(std::string* custom_effect_timing_curve_theme_name_3) {
  if (custom_effect_timing_curve_theme_name_3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  custom_effect_timing_curve_theme_name_3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_effect_timing_curve_theme_name_3,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_3)
}

// optional bool writing_direction_is_rtl = 16;
inline bool AnimationAttributesArchive::_internal_has_writing_direction_is_rtl() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_writing_direction_is_rtl() const {
  return _internal_has_writing_direction_is_rtl();
}
inline void AnimationAttributesArchive::clear_writing_direction_is_rtl() {
  writing_direction_is_rtl_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool AnimationAttributesArchive::_internal_writing_direction_is_rtl() const {
  return writing_direction_is_rtl_;
}
inline bool AnimationAttributesArchive::writing_direction_is_rtl() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.writing_direction_is_rtl)
  return _internal_writing_direction_is_rtl();
}
inline void AnimationAttributesArchive::_internal_set_writing_direction_is_rtl(bool value) {
  _has_bits_[0] |= 0x00008000u;
  writing_direction_is_rtl_ = value;
}
inline void AnimationAttributesArchive::set_writing_direction_is_rtl(bool value) {
  _internal_set_writing_direction_is_rtl(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.writing_direction_is_rtl)
}

// -------------------------------------------------------------------

// TransitionAttributesArchive

// optional .KN.AnimationAttributesArchive animationAttributes = 8;
inline bool TransitionAttributesArchive::_internal_has_animationattributes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || animationattributes_ != nullptr);
  return value;
}
inline bool TransitionAttributesArchive::has_animationattributes() const {
  return _internal_has_animationattributes();
}
inline void TransitionAttributesArchive::clear_animationattributes() {
  if (animationattributes_ != nullptr) animationattributes_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::AnimationAttributesArchive& TransitionAttributesArchive::_internal_animationattributes() const {
  const ::KN::AnimationAttributesArchive* p = animationattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::AnimationAttributesArchive&>(
      ::KN::_AnimationAttributesArchive_default_instance_);
}
inline const ::KN::AnimationAttributesArchive& TransitionAttributesArchive::animationattributes() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.animationAttributes)
  return _internal_animationattributes();
}
inline void TransitionAttributesArchive::unsafe_arena_set_allocated_animationattributes(
    ::KN::AnimationAttributesArchive* animationattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animationattributes_);
  }
  animationattributes_ = animationattributes;
  if (animationattributes) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.TransitionAttributesArchive.animationAttributes)
}
inline ::KN::AnimationAttributesArchive* TransitionAttributesArchive::release_animationattributes() {
  _has_bits_[0] &= ~0x00000008u;
  ::KN::AnimationAttributesArchive* temp = animationattributes_;
  animationattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::AnimationAttributesArchive* TransitionAttributesArchive::unsafe_arena_release_animationattributes() {
  // @@protoc_insertion_point(field_release:KN.TransitionAttributesArchive.animationAttributes)
  _has_bits_[0] &= ~0x00000008u;
  ::KN::AnimationAttributesArchive* temp = animationattributes_;
  animationattributes_ = nullptr;
  return temp;
}
inline ::KN::AnimationAttributesArchive* TransitionAttributesArchive::_internal_mutable_animationattributes() {
  _has_bits_[0] |= 0x00000008u;
  if (animationattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::AnimationAttributesArchive>(GetArenaForAllocation());
    animationattributes_ = p;
  }
  return animationattributes_;
}
inline ::KN::AnimationAttributesArchive* TransitionAttributesArchive::mutable_animationattributes() {
  ::KN::AnimationAttributesArchive* _msg = _internal_mutable_animationattributes();
  // @@protoc_insertion_point(field_mutable:KN.TransitionAttributesArchive.animationAttributes)
  return _msg;
}
inline void TransitionAttributesArchive::set_allocated_animationattributes(::KN::AnimationAttributesArchive* animationattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete animationattributes_;
  }
  if (animationattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::AnimationAttributesArchive>::GetOwningArena(animationattributes);
    if (message_arena != submessage_arena) {
      animationattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animationattributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  animationattributes_ = animationattributes;
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionAttributesArchive.animationAttributes)
}

// optional float custom_twist = 9;
inline bool TransitionAttributesArchive::_internal_has_custom_twist() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_twist() const {
  return _internal_has_custom_twist();
}
inline void TransitionAttributesArchive::clear_custom_twist() {
  custom_twist_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TransitionAttributesArchive::_internal_custom_twist() const {
  return custom_twist_;
}
inline float TransitionAttributesArchive::custom_twist() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_twist)
  return _internal_custom_twist();
}
inline void TransitionAttributesArchive::_internal_set_custom_twist(float value) {
  _has_bits_[0] |= 0x00000080u;
  custom_twist_ = value;
}
inline void TransitionAttributesArchive::set_custom_twist(float value) {
  _internal_set_custom_twist(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_twist)
}

// optional uint32 custom_mosaic_size = 10;
inline bool TransitionAttributesArchive::_internal_has_custom_mosaic_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_mosaic_size() const {
  return _internal_has_custom_mosaic_size();
}
inline void TransitionAttributesArchive::clear_custom_mosaic_size() {
  custom_mosaic_size_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransitionAttributesArchive::_internal_custom_mosaic_size() const {
  return custom_mosaic_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransitionAttributesArchive::custom_mosaic_size() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_mosaic_size)
  return _internal_custom_mosaic_size();
}
inline void TransitionAttributesArchive::_internal_set_custom_mosaic_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  custom_mosaic_size_ = value;
}
inline void TransitionAttributesArchive::set_custom_mosaic_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_mosaic_size(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_mosaic_size)
}

// optional uint32 custom_mosaic_type = 11;
inline bool TransitionAttributesArchive::_internal_has_custom_mosaic_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_mosaic_type() const {
  return _internal_has_custom_mosaic_type();
}
inline void TransitionAttributesArchive::clear_custom_mosaic_type() {
  custom_mosaic_type_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransitionAttributesArchive::_internal_custom_mosaic_type() const {
  return custom_mosaic_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransitionAttributesArchive::custom_mosaic_type() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_mosaic_type)
  return _internal_custom_mosaic_type();
}
inline void TransitionAttributesArchive::_internal_set_custom_mosaic_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  custom_mosaic_type_ = value;
}
inline void TransitionAttributesArchive::set_custom_mosaic_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_mosaic_type(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_mosaic_type)
}

// optional bool custom_bounce = 12;
inline bool TransitionAttributesArchive::_internal_has_custom_bounce() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_bounce() const {
  return _internal_has_custom_bounce();
}
inline void TransitionAttributesArchive::clear_custom_bounce() {
  custom_bounce_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool TransitionAttributesArchive::_internal_custom_bounce() const {
  return custom_bounce_;
}
inline bool TransitionAttributesArchive::custom_bounce() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_bounce)
  return _internal_custom_bounce();
}
inline void TransitionAttributesArchive::_internal_set_custom_bounce(bool value) {
  _has_bits_[0] |= 0x00000400u;
  custom_bounce_ = value;
}
inline void TransitionAttributesArchive::set_custom_bounce(bool value) {
  _internal_set_custom_bounce(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_bounce)
}

// optional bool custom_magic_move_fade_unmatched_objects = 13;
inline bool TransitionAttributesArchive::_internal_has_custom_magic_move_fade_unmatched_objects() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_magic_move_fade_unmatched_objects() const {
  return _internal_has_custom_magic_move_fade_unmatched_objects();
}
inline void TransitionAttributesArchive::clear_custom_magic_move_fade_unmatched_objects() {
  custom_magic_move_fade_unmatched_objects_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TransitionAttributesArchive::_internal_custom_magic_move_fade_unmatched_objects() const {
  return custom_magic_move_fade_unmatched_objects_;
}
inline bool TransitionAttributesArchive::custom_magic_move_fade_unmatched_objects() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_magic_move_fade_unmatched_objects)
  return _internal_custom_magic_move_fade_unmatched_objects();
}
inline void TransitionAttributesArchive::_internal_set_custom_magic_move_fade_unmatched_objects(bool value) {
  _has_bits_[0] |= 0x00000800u;
  custom_magic_move_fade_unmatched_objects_ = value;
}
inline void TransitionAttributesArchive::set_custom_magic_move_fade_unmatched_objects(bool value) {
  _internal_set_custom_magic_move_fade_unmatched_objects(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_magic_move_fade_unmatched_objects)
}

// optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
inline bool TransitionAttributesArchive::_internal_has_custom_timing_curve() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_timing_curve() const {
  return _internal_has_custom_timing_curve();
}
inline void TransitionAttributesArchive::clear_custom_timing_curve() {
  custom_timing_curve_ = 1;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::_internal_custom_timing_curve() const {
  return static_cast< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType >(custom_timing_curve_);
}
inline ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::custom_timing_curve() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_timing_curve)
  return _internal_custom_timing_curve();
}
inline void TransitionAttributesArchive::_internal_set_custom_timing_curve(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType value) {
  assert(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  custom_timing_curve_ = value;
}
inline void TransitionAttributesArchive::set_custom_timing_curve(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType value) {
  _internal_set_custom_timing_curve(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_timing_curve)
}

// optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
inline bool TransitionAttributesArchive::_internal_has_custom_text_delivery_type() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_text_delivery_type() const {
  return _internal_has_custom_text_delivery_type();
}
inline void TransitionAttributesArchive::clear_custom_text_delivery_type() {
  custom_text_delivery_type_ = 1;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::_internal_custom_text_delivery_type() const {
  return static_cast< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType >(custom_text_delivery_type_);
}
inline ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::custom_text_delivery_type() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_text_delivery_type)
  return _internal_custom_text_delivery_type();
}
inline void TransitionAttributesArchive::_internal_set_custom_text_delivery_type(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType value) {
  assert(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  custom_text_delivery_type_ = value;
}
inline void TransitionAttributesArchive::set_custom_text_delivery_type(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType value) {
  _internal_set_custom_text_delivery_type(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_text_delivery_type)
}

// optional bool custom_motion_blur = 17;
inline bool TransitionAttributesArchive::_internal_has_custom_motion_blur() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_motion_blur() const {
  return _internal_has_custom_motion_blur();
}
inline void TransitionAttributesArchive::clear_custom_motion_blur() {
  custom_motion_blur_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TransitionAttributesArchive::_internal_custom_motion_blur() const {
  return custom_motion_blur_;
}
inline bool TransitionAttributesArchive::custom_motion_blur() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_motion_blur)
  return _internal_custom_motion_blur();
}
inline void TransitionAttributesArchive::_internal_set_custom_motion_blur(bool value) {
  _has_bits_[0] |= 0x00001000u;
  custom_motion_blur_ = value;
}
inline void TransitionAttributesArchive::set_custom_motion_blur(bool value) {
  _internal_set_custom_motion_blur(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_motion_blur)
}

// optional float custom_travel_distance = 18;
inline bool TransitionAttributesArchive::_internal_has_custom_travel_distance() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_travel_distance() const {
  return _internal_has_custom_travel_distance();
}
inline void TransitionAttributesArchive::clear_custom_travel_distance() {
  custom_travel_distance_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float TransitionAttributesArchive::_internal_custom_travel_distance() const {
  return custom_travel_distance_;
}
inline float TransitionAttributesArchive::custom_travel_distance() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_travel_distance)
  return _internal_custom_travel_distance();
}
inline void TransitionAttributesArchive::_internal_set_custom_travel_distance(float value) {
  _has_bits_[0] |= 0x00004000u;
  custom_travel_distance_ = value;
}
inline void TransitionAttributesArchive::set_custom_travel_distance(float value) {
  _internal_set_custom_travel_distance(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_travel_distance)
}

// optional string database_animation_type = 1 [deprecated = true];
inline bool TransitionAttributesArchive::_internal_has_database_animation_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_animation_type() const {
  return _internal_has_database_animation_type();
}
inline void TransitionAttributesArchive::clear_database_animation_type() {
  database_animation_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransitionAttributesArchive::database_animation_type() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_animation_type)
  return _internal_database_animation_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransitionAttributesArchive::set_database_animation_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 database_animation_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_animation_type)
}
inline std::string* TransitionAttributesArchive::mutable_database_animation_type() {
  std::string* _s = _internal_mutable_database_animation_type();
  // @@protoc_insertion_point(field_mutable:KN.TransitionAttributesArchive.database_animation_type)
  return _s;
}
inline const std::string& TransitionAttributesArchive::_internal_database_animation_type() const {
  return database_animation_type_.Get();
}
inline void TransitionAttributesArchive::_internal_set_database_animation_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  database_animation_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransitionAttributesArchive::_internal_mutable_database_animation_type() {
  _has_bits_[0] |= 0x00000001u;
  return database_animation_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransitionAttributesArchive::release_database_animation_type() {
  // @@protoc_insertion_point(field_release:KN.TransitionAttributesArchive.database_animation_type)
  if (!_internal_has_database_animation_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return database_animation_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransitionAttributesArchive::set_allocated_database_animation_type(std::string* database_animation_type) {
  if (database_animation_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  database_animation_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_animation_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionAttributesArchive.database_animation_type)
}

// optional string database_effect = 2 [deprecated = true];
inline bool TransitionAttributesArchive::_internal_has_database_effect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_effect() const {
  return _internal_has_database_effect();
}
inline void TransitionAttributesArchive::clear_database_effect() {
  database_effect_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransitionAttributesArchive::database_effect() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_effect)
  return _internal_database_effect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransitionAttributesArchive::set_database_effect(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 database_effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_effect)
}
inline std::string* TransitionAttributesArchive::mutable_database_effect() {
  std::string* _s = _internal_mutable_database_effect();
  // @@protoc_insertion_point(field_mutable:KN.TransitionAttributesArchive.database_effect)
  return _s;
}
inline const std::string& TransitionAttributesArchive::_internal_database_effect() const {
  return database_effect_.Get();
}
inline void TransitionAttributesArchive::_internal_set_database_effect(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  database_effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransitionAttributesArchive::_internal_mutable_database_effect() {
  _has_bits_[0] |= 0x00000002u;
  return database_effect_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransitionAttributesArchive::release_database_effect() {
  // @@protoc_insertion_point(field_release:KN.TransitionAttributesArchive.database_effect)
  if (!_internal_has_database_effect()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return database_effect_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransitionAttributesArchive::set_allocated_database_effect(std::string* database_effect) {
  if (database_effect != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  database_effect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_effect,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionAttributesArchive.database_effect)
}

// optional double database_duration = 3 [deprecated = true];
inline bool TransitionAttributesArchive::_internal_has_database_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_duration() const {
  return _internal_has_database_duration();
}
inline void TransitionAttributesArchive::clear_database_duration() {
  database_duration_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double TransitionAttributesArchive::_internal_database_duration() const {
  return database_duration_;
}
inline double TransitionAttributesArchive::database_duration() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_duration)
  return _internal_database_duration();
}
inline void TransitionAttributesArchive::_internal_set_database_duration(double value) {
  _has_bits_[0] |= 0x00000010u;
  database_duration_ = value;
}
inline void TransitionAttributesArchive::set_database_duration(double value) {
  _internal_set_database_duration(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_duration)
}

// optional uint32 database_direction = 4 [deprecated = true];
inline bool TransitionAttributesArchive::_internal_has_database_direction() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_direction() const {
  return _internal_has_database_direction();
}
inline void TransitionAttributesArchive::clear_database_direction() {
  database_direction_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransitionAttributesArchive::_internal_database_direction() const {
  return database_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransitionAttributesArchive::database_direction() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_direction)
  return _internal_database_direction();
}
inline void TransitionAttributesArchive::_internal_set_database_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  database_direction_ = value;
}
inline void TransitionAttributesArchive::set_database_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_database_direction(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_direction)
}

// optional float database_delay = 5 [deprecated = true];
inline bool TransitionAttributesArchive::_internal_has_database_delay() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_delay() const {
  return _internal_has_database_delay();
}
inline void TransitionAttributesArchive::clear_database_delay() {
  database_delay_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TransitionAttributesArchive::_internal_database_delay() const {
  return database_delay_;
}
inline float TransitionAttributesArchive::database_delay() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_delay)
  return _internal_database_delay();
}
inline void TransitionAttributesArchive::_internal_set_database_delay(float value) {
  _has_bits_[0] |= 0x00000040u;
  database_delay_ = value;
}
inline void TransitionAttributesArchive::set_database_delay(float value) {
  _internal_set_database_delay(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_delay)
}

// optional bool database_is_automatic = 6 [deprecated = true];
inline bool TransitionAttributesArchive::_internal_has_database_is_automatic() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_is_automatic() const {
  return _internal_has_database_is_automatic();
}
inline void TransitionAttributesArchive::clear_database_is_automatic() {
  database_is_automatic_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool TransitionAttributesArchive::_internal_database_is_automatic() const {
  return database_is_automatic_;
}
inline bool TransitionAttributesArchive::database_is_automatic() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_is_automatic)
  return _internal_database_is_automatic();
}
inline void TransitionAttributesArchive::_internal_set_database_is_automatic(bool value) {
  _has_bits_[0] |= 0x00002000u;
  database_is_automatic_ = value;
}
inline void TransitionAttributesArchive::set_database_is_automatic(bool value) {
  _internal_set_database_is_automatic(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_is_automatic)
}

// optional .TSP.Color database_color = 7 [deprecated = true];
inline bool TransitionAttributesArchive::_internal_has_database_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || database_color_ != nullptr);
  return value;
}
inline bool TransitionAttributesArchive::has_database_color() const {
  return _internal_has_database_color();
}
inline const ::TSP::Color& TransitionAttributesArchive::_internal_database_color() const {
  const ::TSP::Color* p = database_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& TransitionAttributesArchive::database_color() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_color)
  return _internal_database_color();
}
inline void TransitionAttributesArchive::unsafe_arena_set_allocated_database_color(
    ::TSP::Color* database_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_color_);
  }
  database_color_ = database_color;
  if (database_color) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.TransitionAttributesArchive.database_color)
}
inline ::TSP::Color* TransitionAttributesArchive::release_database_color() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = database_color_;
  database_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* TransitionAttributesArchive::unsafe_arena_release_database_color() {
  // @@protoc_insertion_point(field_release:KN.TransitionAttributesArchive.database_color)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = database_color_;
  database_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* TransitionAttributesArchive::_internal_mutable_database_color() {
  _has_bits_[0] |= 0x00000004u;
  if (database_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    database_color_ = p;
  }
  return database_color_;
}
inline ::TSP::Color* TransitionAttributesArchive::mutable_database_color() {
  ::TSP::Color* _msg = _internal_mutable_database_color();
  // @@protoc_insertion_point(field_mutable:KN.TransitionAttributesArchive.database_color)
  return _msg;
}
inline void TransitionAttributesArchive::set_allocated_database_color(::TSP::Color* database_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_color_);
  }
  if (database_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_color));
    if (message_arena != submessage_arena) {
      database_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  database_color_ = database_color;
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionAttributesArchive.database_color)
}

// -------------------------------------------------------------------

// TransitionArchive

// required .KN.TransitionAttributesArchive attributes = 2;
inline bool TransitionArchive::_internal_has_attributes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || attributes_ != nullptr);
  return value;
}
inline bool TransitionArchive::has_attributes() const {
  return _internal_has_attributes();
}
inline void TransitionArchive::clear_attributes() {
  if (attributes_ != nullptr) attributes_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KN::TransitionAttributesArchive& TransitionArchive::_internal_attributes() const {
  const ::KN::TransitionAttributesArchive* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::TransitionAttributesArchive&>(
      ::KN::_TransitionAttributesArchive_default_instance_);
}
inline const ::KN::TransitionAttributesArchive& TransitionArchive::attributes() const {
  // @@protoc_insertion_point(field_get:KN.TransitionArchive.attributes)
  return _internal_attributes();
}
inline void TransitionArchive::unsafe_arena_set_allocated_attributes(
    ::KN::TransitionAttributesArchive* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.TransitionArchive.attributes)
}
inline ::KN::TransitionAttributesArchive* TransitionArchive::release_attributes() {
  _has_bits_[0] &= ~0x00000001u;
  ::KN::TransitionAttributesArchive* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::TransitionAttributesArchive* TransitionArchive::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:KN.TransitionArchive.attributes)
  _has_bits_[0] &= ~0x00000001u;
  ::KN::TransitionAttributesArchive* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::KN::TransitionAttributesArchive* TransitionArchive::_internal_mutable_attributes() {
  _has_bits_[0] |= 0x00000001u;
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::TransitionAttributesArchive>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::KN::TransitionAttributesArchive* TransitionArchive::mutable_attributes() {
  ::KN::TransitionAttributesArchive* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:KN.TransitionArchive.attributes)
  return _msg;
}
inline void TransitionArchive::set_allocated_attributes(::KN::TransitionAttributesArchive* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::TransitionAttributesArchive>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionArchive.attributes)
}

// -------------------------------------------------------------------

// BuildChunkArchive

// optional .TSP.Reference build = 1;
inline bool BuildChunkArchive::_internal_has_build() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || build_ != nullptr);
  return value;
}
inline bool BuildChunkArchive::has_build() const {
  return _internal_has_build();
}
inline const ::TSP::Reference& BuildChunkArchive::_internal_build() const {
  const ::TSP::Reference* p = build_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& BuildChunkArchive::build() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.build)
  return _internal_build();
}
inline void BuildChunkArchive::unsafe_arena_set_allocated_build(
    ::TSP::Reference* build) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_);
  }
  build_ = build;
  if (build) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildChunkArchive.build)
}
inline ::TSP::Reference* BuildChunkArchive::release_build() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = build_;
  build_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* BuildChunkArchive::unsafe_arena_release_build() {
  // @@protoc_insertion_point(field_release:KN.BuildChunkArchive.build)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = build_;
  build_ = nullptr;
  return temp;
}
inline ::TSP::Reference* BuildChunkArchive::_internal_mutable_build() {
  _has_bits_[0] |= 0x00000001u;
  if (build_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    build_ = p;
  }
  return build_;
}
inline ::TSP::Reference* BuildChunkArchive::mutable_build() {
  ::TSP::Reference* _msg = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:KN.BuildChunkArchive.build)
  return _msg;
}
inline void BuildChunkArchive::set_allocated_build(::TSP::Reference* build) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_);
  }
  if (build) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build));
    if (message_arena != submessage_arena) {
      build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  build_ = build;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildChunkArchive.build)
}

// optional uint32 index = 2 [deprecated = true];
inline bool BuildChunkArchive::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_index() const {
  return _internal_has_index();
}
inline void BuildChunkArchive::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildChunkArchive::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildChunkArchive::index() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.index)
  return _internal_index();
}
inline void BuildChunkArchive::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  index_ = value;
}
inline void BuildChunkArchive::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.index)
}

// optional double delay = 3;
inline bool BuildChunkArchive::_internal_has_delay() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_delay() const {
  return _internal_has_delay();
}
inline void BuildChunkArchive::clear_delay() {
  delay_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double BuildChunkArchive::_internal_delay() const {
  return delay_;
}
inline double BuildChunkArchive::delay() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.delay)
  return _internal_delay();
}
inline void BuildChunkArchive::_internal_set_delay(double value) {
  _has_bits_[0] |= 0x00000008u;
  delay_ = value;
}
inline void BuildChunkArchive::set_delay(double value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.delay)
}

// optional double duration = 4;
inline bool BuildChunkArchive::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_duration() const {
  return _internal_has_duration();
}
inline void BuildChunkArchive::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double BuildChunkArchive::_internal_duration() const {
  return duration_;
}
inline double BuildChunkArchive::duration() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.duration)
  return _internal_duration();
}
inline void BuildChunkArchive::_internal_set_duration(double value) {
  _has_bits_[0] |= 0x00000010u;
  duration_ = value;
}
inline void BuildChunkArchive::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.duration)
}

// optional bool automatic = 5;
inline bool BuildChunkArchive::_internal_has_automatic() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_automatic() const {
  return _internal_has_automatic();
}
inline void BuildChunkArchive::clear_automatic() {
  automatic_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool BuildChunkArchive::_internal_automatic() const {
  return automatic_;
}
inline bool BuildChunkArchive::automatic() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.automatic)
  return _internal_automatic();
}
inline void BuildChunkArchive::_internal_set_automatic(bool value) {
  _has_bits_[0] |= 0x00000040u;
  automatic_ = value;
}
inline void BuildChunkArchive::set_automatic(bool value) {
  _internal_set_automatic(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.automatic)
}

// optional bool referent = 6;
inline bool BuildChunkArchive::_internal_has_referent() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_referent() const {
  return _internal_has_referent();
}
inline void BuildChunkArchive::clear_referent() {
  referent_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool BuildChunkArchive::_internal_referent() const {
  return referent_;
}
inline bool BuildChunkArchive::referent() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.referent)
  return _internal_referent();
}
inline void BuildChunkArchive::_internal_set_referent(bool value) {
  _has_bits_[0] |= 0x00000080u;
  referent_ = value;
}
inline void BuildChunkArchive::set_referent(bool value) {
  _internal_set_referent(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.referent)
}

// optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 7;
inline bool BuildChunkArchive::_internal_has_build_chunk_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || build_chunk_identifier_ != nullptr);
  return value;
}
inline bool BuildChunkArchive::has_build_chunk_identifier() const {
  return _internal_has_build_chunk_identifier();
}
inline void BuildChunkArchive::clear_build_chunk_identifier() {
  if (build_chunk_identifier_ != nullptr) build_chunk_identifier_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KN::BuildChunkIdentifierArchive& BuildChunkArchive::_internal_build_chunk_identifier() const {
  const ::KN::BuildChunkIdentifierArchive* p = build_chunk_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildChunkIdentifierArchive&>(
      ::KN::_BuildChunkIdentifierArchive_default_instance_);
}
inline const ::KN::BuildChunkIdentifierArchive& BuildChunkArchive::build_chunk_identifier() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.build_chunk_identifier)
  return _internal_build_chunk_identifier();
}
inline void BuildChunkArchive::unsafe_arena_set_allocated_build_chunk_identifier(
    ::KN::BuildChunkIdentifierArchive* build_chunk_identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_chunk_identifier_);
  }
  build_chunk_identifier_ = build_chunk_identifier;
  if (build_chunk_identifier) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildChunkArchive.build_chunk_identifier)
}
inline ::KN::BuildChunkIdentifierArchive* BuildChunkArchive::release_build_chunk_identifier() {
  _has_bits_[0] &= ~0x00000002u;
  ::KN::BuildChunkIdentifierArchive* temp = build_chunk_identifier_;
  build_chunk_identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* BuildChunkArchive::unsafe_arena_release_build_chunk_identifier() {
  // @@protoc_insertion_point(field_release:KN.BuildChunkArchive.build_chunk_identifier)
  _has_bits_[0] &= ~0x00000002u;
  ::KN::BuildChunkIdentifierArchive* temp = build_chunk_identifier_;
  build_chunk_identifier_ = nullptr;
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* BuildChunkArchive::_internal_mutable_build_chunk_identifier() {
  _has_bits_[0] |= 0x00000002u;
  if (build_chunk_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildChunkIdentifierArchive>(GetArenaForAllocation());
    build_chunk_identifier_ = p;
  }
  return build_chunk_identifier_;
}
inline ::KN::BuildChunkIdentifierArchive* BuildChunkArchive::mutable_build_chunk_identifier() {
  ::KN::BuildChunkIdentifierArchive* _msg = _internal_mutable_build_chunk_identifier();
  // @@protoc_insertion_point(field_mutable:KN.BuildChunkArchive.build_chunk_identifier)
  return _msg;
}
inline void BuildChunkArchive::set_allocated_build_chunk_identifier(::KN::BuildChunkIdentifierArchive* build_chunk_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete build_chunk_identifier_;
  }
  if (build_chunk_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::BuildChunkIdentifierArchive>::GetOwningArena(build_chunk_identifier);
    if (message_arena != submessage_arena) {
      build_chunk_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_chunk_identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  build_chunk_identifier_ = build_chunk_identifier;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildChunkArchive.build_chunk_identifier)
}

// optional .TSP.UUID build_id = 8;
inline bool BuildChunkArchive::_internal_has_build_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || build_id_ != nullptr);
  return value;
}
inline bool BuildChunkArchive::has_build_id() const {
  return _internal_has_build_id();
}
inline const ::TSP::UUID& BuildChunkArchive::_internal_build_id() const {
  const ::TSP::UUID* p = build_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& BuildChunkArchive::build_id() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.build_id)
  return _internal_build_id();
}
inline void BuildChunkArchive::unsafe_arena_set_allocated_build_id(
    ::TSP::UUID* build_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  build_id_ = build_id;
  if (build_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildChunkArchive.build_id)
}
inline ::TSP::UUID* BuildChunkArchive::release_build_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* BuildChunkArchive::unsafe_arena_release_build_id() {
  // @@protoc_insertion_point(field_release:KN.BuildChunkArchive.build_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* BuildChunkArchive::_internal_mutable_build_id() {
  _has_bits_[0] |= 0x00000004u;
  if (build_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    build_id_ = p;
  }
  return build_id_;
}
inline ::TSP::UUID* BuildChunkArchive::mutable_build_id() {
  ::TSP::UUID* _msg = _internal_mutable_build_id();
  // @@protoc_insertion_point(field_mutable:KN.BuildChunkArchive.build_id)
  return _msg;
}
inline void BuildChunkArchive::set_allocated_build_id(::TSP::UUID* build_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  if (build_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id));
    if (message_arena != submessage_arena) {
      build_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  build_id_ = build_id;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildChunkArchive.build_id)
}

// -------------------------------------------------------------------

// BuildChunkIdentifierArchive

// optional .TSP.UUID build_id = 1;
inline bool BuildChunkIdentifierArchive::_internal_has_build_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || build_id_ != nullptr);
  return value;
}
inline bool BuildChunkIdentifierArchive::has_build_id() const {
  return _internal_has_build_id();
}
inline const ::TSP::UUID& BuildChunkIdentifierArchive::_internal_build_id() const {
  const ::TSP::UUID* p = build_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& BuildChunkIdentifierArchive::build_id() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkIdentifierArchive.build_id)
  return _internal_build_id();
}
inline void BuildChunkIdentifierArchive::unsafe_arena_set_allocated_build_id(
    ::TSP::UUID* build_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  build_id_ = build_id;
  if (build_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildChunkIdentifierArchive.build_id)
}
inline ::TSP::UUID* BuildChunkIdentifierArchive::release_build_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* BuildChunkIdentifierArchive::unsafe_arena_release_build_id() {
  // @@protoc_insertion_point(field_release:KN.BuildChunkIdentifierArchive.build_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* BuildChunkIdentifierArchive::_internal_mutable_build_id() {
  _has_bits_[0] |= 0x00000001u;
  if (build_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    build_id_ = p;
  }
  return build_id_;
}
inline ::TSP::UUID* BuildChunkIdentifierArchive::mutable_build_id() {
  ::TSP::UUID* _msg = _internal_mutable_build_id();
  // @@protoc_insertion_point(field_mutable:KN.BuildChunkIdentifierArchive.build_id)
  return _msg;
}
inline void BuildChunkIdentifierArchive::set_allocated_build_id(::TSP::UUID* build_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  if (build_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id));
    if (message_arena != submessage_arena) {
      build_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  build_id_ = build_id;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildChunkIdentifierArchive.build_id)
}

// optional int32 build_chunk_id = 2;
inline bool BuildChunkIdentifierArchive::_internal_has_build_chunk_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuildChunkIdentifierArchive::has_build_chunk_id() const {
  return _internal_has_build_chunk_id();
}
inline void BuildChunkIdentifierArchive::clear_build_chunk_id() {
  build_chunk_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildChunkIdentifierArchive::_internal_build_chunk_id() const {
  return build_chunk_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildChunkIdentifierArchive::build_chunk_id() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkIdentifierArchive.build_chunk_id)
  return _internal_build_chunk_id();
}
inline void BuildChunkIdentifierArchive::_internal_set_build_chunk_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  build_chunk_id_ = value;
}
inline void BuildChunkIdentifierArchive::set_build_chunk_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_build_chunk_id(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkIdentifierArchive.build_chunk_id)
}

// -------------------------------------------------------------------

// BuildAttributeValueArchive

// optional uint32 integer_value = 1;
inline bool BuildAttributeValueArchive::_internal_has_integer_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BuildAttributeValueArchive::has_integer_value() const {
  return _internal_has_integer_value();
}
inline void BuildAttributeValueArchive::clear_integer_value() {
  integer_value_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributeValueArchive::_internal_integer_value() const {
  return integer_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributeValueArchive::integer_value() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeValueArchive.integer_value)
  return _internal_integer_value();
}
inline void BuildAttributeValueArchive::_internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  integer_value_ = value;
}
inline void BuildAttributeValueArchive::set_integer_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_integer_value(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributeValueArchive.integer_value)
}

// optional double double_value = 2;
inline bool BuildAttributeValueArchive::_internal_has_double_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuildAttributeValueArchive::has_double_value() const {
  return _internal_has_double_value();
}
inline void BuildAttributeValueArchive::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double BuildAttributeValueArchive::_internal_double_value() const {
  return double_value_;
}
inline double BuildAttributeValueArchive::double_value() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeValueArchive.double_value)
  return _internal_double_value();
}
inline void BuildAttributeValueArchive::_internal_set_double_value(double value) {
  _has_bits_[0] |= 0x00000008u;
  double_value_ = value;
}
inline void BuildAttributeValueArchive::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributeValueArchive.double_value)
}

// optional bool bool_value = 3;
inline bool BuildAttributeValueArchive::_internal_has_bool_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BuildAttributeValueArchive::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void BuildAttributeValueArchive::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BuildAttributeValueArchive::_internal_bool_value() const {
  return bool_value_;
}
inline bool BuildAttributeValueArchive::bool_value() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeValueArchive.bool_value)
  return _internal_bool_value();
}
inline void BuildAttributeValueArchive::_internal_set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000020u;
  bool_value_ = value;
}
inline void BuildAttributeValueArchive::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributeValueArchive.bool_value)
}

// optional string string_value = 4;
inline bool BuildAttributeValueArchive::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuildAttributeValueArchive::has_string_value() const {
  return _internal_has_string_value();
}
inline void BuildAttributeValueArchive::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuildAttributeValueArchive::string_value() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeValueArchive.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildAttributeValueArchive::set_string_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildAttributeValueArchive.string_value)
}
inline std::string* BuildAttributeValueArchive::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributeValueArchive.string_value)
  return _s;
}
inline const std::string& BuildAttributeValueArchive::_internal_string_value() const {
  return string_value_.Get();
}
inline void BuildAttributeValueArchive::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BuildAttributeValueArchive::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  return string_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BuildAttributeValueArchive::release_string_value() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributeValueArchive.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BuildAttributeValueArchive::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributeValueArchive.string_value)
}

// optional .TSD.PathSourceArchive path_source_value = 5;
inline bool BuildAttributeValueArchive::_internal_has_path_source_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || path_source_value_ != nullptr);
  return value;
}
inline bool BuildAttributeValueArchive::has_path_source_value() const {
  return _internal_has_path_source_value();
}
inline const ::TSD::PathSourceArchive& BuildAttributeValueArchive::_internal_path_source_value() const {
  const ::TSD::PathSourceArchive* p = path_source_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& BuildAttributeValueArchive::path_source_value() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeValueArchive.path_source_value)
  return _internal_path_source_value();
}
inline void BuildAttributeValueArchive::unsafe_arena_set_allocated_path_source_value(
    ::TSD::PathSourceArchive* path_source_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_source_value_);
  }
  path_source_value_ = path_source_value;
  if (path_source_value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributeValueArchive.path_source_value)
}
inline ::TSD::PathSourceArchive* BuildAttributeValueArchive::release_path_source_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::PathSourceArchive* temp = path_source_value_;
  path_source_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* BuildAttributeValueArchive::unsafe_arena_release_path_source_value() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributeValueArchive.path_source_value)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::PathSourceArchive* temp = path_source_value_;
  path_source_value_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* BuildAttributeValueArchive::_internal_mutable_path_source_value() {
  _has_bits_[0] |= 0x00000002u;
  if (path_source_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    path_source_value_ = p;
  }
  return path_source_value_;
}
inline ::TSD::PathSourceArchive* BuildAttributeValueArchive::mutable_path_source_value() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_path_source_value();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributeValueArchive.path_source_value)
  return _msg;
}
inline void BuildAttributeValueArchive::set_allocated_path_source_value(::TSD::PathSourceArchive* path_source_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_source_value_);
  }
  if (path_source_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_source_value));
    if (message_arena != submessage_arena) {
      path_source_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_source_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_source_value_ = path_source_value;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributeValueArchive.path_source_value)
}

// optional .TSP.Color color_value = 6;
inline bool BuildAttributeValueArchive::_internal_has_color_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || color_value_ != nullptr);
  return value;
}
inline bool BuildAttributeValueArchive::has_color_value() const {
  return _internal_has_color_value();
}
inline const ::TSP::Color& BuildAttributeValueArchive::_internal_color_value() const {
  const ::TSP::Color* p = color_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& BuildAttributeValueArchive::color_value() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeValueArchive.color_value)
  return _internal_color_value();
}
inline void BuildAttributeValueArchive::unsafe_arena_set_allocated_color_value(
    ::TSP::Color* color_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_value_);
  }
  color_value_ = color_value;
  if (color_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributeValueArchive.color_value)
}
inline ::TSP::Color* BuildAttributeValueArchive::release_color_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = color_value_;
  color_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* BuildAttributeValueArchive::unsafe_arena_release_color_value() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributeValueArchive.color_value)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = color_value_;
  color_value_ = nullptr;
  return temp;
}
inline ::TSP::Color* BuildAttributeValueArchive::_internal_mutable_color_value() {
  _has_bits_[0] |= 0x00000004u;
  if (color_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    color_value_ = p;
  }
  return color_value_;
}
inline ::TSP::Color* BuildAttributeValueArchive::mutable_color_value() {
  ::TSP::Color* _msg = _internal_mutable_color_value();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributeValueArchive.color_value)
  return _msg;
}
inline void BuildAttributeValueArchive::set_allocated_color_value(::TSP::Color* color_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_value_);
  }
  if (color_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_value));
    if (message_arena != submessage_arena) {
      color_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  color_value_ = color_value;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributeValueArchive.color_value)
}

// optional .KN.BuildAttributeValueArchive.BuildAttributeValueType type = 7;
inline bool BuildAttributeValueArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BuildAttributeValueArchive::has_type() const {
  return _internal_has_type();
}
inline void BuildAttributeValueArchive::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::KN::BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::_internal_type() const {
  return static_cast< ::KN::BuildAttributeValueArchive_BuildAttributeValueType >(type_);
}
inline ::KN::BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::type() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeValueArchive.type)
  return _internal_type();
}
inline void BuildAttributeValueArchive::_internal_set_type(::KN::BuildAttributeValueArchive_BuildAttributeValueType value) {
  assert(::KN::BuildAttributeValueArchive_BuildAttributeValueType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void BuildAttributeValueArchive::set_type(::KN::BuildAttributeValueArchive_BuildAttributeValueType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributeValueArchive.type)
}

// -------------------------------------------------------------------

// BuildAttributeTupleArchive

// optional string property = 1;
inline bool BuildAttributeTupleArchive::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuildAttributeTupleArchive::has_property() const {
  return _internal_has_property();
}
inline void BuildAttributeTupleArchive::clear_property() {
  property_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuildAttributeTupleArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeTupleArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildAttributeTupleArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildAttributeTupleArchive.property)
}
inline std::string* BuildAttributeTupleArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributeTupleArchive.property)
  return _s;
}
inline const std::string& BuildAttributeTupleArchive::_internal_property() const {
  return property_.Get();
}
inline void BuildAttributeTupleArchive::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BuildAttributeTupleArchive::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000001u;
  return property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BuildAttributeTupleArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributeTupleArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BuildAttributeTupleArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributeTupleArchive.property)
}

// optional .KN.BuildAttributeValueArchive value = 2;
inline bool BuildAttributeTupleArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool BuildAttributeTupleArchive::has_value() const {
  return _internal_has_value();
}
inline void BuildAttributeTupleArchive::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KN::BuildAttributeValueArchive& BuildAttributeTupleArchive::_internal_value() const {
  const ::KN::BuildAttributeValueArchive* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildAttributeValueArchive&>(
      ::KN::_BuildAttributeValueArchive_default_instance_);
}
inline const ::KN::BuildAttributeValueArchive& BuildAttributeTupleArchive::value() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeTupleArchive.value)
  return _internal_value();
}
inline void BuildAttributeTupleArchive::unsafe_arena_set_allocated_value(
    ::KN::BuildAttributeValueArchive* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributeTupleArchive.value)
}
inline ::KN::BuildAttributeValueArchive* BuildAttributeTupleArchive::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::KN::BuildAttributeValueArchive* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildAttributeValueArchive* BuildAttributeTupleArchive::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributeTupleArchive.value)
  _has_bits_[0] &= ~0x00000002u;
  ::KN::BuildAttributeValueArchive* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::KN::BuildAttributeValueArchive* BuildAttributeTupleArchive::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildAttributeValueArchive>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::KN::BuildAttributeValueArchive* BuildAttributeTupleArchive::mutable_value() {
  ::KN::BuildAttributeValueArchive* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributeTupleArchive.value)
  return _msg;
}
inline void BuildAttributeTupleArchive::set_allocated_value(::KN::BuildAttributeValueArchive* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::BuildAttributeValueArchive>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributeTupleArchive.value)
}

// optional .TSP.UUID build_id = 3;
inline bool BuildAttributeTupleArchive::_internal_has_build_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || build_id_ != nullptr);
  return value;
}
inline bool BuildAttributeTupleArchive::has_build_id() const {
  return _internal_has_build_id();
}
inline const ::TSP::UUID& BuildAttributeTupleArchive::_internal_build_id() const {
  const ::TSP::UUID* p = build_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& BuildAttributeTupleArchive::build_id() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeTupleArchive.build_id)
  return _internal_build_id();
}
inline void BuildAttributeTupleArchive::unsafe_arena_set_allocated_build_id(
    ::TSP::UUID* build_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  build_id_ = build_id;
  if (build_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributeTupleArchive.build_id)
}
inline ::TSP::UUID* BuildAttributeTupleArchive::release_build_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* BuildAttributeTupleArchive::unsafe_arena_release_build_id() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributeTupleArchive.build_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* BuildAttributeTupleArchive::_internal_mutable_build_id() {
  _has_bits_[0] |= 0x00000004u;
  if (build_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    build_id_ = p;
  }
  return build_id_;
}
inline ::TSP::UUID* BuildAttributeTupleArchive::mutable_build_id() {
  ::TSP::UUID* _msg = _internal_mutable_build_id();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributeTupleArchive.build_id)
  return _msg;
}
inline void BuildAttributeTupleArchive::set_allocated_build_id(::TSP::UUID* build_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  if (build_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id));
    if (message_arena != submessage_arena) {
      build_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  build_id_ = build_id;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributeTupleArchive.build_id)
}

// optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 4;
inline bool BuildAttributeTupleArchive::_internal_has_build_chunk_identifier() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || build_chunk_identifier_ != nullptr);
  return value;
}
inline bool BuildAttributeTupleArchive::has_build_chunk_identifier() const {
  return _internal_has_build_chunk_identifier();
}
inline void BuildAttributeTupleArchive::clear_build_chunk_identifier() {
  if (build_chunk_identifier_ != nullptr) build_chunk_identifier_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::BuildChunkIdentifierArchive& BuildAttributeTupleArchive::_internal_build_chunk_identifier() const {
  const ::KN::BuildChunkIdentifierArchive* p = build_chunk_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildChunkIdentifierArchive&>(
      ::KN::_BuildChunkIdentifierArchive_default_instance_);
}
inline const ::KN::BuildChunkIdentifierArchive& BuildAttributeTupleArchive::build_chunk_identifier() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributeTupleArchive.build_chunk_identifier)
  return _internal_build_chunk_identifier();
}
inline void BuildAttributeTupleArchive::unsafe_arena_set_allocated_build_chunk_identifier(
    ::KN::BuildChunkIdentifierArchive* build_chunk_identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_chunk_identifier_);
  }
  build_chunk_identifier_ = build_chunk_identifier;
  if (build_chunk_identifier) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributeTupleArchive.build_chunk_identifier)
}
inline ::KN::BuildChunkIdentifierArchive* BuildAttributeTupleArchive::release_build_chunk_identifier() {
  _has_bits_[0] &= ~0x00000008u;
  ::KN::BuildChunkIdentifierArchive* temp = build_chunk_identifier_;
  build_chunk_identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* BuildAttributeTupleArchive::unsafe_arena_release_build_chunk_identifier() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributeTupleArchive.build_chunk_identifier)
  _has_bits_[0] &= ~0x00000008u;
  ::KN::BuildChunkIdentifierArchive* temp = build_chunk_identifier_;
  build_chunk_identifier_ = nullptr;
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* BuildAttributeTupleArchive::_internal_mutable_build_chunk_identifier() {
  _has_bits_[0] |= 0x00000008u;
  if (build_chunk_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildChunkIdentifierArchive>(GetArenaForAllocation());
    build_chunk_identifier_ = p;
  }
  return build_chunk_identifier_;
}
inline ::KN::BuildChunkIdentifierArchive* BuildAttributeTupleArchive::mutable_build_chunk_identifier() {
  ::KN::BuildChunkIdentifierArchive* _msg = _internal_mutable_build_chunk_identifier();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributeTupleArchive.build_chunk_identifier)
  return _msg;
}
inline void BuildAttributeTupleArchive::set_allocated_build_chunk_identifier(::KN::BuildChunkIdentifierArchive* build_chunk_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete build_chunk_identifier_;
  }
  if (build_chunk_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::BuildChunkIdentifierArchive>::GetOwningArena(build_chunk_identifier);
    if (message_arena != submessage_arena) {
      build_chunk_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_chunk_identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  build_chunk_identifier_ = build_chunk_identifier;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributeTupleArchive.build_chunk_identifier)
}

// -------------------------------------------------------------------

// BuildAttributesArchive

// optional .KN.AnimationAttributesArchive animationAttributes = 18;
inline bool BuildAttributesArchive::_internal_has_animationattributes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || animationattributes_ != nullptr);
  return value;
}
inline bool BuildAttributesArchive::has_animationattributes() const {
  return _internal_has_animationattributes();
}
inline void BuildAttributesArchive::clear_animationattributes() {
  if (animationattributes_ != nullptr) animationattributes_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::AnimationAttributesArchive& BuildAttributesArchive::_internal_animationattributes() const {
  const ::KN::AnimationAttributesArchive* p = animationattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::AnimationAttributesArchive&>(
      ::KN::_AnimationAttributesArchive_default_instance_);
}
inline const ::KN::AnimationAttributesArchive& BuildAttributesArchive::animationattributes() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.animationAttributes)
  return _internal_animationattributes();
}
inline void BuildAttributesArchive::unsafe_arena_set_allocated_animationattributes(
    ::KN::AnimationAttributesArchive* animationattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animationattributes_);
  }
  animationattributes_ = animationattributes;
  if (animationattributes) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributesArchive.animationAttributes)
}
inline ::KN::AnimationAttributesArchive* BuildAttributesArchive::release_animationattributes() {
  _has_bits_[0] &= ~0x00000010u;
  ::KN::AnimationAttributesArchive* temp = animationattributes_;
  animationattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::AnimationAttributesArchive* BuildAttributesArchive::unsafe_arena_release_animationattributes() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.animationAttributes)
  _has_bits_[0] &= ~0x00000010u;
  ::KN::AnimationAttributesArchive* temp = animationattributes_;
  animationattributes_ = nullptr;
  return temp;
}
inline ::KN::AnimationAttributesArchive* BuildAttributesArchive::_internal_mutable_animationattributes() {
  _has_bits_[0] |= 0x00000010u;
  if (animationattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::AnimationAttributesArchive>(GetArenaForAllocation());
    animationattributes_ = p;
  }
  return animationattributes_;
}
inline ::KN::AnimationAttributesArchive* BuildAttributesArchive::mutable_animationattributes() {
  ::KN::AnimationAttributesArchive* _msg = _internal_mutable_animationattributes();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.animationAttributes)
  return _msg;
}
inline void BuildAttributesArchive::set_allocated_animationattributes(::KN::AnimationAttributesArchive* animationattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete animationattributes_;
  }
  if (animationattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::AnimationAttributesArchive>::GetOwningArena(animationattributes);
    if (message_arena != submessage_arena) {
      animationattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animationattributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  animationattributes_ = animationattributes;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.animationAttributes)
}

// optional uint32 eventTrigger = 4;
inline bool BuildAttributesArchive::_internal_has_eventtrigger() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_eventtrigger() const {
  return _internal_has_eventtrigger();
}
inline void BuildAttributesArchive::clear_eventtrigger() {
  eventtrigger_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::_internal_eventtrigger() const {
  return eventtrigger_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::eventtrigger() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.eventTrigger)
  return _internal_eventtrigger();
}
inline void BuildAttributesArchive::_internal_set_eventtrigger(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  eventtrigger_ = value;
}
inline void BuildAttributesArchive::set_eventtrigger(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_eventtrigger(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.eventTrigger)
}

// optional double delayAutomaticAfter = 6 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_delayautomaticafter() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_delayautomaticafter() const {
  return _internal_has_delayautomaticafter();
}
inline void BuildAttributesArchive::clear_delayautomaticafter() {
  delayautomaticafter_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double BuildAttributesArchive::_internal_delayautomaticafter() const {
  return delayautomaticafter_;
}
inline double BuildAttributesArchive::delayautomaticafter() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.delayAutomaticAfter)
  return _internal_delayautomaticafter();
}
inline void BuildAttributesArchive::_internal_set_delayautomaticafter(double value) {
  _has_bits_[0] |= 0x00000200u;
  delayautomaticafter_ = value;
}
inline void BuildAttributesArchive::set_delayautomaticafter(double value) {
  _internal_set_delayautomaticafter(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.delayAutomaticAfter)
}

// optional double delayAutomaticWith = 7 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_delayautomaticwith() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_delayautomaticwith() const {
  return _internal_has_delayautomaticwith();
}
inline void BuildAttributesArchive::clear_delayautomaticwith() {
  delayautomaticwith_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double BuildAttributesArchive::_internal_delayautomaticwith() const {
  return delayautomaticwith_;
}
inline double BuildAttributesArchive::delayautomaticwith() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.delayAutomaticWith)
  return _internal_delayautomaticwith();
}
inline void BuildAttributesArchive::_internal_set_delayautomaticwith(double value) {
  _has_bits_[0] |= 0x00000400u;
  delayautomaticwith_ = value;
}
inline void BuildAttributesArchive::set_delayautomaticwith(double value) {
  _internal_set_delayautomaticwith(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.delayAutomaticWith)
}

// optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
inline bool BuildAttributesArchive::_internal_has_curvestyle() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_curvestyle() const {
  return _internal_has_curvestyle();
}
inline void BuildAttributesArchive::clear_curvestyle() {
  curvestyle_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::_internal_curvestyle() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesCurveStyle >(curvestyle_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::curvestyle() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.curveStyle)
  return _internal_curvestyle();
}
inline void BuildAttributesArchive::_internal_set_curvestyle(::KN::BuildAttributesArchive_BuildAttributesCurveStyle value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  curvestyle_ = value;
}
inline void BuildAttributesArchive::set_curvestyle(::KN::BuildAttributesArchive_BuildAttributesCurveStyle value) {
  _internal_set_curvestyle(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.curveStyle)
}

// optional double ChartRotation3D = 17;
inline bool BuildAttributesArchive::_internal_has_chartrotation3d() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_chartrotation3d() const {
  return _internal_has_chartrotation3d();
}
inline void BuildAttributesArchive::clear_chartrotation3d() {
  chartrotation3d_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double BuildAttributesArchive::_internal_chartrotation3d() const {
  return chartrotation3d_;
}
inline double BuildAttributesArchive::chartrotation3d() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.ChartRotation3D)
  return _internal_chartrotation3d();
}
inline void BuildAttributesArchive::_internal_set_chartrotation3d(double value) {
  _has_bits_[0] |= 0x00020000u;
  chartrotation3d_ = value;
}
inline void BuildAttributesArchive::set_chartrotation3d(double value) {
  _internal_set_chartrotation3d(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.ChartRotation3D)
}

// optional uint32 startOffset = 27;
inline bool BuildAttributesArchive::_internal_has_startoffset() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_startoffset() const {
  return _internal_has_startoffset();
}
inline void BuildAttributesArchive::clear_startoffset() {
  startoffset_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::_internal_startoffset() const {
  return startoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::startoffset() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.startOffset)
  return _internal_startoffset();
}
inline void BuildAttributesArchive::_internal_set_startoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  startoffset_ = value;
}
inline void BuildAttributesArchive::set_startoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_startoffset(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.startOffset)
}

// optional uint32 endOffset = 28;
inline bool BuildAttributesArchive::_internal_has_endoffset() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_endoffset() const {
  return _internal_has_endoffset();
}
inline void BuildAttributesArchive::clear_endoffset() {
  endoffset_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::_internal_endoffset() const {
  return endoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::endoffset() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.endOffset)
  return _internal_endoffset();
}
inline void BuildAttributesArchive::_internal_set_endoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  endoffset_ = value;
}
inline void BuildAttributesArchive::set_endoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endoffset(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.endOffset)
}

// optional double action_rotationAngle = 9;
inline bool BuildAttributesArchive::_internal_has_action_rotationangle() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_rotationangle() const {
  return _internal_has_action_rotationangle();
}
inline void BuildAttributesArchive::clear_action_rotationangle() {
  action_rotationangle_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double BuildAttributesArchive::_internal_action_rotationangle() const {
  return action_rotationangle_;
}
inline double BuildAttributesArchive::action_rotationangle() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_rotationAngle)
  return _internal_action_rotationangle();
}
inline void BuildAttributesArchive::_internal_set_action_rotationangle(double value) {
  _has_bits_[0] |= 0x00001000u;
  action_rotationangle_ = value;
}
inline void BuildAttributesArchive::set_action_rotationangle(double value) {
  _internal_set_action_rotationangle(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_rotationAngle)
}

// optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
inline bool BuildAttributesArchive::_internal_has_action_rotationdirection() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_rotationdirection() const {
  return _internal_has_action_rotationdirection();
}
inline void BuildAttributesArchive::clear_action_rotationdirection() {
  action_rotationdirection_ = 31;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::_internal_action_rotationdirection() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesRotationDirection >(action_rotationdirection_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::action_rotationdirection() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_rotationDirection)
  return _internal_action_rotationdirection();
}
inline void BuildAttributesArchive::_internal_set_action_rotationdirection(::KN::BuildAttributesArchive_BuildAttributesRotationDirection value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(value));
  _has_bits_[1] |= 0x00000004u;
  action_rotationdirection_ = value;
}
inline void BuildAttributesArchive::set_action_rotationdirection(::KN::BuildAttributesArchive_BuildAttributesRotationDirection value) {
  _internal_set_action_rotationdirection(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_rotationDirection)
}

// optional double action_scaleSize = 11;
inline bool BuildAttributesArchive::_internal_has_action_scalesize() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_scalesize() const {
  return _internal_has_action_scalesize();
}
inline void BuildAttributesArchive::clear_action_scalesize() {
  action_scalesize_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double BuildAttributesArchive::_internal_action_scalesize() const {
  return action_scalesize_;
}
inline double BuildAttributesArchive::action_scalesize() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_scaleSize)
  return _internal_action_scalesize();
}
inline void BuildAttributesArchive::_internal_set_action_scalesize(double value) {
  _has_bits_[0] |= 0x00002000u;
  action_scalesize_ = value;
}
inline void BuildAttributesArchive::set_action_scalesize(double value) {
  _internal_set_action_scalesize(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_scaleSize)
}

// optional double action_colorAlpha = 12;
inline bool BuildAttributesArchive::_internal_has_action_coloralpha() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_coloralpha() const {
  return _internal_has_action_coloralpha();
}
inline void BuildAttributesArchive::clear_action_coloralpha() {
  action_coloralpha_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double BuildAttributesArchive::_internal_action_coloralpha() const {
  return action_coloralpha_;
}
inline double BuildAttributesArchive::action_coloralpha() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_colorAlpha)
  return _internal_action_coloralpha();
}
inline void BuildAttributesArchive::_internal_set_action_coloralpha(double value) {
  _has_bits_[0] |= 0x00004000u;
  action_coloralpha_ = value;
}
inline void BuildAttributesArchive::set_action_coloralpha(double value) {
  _internal_set_action_coloralpha(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_colorAlpha)
}

// optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
inline bool BuildAttributesArchive::_internal_has_action_acceleration() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_acceleration() const {
  return _internal_has_action_acceleration();
}
inline void BuildAttributesArchive::clear_action_acceleration() {
  action_acceleration_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::_internal_action_acceleration() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesAcceleration >(action_acceleration_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::action_acceleration() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_acceleration)
  return _internal_action_acceleration();
}
inline void BuildAttributesArchive::_internal_set_action_acceleration(::KN::BuildAttributesArchive_BuildAttributesAcceleration value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesAcceleration_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  action_acceleration_ = value;
}
inline void BuildAttributesArchive::set_action_acceleration(::KN::BuildAttributesArchive_BuildAttributesAcceleration value) {
  _internal_set_action_acceleration(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_acceleration)
}

// optional .TSD.PathSourceArchive action_motionPathSource = 22;
inline bool BuildAttributesArchive::_internal_has_action_motionpathsource() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || action_motionpathsource_ != nullptr);
  return value;
}
inline bool BuildAttributesArchive::has_action_motionpathsource() const {
  return _internal_has_action_motionpathsource();
}
inline const ::TSD::PathSourceArchive& BuildAttributesArchive::_internal_action_motionpathsource() const {
  const ::TSD::PathSourceArchive* p = action_motionpathsource_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& BuildAttributesArchive::action_motionpathsource() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_motionPathSource)
  return _internal_action_motionpathsource();
}
inline void BuildAttributesArchive::unsafe_arena_set_allocated_action_motionpathsource(
    ::TSD::PathSourceArchive* action_motionpathsource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_motionpathsource_);
  }
  action_motionpathsource_ = action_motionpathsource;
  if (action_motionpathsource) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributesArchive.action_motionPathSource)
}
inline ::TSD::PathSourceArchive* BuildAttributesArchive::release_action_motionpathsource() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::PathSourceArchive* temp = action_motionpathsource_;
  action_motionpathsource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* BuildAttributesArchive::unsafe_arena_release_action_motionpathsource() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.action_motionPathSource)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::PathSourceArchive* temp = action_motionpathsource_;
  action_motionpathsource_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* BuildAttributesArchive::_internal_mutable_action_motionpathsource() {
  _has_bits_[0] |= 0x00000020u;
  if (action_motionpathsource_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    action_motionpathsource_ = p;
  }
  return action_motionpathsource_;
}
inline ::TSD::PathSourceArchive* BuildAttributesArchive::mutable_action_motionpathsource() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_action_motionpathsource();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.action_motionPathSource)
  return _msg;
}
inline void BuildAttributesArchive::set_allocated_action_motionpathsource(::TSD::PathSourceArchive* action_motionpathsource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_motionpathsource_);
  }
  if (action_motionpathsource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_motionpathsource));
    if (message_arena != submessage_arena) {
      action_motionpathsource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_motionpathsource, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  action_motionpathsource_ = action_motionpathsource;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.action_motionPathSource)
}

// optional bool custom_bounce = 19;
inline bool BuildAttributesArchive::_internal_has_custom_bounce() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_bounce() const {
  return _internal_has_custom_bounce();
}
inline void BuildAttributesArchive::clear_custom_bounce() {
  custom_bounce_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool BuildAttributesArchive::_internal_custom_bounce() const {
  return custom_bounce_;
}
inline bool BuildAttributesArchive::custom_bounce() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_bounce)
  return _internal_custom_bounce();
}
inline void BuildAttributesArchive::_internal_set_custom_bounce(bool value) {
  _has_bits_[0] |= 0x00400000u;
  custom_bounce_ = value;
}
inline void BuildAttributesArchive::set_custom_bounce(bool value) {
  _internal_set_custom_bounce(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_bounce)
}

// optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
inline bool BuildAttributesArchive::_internal_has_custom_textdelivery() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_textdelivery() const {
  return _internal_has_custom_textdelivery();
}
inline void BuildAttributesArchive::clear_custom_textdelivery() {
  custom_textdelivery_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::_internal_custom_textdelivery() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesTextDelivery >(custom_textdelivery_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::custom_textdelivery() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_textDelivery)
  return _internal_custom_textdelivery();
}
inline void BuildAttributesArchive::_internal_set_custom_textdelivery(::KN::BuildAttributesArchive_BuildAttributesTextDelivery value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  custom_textdelivery_ = value;
}
inline void BuildAttributesArchive::set_custom_textdelivery(::KN::BuildAttributesArchive_BuildAttributesTextDelivery value) {
  _internal_set_custom_textdelivery(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_textDelivery)
}

// optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
inline bool BuildAttributesArchive::_internal_has_custom_deliveryoption() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_deliveryoption() const {
  return _internal_has_custom_deliveryoption();
}
inline void BuildAttributesArchive::clear_custom_deliveryoption() {
  custom_deliveryoption_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::_internal_custom_deliveryoption() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption >(custom_deliveryoption_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::custom_deliveryoption() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_deliveryOption)
  return _internal_custom_deliveryoption();
}
inline void BuildAttributesArchive::_internal_set_custom_deliveryoption(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  custom_deliveryoption_ = value;
}
inline void BuildAttributesArchive::set_custom_deliveryoption(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption value) {
  _internal_set_custom_deliveryoption(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_deliveryOption)
}

// optional bool custom_action_decay = 23;
inline bool BuildAttributesArchive::_internal_has_custom_action_decay() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_action_decay() const {
  return _internal_has_custom_action_decay();
}
inline void BuildAttributesArchive::clear_custom_action_decay() {
  custom_action_decay_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool BuildAttributesArchive::_internal_custom_action_decay() const {
  return custom_action_decay_;
}
inline bool BuildAttributesArchive::custom_action_decay() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_action_decay)
  return _internal_custom_action_decay();
}
inline void BuildAttributesArchive::_internal_set_custom_action_decay(bool value) {
  _has_bits_[0] |= 0x00800000u;
  custom_action_decay_ = value;
}
inline void BuildAttributesArchive::set_custom_action_decay(bool value) {
  _internal_set_custom_action_decay(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_action_decay)
}

// optional uint32 custom_action_repeatCount = 24;
inline bool BuildAttributesArchive::_internal_has_custom_action_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_action_repeatcount() const {
  return _internal_has_custom_action_repeatcount();
}
inline void BuildAttributesArchive::clear_custom_action_repeatcount() {
  custom_action_repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::_internal_custom_action_repeatcount() const {
  return custom_action_repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::custom_action_repeatcount() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_action_repeatCount)
  return _internal_custom_action_repeatcount();
}
inline void BuildAttributesArchive::_internal_set_custom_action_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  custom_action_repeatcount_ = value;
}
inline void BuildAttributesArchive::set_custom_action_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_action_repeatcount(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_action_repeatCount)
}

// optional double custom_action_scale = 25;
inline bool BuildAttributesArchive::_internal_has_custom_action_scale() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_action_scale() const {
  return _internal_has_custom_action_scale();
}
inline void BuildAttributesArchive::clear_custom_action_scale() {
  custom_action_scale_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double BuildAttributesArchive::_internal_custom_action_scale() const {
  return custom_action_scale_;
}
inline double BuildAttributesArchive::custom_action_scale() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_action_scale)
  return _internal_custom_action_scale();
}
inline void BuildAttributesArchive::_internal_set_custom_action_scale(double value) {
  _has_bits_[0] |= 0x00100000u;
  custom_action_scale_ = value;
}
inline void BuildAttributesArchive::set_custom_action_scale(double value) {
  _internal_set_custom_action_scale(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_action_scale)
}

// optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
inline bool BuildAttributesArchive::_internal_has_custom_action_jiggleintensity() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_action_jiggleintensity() const {
  return _internal_has_custom_action_jiggleintensity();
}
inline void BuildAttributesArchive::clear_custom_action_jiggleintensity() {
  custom_action_jiggleintensity_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::_internal_custom_action_jiggleintensity() const {
  return static_cast< ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity >(custom_action_jiggleintensity_);
}
inline ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::custom_action_jiggleintensity() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_action_jiggleIntensity)
  return _internal_custom_action_jiggleintensity();
}
inline void BuildAttributesArchive::_internal_set_custom_action_jiggleintensity(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity value) {
  assert(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(value));
  _has_bits_[0] |= 0x04000000u;
  custom_action_jiggleintensity_ = value;
}
inline void BuildAttributesArchive::set_custom_action_jiggleintensity(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity value) {
  _internal_set_custom_action_jiggleintensity(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_action_jiggleIntensity)
}

// optional bool custom_motion_blur = 29;
inline bool BuildAttributesArchive::_internal_has_custom_motion_blur() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_motion_blur() const {
  return _internal_has_custom_motion_blur();
}
inline void BuildAttributesArchive::clear_custom_motion_blur() {
  custom_motion_blur_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool BuildAttributesArchive::_internal_custom_motion_blur() const {
  return custom_motion_blur_;
}
inline bool BuildAttributesArchive::custom_motion_blur() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_motion_blur)
  return _internal_custom_motion_blur();
}
inline void BuildAttributesArchive::_internal_set_custom_motion_blur(bool value) {
  _has_bits_[0] |= 0x01000000u;
  custom_motion_blur_ = value;
}
inline void BuildAttributesArchive::set_custom_motion_blur(bool value) {
  _internal_set_custom_motion_blur(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_motion_blur)
}

// optional bool custom_include_endpoints = 30;
inline bool BuildAttributesArchive::_internal_has_custom_include_endpoints() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_include_endpoints() const {
  return _internal_has_custom_include_endpoints();
}
inline void BuildAttributesArchive::clear_custom_include_endpoints() {
  custom_include_endpoints_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool BuildAttributesArchive::_internal_custom_include_endpoints() const {
  return custom_include_endpoints_;
}
inline bool BuildAttributesArchive::custom_include_endpoints() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_include_endpoints)
  return _internal_custom_include_endpoints();
}
inline void BuildAttributesArchive::_internal_set_custom_include_endpoints(bool value) {
  _has_bits_[0] |= 0x02000000u;
  custom_include_endpoints_ = value;
}
inline void BuildAttributesArchive::set_custom_include_endpoints(bool value) {
  _internal_set_custom_include_endpoints(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_include_endpoints)
}

// optional bool custom_shine = 33;
inline bool BuildAttributesArchive::_internal_has_custom_shine() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_shine() const {
  return _internal_has_custom_shine();
}
inline void BuildAttributesArchive::clear_custom_shine() {
  custom_shine_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool BuildAttributesArchive::_internal_custom_shine() const {
  return custom_shine_;
}
inline bool BuildAttributesArchive::custom_shine() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_shine)
  return _internal_custom_shine();
}
inline void BuildAttributesArchive::_internal_set_custom_shine(bool value) {
  _has_bits_[0] |= 0x20000000u;
  custom_shine_ = value;
}
inline void BuildAttributesArchive::set_custom_shine(bool value) {
  _internal_set_custom_shine(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_shine)
}

// optional double custom_scale_amount = 34;
inline bool BuildAttributesArchive::_internal_has_custom_scale_amount() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_scale_amount() const {
  return _internal_has_custom_scale_amount();
}
inline void BuildAttributesArchive::clear_custom_scale_amount() {
  custom_scale_amount_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline double BuildAttributesArchive::_internal_custom_scale_amount() const {
  return custom_scale_amount_;
}
inline double BuildAttributesArchive::custom_scale_amount() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_scale_amount)
  return _internal_custom_scale_amount();
}
inline void BuildAttributesArchive::_internal_set_custom_scale_amount(double value) {
  _has_bits_[1] |= 0x00000001u;
  custom_scale_amount_ = value;
}
inline void BuildAttributesArchive::set_custom_scale_amount(double value) {
  _internal_set_custom_scale_amount(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_scale_amount)
}

// optional double custom_travel_distance = 35;
inline bool BuildAttributesArchive::_internal_has_custom_travel_distance() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_travel_distance() const {
  return _internal_has_custom_travel_distance();
}
inline void BuildAttributesArchive::clear_custom_travel_distance() {
  custom_travel_distance_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline double BuildAttributesArchive::_internal_custom_travel_distance() const {
  return custom_travel_distance_;
}
inline double BuildAttributesArchive::custom_travel_distance() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_travel_distance)
  return _internal_custom_travel_distance();
}
inline void BuildAttributesArchive::_internal_set_custom_travel_distance(double value) {
  _has_bits_[1] |= 0x00000002u;
  custom_travel_distance_ = value;
}
inline void BuildAttributesArchive::set_custom_travel_distance(double value) {
  _internal_set_custom_travel_distance(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_travel_distance)
}

// optional bool custom_cursor = 36;
inline bool BuildAttributesArchive::_internal_has_custom_cursor() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_cursor() const {
  return _internal_has_custom_cursor();
}
inline void BuildAttributesArchive::clear_custom_cursor() {
  custom_cursor_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool BuildAttributesArchive::_internal_custom_cursor() const {
  return custom_cursor_;
}
inline bool BuildAttributesArchive::custom_cursor() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_cursor)
  return _internal_custom_cursor();
}
inline void BuildAttributesArchive::_internal_set_custom_cursor(bool value) {
  _has_bits_[0] |= 0x40000000u;
  custom_cursor_ = value;
}
inline void BuildAttributesArchive::set_custom_cursor(bool value) {
  _internal_set_custom_cursor(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_cursor)
}

// optional bool custom_align_to_path = 37;
inline bool BuildAttributesArchive::_internal_has_custom_align_to_path() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_align_to_path() const {
  return _internal_has_custom_align_to_path();
}
inline void BuildAttributesArchive::clear_custom_align_to_path() {
  custom_align_to_path_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool BuildAttributesArchive::_internal_custom_align_to_path() const {
  return custom_align_to_path_;
}
inline bool BuildAttributesArchive::custom_align_to_path() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_align_to_path)
  return _internal_custom_align_to_path();
}
inline void BuildAttributesArchive::_internal_set_custom_align_to_path(bool value) {
  _has_bits_[0] |= 0x80000000u;
  custom_align_to_path_ = value;
}
inline void BuildAttributesArchive::set_custom_align_to_path(bool value) {
  _internal_set_custom_align_to_path(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_align_to_path)
}

// optional string database_animationType = 1 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_database_animationtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_animationtype() const {
  return _internal_has_database_animationtype();
}
inline void BuildAttributesArchive::clear_database_animationtype() {
  database_animationtype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuildAttributesArchive::database_animationtype() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_animationType)
  return _internal_database_animationtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildAttributesArchive::set_database_animationtype(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 database_animationtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_animationType)
}
inline std::string* BuildAttributesArchive::mutable_database_animationtype() {
  std::string* _s = _internal_mutable_database_animationtype();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.database_animationType)
  return _s;
}
inline const std::string& BuildAttributesArchive::_internal_database_animationtype() const {
  return database_animationtype_.Get();
}
inline void BuildAttributesArchive::_internal_set_database_animationtype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  database_animationtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::_internal_mutable_database_animationtype() {
  _has_bits_[0] |= 0x00000001u;
  return database_animationtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::release_database_animationtype() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.database_animationType)
  if (!_internal_has_database_animationtype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return database_animationtype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BuildAttributesArchive::set_allocated_database_animationtype(std::string* database_animationtype) {
  if (database_animationtype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  database_animationtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_animationtype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.database_animationType)
}

// optional string database_effect = 2 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_database_effect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_effect() const {
  return _internal_has_database_effect();
}
inline void BuildAttributesArchive::clear_database_effect() {
  database_effect_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BuildAttributesArchive::database_effect() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_effect)
  return _internal_database_effect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildAttributesArchive::set_database_effect(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 database_effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_effect)
}
inline std::string* BuildAttributesArchive::mutable_database_effect() {
  std::string* _s = _internal_mutable_database_effect();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.database_effect)
  return _s;
}
inline const std::string& BuildAttributesArchive::_internal_database_effect() const {
  return database_effect_.Get();
}
inline void BuildAttributesArchive::_internal_set_database_effect(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  database_effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::_internal_mutable_database_effect() {
  _has_bits_[0] |= 0x00000002u;
  return database_effect_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::release_database_effect() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.database_effect)
  if (!_internal_has_database_effect()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return database_effect_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BuildAttributesArchive::set_allocated_database_effect(std::string* database_effect) {
  if (database_effect != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  database_effect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_effect,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.database_effect)
}

// optional uint32 database_direction = 3 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_database_direction() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_direction() const {
  return _internal_has_database_direction();
}
inline void BuildAttributesArchive::clear_database_direction() {
  database_direction_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::_internal_database_direction() const {
  return database_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BuildAttributesArchive::database_direction() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_direction)
  return _internal_database_direction();
}
inline void BuildAttributesArchive::_internal_set_database_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  database_direction_ = value;
}
inline void BuildAttributesArchive::set_database_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_database_direction(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_direction)
}

// optional double database_delay = 5 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_database_delay() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_delay() const {
  return _internal_has_database_delay();
}
inline void BuildAttributesArchive::clear_database_delay() {
  database_delay_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double BuildAttributesArchive::_internal_database_delay() const {
  return database_delay_;
}
inline double BuildAttributesArchive::database_delay() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_delay)
  return _internal_database_delay();
}
inline void BuildAttributesArchive::_internal_set_database_delay(double value) {
  _has_bits_[0] |= 0x00000100u;
  database_delay_ = value;
}
inline void BuildAttributesArchive::set_database_delay(double value) {
  _internal_set_database_delay(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_delay)
}

// optional double database_duration = 8 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_database_duration() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_duration() const {
  return _internal_has_database_duration();
}
inline void BuildAttributesArchive::clear_database_duration() {
  database_duration_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double BuildAttributesArchive::_internal_database_duration() const {
  return database_duration_;
}
inline double BuildAttributesArchive::database_duration() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_duration)
  return _internal_database_duration();
}
inline void BuildAttributesArchive::_internal_set_database_duration(double value) {
  _has_bits_[0] |= 0x00000800u;
  database_duration_ = value;
}
inline void BuildAttributesArchive::set_database_duration(double value) {
  _internal_set_database_duration(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_duration)
}

// optional .TSP.Color database_color = 16 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_database_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || database_color_ != nullptr);
  return value;
}
inline bool BuildAttributesArchive::has_database_color() const {
  return _internal_has_database_color();
}
inline const ::TSP::Color& BuildAttributesArchive::_internal_database_color() const {
  const ::TSP::Color* p = database_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& BuildAttributesArchive::database_color() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_color)
  return _internal_database_color();
}
inline void BuildAttributesArchive::unsafe_arena_set_allocated_database_color(
    ::TSP::Color* database_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_color_);
  }
  database_color_ = database_color;
  if (database_color) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributesArchive.database_color)
}
inline ::TSP::Color* BuildAttributesArchive::release_database_color() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = database_color_;
  database_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* BuildAttributesArchive::unsafe_arena_release_database_color() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.database_color)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = database_color_;
  database_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* BuildAttributesArchive::_internal_mutable_database_color() {
  _has_bits_[0] |= 0x00000008u;
  if (database_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    database_color_ = p;
  }
  return database_color_;
}
inline ::TSP::Color* BuildAttributesArchive::mutable_database_color() {
  ::TSP::Color* _msg = _internal_mutable_database_color();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.database_color)
  return _msg;
}
inline void BuildAttributesArchive::set_allocated_database_color(::TSP::Color* database_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_color_);
  }
  if (database_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_color));
    if (message_arena != submessage_arena) {
      database_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  database_color_ = database_color;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.database_color)
}

// optional string motionPathString = 15 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_motionpathstring() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_motionpathstring() const {
  return _internal_has_motionpathstring();
}
inline void BuildAttributesArchive::clear_motionpathstring() {
  motionpathstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BuildAttributesArchive::motionpathstring() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.motionPathString)
  return _internal_motionpathstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildAttributesArchive::set_motionpathstring(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 motionpathstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.motionPathString)
}
inline std::string* BuildAttributesArchive::mutable_motionpathstring() {
  std::string* _s = _internal_mutable_motionpathstring();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.motionPathString)
  return _s;
}
inline const std::string& BuildAttributesArchive::_internal_motionpathstring() const {
  return motionpathstring_.Get();
}
inline void BuildAttributesArchive::_internal_set_motionpathstring(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  motionpathstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::_internal_mutable_motionpathstring() {
  _has_bits_[0] |= 0x00000004u;
  return motionpathstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::release_motionpathstring() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.motionPathString)
  if (!_internal_has_motionpathstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return motionpathstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BuildAttributesArchive::set_allocated_motionpathstring(std::string* motionpathstring) {
  if (motionpathstring != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  motionpathstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), motionpathstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.motionPathString)
}

// -------------------------------------------------------------------

// BuildArchive

// optional .TSP.Reference drawable = 1;
inline bool BuildArchive::_internal_has_drawable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || drawable_ != nullptr);
  return value;
}
inline bool BuildArchive::has_drawable() const {
  return _internal_has_drawable();
}
inline const ::TSP::Reference& BuildArchive::_internal_drawable() const {
  const ::TSP::Reference* p = drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& BuildArchive::drawable() const {
  // @@protoc_insertion_point(field_get:KN.BuildArchive.drawable)
  return _internal_drawable();
}
inline void BuildArchive::unsafe_arena_set_allocated_drawable(
    ::TSP::Reference* drawable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  drawable_ = drawable;
  if (drawable) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildArchive.drawable)
}
inline ::TSP::Reference* BuildArchive::release_drawable() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* BuildArchive::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:KN.BuildArchive.drawable)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* BuildArchive::_internal_mutable_drawable() {
  _has_bits_[0] |= 0x00000002u;
  if (drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    drawable_ = p;
  }
  return drawable_;
}
inline ::TSP::Reference* BuildArchive::mutable_drawable() {
  ::TSP::Reference* _msg = _internal_mutable_drawable();
  // @@protoc_insertion_point(field_mutable:KN.BuildArchive.drawable)
  return _msg;
}
inline void BuildArchive::set_allocated_drawable(::TSP::Reference* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable));
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildArchive.drawable)
}

// required string delivery = 2;
inline bool BuildArchive::_internal_has_delivery() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuildArchive::has_delivery() const {
  return _internal_has_delivery();
}
inline void BuildArchive::clear_delivery() {
  delivery_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuildArchive::delivery() const {
  // @@protoc_insertion_point(field_get:KN.BuildArchive.delivery)
  return _internal_delivery();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildArchive::set_delivery(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 delivery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildArchive.delivery)
}
inline std::string* BuildArchive::mutable_delivery() {
  std::string* _s = _internal_mutable_delivery();
  // @@protoc_insertion_point(field_mutable:KN.BuildArchive.delivery)
  return _s;
}
inline const std::string& BuildArchive::_internal_delivery() const {
  return delivery_.Get();
}
inline void BuildArchive::_internal_set_delivery(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  delivery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BuildArchive::_internal_mutable_delivery() {
  _has_bits_[0] |= 0x00000001u;
  return delivery_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BuildArchive::release_delivery() {
  // @@protoc_insertion_point(field_release:KN.BuildArchive.delivery)
  if (!_internal_has_delivery()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return delivery_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BuildArchive::set_allocated_delivery(std::string* delivery) {
  if (delivery != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  delivery_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delivery,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.BuildArchive.delivery)
}

// optional double duration = 3 [deprecated = true];
inline bool BuildArchive::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuildArchive::has_duration() const {
  return _internal_has_duration();
}
inline void BuildArchive::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double BuildArchive::_internal_duration() const {
  return duration_;
}
inline double BuildArchive::duration() const {
  // @@protoc_insertion_point(field_get:KN.BuildArchive.duration)
  return _internal_duration();
}
inline void BuildArchive::_internal_set_duration(double value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ = value;
}
inline void BuildArchive::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KN.BuildArchive.duration)
}

// required .KN.BuildAttributesArchive attributes = 4;
inline bool BuildArchive::_internal_has_attributes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || attributes_ != nullptr);
  return value;
}
inline bool BuildArchive::has_attributes() const {
  return _internal_has_attributes();
}
inline void BuildArchive::clear_attributes() {
  if (attributes_ != nullptr) attributes_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KN::BuildAttributesArchive& BuildArchive::_internal_attributes() const {
  const ::KN::BuildAttributesArchive* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildAttributesArchive&>(
      ::KN::_BuildAttributesArchive_default_instance_);
}
inline const ::KN::BuildAttributesArchive& BuildArchive::attributes() const {
  // @@protoc_insertion_point(field_get:KN.BuildArchive.attributes)
  return _internal_attributes();
}
inline void BuildArchive::unsafe_arena_set_allocated_attributes(
    ::KN::BuildAttributesArchive* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildArchive.attributes)
}
inline ::KN::BuildAttributesArchive* BuildArchive::release_attributes() {
  _has_bits_[0] &= ~0x00000004u;
  ::KN::BuildAttributesArchive* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildAttributesArchive* BuildArchive::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:KN.BuildArchive.attributes)
  _has_bits_[0] &= ~0x00000004u;
  ::KN::BuildAttributesArchive* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::KN::BuildAttributesArchive* BuildArchive::_internal_mutable_attributes() {
  _has_bits_[0] |= 0x00000004u;
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildAttributesArchive>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::KN::BuildAttributesArchive* BuildArchive::mutable_attributes() {
  ::KN::BuildAttributesArchive* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:KN.BuildArchive.attributes)
  return _msg;
}
inline void BuildArchive::set_allocated_attributes(::KN::BuildAttributesArchive* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::BuildAttributesArchive>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildArchive.attributes)
}

// optional int32 chunk_id_seed = 5;
inline bool BuildArchive::_internal_has_chunk_id_seed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BuildArchive::has_chunk_id_seed() const {
  return _internal_has_chunk_id_seed();
}
inline void BuildArchive::clear_chunk_id_seed() {
  chunk_id_seed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildArchive::_internal_chunk_id_seed() const {
  return chunk_id_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildArchive::chunk_id_seed() const {
  // @@protoc_insertion_point(field_get:KN.BuildArchive.chunk_id_seed)
  return _internal_chunk_id_seed();
}
inline void BuildArchive::_internal_set_chunk_id_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  chunk_id_seed_ = value;
}
inline void BuildArchive::set_chunk_id_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chunk_id_seed(value);
  // @@protoc_insertion_point(field_set:KN.BuildArchive.chunk_id_seed)
}

// -------------------------------------------------------------------

// PlaceholderArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool PlaceholderArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PlaceholderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::_internal_super() const {
  const ::TSWP::ShapeInfoArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeInfoArchive&>(
      ::TSWP::_ShapeInfoArchive_default_instance_);
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.PlaceholderArchive.super)
  return _internal_super();
}
inline void PlaceholderArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ShapeInfoArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.PlaceholderArchive.super)
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.PlaceholderArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeInfoArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::mutable_super() {
  ::TSWP::ShapeInfoArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.PlaceholderArchive.super)
  return _msg;
}
inline void PlaceholderArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.PlaceholderArchive.super)
}

// optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
inline bool PlaceholderArchive::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlaceholderArchive::has_kind() const {
  return _internal_has_kind();
}
inline void PlaceholderArchive::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::KN::PlaceholderArchive_Kind PlaceholderArchive::_internal_kind() const {
  return static_cast< ::KN::PlaceholderArchive_Kind >(kind_);
}
inline ::KN::PlaceholderArchive_Kind PlaceholderArchive::kind() const {
  // @@protoc_insertion_point(field_get:KN.PlaceholderArchive.kind)
  return _internal_kind();
}
inline void PlaceholderArchive::_internal_set_kind(::KN::PlaceholderArchive_Kind value) {
  assert(::KN::PlaceholderArchive_Kind_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  kind_ = value;
}
inline void PlaceholderArchive::set_kind(::KN::PlaceholderArchive_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:KN.PlaceholderArchive.kind)
}

// -------------------------------------------------------------------

// NoteArchive

// required .TSP.Reference containedStorage = 1;
inline bool NoteArchive::_internal_has_containedstorage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || containedstorage_ != nullptr);
  return value;
}
inline bool NoteArchive::has_containedstorage() const {
  return _internal_has_containedstorage();
}
inline const ::TSP::Reference& NoteArchive::_internal_containedstorage() const {
  const ::TSP::Reference* p = containedstorage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& NoteArchive::containedstorage() const {
  // @@protoc_insertion_point(field_get:KN.NoteArchive.containedStorage)
  return _internal_containedstorage();
}
inline void NoteArchive::unsafe_arena_set_allocated_containedstorage(
    ::TSP::Reference* containedstorage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(containedstorage_);
  }
  containedstorage_ = containedstorage;
  if (containedstorage) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.NoteArchive.containedStorage)
}
inline ::TSP::Reference* NoteArchive::release_containedstorage() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = containedstorage_;
  containedstorage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* NoteArchive::unsafe_arena_release_containedstorage() {
  // @@protoc_insertion_point(field_release:KN.NoteArchive.containedStorage)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = containedstorage_;
  containedstorage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* NoteArchive::_internal_mutable_containedstorage() {
  _has_bits_[0] |= 0x00000001u;
  if (containedstorage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    containedstorage_ = p;
  }
  return containedstorage_;
}
inline ::TSP::Reference* NoteArchive::mutable_containedstorage() {
  ::TSP::Reference* _msg = _internal_mutable_containedstorage();
  // @@protoc_insertion_point(field_mutable:KN.NoteArchive.containedStorage)
  return _msg;
}
inline void NoteArchive::set_allocated_containedstorage(::TSP::Reference* containedstorage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(containedstorage_);
  }
  if (containedstorage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(containedstorage));
    if (message_arena != submessage_arena) {
      containedstorage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, containedstorage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  containedstorage_ = containedstorage;
  // @@protoc_insertion_point(field_set_allocated:KN.NoteArchive.containedStorage)
}

// -------------------------------------------------------------------

// ClassicStylesheetRecordArchive

// repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
inline int ClassicStylesheetRecordArchive::_internal_identifier_to_style_map_size() const {
  return identifier_to_style_map_.size();
}
inline int ClassicStylesheetRecordArchive::identifier_to_style_map_size() const {
  return _internal_identifier_to_style_map_size();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* ClassicStylesheetRecordArchive::mutable_identifier_to_style_map(int index) {
  // @@protoc_insertion_point(field_mutable:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return identifier_to_style_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
ClassicStylesheetRecordArchive::mutable_identifier_to_style_map() {
  // @@protoc_insertion_point(field_mutable_list:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return &identifier_to_style_map_;
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& ClassicStylesheetRecordArchive::_internal_identifier_to_style_map(int index) const {
  return identifier_to_style_map_.Get(index);
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& ClassicStylesheetRecordArchive::identifier_to_style_map(int index) const {
  // @@protoc_insertion_point(field_get:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return _internal_identifier_to_style_map(index);
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* ClassicStylesheetRecordArchive::_internal_add_identifier_to_style_map() {
  return identifier_to_style_map_.Add();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* ClassicStylesheetRecordArchive::add_identifier_to_style_map() {
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* _add = _internal_add_identifier_to_style_map();
  // @@protoc_insertion_point(field_add:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
ClassicStylesheetRecordArchive::identifier_to_style_map() const {
  // @@protoc_insertion_point(field_list:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return identifier_to_style_map_;
}

// optional .TSP.Reference deprecated_theme = 2 [deprecated = true];
inline bool ClassicStylesheetRecordArchive::_internal_has_deprecated_theme() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_theme_ != nullptr);
  return value;
}
inline bool ClassicStylesheetRecordArchive::has_deprecated_theme() const {
  return _internal_has_deprecated_theme();
}
inline const ::TSP::Reference& ClassicStylesheetRecordArchive::_internal_deprecated_theme() const {
  const ::TSP::Reference* p = deprecated_theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ClassicStylesheetRecordArchive::deprecated_theme() const {
  // @@protoc_insertion_point(field_get:KN.ClassicStylesheetRecordArchive.deprecated_theme)
  return _internal_deprecated_theme();
}
inline void ClassicStylesheetRecordArchive::unsafe_arena_set_allocated_deprecated_theme(
    ::TSP::Reference* deprecated_theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_theme_);
  }
  deprecated_theme_ = deprecated_theme;
  if (deprecated_theme) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ClassicStylesheetRecordArchive.deprecated_theme)
}
inline ::TSP::Reference* ClassicStylesheetRecordArchive::release_deprecated_theme() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = deprecated_theme_;
  deprecated_theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ClassicStylesheetRecordArchive::unsafe_arena_release_deprecated_theme() {
  // @@protoc_insertion_point(field_release:KN.ClassicStylesheetRecordArchive.deprecated_theme)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = deprecated_theme_;
  deprecated_theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ClassicStylesheetRecordArchive::_internal_mutable_deprecated_theme() {
  _has_bits_[0] |= 0x00000001u;
  if (deprecated_theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    deprecated_theme_ = p;
  }
  return deprecated_theme_;
}
inline ::TSP::Reference* ClassicStylesheetRecordArchive::mutable_deprecated_theme() {
  ::TSP::Reference* _msg = _internal_mutable_deprecated_theme();
  // @@protoc_insertion_point(field_mutable:KN.ClassicStylesheetRecordArchive.deprecated_theme)
  return _msg;
}
inline void ClassicStylesheetRecordArchive::set_allocated_deprecated_theme(::TSP::Reference* deprecated_theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_theme_);
  }
  if (deprecated_theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_theme));
    if (message_arena != submessage_arena) {
      deprecated_theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deprecated_theme_ = deprecated_theme;
  // @@protoc_insertion_point(field_set_allocated:KN.ClassicStylesheetRecordArchive.deprecated_theme)
}

// -------------------------------------------------------------------

// ClassicThemeRecordArchive

// optional string uuid = 1;
inline bool ClassicThemeRecordArchive::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClassicThemeRecordArchive::has_uuid() const {
  return _internal_has_uuid();
}
inline void ClassicThemeRecordArchive::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClassicThemeRecordArchive::uuid() const {
  // @@protoc_insertion_point(field_get:KN.ClassicThemeRecordArchive.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClassicThemeRecordArchive::set_uuid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.ClassicThemeRecordArchive.uuid)
}
inline std::string* ClassicThemeRecordArchive::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:KN.ClassicThemeRecordArchive.uuid)
  return _s;
}
inline const std::string& ClassicThemeRecordArchive::_internal_uuid() const {
  return uuid_.Get();
}
inline void ClassicThemeRecordArchive::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClassicThemeRecordArchive::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClassicThemeRecordArchive::release_uuid() {
  // @@protoc_insertion_point(field_release:KN.ClassicThemeRecordArchive.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClassicThemeRecordArchive::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.ClassicThemeRecordArchive.uuid)
}

// optional .TSP.Reference stylesheetRecord = 2;
inline bool ClassicThemeRecordArchive::_internal_has_stylesheetrecord() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stylesheetrecord_ != nullptr);
  return value;
}
inline bool ClassicThemeRecordArchive::has_stylesheetrecord() const {
  return _internal_has_stylesheetrecord();
}
inline const ::TSP::Reference& ClassicThemeRecordArchive::_internal_stylesheetrecord() const {
  const ::TSP::Reference* p = stylesheetrecord_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ClassicThemeRecordArchive::stylesheetrecord() const {
  // @@protoc_insertion_point(field_get:KN.ClassicThemeRecordArchive.stylesheetRecord)
  return _internal_stylesheetrecord();
}
inline void ClassicThemeRecordArchive::unsafe_arena_set_allocated_stylesheetrecord(
    ::TSP::Reference* stylesheetrecord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheetrecord_);
  }
  stylesheetrecord_ = stylesheetrecord;
  if (stylesheetrecord) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ClassicThemeRecordArchive.stylesheetRecord)
}
inline ::TSP::Reference* ClassicThemeRecordArchive::release_stylesheetrecord() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = stylesheetrecord_;
  stylesheetrecord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ClassicThemeRecordArchive::unsafe_arena_release_stylesheetrecord() {
  // @@protoc_insertion_point(field_release:KN.ClassicThemeRecordArchive.stylesheetRecord)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = stylesheetrecord_;
  stylesheetrecord_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ClassicThemeRecordArchive::_internal_mutable_stylesheetrecord() {
  _has_bits_[0] |= 0x00000002u;
  if (stylesheetrecord_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    stylesheetrecord_ = p;
  }
  return stylesheetrecord_;
}
inline ::TSP::Reference* ClassicThemeRecordArchive::mutable_stylesheetrecord() {
  ::TSP::Reference* _msg = _internal_mutable_stylesheetrecord();
  // @@protoc_insertion_point(field_mutable:KN.ClassicThemeRecordArchive.stylesheetRecord)
  return _msg;
}
inline void ClassicThemeRecordArchive::set_allocated_stylesheetrecord(::TSP::Reference* stylesheetrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheetrecord_);
  }
  if (stylesheetrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheetrecord));
    if (message_arena != submessage_arena) {
      stylesheetrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheetrecord, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stylesheetrecord_ = stylesheetrecord;
  // @@protoc_insertion_point(field_set_allocated:KN.ClassicThemeRecordArchive.stylesheetRecord)
}

// repeated .TSP.Reference templates = 3;
inline int ClassicThemeRecordArchive::_internal_templates_size() const {
  return templates_.size();
}
inline int ClassicThemeRecordArchive::templates_size() const {
  return _internal_templates_size();
}
inline ::TSP::Reference* ClassicThemeRecordArchive::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:KN.ClassicThemeRecordArchive.templates)
  return templates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ClassicThemeRecordArchive::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:KN.ClassicThemeRecordArchive.templates)
  return &templates_;
}
inline const ::TSP::Reference& ClassicThemeRecordArchive::_internal_templates(int index) const {
  return templates_.Get(index);
}
inline const ::TSP::Reference& ClassicThemeRecordArchive::templates(int index) const {
  // @@protoc_insertion_point(field_get:KN.ClassicThemeRecordArchive.templates)
  return _internal_templates(index);
}
inline ::TSP::Reference* ClassicThemeRecordArchive::_internal_add_templates() {
  return templates_.Add();
}
inline ::TSP::Reference* ClassicThemeRecordArchive::add_templates() {
  ::TSP::Reference* _add = _internal_add_templates();
  // @@protoc_insertion_point(field_add:KN.ClassicThemeRecordArchive.templates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ClassicThemeRecordArchive::templates() const {
  // @@protoc_insertion_point(field_list:KN.ClassicThemeRecordArchive.templates)
  return templates_;
}

// -------------------------------------------------------------------

// SlideArchive_SageTagMapEntry

// required string tag = 1;
inline bool SlideArchive_SageTagMapEntry::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlideArchive_SageTagMapEntry::has_tag() const {
  return _internal_has_tag();
}
inline void SlideArchive_SageTagMapEntry::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SlideArchive_SageTagMapEntry::tag() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.SageTagMapEntry.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideArchive_SageTagMapEntry::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideArchive.SageTagMapEntry.tag)
}
inline std::string* SlideArchive_SageTagMapEntry::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.SageTagMapEntry.tag)
  return _s;
}
inline const std::string& SlideArchive_SageTagMapEntry::_internal_tag() const {
  return tag_.Get();
}
inline void SlideArchive_SageTagMapEntry::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlideArchive_SageTagMapEntry::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlideArchive_SageTagMapEntry::release_tag() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.SageTagMapEntry.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlideArchive_SageTagMapEntry::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.SageTagMapEntry.tag)
}

// required .TSP.Reference info = 2;
inline bool SlideArchive_SageTagMapEntry::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool SlideArchive_SageTagMapEntry::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& SlideArchive_SageTagMapEntry::_internal_info() const {
  const ::TSP::Reference* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive_SageTagMapEntry::info() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.SageTagMapEntry.info)
  return _internal_info();
}
inline void SlideArchive_SageTagMapEntry::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.SageTagMapEntry.info)
}
inline ::TSP::Reference* SlideArchive_SageTagMapEntry::release_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive_SageTagMapEntry::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.SageTagMapEntry.info)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive_SageTagMapEntry::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000002u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::TSP::Reference* SlideArchive_SageTagMapEntry::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.SageTagMapEntry.info)
  return _msg;
}
inline void SlideArchive_SageTagMapEntry::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.SageTagMapEntry.info)
}

// -------------------------------------------------------------------

// SlideArchive_InstructionalTextMap_InstructionalTextMapEntry

// optional .TSP.Reference info = 1;
inline bool SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_internal_info() const {
  const ::TSP::Reference* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::info() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.info)
  return _internal_info();
}
inline void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.info)
}
inline ::TSP::Reference* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::release_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.info)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000002u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::TSP::Reference* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.info)
  return _msg;
}
inline void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.info)
}

// required string instructional_text = 2;
inline bool SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_internal_has_instructional_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::has_instructional_text() const {
  return _internal_has_instructional_text();
}
inline void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::clear_instructional_text() {
  instructional_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::instructional_text() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.instructional_text)
  return _internal_instructional_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::set_instructional_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 instructional_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.instructional_text)
}
inline std::string* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::mutable_instructional_text() {
  std::string* _s = _internal_mutable_instructional_text();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.instructional_text)
  return _s;
}
inline const std::string& SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_internal_instructional_text() const {
  return instructional_text_.Get();
}
inline void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_internal_set_instructional_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  instructional_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_internal_mutable_instructional_text() {
  _has_bits_[0] |= 0x00000001u;
  return instructional_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::release_instructional_text() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.instructional_text)
  if (!_internal_has_instructional_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return instructional_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::set_allocated_instructional_text(std::string* instructional_text) {
  if (instructional_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  instructional_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instructional_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.instructional_text)
}

// -------------------------------------------------------------------

// SlideArchive_InstructionalTextMap

// repeated .KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry instructional_text_for_infos = 1;
inline int SlideArchive_InstructionalTextMap::_internal_instructional_text_for_infos_size() const {
  return instructional_text_for_infos_.size();
}
inline int SlideArchive_InstructionalTextMap::instructional_text_for_infos_size() const {
  return _internal_instructional_text_for_infos_size();
}
inline void SlideArchive_InstructionalTextMap::clear_instructional_text_for_infos() {
  instructional_text_for_infos_.Clear();
}
inline ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* SlideArchive_InstructionalTextMap::mutable_instructional_text_for_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.InstructionalTextMap.instructional_text_for_infos)
  return instructional_text_for_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry >*
SlideArchive_InstructionalTextMap::mutable_instructional_text_for_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.InstructionalTextMap.instructional_text_for_infos)
  return &instructional_text_for_infos_;
}
inline const ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& SlideArchive_InstructionalTextMap::_internal_instructional_text_for_infos(int index) const {
  return instructional_text_for_infos_.Get(index);
}
inline const ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& SlideArchive_InstructionalTextMap::instructional_text_for_infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.InstructionalTextMap.instructional_text_for_infos)
  return _internal_instructional_text_for_infos(index);
}
inline ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* SlideArchive_InstructionalTextMap::_internal_add_instructional_text_for_infos() {
  return instructional_text_for_infos_.Add();
}
inline ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* SlideArchive_InstructionalTextMap::add_instructional_text_for_infos() {
  ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* _add = _internal_add_instructional_text_for_infos();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.InstructionalTextMap.instructional_text_for_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry >&
SlideArchive_InstructionalTextMap::instructional_text_for_infos() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.InstructionalTextMap.instructional_text_for_infos)
  return instructional_text_for_infos_;
}

// -------------------------------------------------------------------

// SlideArchive

// required .TSP.Reference style = 1;
inline bool SlideArchive::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool SlideArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& SlideArchive::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::style() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.style)
  return _internal_style();
}
inline void SlideArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.style)
}
inline ::TSP::Reference* SlideArchive::release_style() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.style)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000008u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* SlideArchive::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.style)
  return _msg;
}
inline void SlideArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.style)
}

// repeated .TSP.Reference builds = 2;
inline int SlideArchive::_internal_builds_size() const {
  return builds_.size();
}
inline int SlideArchive::builds_size() const {
  return _internal_builds_size();
}
inline ::TSP::Reference* SlideArchive::mutable_builds(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.builds)
  return builds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_builds() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.builds)
  return &builds_;
}
inline const ::TSP::Reference& SlideArchive::_internal_builds(int index) const {
  return builds_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::builds(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.builds)
  return _internal_builds(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_builds() {
  return builds_.Add();
}
inline ::TSP::Reference* SlideArchive::add_builds() {
  ::TSP::Reference* _add = _internal_add_builds();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.builds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::builds() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.builds)
  return builds_;
}

// repeated .KN.BuildChunkArchive buildChunkArchives = 3 [deprecated = true];
inline int SlideArchive::_internal_buildchunkarchives_size() const {
  return buildchunkarchives_.size();
}
inline int SlideArchive::buildchunkarchives_size() const {
  return _internal_buildchunkarchives_size();
}
inline void SlideArchive::clear_buildchunkarchives() {
  buildchunkarchives_.Clear();
}
inline ::KN::BuildChunkArchive* SlideArchive::mutable_buildchunkarchives(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.buildChunkArchives)
  return buildchunkarchives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >*
SlideArchive::mutable_buildchunkarchives() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.buildChunkArchives)
  return &buildchunkarchives_;
}
inline const ::KN::BuildChunkArchive& SlideArchive::_internal_buildchunkarchives(int index) const {
  return buildchunkarchives_.Get(index);
}
inline const ::KN::BuildChunkArchive& SlideArchive::buildchunkarchives(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.buildChunkArchives)
  return _internal_buildchunkarchives(index);
}
inline ::KN::BuildChunkArchive* SlideArchive::_internal_add_buildchunkarchives() {
  return buildchunkarchives_.Add();
}
inline ::KN::BuildChunkArchive* SlideArchive::add_buildchunkarchives() {
  ::KN::BuildChunkArchive* _add = _internal_add_buildchunkarchives();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.buildChunkArchives)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >&
SlideArchive::buildchunkarchives() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.buildChunkArchives)
  return buildchunkarchives_;
}

// repeated .TSP.Reference buildChunks = 43;
inline int SlideArchive::_internal_buildchunks_size() const {
  return buildchunks_.size();
}
inline int SlideArchive::buildchunks_size() const {
  return _internal_buildchunks_size();
}
inline ::TSP::Reference* SlideArchive::mutable_buildchunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.buildChunks)
  return buildchunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_buildchunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.buildChunks)
  return &buildchunks_;
}
inline const ::TSP::Reference& SlideArchive::_internal_buildchunks(int index) const {
  return buildchunks_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::buildchunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.buildChunks)
  return _internal_buildchunks(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_buildchunks() {
  return buildchunks_.Add();
}
inline ::TSP::Reference* SlideArchive::add_buildchunks() {
  ::TSP::Reference* _add = _internal_add_buildchunks();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.buildChunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::buildchunks() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.buildChunks)
  return buildchunks_;
}

// required .KN.TransitionArchive transition = 4;
inline bool SlideArchive::_internal_has_transition() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || transition_ != nullptr);
  return value;
}
inline bool SlideArchive::has_transition() const {
  return _internal_has_transition();
}
inline void SlideArchive::clear_transition() {
  if (transition_ != nullptr) transition_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::TransitionArchive& SlideArchive::_internal_transition() const {
  const ::KN::TransitionArchive* p = transition_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::TransitionArchive&>(
      ::KN::_TransitionArchive_default_instance_);
}
inline const ::KN::TransitionArchive& SlideArchive::transition() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.transition)
  return _internal_transition();
}
inline void SlideArchive::unsafe_arena_set_allocated_transition(
    ::KN::TransitionArchive* transition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transition_);
  }
  transition_ = transition;
  if (transition) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.transition)
}
inline ::KN::TransitionArchive* SlideArchive::release_transition() {
  _has_bits_[0] &= ~0x00000010u;
  ::KN::TransitionArchive* temp = transition_;
  transition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::TransitionArchive* SlideArchive::unsafe_arena_release_transition() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.transition)
  _has_bits_[0] &= ~0x00000010u;
  ::KN::TransitionArchive* temp = transition_;
  transition_ = nullptr;
  return temp;
}
inline ::KN::TransitionArchive* SlideArchive::_internal_mutable_transition() {
  _has_bits_[0] |= 0x00000010u;
  if (transition_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::TransitionArchive>(GetArenaForAllocation());
    transition_ = p;
  }
  return transition_;
}
inline ::KN::TransitionArchive* SlideArchive::mutable_transition() {
  ::KN::TransitionArchive* _msg = _internal_mutable_transition();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.transition)
  return _msg;
}
inline void SlideArchive::set_allocated_transition(::KN::TransitionArchive* transition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transition_;
  }
  if (transition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::TransitionArchive>::GetOwningArena(transition);
    if (message_arena != submessage_arena) {
      transition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  transition_ = transition;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.transition)
}

// optional .TSP.Reference titlePlaceholder = 5;
inline bool SlideArchive::_internal_has_titleplaceholder() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || titleplaceholder_ != nullptr);
  return value;
}
inline bool SlideArchive::has_titleplaceholder() const {
  return _internal_has_titleplaceholder();
}
inline const ::TSP::Reference& SlideArchive::_internal_titleplaceholder() const {
  const ::TSP::Reference* p = titleplaceholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::titleplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titlePlaceholder)
  return _internal_titleplaceholder();
}
inline void SlideArchive::unsafe_arena_set_allocated_titleplaceholder(
    ::TSP::Reference* titleplaceholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(titleplaceholder_);
  }
  titleplaceholder_ = titleplaceholder;
  if (titleplaceholder) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.titlePlaceholder)
}
inline ::TSP::Reference* SlideArchive::release_titleplaceholder() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = titleplaceholder_;
  titleplaceholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_titleplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.titlePlaceholder)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = titleplaceholder_;
  titleplaceholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_titleplaceholder() {
  _has_bits_[0] |= 0x00000020u;
  if (titleplaceholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    titleplaceholder_ = p;
  }
  return titleplaceholder_;
}
inline ::TSP::Reference* SlideArchive::mutable_titleplaceholder() {
  ::TSP::Reference* _msg = _internal_mutable_titleplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.titlePlaceholder)
  return _msg;
}
inline void SlideArchive::set_allocated_titleplaceholder(::TSP::Reference* titleplaceholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(titleplaceholder_);
  }
  if (titleplaceholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(titleplaceholder));
    if (message_arena != submessage_arena) {
      titleplaceholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, titleplaceholder, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  titleplaceholder_ = titleplaceholder;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.titlePlaceholder)
}

// optional .TSP.Reference bodyPlaceholder = 6;
inline bool SlideArchive::_internal_has_bodyplaceholder() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || bodyplaceholder_ != nullptr);
  return value;
}
inline bool SlideArchive::has_bodyplaceholder() const {
  return _internal_has_bodyplaceholder();
}
inline const ::TSP::Reference& SlideArchive::_internal_bodyplaceholder() const {
  const ::TSP::Reference* p = bodyplaceholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::bodyplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyPlaceholder)
  return _internal_bodyplaceholder();
}
inline void SlideArchive::unsafe_arena_set_allocated_bodyplaceholder(
    ::TSP::Reference* bodyplaceholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyplaceholder_);
  }
  bodyplaceholder_ = bodyplaceholder;
  if (bodyplaceholder) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.bodyPlaceholder)
}
inline ::TSP::Reference* SlideArchive::release_bodyplaceholder() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = bodyplaceholder_;
  bodyplaceholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_bodyplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.bodyPlaceholder)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = bodyplaceholder_;
  bodyplaceholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_bodyplaceholder() {
  _has_bits_[0] |= 0x00000040u;
  if (bodyplaceholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    bodyplaceholder_ = p;
  }
  return bodyplaceholder_;
}
inline ::TSP::Reference* SlideArchive::mutable_bodyplaceholder() {
  ::TSP::Reference* _msg = _internal_mutable_bodyplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyPlaceholder)
  return _msg;
}
inline void SlideArchive::set_allocated_bodyplaceholder(::TSP::Reference* bodyplaceholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyplaceholder_);
  }
  if (bodyplaceholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyplaceholder));
    if (message_arena != submessage_arena) {
      bodyplaceholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodyplaceholder, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  bodyplaceholder_ = bodyplaceholder;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.bodyPlaceholder)
}

// optional .TSP.Reference objectPlaceholder = 30;
inline bool SlideArchive::_internal_has_objectplaceholder() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || objectplaceholder_ != nullptr);
  return value;
}
inline bool SlideArchive::has_objectplaceholder() const {
  return _internal_has_objectplaceholder();
}
inline const ::TSP::Reference& SlideArchive::_internal_objectplaceholder() const {
  const ::TSP::Reference* p = objectplaceholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::objectplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.objectPlaceholder)
  return _internal_objectplaceholder();
}
inline void SlideArchive::unsafe_arena_set_allocated_objectplaceholder(
    ::TSP::Reference* objectplaceholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectplaceholder_);
  }
  objectplaceholder_ = objectplaceholder;
  if (objectplaceholder) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.objectPlaceholder)
}
inline ::TSP::Reference* SlideArchive::release_objectplaceholder() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = objectplaceholder_;
  objectplaceholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_objectplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.objectPlaceholder)
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = objectplaceholder_;
  objectplaceholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_objectplaceholder() {
  _has_bits_[0] |= 0x00020000u;
  if (objectplaceholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    objectplaceholder_ = p;
  }
  return objectplaceholder_;
}
inline ::TSP::Reference* SlideArchive::mutable_objectplaceholder() {
  ::TSP::Reference* _msg = _internal_mutable_objectplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.objectPlaceholder)
  return _msg;
}
inline void SlideArchive::set_allocated_objectplaceholder(::TSP::Reference* objectplaceholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectplaceholder_);
  }
  if (objectplaceholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectplaceholder));
    if (message_arena != submessage_arena) {
      objectplaceholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectplaceholder, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  objectplaceholder_ = objectplaceholder;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.objectPlaceholder)
}

// optional .TSP.Reference slideNumberPlaceholder = 20;
inline bool SlideArchive::_internal_has_slidenumberplaceholder() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || slidenumberplaceholder_ != nullptr);
  return value;
}
inline bool SlideArchive::has_slidenumberplaceholder() const {
  return _internal_has_slidenumberplaceholder();
}
inline const ::TSP::Reference& SlideArchive::_internal_slidenumberplaceholder() const {
  const ::TSP::Reference* p = slidenumberplaceholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::slidenumberplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberPlaceholder)
  return _internal_slidenumberplaceholder();
}
inline void SlideArchive::unsafe_arena_set_allocated_slidenumberplaceholder(
    ::TSP::Reference* slidenumberplaceholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberplaceholder_);
  }
  slidenumberplaceholder_ = slidenumberplaceholder;
  if (slidenumberplaceholder) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.slideNumberPlaceholder)
}
inline ::TSP::Reference* SlideArchive::release_slidenumberplaceholder() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = slidenumberplaceholder_;
  slidenumberplaceholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_slidenumberplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.slideNumberPlaceholder)
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = slidenumberplaceholder_;
  slidenumberplaceholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_slidenumberplaceholder() {
  _has_bits_[0] |= 0x00000400u;
  if (slidenumberplaceholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    slidenumberplaceholder_ = p;
  }
  return slidenumberplaceholder_;
}
inline ::TSP::Reference* SlideArchive::mutable_slidenumberplaceholder() {
  ::TSP::Reference* _msg = _internal_mutable_slidenumberplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.slideNumberPlaceholder)
  return _msg;
}
inline void SlideArchive::set_allocated_slidenumberplaceholder(::TSP::Reference* slidenumberplaceholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberplaceholder_);
  }
  if (slidenumberplaceholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberplaceholder));
    if (message_arena != submessage_arena) {
      slidenumberplaceholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenumberplaceholder, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  slidenumberplaceholder_ = slidenumberplaceholder;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.slideNumberPlaceholder)
}

// repeated .TSP.Reference owned_drawables = 7;
inline int SlideArchive::_internal_owned_drawables_size() const {
  return owned_drawables_.size();
}
inline int SlideArchive::owned_drawables_size() const {
  return _internal_owned_drawables_size();
}
inline ::TSP::Reference* SlideArchive::mutable_owned_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.owned_drawables)
  return owned_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_owned_drawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.owned_drawables)
  return &owned_drawables_;
}
inline const ::TSP::Reference& SlideArchive::_internal_owned_drawables(int index) const {
  return owned_drawables_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::owned_drawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.owned_drawables)
  return _internal_owned_drawables(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_owned_drawables() {
  return owned_drawables_.Add();
}
inline ::TSP::Reference* SlideArchive::add_owned_drawables() {
  ::TSP::Reference* _add = _internal_add_owned_drawables();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.owned_drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::owned_drawables() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.owned_drawables)
  return owned_drawables_;
}

// repeated .TSP.Reference drawables_z_order = 42;
inline int SlideArchive::_internal_drawables_z_order_size() const {
  return drawables_z_order_.size();
}
inline int SlideArchive::drawables_z_order_size() const {
  return _internal_drawables_z_order_size();
}
inline ::TSP::Reference* SlideArchive::mutable_drawables_z_order(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.drawables_z_order)
  return drawables_z_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_drawables_z_order() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.drawables_z_order)
  return &drawables_z_order_;
}
inline const ::TSP::Reference& SlideArchive::_internal_drawables_z_order(int index) const {
  return drawables_z_order_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::drawables_z_order(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.drawables_z_order)
  return _internal_drawables_z_order(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_drawables_z_order() {
  return drawables_z_order_.Add();
}
inline ::TSP::Reference* SlideArchive::add_drawables_z_order() {
  ::TSP::Reference* _add = _internal_add_drawables_z_order();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.drawables_z_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::drawables_z_order() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.drawables_z_order)
  return drawables_z_order_;
}

// repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
inline int SlideArchive::_internal_sage_tag_to_info_map_size() const {
  return sage_tag_to_info_map_.size();
}
inline int SlideArchive::sage_tag_to_info_map_size() const {
  return _internal_sage_tag_to_info_map_size();
}
inline void SlideArchive::clear_sage_tag_to_info_map() {
  sage_tag_to_info_map_.Clear();
}
inline ::KN::SlideArchive_SageTagMapEntry* SlideArchive::mutable_sage_tag_to_info_map(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.sage_tag_to_info_map)
  return sage_tag_to_info_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry >*
SlideArchive::mutable_sage_tag_to_info_map() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.sage_tag_to_info_map)
  return &sage_tag_to_info_map_;
}
inline const ::KN::SlideArchive_SageTagMapEntry& SlideArchive::_internal_sage_tag_to_info_map(int index) const {
  return sage_tag_to_info_map_.Get(index);
}
inline const ::KN::SlideArchive_SageTagMapEntry& SlideArchive::sage_tag_to_info_map(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.sage_tag_to_info_map)
  return _internal_sage_tag_to_info_map(index);
}
inline ::KN::SlideArchive_SageTagMapEntry* SlideArchive::_internal_add_sage_tag_to_info_map() {
  return sage_tag_to_info_map_.Add();
}
inline ::KN::SlideArchive_SageTagMapEntry* SlideArchive::add_sage_tag_to_info_map() {
  ::KN::SlideArchive_SageTagMapEntry* _add = _internal_add_sage_tag_to_info_map();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.sage_tag_to_info_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry >&
SlideArchive::sage_tag_to_info_map() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.sage_tag_to_info_map)
  return sage_tag_to_info_map_;
}

// optional .KN.SlideArchive.InstructionalTextMap instructional_text_map = 45;
inline bool SlideArchive::_internal_has_instructional_text_map() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || instructional_text_map_ != nullptr);
  return value;
}
inline bool SlideArchive::has_instructional_text_map() const {
  return _internal_has_instructional_text_map();
}
inline void SlideArchive::clear_instructional_text_map() {
  if (instructional_text_map_ != nullptr) instructional_text_map_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::KN::SlideArchive_InstructionalTextMap& SlideArchive::_internal_instructional_text_map() const {
  const ::KN::SlideArchive_InstructionalTextMap* p = instructional_text_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::SlideArchive_InstructionalTextMap&>(
      ::KN::_SlideArchive_InstructionalTextMap_default_instance_);
}
inline const ::KN::SlideArchive_InstructionalTextMap& SlideArchive::instructional_text_map() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.instructional_text_map)
  return _internal_instructional_text_map();
}
inline void SlideArchive::unsafe_arena_set_allocated_instructional_text_map(
    ::KN::SlideArchive_InstructionalTextMap* instructional_text_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instructional_text_map_);
  }
  instructional_text_map_ = instructional_text_map;
  if (instructional_text_map) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.instructional_text_map)
}
inline ::KN::SlideArchive_InstructionalTextMap* SlideArchive::release_instructional_text_map() {
  _has_bits_[0] &= ~0x00100000u;
  ::KN::SlideArchive_InstructionalTextMap* temp = instructional_text_map_;
  instructional_text_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::SlideArchive_InstructionalTextMap* SlideArchive::unsafe_arena_release_instructional_text_map() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.instructional_text_map)
  _has_bits_[0] &= ~0x00100000u;
  ::KN::SlideArchive_InstructionalTextMap* temp = instructional_text_map_;
  instructional_text_map_ = nullptr;
  return temp;
}
inline ::KN::SlideArchive_InstructionalTextMap* SlideArchive::_internal_mutable_instructional_text_map() {
  _has_bits_[0] |= 0x00100000u;
  if (instructional_text_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::SlideArchive_InstructionalTextMap>(GetArenaForAllocation());
    instructional_text_map_ = p;
  }
  return instructional_text_map_;
}
inline ::KN::SlideArchive_InstructionalTextMap* SlideArchive::mutable_instructional_text_map() {
  ::KN::SlideArchive_InstructionalTextMap* _msg = _internal_mutable_instructional_text_map();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.instructional_text_map)
  return _msg;
}
inline void SlideArchive::set_allocated_instructional_text_map(::KN::SlideArchive_InstructionalTextMap* instructional_text_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete instructional_text_map_;
  }
  if (instructional_text_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::SlideArchive_InstructionalTextMap>::GetOwningArena(instructional_text_map);
    if (message_arena != submessage_arena) {
      instructional_text_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instructional_text_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  instructional_text_map_ = instructional_text_map;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.instructional_text_map)
}

// optional string name = 10;
inline bool SlideArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlideArchive::has_name() const {
  return _internal_has_name();
}
inline void SlideArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SlideArchive::name() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideArchive.name)
}
inline std::string* SlideArchive::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.name)
  return _s;
}
inline const std::string& SlideArchive::_internal_name() const {
  return name_.Get();
}
inline void SlideArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlideArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlideArchive::release_name() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlideArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.name)
}

// optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
inline bool SlideArchive::_internal_has_titleplaceholdergeometry() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || titleplaceholdergeometry_ != nullptr);
  return value;
}
inline bool SlideArchive::has_titleplaceholdergeometry() const {
  return _internal_has_titleplaceholdergeometry();
}
inline const ::TSD::GeometryArchive& SlideArchive::_internal_titleplaceholdergeometry() const {
  const ::TSD::GeometryArchive* p = titleplaceholdergeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& SlideArchive::titleplaceholdergeometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titlePlaceholderGeometry)
  return _internal_titleplaceholdergeometry();
}
inline void SlideArchive::unsafe_arena_set_allocated_titleplaceholdergeometry(
    ::TSD::GeometryArchive* titleplaceholdergeometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(titleplaceholdergeometry_);
  }
  titleplaceholdergeometry_ = titleplaceholdergeometry;
  if (titleplaceholdergeometry) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.titlePlaceholderGeometry)
}
inline ::TSD::GeometryArchive* SlideArchive::release_titleplaceholdergeometry() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::GeometryArchive* temp = titleplaceholdergeometry_;
  titleplaceholdergeometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::unsafe_arena_release_titleplaceholdergeometry() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.titlePlaceholderGeometry)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::GeometryArchive* temp = titleplaceholdergeometry_;
  titleplaceholdergeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::_internal_mutable_titleplaceholdergeometry() {
  _has_bits_[0] |= 0x00000080u;
  if (titleplaceholdergeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    titleplaceholdergeometry_ = p;
  }
  return titleplaceholdergeometry_;
}
inline ::TSD::GeometryArchive* SlideArchive::mutable_titleplaceholdergeometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_titleplaceholdergeometry();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.titlePlaceholderGeometry)
  return _msg;
}
inline void SlideArchive::set_allocated_titleplaceholdergeometry(::TSD::GeometryArchive* titleplaceholdergeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(titleplaceholdergeometry_);
  }
  if (titleplaceholdergeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(titleplaceholdergeometry));
    if (message_arena != submessage_arena) {
      titleplaceholdergeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, titleplaceholdergeometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  titleplaceholdergeometry_ = titleplaceholdergeometry;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.titlePlaceholderGeometry)
}

// optional uint32 titlePlaceholderShapeStyleIndex = 12;
inline bool SlideArchive::_internal_has_titleplaceholdershapestyleindex() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SlideArchive::has_titleplaceholdershapestyleindex() const {
  return _internal_has_titleplaceholdershapestyleindex();
}
inline void SlideArchive::clear_titleplaceholdershapestyleindex() {
  titleplaceholdershapestyleindex_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::_internal_titleplaceholdershapestyleindex() const {
  return titleplaceholdershapestyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::titleplaceholdershapestyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titlePlaceholderShapeStyleIndex)
  return _internal_titleplaceholdershapestyleindex();
}
inline void SlideArchive::_internal_set_titleplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  titleplaceholdershapestyleindex_ = value;
}
inline void SlideArchive::set_titleplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_titleplaceholdershapestyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.titlePlaceholderShapeStyleIndex)
}

// optional uint32 titlePlaceholderTextStyleIndex = 13;
inline bool SlideArchive::_internal_has_titleplaceholdertextstyleindex() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SlideArchive::has_titleplaceholdertextstyleindex() const {
  return _internal_has_titleplaceholdertextstyleindex();
}
inline void SlideArchive::clear_titleplaceholdertextstyleindex() {
  titleplaceholdertextstyleindex_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::_internal_titleplaceholdertextstyleindex() const {
  return titleplaceholdertextstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::titleplaceholdertextstyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titlePlaceholderTextStyleIndex)
  return _internal_titleplaceholdertextstyleindex();
}
inline void SlideArchive::_internal_set_titleplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  titleplaceholdertextstyleindex_ = value;
}
inline void SlideArchive::set_titleplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_titleplaceholdertextstyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.titlePlaceholderTextStyleIndex)
}

// optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
inline bool SlideArchive::_internal_has_titlelayoutproperties() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || titlelayoutproperties_ != nullptr);
  return value;
}
inline bool SlideArchive::has_titlelayoutproperties() const {
  return _internal_has_titlelayoutproperties();
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::_internal_titlelayoutproperties() const {
  const ::TSWP::ShapeStylePropertiesArchive* p = titlelayoutproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeStylePropertiesArchive&>(
      ::TSWP::_ShapeStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::titlelayoutproperties() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titleLayoutProperties)
  return _internal_titlelayoutproperties();
}
inline void SlideArchive::unsafe_arena_set_allocated_titlelayoutproperties(
    ::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(titlelayoutproperties_);
  }
  titlelayoutproperties_ = titlelayoutproperties;
  if (titlelayoutproperties) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.titleLayoutProperties)
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::release_titlelayoutproperties() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = titlelayoutproperties_;
  titlelayoutproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::unsafe_arena_release_titlelayoutproperties() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.titleLayoutProperties)
  _has_bits_[0] &= ~0x00001000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = titlelayoutproperties_;
  titlelayoutproperties_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::_internal_mutable_titlelayoutproperties() {
  _has_bits_[0] |= 0x00001000u;
  if (titlelayoutproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeStylePropertiesArchive>(GetArenaForAllocation());
    titlelayoutproperties_ = p;
  }
  return titlelayoutproperties_;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::mutable_titlelayoutproperties() {
  ::TSWP::ShapeStylePropertiesArchive* _msg = _internal_mutable_titlelayoutproperties();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.titleLayoutProperties)
  return _msg;
}
inline void SlideArchive::set_allocated_titlelayoutproperties(::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(titlelayoutproperties_);
  }
  if (titlelayoutproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(titlelayoutproperties));
    if (message_arena != submessage_arena) {
      titlelayoutproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, titlelayoutproperties, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  titlelayoutproperties_ = titlelayoutproperties;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.titleLayoutProperties)
}

// optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
inline bool SlideArchive::_internal_has_bodyplaceholdergeometry() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || bodyplaceholdergeometry_ != nullptr);
  return value;
}
inline bool SlideArchive::has_bodyplaceholdergeometry() const {
  return _internal_has_bodyplaceholdergeometry();
}
inline const ::TSD::GeometryArchive& SlideArchive::_internal_bodyplaceholdergeometry() const {
  const ::TSD::GeometryArchive* p = bodyplaceholdergeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& SlideArchive::bodyplaceholdergeometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyPlaceholderGeometry)
  return _internal_bodyplaceholdergeometry();
}
inline void SlideArchive::unsafe_arena_set_allocated_bodyplaceholdergeometry(
    ::TSD::GeometryArchive* bodyplaceholdergeometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyplaceholdergeometry_);
  }
  bodyplaceholdergeometry_ = bodyplaceholdergeometry;
  if (bodyplaceholdergeometry) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.bodyPlaceholderGeometry)
}
inline ::TSD::GeometryArchive* SlideArchive::release_bodyplaceholdergeometry() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::GeometryArchive* temp = bodyplaceholdergeometry_;
  bodyplaceholdergeometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::unsafe_arena_release_bodyplaceholdergeometry() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.bodyPlaceholderGeometry)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::GeometryArchive* temp = bodyplaceholdergeometry_;
  bodyplaceholdergeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::_internal_mutable_bodyplaceholdergeometry() {
  _has_bits_[0] |= 0x00000100u;
  if (bodyplaceholdergeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    bodyplaceholdergeometry_ = p;
  }
  return bodyplaceholdergeometry_;
}
inline ::TSD::GeometryArchive* SlideArchive::mutable_bodyplaceholdergeometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_bodyplaceholdergeometry();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyPlaceholderGeometry)
  return _msg;
}
inline void SlideArchive::set_allocated_bodyplaceholdergeometry(::TSD::GeometryArchive* bodyplaceholdergeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyplaceholdergeometry_);
  }
  if (bodyplaceholdergeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyplaceholdergeometry));
    if (message_arena != submessage_arena) {
      bodyplaceholdergeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodyplaceholdergeometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  bodyplaceholdergeometry_ = bodyplaceholdergeometry;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.bodyPlaceholderGeometry)
}

// optional uint32 bodyPlaceholderShapeStyleIndex = 15;
inline bool SlideArchive::_internal_has_bodyplaceholdershapestyleindex() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SlideArchive::has_bodyplaceholdershapestyleindex() const {
  return _internal_has_bodyplaceholdershapestyleindex();
}
inline void SlideArchive::clear_bodyplaceholdershapestyleindex() {
  bodyplaceholdershapestyleindex_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::_internal_bodyplaceholdershapestyleindex() const {
  return bodyplaceholdershapestyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::bodyplaceholdershapestyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyPlaceholderShapeStyleIndex)
  return _internal_bodyplaceholdershapestyleindex();
}
inline void SlideArchive::_internal_set_bodyplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  bodyplaceholdershapestyleindex_ = value;
}
inline void SlideArchive::set_bodyplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bodyplaceholdershapestyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.bodyPlaceholderShapeStyleIndex)
}

// optional uint32 bodyPlaceholderTextStyleIndex = 16;
inline bool SlideArchive::_internal_has_bodyplaceholdertextstyleindex() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SlideArchive::has_bodyplaceholdertextstyleindex() const {
  return _internal_has_bodyplaceholdertextstyleindex();
}
inline void SlideArchive::clear_bodyplaceholdertextstyleindex() {
  bodyplaceholdertextstyleindex_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::_internal_bodyplaceholdertextstyleindex() const {
  return bodyplaceholdertextstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::bodyplaceholdertextstyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyPlaceholderTextStyleIndex)
  return _internal_bodyplaceholdertextstyleindex();
}
inline void SlideArchive::_internal_set_bodyplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  bodyplaceholdertextstyleindex_ = value;
}
inline void SlideArchive::set_bodyplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bodyplaceholdertextstyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.bodyPlaceholderTextStyleIndex)
}

// optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
inline bool SlideArchive::_internal_has_bodylayoutproperties() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || bodylayoutproperties_ != nullptr);
  return value;
}
inline bool SlideArchive::has_bodylayoutproperties() const {
  return _internal_has_bodylayoutproperties();
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::_internal_bodylayoutproperties() const {
  const ::TSWP::ShapeStylePropertiesArchive* p = bodylayoutproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeStylePropertiesArchive&>(
      ::TSWP::_ShapeStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::bodylayoutproperties() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyLayoutProperties)
  return _internal_bodylayoutproperties();
}
inline void SlideArchive::unsafe_arena_set_allocated_bodylayoutproperties(
    ::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodylayoutproperties_);
  }
  bodylayoutproperties_ = bodylayoutproperties;
  if (bodylayoutproperties) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.bodyLayoutProperties)
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::release_bodylayoutproperties() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = bodylayoutproperties_;
  bodylayoutproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::unsafe_arena_release_bodylayoutproperties() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.bodyLayoutProperties)
  _has_bits_[0] &= ~0x00002000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = bodylayoutproperties_;
  bodylayoutproperties_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::_internal_mutable_bodylayoutproperties() {
  _has_bits_[0] |= 0x00002000u;
  if (bodylayoutproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeStylePropertiesArchive>(GetArenaForAllocation());
    bodylayoutproperties_ = p;
  }
  return bodylayoutproperties_;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::mutable_bodylayoutproperties() {
  ::TSWP::ShapeStylePropertiesArchive* _msg = _internal_mutable_bodylayoutproperties();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyLayoutProperties)
  return _msg;
}
inline void SlideArchive::set_allocated_bodylayoutproperties(::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodylayoutproperties_);
  }
  if (bodylayoutproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodylayoutproperties));
    if (message_arena != submessage_arena) {
      bodylayoutproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodylayoutproperties, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  bodylayoutproperties_ = bodylayoutproperties;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.bodyLayoutProperties)
}

// optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
inline bool SlideArchive::_internal_has_slidenumberplaceholdergeometry() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || slidenumberplaceholdergeometry_ != nullptr);
  return value;
}
inline bool SlideArchive::has_slidenumberplaceholdergeometry() const {
  return _internal_has_slidenumberplaceholdergeometry();
}
inline const ::TSD::GeometryArchive& SlideArchive::_internal_slidenumberplaceholdergeometry() const {
  const ::TSD::GeometryArchive* p = slidenumberplaceholdergeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& SlideArchive::slidenumberplaceholdergeometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberPlaceholderGeometry)
  return _internal_slidenumberplaceholdergeometry();
}
inline void SlideArchive::unsafe_arena_set_allocated_slidenumberplaceholdergeometry(
    ::TSD::GeometryArchive* slidenumberplaceholdergeometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberplaceholdergeometry_);
  }
  slidenumberplaceholdergeometry_ = slidenumberplaceholdergeometry;
  if (slidenumberplaceholdergeometry) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.slideNumberPlaceholderGeometry)
}
inline ::TSD::GeometryArchive* SlideArchive::release_slidenumberplaceholdergeometry() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::GeometryArchive* temp = slidenumberplaceholdergeometry_;
  slidenumberplaceholdergeometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::unsafe_arena_release_slidenumberplaceholdergeometry() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.slideNumberPlaceholderGeometry)
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::GeometryArchive* temp = slidenumberplaceholdergeometry_;
  slidenumberplaceholdergeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::_internal_mutable_slidenumberplaceholdergeometry() {
  _has_bits_[0] |= 0x00000800u;
  if (slidenumberplaceholdergeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    slidenumberplaceholdergeometry_ = p;
  }
  return slidenumberplaceholdergeometry_;
}
inline ::TSD::GeometryArchive* SlideArchive::mutable_slidenumberplaceholdergeometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_slidenumberplaceholdergeometry();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.slideNumberPlaceholderGeometry)
  return _msg;
}
inline void SlideArchive::set_allocated_slidenumberplaceholdergeometry(::TSD::GeometryArchive* slidenumberplaceholdergeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberplaceholdergeometry_);
  }
  if (slidenumberplaceholdergeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberplaceholdergeometry));
    if (message_arena != submessage_arena) {
      slidenumberplaceholdergeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenumberplaceholdergeometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  slidenumberplaceholdergeometry_ = slidenumberplaceholdergeometry;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.slideNumberPlaceholderGeometry)
}

// optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
inline bool SlideArchive::_internal_has_slidenumberplaceholdershapestyleindex() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SlideArchive::has_slidenumberplaceholdershapestyleindex() const {
  return _internal_has_slidenumberplaceholdershapestyleindex();
}
inline void SlideArchive::clear_slidenumberplaceholdershapestyleindex() {
  slidenumberplaceholdershapestyleindex_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::_internal_slidenumberplaceholdershapestyleindex() const {
  return slidenumberplaceholdershapestyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::slidenumberplaceholdershapestyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberPlaceholderShapeStyleIndex)
  return _internal_slidenumberplaceholdershapestyleindex();
}
inline void SlideArchive::_internal_set_slidenumberplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  slidenumberplaceholdershapestyleindex_ = value;
}
inline void SlideArchive::set_slidenumberplaceholdershapestyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slidenumberplaceholdershapestyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.slideNumberPlaceholderShapeStyleIndex)
}

// optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
inline bool SlideArchive::_internal_has_slidenumberplaceholdertextstyleindex() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SlideArchive::has_slidenumberplaceholdertextstyleindex() const {
  return _internal_has_slidenumberplaceholdertextstyleindex();
}
inline void SlideArchive::clear_slidenumberplaceholdertextstyleindex() {
  slidenumberplaceholdertextstyleindex_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::_internal_slidenumberplaceholdertextstyleindex() const {
  return slidenumberplaceholdertextstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideArchive::slidenumberplaceholdertextstyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberPlaceholderTextStyleIndex)
  return _internal_slidenumberplaceholdertextstyleindex();
}
inline void SlideArchive::_internal_set_slidenumberplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  slidenumberplaceholdertextstyleindex_ = value;
}
inline void SlideArchive::set_slidenumberplaceholdertextstyleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slidenumberplaceholdertextstyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.slideNumberPlaceholderTextStyleIndex)
}

// optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
inline bool SlideArchive::_internal_has_slidenumberlayoutproperties() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || slidenumberlayoutproperties_ != nullptr);
  return value;
}
inline bool SlideArchive::has_slidenumberlayoutproperties() const {
  return _internal_has_slidenumberlayoutproperties();
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::_internal_slidenumberlayoutproperties() const {
  const ::TSWP::ShapeStylePropertiesArchive* p = slidenumberlayoutproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeStylePropertiesArchive&>(
      ::TSWP::_ShapeStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::slidenumberlayoutproperties() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberLayoutProperties)
  return _internal_slidenumberlayoutproperties();
}
inline void SlideArchive::unsafe_arena_set_allocated_slidenumberlayoutproperties(
    ::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberlayoutproperties_);
  }
  slidenumberlayoutproperties_ = slidenumberlayoutproperties;
  if (slidenumberlayoutproperties) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.slideNumberLayoutProperties)
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::release_slidenumberlayoutproperties() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = slidenumberlayoutproperties_;
  slidenumberlayoutproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::unsafe_arena_release_slidenumberlayoutproperties() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.slideNumberLayoutProperties)
  _has_bits_[0] &= ~0x00004000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = slidenumberlayoutproperties_;
  slidenumberlayoutproperties_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::_internal_mutable_slidenumberlayoutproperties() {
  _has_bits_[0] |= 0x00004000u;
  if (slidenumberlayoutproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeStylePropertiesArchive>(GetArenaForAllocation());
    slidenumberlayoutproperties_ = p;
  }
  return slidenumberlayoutproperties_;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::mutable_slidenumberlayoutproperties() {
  ::TSWP::ShapeStylePropertiesArchive* _msg = _internal_mutable_slidenumberlayoutproperties();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.slideNumberLayoutProperties)
  return _msg;
}
inline void SlideArchive::set_allocated_slidenumberlayoutproperties(::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberlayoutproperties_);
  }
  if (slidenumberlayoutproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberlayoutproperties));
    if (message_arena != submessage_arena) {
      slidenumberlayoutproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenumberlayoutproperties, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  slidenumberlayoutproperties_ = slidenumberlayoutproperties;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.slideNumberLayoutProperties)
}

// optional .TSP.Reference classicStylesheetRecord = 29;
inline bool SlideArchive::_internal_has_classicstylesheetrecord() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || classicstylesheetrecord_ != nullptr);
  return value;
}
inline bool SlideArchive::has_classicstylesheetrecord() const {
  return _internal_has_classicstylesheetrecord();
}
inline const ::TSP::Reference& SlideArchive::_internal_classicstylesheetrecord() const {
  const ::TSP::Reference* p = classicstylesheetrecord_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::classicstylesheetrecord() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.classicStylesheetRecord)
  return _internal_classicstylesheetrecord();
}
inline void SlideArchive::unsafe_arena_set_allocated_classicstylesheetrecord(
    ::TSP::Reference* classicstylesheetrecord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classicstylesheetrecord_);
  }
  classicstylesheetrecord_ = classicstylesheetrecord;
  if (classicstylesheetrecord) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.classicStylesheetRecord)
}
inline ::TSP::Reference* SlideArchive::release_classicstylesheetrecord() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = classicstylesheetrecord_;
  classicstylesheetrecord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_classicstylesheetrecord() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.classicStylesheetRecord)
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = classicstylesheetrecord_;
  classicstylesheetrecord_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_classicstylesheetrecord() {
  _has_bits_[0] |= 0x00010000u;
  if (classicstylesheetrecord_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    classicstylesheetrecord_ = p;
  }
  return classicstylesheetrecord_;
}
inline ::TSP::Reference* SlideArchive::mutable_classicstylesheetrecord() {
  ::TSP::Reference* _msg = _internal_mutable_classicstylesheetrecord();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.classicStylesheetRecord)
  return _msg;
}
inline void SlideArchive::set_allocated_classicstylesheetrecord(::TSP::Reference* classicstylesheetrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(classicstylesheetrecord_);
  }
  if (classicstylesheetrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classicstylesheetrecord));
    if (message_arena != submessage_arena) {
      classicstylesheetrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classicstylesheetrecord, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  classicstylesheetrecord_ = classicstylesheetrecord;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.classicStylesheetRecord)
}

// repeated .TSP.Reference bodyParagraphStyles = 31;
inline int SlideArchive::_internal_bodyparagraphstyles_size() const {
  return bodyparagraphstyles_.size();
}
inline int SlideArchive::bodyparagraphstyles_size() const {
  return _internal_bodyparagraphstyles_size();
}
inline ::TSP::Reference* SlideArchive::mutable_bodyparagraphstyles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyParagraphStyles)
  return bodyparagraphstyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_bodyparagraphstyles() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.bodyParagraphStyles)
  return &bodyparagraphstyles_;
}
inline const ::TSP::Reference& SlideArchive::_internal_bodyparagraphstyles(int index) const {
  return bodyparagraphstyles_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::bodyparagraphstyles(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyParagraphStyles)
  return _internal_bodyparagraphstyles(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_bodyparagraphstyles() {
  return bodyparagraphstyles_.Add();
}
inline ::TSP::Reference* SlideArchive::add_bodyparagraphstyles() {
  ::TSP::Reference* _add = _internal_add_bodyparagraphstyles();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.bodyParagraphStyles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::bodyparagraphstyles() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.bodyParagraphStyles)
  return bodyparagraphstyles_;
}

// repeated .TSP.Reference bodyListStyles = 35;
inline int SlideArchive::_internal_bodyliststyles_size() const {
  return bodyliststyles_.size();
}
inline int SlideArchive::bodyliststyles_size() const {
  return _internal_bodyliststyles_size();
}
inline ::TSP::Reference* SlideArchive::mutable_bodyliststyles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyListStyles)
  return bodyliststyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_bodyliststyles() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.bodyListStyles)
  return &bodyliststyles_;
}
inline const ::TSP::Reference& SlideArchive::_internal_bodyliststyles(int index) const {
  return bodyliststyles_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::bodyliststyles(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyListStyles)
  return _internal_bodyliststyles(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_bodyliststyles() {
  return bodyliststyles_.Add();
}
inline ::TSP::Reference* SlideArchive::add_bodyliststyles() {
  ::TSP::Reference* _add = _internal_add_bodyliststyles();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.bodyListStyles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::bodyliststyles() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.bodyListStyles)
  return bodyliststyles_;
}

// optional string thumbnailTextForTitlePlaceholder = 37;
inline bool SlideArchive::_internal_has_thumbnailtextfortitleplaceholder() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SlideArchive::has_thumbnailtextfortitleplaceholder() const {
  return _internal_has_thumbnailtextfortitleplaceholder();
}
inline void SlideArchive::clear_thumbnailtextfortitleplaceholder() {
  thumbnailtextfortitleplaceholder_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SlideArchive::thumbnailtextfortitleplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
  return _internal_thumbnailtextfortitleplaceholder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideArchive::set_thumbnailtextfortitleplaceholder(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 thumbnailtextfortitleplaceholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
}
inline std::string* SlideArchive::mutable_thumbnailtextfortitleplaceholder() {
  std::string* _s = _internal_mutable_thumbnailtextfortitleplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
  return _s;
}
inline const std::string& SlideArchive::_internal_thumbnailtextfortitleplaceholder() const {
  return thumbnailtextfortitleplaceholder_.Get();
}
inline void SlideArchive::_internal_set_thumbnailtextfortitleplaceholder(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnailtextfortitleplaceholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlideArchive::_internal_mutable_thumbnailtextfortitleplaceholder() {
  _has_bits_[0] |= 0x00000002u;
  return thumbnailtextfortitleplaceholder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlideArchive::release_thumbnailtextfortitleplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
  if (!_internal_has_thumbnailtextfortitleplaceholder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return thumbnailtextfortitleplaceholder_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlideArchive::set_allocated_thumbnailtextfortitleplaceholder(std::string* thumbnailtextfortitleplaceholder) {
  if (thumbnailtextfortitleplaceholder != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  thumbnailtextfortitleplaceholder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnailtextfortitleplaceholder,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
}

// optional string thumbnailTextForBodyPlaceholder = 38;
inline bool SlideArchive::_internal_has_thumbnailtextforbodyplaceholder() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SlideArchive::has_thumbnailtextforbodyplaceholder() const {
  return _internal_has_thumbnailtextforbodyplaceholder();
}
inline void SlideArchive::clear_thumbnailtextforbodyplaceholder() {
  thumbnailtextforbodyplaceholder_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SlideArchive::thumbnailtextforbodyplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
  return _internal_thumbnailtextforbodyplaceholder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideArchive::set_thumbnailtextforbodyplaceholder(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 thumbnailtextforbodyplaceholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
}
inline std::string* SlideArchive::mutable_thumbnailtextforbodyplaceholder() {
  std::string* _s = _internal_mutable_thumbnailtextforbodyplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
  return _s;
}
inline const std::string& SlideArchive::_internal_thumbnailtextforbodyplaceholder() const {
  return thumbnailtextforbodyplaceholder_.Get();
}
inline void SlideArchive::_internal_set_thumbnailtextforbodyplaceholder(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  thumbnailtextforbodyplaceholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlideArchive::_internal_mutable_thumbnailtextforbodyplaceholder() {
  _has_bits_[0] |= 0x00000004u;
  return thumbnailtextforbodyplaceholder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlideArchive::release_thumbnailtextforbodyplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
  if (!_internal_has_thumbnailtextforbodyplaceholder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return thumbnailtextforbodyplaceholder_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlideArchive::set_allocated_thumbnailtextforbodyplaceholder(std::string* thumbnailtextforbodyplaceholder) {
  if (thumbnailtextforbodyplaceholder != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  thumbnailtextforbodyplaceholder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnailtextforbodyplaceholder,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
}

// optional bool slide_objects_layer_with_template = 41 [default = false];
inline bool SlideArchive::_internal_has_slide_objects_layer_with_template() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SlideArchive::has_slide_objects_layer_with_template() const {
  return _internal_has_slide_objects_layer_with_template();
}
inline void SlideArchive::clear_slide_objects_layer_with_template() {
  slide_objects_layer_with_template_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool SlideArchive::_internal_slide_objects_layer_with_template() const {
  return slide_objects_layer_with_template_;
}
inline bool SlideArchive::slide_objects_layer_with_template() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slide_objects_layer_with_template)
  return _internal_slide_objects_layer_with_template();
}
inline void SlideArchive::_internal_set_slide_objects_layer_with_template(bool value) {
  _has_bits_[0] |= 0x08000000u;
  slide_objects_layer_with_template_ = value;
}
inline void SlideArchive::set_slide_objects_layer_with_template(bool value) {
  _internal_set_slide_objects_layer_with_template(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.slide_objects_layer_with_template)
}

// optional .TSP.Reference template_slide = 17;
inline bool SlideArchive::_internal_has_template_slide() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || template_slide_ != nullptr);
  return value;
}
inline bool SlideArchive::has_template_slide() const {
  return _internal_has_template_slide();
}
inline const ::TSP::Reference& SlideArchive::_internal_template_slide() const {
  const ::TSP::Reference* p = template_slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::template_slide() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.template_slide)
  return _internal_template_slide();
}
inline void SlideArchive::unsafe_arena_set_allocated_template_slide(
    ::TSP::Reference* template_slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_slide_);
  }
  template_slide_ = template_slide;
  if (template_slide) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.template_slide)
}
inline ::TSP::Reference* SlideArchive::release_template_slide() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = template_slide_;
  template_slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_template_slide() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.template_slide)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = template_slide_;
  template_slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_template_slide() {
  _has_bits_[0] |= 0x00000200u;
  if (template_slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    template_slide_ = p;
  }
  return template_slide_;
}
inline ::TSP::Reference* SlideArchive::mutable_template_slide() {
  ::TSP::Reference* _msg = _internal_mutable_template_slide();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.template_slide)
  return _msg;
}
inline void SlideArchive::set_allocated_template_slide(::TSP::Reference* template_slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_slide_);
  }
  if (template_slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_slide));
    if (message_arena != submessage_arena) {
      template_slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_slide, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  template_slide_ = template_slide;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.template_slide)
}

// repeated .TSD.GuideArchive staticGuides = 18;
inline int SlideArchive::_internal_staticguides_size() const {
  return staticguides_.size();
}
inline int SlideArchive::staticguides_size() const {
  return _internal_staticguides_size();
}
inline ::TSD::GuideArchive* SlideArchive::mutable_staticguides(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.staticGuides)
  return staticguides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive >*
SlideArchive::mutable_staticguides() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.staticGuides)
  return &staticguides_;
}
inline const ::TSD::GuideArchive& SlideArchive::_internal_staticguides(int index) const {
  return staticguides_.Get(index);
}
inline const ::TSD::GuideArchive& SlideArchive::staticguides(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.staticGuides)
  return _internal_staticguides(index);
}
inline ::TSD::GuideArchive* SlideArchive::_internal_add_staticguides() {
  return staticguides_.Add();
}
inline ::TSD::GuideArchive* SlideArchive::add_staticguides() {
  ::TSD::GuideArchive* _add = _internal_add_staticguides();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.staticGuides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive >&
SlideArchive::staticguides() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.staticGuides)
  return staticguides_;
}

// optional .TSP.Reference userDefinedGuideStorage = 36;
inline bool SlideArchive::_internal_has_userdefinedguidestorage() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || userdefinedguidestorage_ != nullptr);
  return value;
}
inline bool SlideArchive::has_userdefinedguidestorage() const {
  return _internal_has_userdefinedguidestorage();
}
inline const ::TSP::Reference& SlideArchive::_internal_userdefinedguidestorage() const {
  const ::TSP::Reference* p = userdefinedguidestorage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::userdefinedguidestorage() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.userDefinedGuideStorage)
  return _internal_userdefinedguidestorage();
}
inline void SlideArchive::unsafe_arena_set_allocated_userdefinedguidestorage(
    ::TSP::Reference* userdefinedguidestorage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdefinedguidestorage_);
  }
  userdefinedguidestorage_ = userdefinedguidestorage;
  if (userdefinedguidestorage) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.userDefinedGuideStorage)
}
inline ::TSP::Reference* SlideArchive::release_userdefinedguidestorage() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = userdefinedguidestorage_;
  userdefinedguidestorage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_userdefinedguidestorage() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.userDefinedGuideStorage)
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = userdefinedguidestorage_;
  userdefinedguidestorage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_userdefinedguidestorage() {
  _has_bits_[0] |= 0x00040000u;
  if (userdefinedguidestorage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    userdefinedguidestorage_ = p;
  }
  return userdefinedguidestorage_;
}
inline ::TSP::Reference* SlideArchive::mutable_userdefinedguidestorage() {
  ::TSP::Reference* _msg = _internal_mutable_userdefinedguidestorage();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.userDefinedGuideStorage)
  return _msg;
}
inline void SlideArchive::set_allocated_userdefinedguidestorage(::TSP::Reference* userdefinedguidestorage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdefinedguidestorage_);
  }
  if (userdefinedguidestorage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdefinedguidestorage));
    if (message_arena != submessage_arena) {
      userdefinedguidestorage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdefinedguidestorage, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  userdefinedguidestorage_ = userdefinedguidestorage;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.userDefinedGuideStorage)
}

// required bool inDocument = 19;
inline bool SlideArchive::_internal_has_indocument() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SlideArchive::has_indocument() const {
  return _internal_has_indocument();
}
inline void SlideArchive::clear_indocument() {
  indocument_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool SlideArchive::_internal_indocument() const {
  return indocument_;
}
inline bool SlideArchive::indocument() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.inDocument)
  return _internal_indocument();
}
inline void SlideArchive::_internal_set_indocument(bool value) {
  _has_bits_[0] |= 0x10000000u;
  indocument_ = value;
}
inline void SlideArchive::set_indocument(bool value) {
  _internal_set_indocument(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.inDocument)
}

// optional .TSP.Reference note = 27;
inline bool SlideArchive::_internal_has_note() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || note_ != nullptr);
  return value;
}
inline bool SlideArchive::has_note() const {
  return _internal_has_note();
}
inline const ::TSP::Reference& SlideArchive::_internal_note() const {
  const ::TSP::Reference* p = note_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::note() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.note)
  return _internal_note();
}
inline void SlideArchive::unsafe_arena_set_allocated_note(
    ::TSP::Reference* note) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(note_);
  }
  note_ = note;
  if (note) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.note)
}
inline ::TSP::Reference* SlideArchive::release_note() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = note_;
  note_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_note() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.note)
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = note_;
  note_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_note() {
  _has_bits_[0] |= 0x00008000u;
  if (note_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    note_ = p;
  }
  return note_;
}
inline ::TSP::Reference* SlideArchive::mutable_note() {
  ::TSP::Reference* _msg = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.note)
  return _msg;
}
inline void SlideArchive::set_allocated_note(::TSP::Reference* note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(note_);
  }
  if (note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(note));
    if (message_arena != submessage_arena) {
      note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  note_ = note;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.note)
}

// repeated .TSP.Reference infos_using_object_placeholder_geometry = 44;
inline int SlideArchive::_internal_infos_using_object_placeholder_geometry_size() const {
  return infos_using_object_placeholder_geometry_.size();
}
inline int SlideArchive::infos_using_object_placeholder_geometry_size() const {
  return _internal_infos_using_object_placeholder_geometry_size();
}
inline ::TSP::Reference* SlideArchive::mutable_infos_using_object_placeholder_geometry(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.infos_using_object_placeholder_geometry)
  return infos_using_object_placeholder_geometry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_infos_using_object_placeholder_geometry() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.infos_using_object_placeholder_geometry)
  return &infos_using_object_placeholder_geometry_;
}
inline const ::TSP::Reference& SlideArchive::_internal_infos_using_object_placeholder_geometry(int index) const {
  return infos_using_object_placeholder_geometry_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::infos_using_object_placeholder_geometry(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.infos_using_object_placeholder_geometry)
  return _internal_infos_using_object_placeholder_geometry(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_infos_using_object_placeholder_geometry() {
  return infos_using_object_placeholder_geometry_.Add();
}
inline ::TSP::Reference* SlideArchive::add_infos_using_object_placeholder_geometry() {
  ::TSP::Reference* _add = _internal_add_infos_using_object_placeholder_geometry();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.infos_using_object_placeholder_geometry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::infos_using_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.infos_using_object_placeholder_geometry)
  return infos_using_object_placeholder_geometry_;
}

// optional bool deprecated_objectPlaceholderVisibleForExport = 34;
inline bool SlideArchive::_internal_has_deprecated_objectplaceholdervisibleforexport() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SlideArchive::has_deprecated_objectplaceholdervisibleforexport() const {
  return _internal_has_deprecated_objectplaceholdervisibleforexport();
}
inline void SlideArchive::clear_deprecated_objectplaceholdervisibleforexport() {
  deprecated_objectplaceholdervisibleforexport_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool SlideArchive::_internal_deprecated_objectplaceholdervisibleforexport() const {
  return deprecated_objectplaceholdervisibleforexport_;
}
inline bool SlideArchive::deprecated_objectplaceholdervisibleforexport() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.deprecated_objectPlaceholderVisibleForExport)
  return _internal_deprecated_objectplaceholdervisibleforexport();
}
inline void SlideArchive::_internal_set_deprecated_objectplaceholdervisibleforexport(bool value) {
  _has_bits_[0] |= 0x20000000u;
  deprecated_objectplaceholdervisibleforexport_ = value;
}
inline void SlideArchive::set_deprecated_objectplaceholdervisibleforexport(bool value) {
  _internal_set_deprecated_objectplaceholdervisibleforexport(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.deprecated_objectPlaceholderVisibleForExport)
}

// optional .TSP.Reference info_using_object_placeholder_geometry = 39;
inline bool SlideArchive::_internal_has_info_using_object_placeholder_geometry() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || info_using_object_placeholder_geometry_ != nullptr);
  return value;
}
inline bool SlideArchive::has_info_using_object_placeholder_geometry() const {
  return _internal_has_info_using_object_placeholder_geometry();
}
inline const ::TSP::Reference& SlideArchive::_internal_info_using_object_placeholder_geometry() const {
  const ::TSP::Reference* p = info_using_object_placeholder_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::info_using_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.info_using_object_placeholder_geometry)
  return _internal_info_using_object_placeholder_geometry();
}
inline void SlideArchive::unsafe_arena_set_allocated_info_using_object_placeholder_geometry(
    ::TSP::Reference* info_using_object_placeholder_geometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_using_object_placeholder_geometry_);
  }
  info_using_object_placeholder_geometry_ = info_using_object_placeholder_geometry;
  if (info_using_object_placeholder_geometry) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.info_using_object_placeholder_geometry)
}
inline ::TSP::Reference* SlideArchive::release_info_using_object_placeholder_geometry() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::Reference* temp = info_using_object_placeholder_geometry_;
  info_using_object_placeholder_geometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_info_using_object_placeholder_geometry() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.info_using_object_placeholder_geometry)
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::Reference* temp = info_using_object_placeholder_geometry_;
  info_using_object_placeholder_geometry_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_info_using_object_placeholder_geometry() {
  _has_bits_[0] |= 0x00080000u;
  if (info_using_object_placeholder_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    info_using_object_placeholder_geometry_ = p;
  }
  return info_using_object_placeholder_geometry_;
}
inline ::TSP::Reference* SlideArchive::mutable_info_using_object_placeholder_geometry() {
  ::TSP::Reference* _msg = _internal_mutable_info_using_object_placeholder_geometry();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.info_using_object_placeholder_geometry)
  return _msg;
}
inline void SlideArchive::set_allocated_info_using_object_placeholder_geometry(::TSP::Reference* info_using_object_placeholder_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_using_object_placeholder_geometry_);
  }
  if (info_using_object_placeholder_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_using_object_placeholder_geometry));
    if (message_arena != submessage_arena) {
      info_using_object_placeholder_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_using_object_placeholder_geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  info_using_object_placeholder_geometry_ = info_using_object_placeholder_geometry;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.info_using_object_placeholder_geometry)
}

// optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
inline bool SlideArchive::_internal_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SlideArchive::has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const {
  return _internal_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry();
}
inline void SlideArchive::clear_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() {
  info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool SlideArchive::_internal_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const {
  return info_using_object_placeholder_geometry_matches_object_placeholder_geometry_;
}
inline bool SlideArchive::info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.info_using_object_placeholder_geometry_matches_object_placeholder_geometry)
  return _internal_info_using_object_placeholder_geometry_matches_object_placeholder_geometry();
}
inline void SlideArchive::_internal_set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(bool value) {
  _has_bits_[0] |= 0x40000000u;
  info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = value;
}
inline void SlideArchive::set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(bool value) {
  _internal_set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.info_using_object_placeholder_geometry_matches_object_placeholder_geometry)
}

// -------------------------------------------------------------------

// SlideNodeArchive_SlideSpecificHyperlinkMapEntry

// required string slideNodeIDString = 1;
inline bool SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_internal_has_slidenodeidstring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlideNodeArchive_SlideSpecificHyperlinkMapEntry::has_slidenodeidstring() const {
  return _internal_has_slidenodeidstring();
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::clear_slidenodeidstring() {
  slidenodeidstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SlideNodeArchive_SlideSpecificHyperlinkMapEntry::slidenodeidstring() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.slideNodeIDString)
  return _internal_slidenodeidstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::set_slidenodeidstring(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 slidenodeidstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.slideNodeIDString)
}
inline std::string* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::mutable_slidenodeidstring() {
  std::string* _s = _internal_mutable_slidenodeidstring();
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.slideNodeIDString)
  return _s;
}
inline const std::string& SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_internal_slidenodeidstring() const {
  return slidenodeidstring_.Get();
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_internal_set_slidenodeidstring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  slidenodeidstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_internal_mutable_slidenodeidstring() {
  _has_bits_[0] |= 0x00000001u;
  return slidenodeidstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::release_slidenodeidstring() {
  // @@protoc_insertion_point(field_release:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.slideNodeIDString)
  if (!_internal_has_slidenodeidstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return slidenodeidstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::set_allocated_slidenodeidstring(std::string* slidenodeidstring) {
  if (slidenodeidstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slidenodeidstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slidenodeidstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.slideNodeIDString)
}

// repeated string infoOrStorageIDString = 2;
inline int SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_internal_infoorstorageidstring_size() const {
  return infoorstorageidstring_.size();
}
inline int SlideNodeArchive_SlideSpecificHyperlinkMapEntry::infoorstorageidstring_size() const {
  return _internal_infoorstorageidstring_size();
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::clear_infoorstorageidstring() {
  infoorstorageidstring_.Clear();
}
inline std::string* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::add_infoorstorageidstring() {
  std::string* _s = _internal_add_infoorstorageidstring();
  // @@protoc_insertion_point(field_add_mutable:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
  return _s;
}
inline const std::string& SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_internal_infoorstorageidstring(int index) const {
  return infoorstorageidstring_.Get(index);
}
inline const std::string& SlideNodeArchive_SlideSpecificHyperlinkMapEntry::infoorstorageidstring(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
  return _internal_infoorstorageidstring(index);
}
inline std::string* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::mutable_infoorstorageidstring(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
  return infoorstorageidstring_.Mutable(index);
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::set_infoorstorageidstring(int index, const std::string& value) {
  infoorstorageidstring_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::set_infoorstorageidstring(int index, std::string&& value) {
  infoorstorageidstring_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::set_infoorstorageidstring(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infoorstorageidstring_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::set_infoorstorageidstring(int index, const char* value, size_t size) {
  infoorstorageidstring_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
}
inline std::string* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_internal_add_infoorstorageidstring() {
  return infoorstorageidstring_.Add();
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::add_infoorstorageidstring(const std::string& value) {
  infoorstorageidstring_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::add_infoorstorageidstring(std::string&& value) {
  infoorstorageidstring_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::add_infoorstorageidstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infoorstorageidstring_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
}
inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::add_infoorstorageidstring(const char* value, size_t size) {
  infoorstorageidstring_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SlideNodeArchive_SlideSpecificHyperlinkMapEntry::infoorstorageidstring() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
  return infoorstorageidstring_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SlideNodeArchive_SlideSpecificHyperlinkMapEntry::mutable_infoorstorageidstring() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString)
  return &infoorstorageidstring_;
}

// -------------------------------------------------------------------

// SlideNodeArchive

// repeated .TSP.Reference children = 1;
inline int SlideNodeArchive::_internal_children_size() const {
  return children_.size();
}
inline int SlideNodeArchive::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* SlideNodeArchive::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideNodeArchive::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.children)
  return &children_;
}
inline const ::TSP::Reference& SlideNodeArchive::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::TSP::Reference& SlideNodeArchive::children(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.children)
  return _internal_children(index);
}
inline ::TSP::Reference* SlideNodeArchive::_internal_add_children() {
  return children_.Add();
}
inline ::TSP::Reference* SlideNodeArchive::add_children() {
  ::TSP::Reference* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideNodeArchive::children() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.children)
  return children_;
}

// optional .TSP.Reference slide = 2;
inline bool SlideNodeArchive::_internal_has_slide() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || slide_ != nullptr);
  return value;
}
inline bool SlideNodeArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& SlideNodeArchive::_internal_slide() const {
  const ::TSP::Reference* p = slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideNodeArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.slide)
  return _internal_slide();
}
inline void SlideNodeArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_);
  }
  slide_ = slide;
  if (slide) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideNodeArchive.slide)
}
inline ::TSP::Reference* SlideNodeArchive::release_slide() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = slide_;
  slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideNodeArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.SlideNodeArchive.slide)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = slide_;
  slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideNodeArchive::_internal_mutable_slide() {
  _has_bits_[0] |= 0x00000004u;
  if (slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    slide_ = p;
  }
  return slide_;
}
inline ::TSP::Reference* SlideNodeArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.slide)
  return _msg;
}
inline void SlideNodeArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNodeArchive.slide)
}

// optional uint32 depth = 21 [default = 1];
inline bool SlideNodeArchive::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_depth() const {
  return _internal_has_depth();
}
inline void SlideNodeArchive::clear_depth() {
  depth_ = 1u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::depth() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.depth)
  return _internal_depth();
}
inline void SlideNodeArchive::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  depth_ = value;
}
inline void SlideNodeArchive::set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.depth)
}

// repeated .TSP.DataReference thumbnails = 16;
inline int SlideNodeArchive::_internal_thumbnails_size() const {
  return thumbnails_.size();
}
inline int SlideNodeArchive::thumbnails_size() const {
  return _internal_thumbnails_size();
}
inline ::TSP::DataReference* SlideNodeArchive::mutable_thumbnails(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.thumbnails)
  return thumbnails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
SlideNodeArchive::mutable_thumbnails() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.thumbnails)
  return &thumbnails_;
}
inline const ::TSP::DataReference& SlideNodeArchive::_internal_thumbnails(int index) const {
  return thumbnails_.Get(index);
}
inline const ::TSP::DataReference& SlideNodeArchive::thumbnails(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.thumbnails)
  return _internal_thumbnails(index);
}
inline ::TSP::DataReference* SlideNodeArchive::_internal_add_thumbnails() {
  return thumbnails_.Add();
}
inline ::TSP::DataReference* SlideNodeArchive::add_thumbnails() {
  ::TSP::DataReference* _add = _internal_add_thumbnails();
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.thumbnails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
SlideNodeArchive::thumbnails() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.thumbnails)
  return thumbnails_;
}

// repeated .TSP.Size thumbnailSizes = 10;
inline int SlideNodeArchive::_internal_thumbnailsizes_size() const {
  return thumbnailsizes_.size();
}
inline int SlideNodeArchive::thumbnailsizes_size() const {
  return _internal_thumbnailsizes_size();
}
inline ::TSP::Size* SlideNodeArchive::mutable_thumbnailsizes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.thumbnailSizes)
  return thumbnailsizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >*
SlideNodeArchive::mutable_thumbnailsizes() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.thumbnailSizes)
  return &thumbnailsizes_;
}
inline const ::TSP::Size& SlideNodeArchive::_internal_thumbnailsizes(int index) const {
  return thumbnailsizes_.Get(index);
}
inline const ::TSP::Size& SlideNodeArchive::thumbnailsizes(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.thumbnailSizes)
  return _internal_thumbnailsizes(index);
}
inline ::TSP::Size* SlideNodeArchive::_internal_add_thumbnailsizes() {
  return thumbnailsizes_.Add();
}
inline ::TSP::Size* SlideNodeArchive::add_thumbnailsizes() {
  ::TSP::Size* _add = _internal_add_thumbnailsizes();
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.thumbnailSizes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >&
SlideNodeArchive::thumbnailsizes() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.thumbnailSizes)
  return thumbnailsizes_;
}

// optional bool thumbnailsAreDirty = 14;
inline bool SlideNodeArchive::_internal_has_thumbnailsaredirty() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_thumbnailsaredirty() const {
  return _internal_has_thumbnailsaredirty();
}
inline void SlideNodeArchive::clear_thumbnailsaredirty() {
  thumbnailsaredirty_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SlideNodeArchive::_internal_thumbnailsaredirty() const {
  return thumbnailsaredirty_;
}
inline bool SlideNodeArchive::thumbnailsaredirty() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.thumbnailsAreDirty)
  return _internal_thumbnailsaredirty();
}
inline void SlideNodeArchive::_internal_set_thumbnailsaredirty(bool value) {
  _has_bits_[0] |= 0x00000010u;
  thumbnailsaredirty_ = value;
}
inline void SlideNodeArchive::set_thumbnailsaredirty(bool value) {
  _internal_set_thumbnailsaredirty(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.thumbnailsAreDirty)
}

// repeated string digests_for_datas_needing_download_for_thumbnail = 25;
inline int SlideNodeArchive::_internal_digests_for_datas_needing_download_for_thumbnail_size() const {
  return digests_for_datas_needing_download_for_thumbnail_.size();
}
inline int SlideNodeArchive::digests_for_datas_needing_download_for_thumbnail_size() const {
  return _internal_digests_for_datas_needing_download_for_thumbnail_size();
}
inline void SlideNodeArchive::clear_digests_for_datas_needing_download_for_thumbnail() {
  digests_for_datas_needing_download_for_thumbnail_.Clear();
}
inline std::string* SlideNodeArchive::add_digests_for_datas_needing_download_for_thumbnail() {
  std::string* _s = _internal_add_digests_for_datas_needing_download_for_thumbnail();
  // @@protoc_insertion_point(field_add_mutable:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
  return _s;
}
inline const std::string& SlideNodeArchive::_internal_digests_for_datas_needing_download_for_thumbnail(int index) const {
  return digests_for_datas_needing_download_for_thumbnail_.Get(index);
}
inline const std::string& SlideNodeArchive::digests_for_datas_needing_download_for_thumbnail(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
  return _internal_digests_for_datas_needing_download_for_thumbnail(index);
}
inline std::string* SlideNodeArchive::mutable_digests_for_datas_needing_download_for_thumbnail(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
  return digests_for_datas_needing_download_for_thumbnail_.Mutable(index);
}
inline void SlideNodeArchive::set_digests_for_datas_needing_download_for_thumbnail(int index, const std::string& value) {
  digests_for_datas_needing_download_for_thumbnail_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
}
inline void SlideNodeArchive::set_digests_for_datas_needing_download_for_thumbnail(int index, std::string&& value) {
  digests_for_datas_needing_download_for_thumbnail_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
}
inline void SlideNodeArchive::set_digests_for_datas_needing_download_for_thumbnail(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  digests_for_datas_needing_download_for_thumbnail_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
}
inline void SlideNodeArchive::set_digests_for_datas_needing_download_for_thumbnail(int index, const char* value, size_t size) {
  digests_for_datas_needing_download_for_thumbnail_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
}
inline std::string* SlideNodeArchive::_internal_add_digests_for_datas_needing_download_for_thumbnail() {
  return digests_for_datas_needing_download_for_thumbnail_.Add();
}
inline void SlideNodeArchive::add_digests_for_datas_needing_download_for_thumbnail(const std::string& value) {
  digests_for_datas_needing_download_for_thumbnail_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
}
inline void SlideNodeArchive::add_digests_for_datas_needing_download_for_thumbnail(std::string&& value) {
  digests_for_datas_needing_download_for_thumbnail_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
}
inline void SlideNodeArchive::add_digests_for_datas_needing_download_for_thumbnail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  digests_for_datas_needing_download_for_thumbnail_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
}
inline void SlideNodeArchive::add_digests_for_datas_needing_download_for_thumbnail(const char* value, size_t size) {
  digests_for_datas_needing_download_for_thumbnail_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SlideNodeArchive::digests_for_datas_needing_download_for_thumbnail() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
  return digests_for_datas_needing_download_for_thumbnail_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SlideNodeArchive::mutable_digests_for_datas_needing_download_for_thumbnail() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail)
  return &digests_for_datas_needing_download_for_thumbnail_;
}

// required bool isHidden = 4;
inline bool SlideNodeArchive::_internal_has_ishidden() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_ishidden() const {
  return _internal_has_ishidden();
}
inline void SlideNodeArchive::clear_ishidden() {
  ishidden_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SlideNodeArchive::_internal_ishidden() const {
  return ishidden_;
}
inline bool SlideNodeArchive::ishidden() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.isHidden)
  return _internal_ishidden();
}
inline void SlideNodeArchive::_internal_set_ishidden(bool value) {
  _has_bits_[0] |= 0x00000020u;
  ishidden_ = value;
}
inline void SlideNodeArchive::set_ishidden(bool value) {
  _internal_set_ishidden(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.isHidden)
}

// optional bool isCollapsed = 5 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_iscollapsed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_iscollapsed() const {
  return _internal_has_iscollapsed();
}
inline void SlideNodeArchive::clear_iscollapsed() {
  iscollapsed_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SlideNodeArchive::_internal_iscollapsed() const {
  return iscollapsed_;
}
inline bool SlideNodeArchive::iscollapsed() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.isCollapsed)
  return _internal_iscollapsed();
}
inline void SlideNodeArchive::_internal_set_iscollapsed(bool value) {
  _has_bits_[0] |= 0x00000040u;
  iscollapsed_ = value;
}
inline void SlideNodeArchive::set_iscollapsed(bool value) {
  _internal_set_iscollapsed(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.isCollapsed)
}

// optional bool isCollapsedInOutlineView = 17 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_iscollapsedinoutlineview() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_iscollapsedinoutlineview() const {
  return _internal_has_iscollapsedinoutlineview();
}
inline void SlideNodeArchive::clear_iscollapsedinoutlineview() {
  iscollapsedinoutlineview_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SlideNodeArchive::_internal_iscollapsedinoutlineview() const {
  return iscollapsedinoutlineview_;
}
inline bool SlideNodeArchive::iscollapsedinoutlineview() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.isCollapsedInOutlineView)
  return _internal_iscollapsedinoutlineview();
}
inline void SlideNodeArchive::_internal_set_iscollapsedinoutlineview(bool value) {
  _has_bits_[0] |= 0x00000080u;
  iscollapsedinoutlineview_ = value;
}
inline void SlideNodeArchive::set_iscollapsedinoutlineview(bool value) {
  _internal_set_iscollapsedinoutlineview(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.isCollapsedInOutlineView)
}

// optional bool hasBodyInOutlineView = 19 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_hasbodyinoutlineview() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_hasbodyinoutlineview() const {
  return _internal_has_hasbodyinoutlineview();
}
inline void SlideNodeArchive::clear_hasbodyinoutlineview() {
  hasbodyinoutlineview_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SlideNodeArchive::_internal_hasbodyinoutlineview() const {
  return hasbodyinoutlineview_;
}
inline bool SlideNodeArchive::hasbodyinoutlineview() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.hasBodyInOutlineView)
  return _internal_hasbodyinoutlineview();
}
inline void SlideNodeArchive::_internal_set_hasbodyinoutlineview(bool value) {
  _has_bits_[0] |= 0x00000100u;
  hasbodyinoutlineview_ = value;
}
inline void SlideNodeArchive::set_hasbodyinoutlineview(bool value) {
  _internal_set_hasbodyinoutlineview(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.hasBodyInOutlineView)
}

// required bool hasBuilds = 6 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_hasbuilds() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_hasbuilds() const {
  return _internal_has_hasbuilds();
}
inline void SlideNodeArchive::clear_hasbuilds() {
  hasbuilds_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SlideNodeArchive::_internal_hasbuilds() const {
  return hasbuilds_;
}
inline bool SlideNodeArchive::hasbuilds() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.hasBuilds)
  return _internal_hasbuilds();
}
inline void SlideNodeArchive::_internal_set_hasbuilds(bool value) {
  _has_bits_[0] |= 0x00000200u;
  hasbuilds_ = value;
}
inline void SlideNodeArchive::set_hasbuilds(bool value) {
  _internal_set_hasbuilds(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.hasBuilds)
}

// required bool hasTransition = 7;
inline bool SlideNodeArchive::_internal_has_hastransition() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_hastransition() const {
  return _internal_has_hastransition();
}
inline void SlideNodeArchive::clear_hastransition() {
  hastransition_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool SlideNodeArchive::_internal_hastransition() const {
  return hastransition_;
}
inline bool SlideNodeArchive::hastransition() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.hasTransition)
  return _internal_hastransition();
}
inline void SlideNodeArchive::_internal_set_hastransition(bool value) {
  _has_bits_[0] |= 0x00000400u;
  hastransition_ = value;
}
inline void SlideNodeArchive::set_hastransition(bool value) {
  _internal_set_hastransition(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.hasTransition)
}

// optional bool hasNote = 8;
inline bool SlideNodeArchive::_internal_has_hasnote() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_hasnote() const {
  return _internal_has_hasnote();
}
inline void SlideNodeArchive::clear_hasnote() {
  hasnote_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool SlideNodeArchive::_internal_hasnote() const {
  return hasnote_;
}
inline bool SlideNodeArchive::hasnote() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.hasNote)
  return _internal_hasnote();
}
inline void SlideNodeArchive::_internal_set_hasnote(bool value) {
  _has_bits_[0] |= 0x00000800u;
  hasnote_ = value;
}
inline void SlideNodeArchive::set_hasnote(bool value) {
  _internal_set_hasnote(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.hasNote)
}

// optional bool isSlideNumberVisible = 18 [default = false];
inline bool SlideNodeArchive::_internal_has_isslidenumbervisible() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_isslidenumbervisible() const {
  return _internal_has_isslidenumbervisible();
}
inline void SlideNodeArchive::clear_isslidenumbervisible() {
  isslidenumbervisible_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool SlideNodeArchive::_internal_isslidenumbervisible() const {
  return isslidenumbervisible_;
}
inline bool SlideNodeArchive::isslidenumbervisible() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.isSlideNumberVisible)
  return _internal_isslidenumbervisible();
}
inline void SlideNodeArchive::_internal_set_isslidenumbervisible(bool value) {
  _has_bits_[0] |= 0x00004000u;
  isslidenumbervisible_ = value;
}
inline void SlideNodeArchive::set_isslidenumbervisible(bool value) {
  _internal_set_isslidenumbervisible(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.isSlideNumberVisible)
}

// optional string uniqueIdentifier = 11 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_uniqueidentifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_uniqueidentifier() const {
  return _internal_has_uniqueidentifier();
}
inline void SlideNodeArchive::clear_uniqueidentifier() {
  uniqueidentifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SlideNodeArchive::uniqueidentifier() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.uniqueIdentifier)
  return _internal_uniqueidentifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideNodeArchive::set_uniqueidentifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 uniqueidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.uniqueIdentifier)
}
inline std::string* SlideNodeArchive::mutable_uniqueidentifier() {
  std::string* _s = _internal_mutable_uniqueidentifier();
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.uniqueIdentifier)
  return _s;
}
inline const std::string& SlideNodeArchive::_internal_uniqueidentifier() const {
  return uniqueidentifier_.Get();
}
inline void SlideNodeArchive::_internal_set_uniqueidentifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uniqueidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlideNodeArchive::_internal_mutable_uniqueidentifier() {
  _has_bits_[0] |= 0x00000001u;
  return uniqueidentifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlideNodeArchive::release_uniqueidentifier() {
  // @@protoc_insertion_point(field_release:KN.SlideNodeArchive.uniqueIdentifier)
  if (!_internal_has_uniqueidentifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uniqueidentifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlideNodeArchive::set_allocated_uniqueidentifier(std::string* uniqueidentifier) {
  if (uniqueidentifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uniqueidentifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uniqueidentifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNodeArchive.uniqueIdentifier)
}

// optional string copyFromSlideIdentifier = 12;
inline bool SlideNodeArchive::_internal_has_copyfromslideidentifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_copyfromslideidentifier() const {
  return _internal_has_copyfromslideidentifier();
}
inline void SlideNodeArchive::clear_copyfromslideidentifier() {
  copyfromslideidentifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SlideNodeArchive::copyfromslideidentifier() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.copyFromSlideIdentifier)
  return _internal_copyfromslideidentifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideNodeArchive::set_copyfromslideidentifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 copyfromslideidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.copyFromSlideIdentifier)
}
inline std::string* SlideNodeArchive::mutable_copyfromslideidentifier() {
  std::string* _s = _internal_mutable_copyfromslideidentifier();
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.copyFromSlideIdentifier)
  return _s;
}
inline const std::string& SlideNodeArchive::_internal_copyfromslideidentifier() const {
  return copyfromslideidentifier_.Get();
}
inline void SlideNodeArchive::_internal_set_copyfromslideidentifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  copyfromslideidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlideNodeArchive::_internal_mutable_copyfromslideidentifier() {
  _has_bits_[0] |= 0x00000002u;
  return copyfromslideidentifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlideNodeArchive::release_copyfromslideidentifier() {
  // @@protoc_insertion_point(field_release:KN.SlideNodeArchive.copyFromSlideIdentifier)
  if (!_internal_has_copyfromslideidentifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return copyfromslideidentifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlideNodeArchive::set_allocated_copyfromslideidentifier(std::string* copyfromslideidentifier) {
  if (copyfromslideidentifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  copyfromslideidentifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), copyfromslideidentifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNodeArchive.copyFromSlideIdentifier)
}

// optional uint32 slideSpecificHyperlinkCount = 13 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_slidespecifichyperlinkcount() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_slidespecifichyperlinkcount() const {
  return _internal_has_slidespecifichyperlinkcount();
}
inline void SlideNodeArchive::clear_slidespecifichyperlinkcount() {
  slidespecifichyperlinkcount_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::_internal_slidespecifichyperlinkcount() const {
  return slidespecifichyperlinkcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::slidespecifichyperlinkcount() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.slideSpecificHyperlinkCount)
  return _internal_slidespecifichyperlinkcount();
}
inline void SlideNodeArchive::_internal_set_slidespecifichyperlinkcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  slidespecifichyperlinkcount_ = value;
}
inline void SlideNodeArchive::set_slidespecifichyperlinkcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slidespecifichyperlinkcount(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.slideSpecificHyperlinkCount)
}

// optional uint32 build_event_count = 15;
inline bool SlideNodeArchive::_internal_has_build_event_count() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_build_event_count() const {
  return _internal_has_build_event_count();
}
inline void SlideNodeArchive::clear_build_event_count() {
  build_event_count_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::_internal_build_event_count() const {
  return build_event_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::build_event_count() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.build_event_count)
  return _internal_build_event_count();
}
inline void SlideNodeArchive::_internal_set_build_event_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  build_event_count_ = value;
}
inline void SlideNodeArchive::set_build_event_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_build_event_count(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.build_event_count)
}

// optional uint32 build_event_count_cache_version = 26;
inline bool SlideNodeArchive::_internal_has_build_event_count_cache_version() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_build_event_count_cache_version() const {
  return _internal_has_build_event_count_cache_version();
}
inline void SlideNodeArchive::clear_build_event_count_cache_version() {
  build_event_count_cache_version_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::_internal_build_event_count_cache_version() const {
  return build_event_count_cache_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::build_event_count_cache_version() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.build_event_count_cache_version)
  return _internal_build_event_count_cache_version();
}
inline void SlideNodeArchive::_internal_set_build_event_count_cache_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  build_event_count_cache_version_ = value;
}
inline void SlideNodeArchive::set_build_event_count_cache_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_build_event_count_cache_version(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.build_event_count_cache_version)
}

// optional bool build_event_count_is_up_to_date = 22 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_build_event_count_is_up_to_date() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_build_event_count_is_up_to_date() const {
  return _internal_has_build_event_count_is_up_to_date();
}
inline void SlideNodeArchive::clear_build_event_count_is_up_to_date() {
  build_event_count_is_up_to_date_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool SlideNodeArchive::_internal_build_event_count_is_up_to_date() const {
  return build_event_count_is_up_to_date_;
}
inline bool SlideNodeArchive::build_event_count_is_up_to_date() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.build_event_count_is_up_to_date)
  return _internal_build_event_count_is_up_to_date();
}
inline void SlideNodeArchive::_internal_set_build_event_count_is_up_to_date(bool value) {
  _has_bits_[0] |= 0x00008000u;
  build_event_count_is_up_to_date_ = value;
}
inline void SlideNodeArchive::set_build_event_count_is_up_to_date(bool value) {
  _internal_set_build_event_count_is_up_to_date(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.build_event_count_is_up_to_date)
}

// optional bool has_explicit_builds = 20;
inline bool SlideNodeArchive::_internal_has_has_explicit_builds() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_has_explicit_builds() const {
  return _internal_has_has_explicit_builds();
}
inline void SlideNodeArchive::clear_has_explicit_builds() {
  has_explicit_builds_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool SlideNodeArchive::_internal_has_explicit_builds() const {
  return has_explicit_builds_;
}
inline bool SlideNodeArchive::has_explicit_builds() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.has_explicit_builds)
  return _internal_has_explicit_builds();
}
inline void SlideNodeArchive::_internal_set_has_explicit_builds(bool value) {
  _has_bits_[0] |= 0x00010000u;
  has_explicit_builds_ = value;
}
inline void SlideNodeArchive::set_has_explicit_builds(bool value) {
  _internal_set_has_explicit_builds(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.has_explicit_builds)
}

// optional uint32 has_explicit_builds_cache_version = 27;
inline bool SlideNodeArchive::_internal_has_has_explicit_builds_cache_version() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_has_explicit_builds_cache_version() const {
  return _internal_has_has_explicit_builds_cache_version();
}
inline void SlideNodeArchive::clear_has_explicit_builds_cache_version() {
  has_explicit_builds_cache_version_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::_internal_has_explicit_builds_cache_version() const {
  return has_explicit_builds_cache_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideNodeArchive::has_explicit_builds_cache_version() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.has_explicit_builds_cache_version)
  return _internal_has_explicit_builds_cache_version();
}
inline void SlideNodeArchive::_internal_set_has_explicit_builds_cache_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  has_explicit_builds_cache_version_ = value;
}
inline void SlideNodeArchive::set_has_explicit_builds_cache_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_has_explicit_builds_cache_version(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.has_explicit_builds_cache_version)
}

// optional bool has_explicit_builds_is_up_to_date = 23 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_has_explicit_builds_is_up_to_date() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_has_explicit_builds_is_up_to_date() const {
  return _internal_has_has_explicit_builds_is_up_to_date();
}
inline void SlideNodeArchive::clear_has_explicit_builds_is_up_to_date() {
  has_explicit_builds_is_up_to_date_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool SlideNodeArchive::_internal_has_explicit_builds_is_up_to_date() const {
  return has_explicit_builds_is_up_to_date_;
}
inline bool SlideNodeArchive::has_explicit_builds_is_up_to_date() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.has_explicit_builds_is_up_to_date)
  return _internal_has_explicit_builds_is_up_to_date();
}
inline void SlideNodeArchive::_internal_set_has_explicit_builds_is_up_to_date(bool value) {
  _has_bits_[0] |= 0x00020000u;
  has_explicit_builds_is_up_to_date_ = value;
}
inline void SlideNodeArchive::set_has_explicit_builds_is_up_to_date(bool value) {
  _internal_set_has_explicit_builds_is_up_to_date(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.has_explicit_builds_is_up_to_date)
}

// repeated .KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry slideSpecificHyperlinkMap = 24;
inline int SlideNodeArchive::_internal_slidespecifichyperlinkmap_size() const {
  return slidespecifichyperlinkmap_.size();
}
inline int SlideNodeArchive::slidespecifichyperlinkmap_size() const {
  return _internal_slidespecifichyperlinkmap_size();
}
inline void SlideNodeArchive::clear_slidespecifichyperlinkmap() {
  slidespecifichyperlinkmap_.Clear();
}
inline ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry* SlideNodeArchive::mutable_slidespecifichyperlinkmap(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.slideSpecificHyperlinkMap)
  return slidespecifichyperlinkmap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry >*
SlideNodeArchive::mutable_slidespecifichyperlinkmap() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.slideSpecificHyperlinkMap)
  return &slidespecifichyperlinkmap_;
}
inline const ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry& SlideNodeArchive::_internal_slidespecifichyperlinkmap(int index) const {
  return slidespecifichyperlinkmap_.Get(index);
}
inline const ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry& SlideNodeArchive::slidespecifichyperlinkmap(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.slideSpecificHyperlinkMap)
  return _internal_slidespecifichyperlinkmap(index);
}
inline ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry* SlideNodeArchive::_internal_add_slidespecifichyperlinkmap() {
  return slidespecifichyperlinkmap_.Add();
}
inline ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry* SlideNodeArchive::add_slidespecifichyperlinkmap() {
  ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry* _add = _internal_add_slidespecifichyperlinkmap();
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.slideSpecificHyperlinkMap)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry >&
SlideNodeArchive::slidespecifichyperlinkmap() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.slideSpecificHyperlinkMap)
  return slidespecifichyperlinkmap_;
}

// optional bool has_background_alpha = 28;
inline bool SlideNodeArchive::_internal_has_has_background_alpha() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_has_background_alpha() const {
  return _internal_has_has_background_alpha();
}
inline void SlideNodeArchive::clear_has_background_alpha() {
  has_background_alpha_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool SlideNodeArchive::_internal_has_background_alpha() const {
  return has_background_alpha_;
}
inline bool SlideNodeArchive::has_background_alpha() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.has_background_alpha)
  return _internal_has_background_alpha();
}
inline void SlideNodeArchive::_internal_set_has_background_alpha(bool value) {
  _has_bits_[0] |= 0x00100000u;
  has_background_alpha_ = value;
}
inline void SlideNodeArchive::set_has_background_alpha(bool value) {
  _internal_set_has_background_alpha(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.has_background_alpha)
}

// optional .TSP.Reference database_thumbnail = 3 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_database_thumbnail() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || database_thumbnail_ != nullptr);
  return value;
}
inline bool SlideNodeArchive::has_database_thumbnail() const {
  return _internal_has_database_thumbnail();
}
inline const ::TSP::Reference& SlideNodeArchive::_internal_database_thumbnail() const {
  const ::TSP::Reference* p = database_thumbnail_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideNodeArchive::database_thumbnail() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.database_thumbnail)
  return _internal_database_thumbnail();
}
inline void SlideNodeArchive::unsafe_arena_set_allocated_database_thumbnail(
    ::TSP::Reference* database_thumbnail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_thumbnail_);
  }
  database_thumbnail_ = database_thumbnail;
  if (database_thumbnail) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideNodeArchive.database_thumbnail)
}
inline ::TSP::Reference* SlideNodeArchive::release_database_thumbnail() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = database_thumbnail_;
  database_thumbnail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideNodeArchive::unsafe_arena_release_database_thumbnail() {
  // @@protoc_insertion_point(field_release:KN.SlideNodeArchive.database_thumbnail)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = database_thumbnail_;
  database_thumbnail_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideNodeArchive::_internal_mutable_database_thumbnail() {
  _has_bits_[0] |= 0x00000008u;
  if (database_thumbnail_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    database_thumbnail_ = p;
  }
  return database_thumbnail_;
}
inline ::TSP::Reference* SlideNodeArchive::mutable_database_thumbnail() {
  ::TSP::Reference* _msg = _internal_mutable_database_thumbnail();
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.database_thumbnail)
  return _msg;
}
inline void SlideNodeArchive::set_allocated_database_thumbnail(::TSP::Reference* database_thumbnail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_thumbnail_);
  }
  if (database_thumbnail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_thumbnail));
    if (message_arena != submessage_arena) {
      database_thumbnail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_thumbnail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  database_thumbnail_ = database_thumbnail;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNodeArchive.database_thumbnail)
}

// repeated .TSP.Reference database_thumbnails = 9 [deprecated = true];
inline int SlideNodeArchive::_internal_database_thumbnails_size() const {
  return database_thumbnails_.size();
}
inline int SlideNodeArchive::database_thumbnails_size() const {
  return _internal_database_thumbnails_size();
}
inline ::TSP::Reference* SlideNodeArchive::mutable_database_thumbnails(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.database_thumbnails)
  return database_thumbnails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideNodeArchive::mutable_database_thumbnails() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.database_thumbnails)
  return &database_thumbnails_;
}
inline const ::TSP::Reference& SlideNodeArchive::_internal_database_thumbnails(int index) const {
  return database_thumbnails_.Get(index);
}
inline const ::TSP::Reference& SlideNodeArchive::database_thumbnails(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.database_thumbnails)
  return _internal_database_thumbnails(index);
}
inline ::TSP::Reference* SlideNodeArchive::_internal_add_database_thumbnails() {
  return database_thumbnails_.Add();
}
inline ::TSP::Reference* SlideNodeArchive::add_database_thumbnails() {
  ::TSP::Reference* _add = _internal_add_database_thumbnails();
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.database_thumbnails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideNodeArchive::database_thumbnails() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.database_thumbnails)
  return database_thumbnails_;
}

// -------------------------------------------------------------------

// DesktopUILayoutArchive

// optional bool sidebar_visible = 1;
inline bool DesktopUILayoutArchive::_internal_has_sidebar_visible() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_sidebar_visible() const {
  return _internal_has_sidebar_visible();
}
inline void DesktopUILayoutArchive::clear_sidebar_visible() {
  sidebar_visible_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DesktopUILayoutArchive::_internal_sidebar_visible() const {
  return sidebar_visible_;
}
inline bool DesktopUILayoutArchive::sidebar_visible() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.sidebar_visible)
  return _internal_sidebar_visible();
}
inline void DesktopUILayoutArchive::_internal_set_sidebar_visible(bool value) {
  _has_bits_[0] |= 0x00000002u;
  sidebar_visible_ = value;
}
inline void DesktopUILayoutArchive::set_sidebar_visible(bool value) {
  _internal_set_sidebar_visible(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.sidebar_visible)
}

// optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
inline bool DesktopUILayoutArchive::_internal_has_sidebar_view_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_sidebar_view_mode() const {
  return _internal_has_sidebar_view_mode();
}
inline void DesktopUILayoutArchive::clear_sidebar_view_mode() {
  sidebar_view_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::KN::DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::_internal_sidebar_view_mode() const {
  return static_cast< ::KN::DesktopUILayoutArchive_SidebarViewMode >(sidebar_view_mode_);
}
inline ::KN::DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::sidebar_view_mode() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.sidebar_view_mode)
  return _internal_sidebar_view_mode();
}
inline void DesktopUILayoutArchive::_internal_set_sidebar_view_mode(::KN::DesktopUILayoutArchive_SidebarViewMode value) {
  assert(::KN::DesktopUILayoutArchive_SidebarViewMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  sidebar_view_mode_ = value;
}
inline void DesktopUILayoutArchive::set_sidebar_view_mode(::KN::DesktopUILayoutArchive_SidebarViewMode value) {
  _internal_set_sidebar_view_mode(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.sidebar_view_mode)
}

// optional bool notes_visible = 3;
inline bool DesktopUILayoutArchive::_internal_has_notes_visible() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_notes_visible() const {
  return _internal_has_notes_visible();
}
inline void DesktopUILayoutArchive::clear_notes_visible() {
  notes_visible_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DesktopUILayoutArchive::_internal_notes_visible() const {
  return notes_visible_;
}
inline bool DesktopUILayoutArchive::notes_visible() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.notes_visible)
  return _internal_notes_visible();
}
inline void DesktopUILayoutArchive::_internal_set_notes_visible(bool value) {
  _has_bits_[0] |= 0x00000004u;
  notes_visible_ = value;
}
inline void DesktopUILayoutArchive::set_notes_visible(bool value) {
  _internal_set_notes_visible(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.notes_visible)
}

// optional bool light_table_visible = 5;
inline bool DesktopUILayoutArchive::_internal_has_light_table_visible() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_light_table_visible() const {
  return _internal_has_light_table_visible();
}
inline void DesktopUILayoutArchive::clear_light_table_visible() {
  light_table_visible_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DesktopUILayoutArchive::_internal_light_table_visible() const {
  return light_table_visible_;
}
inline bool DesktopUILayoutArchive::light_table_visible() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.light_table_visible)
  return _internal_light_table_visible();
}
inline void DesktopUILayoutArchive::_internal_set_light_table_visible(bool value) {
  _has_bits_[0] |= 0x00000008u;
  light_table_visible_ = value;
}
inline void DesktopUILayoutArchive::set_light_table_visible(bool value) {
  _internal_set_light_table_visible(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.light_table_visible)
}

// optional bool inspector_pane_visible = 6 [default = true];
inline bool DesktopUILayoutArchive::_internal_has_inspector_pane_visible() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_inspector_pane_visible() const {
  return _internal_has_inspector_pane_visible();
}
inline void DesktopUILayoutArchive::clear_inspector_pane_visible() {
  inspector_pane_visible_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool DesktopUILayoutArchive::_internal_inspector_pane_visible() const {
  return inspector_pane_visible_;
}
inline bool DesktopUILayoutArchive::inspector_pane_visible() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.inspector_pane_visible)
  return _internal_inspector_pane_visible();
}
inline void DesktopUILayoutArchive::_internal_set_inspector_pane_visible(bool value) {
  _has_bits_[0] |= 0x00000100u;
  inspector_pane_visible_ = value;
}
inline void DesktopUILayoutArchive::set_inspector_pane_visible(bool value) {
  _internal_set_inspector_pane_visible(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.inspector_pane_visible)
}

// optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
inline bool DesktopUILayoutArchive::_internal_has_inspector_pane_view_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_inspector_pane_view_mode() const {
  return _internal_has_inspector_pane_view_mode();
}
inline void DesktopUILayoutArchive::clear_inspector_pane_view_mode() {
  inspector_pane_view_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::KN::DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::_internal_inspector_pane_view_mode() const {
  return static_cast< ::KN::DesktopUILayoutArchive_InspectorPaneViewMode >(inspector_pane_view_mode_);
}
inline ::KN::DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::inspector_pane_view_mode() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.inspector_pane_view_mode)
  return _internal_inspector_pane_view_mode();
}
inline void DesktopUILayoutArchive::_internal_set_inspector_pane_view_mode(::KN::DesktopUILayoutArchive_InspectorPaneViewMode value) {
  assert(::KN::DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  inspector_pane_view_mode_ = value;
}
inline void DesktopUILayoutArchive::set_inspector_pane_view_mode(::KN::DesktopUILayoutArchive_InspectorPaneViewMode value) {
  _internal_set_inspector_pane_view_mode(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.inspector_pane_view_mode)
}

// optional bool showing_template_slides = 8;
inline bool DesktopUILayoutArchive::_internal_has_showing_template_slides() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_showing_template_slides() const {
  return _internal_has_showing_template_slides();
}
inline void DesktopUILayoutArchive::clear_showing_template_slides() {
  showing_template_slides_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DesktopUILayoutArchive::_internal_showing_template_slides() const {
  return showing_template_slides_;
}
inline bool DesktopUILayoutArchive::showing_template_slides() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.showing_template_slides)
  return _internal_showing_template_slides();
}
inline void DesktopUILayoutArchive::_internal_set_showing_template_slides(bool value) {
  _has_bits_[0] |= 0x00000010u;
  showing_template_slides_ = value;
}
inline void DesktopUILayoutArchive::set_showing_template_slides(bool value) {
  _internal_set_showing_template_slides(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.showing_template_slides)
}

// optional bool inspector_pane_autohidden = 9;
inline bool DesktopUILayoutArchive::_internal_has_inspector_pane_autohidden() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_inspector_pane_autohidden() const {
  return _internal_has_inspector_pane_autohidden();
}
inline void DesktopUILayoutArchive::clear_inspector_pane_autohidden() {
  inspector_pane_autohidden_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool DesktopUILayoutArchive::_internal_inspector_pane_autohidden() const {
  return inspector_pane_autohidden_;
}
inline bool DesktopUILayoutArchive::inspector_pane_autohidden() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.inspector_pane_autohidden)
  return _internal_inspector_pane_autohidden();
}
inline void DesktopUILayoutArchive::_internal_set_inspector_pane_autohidden(bool value) {
  _has_bits_[0] |= 0x00000040u;
  inspector_pane_autohidden_ = value;
}
inline void DesktopUILayoutArchive::set_inspector_pane_autohidden(bool value) {
  _internal_set_inspector_pane_autohidden(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.inspector_pane_autohidden)
}

// optional bool element_list_visible = 10;
inline bool DesktopUILayoutArchive::_internal_has_element_list_visible() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_element_list_visible() const {
  return _internal_has_element_list_visible();
}
inline void DesktopUILayoutArchive::clear_element_list_visible() {
  element_list_visible_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool DesktopUILayoutArchive::_internal_element_list_visible() const {
  return element_list_visible_;
}
inline bool DesktopUILayoutArchive::element_list_visible() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.element_list_visible)
  return _internal_element_list_visible();
}
inline void DesktopUILayoutArchive::_internal_set_element_list_visible(bool value) {
  _has_bits_[0] |= 0x00000080u;
  element_list_visible_ = value;
}
inline void DesktopUILayoutArchive::set_element_list_visible(bool value) {
  _internal_set_element_list_visible(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.element_list_visible)
}

// -------------------------------------------------------------------

// UIStateArchive

// optional .TSP.Reference slideNodeToEdit = 1 [deprecated = true];
inline bool UIStateArchive::_internal_has_slidenodetoedit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slidenodetoedit_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_slidenodetoedit() const {
  return _internal_has_slidenodetoedit();
}
inline const ::TSP::Reference& UIStateArchive::_internal_slidenodetoedit() const {
  const ::TSP::Reference* p = slidenodetoedit_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::slidenodetoedit() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.slideNodeToEdit)
  return _internal_slidenodetoedit();
}
inline void UIStateArchive::unsafe_arena_set_allocated_slidenodetoedit(
    ::TSP::Reference* slidenodetoedit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenodetoedit_);
  }
  slidenodetoedit_ = slidenodetoedit;
  if (slidenodetoedit) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.slideNodeToEdit)
}
inline ::TSP::Reference* UIStateArchive::release_slidenodetoedit() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slidenodetoedit_;
  slidenodetoedit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_slidenodetoedit() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.slideNodeToEdit)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slidenodetoedit_;
  slidenodetoedit_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_slidenodetoedit() {
  _has_bits_[0] |= 0x00000001u;
  if (slidenodetoedit_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    slidenodetoedit_ = p;
  }
  return slidenodetoedit_;
}
inline ::TSP::Reference* UIStateArchive::mutable_slidenodetoedit() {
  ::TSP::Reference* _msg = _internal_mutable_slidenodetoedit();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.slideNodeToEdit)
  return _msg;
}
inline void UIStateArchive::set_allocated_slidenodetoedit(::TSP::Reference* slidenodetoedit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenodetoedit_);
  }
  if (slidenodetoedit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenodetoedit));
    if (message_arena != submessage_arena) {
      slidenodetoedit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenodetoedit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slidenodetoedit_ = slidenodetoedit;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.slideNodeToEdit)
}

// optional .TSP.Reference deprecated_template_slide_node_to_apply = 2;
inline bool UIStateArchive::_internal_has_deprecated_template_slide_node_to_apply() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_template_slide_node_to_apply_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_deprecated_template_slide_node_to_apply() const {
  return _internal_has_deprecated_template_slide_node_to_apply();
}
inline const ::TSP::Reference& UIStateArchive::_internal_deprecated_template_slide_node_to_apply() const {
  const ::TSP::Reference* p = deprecated_template_slide_node_to_apply_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::deprecated_template_slide_node_to_apply() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.deprecated_template_slide_node_to_apply)
  return _internal_deprecated_template_slide_node_to_apply();
}
inline void UIStateArchive::unsafe_arena_set_allocated_deprecated_template_slide_node_to_apply(
    ::TSP::Reference* deprecated_template_slide_node_to_apply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_template_slide_node_to_apply_);
  }
  deprecated_template_slide_node_to_apply_ = deprecated_template_slide_node_to_apply;
  if (deprecated_template_slide_node_to_apply) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.deprecated_template_slide_node_to_apply)
}
inline ::TSP::Reference* UIStateArchive::release_deprecated_template_slide_node_to_apply() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = deprecated_template_slide_node_to_apply_;
  deprecated_template_slide_node_to_apply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_deprecated_template_slide_node_to_apply() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.deprecated_template_slide_node_to_apply)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = deprecated_template_slide_node_to_apply_;
  deprecated_template_slide_node_to_apply_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_deprecated_template_slide_node_to_apply() {
  _has_bits_[0] |= 0x00000002u;
  if (deprecated_template_slide_node_to_apply_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    deprecated_template_slide_node_to_apply_ = p;
  }
  return deprecated_template_slide_node_to_apply_;
}
inline ::TSP::Reference* UIStateArchive::mutable_deprecated_template_slide_node_to_apply() {
  ::TSP::Reference* _msg = _internal_mutable_deprecated_template_slide_node_to_apply();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.deprecated_template_slide_node_to_apply)
  return _msg;
}
inline void UIStateArchive::set_allocated_deprecated_template_slide_node_to_apply(::TSP::Reference* deprecated_template_slide_node_to_apply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_template_slide_node_to_apply_);
  }
  if (deprecated_template_slide_node_to_apply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_template_slide_node_to_apply));
    if (message_arena != submessage_arena) {
      deprecated_template_slide_node_to_apply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_template_slide_node_to_apply, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  deprecated_template_slide_node_to_apply_ = deprecated_template_slide_node_to_apply;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.deprecated_template_slide_node_to_apply)
}

// optional .TSP.Size deprecated_slideThumbnailSize = 3;
inline bool UIStateArchive::_internal_has_deprecated_slidethumbnailsize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_slidethumbnailsize_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_deprecated_slidethumbnailsize() const {
  return _internal_has_deprecated_slidethumbnailsize();
}
inline const ::TSP::Size& UIStateArchive::_internal_deprecated_slidethumbnailsize() const {
  const ::TSP::Size* p = deprecated_slidethumbnailsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& UIStateArchive::deprecated_slidethumbnailsize() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.deprecated_slideThumbnailSize)
  return _internal_deprecated_slidethumbnailsize();
}
inline void UIStateArchive::unsafe_arena_set_allocated_deprecated_slidethumbnailsize(
    ::TSP::Size* deprecated_slidethumbnailsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_slidethumbnailsize_);
  }
  deprecated_slidethumbnailsize_ = deprecated_slidethumbnailsize;
  if (deprecated_slidethumbnailsize) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.deprecated_slideThumbnailSize)
}
inline ::TSP::Size* UIStateArchive::release_deprecated_slidethumbnailsize() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = deprecated_slidethumbnailsize_;
  deprecated_slidethumbnailsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* UIStateArchive::unsafe_arena_release_deprecated_slidethumbnailsize() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.deprecated_slideThumbnailSize)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = deprecated_slidethumbnailsize_;
  deprecated_slidethumbnailsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* UIStateArchive::_internal_mutable_deprecated_slidethumbnailsize() {
  _has_bits_[0] |= 0x00000004u;
  if (deprecated_slidethumbnailsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    deprecated_slidethumbnailsize_ = p;
  }
  return deprecated_slidethumbnailsize_;
}
inline ::TSP::Size* UIStateArchive::mutable_deprecated_slidethumbnailsize() {
  ::TSP::Size* _msg = _internal_mutable_deprecated_slidethumbnailsize();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.deprecated_slideThumbnailSize)
  return _msg;
}
inline void UIStateArchive::set_allocated_deprecated_slidethumbnailsize(::TSP::Size* deprecated_slidethumbnailsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_slidethumbnailsize_);
  }
  if (deprecated_slidethumbnailsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_slidethumbnailsize));
    if (message_arena != submessage_arena) {
      deprecated_slidethumbnailsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_slidethumbnailsize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deprecated_slidethumbnailsize_ = deprecated_slidethumbnailsize;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.deprecated_slideThumbnailSize)
}

// optional float canvasViewScale = 4;
inline bool UIStateArchive::_internal_has_canvasviewscale() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool UIStateArchive::has_canvasviewscale() const {
  return _internal_has_canvasviewscale();
}
inline void UIStateArchive::clear_canvasviewscale() {
  canvasviewscale_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float UIStateArchive::_internal_canvasviewscale() const {
  return canvasviewscale_;
}
inline float UIStateArchive::canvasviewscale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.canvasViewScale)
  return _internal_canvasviewscale();
}
inline void UIStateArchive::_internal_set_canvasviewscale(float value) {
  _has_bits_[0] |= 0x00002000u;
  canvasviewscale_ = value;
}
inline void UIStateArchive::set_canvasviewscale(float value) {
  _internal_set_canvasviewscale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.canvasViewScale)
}

// optional .TSP.Point canvasOffset = 5;
inline bool UIStateArchive::_internal_has_canvasoffset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || canvasoffset_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_canvasoffset() const {
  return _internal_has_canvasoffset();
}
inline const ::TSP::Point& UIStateArchive::_internal_canvasoffset() const {
  const ::TSP::Point* p = canvasoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::canvasoffset() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.canvasOffset)
  return _internal_canvasoffset();
}
inline void UIStateArchive::unsafe_arena_set_allocated_canvasoffset(
    ::TSP::Point* canvasoffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvasoffset_);
  }
  canvasoffset_ = canvasoffset;
  if (canvasoffset) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.canvasOffset)
}
inline ::TSP::Point* UIStateArchive::release_canvasoffset() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = canvasoffset_;
  canvasoffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_canvasoffset() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.canvasOffset)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = canvasoffset_;
  canvasoffset_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_canvasoffset() {
  _has_bits_[0] |= 0x00000008u;
  if (canvasoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    canvasoffset_ = p;
  }
  return canvasoffset_;
}
inline ::TSP::Point* UIStateArchive::mutable_canvasoffset() {
  ::TSP::Point* _msg = _internal_mutable_canvasoffset();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.canvasOffset)
  return _msg;
}
inline void UIStateArchive::set_allocated_canvasoffset(::TSP::Point* canvasoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvasoffset_);
  }
  if (canvasoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvasoffset));
    if (message_arena != submessage_arena) {
      canvasoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, canvasoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  canvasoffset_ = canvasoffset;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.canvasOffset)
}

// repeated .TSP.Reference selectedSlideNodes = 6 [deprecated = true];
inline int UIStateArchive::_internal_selectedslidenodes_size() const {
  return selectedslidenodes_.size();
}
inline int UIStateArchive::selectedslidenodes_size() const {
  return _internal_selectedslidenodes_size();
}
inline ::TSP::Reference* UIStateArchive::mutable_selectedslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.selectedSlideNodes)
  return selectedslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateArchive::mutable_selectedslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateArchive.selectedSlideNodes)
  return &selectedslidenodes_;
}
inline const ::TSP::Reference& UIStateArchive::_internal_selectedslidenodes(int index) const {
  return selectedslidenodes_.Get(index);
}
inline const ::TSP::Reference& UIStateArchive::selectedslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.selectedSlideNodes)
  return _internal_selectedslidenodes(index);
}
inline ::TSP::Reference* UIStateArchive::_internal_add_selectedslidenodes() {
  return selectedslidenodes_.Add();
}
inline ::TSP::Reference* UIStateArchive::add_selectedslidenodes() {
  ::TSP::Reference* _add = _internal_add_selectedslidenodes();
  // @@protoc_insertion_point(field_add:KN.UIStateArchive.selectedSlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateArchive::selectedslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateArchive.selectedSlideNodes)
  return selectedslidenodes_;
}

// optional float iPhoneCanvasViewScale = 7 [deprecated = true];
inline bool UIStateArchive::_internal_has_iphonecanvasviewscale() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool UIStateArchive::has_iphonecanvasviewscale() const {
  return _internal_has_iphonecanvasviewscale();
}
inline void UIStateArchive::clear_iphonecanvasviewscale() {
  iphonecanvasviewscale_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float UIStateArchive::_internal_iphonecanvasviewscale() const {
  return iphonecanvasviewscale_;
}
inline float UIStateArchive::iphonecanvasviewscale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.iPhoneCanvasViewScale)
  return _internal_iphonecanvasviewscale();
}
inline void UIStateArchive::_internal_set_iphonecanvasviewscale(float value) {
  _has_bits_[0] |= 0x00004000u;
  iphonecanvasviewscale_ = value;
}
inline void UIStateArchive::set_iphonecanvasviewscale(float value) {
  _internal_set_iphonecanvasviewscale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.iPhoneCanvasViewScale)
}

// optional .TSP.Point iPhoneCanvasOffset = 8 [deprecated = true];
inline bool UIStateArchive::_internal_has_iphonecanvasoffset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || iphonecanvasoffset_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_iphonecanvasoffset() const {
  return _internal_has_iphonecanvasoffset();
}
inline const ::TSP::Point& UIStateArchive::_internal_iphonecanvasoffset() const {
  const ::TSP::Point* p = iphonecanvasoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::iphonecanvasoffset() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.iPhoneCanvasOffset)
  return _internal_iphonecanvasoffset();
}
inline void UIStateArchive::unsafe_arena_set_allocated_iphonecanvasoffset(
    ::TSP::Point* iphonecanvasoffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iphonecanvasoffset_);
  }
  iphonecanvasoffset_ = iphonecanvasoffset;
  if (iphonecanvasoffset) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.iPhoneCanvasOffset)
}
inline ::TSP::Point* UIStateArchive::release_iphonecanvasoffset() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Point* temp = iphonecanvasoffset_;
  iphonecanvasoffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_iphonecanvasoffset() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.iPhoneCanvasOffset)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Point* temp = iphonecanvasoffset_;
  iphonecanvasoffset_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_iphonecanvasoffset() {
  _has_bits_[0] |= 0x00000010u;
  if (iphonecanvasoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    iphonecanvasoffset_ = p;
  }
  return iphonecanvasoffset_;
}
inline ::TSP::Point* UIStateArchive::mutable_iphonecanvasoffset() {
  ::TSP::Point* _msg = _internal_mutable_iphonecanvasoffset();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.iPhoneCanvasOffset)
  return _msg;
}
inline void UIStateArchive::set_allocated_iphonecanvasoffset(::TSP::Point* iphonecanvasoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(iphonecanvasoffset_);
  }
  if (iphonecanvasoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iphonecanvasoffset));
    if (message_arena != submessage_arena) {
      iphonecanvasoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iphonecanvasoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  iphonecanvasoffset_ = iphonecanvasoffset;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.iPhoneCanvasOffset)
}

// optional float iPhone568CanvasViewScale = 9 [deprecated = true];
inline bool UIStateArchive::_internal_has_iphone568canvasviewscale() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool UIStateArchive::has_iphone568canvasviewscale() const {
  return _internal_has_iphone568canvasviewscale();
}
inline void UIStateArchive::clear_iphone568canvasviewscale() {
  iphone568canvasviewscale_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float UIStateArchive::_internal_iphone568canvasviewscale() const {
  return iphone568canvasviewscale_;
}
inline float UIStateArchive::iphone568canvasviewscale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.iPhone568CanvasViewScale)
  return _internal_iphone568canvasviewscale();
}
inline void UIStateArchive::_internal_set_iphone568canvasviewscale(float value) {
  _has_bits_[0] |= 0x00008000u;
  iphone568canvasviewscale_ = value;
}
inline void UIStateArchive::set_iphone568canvasviewscale(float value) {
  _internal_set_iphone568canvasviewscale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.iPhone568CanvasViewScale)
}

// optional .TSP.Point iPhone568CanvasOffset = 10 [deprecated = true];
inline bool UIStateArchive::_internal_has_iphone568canvasoffset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || iphone568canvasoffset_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_iphone568canvasoffset() const {
  return _internal_has_iphone568canvasoffset();
}
inline const ::TSP::Point& UIStateArchive::_internal_iphone568canvasoffset() const {
  const ::TSP::Point* p = iphone568canvasoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::iphone568canvasoffset() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.iPhone568CanvasOffset)
  return _internal_iphone568canvasoffset();
}
inline void UIStateArchive::unsafe_arena_set_allocated_iphone568canvasoffset(
    ::TSP::Point* iphone568canvasoffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iphone568canvasoffset_);
  }
  iphone568canvasoffset_ = iphone568canvasoffset;
  if (iphone568canvasoffset) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.iPhone568CanvasOffset)
}
inline ::TSP::Point* UIStateArchive::release_iphone568canvasoffset() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Point* temp = iphone568canvasoffset_;
  iphone568canvasoffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_iphone568canvasoffset() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.iPhone568CanvasOffset)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Point* temp = iphone568canvasoffset_;
  iphone568canvasoffset_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_iphone568canvasoffset() {
  _has_bits_[0] |= 0x00000020u;
  if (iphone568canvasoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    iphone568canvasoffset_ = p;
  }
  return iphone568canvasoffset_;
}
inline ::TSP::Point* UIStateArchive::mutable_iphone568canvasoffset() {
  ::TSP::Point* _msg = _internal_mutable_iphone568canvasoffset();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.iPhone568CanvasOffset)
  return _msg;
}
inline void UIStateArchive::set_allocated_iphone568canvasoffset(::TSP::Point* iphone568canvasoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(iphone568canvasoffset_);
  }
  if (iphone568canvasoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iphone568canvasoffset));
    if (message_arena != submessage_arena) {
      iphone568canvasoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iphone568canvasoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  iphone568canvasoffset_ = iphone568canvasoffset;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.iPhone568CanvasOffset)
}

// optional .TSP.Reference desktop_ui_layout = 11;
inline bool UIStateArchive::_internal_has_desktop_ui_layout() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || desktop_ui_layout_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_ui_layout() const {
  return _internal_has_desktop_ui_layout();
}
inline const ::TSP::Reference& UIStateArchive::_internal_desktop_ui_layout() const {
  const ::TSP::Reference* p = desktop_ui_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::desktop_ui_layout() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_ui_layout)
  return _internal_desktop_ui_layout();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_ui_layout(
    ::TSP::Reference* desktop_ui_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_ui_layout_);
  }
  desktop_ui_layout_ = desktop_ui_layout;
  if (desktop_ui_layout) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.desktop_ui_layout)
}
inline ::TSP::Reference* UIStateArchive::release_desktop_ui_layout() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = desktop_ui_layout_;
  desktop_ui_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_desktop_ui_layout() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.desktop_ui_layout)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = desktop_ui_layout_;
  desktop_ui_layout_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_desktop_ui_layout() {
  _has_bits_[0] |= 0x00000040u;
  if (desktop_ui_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    desktop_ui_layout_ = p;
  }
  return desktop_ui_layout_;
}
inline ::TSP::Reference* UIStateArchive::mutable_desktop_ui_layout() {
  ::TSP::Reference* _msg = _internal_mutable_desktop_ui_layout();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.desktop_ui_layout)
  return _msg;
}
inline void UIStateArchive::set_allocated_desktop_ui_layout(::TSP::Reference* desktop_ui_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_ui_layout_);
  }
  if (desktop_ui_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_ui_layout));
    if (message_arena != submessage_arena) {
      desktop_ui_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_ui_layout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  desktop_ui_layout_ = desktop_ui_layout;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.desktop_ui_layout)
}

// optional bool desktop_slide_view_content_fits_window = 12;
inline bool UIStateArchive::_internal_has_desktop_slide_view_content_fits_window() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_slide_view_content_fits_window() const {
  return _internal_has_desktop_slide_view_content_fits_window();
}
inline void UIStateArchive::clear_desktop_slide_view_content_fits_window() {
  desktop_slide_view_content_fits_window_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool UIStateArchive::_internal_desktop_slide_view_content_fits_window() const {
  return desktop_slide_view_content_fits_window_;
}
inline bool UIStateArchive::desktop_slide_view_content_fits_window() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_slide_view_content_fits_window)
  return _internal_desktop_slide_view_content_fits_window();
}
inline void UIStateArchive::_internal_set_desktop_slide_view_content_fits_window(bool value) {
  _has_bits_[0] |= 0x00040000u;
  desktop_slide_view_content_fits_window_ = value;
}
inline void UIStateArchive::set_desktop_slide_view_content_fits_window(bool value) {
  _internal_set_desktop_slide_view_content_fits_window(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_slide_view_content_fits_window)
}

// optional float desktop_canvas_view_scale = 13;
inline bool UIStateArchive::_internal_has_desktop_canvas_view_scale() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_canvas_view_scale() const {
  return _internal_has_desktop_canvas_view_scale();
}
inline void UIStateArchive::clear_desktop_canvas_view_scale() {
  desktop_canvas_view_scale_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float UIStateArchive::_internal_desktop_canvas_view_scale() const {
  return desktop_canvas_view_scale_;
}
inline float UIStateArchive::desktop_canvas_view_scale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_canvas_view_scale)
  return _internal_desktop_canvas_view_scale();
}
inline void UIStateArchive::_internal_set_desktop_canvas_view_scale(float value) {
  _has_bits_[0] |= 0x00010000u;
  desktop_canvas_view_scale_ = value;
}
inline void UIStateArchive::set_desktop_canvas_view_scale(float value) {
  _internal_set_desktop_canvas_view_scale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_canvas_view_scale)
}

// optional .TSP.Point desktop_canvas_offset = 21;
inline bool UIStateArchive::_internal_has_desktop_canvas_offset() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || desktop_canvas_offset_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_canvas_offset() const {
  return _internal_has_desktop_canvas_offset();
}
inline const ::TSP::Point& UIStateArchive::_internal_desktop_canvas_offset() const {
  const ::TSP::Point* p = desktop_canvas_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::desktop_canvas_offset() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_canvas_offset)
  return _internal_desktop_canvas_offset();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_canvas_offset(
    ::TSP::Point* desktop_canvas_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_canvas_offset_);
  }
  desktop_canvas_offset_ = desktop_canvas_offset;
  if (desktop_canvas_offset) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.desktop_canvas_offset)
}
inline ::TSP::Point* UIStateArchive::release_desktop_canvas_offset() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Point* temp = desktop_canvas_offset_;
  desktop_canvas_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_desktop_canvas_offset() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.desktop_canvas_offset)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Point* temp = desktop_canvas_offset_;
  desktop_canvas_offset_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_desktop_canvas_offset() {
  _has_bits_[0] |= 0x00000080u;
  if (desktop_canvas_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    desktop_canvas_offset_ = p;
  }
  return desktop_canvas_offset_;
}
inline ::TSP::Point* UIStateArchive::mutable_desktop_canvas_offset() {
  ::TSP::Point* _msg = _internal_mutable_desktop_canvas_offset();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.desktop_canvas_offset)
  return _msg;
}
inline void UIStateArchive::set_allocated_desktop_canvas_offset(::TSP::Point* desktop_canvas_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_canvas_offset_);
  }
  if (desktop_canvas_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_canvas_offset));
    if (message_arena != submessage_arena) {
      desktop_canvas_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_canvas_offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  desktop_canvas_offset_ = desktop_canvas_offset;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.desktop_canvas_offset)
}

// optional float light_table_zoom_scale = 14;
inline bool UIStateArchive::_internal_has_light_table_zoom_scale() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool UIStateArchive::has_light_table_zoom_scale() const {
  return _internal_has_light_table_zoom_scale();
}
inline void UIStateArchive::clear_light_table_zoom_scale() {
  light_table_zoom_scale_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float UIStateArchive::_internal_light_table_zoom_scale() const {
  return light_table_zoom_scale_;
}
inline float UIStateArchive::light_table_zoom_scale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.light_table_zoom_scale)
  return _internal_light_table_zoom_scale();
}
inline void UIStateArchive::_internal_set_light_table_zoom_scale(float value) {
  _has_bits_[0] |= 0x00020000u;
  light_table_zoom_scale_ = value;
}
inline void UIStateArchive::set_light_table_zoom_scale(float value) {
  _internal_set_light_table_zoom_scale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.light_table_zoom_scale)
}

// repeated .TSCH.ChartUIState chart_ui_state = 15;
inline int UIStateArchive::_internal_chart_ui_state_size() const {
  return chart_ui_state_.size();
}
inline int UIStateArchive::chart_ui_state_size() const {
  return _internal_chart_ui_state_size();
}
inline ::TSCH::ChartUIState* UIStateArchive::mutable_chart_ui_state(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.chart_ui_state)
  return chart_ui_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
UIStateArchive::mutable_chart_ui_state() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateArchive.chart_ui_state)
  return &chart_ui_state_;
}
inline const ::TSCH::ChartUIState& UIStateArchive::_internal_chart_ui_state(int index) const {
  return chart_ui_state_.Get(index);
}
inline const ::TSCH::ChartUIState& UIStateArchive::chart_ui_state(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.chart_ui_state)
  return _internal_chart_ui_state(index);
}
inline ::TSCH::ChartUIState* UIStateArchive::_internal_add_chart_ui_state() {
  return chart_ui_state_.Add();
}
inline ::TSCH::ChartUIState* UIStateArchive::add_chart_ui_state() {
  ::TSCH::ChartUIState* _add = _internal_add_chart_ui_state();
  // @@protoc_insertion_point(field_add:KN.UIStateArchive.chart_ui_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
UIStateArchive::chart_ui_state() const {
  // @@protoc_insertion_point(field_list:KN.UIStateArchive.chart_ui_state)
  return chart_ui_state_;
}

// optional bool show_slide_guides = 16;
inline bool UIStateArchive::_internal_has_show_slide_guides() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool UIStateArchive::has_show_slide_guides() const {
  return _internal_has_show_slide_guides();
}
inline void UIStateArchive::clear_show_slide_guides() {
  show_slide_guides_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool UIStateArchive::_internal_show_slide_guides() const {
  return show_slide_guides_;
}
inline bool UIStateArchive::show_slide_guides() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.show_slide_guides)
  return _internal_show_slide_guides();
}
inline void UIStateArchive::_internal_set_show_slide_guides(bool value) {
  _has_bits_[0] |= 0x00080000u;
  show_slide_guides_ = value;
}
inline void UIStateArchive::set_show_slide_guides(bool value) {
  _internal_set_show_slide_guides(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.show_slide_guides)
}

// optional bool show_template_guides = 17;
inline bool UIStateArchive::_internal_has_show_template_guides() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool UIStateArchive::has_show_template_guides() const {
  return _internal_has_show_template_guides();
}
inline void UIStateArchive::clear_show_template_guides() {
  show_template_guides_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool UIStateArchive::_internal_show_template_guides() const {
  return show_template_guides_;
}
inline bool UIStateArchive::show_template_guides() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.show_template_guides)
  return _internal_show_template_guides();
}
inline void UIStateArchive::_internal_set_show_template_guides(bool value) {
  _has_bits_[0] |= 0x00100000u;
  show_template_guides_ = value;
}
inline void UIStateArchive::set_show_template_guides(bool value) {
  _internal_set_show_template_guides(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.show_template_guides)
}

// optional bool shows_comments = 18;
inline bool UIStateArchive::_internal_has_shows_comments() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_comments() const {
  return _internal_has_shows_comments();
}
inline void UIStateArchive::clear_shows_comments() {
  shows_comments_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool UIStateArchive::_internal_shows_comments() const {
  return shows_comments_;
}
inline bool UIStateArchive::shows_comments() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.shows_comments)
  return _internal_shows_comments();
}
inline void UIStateArchive::_internal_set_shows_comments(bool value) {
  _has_bits_[0] |= 0x00200000u;
  shows_comments_ = value;
}
inline void UIStateArchive::set_shows_comments(bool value) {
  _internal_set_shows_comments(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.shows_comments)
}

// optional bool comments_printing_toggle_enabled = 39;
inline bool UIStateArchive::_internal_has_comments_printing_toggle_enabled() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_comments_printing_toggle_enabled() const {
  return _internal_has_comments_printing_toggle_enabled();
}
inline void UIStateArchive::clear_comments_printing_toggle_enabled() {
  comments_printing_toggle_enabled_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool UIStateArchive::_internal_comments_printing_toggle_enabled() const {
  return comments_printing_toggle_enabled_;
}
inline bool UIStateArchive::comments_printing_toggle_enabled() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.comments_printing_toggle_enabled)
  return _internal_comments_printing_toggle_enabled();
}
inline void UIStateArchive::_internal_set_comments_printing_toggle_enabled(bool value) {
  _has_bits_[0] |= 0x02000000u;
  comments_printing_toggle_enabled_ = value;
}
inline void UIStateArchive::set_comments_printing_toggle_enabled(bool value) {
  _internal_set_comments_printing_toggle_enabled(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.comments_printing_toggle_enabled)
}

// repeated .TSP.Reference collapsed_slide_nodes = 19;
inline int UIStateArchive::_internal_collapsed_slide_nodes_size() const {
  return collapsed_slide_nodes_.size();
}
inline int UIStateArchive::collapsed_slide_nodes_size() const {
  return _internal_collapsed_slide_nodes_size();
}
inline ::TSP::Reference* UIStateArchive::mutable_collapsed_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.collapsed_slide_nodes)
  return collapsed_slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateArchive::mutable_collapsed_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateArchive.collapsed_slide_nodes)
  return &collapsed_slide_nodes_;
}
inline const ::TSP::Reference& UIStateArchive::_internal_collapsed_slide_nodes(int index) const {
  return collapsed_slide_nodes_.Get(index);
}
inline const ::TSP::Reference& UIStateArchive::collapsed_slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.collapsed_slide_nodes)
  return _internal_collapsed_slide_nodes(index);
}
inline ::TSP::Reference* UIStateArchive::_internal_add_collapsed_slide_nodes() {
  return collapsed_slide_nodes_.Add();
}
inline ::TSP::Reference* UIStateArchive::add_collapsed_slide_nodes() {
  ::TSP::Reference* _add = _internal_add_collapsed_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.UIStateArchive.collapsed_slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateArchive::collapsed_slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateArchive.collapsed_slide_nodes)
  return collapsed_slide_nodes_;
}

// repeated .TSP.Reference outline_collapsed_slide_nodes = 28;
inline int UIStateArchive::_internal_outline_collapsed_slide_nodes_size() const {
  return outline_collapsed_slide_nodes_.size();
}
inline int UIStateArchive::outline_collapsed_slide_nodes_size() const {
  return _internal_outline_collapsed_slide_nodes_size();
}
inline ::TSP::Reference* UIStateArchive::mutable_outline_collapsed_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.outline_collapsed_slide_nodes)
  return outline_collapsed_slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateArchive::mutable_outline_collapsed_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateArchive.outline_collapsed_slide_nodes)
  return &outline_collapsed_slide_nodes_;
}
inline const ::TSP::Reference& UIStateArchive::_internal_outline_collapsed_slide_nodes(int index) const {
  return outline_collapsed_slide_nodes_.Get(index);
}
inline const ::TSP::Reference& UIStateArchive::outline_collapsed_slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.outline_collapsed_slide_nodes)
  return _internal_outline_collapsed_slide_nodes(index);
}
inline ::TSP::Reference* UIStateArchive::_internal_add_outline_collapsed_slide_nodes() {
  return outline_collapsed_slide_nodes_.Add();
}
inline ::TSP::Reference* UIStateArchive::add_outline_collapsed_slide_nodes() {
  ::TSP::Reference* _add = _internal_add_outline_collapsed_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.UIStateArchive.outline_collapsed_slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateArchive::outline_collapsed_slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateArchive.outline_collapsed_slide_nodes)
  return outline_collapsed_slide_nodes_;
}

// repeated .TSP.Reference outline_has_body_slide_nodes = 30;
inline int UIStateArchive::_internal_outline_has_body_slide_nodes_size() const {
  return outline_has_body_slide_nodes_.size();
}
inline int UIStateArchive::outline_has_body_slide_nodes_size() const {
  return _internal_outline_has_body_slide_nodes_size();
}
inline ::TSP::Reference* UIStateArchive::mutable_outline_has_body_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.outline_has_body_slide_nodes)
  return outline_has_body_slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateArchive::mutable_outline_has_body_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateArchive.outline_has_body_slide_nodes)
  return &outline_has_body_slide_nodes_;
}
inline const ::TSP::Reference& UIStateArchive::_internal_outline_has_body_slide_nodes(int index) const {
  return outline_has_body_slide_nodes_.Get(index);
}
inline const ::TSP::Reference& UIStateArchive::outline_has_body_slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.outline_has_body_slide_nodes)
  return _internal_outline_has_body_slide_nodes(index);
}
inline ::TSP::Reference* UIStateArchive::_internal_add_outline_has_body_slide_nodes() {
  return outline_has_body_slide_nodes_.Add();
}
inline ::TSP::Reference* UIStateArchive::add_outline_has_body_slide_nodes() {
  ::TSP::Reference* _add = _internal_add_outline_has_body_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.UIStateArchive.outline_has_body_slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateArchive::outline_has_body_slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateArchive.outline_has_body_slide_nodes)
  return outline_has_body_slide_nodes_;
}

// optional bool shows_ruler = 20;
inline bool UIStateArchive::_internal_has_shows_ruler() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_ruler() const {
  return _internal_has_shows_ruler();
}
inline void UIStateArchive::clear_shows_ruler() {
  shows_ruler_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool UIStateArchive::_internal_shows_ruler() const {
  return shows_ruler_;
}
inline bool UIStateArchive::shows_ruler() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.shows_ruler)
  return _internal_shows_ruler();
}
inline void UIStateArchive::_internal_set_shows_ruler(bool value) {
  _has_bits_[0] |= 0x04000000u;
  shows_ruler_ = value;
}
inline void UIStateArchive::set_shows_ruler(bool value) {
  _internal_set_shows_ruler(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.shows_ruler)
}

// optional float desktop_navigator_view_width = 22;
inline bool UIStateArchive::_internal_has_desktop_navigator_view_width() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_navigator_view_width() const {
  return _internal_has_desktop_navigator_view_width();
}
inline void UIStateArchive::clear_desktop_navigator_view_width() {
  desktop_navigator_view_width_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float UIStateArchive::_internal_desktop_navigator_view_width() const {
  return desktop_navigator_view_width_;
}
inline float UIStateArchive::desktop_navigator_view_width() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_navigator_view_width)
  return _internal_desktop_navigator_view_width();
}
inline void UIStateArchive::_internal_set_desktop_navigator_view_width(float value) {
  _has_bits_[0] |= 0x00400000u;
  desktop_navigator_view_width_ = value;
}
inline void UIStateArchive::set_desktop_navigator_view_width(float value) {
  _internal_set_desktop_navigator_view_width(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_navigator_view_width)
}

// optional float desktop_outline_view_width = 23;
inline bool UIStateArchive::_internal_has_desktop_outline_view_width() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_outline_view_width() const {
  return _internal_has_desktop_outline_view_width();
}
inline void UIStateArchive::clear_desktop_outline_view_width() {
  desktop_outline_view_width_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float UIStateArchive::_internal_desktop_outline_view_width() const {
  return desktop_outline_view_width_;
}
inline float UIStateArchive::desktop_outline_view_width() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_outline_view_width)
  return _internal_desktop_outline_view_width();
}
inline void UIStateArchive::_internal_set_desktop_outline_view_width(float value) {
  _has_bits_[0] |= 0x00800000u;
  desktop_outline_view_width_ = value;
}
inline void UIStateArchive::set_desktop_outline_view_width(float value) {
  _internal_set_desktop_outline_view_width(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_outline_view_width)
}

// optional bool desktop_outline_view_default_fixed = 31;
inline bool UIStateArchive::_internal_has_desktop_outline_view_default_fixed() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_outline_view_default_fixed() const {
  return _internal_has_desktop_outline_view_default_fixed();
}
inline void UIStateArchive::clear_desktop_outline_view_default_fixed() {
  desktop_outline_view_default_fixed_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool UIStateArchive::_internal_desktop_outline_view_default_fixed() const {
  return desktop_outline_view_default_fixed_;
}
inline bool UIStateArchive::desktop_outline_view_default_fixed() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_outline_view_default_fixed)
  return _internal_desktop_outline_view_default_fixed();
}
inline void UIStateArchive::_internal_set_desktop_outline_view_default_fixed(bool value) {
  _has_bits_[0] |= 0x08000000u;
  desktop_outline_view_default_fixed_ = value;
}
inline void UIStateArchive::set_desktop_outline_view_default_fixed(bool value) {
  _internal_set_desktop_outline_view_default_fixed(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_outline_view_default_fixed)
}

// optional .TSP.Size desktop_main_content_size = 24;
inline bool UIStateArchive::_internal_has_desktop_main_content_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || desktop_main_content_size_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_main_content_size() const {
  return _internal_has_desktop_main_content_size();
}
inline const ::TSP::Size& UIStateArchive::_internal_desktop_main_content_size() const {
  const ::TSP::Size* p = desktop_main_content_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& UIStateArchive::desktop_main_content_size() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_main_content_size)
  return _internal_desktop_main_content_size();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_main_content_size(
    ::TSP::Size* desktop_main_content_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_main_content_size_);
  }
  desktop_main_content_size_ = desktop_main_content_size;
  if (desktop_main_content_size) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.desktop_main_content_size)
}
inline ::TSP::Size* UIStateArchive::release_desktop_main_content_size() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Size* temp = desktop_main_content_size_;
  desktop_main_content_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* UIStateArchive::unsafe_arena_release_desktop_main_content_size() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.desktop_main_content_size)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Size* temp = desktop_main_content_size_;
  desktop_main_content_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* UIStateArchive::_internal_mutable_desktop_main_content_size() {
  _has_bits_[0] |= 0x00000100u;
  if (desktop_main_content_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    desktop_main_content_size_ = p;
  }
  return desktop_main_content_size_;
}
inline ::TSP::Size* UIStateArchive::mutable_desktop_main_content_size() {
  ::TSP::Size* _msg = _internal_mutable_desktop_main_content_size();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.desktop_main_content_size)
  return _msg;
}
inline void UIStateArchive::set_allocated_desktop_main_content_size(::TSP::Size* desktop_main_content_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_main_content_size_);
  }
  if (desktop_main_content_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_main_content_size));
    if (message_arena != submessage_arena) {
      desktop_main_content_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_main_content_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  desktop_main_content_size_ = desktop_main_content_size;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.desktop_main_content_size)
}

// optional float desktop_presenter_notes_view_height = 25;
inline bool UIStateArchive::_internal_has_desktop_presenter_notes_view_height() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_presenter_notes_view_height() const {
  return _internal_has_desktop_presenter_notes_view_height();
}
inline void UIStateArchive::clear_desktop_presenter_notes_view_height() {
  desktop_presenter_notes_view_height_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float UIStateArchive::_internal_desktop_presenter_notes_view_height() const {
  return desktop_presenter_notes_view_height_;
}
inline float UIStateArchive::desktop_presenter_notes_view_height() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_presenter_notes_view_height)
  return _internal_desktop_presenter_notes_view_height();
}
inline void UIStateArchive::_internal_set_desktop_presenter_notes_view_height(float value) {
  _has_bits_[0] |= 0x01000000u;
  desktop_presenter_notes_view_height_ = value;
}
inline void UIStateArchive::set_desktop_presenter_notes_view_height(float value) {
  _internal_set_desktop_presenter_notes_view_height(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_presenter_notes_view_height)
}

// optional .TSP.Point desktop_main_window_origin = 26;
inline bool UIStateArchive::_internal_has_desktop_main_window_origin() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || desktop_main_window_origin_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_main_window_origin() const {
  return _internal_has_desktop_main_window_origin();
}
inline const ::TSP::Point& UIStateArchive::_internal_desktop_main_window_origin() const {
  const ::TSP::Point* p = desktop_main_window_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::desktop_main_window_origin() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_main_window_origin)
  return _internal_desktop_main_window_origin();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_main_window_origin(
    ::TSP::Point* desktop_main_window_origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_main_window_origin_);
  }
  desktop_main_window_origin_ = desktop_main_window_origin;
  if (desktop_main_window_origin) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.desktop_main_window_origin)
}
inline ::TSP::Point* UIStateArchive::release_desktop_main_window_origin() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Point* temp = desktop_main_window_origin_;
  desktop_main_window_origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_desktop_main_window_origin() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.desktop_main_window_origin)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Point* temp = desktop_main_window_origin_;
  desktop_main_window_origin_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_desktop_main_window_origin() {
  _has_bits_[0] |= 0x00000200u;
  if (desktop_main_window_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    desktop_main_window_origin_ = p;
  }
  return desktop_main_window_origin_;
}
inline ::TSP::Point* UIStateArchive::mutable_desktop_main_window_origin() {
  ::TSP::Point* _msg = _internal_mutable_desktop_main_window_origin();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.desktop_main_window_origin)
  return _msg;
}
inline void UIStateArchive::set_allocated_desktop_main_window_origin(::TSP::Point* desktop_main_window_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_main_window_origin_);
  }
  if (desktop_main_window_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_main_window_origin));
    if (message_arena != submessage_arena) {
      desktop_main_window_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_main_window_origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  desktop_main_window_origin_ = desktop_main_window_origin;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.desktop_main_window_origin)
}

// optional bool light_table_hides_skipped_slides = 27;
inline bool UIStateArchive::_internal_has_light_table_hides_skipped_slides() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_light_table_hides_skipped_slides() const {
  return _internal_has_light_table_hides_skipped_slides();
}
inline void UIStateArchive::clear_light_table_hides_skipped_slides() {
  light_table_hides_skipped_slides_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool UIStateArchive::_internal_light_table_hides_skipped_slides() const {
  return light_table_hides_skipped_slides_;
}
inline bool UIStateArchive::light_table_hides_skipped_slides() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.light_table_hides_skipped_slides)
  return _internal_light_table_hides_skipped_slides();
}
inline void UIStateArchive::_internal_set_light_table_hides_skipped_slides(bool value) {
  _has_bits_[0] |= 0x10000000u;
  light_table_hides_skipped_slides_ = value;
}
inline void UIStateArchive::set_light_table_hides_skipped_slides(bool value) {
  _internal_set_light_table_hides_skipped_slides(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.light_table_hides_skipped_slides)
}

// optional .TSK.SelectionPathArchive selection_path = 29;
inline bool UIStateArchive::_internal_has_selection_path() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || selection_path_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_selection_path() const {
  return _internal_has_selection_path();
}
inline const ::TSK::SelectionPathArchive& UIStateArchive::_internal_selection_path() const {
  const ::TSK::SelectionPathArchive* p = selection_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::SelectionPathArchive&>(
      ::TSK::_SelectionPathArchive_default_instance_);
}
inline const ::TSK::SelectionPathArchive& UIStateArchive::selection_path() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.selection_path)
  return _internal_selection_path();
}
inline void UIStateArchive::unsafe_arena_set_allocated_selection_path(
    ::TSK::SelectionPathArchive* selection_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_);
  }
  selection_path_ = selection_path;
  if (selection_path) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.selection_path)
}
inline ::TSK::SelectionPathArchive* UIStateArchive::release_selection_path() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSK::SelectionPathArchive* temp = selection_path_;
  selection_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::unsafe_arena_release_selection_path() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.selection_path)
  _has_bits_[0] &= ~0x00000400u;
  ::TSK::SelectionPathArchive* temp = selection_path_;
  selection_path_ = nullptr;
  return temp;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::_internal_mutable_selection_path() {
  _has_bits_[0] |= 0x00000400u;
  if (selection_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::SelectionPathArchive>(GetArenaForAllocation());
    selection_path_ = p;
  }
  return selection_path_;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::mutable_selection_path() {
  ::TSK::SelectionPathArchive* _msg = _internal_mutable_selection_path();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.selection_path)
  return _msg;
}
inline void UIStateArchive::set_allocated_selection_path(::TSK::SelectionPathArchive* selection_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_);
  }
  if (selection_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path));
    if (message_arena != submessage_arena) {
      selection_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  selection_path_ = selection_path;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.selection_path)
}

// optional float desktop_element_list_view_width = 32;
inline bool UIStateArchive::_internal_has_desktop_element_list_view_width() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_element_list_view_width() const {
  return _internal_has_desktop_element_list_view_width();
}
inline void UIStateArchive::clear_desktop_element_list_view_width() {
  desktop_element_list_view_width_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float UIStateArchive::_internal_desktop_element_list_view_width() const {
  return desktop_element_list_view_width_;
}
inline float UIStateArchive::desktop_element_list_view_width() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_element_list_view_width)
  return _internal_desktop_element_list_view_width();
}
inline void UIStateArchive::_internal_set_desktop_element_list_view_width(float value) {
  _has_bits_[0] |= 0x20000000u;
  desktop_element_list_view_width_ = value;
}
inline void UIStateArchive::set_desktop_element_list_view_width(float value) {
  _internal_set_desktop_element_list_view_width(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_element_list_view_width)
}

// repeated .TSP.Reference element_list_expanded_groups = 33;
inline int UIStateArchive::_internal_element_list_expanded_groups_size() const {
  return element_list_expanded_groups_.size();
}
inline int UIStateArchive::element_list_expanded_groups_size() const {
  return _internal_element_list_expanded_groups_size();
}
inline ::TSP::Reference* UIStateArchive::mutable_element_list_expanded_groups(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.element_list_expanded_groups)
  return element_list_expanded_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateArchive::mutable_element_list_expanded_groups() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateArchive.element_list_expanded_groups)
  return &element_list_expanded_groups_;
}
inline const ::TSP::Reference& UIStateArchive::_internal_element_list_expanded_groups(int index) const {
  return element_list_expanded_groups_.Get(index);
}
inline const ::TSP::Reference& UIStateArchive::element_list_expanded_groups(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.element_list_expanded_groups)
  return _internal_element_list_expanded_groups(index);
}
inline ::TSP::Reference* UIStateArchive::_internal_add_element_list_expanded_groups() {
  return element_list_expanded_groups_.Add();
}
inline ::TSP::Reference* UIStateArchive::add_element_list_expanded_groups() {
  ::TSP::Reference* _add = _internal_add_element_list_expanded_groups();
  // @@protoc_insertion_point(field_add:KN.UIStateArchive.element_list_expanded_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateArchive::element_list_expanded_groups() const {
  // @@protoc_insertion_point(field_list:KN.UIStateArchive.element_list_expanded_groups)
  return element_list_expanded_groups_;
}

// optional bool shows_mobile_light_table = 34;
inline bool UIStateArchive::_internal_has_shows_mobile_light_table() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_mobile_light_table() const {
  return _internal_has_shows_mobile_light_table();
}
inline void UIStateArchive::clear_shows_mobile_light_table() {
  shows_mobile_light_table_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool UIStateArchive::_internal_shows_mobile_light_table() const {
  return shows_mobile_light_table_;
}
inline bool UIStateArchive::shows_mobile_light_table() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.shows_mobile_light_table)
  return _internal_shows_mobile_light_table();
}
inline void UIStateArchive::_internal_set_shows_mobile_light_table(bool value) {
  _has_bits_[0] |= 0x80000000u;
  shows_mobile_light_table_ = value;
}
inline void UIStateArchive::set_shows_mobile_light_table(bool value) {
  _internal_set_shows_mobile_light_table(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.shows_mobile_light_table)
}

// optional float mobile_light_table_zoom_scale = 35;
inline bool UIStateArchive::_internal_has_mobile_light_table_zoom_scale() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_mobile_light_table_zoom_scale() const {
  return _internal_has_mobile_light_table_zoom_scale();
}
inline void UIStateArchive::clear_mobile_light_table_zoom_scale() {
  mobile_light_table_zoom_scale_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float UIStateArchive::_internal_mobile_light_table_zoom_scale() const {
  return mobile_light_table_zoom_scale_;
}
inline float UIStateArchive::mobile_light_table_zoom_scale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.mobile_light_table_zoom_scale)
  return _internal_mobile_light_table_zoom_scale();
}
inline void UIStateArchive::_internal_set_mobile_light_table_zoom_scale(float value) {
  _has_bits_[0] |= 0x40000000u;
  mobile_light_table_zoom_scale_ = value;
}
inline void UIStateArchive::set_mobile_light_table_zoom_scale(float value) {
  _internal_set_mobile_light_table_zoom_scale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.mobile_light_table_zoom_scale)
}

// optional bool mobile_light_table_hides_skipped_slides = 36;
inline bool UIStateArchive::_internal_has_mobile_light_table_hides_skipped_slides() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool UIStateArchive::has_mobile_light_table_hides_skipped_slides() const {
  return _internal_has_mobile_light_table_hides_skipped_slides();
}
inline void UIStateArchive::clear_mobile_light_table_hides_skipped_slides() {
  mobile_light_table_hides_skipped_slides_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool UIStateArchive::_internal_mobile_light_table_hides_skipped_slides() const {
  return mobile_light_table_hides_skipped_slides_;
}
inline bool UIStateArchive::mobile_light_table_hides_skipped_slides() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.mobile_light_table_hides_skipped_slides)
  return _internal_mobile_light_table_hides_skipped_slides();
}
inline void UIStateArchive::_internal_set_mobile_light_table_hides_skipped_slides(bool value) {
  _has_bits_[1] |= 0x00000001u;
  mobile_light_table_hides_skipped_slides_ = value;
}
inline void UIStateArchive::set_mobile_light_table_hides_skipped_slides(bool value) {
  _internal_set_mobile_light_table_hides_skipped_slides(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.mobile_light_table_hides_skipped_slides)
}

// optional .TSP.Reference freehand_drawing_toolkit_state = 37;
inline bool UIStateArchive::_internal_has_freehand_drawing_toolkit_state() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || freehand_drawing_toolkit_state_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_freehand_drawing_toolkit_state() const {
  return _internal_has_freehand_drawing_toolkit_state();
}
inline const ::TSP::Reference& UIStateArchive::_internal_freehand_drawing_toolkit_state() const {
  const ::TSP::Reference* p = freehand_drawing_toolkit_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::freehand_drawing_toolkit_state() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.freehand_drawing_toolkit_state)
  return _internal_freehand_drawing_toolkit_state();
}
inline void UIStateArchive::unsafe_arena_set_allocated_freehand_drawing_toolkit_state(
    ::TSP::Reference* freehand_drawing_toolkit_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freehand_drawing_toolkit_state_);
  }
  freehand_drawing_toolkit_state_ = freehand_drawing_toolkit_state;
  if (freehand_drawing_toolkit_state) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.freehand_drawing_toolkit_state)
}
inline ::TSP::Reference* UIStateArchive::release_freehand_drawing_toolkit_state() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = freehand_drawing_toolkit_state_;
  freehand_drawing_toolkit_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_freehand_drawing_toolkit_state() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.freehand_drawing_toolkit_state)
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = freehand_drawing_toolkit_state_;
  freehand_drawing_toolkit_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_freehand_drawing_toolkit_state() {
  _has_bits_[0] |= 0x00000800u;
  if (freehand_drawing_toolkit_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    freehand_drawing_toolkit_state_ = p;
  }
  return freehand_drawing_toolkit_state_;
}
inline ::TSP::Reference* UIStateArchive::mutable_freehand_drawing_toolkit_state() {
  ::TSP::Reference* _msg = _internal_mutable_freehand_drawing_toolkit_state();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.freehand_drawing_toolkit_state)
  return _msg;
}
inline void UIStateArchive::set_allocated_freehand_drawing_toolkit_state(::TSP::Reference* freehand_drawing_toolkit_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freehand_drawing_toolkit_state_);
  }
  if (freehand_drawing_toolkit_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freehand_drawing_toolkit_state));
    if (message_arena != submessage_arena) {
      freehand_drawing_toolkit_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freehand_drawing_toolkit_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  freehand_drawing_toolkit_state_ = freehand_drawing_toolkit_state;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.freehand_drawing_toolkit_state)
}

// optional .TSP.Reference selection_path_transformer = 38;
inline bool UIStateArchive::_internal_has_selection_path_transformer() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || selection_path_transformer_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_selection_path_transformer() const {
  return _internal_has_selection_path_transformer();
}
inline const ::TSP::Reference& UIStateArchive::_internal_selection_path_transformer() const {
  const ::TSP::Reference* p = selection_path_transformer_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::selection_path_transformer() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.selection_path_transformer)
  return _internal_selection_path_transformer();
}
inline void UIStateArchive::unsafe_arena_set_allocated_selection_path_transformer(
    ::TSP::Reference* selection_path_transformer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer_);
  }
  selection_path_transformer_ = selection_path_transformer;
  if (selection_path_transformer) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.selection_path_transformer)
}
inline ::TSP::Reference* UIStateArchive::release_selection_path_transformer() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = selection_path_transformer_;
  selection_path_transformer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_selection_path_transformer() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.selection_path_transformer)
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = selection_path_transformer_;
  selection_path_transformer_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_selection_path_transformer() {
  _has_bits_[0] |= 0x00001000u;
  if (selection_path_transformer_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    selection_path_transformer_ = p;
  }
  return selection_path_transformer_;
}
inline ::TSP::Reference* UIStateArchive::mutable_selection_path_transformer() {
  ::TSP::Reference* _msg = _internal_mutable_selection_path_transformer();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.selection_path_transformer)
  return _msg;
}
inline void UIStateArchive::set_allocated_selection_path_transformer(::TSP::Reference* selection_path_transformer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer_);
  }
  if (selection_path_transformer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer));
    if (message_arena != submessage_arena) {
      selection_path_transformer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_path_transformer, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  selection_path_transformer_ = selection_path_transformer;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.selection_path_transformer)
}

// optional bool shows_mobile_outline = 40;
inline bool UIStateArchive::_internal_has_shows_mobile_outline() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_mobile_outline() const {
  return _internal_has_shows_mobile_outline();
}
inline void UIStateArchive::clear_shows_mobile_outline() {
  shows_mobile_outline_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool UIStateArchive::_internal_shows_mobile_outline() const {
  return shows_mobile_outline_;
}
inline bool UIStateArchive::shows_mobile_outline() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.shows_mobile_outline)
  return _internal_shows_mobile_outline();
}
inline void UIStateArchive::_internal_set_shows_mobile_outline(bool value) {
  _has_bits_[1] |= 0x00000002u;
  shows_mobile_outline_ = value;
}
inline void UIStateArchive::set_shows_mobile_outline(bool value) {
  _internal_set_shows_mobile_outline(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.shows_mobile_outline)
}

// optional bool editing_disabled = 41;
inline bool UIStateArchive::_internal_has_editing_disabled() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool UIStateArchive::has_editing_disabled() const {
  return _internal_has_editing_disabled();
}
inline void UIStateArchive::clear_editing_disabled() {
  editing_disabled_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool UIStateArchive::_internal_editing_disabled() const {
  return editing_disabled_;
}
inline bool UIStateArchive::editing_disabled() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.editing_disabled)
  return _internal_editing_disabled();
}
inline void UIStateArchive::_internal_set_editing_disabled(bool value) {
  _has_bits_[1] |= 0x00000004u;
  editing_disabled_ = value;
}
inline void UIStateArchive::set_editing_disabled(bool value) {
  _internal_set_editing_disabled(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.editing_disabled)
}

// -------------------------------------------------------------------

// IOSRestorableViewStateRootArchive

// optional .KN.IOSSavedPlaybackStateArchive saved_playback_state = 1;
inline bool IOSRestorableViewStateRootArchive::_internal_has_saved_playback_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || saved_playback_state_ != nullptr);
  return value;
}
inline bool IOSRestorableViewStateRootArchive::has_saved_playback_state() const {
  return _internal_has_saved_playback_state();
}
inline void IOSRestorableViewStateRootArchive::clear_saved_playback_state() {
  if (saved_playback_state_ != nullptr) saved_playback_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KN::IOSSavedPlaybackStateArchive& IOSRestorableViewStateRootArchive::_internal_saved_playback_state() const {
  const ::KN::IOSSavedPlaybackStateArchive* p = saved_playback_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::IOSSavedPlaybackStateArchive&>(
      ::KN::_IOSSavedPlaybackStateArchive_default_instance_);
}
inline const ::KN::IOSSavedPlaybackStateArchive& IOSRestorableViewStateRootArchive::saved_playback_state() const {
  // @@protoc_insertion_point(field_get:KN.IOSRestorableViewStateRootArchive.saved_playback_state)
  return _internal_saved_playback_state();
}
inline void IOSRestorableViewStateRootArchive::unsafe_arena_set_allocated_saved_playback_state(
    ::KN::IOSSavedPlaybackStateArchive* saved_playback_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saved_playback_state_);
  }
  saved_playback_state_ = saved_playback_state;
  if (saved_playback_state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.IOSRestorableViewStateRootArchive.saved_playback_state)
}
inline ::KN::IOSSavedPlaybackStateArchive* IOSRestorableViewStateRootArchive::release_saved_playback_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::KN::IOSSavedPlaybackStateArchive* temp = saved_playback_state_;
  saved_playback_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::IOSSavedPlaybackStateArchive* IOSRestorableViewStateRootArchive::unsafe_arena_release_saved_playback_state() {
  // @@protoc_insertion_point(field_release:KN.IOSRestorableViewStateRootArchive.saved_playback_state)
  _has_bits_[0] &= ~0x00000001u;
  ::KN::IOSSavedPlaybackStateArchive* temp = saved_playback_state_;
  saved_playback_state_ = nullptr;
  return temp;
}
inline ::KN::IOSSavedPlaybackStateArchive* IOSRestorableViewStateRootArchive::_internal_mutable_saved_playback_state() {
  _has_bits_[0] |= 0x00000001u;
  if (saved_playback_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::IOSSavedPlaybackStateArchive>(GetArenaForAllocation());
    saved_playback_state_ = p;
  }
  return saved_playback_state_;
}
inline ::KN::IOSSavedPlaybackStateArchive* IOSRestorableViewStateRootArchive::mutable_saved_playback_state() {
  ::KN::IOSSavedPlaybackStateArchive* _msg = _internal_mutable_saved_playback_state();
  // @@protoc_insertion_point(field_mutable:KN.IOSRestorableViewStateRootArchive.saved_playback_state)
  return _msg;
}
inline void IOSRestorableViewStateRootArchive::set_allocated_saved_playback_state(::KN::IOSSavedPlaybackStateArchive* saved_playback_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete saved_playback_state_;
  }
  if (saved_playback_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::IOSSavedPlaybackStateArchive>::GetOwningArena(saved_playback_state);
    if (message_arena != submessage_arena) {
      saved_playback_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saved_playback_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  saved_playback_state_ = saved_playback_state;
  // @@protoc_insertion_point(field_set_allocated:KN.IOSRestorableViewStateRootArchive.saved_playback_state)
}

// -------------------------------------------------------------------

// IOSSavedPlaybackStateArchive

// optional .KN.IOSSavedPlaybackStateArchive.PresentationType presentation_type = 1;
inline bool IOSSavedPlaybackStateArchive::_internal_has_presentation_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IOSSavedPlaybackStateArchive::has_presentation_type() const {
  return _internal_has_presentation_type();
}
inline void IOSSavedPlaybackStateArchive::clear_presentation_type() {
  presentation_type_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::KN::IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::_internal_presentation_type() const {
  return static_cast< ::KN::IOSSavedPlaybackStateArchive_PresentationType >(presentation_type_);
}
inline ::KN::IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::presentation_type() const {
  // @@protoc_insertion_point(field_get:KN.IOSSavedPlaybackStateArchive.presentation_type)
  return _internal_presentation_type();
}
inline void IOSSavedPlaybackStateArchive::_internal_set_presentation_type(::KN::IOSSavedPlaybackStateArchive_PresentationType value) {
  assert(::KN::IOSSavedPlaybackStateArchive_PresentationType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  presentation_type_ = value;
}
inline void IOSSavedPlaybackStateArchive::set_presentation_type(::KN::IOSSavedPlaybackStateArchive_PresentationType value) {
  _internal_set_presentation_type(value);
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.presentation_type)
}

// optional uint32 slide_node_index = 2;
inline bool IOSSavedPlaybackStateArchive::_internal_has_slide_node_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IOSSavedPlaybackStateArchive::has_slide_node_index() const {
  return _internal_has_slide_node_index();
}
inline void IOSSavedPlaybackStateArchive::clear_slide_node_index() {
  slide_node_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOSSavedPlaybackStateArchive::_internal_slide_node_index() const {
  return slide_node_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOSSavedPlaybackStateArchive::slide_node_index() const {
  // @@protoc_insertion_point(field_get:KN.IOSSavedPlaybackStateArchive.slide_node_index)
  return _internal_slide_node_index();
}
inline void IOSSavedPlaybackStateArchive::_internal_set_slide_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slide_node_index_ = value;
}
inline void IOSSavedPlaybackStateArchive::set_slide_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slide_node_index(value);
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.slide_node_index)
}

// optional uint32 event_index = 3;
inline bool IOSSavedPlaybackStateArchive::_internal_has_event_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IOSSavedPlaybackStateArchive::has_event_index() const {
  return _internal_has_event_index();
}
inline void IOSSavedPlaybackStateArchive::clear_event_index() {
  event_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOSSavedPlaybackStateArchive::_internal_event_index() const {
  return event_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOSSavedPlaybackStateArchive::event_index() const {
  // @@protoc_insertion_point(field_get:KN.IOSSavedPlaybackStateArchive.event_index)
  return _internal_event_index();
}
inline void IOSSavedPlaybackStateArchive::_internal_set_event_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_index_ = value;
}
inline void IOSSavedPlaybackStateArchive::set_event_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_index(value);
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.event_index)
}

// repeated string breadcrumb_trail = 4;
inline int IOSSavedPlaybackStateArchive::_internal_breadcrumb_trail_size() const {
  return breadcrumb_trail_.size();
}
inline int IOSSavedPlaybackStateArchive::breadcrumb_trail_size() const {
  return _internal_breadcrumb_trail_size();
}
inline void IOSSavedPlaybackStateArchive::clear_breadcrumb_trail() {
  breadcrumb_trail_.Clear();
}
inline std::string* IOSSavedPlaybackStateArchive::add_breadcrumb_trail() {
  std::string* _s = _internal_add_breadcrumb_trail();
  // @@protoc_insertion_point(field_add_mutable:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
  return _s;
}
inline const std::string& IOSSavedPlaybackStateArchive::_internal_breadcrumb_trail(int index) const {
  return breadcrumb_trail_.Get(index);
}
inline const std::string& IOSSavedPlaybackStateArchive::breadcrumb_trail(int index) const {
  // @@protoc_insertion_point(field_get:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
  return _internal_breadcrumb_trail(index);
}
inline std::string* IOSSavedPlaybackStateArchive::mutable_breadcrumb_trail(int index) {
  // @@protoc_insertion_point(field_mutable:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
  return breadcrumb_trail_.Mutable(index);
}
inline void IOSSavedPlaybackStateArchive::set_breadcrumb_trail(int index, const std::string& value) {
  breadcrumb_trail_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
}
inline void IOSSavedPlaybackStateArchive::set_breadcrumb_trail(int index, std::string&& value) {
  breadcrumb_trail_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
}
inline void IOSSavedPlaybackStateArchive::set_breadcrumb_trail(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  breadcrumb_trail_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
}
inline void IOSSavedPlaybackStateArchive::set_breadcrumb_trail(int index, const char* value, size_t size) {
  breadcrumb_trail_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
}
inline std::string* IOSSavedPlaybackStateArchive::_internal_add_breadcrumb_trail() {
  return breadcrumb_trail_.Add();
}
inline void IOSSavedPlaybackStateArchive::add_breadcrumb_trail(const std::string& value) {
  breadcrumb_trail_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
}
inline void IOSSavedPlaybackStateArchive::add_breadcrumb_trail(std::string&& value) {
  breadcrumb_trail_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
}
inline void IOSSavedPlaybackStateArchive::add_breadcrumb_trail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  breadcrumb_trail_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
}
inline void IOSSavedPlaybackStateArchive::add_breadcrumb_trail(const char* value, size_t size) {
  breadcrumb_trail_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IOSSavedPlaybackStateArchive::breadcrumb_trail() const {
  // @@protoc_insertion_point(field_list:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
  return breadcrumb_trail_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IOSSavedPlaybackStateArchive::mutable_breadcrumb_trail() {
  // @@protoc_insertion_point(field_mutable_list:KN.IOSSavedPlaybackStateArchive.breadcrumb_trail)
  return &breadcrumb_trail_;
}

// optional bool had_external_display = 5;
inline bool IOSSavedPlaybackStateArchive::_internal_has_had_external_display() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IOSSavedPlaybackStateArchive::has_had_external_display() const {
  return _internal_has_had_external_display();
}
inline void IOSSavedPlaybackStateArchive::clear_had_external_display() {
  had_external_display_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool IOSSavedPlaybackStateArchive::_internal_had_external_display() const {
  return had_external_display_;
}
inline bool IOSSavedPlaybackStateArchive::had_external_display() const {
  // @@protoc_insertion_point(field_get:KN.IOSSavedPlaybackStateArchive.had_external_display)
  return _internal_had_external_display();
}
inline void IOSSavedPlaybackStateArchive::_internal_set_had_external_display(bool value) {
  _has_bits_[0] |= 0x00000010u;
  had_external_display_ = value;
}
inline void IOSSavedPlaybackStateArchive::set_had_external_display(bool value) {
  _internal_set_had_external_display(value);
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.had_external_display)
}

// optional bool is_elapsed_time_started = 6;
inline bool IOSSavedPlaybackStateArchive::_internal_has_is_elapsed_time_started() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IOSSavedPlaybackStateArchive::has_is_elapsed_time_started() const {
  return _internal_has_is_elapsed_time_started();
}
inline void IOSSavedPlaybackStateArchive::clear_is_elapsed_time_started() {
  is_elapsed_time_started_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool IOSSavedPlaybackStateArchive::_internal_is_elapsed_time_started() const {
  return is_elapsed_time_started_;
}
inline bool IOSSavedPlaybackStateArchive::is_elapsed_time_started() const {
  // @@protoc_insertion_point(field_get:KN.IOSSavedPlaybackStateArchive.is_elapsed_time_started)
  return _internal_is_elapsed_time_started();
}
inline void IOSSavedPlaybackStateArchive::_internal_set_is_elapsed_time_started(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_elapsed_time_started_ = value;
}
inline void IOSSavedPlaybackStateArchive::set_is_elapsed_time_started(bool value) {
  _internal_set_is_elapsed_time_started(value);
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.is_elapsed_time_started)
}

// optional double elapsed_time_start_time = 7;
inline bool IOSSavedPlaybackStateArchive::_internal_has_elapsed_time_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IOSSavedPlaybackStateArchive::has_elapsed_time_start_time() const {
  return _internal_has_elapsed_time_start_time();
}
inline void IOSSavedPlaybackStateArchive::clear_elapsed_time_start_time() {
  elapsed_time_start_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double IOSSavedPlaybackStateArchive::_internal_elapsed_time_start_time() const {
  return elapsed_time_start_time_;
}
inline double IOSSavedPlaybackStateArchive::elapsed_time_start_time() const {
  // @@protoc_insertion_point(field_get:KN.IOSSavedPlaybackStateArchive.elapsed_time_start_time)
  return _internal_elapsed_time_start_time();
}
inline void IOSSavedPlaybackStateArchive::_internal_set_elapsed_time_start_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  elapsed_time_start_time_ = value;
}
inline void IOSSavedPlaybackStateArchive::set_elapsed_time_start_time(double value) {
  _internal_set_elapsed_time_start_time(value);
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.elapsed_time_start_time)
}

// optional double recording_playback_current_time = 8;
inline bool IOSSavedPlaybackStateArchive::_internal_has_recording_playback_current_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IOSSavedPlaybackStateArchive::has_recording_playback_current_time() const {
  return _internal_has_recording_playback_current_time();
}
inline void IOSSavedPlaybackStateArchive::clear_recording_playback_current_time() {
  recording_playback_current_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double IOSSavedPlaybackStateArchive::_internal_recording_playback_current_time() const {
  return recording_playback_current_time_;
}
inline double IOSSavedPlaybackStateArchive::recording_playback_current_time() const {
  // @@protoc_insertion_point(field_get:KN.IOSSavedPlaybackStateArchive.recording_playback_current_time)
  return _internal_recording_playback_current_time();
}
inline void IOSSavedPlaybackStateArchive::_internal_set_recording_playback_current_time(double value) {
  _has_bits_[0] |= 0x00000008u;
  recording_playback_current_time_ = value;
}
inline void IOSSavedPlaybackStateArchive::set_recording_playback_current_time(double value) {
  _internal_set_recording_playback_current_time(value);
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.recording_playback_current_time)
}

// optional bool should_show_slide_navigator = 9;
inline bool IOSSavedPlaybackStateArchive::_internal_has_should_show_slide_navigator() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IOSSavedPlaybackStateArchive::has_should_show_slide_navigator() const {
  return _internal_has_should_show_slide_navigator();
}
inline void IOSSavedPlaybackStateArchive::clear_should_show_slide_navigator() {
  should_show_slide_navigator_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool IOSSavedPlaybackStateArchive::_internal_should_show_slide_navigator() const {
  return should_show_slide_navigator_;
}
inline bool IOSSavedPlaybackStateArchive::should_show_slide_navigator() const {
  // @@protoc_insertion_point(field_get:KN.IOSSavedPlaybackStateArchive.should_show_slide_navigator)
  return _internal_should_show_slide_navigator();
}
inline void IOSSavedPlaybackStateArchive::_internal_set_should_show_slide_navigator(bool value) {
  _has_bits_[0] |= 0x00000040u;
  should_show_slide_navigator_ = value;
}
inline void IOSSavedPlaybackStateArchive::set_should_show_slide_navigator(bool value) {
  _internal_set_should_show_slide_navigator(value);
  // @@protoc_insertion_point(field_set:KN.IOSSavedPlaybackStateArchive.should_show_slide_navigator)
}

// -------------------------------------------------------------------

// CanvasSelectionArchive

// repeated .TSP.Reference infos = 1;
inline int CanvasSelectionArchive::_internal_infos_size() const {
  return infos_.size();
}
inline int CanvasSelectionArchive::infos_size() const {
  return _internal_infos_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionArchive.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionArchive.infos)
  return &infos_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionArchive.infos)
  return _internal_infos(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_infos() {
  return infos_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_infos() {
  ::TSP::Reference* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionArchive.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::infos() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionArchive.infos)
  return infos_;
}

// repeated .TSP.Reference non_interactive_infos = 5;
inline int CanvasSelectionArchive::_internal_non_interactive_infos_size() const {
  return non_interactive_infos_.size();
}
inline int CanvasSelectionArchive::non_interactive_infos_size() const {
  return _internal_non_interactive_infos_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_non_interactive_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionArchive.non_interactive_infos)
  return non_interactive_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_non_interactive_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionArchive.non_interactive_infos)
  return &non_interactive_infos_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_non_interactive_infos(int index) const {
  return non_interactive_infos_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::non_interactive_infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionArchive.non_interactive_infos)
  return _internal_non_interactive_infos(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_non_interactive_infos() {
  return non_interactive_infos_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_non_interactive_infos() {
  ::TSP::Reference* _add = _internal_add_non_interactive_infos();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionArchive.non_interactive_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::non_interactive_infos() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionArchive.non_interactive_infos)
  return non_interactive_infos_;
}

// repeated .TSP.Reference infos_for_action_ghost_indexes = 6;
inline int CanvasSelectionArchive::_internal_infos_for_action_ghost_indexes_size() const {
  return infos_for_action_ghost_indexes_.size();
}
inline int CanvasSelectionArchive::infos_for_action_ghost_indexes_size() const {
  return _internal_infos_for_action_ghost_indexes_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_infos_for_action_ghost_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionArchive.infos_for_action_ghost_indexes)
  return infos_for_action_ghost_indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_infos_for_action_ghost_indexes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionArchive.infos_for_action_ghost_indexes)
  return &infos_for_action_ghost_indexes_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_infos_for_action_ghost_indexes(int index) const {
  return infos_for_action_ghost_indexes_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::infos_for_action_ghost_indexes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionArchive.infos_for_action_ghost_indexes)
  return _internal_infos_for_action_ghost_indexes(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_infos_for_action_ghost_indexes() {
  return infos_for_action_ghost_indexes_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_infos_for_action_ghost_indexes() {
  ::TSP::Reference* _add = _internal_add_infos_for_action_ghost_indexes();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionArchive.infos_for_action_ghost_indexes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::infos_for_action_ghost_indexes() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionArchive.infos_for_action_ghost_indexes)
  return infos_for_action_ghost_indexes_;
}

// repeated .TSP.IndexSet action_ghost_indexes = 3;
inline int CanvasSelectionArchive::_internal_action_ghost_indexes_size() const {
  return action_ghost_indexes_.size();
}
inline int CanvasSelectionArchive::action_ghost_indexes_size() const {
  return _internal_action_ghost_indexes_size();
}
inline ::TSP::IndexSet* CanvasSelectionArchive::mutable_action_ghost_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionArchive.action_ghost_indexes)
  return action_ghost_indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet >*
CanvasSelectionArchive::mutable_action_ghost_indexes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionArchive.action_ghost_indexes)
  return &action_ghost_indexes_;
}
inline const ::TSP::IndexSet& CanvasSelectionArchive::_internal_action_ghost_indexes(int index) const {
  return action_ghost_indexes_.Get(index);
}
inline const ::TSP::IndexSet& CanvasSelectionArchive::action_ghost_indexes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionArchive.action_ghost_indexes)
  return _internal_action_ghost_indexes(index);
}
inline ::TSP::IndexSet* CanvasSelectionArchive::_internal_add_action_ghost_indexes() {
  return action_ghost_indexes_.Add();
}
inline ::TSP::IndexSet* CanvasSelectionArchive::add_action_ghost_indexes() {
  ::TSP::IndexSet* _add = _internal_add_action_ghost_indexes();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionArchive.action_ghost_indexes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet >&
CanvasSelectionArchive::action_ghost_indexes() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionArchive.action_ghost_indexes)
  return action_ghost_indexes_;
}

// repeated .TSP.Reference build_chunks = 4;
inline int CanvasSelectionArchive::_internal_build_chunks_size() const {
  return build_chunks_.size();
}
inline int CanvasSelectionArchive::build_chunks_size() const {
  return _internal_build_chunks_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_build_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionArchive.build_chunks)
  return build_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_build_chunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionArchive.build_chunks)
  return &build_chunks_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_build_chunks(int index) const {
  return build_chunks_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::build_chunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionArchive.build_chunks)
  return _internal_build_chunks(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_build_chunks() {
  return build_chunks_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_build_chunks() {
  ::TSP::Reference* _add = _internal_add_build_chunks();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionArchive.build_chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::build_chunks() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionArchive.build_chunks)
  return build_chunks_;
}

// repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
inline int CanvasSelectionArchive::_internal_database_action_ghost_indexes_size() const {
  return database_action_ghost_indexes_.size();
}
inline int CanvasSelectionArchive::database_action_ghost_indexes_size() const {
  return _internal_database_action_ghost_indexes_size();
}
inline void CanvasSelectionArchive::clear_database_action_ghost_indexes() {
  database_action_ghost_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CanvasSelectionArchive::_internal_database_action_ghost_indexes(int index) const {
  return database_action_ghost_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CanvasSelectionArchive::database_action_ghost_indexes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionArchive.database_action_ghost_indexes)
  return _internal_database_action_ghost_indexes(index);
}
inline void CanvasSelectionArchive::set_database_action_ghost_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  database_action_ghost_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CanvasSelectionArchive.database_action_ghost_indexes)
}
inline void CanvasSelectionArchive::_internal_add_database_action_ghost_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  database_action_ghost_indexes_.Add(value);
}
inline void CanvasSelectionArchive::add_database_action_ghost_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_database_action_ghost_indexes(value);
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionArchive.database_action_ghost_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CanvasSelectionArchive::_internal_database_action_ghost_indexes() const {
  return database_action_ghost_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CanvasSelectionArchive::database_action_ghost_indexes() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionArchive.database_action_ghost_indexes)
  return _internal_database_action_ghost_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CanvasSelectionArchive::_internal_mutable_database_action_ghost_indexes() {
  return &database_action_ghost_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CanvasSelectionArchive::mutable_database_action_ghost_indexes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionArchive.database_action_ghost_indexes)
  return _internal_mutable_database_action_ghost_indexes();
}

// -------------------------------------------------------------------

// ActionGhostSelectionArchive

// -------------------------------------------------------------------

// ThemeCustomTimingCurveArchive

// required string name = 1;
inline bool ThemeCustomTimingCurveArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeCustomTimingCurveArchive::has_name() const {
  return _internal_has_name();
}
inline void ThemeCustomTimingCurveArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeCustomTimingCurveArchive::name() const {
  // @@protoc_insertion_point(field_get:KN.ThemeCustomTimingCurveArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThemeCustomTimingCurveArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.ThemeCustomTimingCurveArchive.name)
}
inline std::string* ThemeCustomTimingCurveArchive::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:KN.ThemeCustomTimingCurveArchive.name)
  return _s;
}
inline const std::string& ThemeCustomTimingCurveArchive::_internal_name() const {
  return name_.Get();
}
inline void ThemeCustomTimingCurveArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThemeCustomTimingCurveArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThemeCustomTimingCurveArchive::release_name() {
  // @@protoc_insertion_point(field_release:KN.ThemeCustomTimingCurveArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ThemeCustomTimingCurveArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.ThemeCustomTimingCurveArchive.name)
}

// required .TSD.PathSourceArchive curve = 2;
inline bool ThemeCustomTimingCurveArchive::_internal_has_curve() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || curve_ != nullptr);
  return value;
}
inline bool ThemeCustomTimingCurveArchive::has_curve() const {
  return _internal_has_curve();
}
inline const ::TSD::PathSourceArchive& ThemeCustomTimingCurveArchive::_internal_curve() const {
  const ::TSD::PathSourceArchive* p = curve_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& ThemeCustomTimingCurveArchive::curve() const {
  // @@protoc_insertion_point(field_get:KN.ThemeCustomTimingCurveArchive.curve)
  return _internal_curve();
}
inline void ThemeCustomTimingCurveArchive::unsafe_arena_set_allocated_curve(
    ::TSD::PathSourceArchive* curve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curve_);
  }
  curve_ = curve;
  if (curve) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ThemeCustomTimingCurveArchive.curve)
}
inline ::TSD::PathSourceArchive* ThemeCustomTimingCurveArchive::release_curve() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::PathSourceArchive* temp = curve_;
  curve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* ThemeCustomTimingCurveArchive::unsafe_arena_release_curve() {
  // @@protoc_insertion_point(field_release:KN.ThemeCustomTimingCurveArchive.curve)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::PathSourceArchive* temp = curve_;
  curve_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* ThemeCustomTimingCurveArchive::_internal_mutable_curve() {
  _has_bits_[0] |= 0x00000002u;
  if (curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    curve_ = p;
  }
  return curve_;
}
inline ::TSD::PathSourceArchive* ThemeCustomTimingCurveArchive::mutable_curve() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_curve();
  // @@protoc_insertion_point(field_mutable:KN.ThemeCustomTimingCurveArchive.curve)
  return _msg;
}
inline void ThemeCustomTimingCurveArchive::set_allocated_curve(::TSD::PathSourceArchive* curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(curve_);
  }
  if (curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curve));
    if (message_arena != submessage_arena) {
      curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curve, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  curve_ = curve;
  // @@protoc_insertion_point(field_set_allocated:KN.ThemeCustomTimingCurveArchive.curve)
}

// -------------------------------------------------------------------

// ThemeArchive

// required .TSS.ThemeArchive super = 1;
inline bool ThemeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ThemeArchive& ThemeArchive::_internal_super() const {
  const ::TSS::ThemeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ThemeArchive&>(
      ::TSS::_ThemeArchive_default_instance_);
}
inline const ::TSS::ThemeArchive& ThemeArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.super)
  return _internal_super();
}
inline void ThemeArchive::unsafe_arena_set_allocated_super(
    ::TSS::ThemeArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ThemeArchive.super)
}
inline ::TSS::ThemeArchive* ThemeArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::ThemeArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.ThemeArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::ThemeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ThemeArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSS::ThemeArchive* ThemeArchive::mutable_super() {
  ::TSS::ThemeArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.super)
  return _msg;
}
inline void ThemeArchive::set_allocated_super(::TSS::ThemeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.ThemeArchive.super)
}

// repeated .TSP.Reference templates = 2;
inline int ThemeArchive::_internal_templates_size() const {
  return templates_.size();
}
inline int ThemeArchive::templates_size() const {
  return _internal_templates_size();
}
inline ::TSP::Reference* ThemeArchive::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.templates)
  return templates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemeArchive::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:KN.ThemeArchive.templates)
  return &templates_;
}
inline const ::TSP::Reference& ThemeArchive::_internal_templates(int index) const {
  return templates_.Get(index);
}
inline const ::TSP::Reference& ThemeArchive::templates(int index) const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.templates)
  return _internal_templates(index);
}
inline ::TSP::Reference* ThemeArchive::_internal_add_templates() {
  return templates_.Add();
}
inline ::TSP::Reference* ThemeArchive::add_templates() {
  ::TSP::Reference* _add = _internal_add_templates();
  // @@protoc_insertion_point(field_add:KN.ThemeArchive.templates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemeArchive::templates() const {
  // @@protoc_insertion_point(field_list:KN.ThemeArchive.templates)
  return templates_;
}

// optional string uuid = 3;
inline bool ThemeArchive::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeArchive::has_uuid() const {
  return _internal_has_uuid();
}
inline void ThemeArchive::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeArchive::uuid() const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThemeArchive::set_uuid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.ThemeArchive.uuid)
}
inline std::string* ThemeArchive::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.uuid)
  return _s;
}
inline const std::string& ThemeArchive::_internal_uuid() const {
  return uuid_.Get();
}
inline void ThemeArchive::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThemeArchive::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThemeArchive::release_uuid() {
  // @@protoc_insertion_point(field_release:KN.ThemeArchive.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ThemeArchive::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.ThemeArchive.uuid)
}

// repeated .TSP.Reference classicThemeRecords = 4;
inline int ThemeArchive::_internal_classicthemerecords_size() const {
  return classicthemerecords_.size();
}
inline int ThemeArchive::classicthemerecords_size() const {
  return _internal_classicthemerecords_size();
}
inline ::TSP::Reference* ThemeArchive::mutable_classicthemerecords(int index) {
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.classicThemeRecords)
  return classicthemerecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemeArchive::mutable_classicthemerecords() {
  // @@protoc_insertion_point(field_mutable_list:KN.ThemeArchive.classicThemeRecords)
  return &classicthemerecords_;
}
inline const ::TSP::Reference& ThemeArchive::_internal_classicthemerecords(int index) const {
  return classicthemerecords_.Get(index);
}
inline const ::TSP::Reference& ThemeArchive::classicthemerecords(int index) const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.classicThemeRecords)
  return _internal_classicthemerecords(index);
}
inline ::TSP::Reference* ThemeArchive::_internal_add_classicthemerecords() {
  return classicthemerecords_.Add();
}
inline ::TSP::Reference* ThemeArchive::add_classicthemerecords() {
  ::TSP::Reference* _add = _internal_add_classicthemerecords();
  // @@protoc_insertion_point(field_add:KN.ThemeArchive.classicThemeRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemeArchive::classicthemerecords() const {
  // @@protoc_insertion_point(field_list:KN.ThemeArchive.classicThemeRecords)
  return classicthemerecords_;
}

// optional .TSP.Reference default_template_slide_node = 5;
inline bool ThemeArchive::_internal_has_default_template_slide_node() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || default_template_slide_node_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_default_template_slide_node() const {
  return _internal_has_default_template_slide_node();
}
inline const ::TSP::Reference& ThemeArchive::_internal_default_template_slide_node() const {
  const ::TSP::Reference* p = default_template_slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeArchive::default_template_slide_node() const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.default_template_slide_node)
  return _internal_default_template_slide_node();
}
inline void ThemeArchive::unsafe_arena_set_allocated_default_template_slide_node(
    ::TSP::Reference* default_template_slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_template_slide_node_);
  }
  default_template_slide_node_ = default_template_slide_node;
  if (default_template_slide_node) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ThemeArchive.default_template_slide_node)
}
inline ::TSP::Reference* ThemeArchive::release_default_template_slide_node() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = default_template_slide_node_;
  default_template_slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ThemeArchive::unsafe_arena_release_default_template_slide_node() {
  // @@protoc_insertion_point(field_release:KN.ThemeArchive.default_template_slide_node)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = default_template_slide_node_;
  default_template_slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeArchive::_internal_mutable_default_template_slide_node() {
  _has_bits_[0] |= 0x00000004u;
  if (default_template_slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    default_template_slide_node_ = p;
  }
  return default_template_slide_node_;
}
inline ::TSP::Reference* ThemeArchive::mutable_default_template_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_default_template_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.default_template_slide_node)
  return _msg;
}
inline void ThemeArchive::set_allocated_default_template_slide_node(::TSP::Reference* default_template_slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_template_slide_node_);
  }
  if (default_template_slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_template_slide_node));
    if (message_arena != submessage_arena) {
      default_template_slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_template_slide_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  default_template_slide_node_ = default_template_slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.ThemeArchive.default_template_slide_node)
}

// optional .TSP.Reference default_template_slide_node_reference = 6;
inline bool ThemeArchive::_internal_has_default_template_slide_node_reference() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || default_template_slide_node_reference_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_default_template_slide_node_reference() const {
  return _internal_has_default_template_slide_node_reference();
}
inline const ::TSP::Reference& ThemeArchive::_internal_default_template_slide_node_reference() const {
  const ::TSP::Reference* p = default_template_slide_node_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeArchive::default_template_slide_node_reference() const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.default_template_slide_node_reference)
  return _internal_default_template_slide_node_reference();
}
inline void ThemeArchive::unsafe_arena_set_allocated_default_template_slide_node_reference(
    ::TSP::Reference* default_template_slide_node_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_template_slide_node_reference_);
  }
  default_template_slide_node_reference_ = default_template_slide_node_reference;
  if (default_template_slide_node_reference) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ThemeArchive.default_template_slide_node_reference)
}
inline ::TSP::Reference* ThemeArchive::release_default_template_slide_node_reference() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = default_template_slide_node_reference_;
  default_template_slide_node_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ThemeArchive::unsafe_arena_release_default_template_slide_node_reference() {
  // @@protoc_insertion_point(field_release:KN.ThemeArchive.default_template_slide_node_reference)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = default_template_slide_node_reference_;
  default_template_slide_node_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeArchive::_internal_mutable_default_template_slide_node_reference() {
  _has_bits_[0] |= 0x00000008u;
  if (default_template_slide_node_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    default_template_slide_node_reference_ = p;
  }
  return default_template_slide_node_reference_;
}
inline ::TSP::Reference* ThemeArchive::mutable_default_template_slide_node_reference() {
  ::TSP::Reference* _msg = _internal_mutable_default_template_slide_node_reference();
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.default_template_slide_node_reference)
  return _msg;
}
inline void ThemeArchive::set_allocated_default_template_slide_node_reference(::TSP::Reference* default_template_slide_node_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_template_slide_node_reference_);
  }
  if (default_template_slide_node_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_template_slide_node_reference));
    if (message_arena != submessage_arena) {
      default_template_slide_node_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_template_slide_node_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  default_template_slide_node_reference_ = default_template_slide_node_reference;
  // @@protoc_insertion_point(field_set_allocated:KN.ThemeArchive.default_template_slide_node_reference)
}

// optional bool default_template_slide_node_is_our_best_guess = 7;
inline bool ThemeArchive::_internal_has_default_template_slide_node_is_our_best_guess() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThemeArchive::has_default_template_slide_node_is_our_best_guess() const {
  return _internal_has_default_template_slide_node_is_our_best_guess();
}
inline void ThemeArchive::clear_default_template_slide_node_is_our_best_guess() {
  default_template_slide_node_is_our_best_guess_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ThemeArchive::_internal_default_template_slide_node_is_our_best_guess() const {
  return default_template_slide_node_is_our_best_guess_;
}
inline bool ThemeArchive::default_template_slide_node_is_our_best_guess() const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.default_template_slide_node_is_our_best_guess)
  return _internal_default_template_slide_node_is_our_best_guess();
}
inline void ThemeArchive::_internal_set_default_template_slide_node_is_our_best_guess(bool value) {
  _has_bits_[0] |= 0x00000010u;
  default_template_slide_node_is_our_best_guess_ = value;
}
inline void ThemeArchive::set_default_template_slide_node_is_our_best_guess(bool value) {
  _internal_set_default_template_slide_node_is_our_best_guess(value);
  // @@protoc_insertion_point(field_set:KN.ThemeArchive.default_template_slide_node_is_our_best_guess)
}

// repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 8;
inline int ThemeArchive::_internal_custom_effect_timing_curves_size() const {
  return custom_effect_timing_curves_.size();
}
inline int ThemeArchive::custom_effect_timing_curves_size() const {
  return _internal_custom_effect_timing_curves_size();
}
inline void ThemeArchive::clear_custom_effect_timing_curves() {
  custom_effect_timing_curves_.Clear();
}
inline ::KN::ThemeCustomTimingCurveArchive* ThemeArchive::mutable_custom_effect_timing_curves(int index) {
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.custom_effect_timing_curves)
  return custom_effect_timing_curves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive >*
ThemeArchive::mutable_custom_effect_timing_curves() {
  // @@protoc_insertion_point(field_mutable_list:KN.ThemeArchive.custom_effect_timing_curves)
  return &custom_effect_timing_curves_;
}
inline const ::KN::ThemeCustomTimingCurveArchive& ThemeArchive::_internal_custom_effect_timing_curves(int index) const {
  return custom_effect_timing_curves_.Get(index);
}
inline const ::KN::ThemeCustomTimingCurveArchive& ThemeArchive::custom_effect_timing_curves(int index) const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.custom_effect_timing_curves)
  return _internal_custom_effect_timing_curves(index);
}
inline ::KN::ThemeCustomTimingCurveArchive* ThemeArchive::_internal_add_custom_effect_timing_curves() {
  return custom_effect_timing_curves_.Add();
}
inline ::KN::ThemeCustomTimingCurveArchive* ThemeArchive::add_custom_effect_timing_curves() {
  ::KN::ThemeCustomTimingCurveArchive* _add = _internal_add_custom_effect_timing_curves();
  // @@protoc_insertion_point(field_add:KN.ThemeArchive.custom_effect_timing_curves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive >&
ThemeArchive::custom_effect_timing_curves() const {
  // @@protoc_insertion_point(field_list:KN.ThemeArchive.custom_effect_timing_curves)
  return custom_effect_timing_curves_;
}

// -------------------------------------------------------------------

// SlideTreeArchive

// optional .TSP.Reference rootSlideNode = 1 [deprecated = true];
inline bool SlideTreeArchive::_internal_has_rootslidenode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rootslidenode_ != nullptr);
  return value;
}
inline bool SlideTreeArchive::has_rootslidenode() const {
  return _internal_has_rootslidenode();
}
inline const ::TSP::Reference& SlideTreeArchive::_internal_rootslidenode() const {
  const ::TSP::Reference* p = rootslidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideTreeArchive::rootslidenode() const {
  // @@protoc_insertion_point(field_get:KN.SlideTreeArchive.rootSlideNode)
  return _internal_rootslidenode();
}
inline void SlideTreeArchive::unsafe_arena_set_allocated_rootslidenode(
    ::TSP::Reference* rootslidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rootslidenode_);
  }
  rootslidenode_ = rootslidenode;
  if (rootslidenode) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideTreeArchive.rootSlideNode)
}
inline ::TSP::Reference* SlideTreeArchive::release_rootslidenode() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = rootslidenode_;
  rootslidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideTreeArchive::unsafe_arena_release_rootslidenode() {
  // @@protoc_insertion_point(field_release:KN.SlideTreeArchive.rootSlideNode)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = rootslidenode_;
  rootslidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideTreeArchive::_internal_mutable_rootslidenode() {
  _has_bits_[0] |= 0x00000001u;
  if (rootslidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    rootslidenode_ = p;
  }
  return rootslidenode_;
}
inline ::TSP::Reference* SlideTreeArchive::mutable_rootslidenode() {
  ::TSP::Reference* _msg = _internal_mutable_rootslidenode();
  // @@protoc_insertion_point(field_mutable:KN.SlideTreeArchive.rootSlideNode)
  return _msg;
}
inline void SlideTreeArchive::set_allocated_rootslidenode(::TSP::Reference* rootslidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rootslidenode_);
  }
  if (rootslidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rootslidenode));
    if (message_arena != submessage_arena) {
      rootslidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rootslidenode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rootslidenode_ = rootslidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideTreeArchive.rootSlideNode)
}

// repeated .TSP.Reference slides = 2;
inline int SlideTreeArchive::_internal_slides_size() const {
  return slides_.size();
}
inline int SlideTreeArchive::slides_size() const {
  return _internal_slides_size();
}
inline ::TSP::Reference* SlideTreeArchive::mutable_slides(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideTreeArchive.slides)
  return slides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideTreeArchive::mutable_slides() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideTreeArchive.slides)
  return &slides_;
}
inline const ::TSP::Reference& SlideTreeArchive::_internal_slides(int index) const {
  return slides_.Get(index);
}
inline const ::TSP::Reference& SlideTreeArchive::slides(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideTreeArchive.slides)
  return _internal_slides(index);
}
inline ::TSP::Reference* SlideTreeArchive::_internal_add_slides() {
  return slides_.Add();
}
inline ::TSP::Reference* SlideTreeArchive::add_slides() {
  ::TSP::Reference* _add = _internal_add_slides();
  // @@protoc_insertion_point(field_add:KN.SlideTreeArchive.slides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideTreeArchive::slides() const {
  // @@protoc_insertion_point(field_list:KN.SlideTreeArchive.slides)
  return slides_;
}

// -------------------------------------------------------------------

// ShowArchive

// optional .TSP.Reference uiState = 1;
inline bool ShowArchive::_internal_has_uistate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uistate_ != nullptr);
  return value;
}
inline bool ShowArchive::has_uistate() const {
  return _internal_has_uistate();
}
inline const ::TSP::Reference& ShowArchive::_internal_uistate() const {
  const ::TSP::Reference* p = uistate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::uistate() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.uiState)
  return _internal_uistate();
}
inline void ShowArchive::unsafe_arena_set_allocated_uistate(
    ::TSP::Reference* uistate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uistate_);
  }
  uistate_ = uistate;
  if (uistate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.uiState)
}
inline ::TSP::Reference* ShowArchive::release_uistate() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = uistate_;
  uistate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_uistate() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.uiState)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = uistate_;
  uistate_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_uistate() {
  _has_bits_[0] |= 0x00000001u;
  if (uistate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    uistate_ = p;
  }
  return uistate_;
}
inline ::TSP::Reference* ShowArchive::mutable_uistate() {
  ::TSP::Reference* _msg = _internal_mutable_uistate();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.uiState)
  return _msg;
}
inline void ShowArchive::set_allocated_uistate(::TSP::Reference* uistate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uistate_);
  }
  if (uistate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uistate));
    if (message_arena != submessage_arena) {
      uistate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uistate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uistate_ = uistate;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.uiState)
}

// required .TSP.Reference theme = 2;
inline bool ShowArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool ShowArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& ShowArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::theme() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.theme)
  return _internal_theme();
}
inline void ShowArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.theme)
}
inline ::TSP::Reference* ShowArchive::release_theme() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.theme)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000002u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* ShowArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.theme)
  return _msg;
}
inline void ShowArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.theme)
}

// required .KN.SlideTreeArchive slideTree = 3;
inline bool ShowArchive::_internal_has_slidetree() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || slidetree_ != nullptr);
  return value;
}
inline bool ShowArchive::has_slidetree() const {
  return _internal_has_slidetree();
}
inline void ShowArchive::clear_slidetree() {
  if (slidetree_ != nullptr) slidetree_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KN::SlideTreeArchive& ShowArchive::_internal_slidetree() const {
  const ::KN::SlideTreeArchive* p = slidetree_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::SlideTreeArchive&>(
      ::KN::_SlideTreeArchive_default_instance_);
}
inline const ::KN::SlideTreeArchive& ShowArchive::slidetree() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.slideTree)
  return _internal_slidetree();
}
inline void ShowArchive::unsafe_arena_set_allocated_slidetree(
    ::KN::SlideTreeArchive* slidetree) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidetree_);
  }
  slidetree_ = slidetree;
  if (slidetree) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.slideTree)
}
inline ::KN::SlideTreeArchive* ShowArchive::release_slidetree() {
  _has_bits_[0] &= ~0x00000004u;
  ::KN::SlideTreeArchive* temp = slidetree_;
  slidetree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::SlideTreeArchive* ShowArchive::unsafe_arena_release_slidetree() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.slideTree)
  _has_bits_[0] &= ~0x00000004u;
  ::KN::SlideTreeArchive* temp = slidetree_;
  slidetree_ = nullptr;
  return temp;
}
inline ::KN::SlideTreeArchive* ShowArchive::_internal_mutable_slidetree() {
  _has_bits_[0] |= 0x00000004u;
  if (slidetree_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::SlideTreeArchive>(GetArenaForAllocation());
    slidetree_ = p;
  }
  return slidetree_;
}
inline ::KN::SlideTreeArchive* ShowArchive::mutable_slidetree() {
  ::KN::SlideTreeArchive* _msg = _internal_mutable_slidetree();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.slideTree)
  return _msg;
}
inline void ShowArchive::set_allocated_slidetree(::KN::SlideTreeArchive* slidetree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete slidetree_;
  }
  if (slidetree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::SlideTreeArchive>::GetOwningArena(slidetree);
    if (message_arena != submessage_arena) {
      slidetree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidetree, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  slidetree_ = slidetree;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.slideTree)
}

// required .TSP.Size size = 4;
inline bool ShowArchive::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool ShowArchive::has_size() const {
  return _internal_has_size();
}
inline const ::TSP::Size& ShowArchive::_internal_size() const {
  const ::TSP::Size* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ShowArchive::size() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.size)
  return _internal_size();
}
inline void ShowArchive::unsafe_arena_set_allocated_size(
    ::TSP::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.size)
}
inline ::TSP::Size* ShowArchive::release_size() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = size_;
  size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* ShowArchive::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.size)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ShowArchive::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000008u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    size_ = p;
  }
  return size_;
}
inline ::TSP::Size* ShowArchive::mutable_size() {
  ::TSP::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.size)
  return _msg;
}
inline void ShowArchive::set_allocated_size(::TSP::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.size)
}

// required .TSP.Reference stylesheet = 5;
inline bool ShowArchive::_internal_has_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || stylesheet_ != nullptr);
  return value;
}
inline bool ShowArchive::has_stylesheet() const {
  return _internal_has_stylesheet();
}
inline const ::TSP::Reference& ShowArchive::_internal_stylesheet() const {
  const ::TSP::Reference* p = stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::stylesheet() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.stylesheet)
  return _internal_stylesheet();
}
inline void ShowArchive::unsafe_arena_set_allocated_stylesheet(
    ::TSP::Reference* stylesheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  stylesheet_ = stylesheet;
  if (stylesheet) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.stylesheet)
}
inline ::TSP::Reference* ShowArchive::release_stylesheet() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_stylesheet() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.stylesheet)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_stylesheet() {
  _has_bits_[0] |= 0x00000010u;
  if (stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    stylesheet_ = p;
  }
  return stylesheet_;
}
inline ::TSP::Reference* ShowArchive::mutable_stylesheet() {
  ::TSP::Reference* _msg = _internal_mutable_stylesheet();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.stylesheet)
  return _msg;
}
inline void ShowArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  if (stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet));
    if (message_arena != submessage_arena) {
      stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  stylesheet_ = stylesheet;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.stylesheet)
}

// optional bool slideNumbersVisible = 6;
inline bool ShowArchive::_internal_has_slidenumbersvisible() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ShowArchive::has_slidenumbersvisible() const {
  return _internal_has_slidenumbersvisible();
}
inline void ShowArchive::clear_slidenumbersvisible() {
  slidenumbersvisible_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ShowArchive::_internal_slidenumbersvisible() const {
  return slidenumbersvisible_;
}
inline bool ShowArchive::slidenumbersvisible() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.slideNumbersVisible)
  return _internal_slidenumbersvisible();
}
inline void ShowArchive::_internal_set_slidenumbersvisible(bool value) {
  _has_bits_[0] |= 0x00000200u;
  slidenumbersvisible_ = value;
}
inline void ShowArchive::set_slidenumbersvisible(bool value) {
  _internal_set_slidenumbersvisible(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.slideNumbersVisible)
}

// optional .TSP.Reference recording = 7;
inline bool ShowArchive::_internal_has_recording() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || recording_ != nullptr);
  return value;
}
inline bool ShowArchive::has_recording() const {
  return _internal_has_recording();
}
inline const ::TSP::Reference& ShowArchive::_internal_recording() const {
  const ::TSP::Reference* p = recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::recording() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.recording)
  return _internal_recording();
}
inline void ShowArchive::unsafe_arena_set_allocated_recording(
    ::TSP::Reference* recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recording_);
  }
  recording_ = recording;
  if (recording) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.recording)
}
inline ::TSP::Reference* ShowArchive::release_recording() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = recording_;
  recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_recording() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.recording)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = recording_;
  recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_recording() {
  _has_bits_[0] |= 0x00000020u;
  if (recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    recording_ = p;
  }
  return recording_;
}
inline ::TSP::Reference* ShowArchive::mutable_recording() {
  ::TSP::Reference* _msg = _internal_mutable_recording();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.recording)
  return _msg;
}
inline void ShowArchive::set_allocated_recording(::TSP::Reference* recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recording_);
  }
  if (recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recording));
    if (message_arena != submessage_arena) {
      recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recording, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  recording_ = recording;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.recording)
}

// optional bool loop_presentation = 8;
inline bool ShowArchive::_internal_has_loop_presentation() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ShowArchive::has_loop_presentation() const {
  return _internal_has_loop_presentation();
}
inline void ShowArchive::clear_loop_presentation() {
  loop_presentation_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ShowArchive::_internal_loop_presentation() const {
  return loop_presentation_;
}
inline bool ShowArchive::loop_presentation() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.loop_presentation)
  return _internal_loop_presentation();
}
inline void ShowArchive::_internal_set_loop_presentation(bool value) {
  _has_bits_[0] |= 0x00000400u;
  loop_presentation_ = value;
}
inline void ShowArchive::set_loop_presentation(bool value) {
  _internal_set_loop_presentation(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.loop_presentation)
}

// optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
inline bool ShowArchive::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ShowArchive::has_mode() const {
  return _internal_has_mode();
}
inline void ShowArchive::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::KN::ShowArchive_KNShowMode ShowArchive::_internal_mode() const {
  return static_cast< ::KN::ShowArchive_KNShowMode >(mode_);
}
inline ::KN::ShowArchive_KNShowMode ShowArchive::mode() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.mode)
  return _internal_mode();
}
inline void ShowArchive::_internal_set_mode(::KN::ShowArchive_KNShowMode value) {
  assert(::KN::ShowArchive_KNShowMode_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  mode_ = value;
}
inline void ShowArchive::set_mode(::KN::ShowArchive_KNShowMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.mode)
}

// optional double autoplay_transition_delay = 10 [default = 5];
inline bool ShowArchive::_internal_has_autoplay_transition_delay() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ShowArchive::has_autoplay_transition_delay() const {
  return _internal_has_autoplay_transition_delay();
}
inline void ShowArchive::clear_autoplay_transition_delay() {
  autoplay_transition_delay_ = 5;
  _has_bits_[0] &= ~0x00002000u;
}
inline double ShowArchive::_internal_autoplay_transition_delay() const {
  return autoplay_transition_delay_;
}
inline double ShowArchive::autoplay_transition_delay() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.autoplay_transition_delay)
  return _internal_autoplay_transition_delay();
}
inline void ShowArchive::_internal_set_autoplay_transition_delay(double value) {
  _has_bits_[0] |= 0x00002000u;
  autoplay_transition_delay_ = value;
}
inline void ShowArchive::set_autoplay_transition_delay(double value) {
  _internal_set_autoplay_transition_delay(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.autoplay_transition_delay)
}

// optional double autoplay_build_delay = 11 [default = 2];
inline bool ShowArchive::_internal_has_autoplay_build_delay() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ShowArchive::has_autoplay_build_delay() const {
  return _internal_has_autoplay_build_delay();
}
inline void ShowArchive::clear_autoplay_build_delay() {
  autoplay_build_delay_ = 2;
  _has_bits_[0] &= ~0x00004000u;
}
inline double ShowArchive::_internal_autoplay_build_delay() const {
  return autoplay_build_delay_;
}
inline double ShowArchive::autoplay_build_delay() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.autoplay_build_delay)
  return _internal_autoplay_build_delay();
}
inline void ShowArchive::_internal_set_autoplay_build_delay(double value) {
  _has_bits_[0] |= 0x00004000u;
  autoplay_build_delay_ = value;
}
inline void ShowArchive::set_autoplay_build_delay(double value) {
  _internal_set_autoplay_build_delay(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.autoplay_build_delay)
}

// optional bool idle_timer_active = 15;
inline bool ShowArchive::_internal_has_idle_timer_active() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ShowArchive::has_idle_timer_active() const {
  return _internal_has_idle_timer_active();
}
inline void ShowArchive::clear_idle_timer_active() {
  idle_timer_active_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ShowArchive::_internal_idle_timer_active() const {
  return idle_timer_active_;
}
inline bool ShowArchive::idle_timer_active() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.idle_timer_active)
  return _internal_idle_timer_active();
}
inline void ShowArchive::_internal_set_idle_timer_active(bool value) {
  _has_bits_[0] |= 0x00000800u;
  idle_timer_active_ = value;
}
inline void ShowArchive::set_idle_timer_active(bool value) {
  _internal_set_idle_timer_active(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.idle_timer_active)
}

// optional double idle_timer_delay = 16 [default = 900];
inline bool ShowArchive::_internal_has_idle_timer_delay() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ShowArchive::has_idle_timer_delay() const {
  return _internal_has_idle_timer_delay();
}
inline void ShowArchive::clear_idle_timer_delay() {
  idle_timer_delay_ = 900;
  _has_bits_[0] &= ~0x00008000u;
}
inline double ShowArchive::_internal_idle_timer_delay() const {
  return idle_timer_delay_;
}
inline double ShowArchive::idle_timer_delay() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.idle_timer_delay)
  return _internal_idle_timer_delay();
}
inline void ShowArchive::_internal_set_idle_timer_delay(double value) {
  _has_bits_[0] |= 0x00008000u;
  idle_timer_delay_ = value;
}
inline void ShowArchive::set_idle_timer_delay(double value) {
  _internal_set_idle_timer_delay(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.idle_timer_delay)
}

// optional .TSP.Reference soundtrack = 17;
inline bool ShowArchive::_internal_has_soundtrack() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || soundtrack_ != nullptr);
  return value;
}
inline bool ShowArchive::has_soundtrack() const {
  return _internal_has_soundtrack();
}
inline const ::TSP::Reference& ShowArchive::_internal_soundtrack() const {
  const ::TSP::Reference* p = soundtrack_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::soundtrack() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.soundtrack)
  return _internal_soundtrack();
}
inline void ShowArchive::unsafe_arena_set_allocated_soundtrack(
    ::TSP::Reference* soundtrack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack_);
  }
  soundtrack_ = soundtrack;
  if (soundtrack) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.soundtrack)
}
inline ::TSP::Reference* ShowArchive::release_soundtrack() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = soundtrack_;
  soundtrack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_soundtrack() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.soundtrack)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = soundtrack_;
  soundtrack_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_soundtrack() {
  _has_bits_[0] |= 0x00000040u;
  if (soundtrack_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    soundtrack_ = p;
  }
  return soundtrack_;
}
inline ::TSP::Reference* ShowArchive::mutable_soundtrack() {
  ::TSP::Reference* _msg = _internal_mutable_soundtrack();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.soundtrack)
  return _msg;
}
inline void ShowArchive::set_allocated_soundtrack(::TSP::Reference* soundtrack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack_);
  }
  if (soundtrack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack));
    if (message_arena != submessage_arena) {
      soundtrack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soundtrack, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  soundtrack_ = soundtrack;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.soundtrack)
}

// optional bool automatically_plays_upon_open = 18;
inline bool ShowArchive::_internal_has_automatically_plays_upon_open() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ShowArchive::has_automatically_plays_upon_open() const {
  return _internal_has_automatically_plays_upon_open();
}
inline void ShowArchive::clear_automatically_plays_upon_open() {
  automatically_plays_upon_open_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ShowArchive::_internal_automatically_plays_upon_open() const {
  return automatically_plays_upon_open_;
}
inline bool ShowArchive::automatically_plays_upon_open() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.automatically_plays_upon_open)
  return _internal_automatically_plays_upon_open();
}
inline void ShowArchive::_internal_set_automatically_plays_upon_open(bool value) {
  _has_bits_[0] |= 0x00001000u;
  automatically_plays_upon_open_ = value;
}
inline void ShowArchive::set_automatically_plays_upon_open(bool value) {
  _internal_set_automatically_plays_upon_open(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.automatically_plays_upon_open)
}

// optional .TSP.Reference slideList = 19;
inline bool ShowArchive::_internal_has_slidelist() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || slidelist_ != nullptr);
  return value;
}
inline bool ShowArchive::has_slidelist() const {
  return _internal_has_slidelist();
}
inline const ::TSP::Reference& ShowArchive::_internal_slidelist() const {
  const ::TSP::Reference* p = slidelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::slidelist() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.slideList)
  return _internal_slidelist();
}
inline void ShowArchive::unsafe_arena_set_allocated_slidelist(
    ::TSP::Reference* slidelist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidelist_);
  }
  slidelist_ = slidelist;
  if (slidelist) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.slideList)
}
inline ::TSP::Reference* ShowArchive::release_slidelist() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = slidelist_;
  slidelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_slidelist() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.slideList)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = slidelist_;
  slidelist_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_slidelist() {
  _has_bits_[0] |= 0x00000080u;
  if (slidelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    slidelist_ = p;
  }
  return slidelist_;
}
inline ::TSP::Reference* ShowArchive::mutable_slidelist() {
  ::TSP::Reference* _msg = _internal_mutable_slidelist();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.slideList)
  return _msg;
}
inline void ShowArchive::set_allocated_slidelist(::TSP::Reference* slidelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidelist_);
  }
  if (slidelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidelist));
    if (message_arena != submessage_arena) {
      slidelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidelist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  slidelist_ = slidelist;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.slideList)
}

// -------------------------------------------------------------------

// DocumentArchive

// required .TSA.DocumentArchive super = 3;
inline bool DocumentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSA::DocumentArchive& DocumentArchive::_internal_super() const {
  const ::TSA::DocumentArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::DocumentArchive&>(
      ::TSA::_DocumentArchive_default_instance_);
}
inline const ::TSA::DocumentArchive& DocumentArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.DocumentArchive.super)
  return _internal_super();
}
inline void DocumentArchive::unsafe_arena_set_allocated_super(
    ::TSA::DocumentArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.DocumentArchive.super)
}
inline ::TSA::DocumentArchive* DocumentArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSA::DocumentArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.DocumentArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSA::DocumentArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::DocumentArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSA::DocumentArchive* DocumentArchive::mutable_super() {
  ::TSA::DocumentArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.DocumentArchive.super)
  return _msg;
}
inline void DocumentArchive::set_allocated_super(::TSA::DocumentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.DocumentArchive.super)
}

// required .TSP.Reference show = 2;
inline bool DocumentArchive::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || show_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& DocumentArchive::_internal_show() const {
  const ::TSP::Reference* p = show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.DocumentArchive.show)
  return _internal_show();
}
inline void DocumentArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.DocumentArchive.show)
}
inline ::TSP::Reference* DocumentArchive::release_show() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.DocumentArchive.show)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_show() {
  _has_bits_[0] |= 0x00000001u;
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    show_ = p;
  }
  return show_;
}
inline ::TSP::Reference* DocumentArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.DocumentArchive.show)
  return _msg;
}
inline void DocumentArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.DocumentArchive.show)
}

// optional .TSP.Reference tables_custom_format_list = 4;
inline bool DocumentArchive::_internal_has_tables_custom_format_list() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tables_custom_format_list_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_tables_custom_format_list() const {
  return _internal_has_tables_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::_internal_tables_custom_format_list() const {
  const ::TSP::Reference* p = tables_custom_format_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::tables_custom_format_list() const {
  // @@protoc_insertion_point(field_get:KN.DocumentArchive.tables_custom_format_list)
  return _internal_tables_custom_format_list();
}
inline void DocumentArchive::unsafe_arena_set_allocated_tables_custom_format_list(
    ::TSP::Reference* tables_custom_format_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tables_custom_format_list_);
  }
  tables_custom_format_list_ = tables_custom_format_list;
  if (tables_custom_format_list) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.DocumentArchive.tables_custom_format_list)
}
inline ::TSP::Reference* DocumentArchive::release_tables_custom_format_list() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = tables_custom_format_list_;
  tables_custom_format_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_tables_custom_format_list() {
  // @@protoc_insertion_point(field_release:KN.DocumentArchive.tables_custom_format_list)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = tables_custom_format_list_;
  tables_custom_format_list_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_tables_custom_format_list() {
  _has_bits_[0] |= 0x00000004u;
  if (tables_custom_format_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    tables_custom_format_list_ = p;
  }
  return tables_custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_tables_custom_format_list() {
  ::TSP::Reference* _msg = _internal_mutable_tables_custom_format_list();
  // @@protoc_insertion_point(field_mutable:KN.DocumentArchive.tables_custom_format_list)
  return _msg;
}
inline void DocumentArchive::set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tables_custom_format_list_);
  }
  if (tables_custom_format_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tables_custom_format_list));
    if (message_arena != submessage_arena) {
      tables_custom_format_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tables_custom_format_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tables_custom_format_list_ = tables_custom_format_list;
  // @@protoc_insertion_point(field_set_allocated:KN.DocumentArchive.tables_custom_format_list)
}

// -------------------------------------------------------------------

// SlideStylePropertiesArchive

// optional .TSD.FillArchive fill = 1;
inline bool SlideStylePropertiesArchive::_internal_has_fill() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fill_ != nullptr);
  return value;
}
inline bool SlideStylePropertiesArchive::has_fill() const {
  return _internal_has_fill();
}
inline const ::TSD::FillArchive& SlideStylePropertiesArchive::_internal_fill() const {
  const ::TSD::FillArchive* p = fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& SlideStylePropertiesArchive::fill() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.fill)
  return _internal_fill();
}
inline void SlideStylePropertiesArchive::unsafe_arena_set_allocated_fill(
    ::TSD::FillArchive* fill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_);
  }
  fill_ = fill;
  if (fill) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideStylePropertiesArchive.fill)
}
inline ::TSD::FillArchive* SlideStylePropertiesArchive::release_fill() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = fill_;
  fill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* SlideStylePropertiesArchive::unsafe_arena_release_fill() {
  // @@protoc_insertion_point(field_release:KN.SlideStylePropertiesArchive.fill)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = fill_;
  fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* SlideStylePropertiesArchive::_internal_mutable_fill() {
  _has_bits_[0] |= 0x00000001u;
  if (fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    fill_ = p;
  }
  return fill_;
}
inline ::TSD::FillArchive* SlideStylePropertiesArchive::mutable_fill() {
  ::TSD::FillArchive* _msg = _internal_mutable_fill();
  // @@protoc_insertion_point(field_mutable:KN.SlideStylePropertiesArchive.fill)
  return _msg;
}
inline void SlideStylePropertiesArchive::set_allocated_fill(::TSD::FillArchive* fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_);
  }
  if (fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill));
    if (message_arena != submessage_arena) {
      fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fill_ = fill;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideStylePropertiesArchive.fill)
}

// optional .KN.TransitionAttributesArchive transition = 2;
inline bool SlideStylePropertiesArchive::_internal_has_transition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || transition_ != nullptr);
  return value;
}
inline bool SlideStylePropertiesArchive::has_transition() const {
  return _internal_has_transition();
}
inline void SlideStylePropertiesArchive::clear_transition() {
  if (transition_ != nullptr) transition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KN::TransitionAttributesArchive& SlideStylePropertiesArchive::_internal_transition() const {
  const ::KN::TransitionAttributesArchive* p = transition_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::TransitionAttributesArchive&>(
      ::KN::_TransitionAttributesArchive_default_instance_);
}
inline const ::KN::TransitionAttributesArchive& SlideStylePropertiesArchive::transition() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.transition)
  return _internal_transition();
}
inline void SlideStylePropertiesArchive::unsafe_arena_set_allocated_transition(
    ::KN::TransitionAttributesArchive* transition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transition_);
  }
  transition_ = transition;
  if (transition) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideStylePropertiesArchive.transition)
}
inline ::KN::TransitionAttributesArchive* SlideStylePropertiesArchive::release_transition() {
  _has_bits_[0] &= ~0x00000002u;
  ::KN::TransitionAttributesArchive* temp = transition_;
  transition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::TransitionAttributesArchive* SlideStylePropertiesArchive::unsafe_arena_release_transition() {
  // @@protoc_insertion_point(field_release:KN.SlideStylePropertiesArchive.transition)
  _has_bits_[0] &= ~0x00000002u;
  ::KN::TransitionAttributesArchive* temp = transition_;
  transition_ = nullptr;
  return temp;
}
inline ::KN::TransitionAttributesArchive* SlideStylePropertiesArchive::_internal_mutable_transition() {
  _has_bits_[0] |= 0x00000002u;
  if (transition_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::TransitionAttributesArchive>(GetArenaForAllocation());
    transition_ = p;
  }
  return transition_;
}
inline ::KN::TransitionAttributesArchive* SlideStylePropertiesArchive::mutable_transition() {
  ::KN::TransitionAttributesArchive* _msg = _internal_mutable_transition();
  // @@protoc_insertion_point(field_mutable:KN.SlideStylePropertiesArchive.transition)
  return _msg;
}
inline void SlideStylePropertiesArchive::set_allocated_transition(::KN::TransitionAttributesArchive* transition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transition_;
  }
  if (transition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::TransitionAttributesArchive>::GetOwningArena(transition);
    if (message_arena != submessage_arena) {
      transition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transition_ = transition;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideStylePropertiesArchive.transition)
}

// optional bool transition_null = 3;
inline bool SlideStylePropertiesArchive::_internal_has_transition_null() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_transition_null() const {
  return _internal_has_transition_null();
}
inline void SlideStylePropertiesArchive::clear_transition_null() {
  transition_null_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SlideStylePropertiesArchive::_internal_transition_null() const {
  return transition_null_;
}
inline bool SlideStylePropertiesArchive::transition_null() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.transition_null)
  return _internal_transition_null();
}
inline void SlideStylePropertiesArchive::_internal_set_transition_null(bool value) {
  _has_bits_[0] |= 0x00000004u;
  transition_null_ = value;
}
inline void SlideStylePropertiesArchive::set_transition_null(bool value) {
  _internal_set_transition_null(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.transition_null)
}

// optional bool titlePlaceholderVisibility = 4;
inline bool SlideStylePropertiesArchive::_internal_has_titleplaceholdervisibility() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_titleplaceholdervisibility() const {
  return _internal_has_titleplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::clear_titleplaceholdervisibility() {
  titleplaceholdervisibility_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SlideStylePropertiesArchive::_internal_titleplaceholdervisibility() const {
  return titleplaceholdervisibility_;
}
inline bool SlideStylePropertiesArchive::titleplaceholdervisibility() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.titlePlaceholderVisibility)
  return _internal_titleplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::_internal_set_titleplaceholdervisibility(bool value) {
  _has_bits_[0] |= 0x00000008u;
  titleplaceholdervisibility_ = value;
}
inline void SlideStylePropertiesArchive::set_titleplaceholdervisibility(bool value) {
  _internal_set_titleplaceholdervisibility(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.titlePlaceholderVisibility)
}

// optional bool bodyPlaceholderVisibility = 5;
inline bool SlideStylePropertiesArchive::_internal_has_bodyplaceholdervisibility() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_bodyplaceholdervisibility() const {
  return _internal_has_bodyplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::clear_bodyplaceholdervisibility() {
  bodyplaceholdervisibility_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SlideStylePropertiesArchive::_internal_bodyplaceholdervisibility() const {
  return bodyplaceholdervisibility_;
}
inline bool SlideStylePropertiesArchive::bodyplaceholdervisibility() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.bodyPlaceholderVisibility)
  return _internal_bodyplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::_internal_set_bodyplaceholdervisibility(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bodyplaceholdervisibility_ = value;
}
inline void SlideStylePropertiesArchive::set_bodyplaceholdervisibility(bool value) {
  _internal_set_bodyplaceholdervisibility(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.bodyPlaceholderVisibility)
}

// optional bool objectPlaceholderVisibility = 7;
inline bool SlideStylePropertiesArchive::_internal_has_objectplaceholdervisibility() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_objectplaceholdervisibility() const {
  return _internal_has_objectplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::clear_objectplaceholdervisibility() {
  objectplaceholdervisibility_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SlideStylePropertiesArchive::_internal_objectplaceholdervisibility() const {
  return objectplaceholdervisibility_;
}
inline bool SlideStylePropertiesArchive::objectplaceholdervisibility() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.objectPlaceholderVisibility)
  return _internal_objectplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::_internal_set_objectplaceholdervisibility(bool value) {
  _has_bits_[0] |= 0x00000020u;
  objectplaceholdervisibility_ = value;
}
inline void SlideStylePropertiesArchive::set_objectplaceholdervisibility(bool value) {
  _internal_set_objectplaceholdervisibility(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.objectPlaceholderVisibility)
}

// optional bool slideNumberPlaceholderVisibility = 6;
inline bool SlideStylePropertiesArchive::_internal_has_slidenumberplaceholdervisibility() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_slidenumberplaceholdervisibility() const {
  return _internal_has_slidenumberplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::clear_slidenumberplaceholdervisibility() {
  slidenumberplaceholdervisibility_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SlideStylePropertiesArchive::_internal_slidenumberplaceholdervisibility() const {
  return slidenumberplaceholdervisibility_;
}
inline bool SlideStylePropertiesArchive::slidenumberplaceholdervisibility() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.slideNumberPlaceholderVisibility)
  return _internal_slidenumberplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::_internal_set_slidenumberplaceholdervisibility(bool value) {
  _has_bits_[0] |= 0x00000040u;
  slidenumberplaceholdervisibility_ = value;
}
inline void SlideStylePropertiesArchive::set_slidenumberplaceholdervisibility(bool value) {
  _internal_set_slidenumberplaceholdervisibility(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.slideNumberPlaceholderVisibility)
}

// -------------------------------------------------------------------

// SlideStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool SlideStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool SlideStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& SlideStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& SlideStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.SlideStyleArchive.super)
  return _internal_super();
}
inline void SlideStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideStyleArchive.super)
}
inline ::TSS::StyleArchive* SlideStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::StyleArchive* SlideStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.SlideStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* SlideStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* SlideStyleArchive::mutable_super() {
  ::TSS::StyleArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.SlideStyleArchive.super)
  return _msg;
}
inline void SlideStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool SlideStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SlideStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void SlideStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:KN.SlideStyleArchive.override_count)
  return _internal_override_count();
}
inline void SlideStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  override_count_ = value;
}
inline void SlideStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:KN.SlideStyleArchive.override_count)
}

// optional .KN.SlideStylePropertiesArchive slide_properties = 11;
inline bool SlideStyleArchive::_internal_has_slide_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_properties_ != nullptr);
  return value;
}
inline bool SlideStyleArchive::has_slide_properties() const {
  return _internal_has_slide_properties();
}
inline void SlideStyleArchive::clear_slide_properties() {
  if (slide_properties_ != nullptr) slide_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KN::SlideStylePropertiesArchive& SlideStyleArchive::_internal_slide_properties() const {
  const ::KN::SlideStylePropertiesArchive* p = slide_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::SlideStylePropertiesArchive&>(
      ::KN::_SlideStylePropertiesArchive_default_instance_);
}
inline const ::KN::SlideStylePropertiesArchive& SlideStyleArchive::slide_properties() const {
  // @@protoc_insertion_point(field_get:KN.SlideStyleArchive.slide_properties)
  return _internal_slide_properties();
}
inline void SlideStyleArchive::unsafe_arena_set_allocated_slide_properties(
    ::KN::SlideStylePropertiesArchive* slide_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_properties_);
  }
  slide_properties_ = slide_properties;
  if (slide_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideStyleArchive.slide_properties)
}
inline ::KN::SlideStylePropertiesArchive* SlideStyleArchive::release_slide_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::KN::SlideStylePropertiesArchive* temp = slide_properties_;
  slide_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::SlideStylePropertiesArchive* SlideStyleArchive::unsafe_arena_release_slide_properties() {
  // @@protoc_insertion_point(field_release:KN.SlideStyleArchive.slide_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::KN::SlideStylePropertiesArchive* temp = slide_properties_;
  slide_properties_ = nullptr;
  return temp;
}
inline ::KN::SlideStylePropertiesArchive* SlideStyleArchive::_internal_mutable_slide_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::SlideStylePropertiesArchive>(GetArenaForAllocation());
    slide_properties_ = p;
  }
  return slide_properties_;
}
inline ::KN::SlideStylePropertiesArchive* SlideStyleArchive::mutable_slide_properties() {
  ::KN::SlideStylePropertiesArchive* _msg = _internal_mutable_slide_properties();
  // @@protoc_insertion_point(field_mutable:KN.SlideStyleArchive.slide_properties)
  return _msg;
}
inline void SlideStyleArchive::set_allocated_slide_properties(::KN::SlideStylePropertiesArchive* slide_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete slide_properties_;
  }
  if (slide_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::SlideStylePropertiesArchive>::GetOwningArena(slide_properties);
    if (message_arena != submessage_arena) {
      slide_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_properties_ = slide_properties;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideStyleArchive.slide_properties)
}

// -------------------------------------------------------------------

// PasteboardNativeStorageArchive

// repeated .TSP.Reference drawables = 1;
inline int PasteboardNativeStorageArchive::_internal_drawables_size() const {
  return drawables_.size();
}
inline int PasteboardNativeStorageArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.drawables)
  return &drawables_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::drawables() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.drawables)
  return drawables_;
}

// repeated .TSP.Reference builds = 2;
inline int PasteboardNativeStorageArchive::_internal_builds_size() const {
  return builds_.size();
}
inline int PasteboardNativeStorageArchive::builds_size() const {
  return _internal_builds_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_builds(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.builds)
  return builds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_builds() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.builds)
  return &builds_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_builds(int index) const {
  return builds_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::builds(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.builds)
  return _internal_builds(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_builds() {
  return builds_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_builds() {
  ::TSP::Reference* _add = _internal_add_builds();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.builds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::builds() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.builds)
  return builds_;
}

// repeated .TSP.Reference buildChunks = 3;
inline int PasteboardNativeStorageArchive::_internal_buildchunks_size() const {
  return buildchunks_.size();
}
inline int PasteboardNativeStorageArchive::buildchunks_size() const {
  return _internal_buildchunks_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_buildchunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.buildChunks)
  return buildchunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_buildchunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.buildChunks)
  return &buildchunks_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_buildchunks(int index) const {
  return buildchunks_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::buildchunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.buildChunks)
  return _internal_buildchunks(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_buildchunks() {
  return buildchunks_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_buildchunks() {
  ::TSP::Reference* _add = _internal_add_buildchunks();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.buildChunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::buildchunks() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.buildChunks)
  return buildchunks_;
}

// repeated .TSP.Reference slideNodes = 4;
inline int PasteboardNativeStorageArchive::_internal_slidenodes_size() const {
  return slidenodes_.size();
}
inline int PasteboardNativeStorageArchive::slidenodes_size() const {
  return _internal_slidenodes_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_slidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.slideNodes)
  return slidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_slidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.slideNodes)
  return &slidenodes_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_slidenodes(int index) const {
  return slidenodes_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::slidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.slideNodes)
  return _internal_slidenodes(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_slidenodes() {
  return slidenodes_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_slidenodes() {
  ::TSP::Reference* _add = _internal_add_slidenodes();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.slideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::slidenodes() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.slideNodes)
  return slidenodes_;
}

// repeated .TSP.Reference displayed_slide_nodes = 12;
inline int PasteboardNativeStorageArchive::_internal_displayed_slide_nodes_size() const {
  return displayed_slide_nodes_.size();
}
inline int PasteboardNativeStorageArchive::displayed_slide_nodes_size() const {
  return _internal_displayed_slide_nodes_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_displayed_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.displayed_slide_nodes)
  return displayed_slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_displayed_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.displayed_slide_nodes)
  return &displayed_slide_nodes_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_displayed_slide_nodes(int index) const {
  return displayed_slide_nodes_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::displayed_slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.displayed_slide_nodes)
  return _internal_displayed_slide_nodes(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_displayed_slide_nodes() {
  return displayed_slide_nodes_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_displayed_slide_nodes() {
  ::TSP::Reference* _add = _internal_add_displayed_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.displayed_slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::displayed_slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.displayed_slide_nodes)
  return displayed_slide_nodes_;
}

// repeated .TSP.Reference template_slide_nodes = 9;
inline int PasteboardNativeStorageArchive::_internal_template_slide_nodes_size() const {
  return template_slide_nodes_.size();
}
inline int PasteboardNativeStorageArchive::template_slide_nodes_size() const {
  return _internal_template_slide_nodes_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_template_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.template_slide_nodes)
  return template_slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_template_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.template_slide_nodes)
  return &template_slide_nodes_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_template_slide_nodes(int index) const {
  return template_slide_nodes_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::template_slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.template_slide_nodes)
  return _internal_template_slide_nodes(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_template_slide_nodes() {
  return template_slide_nodes_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_template_slide_nodes() {
  ::TSP::Reference* _add = _internal_add_template_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.template_slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::template_slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.template_slide_nodes)
  return template_slide_nodes_;
}

// repeated .TSP.Reference collapsedSlideNodes = 10;
inline int PasteboardNativeStorageArchive::_internal_collapsedslidenodes_size() const {
  return collapsedslidenodes_.size();
}
inline int PasteboardNativeStorageArchive::collapsedslidenodes_size() const {
  return _internal_collapsedslidenodes_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_collapsedslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.collapsedSlideNodes)
  return collapsedslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_collapsedslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.collapsedSlideNodes)
  return &collapsedslidenodes_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_collapsedslidenodes(int index) const {
  return collapsedslidenodes_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::collapsedslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.collapsedSlideNodes)
  return _internal_collapsedslidenodes(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_collapsedslidenodes() {
  return collapsedslidenodes_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_collapsedslidenodes() {
  ::TSP::Reference* _add = _internal_add_collapsedslidenodes();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.collapsedSlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::collapsedslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.collapsedSlideNodes)
  return collapsedslidenodes_;
}

// repeated .TSP.Reference outlineCollapsedSlideNodes = 11;
inline int PasteboardNativeStorageArchive::_internal_outlinecollapsedslidenodes_size() const {
  return outlinecollapsedslidenodes_.size();
}
inline int PasteboardNativeStorageArchive::outlinecollapsedslidenodes_size() const {
  return _internal_outlinecollapsedslidenodes_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_outlinecollapsedslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.outlineCollapsedSlideNodes)
  return outlinecollapsedslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_outlinecollapsedslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.outlineCollapsedSlideNodes)
  return &outlinecollapsedslidenodes_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_outlinecollapsedslidenodes(int index) const {
  return outlinecollapsedslidenodes_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::outlinecollapsedslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.outlineCollapsedSlideNodes)
  return _internal_outlinecollapsedslidenodes(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_outlinecollapsedslidenodes() {
  return outlinecollapsedslidenodes_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_outlinecollapsedslidenodes() {
  ::TSP::Reference* _add = _internal_add_outlinecollapsedslidenodes();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.outlineCollapsedSlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::outlinecollapsedslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.outlineCollapsedSlideNodes)
  return outlinecollapsedslidenodes_;
}

// repeated .TSP.Reference outlineHasBodySlideNodes = 13;
inline int PasteboardNativeStorageArchive::_internal_outlinehasbodyslidenodes_size() const {
  return outlinehasbodyslidenodes_.size();
}
inline int PasteboardNativeStorageArchive::outlinehasbodyslidenodes_size() const {
  return _internal_outlinehasbodyslidenodes_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_outlinehasbodyslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.outlineHasBodySlideNodes)
  return outlinehasbodyslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_outlinehasbodyslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.outlineHasBodySlideNodes)
  return &outlinehasbodyslidenodes_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_outlinehasbodyslidenodes(int index) const {
  return outlinehasbodyslidenodes_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::outlinehasbodyslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.outlineHasBodySlideNodes)
  return _internal_outlinehasbodyslidenodes(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_outlinehasbodyslidenodes() {
  return outlinehasbodyslidenodes_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_outlinehasbodyslidenodes() {
  ::TSP::Reference* _add = _internal_add_outlinehasbodyslidenodes();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.outlineHasBodySlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::outlinehasbodyslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.outlineHasBodySlideNodes)
  return outlinehasbodyslidenodes_;
}

// optional .TSP.Size originalShowSize = 5;
inline bool PasteboardNativeStorageArchive::_internal_has_originalshowsize() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || originalshowsize_ != nullptr);
  return value;
}
inline bool PasteboardNativeStorageArchive::has_originalshowsize() const {
  return _internal_has_originalshowsize();
}
inline const ::TSP::Size& PasteboardNativeStorageArchive::_internal_originalshowsize() const {
  const ::TSP::Size* p = originalshowsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& PasteboardNativeStorageArchive::originalshowsize() const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.originalShowSize)
  return _internal_originalshowsize();
}
inline void PasteboardNativeStorageArchive::unsafe_arena_set_allocated_originalshowsize(
    ::TSP::Size* originalshowsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(originalshowsize_);
  }
  originalshowsize_ = originalshowsize;
  if (originalshowsize) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.PasteboardNativeStorageArchive.originalShowSize)
}
inline ::TSP::Size* PasteboardNativeStorageArchive::release_originalshowsize() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = originalshowsize_;
  originalshowsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* PasteboardNativeStorageArchive::unsafe_arena_release_originalshowsize() {
  // @@protoc_insertion_point(field_release:KN.PasteboardNativeStorageArchive.originalShowSize)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = originalshowsize_;
  originalshowsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* PasteboardNativeStorageArchive::_internal_mutable_originalshowsize() {
  _has_bits_[0] |= 0x00000002u;
  if (originalshowsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    originalshowsize_ = p;
  }
  return originalshowsize_;
}
inline ::TSP::Size* PasteboardNativeStorageArchive::mutable_originalshowsize() {
  ::TSP::Size* _msg = _internal_mutable_originalshowsize();
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.originalShowSize)
  return _msg;
}
inline void PasteboardNativeStorageArchive::set_allocated_originalshowsize(::TSP::Size* originalshowsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(originalshowsize_);
  }
  if (originalshowsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(originalshowsize));
    if (message_arena != submessage_arena) {
      originalshowsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, originalshowsize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  originalshowsize_ = originalshowsize;
  // @@protoc_insertion_point(field_set_allocated:KN.PasteboardNativeStorageArchive.originalShowSize)
}

// repeated .TSP.Range titleRanges = 6;
inline int PasteboardNativeStorageArchive::_internal_titleranges_size() const {
  return titleranges_.size();
}
inline int PasteboardNativeStorageArchive::titleranges_size() const {
  return _internal_titleranges_size();
}
inline ::TSP::Range* PasteboardNativeStorageArchive::mutable_titleranges(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.titleRanges)
  return titleranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
PasteboardNativeStorageArchive::mutable_titleranges() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.titleRanges)
  return &titleranges_;
}
inline const ::TSP::Range& PasteboardNativeStorageArchive::_internal_titleranges(int index) const {
  return titleranges_.Get(index);
}
inline const ::TSP::Range& PasteboardNativeStorageArchive::titleranges(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.titleRanges)
  return _internal_titleranges(index);
}
inline ::TSP::Range* PasteboardNativeStorageArchive::_internal_add_titleranges() {
  return titleranges_.Add();
}
inline ::TSP::Range* PasteboardNativeStorageArchive::add_titleranges() {
  ::TSP::Range* _add = _internal_add_titleranges();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.titleRanges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
PasteboardNativeStorageArchive::titleranges() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.titleRanges)
  return titleranges_;
}

// repeated .TSD.GeometryArchive geometries_in_root = 7;
inline int PasteboardNativeStorageArchive::_internal_geometries_in_root_size() const {
  return geometries_in_root_.size();
}
inline int PasteboardNativeStorageArchive::geometries_in_root_size() const {
  return _internal_geometries_in_root_size();
}
inline ::TSD::GeometryArchive* PasteboardNativeStorageArchive::mutable_geometries_in_root(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.geometries_in_root)
  return geometries_in_root_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GeometryArchive >*
PasteboardNativeStorageArchive::mutable_geometries_in_root() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.geometries_in_root)
  return &geometries_in_root_;
}
inline const ::TSD::GeometryArchive& PasteboardNativeStorageArchive::_internal_geometries_in_root(int index) const {
  return geometries_in_root_.Get(index);
}
inline const ::TSD::GeometryArchive& PasteboardNativeStorageArchive::geometries_in_root(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.geometries_in_root)
  return _internal_geometries_in_root(index);
}
inline ::TSD::GeometryArchive* PasteboardNativeStorageArchive::_internal_add_geometries_in_root() {
  return geometries_in_root_.Add();
}
inline ::TSD::GeometryArchive* PasteboardNativeStorageArchive::add_geometries_in_root() {
  ::TSD::GeometryArchive* _add = _internal_add_geometries_in_root();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.geometries_in_root)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GeometryArchive >&
PasteboardNativeStorageArchive::geometries_in_root() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.geometries_in_root)
  return geometries_in_root_;
}

// optional string slide_node_unique_identifier = 8;
inline bool PasteboardNativeStorageArchive::_internal_has_slide_node_unique_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PasteboardNativeStorageArchive::has_slide_node_unique_identifier() const {
  return _internal_has_slide_node_unique_identifier();
}
inline void PasteboardNativeStorageArchive::clear_slide_node_unique_identifier() {
  slide_node_unique_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasteboardNativeStorageArchive::slide_node_unique_identifier() const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.slide_node_unique_identifier)
  return _internal_slide_node_unique_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasteboardNativeStorageArchive::set_slide_node_unique_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 slide_node_unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.PasteboardNativeStorageArchive.slide_node_unique_identifier)
}
inline std::string* PasteboardNativeStorageArchive::mutable_slide_node_unique_identifier() {
  std::string* _s = _internal_mutable_slide_node_unique_identifier();
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.slide_node_unique_identifier)
  return _s;
}
inline const std::string& PasteboardNativeStorageArchive::_internal_slide_node_unique_identifier() const {
  return slide_node_unique_identifier_.Get();
}
inline void PasteboardNativeStorageArchive::_internal_set_slide_node_unique_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  slide_node_unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PasteboardNativeStorageArchive::_internal_mutable_slide_node_unique_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return slide_node_unique_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PasteboardNativeStorageArchive::release_slide_node_unique_identifier() {
  // @@protoc_insertion_point(field_release:KN.PasteboardNativeStorageArchive.slide_node_unique_identifier)
  if (!_internal_has_slide_node_unique_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return slide_node_unique_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PasteboardNativeStorageArchive::set_allocated_slide_node_unique_identifier(std::string* slide_node_unique_identifier) {
  if (slide_node_unique_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slide_node_unique_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slide_node_unique_identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.PasteboardNativeStorageArchive.slide_node_unique_identifier)
}

// repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 14;
inline int PasteboardNativeStorageArchive::_internal_custom_effect_timing_curves_size() const {
  return custom_effect_timing_curves_.size();
}
inline int PasteboardNativeStorageArchive::custom_effect_timing_curves_size() const {
  return _internal_custom_effect_timing_curves_size();
}
inline void PasteboardNativeStorageArchive::clear_custom_effect_timing_curves() {
  custom_effect_timing_curves_.Clear();
}
inline ::KN::ThemeCustomTimingCurveArchive* PasteboardNativeStorageArchive::mutable_custom_effect_timing_curves(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.custom_effect_timing_curves)
  return custom_effect_timing_curves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive >*
PasteboardNativeStorageArchive::mutable_custom_effect_timing_curves() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.custom_effect_timing_curves)
  return &custom_effect_timing_curves_;
}
inline const ::KN::ThemeCustomTimingCurveArchive& PasteboardNativeStorageArchive::_internal_custom_effect_timing_curves(int index) const {
  return custom_effect_timing_curves_.Get(index);
}
inline const ::KN::ThemeCustomTimingCurveArchive& PasteboardNativeStorageArchive::custom_effect_timing_curves(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.custom_effect_timing_curves)
  return _internal_custom_effect_timing_curves(index);
}
inline ::KN::ThemeCustomTimingCurveArchive* PasteboardNativeStorageArchive::_internal_add_custom_effect_timing_curves() {
  return custom_effect_timing_curves_.Add();
}
inline ::KN::ThemeCustomTimingCurveArchive* PasteboardNativeStorageArchive::add_custom_effect_timing_curves() {
  ::KN::ThemeCustomTimingCurveArchive* _add = _internal_add_custom_effect_timing_curves();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.custom_effect_timing_curves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::ThemeCustomTimingCurveArchive >&
PasteboardNativeStorageArchive::custom_effect_timing_curves() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.custom_effect_timing_curves)
  return custom_effect_timing_curves_;
}

// repeated string original_slide_node_UUIDs = 15;
inline int PasteboardNativeStorageArchive::_internal_original_slide_node_uuids_size() const {
  return original_slide_node_uuids_.size();
}
inline int PasteboardNativeStorageArchive::original_slide_node_uuids_size() const {
  return _internal_original_slide_node_uuids_size();
}
inline void PasteboardNativeStorageArchive::clear_original_slide_node_uuids() {
  original_slide_node_uuids_.Clear();
}
inline std::string* PasteboardNativeStorageArchive::add_original_slide_node_uuids() {
  std::string* _s = _internal_add_original_slide_node_uuids();
  // @@protoc_insertion_point(field_add_mutable:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
  return _s;
}
inline const std::string& PasteboardNativeStorageArchive::_internal_original_slide_node_uuids(int index) const {
  return original_slide_node_uuids_.Get(index);
}
inline const std::string& PasteboardNativeStorageArchive::original_slide_node_uuids(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
  return _internal_original_slide_node_uuids(index);
}
inline std::string* PasteboardNativeStorageArchive::mutable_original_slide_node_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
  return original_slide_node_uuids_.Mutable(index);
}
inline void PasteboardNativeStorageArchive::set_original_slide_node_uuids(int index, const std::string& value) {
  original_slide_node_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
}
inline void PasteboardNativeStorageArchive::set_original_slide_node_uuids(int index, std::string&& value) {
  original_slide_node_uuids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
}
inline void PasteboardNativeStorageArchive::set_original_slide_node_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  original_slide_node_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
}
inline void PasteboardNativeStorageArchive::set_original_slide_node_uuids(int index, const char* value, size_t size) {
  original_slide_node_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
}
inline std::string* PasteboardNativeStorageArchive::_internal_add_original_slide_node_uuids() {
  return original_slide_node_uuids_.Add();
}
inline void PasteboardNativeStorageArchive::add_original_slide_node_uuids(const std::string& value) {
  original_slide_node_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
}
inline void PasteboardNativeStorageArchive::add_original_slide_node_uuids(std::string&& value) {
  original_slide_node_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
}
inline void PasteboardNativeStorageArchive::add_original_slide_node_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  original_slide_node_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
}
inline void PasteboardNativeStorageArchive::add_original_slide_node_uuids(const char* value, size_t size) {
  original_slide_node_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PasteboardNativeStorageArchive::original_slide_node_uuids() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
  return original_slide_node_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PasteboardNativeStorageArchive::mutable_original_slide_node_uuids() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs)
  return &original_slide_node_uuids_;
}

// optional bool slide_nodes_have_datas_needing_download = 16;
inline bool PasteboardNativeStorageArchive::_internal_has_slide_nodes_have_datas_needing_download() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PasteboardNativeStorageArchive::has_slide_nodes_have_datas_needing_download() const {
  return _internal_has_slide_nodes_have_datas_needing_download();
}
inline void PasteboardNativeStorageArchive::clear_slide_nodes_have_datas_needing_download() {
  slide_nodes_have_datas_needing_download_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PasteboardNativeStorageArchive::_internal_slide_nodes_have_datas_needing_download() const {
  return slide_nodes_have_datas_needing_download_;
}
inline bool PasteboardNativeStorageArchive::slide_nodes_have_datas_needing_download() const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.slide_nodes_have_datas_needing_download)
  return _internal_slide_nodes_have_datas_needing_download();
}
inline void PasteboardNativeStorageArchive::_internal_set_slide_nodes_have_datas_needing_download(bool value) {
  _has_bits_[0] |= 0x00000008u;
  slide_nodes_have_datas_needing_download_ = value;
}
inline void PasteboardNativeStorageArchive::set_slide_nodes_have_datas_needing_download(bool value) {
  _internal_set_slide_nodes_have_datas_needing_download(value);
  // @@protoc_insertion_point(field_set:KN.PasteboardNativeStorageArchive.slide_nodes_have_datas_needing_download)
}

// optional .KN.TransitionArchive transition = 17;
inline bool PasteboardNativeStorageArchive::_internal_has_transition() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || transition_ != nullptr);
  return value;
}
inline bool PasteboardNativeStorageArchive::has_transition() const {
  return _internal_has_transition();
}
inline void PasteboardNativeStorageArchive::clear_transition() {
  if (transition_ != nullptr) transition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KN::TransitionArchive& PasteboardNativeStorageArchive::_internal_transition() const {
  const ::KN::TransitionArchive* p = transition_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::TransitionArchive&>(
      ::KN::_TransitionArchive_default_instance_);
}
inline const ::KN::TransitionArchive& PasteboardNativeStorageArchive::transition() const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.transition)
  return _internal_transition();
}
inline void PasteboardNativeStorageArchive::unsafe_arena_set_allocated_transition(
    ::KN::TransitionArchive* transition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transition_);
  }
  transition_ = transition;
  if (transition) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.PasteboardNativeStorageArchive.transition)
}
inline ::KN::TransitionArchive* PasteboardNativeStorageArchive::release_transition() {
  _has_bits_[0] &= ~0x00000004u;
  ::KN::TransitionArchive* temp = transition_;
  transition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::TransitionArchive* PasteboardNativeStorageArchive::unsafe_arena_release_transition() {
  // @@protoc_insertion_point(field_release:KN.PasteboardNativeStorageArchive.transition)
  _has_bits_[0] &= ~0x00000004u;
  ::KN::TransitionArchive* temp = transition_;
  transition_ = nullptr;
  return temp;
}
inline ::KN::TransitionArchive* PasteboardNativeStorageArchive::_internal_mutable_transition() {
  _has_bits_[0] |= 0x00000004u;
  if (transition_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::TransitionArchive>(GetArenaForAllocation());
    transition_ = p;
  }
  return transition_;
}
inline ::KN::TransitionArchive* PasteboardNativeStorageArchive::mutable_transition() {
  ::KN::TransitionArchive* _msg = _internal_mutable_transition();
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.transition)
  return _msg;
}
inline void PasteboardNativeStorageArchive::set_allocated_transition(::KN::TransitionArchive* transition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transition_;
  }
  if (transition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::TransitionArchive>::GetOwningArena(transition);
    if (message_arena != submessage_arena) {
      transition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  transition_ = transition;
  // @@protoc_insertion_point(field_set_allocated:KN.PasteboardNativeStorageArchive.transition)
}

// -------------------------------------------------------------------

// PrototypeForUndoTemplateChangeArchive

// optional .TSP.Reference slide_style = 1;
inline bool PrototypeForUndoTemplateChangeArchive::_internal_has_slide_style() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slide_style_ != nullptr);
  return value;
}
inline bool PrototypeForUndoTemplateChangeArchive::has_slide_style() const {
  return _internal_has_slide_style();
}
inline const ::TSP::Reference& PrototypeForUndoTemplateChangeArchive::_internal_slide_style() const {
  const ::TSP::Reference* p = slide_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PrototypeForUndoTemplateChangeArchive::slide_style() const {
  // @@protoc_insertion_point(field_get:KN.PrototypeForUndoTemplateChangeArchive.slide_style)
  return _internal_slide_style();
}
inline void PrototypeForUndoTemplateChangeArchive::unsafe_arena_set_allocated_slide_style(
    ::TSP::Reference* slide_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_style_);
  }
  slide_style_ = slide_style;
  if (slide_style) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.PrototypeForUndoTemplateChangeArchive.slide_style)
}
inline ::TSP::Reference* PrototypeForUndoTemplateChangeArchive::release_slide_style() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slide_style_;
  slide_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PrototypeForUndoTemplateChangeArchive::unsafe_arena_release_slide_style() {
  // @@protoc_insertion_point(field_release:KN.PrototypeForUndoTemplateChangeArchive.slide_style)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slide_style_;
  slide_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PrototypeForUndoTemplateChangeArchive::_internal_mutable_slide_style() {
  _has_bits_[0] |= 0x00000001u;
  if (slide_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    slide_style_ = p;
  }
  return slide_style_;
}
inline ::TSP::Reference* PrototypeForUndoTemplateChangeArchive::mutable_slide_style() {
  ::TSP::Reference* _msg = _internal_mutable_slide_style();
  // @@protoc_insertion_point(field_mutable:KN.PrototypeForUndoTemplateChangeArchive.slide_style)
  return _msg;
}
inline void PrototypeForUndoTemplateChangeArchive::set_allocated_slide_style(::TSP::Reference* slide_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_style_);
  }
  if (slide_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_style));
    if (message_arena != submessage_arena) {
      slide_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slide_style_ = slide_style;
  // @@protoc_insertion_point(field_set_allocated:KN.PrototypeForUndoTemplateChangeArchive.slide_style)
}

// required .TSP.UUID template_slide_id = 2;
inline bool PrototypeForUndoTemplateChangeArchive::_internal_has_template_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || template_slide_id_ != nullptr);
  return value;
}
inline bool PrototypeForUndoTemplateChangeArchive::has_template_slide_id() const {
  return _internal_has_template_slide_id();
}
inline const ::TSP::UUID& PrototypeForUndoTemplateChangeArchive::_internal_template_slide_id() const {
  const ::TSP::UUID* p = template_slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& PrototypeForUndoTemplateChangeArchive::template_slide_id() const {
  // @@protoc_insertion_point(field_get:KN.PrototypeForUndoTemplateChangeArchive.template_slide_id)
  return _internal_template_slide_id();
}
inline void PrototypeForUndoTemplateChangeArchive::unsafe_arena_set_allocated_template_slide_id(
    ::TSP::UUID* template_slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_slide_id_);
  }
  template_slide_id_ = template_slide_id;
  if (template_slide_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.PrototypeForUndoTemplateChangeArchive.template_slide_id)
}
inline ::TSP::UUID* PrototypeForUndoTemplateChangeArchive::release_template_slide_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = template_slide_id_;
  template_slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* PrototypeForUndoTemplateChangeArchive::unsafe_arena_release_template_slide_id() {
  // @@protoc_insertion_point(field_release:KN.PrototypeForUndoTemplateChangeArchive.template_slide_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = template_slide_id_;
  template_slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* PrototypeForUndoTemplateChangeArchive::_internal_mutable_template_slide_id() {
  _has_bits_[0] |= 0x00000002u;
  if (template_slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    template_slide_id_ = p;
  }
  return template_slide_id_;
}
inline ::TSP::UUID* PrototypeForUndoTemplateChangeArchive::mutable_template_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_template_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.PrototypeForUndoTemplateChangeArchive.template_slide_id)
  return _msg;
}
inline void PrototypeForUndoTemplateChangeArchive::set_allocated_template_slide_id(::TSP::UUID* template_slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_slide_id_);
  }
  if (template_slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_slide_id));
    if (message_arena != submessage_arena) {
      template_slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  template_slide_id_ = template_slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.PrototypeForUndoTemplateChangeArchive.template_slide_id)
}

// repeated .TSP.UUID drawable_info_id_list = 3;
inline int PrototypeForUndoTemplateChangeArchive::_internal_drawable_info_id_list_size() const {
  return drawable_info_id_list_.size();
}
inline int PrototypeForUndoTemplateChangeArchive::drawable_info_id_list_size() const {
  return _internal_drawable_info_id_list_size();
}
inline ::TSP::UUID* PrototypeForUndoTemplateChangeArchive::mutable_drawable_info_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PrototypeForUndoTemplateChangeArchive.drawable_info_id_list)
  return drawable_info_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
PrototypeForUndoTemplateChangeArchive::mutable_drawable_info_id_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.PrototypeForUndoTemplateChangeArchive.drawable_info_id_list)
  return &drawable_info_id_list_;
}
inline const ::TSP::UUID& PrototypeForUndoTemplateChangeArchive::_internal_drawable_info_id_list(int index) const {
  return drawable_info_id_list_.Get(index);
}
inline const ::TSP::UUID& PrototypeForUndoTemplateChangeArchive::drawable_info_id_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.PrototypeForUndoTemplateChangeArchive.drawable_info_id_list)
  return _internal_drawable_info_id_list(index);
}
inline ::TSP::UUID* PrototypeForUndoTemplateChangeArchive::_internal_add_drawable_info_id_list() {
  return drawable_info_id_list_.Add();
}
inline ::TSP::UUID* PrototypeForUndoTemplateChangeArchive::add_drawable_info_id_list() {
  ::TSP::UUID* _add = _internal_add_drawable_info_id_list();
  // @@protoc_insertion_point(field_add:KN.PrototypeForUndoTemplateChangeArchive.drawable_info_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
PrototypeForUndoTemplateChangeArchive::drawable_info_id_list() const {
  // @@protoc_insertion_point(field_list:KN.PrototypeForUndoTemplateChangeArchive.drawable_info_id_list)
  return drawable_info_id_list_;
}

// repeated .TSP.Reference placeholders = 4;
inline int PrototypeForUndoTemplateChangeArchive::_internal_placeholders_size() const {
  return placeholders_.size();
}
inline int PrototypeForUndoTemplateChangeArchive::placeholders_size() const {
  return _internal_placeholders_size();
}
inline ::TSP::Reference* PrototypeForUndoTemplateChangeArchive::mutable_placeholders(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PrototypeForUndoTemplateChangeArchive.placeholders)
  return placeholders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PrototypeForUndoTemplateChangeArchive::mutable_placeholders() {
  // @@protoc_insertion_point(field_mutable_list:KN.PrototypeForUndoTemplateChangeArchive.placeholders)
  return &placeholders_;
}
inline const ::TSP::Reference& PrototypeForUndoTemplateChangeArchive::_internal_placeholders(int index) const {
  return placeholders_.Get(index);
}
inline const ::TSP::Reference& PrototypeForUndoTemplateChangeArchive::placeholders(int index) const {
  // @@protoc_insertion_point(field_get:KN.PrototypeForUndoTemplateChangeArchive.placeholders)
  return _internal_placeholders(index);
}
inline ::TSP::Reference* PrototypeForUndoTemplateChangeArchive::_internal_add_placeholders() {
  return placeholders_.Add();
}
inline ::TSP::Reference* PrototypeForUndoTemplateChangeArchive::add_placeholders() {
  ::TSP::Reference* _add = _internal_add_placeholders();
  // @@protoc_insertion_point(field_add:KN.PrototypeForUndoTemplateChangeArchive.placeholders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PrototypeForUndoTemplateChangeArchive::placeholders() const {
  // @@protoc_insertion_point(field_list:KN.PrototypeForUndoTemplateChangeArchive.placeholders)
  return placeholders_;
}

// repeated string placeholder_tags_list = 5;
inline int PrototypeForUndoTemplateChangeArchive::_internal_placeholder_tags_list_size() const {
  return placeholder_tags_list_.size();
}
inline int PrototypeForUndoTemplateChangeArchive::placeholder_tags_list_size() const {
  return _internal_placeholder_tags_list_size();
}
inline void PrototypeForUndoTemplateChangeArchive::clear_placeholder_tags_list() {
  placeholder_tags_list_.Clear();
}
inline std::string* PrototypeForUndoTemplateChangeArchive::add_placeholder_tags_list() {
  std::string* _s = _internal_add_placeholder_tags_list();
  // @@protoc_insertion_point(field_add_mutable:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
  return _s;
}
inline const std::string& PrototypeForUndoTemplateChangeArchive::_internal_placeholder_tags_list(int index) const {
  return placeholder_tags_list_.Get(index);
}
inline const std::string& PrototypeForUndoTemplateChangeArchive::placeholder_tags_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
  return _internal_placeholder_tags_list(index);
}
inline std::string* PrototypeForUndoTemplateChangeArchive::mutable_placeholder_tags_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
  return placeholder_tags_list_.Mutable(index);
}
inline void PrototypeForUndoTemplateChangeArchive::set_placeholder_tags_list(int index, const std::string& value) {
  placeholder_tags_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
}
inline void PrototypeForUndoTemplateChangeArchive::set_placeholder_tags_list(int index, std::string&& value) {
  placeholder_tags_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
}
inline void PrototypeForUndoTemplateChangeArchive::set_placeholder_tags_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  placeholder_tags_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
}
inline void PrototypeForUndoTemplateChangeArchive::set_placeholder_tags_list(int index, const char* value, size_t size) {
  placeholder_tags_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
}
inline std::string* PrototypeForUndoTemplateChangeArchive::_internal_add_placeholder_tags_list() {
  return placeholder_tags_list_.Add();
}
inline void PrototypeForUndoTemplateChangeArchive::add_placeholder_tags_list(const std::string& value) {
  placeholder_tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
}
inline void PrototypeForUndoTemplateChangeArchive::add_placeholder_tags_list(std::string&& value) {
  placeholder_tags_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
}
inline void PrototypeForUndoTemplateChangeArchive::add_placeholder_tags_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  placeholder_tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
}
inline void PrototypeForUndoTemplateChangeArchive::add_placeholder_tags_list(const char* value, size_t size) {
  placeholder_tags_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PrototypeForUndoTemplateChangeArchive::placeholder_tags_list() const {
  // @@protoc_insertion_point(field_list:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
  return placeholder_tags_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PrototypeForUndoTemplateChangeArchive::mutable_placeholder_tags_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list)
  return &placeholder_tags_list_;
}

// -------------------------------------------------------------------

// RecordingArchive

// repeated .TSP.Reference event_tracks = 1;
inline int RecordingArchive::_internal_event_tracks_size() const {
  return event_tracks_.size();
}
inline int RecordingArchive::event_tracks_size() const {
  return _internal_event_tracks_size();
}
inline ::TSP::Reference* RecordingArchive::mutable_event_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.RecordingArchive.event_tracks)
  return event_tracks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
RecordingArchive::mutable_event_tracks() {
  // @@protoc_insertion_point(field_mutable_list:KN.RecordingArchive.event_tracks)
  return &event_tracks_;
}
inline const ::TSP::Reference& RecordingArchive::_internal_event_tracks(int index) const {
  return event_tracks_.Get(index);
}
inline const ::TSP::Reference& RecordingArchive::event_tracks(int index) const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.event_tracks)
  return _internal_event_tracks(index);
}
inline ::TSP::Reference* RecordingArchive::_internal_add_event_tracks() {
  return event_tracks_.Add();
}
inline ::TSP::Reference* RecordingArchive::add_event_tracks() {
  ::TSP::Reference* _add = _internal_add_event_tracks();
  // @@protoc_insertion_point(field_add:KN.RecordingArchive.event_tracks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
RecordingArchive::event_tracks() const {
  // @@protoc_insertion_point(field_list:KN.RecordingArchive.event_tracks)
  return event_tracks_;
}

// optional .TSP.Reference movie_track = 2;
inline bool RecordingArchive::_internal_has_movie_track() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || movie_track_ != nullptr);
  return value;
}
inline bool RecordingArchive::has_movie_track() const {
  return _internal_has_movie_track();
}
inline const ::TSP::Reference& RecordingArchive::_internal_movie_track() const {
  const ::TSP::Reference* p = movie_track_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RecordingArchive::movie_track() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.movie_track)
  return _internal_movie_track();
}
inline void RecordingArchive::unsafe_arena_set_allocated_movie_track(
    ::TSP::Reference* movie_track) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_track_);
  }
  movie_track_ = movie_track;
  if (movie_track) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingArchive.movie_track)
}
inline ::TSP::Reference* RecordingArchive::release_movie_track() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = movie_track_;
  movie_track_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RecordingArchive::unsafe_arena_release_movie_track() {
  // @@protoc_insertion_point(field_release:KN.RecordingArchive.movie_track)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = movie_track_;
  movie_track_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RecordingArchive::_internal_mutable_movie_track() {
  _has_bits_[0] |= 0x00000001u;
  if (movie_track_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    movie_track_ = p;
  }
  return movie_track_;
}
inline ::TSP::Reference* RecordingArchive::mutable_movie_track() {
  ::TSP::Reference* _msg = _internal_mutable_movie_track();
  // @@protoc_insertion_point(field_mutable:KN.RecordingArchive.movie_track)
  return _msg;
}
inline void RecordingArchive::set_allocated_movie_track(::TSP::Reference* movie_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_track_);
  }
  if (movie_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_track));
    if (message_arena != submessage_arena) {
      movie_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_track, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  movie_track_ = movie_track;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingArchive.movie_track)
}

// optional double duration = 3;
inline bool RecordingArchive::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecordingArchive::has_duration() const {
  return _internal_has_duration();
}
inline void RecordingArchive::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double RecordingArchive::_internal_duration() const {
  return duration_;
}
inline double RecordingArchive::duration() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.duration)
  return _internal_duration();
}
inline void RecordingArchive::_internal_set_duration(double value) {
  _has_bits_[0] |= 0x00000010u;
  duration_ = value;
}
inline void RecordingArchive::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KN.RecordingArchive.duration)
}

// optional .KN.RecordingArchive.RecordingSyncStateEnum sync_state_enum = 4 [default = kRecordingSyncStateInSyncWithShow, deprecated = true];
inline bool RecordingArchive::_internal_has_sync_state_enum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RecordingArchive::has_sync_state_enum() const {
  return _internal_has_sync_state_enum();
}
inline void RecordingArchive::clear_sync_state_enum() {
  sync_state_enum_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::KN::RecordingArchive_RecordingSyncStateEnum RecordingArchive::_internal_sync_state_enum() const {
  return static_cast< ::KN::RecordingArchive_RecordingSyncStateEnum >(sync_state_enum_);
}
inline ::KN::RecordingArchive_RecordingSyncStateEnum RecordingArchive::sync_state_enum() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.sync_state_enum)
  return _internal_sync_state_enum();
}
inline void RecordingArchive::_internal_set_sync_state_enum(::KN::RecordingArchive_RecordingSyncStateEnum value) {
  assert(::KN::RecordingArchive_RecordingSyncStateEnum_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  sync_state_enum_ = value;
}
inline void RecordingArchive::set_sync_state_enum(::KN::RecordingArchive_RecordingSyncStateEnum value) {
  _internal_set_sync_state_enum(value);
  // @@protoc_insertion_point(field_set:KN.RecordingArchive.sync_state_enum)
}

// optional .TSP.Date modification_date = 5;
inline bool RecordingArchive::_internal_has_modification_date() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || modification_date_ != nullptr);
  return value;
}
inline bool RecordingArchive::has_modification_date() const {
  return _internal_has_modification_date();
}
inline const ::TSP::Date& RecordingArchive::_internal_modification_date() const {
  const ::TSP::Date* p = modification_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& RecordingArchive::modification_date() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.modification_date)
  return _internal_modification_date();
}
inline void RecordingArchive::unsafe_arena_set_allocated_modification_date(
    ::TSP::Date* modification_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modification_date_);
  }
  modification_date_ = modification_date;
  if (modification_date) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingArchive.modification_date)
}
inline ::TSP::Date* RecordingArchive::release_modification_date() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Date* temp = modification_date_;
  modification_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Date* RecordingArchive::unsafe_arena_release_modification_date() {
  // @@protoc_insertion_point(field_release:KN.RecordingArchive.modification_date)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Date* temp = modification_date_;
  modification_date_ = nullptr;
  return temp;
}
inline ::TSP::Date* RecordingArchive::_internal_mutable_modification_date() {
  _has_bits_[0] |= 0x00000002u;
  if (modification_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArenaForAllocation());
    modification_date_ = p;
  }
  return modification_date_;
}
inline ::TSP::Date* RecordingArchive::mutable_modification_date() {
  ::TSP::Date* _msg = _internal_mutable_modification_date();
  // @@protoc_insertion_point(field_mutable:KN.RecordingArchive.modification_date)
  return _msg;
}
inline void RecordingArchive::set_allocated_modification_date(::TSP::Date* modification_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modification_date_);
  }
  if (modification_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modification_date));
    if (message_arena != submessage_arena) {
      modification_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modification_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  modification_date_ = modification_date;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingArchive.modification_date)
}

// optional .KN.RecordingSyncState sync_state = 6;
inline bool RecordingArchive::_internal_has_sync_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sync_state_ != nullptr);
  return value;
}
inline bool RecordingArchive::has_sync_state() const {
  return _internal_has_sync_state();
}
inline void RecordingArchive::clear_sync_state() {
  if (sync_state_ != nullptr) sync_state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KN::RecordingSyncState& RecordingArchive::_internal_sync_state() const {
  const ::KN::RecordingSyncState* p = sync_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingSyncState&>(
      ::KN::_RecordingSyncState_default_instance_);
}
inline const ::KN::RecordingSyncState& RecordingArchive::sync_state() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.sync_state)
  return _internal_sync_state();
}
inline void RecordingArchive::unsafe_arena_set_allocated_sync_state(
    ::KN::RecordingSyncState* sync_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_state_);
  }
  sync_state_ = sync_state;
  if (sync_state) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingArchive.sync_state)
}
inline ::KN::RecordingSyncState* RecordingArchive::release_sync_state() {
  _has_bits_[0] &= ~0x00000004u;
  ::KN::RecordingSyncState* temp = sync_state_;
  sync_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingSyncState* RecordingArchive::unsafe_arena_release_sync_state() {
  // @@protoc_insertion_point(field_release:KN.RecordingArchive.sync_state)
  _has_bits_[0] &= ~0x00000004u;
  ::KN::RecordingSyncState* temp = sync_state_;
  sync_state_ = nullptr;
  return temp;
}
inline ::KN::RecordingSyncState* RecordingArchive::_internal_mutable_sync_state() {
  _has_bits_[0] |= 0x00000004u;
  if (sync_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingSyncState>(GetArenaForAllocation());
    sync_state_ = p;
  }
  return sync_state_;
}
inline ::KN::RecordingSyncState* RecordingArchive::mutable_sync_state() {
  ::KN::RecordingSyncState* _msg = _internal_mutable_sync_state();
  // @@protoc_insertion_point(field_mutable:KN.RecordingArchive.sync_state)
  return _msg;
}
inline void RecordingArchive::set_allocated_sync_state(::KN::RecordingSyncState* sync_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sync_state_;
  }
  if (sync_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::RecordingSyncState>::GetOwningArena(sync_state);
    if (message_arena != submessage_arena) {
      sync_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sync_state_ = sync_state;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingArchive.sync_state)
}

// optional .KN.RecordingCorrectionHistory correction_history = 7;
inline bool RecordingArchive::_internal_has_correction_history() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || correction_history_ != nullptr);
  return value;
}
inline bool RecordingArchive::has_correction_history() const {
  return _internal_has_correction_history();
}
inline void RecordingArchive::clear_correction_history() {
  if (correction_history_ != nullptr) correction_history_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::RecordingCorrectionHistory& RecordingArchive::_internal_correction_history() const {
  const ::KN::RecordingCorrectionHistory* p = correction_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingCorrectionHistory&>(
      ::KN::_RecordingCorrectionHistory_default_instance_);
}
inline const ::KN::RecordingCorrectionHistory& RecordingArchive::correction_history() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.correction_history)
  return _internal_correction_history();
}
inline void RecordingArchive::unsafe_arena_set_allocated_correction_history(
    ::KN::RecordingCorrectionHistory* correction_history) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(correction_history_);
  }
  correction_history_ = correction_history;
  if (correction_history) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingArchive.correction_history)
}
inline ::KN::RecordingCorrectionHistory* RecordingArchive::release_correction_history() {
  _has_bits_[0] &= ~0x00000008u;
  ::KN::RecordingCorrectionHistory* temp = correction_history_;
  correction_history_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingCorrectionHistory* RecordingArchive::unsafe_arena_release_correction_history() {
  // @@protoc_insertion_point(field_release:KN.RecordingArchive.correction_history)
  _has_bits_[0] &= ~0x00000008u;
  ::KN::RecordingCorrectionHistory* temp = correction_history_;
  correction_history_ = nullptr;
  return temp;
}
inline ::KN::RecordingCorrectionHistory* RecordingArchive::_internal_mutable_correction_history() {
  _has_bits_[0] |= 0x00000008u;
  if (correction_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingCorrectionHistory>(GetArenaForAllocation());
    correction_history_ = p;
  }
  return correction_history_;
}
inline ::KN::RecordingCorrectionHistory* RecordingArchive::mutable_correction_history() {
  ::KN::RecordingCorrectionHistory* _msg = _internal_mutable_correction_history();
  // @@protoc_insertion_point(field_mutable:KN.RecordingArchive.correction_history)
  return _msg;
}
inline void RecordingArchive::set_allocated_correction_history(::KN::RecordingCorrectionHistory* correction_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete correction_history_;
  }
  if (correction_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::RecordingCorrectionHistory>::GetOwningArena(correction_history);
    if (message_arena != submessage_arena) {
      correction_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, correction_history, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  correction_history_ = correction_history;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingArchive.correction_history)
}

// -------------------------------------------------------------------

// RecordingSyncState

// optional .TSP.UUID out_of_sync_token = 1;
inline bool RecordingSyncState::_internal_has_out_of_sync_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || out_of_sync_token_ != nullptr);
  return value;
}
inline bool RecordingSyncState::has_out_of_sync_token() const {
  return _internal_has_out_of_sync_token();
}
inline const ::TSP::UUID& RecordingSyncState::_internal_out_of_sync_token() const {
  const ::TSP::UUID* p = out_of_sync_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RecordingSyncState::out_of_sync_token() const {
  // @@protoc_insertion_point(field_get:KN.RecordingSyncState.out_of_sync_token)
  return _internal_out_of_sync_token();
}
inline void RecordingSyncState::unsafe_arena_set_allocated_out_of_sync_token(
    ::TSP::UUID* out_of_sync_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_of_sync_token_);
  }
  out_of_sync_token_ = out_of_sync_token;
  if (out_of_sync_token) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingSyncState.out_of_sync_token)
}
inline ::TSP::UUID* RecordingSyncState::release_out_of_sync_token() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = out_of_sync_token_;
  out_of_sync_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* RecordingSyncState::unsafe_arena_release_out_of_sync_token() {
  // @@protoc_insertion_point(field_release:KN.RecordingSyncState.out_of_sync_token)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = out_of_sync_token_;
  out_of_sync_token_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RecordingSyncState::_internal_mutable_out_of_sync_token() {
  _has_bits_[0] |= 0x00000001u;
  if (out_of_sync_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    out_of_sync_token_ = p;
  }
  return out_of_sync_token_;
}
inline ::TSP::UUID* RecordingSyncState::mutable_out_of_sync_token() {
  ::TSP::UUID* _msg = _internal_mutable_out_of_sync_token();
  // @@protoc_insertion_point(field_mutable:KN.RecordingSyncState.out_of_sync_token)
  return _msg;
}
inline void RecordingSyncState::set_allocated_out_of_sync_token(::TSP::UUID* out_of_sync_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_of_sync_token_);
  }
  if (out_of_sync_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_of_sync_token));
    if (message_arena != submessage_arena) {
      out_of_sync_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, out_of_sync_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  out_of_sync_token_ = out_of_sync_token;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingSyncState.out_of_sync_token)
}

// optional bool can_clear_out_of_sync_token = 2 [default = false];
inline bool RecordingSyncState::_internal_has_can_clear_out_of_sync_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecordingSyncState::has_can_clear_out_of_sync_token() const {
  return _internal_has_can_clear_out_of_sync_token();
}
inline void RecordingSyncState::clear_can_clear_out_of_sync_token() {
  can_clear_out_of_sync_token_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RecordingSyncState::_internal_can_clear_out_of_sync_token() const {
  return can_clear_out_of_sync_token_;
}
inline bool RecordingSyncState::can_clear_out_of_sync_token() const {
  // @@protoc_insertion_point(field_get:KN.RecordingSyncState.can_clear_out_of_sync_token)
  return _internal_can_clear_out_of_sync_token();
}
inline void RecordingSyncState::_internal_set_can_clear_out_of_sync_token(bool value) {
  _has_bits_[0] |= 0x00000002u;
  can_clear_out_of_sync_token_ = value;
}
inline void RecordingSyncState::set_can_clear_out_of_sync_token(bool value) {
  _internal_set_can_clear_out_of_sync_token(value);
  // @@protoc_insertion_point(field_set:KN.RecordingSyncState.can_clear_out_of_sync_token)
}

// -------------------------------------------------------------------

// RecordingCorrectionHistory

// optional bool did_add_missing_events_for_radar_49654305 = 1;
inline bool RecordingCorrectionHistory::_internal_has_did_add_missing_events_for_radar_49654305() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordingCorrectionHistory::has_did_add_missing_events_for_radar_49654305() const {
  return _internal_has_did_add_missing_events_for_radar_49654305();
}
inline void RecordingCorrectionHistory::clear_did_add_missing_events_for_radar_49654305() {
  did_add_missing_events_for_radar_49654305_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RecordingCorrectionHistory::_internal_did_add_missing_events_for_radar_49654305() const {
  return did_add_missing_events_for_radar_49654305_;
}
inline bool RecordingCorrectionHistory::did_add_missing_events_for_radar_49654305() const {
  // @@protoc_insertion_point(field_get:KN.RecordingCorrectionHistory.did_add_missing_events_for_radar_49654305)
  return _internal_did_add_missing_events_for_radar_49654305();
}
inline void RecordingCorrectionHistory::_internal_set_did_add_missing_events_for_radar_49654305(bool value) {
  _has_bits_[0] |= 0x00000001u;
  did_add_missing_events_for_radar_49654305_ = value;
}
inline void RecordingCorrectionHistory::set_did_add_missing_events_for_radar_49654305(bool value) {
  _internal_set_did_add_missing_events_for_radar_49654305(value);
  // @@protoc_insertion_point(field_set:KN.RecordingCorrectionHistory.did_add_missing_events_for_radar_49654305)
}

// -------------------------------------------------------------------

// RecordingEventTrackArchive

// optional string type = 1;
inline bool RecordingEventTrackArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordingEventTrackArchive::has_type() const {
  return _internal_has_type();
}
inline void RecordingEventTrackArchive::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecordingEventTrackArchive::type() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventTrackArchive.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordingEventTrackArchive::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.RecordingEventTrackArchive.type)
}
inline std::string* RecordingEventTrackArchive::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventTrackArchive.type)
  return _s;
}
inline const std::string& RecordingEventTrackArchive::_internal_type() const {
  return type_.Get();
}
inline void RecordingEventTrackArchive::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RecordingEventTrackArchive::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RecordingEventTrackArchive::release_type() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventTrackArchive.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RecordingEventTrackArchive::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventTrackArchive.type)
}

// repeated .KN.RecordingEventArchive events = 2;
inline int RecordingEventTrackArchive::_internal_events_size() const {
  return events_.size();
}
inline int RecordingEventTrackArchive::events_size() const {
  return _internal_events_size();
}
inline void RecordingEventTrackArchive::clear_events() {
  events_.Clear();
}
inline ::KN::RecordingEventArchive* RecordingEventTrackArchive::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventTrackArchive.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive >*
RecordingEventTrackArchive::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:KN.RecordingEventTrackArchive.events)
  return &events_;
}
inline const ::KN::RecordingEventArchive& RecordingEventTrackArchive::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::KN::RecordingEventArchive& RecordingEventTrackArchive::events(int index) const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventTrackArchive.events)
  return _internal_events(index);
}
inline ::KN::RecordingEventArchive* RecordingEventTrackArchive::_internal_add_events() {
  return events_.Add();
}
inline ::KN::RecordingEventArchive* RecordingEventTrackArchive::add_events() {
  ::KN::RecordingEventArchive* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:KN.RecordingEventTrackArchive.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive >&
RecordingEventTrackArchive::events() const {
  // @@protoc_insertion_point(field_list:KN.RecordingEventTrackArchive.events)
  return events_;
}

// -------------------------------------------------------------------

// RecordingEventArchive

// optional double start_time = 1 [default = -1];
inline bool RecordingEventArchive::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecordingEventArchive::has_start_time() const {
  return _internal_has_start_time();
}
inline void RecordingEventArchive::clear_start_time() {
  start_time_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline double RecordingEventArchive::_internal_start_time() const {
  return start_time_;
}
inline double RecordingEventArchive::start_time() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.start_time)
  return _internal_start_time();
}
inline void RecordingEventArchive::_internal_set_start_time(double value) {
  _has_bits_[0] |= 0x00000010u;
  start_time_ = value;
}
inline void RecordingEventArchive::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:KN.RecordingEventArchive.start_time)
}

// optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
inline bool RecordingEventArchive::_internal_has_navigation_event_archive() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || navigation_event_archive_ != nullptr);
  return value;
}
inline bool RecordingEventArchive::has_navigation_event_archive() const {
  return _internal_has_navigation_event_archive();
}
inline void RecordingEventArchive::clear_navigation_event_archive() {
  if (navigation_event_archive_ != nullptr) navigation_event_archive_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KN::RecordingNavigationEventArchive& RecordingEventArchive::_internal_navigation_event_archive() const {
  const ::KN::RecordingNavigationEventArchive* p = navigation_event_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingNavigationEventArchive&>(
      ::KN::_RecordingNavigationEventArchive_default_instance_);
}
inline const ::KN::RecordingNavigationEventArchive& RecordingEventArchive::navigation_event_archive() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.navigation_event_archive)
  return _internal_navigation_event_archive();
}
inline void RecordingEventArchive::unsafe_arena_set_allocated_navigation_event_archive(
    ::KN::RecordingNavigationEventArchive* navigation_event_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_event_archive_);
  }
  navigation_event_archive_ = navigation_event_archive;
  if (navigation_event_archive) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingEventArchive.navigation_event_archive)
}
inline ::KN::RecordingNavigationEventArchive* RecordingEventArchive::release_navigation_event_archive() {
  _has_bits_[0] &= ~0x00000001u;
  ::KN::RecordingNavigationEventArchive* temp = navigation_event_archive_;
  navigation_event_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingNavigationEventArchive* RecordingEventArchive::unsafe_arena_release_navigation_event_archive() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventArchive.navigation_event_archive)
  _has_bits_[0] &= ~0x00000001u;
  ::KN::RecordingNavigationEventArchive* temp = navigation_event_archive_;
  navigation_event_archive_ = nullptr;
  return temp;
}
inline ::KN::RecordingNavigationEventArchive* RecordingEventArchive::_internal_mutable_navigation_event_archive() {
  _has_bits_[0] |= 0x00000001u;
  if (navigation_event_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingNavigationEventArchive>(GetArenaForAllocation());
    navigation_event_archive_ = p;
  }
  return navigation_event_archive_;
}
inline ::KN::RecordingNavigationEventArchive* RecordingEventArchive::mutable_navigation_event_archive() {
  ::KN::RecordingNavigationEventArchive* _msg = _internal_mutable_navigation_event_archive();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventArchive.navigation_event_archive)
  return _msg;
}
inline void RecordingEventArchive::set_allocated_navigation_event_archive(::KN::RecordingNavigationEventArchive* navigation_event_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete navigation_event_archive_;
  }
  if (navigation_event_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::RecordingNavigationEventArchive>::GetOwningArena(navigation_event_archive);
    if (message_arena != submessage_arena) {
      navigation_event_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_event_archive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  navigation_event_archive_ = navigation_event_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventArchive.navigation_event_archive)
}

// optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
inline bool RecordingEventArchive::_internal_has_laser_event_archive() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || laser_event_archive_ != nullptr);
  return value;
}
inline bool RecordingEventArchive::has_laser_event_archive() const {
  return _internal_has_laser_event_archive();
}
inline void RecordingEventArchive::clear_laser_event_archive() {
  if (laser_event_archive_ != nullptr) laser_event_archive_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KN::RecordingLaserEventArchive& RecordingEventArchive::_internal_laser_event_archive() const {
  const ::KN::RecordingLaserEventArchive* p = laser_event_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingLaserEventArchive&>(
      ::KN::_RecordingLaserEventArchive_default_instance_);
}
inline const ::KN::RecordingLaserEventArchive& RecordingEventArchive::laser_event_archive() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.laser_event_archive)
  return _internal_laser_event_archive();
}
inline void RecordingEventArchive::unsafe_arena_set_allocated_laser_event_archive(
    ::KN::RecordingLaserEventArchive* laser_event_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(laser_event_archive_);
  }
  laser_event_archive_ = laser_event_archive;
  if (laser_event_archive) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingEventArchive.laser_event_archive)
}
inline ::KN::RecordingLaserEventArchive* RecordingEventArchive::release_laser_event_archive() {
  _has_bits_[0] &= ~0x00000002u;
  ::KN::RecordingLaserEventArchive* temp = laser_event_archive_;
  laser_event_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingLaserEventArchive* RecordingEventArchive::unsafe_arena_release_laser_event_archive() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventArchive.laser_event_archive)
  _has_bits_[0] &= ~0x00000002u;
  ::KN::RecordingLaserEventArchive* temp = laser_event_archive_;
  laser_event_archive_ = nullptr;
  return temp;
}
inline ::KN::RecordingLaserEventArchive* RecordingEventArchive::_internal_mutable_laser_event_archive() {
  _has_bits_[0] |= 0x00000002u;
  if (laser_event_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingLaserEventArchive>(GetArenaForAllocation());
    laser_event_archive_ = p;
  }
  return laser_event_archive_;
}
inline ::KN::RecordingLaserEventArchive* RecordingEventArchive::mutable_laser_event_archive() {
  ::KN::RecordingLaserEventArchive* _msg = _internal_mutable_laser_event_archive();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventArchive.laser_event_archive)
  return _msg;
}
inline void RecordingEventArchive::set_allocated_laser_event_archive(::KN::RecordingLaserEventArchive* laser_event_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete laser_event_archive_;
  }
  if (laser_event_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::RecordingLaserEventArchive>::GetOwningArena(laser_event_archive);
    if (message_arena != submessage_arena) {
      laser_event_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, laser_event_archive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  laser_event_archive_ = laser_event_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventArchive.laser_event_archive)
}

// optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
inline bool RecordingEventArchive::_internal_has_pause_event_archive() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || pause_event_archive_ != nullptr);
  return value;
}
inline bool RecordingEventArchive::has_pause_event_archive() const {
  return _internal_has_pause_event_archive();
}
inline void RecordingEventArchive::clear_pause_event_archive() {
  if (pause_event_archive_ != nullptr) pause_event_archive_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KN::RecordingPauseEventArchive& RecordingEventArchive::_internal_pause_event_archive() const {
  const ::KN::RecordingPauseEventArchive* p = pause_event_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingPauseEventArchive&>(
      ::KN::_RecordingPauseEventArchive_default_instance_);
}
inline const ::KN::RecordingPauseEventArchive& RecordingEventArchive::pause_event_archive() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.pause_event_archive)
  return _internal_pause_event_archive();
}
inline void RecordingEventArchive::unsafe_arena_set_allocated_pause_event_archive(
    ::KN::RecordingPauseEventArchive* pause_event_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pause_event_archive_);
  }
  pause_event_archive_ = pause_event_archive;
  if (pause_event_archive) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingEventArchive.pause_event_archive)
}
inline ::KN::RecordingPauseEventArchive* RecordingEventArchive::release_pause_event_archive() {
  _has_bits_[0] &= ~0x00000004u;
  ::KN::RecordingPauseEventArchive* temp = pause_event_archive_;
  pause_event_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingPauseEventArchive* RecordingEventArchive::unsafe_arena_release_pause_event_archive() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventArchive.pause_event_archive)
  _has_bits_[0] &= ~0x00000004u;
  ::KN::RecordingPauseEventArchive* temp = pause_event_archive_;
  pause_event_archive_ = nullptr;
  return temp;
}
inline ::KN::RecordingPauseEventArchive* RecordingEventArchive::_internal_mutable_pause_event_archive() {
  _has_bits_[0] |= 0x00000004u;
  if (pause_event_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingPauseEventArchive>(GetArenaForAllocation());
    pause_event_archive_ = p;
  }
  return pause_event_archive_;
}
inline ::KN::RecordingPauseEventArchive* RecordingEventArchive::mutable_pause_event_archive() {
  ::KN::RecordingPauseEventArchive* _msg = _internal_mutable_pause_event_archive();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventArchive.pause_event_archive)
  return _msg;
}
inline void RecordingEventArchive::set_allocated_pause_event_archive(::KN::RecordingPauseEventArchive* pause_event_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pause_event_archive_;
  }
  if (pause_event_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::RecordingPauseEventArchive>::GetOwningArena(pause_event_archive);
    if (message_arena != submessage_arena) {
      pause_event_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pause_event_archive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pause_event_archive_ = pause_event_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventArchive.pause_event_archive)
}

// optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
inline bool RecordingEventArchive::_internal_has_movie_event_archive() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || movie_event_archive_ != nullptr);
  return value;
}
inline bool RecordingEventArchive::has_movie_event_archive() const {
  return _internal_has_movie_event_archive();
}
inline void RecordingEventArchive::clear_movie_event_archive() {
  if (movie_event_archive_ != nullptr) movie_event_archive_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::RecordingMovieEventArchive& RecordingEventArchive::_internal_movie_event_archive() const {
  const ::KN::RecordingMovieEventArchive* p = movie_event_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingMovieEventArchive&>(
      ::KN::_RecordingMovieEventArchive_default_instance_);
}
inline const ::KN::RecordingMovieEventArchive& RecordingEventArchive::movie_event_archive() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.movie_event_archive)
  return _internal_movie_event_archive();
}
inline void RecordingEventArchive::unsafe_arena_set_allocated_movie_event_archive(
    ::KN::RecordingMovieEventArchive* movie_event_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_event_archive_);
  }
  movie_event_archive_ = movie_event_archive;
  if (movie_event_archive) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingEventArchive.movie_event_archive)
}
inline ::KN::RecordingMovieEventArchive* RecordingEventArchive::release_movie_event_archive() {
  _has_bits_[0] &= ~0x00000008u;
  ::KN::RecordingMovieEventArchive* temp = movie_event_archive_;
  movie_event_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingMovieEventArchive* RecordingEventArchive::unsafe_arena_release_movie_event_archive() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventArchive.movie_event_archive)
  _has_bits_[0] &= ~0x00000008u;
  ::KN::RecordingMovieEventArchive* temp = movie_event_archive_;
  movie_event_archive_ = nullptr;
  return temp;
}
inline ::KN::RecordingMovieEventArchive* RecordingEventArchive::_internal_mutable_movie_event_archive() {
  _has_bits_[0] |= 0x00000008u;
  if (movie_event_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingMovieEventArchive>(GetArenaForAllocation());
    movie_event_archive_ = p;
  }
  return movie_event_archive_;
}
inline ::KN::RecordingMovieEventArchive* RecordingEventArchive::mutable_movie_event_archive() {
  ::KN::RecordingMovieEventArchive* _msg = _internal_mutable_movie_event_archive();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventArchive.movie_event_archive)
  return _msg;
}
inline void RecordingEventArchive::set_allocated_movie_event_archive(::KN::RecordingMovieEventArchive* movie_event_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete movie_event_archive_;
  }
  if (movie_event_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::RecordingMovieEventArchive>::GetOwningArena(movie_event_archive);
    if (message_arena != submessage_arena) {
      movie_event_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_event_archive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  movie_event_archive_ = movie_event_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventArchive.movie_event_archive)
}

// -------------------------------------------------------------------

// RecordingNavigationEventArchive

// optional .TSP.UUID target_slide_node_id = 4;
inline bool RecordingNavigationEventArchive::_internal_has_target_slide_node_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_slide_node_id_ != nullptr);
  return value;
}
inline bool RecordingNavigationEventArchive::has_target_slide_node_id() const {
  return _internal_has_target_slide_node_id();
}
inline const ::TSP::UUID& RecordingNavigationEventArchive::_internal_target_slide_node_id() const {
  const ::TSP::UUID* p = target_slide_node_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RecordingNavigationEventArchive::target_slide_node_id() const {
  // @@protoc_insertion_point(field_get:KN.RecordingNavigationEventArchive.target_slide_node_id)
  return _internal_target_slide_node_id();
}
inline void RecordingNavigationEventArchive::unsafe_arena_set_allocated_target_slide_node_id(
    ::TSP::UUID* target_slide_node_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_slide_node_id_);
  }
  target_slide_node_id_ = target_slide_node_id;
  if (target_slide_node_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingNavigationEventArchive.target_slide_node_id)
}
inline ::TSP::UUID* RecordingNavigationEventArchive::release_target_slide_node_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = target_slide_node_id_;
  target_slide_node_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* RecordingNavigationEventArchive::unsafe_arena_release_target_slide_node_id() {
  // @@protoc_insertion_point(field_release:KN.RecordingNavigationEventArchive.target_slide_node_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = target_slide_node_id_;
  target_slide_node_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RecordingNavigationEventArchive::_internal_mutable_target_slide_node_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_slide_node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    target_slide_node_id_ = p;
  }
  return target_slide_node_id_;
}
inline ::TSP::UUID* RecordingNavigationEventArchive::mutable_target_slide_node_id() {
  ::TSP::UUID* _msg = _internal_mutable_target_slide_node_id();
  // @@protoc_insertion_point(field_mutable:KN.RecordingNavigationEventArchive.target_slide_node_id)
  return _msg;
}
inline void RecordingNavigationEventArchive::set_allocated_target_slide_node_id(::TSP::UUID* target_slide_node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_slide_node_id_);
  }
  if (target_slide_node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_slide_node_id));
    if (message_arena != submessage_arena) {
      target_slide_node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_slide_node_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_slide_node_id_ = target_slide_node_id;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingNavigationEventArchive.target_slide_node_id)
}

// optional .TSP.Reference target_slide_node_reference = 1;
inline bool RecordingNavigationEventArchive::_internal_has_target_slide_node_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_slide_node_reference_ != nullptr);
  return value;
}
inline bool RecordingNavigationEventArchive::has_target_slide_node_reference() const {
  return _internal_has_target_slide_node_reference();
}
inline const ::TSP::Reference& RecordingNavigationEventArchive::_internal_target_slide_node_reference() const {
  const ::TSP::Reference* p = target_slide_node_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RecordingNavigationEventArchive::target_slide_node_reference() const {
  // @@protoc_insertion_point(field_get:KN.RecordingNavigationEventArchive.target_slide_node_reference)
  return _internal_target_slide_node_reference();
}
inline void RecordingNavigationEventArchive::unsafe_arena_set_allocated_target_slide_node_reference(
    ::TSP::Reference* target_slide_node_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_slide_node_reference_);
  }
  target_slide_node_reference_ = target_slide_node_reference;
  if (target_slide_node_reference) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingNavigationEventArchive.target_slide_node_reference)
}
inline ::TSP::Reference* RecordingNavigationEventArchive::release_target_slide_node_reference() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = target_slide_node_reference_;
  target_slide_node_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RecordingNavigationEventArchive::unsafe_arena_release_target_slide_node_reference() {
  // @@protoc_insertion_point(field_release:KN.RecordingNavigationEventArchive.target_slide_node_reference)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = target_slide_node_reference_;
  target_slide_node_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RecordingNavigationEventArchive::_internal_mutable_target_slide_node_reference() {
  _has_bits_[0] |= 0x00000001u;
  if (target_slide_node_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    target_slide_node_reference_ = p;
  }
  return target_slide_node_reference_;
}
inline ::TSP::Reference* RecordingNavigationEventArchive::mutable_target_slide_node_reference() {
  ::TSP::Reference* _msg = _internal_mutable_target_slide_node_reference();
  // @@protoc_insertion_point(field_mutable:KN.RecordingNavigationEventArchive.target_slide_node_reference)
  return _msg;
}
inline void RecordingNavigationEventArchive::set_allocated_target_slide_node_reference(::TSP::Reference* target_slide_node_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_slide_node_reference_);
  }
  if (target_slide_node_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_slide_node_reference));
    if (message_arena != submessage_arena) {
      target_slide_node_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_slide_node_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_slide_node_reference_ = target_slide_node_reference;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingNavigationEventArchive.target_slide_node_reference)
}

// optional uint32 target_event_index = 2;
inline bool RecordingNavigationEventArchive::_internal_has_target_event_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecordingNavigationEventArchive::has_target_event_index() const {
  return _internal_has_target_event_index();
}
inline void RecordingNavigationEventArchive::clear_target_event_index() {
  target_event_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordingNavigationEventArchive::_internal_target_event_index() const {
  return target_event_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordingNavigationEventArchive::target_event_index() const {
  // @@protoc_insertion_point(field_get:KN.RecordingNavigationEventArchive.target_event_index)
  return _internal_target_event_index();
}
inline void RecordingNavigationEventArchive::_internal_set_target_event_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  target_event_index_ = value;
}
inline void RecordingNavigationEventArchive::set_target_event_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_event_index(value);
  // @@protoc_insertion_point(field_set:KN.RecordingNavigationEventArchive.target_event_index)
}

// optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
inline bool RecordingNavigationEventArchive::_internal_has_animation_phase() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecordingNavigationEventArchive::has_animation_phase() const {
  return _internal_has_animation_phase();
}
inline void RecordingNavigationEventArchive::clear_animation_phase() {
  animation_phase_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::_internal_animation_phase() const {
  return static_cast< ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase >(animation_phase_);
}
inline ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::animation_phase() const {
  // @@protoc_insertion_point(field_get:KN.RecordingNavigationEventArchive.animation_phase)
  return _internal_animation_phase();
}
inline void RecordingNavigationEventArchive::_internal_set_animation_phase(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase value) {
  assert(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  animation_phase_ = value;
}
inline void RecordingNavigationEventArchive::set_animation_phase(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase value) {
  _internal_set_animation_phase(value);
  // @@protoc_insertion_point(field_set:KN.RecordingNavigationEventArchive.animation_phase)
}

// -------------------------------------------------------------------

// RecordingLaserEventArchive

// optional .TSP.Point unscaled_location = 1 [deprecated = true];
inline bool RecordingLaserEventArchive::_internal_has_unscaled_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || unscaled_location_ != nullptr);
  return value;
}
inline bool RecordingLaserEventArchive::has_unscaled_location() const {
  return _internal_has_unscaled_location();
}
inline const ::TSP::Point& RecordingLaserEventArchive::_internal_unscaled_location() const {
  const ::TSP::Point* p = unscaled_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& RecordingLaserEventArchive::unscaled_location() const {
  // @@protoc_insertion_point(field_get:KN.RecordingLaserEventArchive.unscaled_location)
  return _internal_unscaled_location();
}
inline void RecordingLaserEventArchive::unsafe_arena_set_allocated_unscaled_location(
    ::TSP::Point* unscaled_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unscaled_location_);
  }
  unscaled_location_ = unscaled_location;
  if (unscaled_location) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingLaserEventArchive.unscaled_location)
}
inline ::TSP::Point* RecordingLaserEventArchive::release_unscaled_location() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = unscaled_location_;
  unscaled_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* RecordingLaserEventArchive::unsafe_arena_release_unscaled_location() {
  // @@protoc_insertion_point(field_release:KN.RecordingLaserEventArchive.unscaled_location)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = unscaled_location_;
  unscaled_location_ = nullptr;
  return temp;
}
inline ::TSP::Point* RecordingLaserEventArchive::_internal_mutable_unscaled_location() {
  _has_bits_[0] |= 0x00000001u;
  if (unscaled_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    unscaled_location_ = p;
  }
  return unscaled_location_;
}
inline ::TSP::Point* RecordingLaserEventArchive::mutable_unscaled_location() {
  ::TSP::Point* _msg = _internal_mutable_unscaled_location();
  // @@protoc_insertion_point(field_mutable:KN.RecordingLaserEventArchive.unscaled_location)
  return _msg;
}
inline void RecordingLaserEventArchive::set_allocated_unscaled_location(::TSP::Point* unscaled_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unscaled_location_);
  }
  if (unscaled_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unscaled_location));
    if (message_arena != submessage_arena) {
      unscaled_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unscaled_location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unscaled_location_ = unscaled_location;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingLaserEventArchive.unscaled_location)
}

// optional .TSP.Point unit_location = 2;
inline bool RecordingLaserEventArchive::_internal_has_unit_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || unit_location_ != nullptr);
  return value;
}
inline bool RecordingLaserEventArchive::has_unit_location() const {
  return _internal_has_unit_location();
}
inline const ::TSP::Point& RecordingLaserEventArchive::_internal_unit_location() const {
  const ::TSP::Point* p = unit_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& RecordingLaserEventArchive::unit_location() const {
  // @@protoc_insertion_point(field_get:KN.RecordingLaserEventArchive.unit_location)
  return _internal_unit_location();
}
inline void RecordingLaserEventArchive::unsafe_arena_set_allocated_unit_location(
    ::TSP::Point* unit_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_location_);
  }
  unit_location_ = unit_location;
  if (unit_location) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingLaserEventArchive.unit_location)
}
inline ::TSP::Point* RecordingLaserEventArchive::release_unit_location() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = unit_location_;
  unit_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* RecordingLaserEventArchive::unsafe_arena_release_unit_location() {
  // @@protoc_insertion_point(field_release:KN.RecordingLaserEventArchive.unit_location)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = unit_location_;
  unit_location_ = nullptr;
  return temp;
}
inline ::TSP::Point* RecordingLaserEventArchive::_internal_mutable_unit_location() {
  _has_bits_[0] |= 0x00000002u;
  if (unit_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    unit_location_ = p;
  }
  return unit_location_;
}
inline ::TSP::Point* RecordingLaserEventArchive::mutable_unit_location() {
  ::TSP::Point* _msg = _internal_mutable_unit_location();
  // @@protoc_insertion_point(field_mutable:KN.RecordingLaserEventArchive.unit_location)
  return _msg;
}
inline void RecordingLaserEventArchive::set_allocated_unit_location(::TSP::Point* unit_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_location_);
  }
  if (unit_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_location));
    if (message_arena != submessage_arena) {
      unit_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit_location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unit_location_ = unit_location;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingLaserEventArchive.unit_location)
}

// -------------------------------------------------------------------

// RecordingPauseEventArchive

// optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
inline bool RecordingPauseEventArchive::_internal_has_pause_event_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordingPauseEventArchive::has_pause_event_type() const {
  return _internal_has_pause_event_type();
}
inline void RecordingPauseEventArchive::clear_pause_event_type() {
  pause_event_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::KN::RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::_internal_pause_event_type() const {
  return static_cast< ::KN::RecordingPauseEventArchive_RecordingPauseEventType >(pause_event_type_);
}
inline ::KN::RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::pause_event_type() const {
  // @@protoc_insertion_point(field_get:KN.RecordingPauseEventArchive.pause_event_type)
  return _internal_pause_event_type();
}
inline void RecordingPauseEventArchive::_internal_set_pause_event_type(::KN::RecordingPauseEventArchive_RecordingPauseEventType value) {
  assert(::KN::RecordingPauseEventArchive_RecordingPauseEventType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  pause_event_type_ = value;
}
inline void RecordingPauseEventArchive::set_pause_event_type(::KN::RecordingPauseEventArchive_RecordingPauseEventType value) {
  _internal_set_pause_event_type(value);
  // @@protoc_insertion_point(field_set:KN.RecordingPauseEventArchive.pause_event_type)
}

// -------------------------------------------------------------------

// RecordingMovieEventArchive

// optional .TSP.Reference movie_info_reference = 1;
inline bool RecordingMovieEventArchive::_internal_has_movie_info_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || movie_info_reference_ != nullptr);
  return value;
}
inline bool RecordingMovieEventArchive::has_movie_info_reference() const {
  return _internal_has_movie_info_reference();
}
inline const ::TSP::Reference& RecordingMovieEventArchive::_internal_movie_info_reference() const {
  const ::TSP::Reference* p = movie_info_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RecordingMovieEventArchive::movie_info_reference() const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieEventArchive.movie_info_reference)
  return _internal_movie_info_reference();
}
inline void RecordingMovieEventArchive::unsafe_arena_set_allocated_movie_info_reference(
    ::TSP::Reference* movie_info_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_info_reference_);
  }
  movie_info_reference_ = movie_info_reference;
  if (movie_info_reference) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingMovieEventArchive.movie_info_reference)
}
inline ::TSP::Reference* RecordingMovieEventArchive::release_movie_info_reference() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = movie_info_reference_;
  movie_info_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RecordingMovieEventArchive::unsafe_arena_release_movie_info_reference() {
  // @@protoc_insertion_point(field_release:KN.RecordingMovieEventArchive.movie_info_reference)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = movie_info_reference_;
  movie_info_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RecordingMovieEventArchive::_internal_mutable_movie_info_reference() {
  _has_bits_[0] |= 0x00000001u;
  if (movie_info_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    movie_info_reference_ = p;
  }
  return movie_info_reference_;
}
inline ::TSP::Reference* RecordingMovieEventArchive::mutable_movie_info_reference() {
  ::TSP::Reference* _msg = _internal_mutable_movie_info_reference();
  // @@protoc_insertion_point(field_mutable:KN.RecordingMovieEventArchive.movie_info_reference)
  return _msg;
}
inline void RecordingMovieEventArchive::set_allocated_movie_info_reference(::TSP::Reference* movie_info_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_info_reference_);
  }
  if (movie_info_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_info_reference));
    if (message_arena != submessage_arena) {
      movie_info_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_info_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  movie_info_reference_ = movie_info_reference;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingMovieEventArchive.movie_info_reference)
}

// optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
inline bool RecordingMovieEventArchive::_internal_has_movie_event_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecordingMovieEventArchive::has_movie_event_type() const {
  return _internal_has_movie_event_type();
}
inline void RecordingMovieEventArchive::clear_movie_event_type() {
  movie_event_type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::KN::RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::_internal_movie_event_type() const {
  return static_cast< ::KN::RecordingMovieEventArchive_RecordingMovieEventType >(movie_event_type_);
}
inline ::KN::RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::movie_event_type() const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieEventArchive.movie_event_type)
  return _internal_movie_event_type();
}
inline void RecordingMovieEventArchive::_internal_set_movie_event_type(::KN::RecordingMovieEventArchive_RecordingMovieEventType value) {
  assert(::KN::RecordingMovieEventArchive_RecordingMovieEventType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  movie_event_type_ = value;
}
inline void RecordingMovieEventArchive::set_movie_event_type(::KN::RecordingMovieEventArchive_RecordingMovieEventType value) {
  _internal_set_movie_event_type(value);
  // @@protoc_insertion_point(field_set:KN.RecordingMovieEventArchive.movie_event_type)
}

// optional double movie_event_value = 3;
inline bool RecordingMovieEventArchive::_internal_has_movie_event_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecordingMovieEventArchive::has_movie_event_value() const {
  return _internal_has_movie_event_value();
}
inline void RecordingMovieEventArchive::clear_movie_event_value() {
  movie_event_value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RecordingMovieEventArchive::_internal_movie_event_value() const {
  return movie_event_value_;
}
inline double RecordingMovieEventArchive::movie_event_value() const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieEventArchive.movie_event_value)
  return _internal_movie_event_value();
}
inline void RecordingMovieEventArchive::_internal_set_movie_event_value(double value) {
  _has_bits_[0] |= 0x00000008u;
  movie_event_value_ = value;
}
inline void RecordingMovieEventArchive::set_movie_event_value(double value) {
  _internal_set_movie_event_value(value);
  // @@protoc_insertion_point(field_set:KN.RecordingMovieEventArchive.movie_event_value)
}

// optional .TSP.Reference movie_info_that_played_across_slides_reference = 4;
inline bool RecordingMovieEventArchive::_internal_has_movie_info_that_played_across_slides_reference() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || movie_info_that_played_across_slides_reference_ != nullptr);
  return value;
}
inline bool RecordingMovieEventArchive::has_movie_info_that_played_across_slides_reference() const {
  return _internal_has_movie_info_that_played_across_slides_reference();
}
inline const ::TSP::Reference& RecordingMovieEventArchive::_internal_movie_info_that_played_across_slides_reference() const {
  const ::TSP::Reference* p = movie_info_that_played_across_slides_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RecordingMovieEventArchive::movie_info_that_played_across_slides_reference() const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieEventArchive.movie_info_that_played_across_slides_reference)
  return _internal_movie_info_that_played_across_slides_reference();
}
inline void RecordingMovieEventArchive::unsafe_arena_set_allocated_movie_info_that_played_across_slides_reference(
    ::TSP::Reference* movie_info_that_played_across_slides_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_info_that_played_across_slides_reference_);
  }
  movie_info_that_played_across_slides_reference_ = movie_info_that_played_across_slides_reference;
  if (movie_info_that_played_across_slides_reference) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingMovieEventArchive.movie_info_that_played_across_slides_reference)
}
inline ::TSP::Reference* RecordingMovieEventArchive::release_movie_info_that_played_across_slides_reference() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = movie_info_that_played_across_slides_reference_;
  movie_info_that_played_across_slides_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RecordingMovieEventArchive::unsafe_arena_release_movie_info_that_played_across_slides_reference() {
  // @@protoc_insertion_point(field_release:KN.RecordingMovieEventArchive.movie_info_that_played_across_slides_reference)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = movie_info_that_played_across_slides_reference_;
  movie_info_that_played_across_slides_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RecordingMovieEventArchive::_internal_mutable_movie_info_that_played_across_slides_reference() {
  _has_bits_[0] |= 0x00000002u;
  if (movie_info_that_played_across_slides_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    movie_info_that_played_across_slides_reference_ = p;
  }
  return movie_info_that_played_across_slides_reference_;
}
inline ::TSP::Reference* RecordingMovieEventArchive::mutable_movie_info_that_played_across_slides_reference() {
  ::TSP::Reference* _msg = _internal_mutable_movie_info_that_played_across_slides_reference();
  // @@protoc_insertion_point(field_mutable:KN.RecordingMovieEventArchive.movie_info_that_played_across_slides_reference)
  return _msg;
}
inline void RecordingMovieEventArchive::set_allocated_movie_info_that_played_across_slides_reference(::TSP::Reference* movie_info_that_played_across_slides_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_info_that_played_across_slides_reference_);
  }
  if (movie_info_that_played_across_slides_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_info_that_played_across_slides_reference));
    if (message_arena != submessage_arena) {
      movie_info_that_played_across_slides_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_info_that_played_across_slides_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  movie_info_that_played_across_slides_reference_ = movie_info_that_played_across_slides_reference;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingMovieEventArchive.movie_info_that_played_across_slides_reference)
}

// optional .TSP.UUID movie_slide_node_id = 5;
inline bool RecordingMovieEventArchive::_internal_has_movie_slide_node_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || movie_slide_node_id_ != nullptr);
  return value;
}
inline bool RecordingMovieEventArchive::has_movie_slide_node_id() const {
  return _internal_has_movie_slide_node_id();
}
inline const ::TSP::UUID& RecordingMovieEventArchive::_internal_movie_slide_node_id() const {
  const ::TSP::UUID* p = movie_slide_node_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RecordingMovieEventArchive::movie_slide_node_id() const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieEventArchive.movie_slide_node_id)
  return _internal_movie_slide_node_id();
}
inline void RecordingMovieEventArchive::unsafe_arena_set_allocated_movie_slide_node_id(
    ::TSP::UUID* movie_slide_node_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_slide_node_id_);
  }
  movie_slide_node_id_ = movie_slide_node_id;
  if (movie_slide_node_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingMovieEventArchive.movie_slide_node_id)
}
inline ::TSP::UUID* RecordingMovieEventArchive::release_movie_slide_node_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = movie_slide_node_id_;
  movie_slide_node_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* RecordingMovieEventArchive::unsafe_arena_release_movie_slide_node_id() {
  // @@protoc_insertion_point(field_release:KN.RecordingMovieEventArchive.movie_slide_node_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = movie_slide_node_id_;
  movie_slide_node_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RecordingMovieEventArchive::_internal_mutable_movie_slide_node_id() {
  _has_bits_[0] |= 0x00000004u;
  if (movie_slide_node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    movie_slide_node_id_ = p;
  }
  return movie_slide_node_id_;
}
inline ::TSP::UUID* RecordingMovieEventArchive::mutable_movie_slide_node_id() {
  ::TSP::UUID* _msg = _internal_mutable_movie_slide_node_id();
  // @@protoc_insertion_point(field_mutable:KN.RecordingMovieEventArchive.movie_slide_node_id)
  return _msg;
}
inline void RecordingMovieEventArchive::set_allocated_movie_slide_node_id(::TSP::UUID* movie_slide_node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_slide_node_id_);
  }
  if (movie_slide_node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_slide_node_id));
    if (message_arena != submessage_arena) {
      movie_slide_node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_slide_node_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  movie_slide_node_id_ = movie_slide_node_id;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingMovieEventArchive.movie_slide_node_id)
}

// -------------------------------------------------------------------

// RecordingMovieTrackArchive

// repeated .KN.MovieSegmentArchive movie_segments = 1;
inline int RecordingMovieTrackArchive::_internal_movie_segments_size() const {
  return movie_segments_.size();
}
inline int RecordingMovieTrackArchive::movie_segments_size() const {
  return _internal_movie_segments_size();
}
inline void RecordingMovieTrackArchive::clear_movie_segments() {
  movie_segments_.Clear();
}
inline ::KN::MovieSegmentArchive* RecordingMovieTrackArchive::mutable_movie_segments(int index) {
  // @@protoc_insertion_point(field_mutable:KN.RecordingMovieTrackArchive.movie_segments)
  return movie_segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive >*
RecordingMovieTrackArchive::mutable_movie_segments() {
  // @@protoc_insertion_point(field_mutable_list:KN.RecordingMovieTrackArchive.movie_segments)
  return &movie_segments_;
}
inline const ::KN::MovieSegmentArchive& RecordingMovieTrackArchive::_internal_movie_segments(int index) const {
  return movie_segments_.Get(index);
}
inline const ::KN::MovieSegmentArchive& RecordingMovieTrackArchive::movie_segments(int index) const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieTrackArchive.movie_segments)
  return _internal_movie_segments(index);
}
inline ::KN::MovieSegmentArchive* RecordingMovieTrackArchive::_internal_add_movie_segments() {
  return movie_segments_.Add();
}
inline ::KN::MovieSegmentArchive* RecordingMovieTrackArchive::add_movie_segments() {
  ::KN::MovieSegmentArchive* _add = _internal_add_movie_segments();
  // @@protoc_insertion_point(field_add:KN.RecordingMovieTrackArchive.movie_segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive >&
RecordingMovieTrackArchive::movie_segments() const {
  // @@protoc_insertion_point(field_list:KN.RecordingMovieTrackArchive.movie_segments)
  return movie_segments_;
}

// optional bool is_movie_segment_data_trimmed_to_duration = 2;
inline bool RecordingMovieTrackArchive::_internal_has_is_movie_segment_data_trimmed_to_duration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordingMovieTrackArchive::has_is_movie_segment_data_trimmed_to_duration() const {
  return _internal_has_is_movie_segment_data_trimmed_to_duration();
}
inline void RecordingMovieTrackArchive::clear_is_movie_segment_data_trimmed_to_duration() {
  is_movie_segment_data_trimmed_to_duration_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RecordingMovieTrackArchive::_internal_is_movie_segment_data_trimmed_to_duration() const {
  return is_movie_segment_data_trimmed_to_duration_;
}
inline bool RecordingMovieTrackArchive::is_movie_segment_data_trimmed_to_duration() const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieTrackArchive.is_movie_segment_data_trimmed_to_duration)
  return _internal_is_movie_segment_data_trimmed_to_duration();
}
inline void RecordingMovieTrackArchive::_internal_set_is_movie_segment_data_trimmed_to_duration(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_movie_segment_data_trimmed_to_duration_ = value;
}
inline void RecordingMovieTrackArchive::set_is_movie_segment_data_trimmed_to_duration(bool value) {
  _internal_set_is_movie_segment_data_trimmed_to_duration(value);
  // @@protoc_insertion_point(field_set:KN.RecordingMovieTrackArchive.is_movie_segment_data_trimmed_to_duration)
}

// -------------------------------------------------------------------

// MovieSegmentArchive

// optional .TSP.DataReference movie_data = 3;
inline bool MovieSegmentArchive::_internal_has_movie_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || movie_data_ != nullptr);
  return value;
}
inline bool MovieSegmentArchive::has_movie_data() const {
  return _internal_has_movie_data();
}
inline const ::TSP::DataReference& MovieSegmentArchive::_internal_movie_data() const {
  const ::TSP::DataReference* p = movie_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& MovieSegmentArchive::movie_data() const {
  // @@protoc_insertion_point(field_get:KN.MovieSegmentArchive.movie_data)
  return _internal_movie_data();
}
inline void MovieSegmentArchive::unsafe_arena_set_allocated_movie_data(
    ::TSP::DataReference* movie_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_data_);
  }
  movie_data_ = movie_data;
  if (movie_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MovieSegmentArchive.movie_data)
}
inline ::TSP::DataReference* MovieSegmentArchive::release_movie_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = movie_data_;
  movie_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* MovieSegmentArchive::unsafe_arena_release_movie_data() {
  // @@protoc_insertion_point(field_release:KN.MovieSegmentArchive.movie_data)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = movie_data_;
  movie_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* MovieSegmentArchive::_internal_mutable_movie_data() {
  _has_bits_[0] |= 0x00000002u;
  if (movie_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    movie_data_ = p;
  }
  return movie_data_;
}
inline ::TSP::DataReference* MovieSegmentArchive::mutable_movie_data() {
  ::TSP::DataReference* _msg = _internal_mutable_movie_data();
  // @@protoc_insertion_point(field_mutable:KN.MovieSegmentArchive.movie_data)
  return _msg;
}
inline void MovieSegmentArchive::set_allocated_movie_data(::TSP::DataReference* movie_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_data_);
  }
  if (movie_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_data));
    if (message_arena != submessage_arena) {
      movie_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  movie_data_ = movie_data;
  // @@protoc_insertion_point(field_set_allocated:KN.MovieSegmentArchive.movie_data)
}

// optional double start_time = 2 [default = -1];
inline bool MovieSegmentArchive::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MovieSegmentArchive::has_start_time() const {
  return _internal_has_start_time();
}
inline void MovieSegmentArchive::clear_start_time() {
  start_time_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline double MovieSegmentArchive::_internal_start_time() const {
  return start_time_;
}
inline double MovieSegmentArchive::start_time() const {
  // @@protoc_insertion_point(field_get:KN.MovieSegmentArchive.start_time)
  return _internal_start_time();
}
inline void MovieSegmentArchive::_internal_set_start_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  start_time_ = value;
}
inline void MovieSegmentArchive::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:KN.MovieSegmentArchive.start_time)
}

// optional .TSP.Reference database_movie_data = 1;
inline bool MovieSegmentArchive::_internal_has_database_movie_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || database_movie_data_ != nullptr);
  return value;
}
inline bool MovieSegmentArchive::has_database_movie_data() const {
  return _internal_has_database_movie_data();
}
inline const ::TSP::Reference& MovieSegmentArchive::_internal_database_movie_data() const {
  const ::TSP::Reference* p = database_movie_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MovieSegmentArchive::database_movie_data() const {
  // @@protoc_insertion_point(field_get:KN.MovieSegmentArchive.database_movie_data)
  return _internal_database_movie_data();
}
inline void MovieSegmentArchive::unsafe_arena_set_allocated_database_movie_data(
    ::TSP::Reference* database_movie_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_movie_data_);
  }
  database_movie_data_ = database_movie_data;
  if (database_movie_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MovieSegmentArchive.database_movie_data)
}
inline ::TSP::Reference* MovieSegmentArchive::release_database_movie_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = database_movie_data_;
  database_movie_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MovieSegmentArchive::unsafe_arena_release_database_movie_data() {
  // @@protoc_insertion_point(field_release:KN.MovieSegmentArchive.database_movie_data)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = database_movie_data_;
  database_movie_data_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MovieSegmentArchive::_internal_mutable_database_movie_data() {
  _has_bits_[0] |= 0x00000001u;
  if (database_movie_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    database_movie_data_ = p;
  }
  return database_movie_data_;
}
inline ::TSP::Reference* MovieSegmentArchive::mutable_database_movie_data() {
  ::TSP::Reference* _msg = _internal_mutable_database_movie_data();
  // @@protoc_insertion_point(field_mutable:KN.MovieSegmentArchive.database_movie_data)
  return _msg;
}
inline void MovieSegmentArchive::set_allocated_database_movie_data(::TSP::Reference* database_movie_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_movie_data_);
  }
  if (database_movie_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_movie_data));
    if (message_arena != submessage_arena) {
      database_movie_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_movie_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  database_movie_data_ = database_movie_data;
  // @@protoc_insertion_point(field_set_allocated:KN.MovieSegmentArchive.database_movie_data)
}

// -------------------------------------------------------------------

// Soundtrack

// optional double volume = 1;
inline bool Soundtrack::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Soundtrack::has_volume() const {
  return _internal_has_volume();
}
inline void Soundtrack::clear_volume() {
  volume_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Soundtrack::_internal_volume() const {
  return volume_;
}
inline double Soundtrack::volume() const {
  // @@protoc_insertion_point(field_get:KN.Soundtrack.volume)
  return _internal_volume();
}
inline void Soundtrack::_internal_set_volume(double value) {
  _has_bits_[0] |= 0x00000001u;
  volume_ = value;
}
inline void Soundtrack::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:KN.Soundtrack.volume)
}

// optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
inline bool Soundtrack::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Soundtrack::has_mode() const {
  return _internal_has_mode();
}
inline void Soundtrack::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::KN::Soundtrack_SoundtrackMode Soundtrack::_internal_mode() const {
  return static_cast< ::KN::Soundtrack_SoundtrackMode >(mode_);
}
inline ::KN::Soundtrack_SoundtrackMode Soundtrack::mode() const {
  // @@protoc_insertion_point(field_get:KN.Soundtrack.mode)
  return _internal_mode();
}
inline void Soundtrack::_internal_set_mode(::KN::Soundtrack_SoundtrackMode value) {
  assert(::KN::Soundtrack_SoundtrackMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  mode_ = value;
}
inline void Soundtrack::set_mode(::KN::Soundtrack_SoundtrackMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:KN.Soundtrack.mode)
}

// repeated .TSP.DataReference movie_media = 3;
inline int Soundtrack::_internal_movie_media_size() const {
  return movie_media_.size();
}
inline int Soundtrack::movie_media_size() const {
  return _internal_movie_media_size();
}
inline ::TSP::DataReference* Soundtrack::mutable_movie_media(int index) {
  // @@protoc_insertion_point(field_mutable:KN.Soundtrack.movie_media)
  return movie_media_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
Soundtrack::mutable_movie_media() {
  // @@protoc_insertion_point(field_mutable_list:KN.Soundtrack.movie_media)
  return &movie_media_;
}
inline const ::TSP::DataReference& Soundtrack::_internal_movie_media(int index) const {
  return movie_media_.Get(index);
}
inline const ::TSP::DataReference& Soundtrack::movie_media(int index) const {
  // @@protoc_insertion_point(field_get:KN.Soundtrack.movie_media)
  return _internal_movie_media(index);
}
inline ::TSP::DataReference* Soundtrack::_internal_add_movie_media() {
  return movie_media_.Add();
}
inline ::TSP::DataReference* Soundtrack::add_movie_media() {
  ::TSP::DataReference* _add = _internal_add_movie_media();
  // @@protoc_insertion_point(field_add:KN.Soundtrack.movie_media)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
Soundtrack::movie_media() const {
  // @@protoc_insertion_point(field_list:KN.Soundtrack.movie_media)
  return movie_media_;
}

// -------------------------------------------------------------------

// SlideNumberAttachmentArchive

// required .TSWP.TextualAttachmentArchive super = 1;
inline bool SlideNumberAttachmentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool SlideNumberAttachmentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::TextualAttachmentArchive& SlideNumberAttachmentArchive::_internal_super() const {
  const ::TSWP::TextualAttachmentArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::TextualAttachmentArchive&>(
      ::TSWP::_TextualAttachmentArchive_default_instance_);
}
inline const ::TSWP::TextualAttachmentArchive& SlideNumberAttachmentArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.SlideNumberAttachmentArchive.super)
  return _internal_super();
}
inline void SlideNumberAttachmentArchive::unsafe_arena_set_allocated_super(
    ::TSWP::TextualAttachmentArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideNumberAttachmentArchive.super)
}
inline ::TSWP::TextualAttachmentArchive* SlideNumberAttachmentArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::TextualAttachmentArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* SlideNumberAttachmentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.SlideNumberAttachmentArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::TextualAttachmentArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* SlideNumberAttachmentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::TextualAttachmentArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::TextualAttachmentArchive* SlideNumberAttachmentArchive::mutable_super() {
  ::TSWP::TextualAttachmentArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.SlideNumberAttachmentArchive.super)
  return _msg;
}
inline void SlideNumberAttachmentArchive::set_allocated_super(::TSWP::TextualAttachmentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNumberAttachmentArchive.super)
}

// -------------------------------------------------------------------

// SlideCollectionSelectionArchive_OutlineSelection

// required .TSP.Reference slide_node = 1;
inline bool SlideCollectionSelectionArchive_OutlineSelection::_internal_has_slide_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slide_node_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionArchive_OutlineSelection::has_slide_node() const {
  return _internal_has_slide_node();
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive_OutlineSelection::_internal_slide_node() const {
  const ::TSP::Reference* p = slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive_OutlineSelection::slide_node() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
  return _internal_slide_node();
}
inline void SlideCollectionSelectionArchive_OutlineSelection::unsafe_arena_set_allocated_slide_node(
    ::TSP::Reference* slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_);
  }
  slide_node_ = slide_node;
  if (slide_node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
}
inline ::TSP::Reference* SlideCollectionSelectionArchive_OutlineSelection::release_slide_node() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slide_node_;
  slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive_OutlineSelection::unsafe_arena_release_slide_node() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slide_node_;
  slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive_OutlineSelection::_internal_mutable_slide_node() {
  _has_bits_[0] |= 0x00000001u;
  if (slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    slide_node_ = p;
  }
  return slide_node_;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive_OutlineSelection::mutable_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
  return _msg;
}
inline void SlideCollectionSelectionArchive_OutlineSelection::set_allocated_slide_node(::TSP::Reference* slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_);
  }
  if (slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node));
    if (message_arena != submessage_arena) {
      slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slide_node_ = slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
}

// required .TSP.IndexSet selected_paragraph_indexes = 2;
inline bool SlideCollectionSelectionArchive_OutlineSelection::_internal_has_selected_paragraph_indexes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || selected_paragraph_indexes_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionArchive_OutlineSelection::has_selected_paragraph_indexes() const {
  return _internal_has_selected_paragraph_indexes();
}
inline const ::TSP::IndexSet& SlideCollectionSelectionArchive_OutlineSelection::_internal_selected_paragraph_indexes() const {
  const ::TSP::IndexSet* p = selected_paragraph_indexes_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& SlideCollectionSelectionArchive_OutlineSelection::selected_paragraph_indexes() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
  return _internal_selected_paragraph_indexes();
}
inline void SlideCollectionSelectionArchive_OutlineSelection::unsafe_arena_set_allocated_selected_paragraph_indexes(
    ::TSP::IndexSet* selected_paragraph_indexes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_paragraph_indexes_);
  }
  selected_paragraph_indexes_ = selected_paragraph_indexes;
  if (selected_paragraph_indexes) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
}
inline ::TSP::IndexSet* SlideCollectionSelectionArchive_OutlineSelection::release_selected_paragraph_indexes() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = selected_paragraph_indexes_;
  selected_paragraph_indexes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* SlideCollectionSelectionArchive_OutlineSelection::unsafe_arena_release_selected_paragraph_indexes() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = selected_paragraph_indexes_;
  selected_paragraph_indexes_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* SlideCollectionSelectionArchive_OutlineSelection::_internal_mutable_selected_paragraph_indexes() {
  _has_bits_[0] |= 0x00000002u;
  if (selected_paragraph_indexes_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    selected_paragraph_indexes_ = p;
  }
  return selected_paragraph_indexes_;
}
inline ::TSP::IndexSet* SlideCollectionSelectionArchive_OutlineSelection::mutable_selected_paragraph_indexes() {
  ::TSP::IndexSet* _msg = _internal_mutable_selected_paragraph_indexes();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
  return _msg;
}
inline void SlideCollectionSelectionArchive_OutlineSelection::set_allocated_selected_paragraph_indexes(::TSP::IndexSet* selected_paragraph_indexes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_paragraph_indexes_);
  }
  if (selected_paragraph_indexes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_paragraph_indexes));
    if (message_arena != submessage_arena) {
      selected_paragraph_indexes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected_paragraph_indexes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  selected_paragraph_indexes_ = selected_paragraph_indexes;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
}

// -------------------------------------------------------------------

// SlideCollectionSelectionArchive

// repeated .TSP.Reference slide_nodes = 1;
inline int SlideCollectionSelectionArchive::_internal_slide_nodes_size() const {
  return slide_nodes_.size();
}
inline int SlideCollectionSelectionArchive::slide_nodes_size() const {
  return _internal_slide_nodes_size();
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::mutable_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.slide_nodes)
  return slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideCollectionSelectionArchive::mutable_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideCollectionSelectionArchive.slide_nodes)
  return &slide_nodes_;
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive::_internal_slide_nodes(int index) const {
  return slide_nodes_.Get(index);
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive::slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.slide_nodes)
  return _internal_slide_nodes(index);
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::_internal_add_slide_nodes() {
  return slide_nodes_.Add();
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::add_slide_nodes() {
  ::TSP::Reference* _add = _internal_add_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.SlideCollectionSelectionArchive.slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideCollectionSelectionArchive::slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.SlideCollectionSelectionArchive.slide_nodes)
  return slide_nodes_;
}

// optional .TSP.Reference slide_node_to_edit = 2;
inline bool SlideCollectionSelectionArchive::_internal_has_slide_node_to_edit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slide_node_to_edit_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionArchive::has_slide_node_to_edit() const {
  return _internal_has_slide_node_to_edit();
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive::_internal_slide_node_to_edit() const {
  const ::TSP::Reference* p = slide_node_to_edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive::slide_node_to_edit() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
  return _internal_slide_node_to_edit();
}
inline void SlideCollectionSelectionArchive::unsafe_arena_set_allocated_slide_node_to_edit(
    ::TSP::Reference* slide_node_to_edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_to_edit_);
  }
  slide_node_to_edit_ = slide_node_to_edit;
  if (slide_node_to_edit) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::release_slide_node_to_edit() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slide_node_to_edit_;
  slide_node_to_edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::unsafe_arena_release_slide_node_to_edit() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slide_node_to_edit_;
  slide_node_to_edit_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::_internal_mutable_slide_node_to_edit() {
  _has_bits_[0] |= 0x00000001u;
  if (slide_node_to_edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    slide_node_to_edit_ = p;
  }
  return slide_node_to_edit_;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::mutable_slide_node_to_edit() {
  ::TSP::Reference* _msg = _internal_mutable_slide_node_to_edit();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
  return _msg;
}
inline void SlideCollectionSelectionArchive::set_allocated_slide_node_to_edit(::TSP::Reference* slide_node_to_edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_to_edit_);
  }
  if (slide_node_to_edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_to_edit));
    if (message_arena != submessage_arena) {
      slide_node_to_edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_node_to_edit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slide_node_to_edit_ = slide_node_to_edit;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
}

// repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
inline int SlideCollectionSelectionArchive::_internal_selected_paragraph_indexes_for_slide_nodes_size() const {
  return selected_paragraph_indexes_for_slide_nodes_.size();
}
inline int SlideCollectionSelectionArchive::selected_paragraph_indexes_for_slide_nodes_size() const {
  return _internal_selected_paragraph_indexes_for_slide_nodes_size();
}
inline void SlideCollectionSelectionArchive::clear_selected_paragraph_indexes_for_slide_nodes() {
  selected_paragraph_indexes_for_slide_nodes_.Clear();
}
inline ::KN::SlideCollectionSelectionArchive_OutlineSelection* SlideCollectionSelectionArchive::mutable_selected_paragraph_indexes_for_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return selected_paragraph_indexes_for_slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection >*
SlideCollectionSelectionArchive::mutable_selected_paragraph_indexes_for_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return &selected_paragraph_indexes_for_slide_nodes_;
}
inline const ::KN::SlideCollectionSelectionArchive_OutlineSelection& SlideCollectionSelectionArchive::_internal_selected_paragraph_indexes_for_slide_nodes(int index) const {
  return selected_paragraph_indexes_for_slide_nodes_.Get(index);
}
inline const ::KN::SlideCollectionSelectionArchive_OutlineSelection& SlideCollectionSelectionArchive::selected_paragraph_indexes_for_slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return _internal_selected_paragraph_indexes_for_slide_nodes(index);
}
inline ::KN::SlideCollectionSelectionArchive_OutlineSelection* SlideCollectionSelectionArchive::_internal_add_selected_paragraph_indexes_for_slide_nodes() {
  return selected_paragraph_indexes_for_slide_nodes_.Add();
}
inline ::KN::SlideCollectionSelectionArchive_OutlineSelection* SlideCollectionSelectionArchive::add_selected_paragraph_indexes_for_slide_nodes() {
  ::KN::SlideCollectionSelectionArchive_OutlineSelection* _add = _internal_add_selected_paragraph_indexes_for_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection >&
SlideCollectionSelectionArchive::selected_paragraph_indexes_for_slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return selected_paragraph_indexes_for_slide_nodes_;
}

// optional .TSP.Range range_in_selected_paragraph = 4;
inline bool SlideCollectionSelectionArchive::_internal_has_range_in_selected_paragraph() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || range_in_selected_paragraph_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionArchive::has_range_in_selected_paragraph() const {
  return _internal_has_range_in_selected_paragraph();
}
inline const ::TSP::Range& SlideCollectionSelectionArchive::_internal_range_in_selected_paragraph() const {
  const ::TSP::Range* p = range_in_selected_paragraph_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& SlideCollectionSelectionArchive::range_in_selected_paragraph() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
  return _internal_range_in_selected_paragraph();
}
inline void SlideCollectionSelectionArchive::unsafe_arena_set_allocated_range_in_selected_paragraph(
    ::TSP::Range* range_in_selected_paragraph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_in_selected_paragraph_);
  }
  range_in_selected_paragraph_ = range_in_selected_paragraph;
  if (range_in_selected_paragraph) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
}
inline ::TSP::Range* SlideCollectionSelectionArchive::release_range_in_selected_paragraph() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = range_in_selected_paragraph_;
  range_in_selected_paragraph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Range* SlideCollectionSelectionArchive::unsafe_arena_release_range_in_selected_paragraph() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = range_in_selected_paragraph_;
  range_in_selected_paragraph_ = nullptr;
  return temp;
}
inline ::TSP::Range* SlideCollectionSelectionArchive::_internal_mutable_range_in_selected_paragraph() {
  _has_bits_[0] |= 0x00000002u;
  if (range_in_selected_paragraph_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArenaForAllocation());
    range_in_selected_paragraph_ = p;
  }
  return range_in_selected_paragraph_;
}
inline ::TSP::Range* SlideCollectionSelectionArchive::mutable_range_in_selected_paragraph() {
  ::TSP::Range* _msg = _internal_mutable_range_in_selected_paragraph();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
  return _msg;
}
inline void SlideCollectionSelectionArchive::set_allocated_range_in_selected_paragraph(::TSP::Range* range_in_selected_paragraph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_in_selected_paragraph_);
  }
  if (range_in_selected_paragraph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_in_selected_paragraph));
    if (message_arena != submessage_arena) {
      range_in_selected_paragraph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_in_selected_paragraph, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  range_in_selected_paragraph_ = range_in_selected_paragraph;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
}

// -------------------------------------------------------------------

// PresenterNotesSelectionArchive

// optional .TSP.Reference slide_node = 1;
inline bool PresenterNotesSelectionArchive::_internal_has_slide_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slide_node_ != nullptr);
  return value;
}
inline bool PresenterNotesSelectionArchive::has_slide_node() const {
  return _internal_has_slide_node();
}
inline const ::TSP::Reference& PresenterNotesSelectionArchive::_internal_slide_node() const {
  const ::TSP::Reference* p = slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PresenterNotesSelectionArchive::slide_node() const {
  // @@protoc_insertion_point(field_get:KN.PresenterNotesSelectionArchive.slide_node)
  return _internal_slide_node();
}
inline void PresenterNotesSelectionArchive::unsafe_arena_set_allocated_slide_node(
    ::TSP::Reference* slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_);
  }
  slide_node_ = slide_node;
  if (slide_node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.PresenterNotesSelectionArchive.slide_node)
}
inline ::TSP::Reference* PresenterNotesSelectionArchive::release_slide_node() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slide_node_;
  slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PresenterNotesSelectionArchive::unsafe_arena_release_slide_node() {
  // @@protoc_insertion_point(field_release:KN.PresenterNotesSelectionArchive.slide_node)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = slide_node_;
  slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PresenterNotesSelectionArchive::_internal_mutable_slide_node() {
  _has_bits_[0] |= 0x00000001u;
  if (slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    slide_node_ = p;
  }
  return slide_node_;
}
inline ::TSP::Reference* PresenterNotesSelectionArchive::mutable_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.PresenterNotesSelectionArchive.slide_node)
  return _msg;
}
inline void PresenterNotesSelectionArchive::set_allocated_slide_node(::TSP::Reference* slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_);
  }
  if (slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node));
    if (message_arena != submessage_arena) {
      slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slide_node_ = slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.PresenterNotesSelectionArchive.slide_node)
}

// -------------------------------------------------------------------

// MixedIdOperationArgs

// repeated .KN.MixedIdOperationArgs.ArgsListKind args_list_types = 1;
inline int MixedIdOperationArgs::_internal_args_list_types_size() const {
  return args_list_types_.size();
}
inline int MixedIdOperationArgs::args_list_types_size() const {
  return _internal_args_list_types_size();
}
inline void MixedIdOperationArgs::clear_args_list_types() {
  args_list_types_.Clear();
}
inline ::KN::MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::_internal_args_list_types(int index) const {
  return static_cast< ::KN::MixedIdOperationArgs_ArgsListKind >(args_list_types_.Get(index));
}
inline ::KN::MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::args_list_types(int index) const {
  // @@protoc_insertion_point(field_get:KN.MixedIdOperationArgs.args_list_types)
  return _internal_args_list_types(index);
}
inline void MixedIdOperationArgs::set_args_list_types(int index, ::KN::MixedIdOperationArgs_ArgsListKind value) {
  assert(::KN::MixedIdOperationArgs_ArgsListKind_IsValid(value));
  args_list_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.MixedIdOperationArgs.args_list_types)
}
inline void MixedIdOperationArgs::_internal_add_args_list_types(::KN::MixedIdOperationArgs_ArgsListKind value) {
  assert(::KN::MixedIdOperationArgs_ArgsListKind_IsValid(value));
  args_list_types_.Add(value);
}
inline void MixedIdOperationArgs::add_args_list_types(::KN::MixedIdOperationArgs_ArgsListKind value) {
  _internal_add_args_list_types(value);
  // @@protoc_insertion_point(field_add:KN.MixedIdOperationArgs.args_list_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
MixedIdOperationArgs::args_list_types() const {
  // @@protoc_insertion_point(field_list:KN.MixedIdOperationArgs.args_list_types)
  return args_list_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MixedIdOperationArgs::_internal_mutable_args_list_types() {
  return &args_list_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MixedIdOperationArgs::mutable_args_list_types() {
  // @@protoc_insertion_point(field_mutable_list:KN.MixedIdOperationArgs.args_list_types)
  return _internal_mutable_args_list_types();
}

// repeated .TSK.AddIdOperationArgs add_args_list = 2;
inline int MixedIdOperationArgs::_internal_add_args_list_size() const {
  return add_args_list_.size();
}
inline int MixedIdOperationArgs::add_args_list_size() const {
  return _internal_add_args_list_size();
}
inline ::TSK::AddIdOperationArgs* MixedIdOperationArgs::mutable_add_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.MixedIdOperationArgs.add_args_list)
  return add_args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
MixedIdOperationArgs::mutable_add_args_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.MixedIdOperationArgs.add_args_list)
  return &add_args_list_;
}
inline const ::TSK::AddIdOperationArgs& MixedIdOperationArgs::_internal_add_args_list(int index) const {
  return add_args_list_.Get(index);
}
inline const ::TSK::AddIdOperationArgs& MixedIdOperationArgs::add_args_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.MixedIdOperationArgs.add_args_list)
  return _internal_add_args_list(index);
}
inline ::TSK::AddIdOperationArgs* MixedIdOperationArgs::_internal_add_add_args_list() {
  return add_args_list_.Add();
}
inline ::TSK::AddIdOperationArgs* MixedIdOperationArgs::add_add_args_list() {
  ::TSK::AddIdOperationArgs* _add = _internal_add_add_args_list();
  // @@protoc_insertion_point(field_add:KN.MixedIdOperationArgs.add_args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
MixedIdOperationArgs::add_args_list() const {
  // @@protoc_insertion_point(field_list:KN.MixedIdOperationArgs.add_args_list)
  return add_args_list_;
}

// repeated .TSK.IdPlacementOperationArgs show_placeholder_args_list = 3;
inline int MixedIdOperationArgs::_internal_show_placeholder_args_list_size() const {
  return show_placeholder_args_list_.size();
}
inline int MixedIdOperationArgs::show_placeholder_args_list_size() const {
  return _internal_show_placeholder_args_list_size();
}
inline ::TSK::IdPlacementOperationArgs* MixedIdOperationArgs::mutable_show_placeholder_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.MixedIdOperationArgs.show_placeholder_args_list)
  return show_placeholder_args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
MixedIdOperationArgs::mutable_show_placeholder_args_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.MixedIdOperationArgs.show_placeholder_args_list)
  return &show_placeholder_args_list_;
}
inline const ::TSK::IdPlacementOperationArgs& MixedIdOperationArgs::_internal_show_placeholder_args_list(int index) const {
  return show_placeholder_args_list_.Get(index);
}
inline const ::TSK::IdPlacementOperationArgs& MixedIdOperationArgs::show_placeholder_args_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.MixedIdOperationArgs.show_placeholder_args_list)
  return _internal_show_placeholder_args_list(index);
}
inline ::TSK::IdPlacementOperationArgs* MixedIdOperationArgs::_internal_add_show_placeholder_args_list() {
  return show_placeholder_args_list_.Add();
}
inline ::TSK::IdPlacementOperationArgs* MixedIdOperationArgs::add_show_placeholder_args_list() {
  ::TSK::IdPlacementOperationArgs* _add = _internal_add_show_placeholder_args_list();
  // @@protoc_insertion_point(field_add:KN.MixedIdOperationArgs.show_placeholder_args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
MixedIdOperationArgs::show_placeholder_args_list() const {
  // @@protoc_insertion_point(field_list:KN.MixedIdOperationArgs.show_placeholder_args_list)
  return show_placeholder_args_list_;
}

// repeated .TSK.RemoveIdOperationArgs remove_args_list = 4;
inline int MixedIdOperationArgs::_internal_remove_args_list_size() const {
  return remove_args_list_.size();
}
inline int MixedIdOperationArgs::remove_args_list_size() const {
  return _internal_remove_args_list_size();
}
inline ::TSK::RemoveIdOperationArgs* MixedIdOperationArgs::mutable_remove_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.MixedIdOperationArgs.remove_args_list)
  return remove_args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
MixedIdOperationArgs::mutable_remove_args_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.MixedIdOperationArgs.remove_args_list)
  return &remove_args_list_;
}
inline const ::TSK::RemoveIdOperationArgs& MixedIdOperationArgs::_internal_remove_args_list(int index) const {
  return remove_args_list_.Get(index);
}
inline const ::TSK::RemoveIdOperationArgs& MixedIdOperationArgs::remove_args_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.MixedIdOperationArgs.remove_args_list)
  return _internal_remove_args_list(index);
}
inline ::TSK::RemoveIdOperationArgs* MixedIdOperationArgs::_internal_add_remove_args_list() {
  return remove_args_list_.Add();
}
inline ::TSK::RemoveIdOperationArgs* MixedIdOperationArgs::add_remove_args_list() {
  ::TSK::RemoveIdOperationArgs* _add = _internal_add_remove_args_list();
  // @@protoc_insertion_point(field_add:KN.MixedIdOperationArgs.remove_args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
MixedIdOperationArgs::remove_args_list() const {
  // @@protoc_insertion_point(field_list:KN.MixedIdOperationArgs.remove_args_list)
  return remove_args_list_;
}

// repeated .TSK.IdPlacementOperationArgs hide_placeholder_args_list = 5;
inline int MixedIdOperationArgs::_internal_hide_placeholder_args_list_size() const {
  return hide_placeholder_args_list_.size();
}
inline int MixedIdOperationArgs::hide_placeholder_args_list_size() const {
  return _internal_hide_placeholder_args_list_size();
}
inline ::TSK::IdPlacementOperationArgs* MixedIdOperationArgs::mutable_hide_placeholder_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.MixedIdOperationArgs.hide_placeholder_args_list)
  return hide_placeholder_args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
MixedIdOperationArgs::mutable_hide_placeholder_args_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.MixedIdOperationArgs.hide_placeholder_args_list)
  return &hide_placeholder_args_list_;
}
inline const ::TSK::IdPlacementOperationArgs& MixedIdOperationArgs::_internal_hide_placeholder_args_list(int index) const {
  return hide_placeholder_args_list_.Get(index);
}
inline const ::TSK::IdPlacementOperationArgs& MixedIdOperationArgs::hide_placeholder_args_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.MixedIdOperationArgs.hide_placeholder_args_list)
  return _internal_hide_placeholder_args_list(index);
}
inline ::TSK::IdPlacementOperationArgs* MixedIdOperationArgs::_internal_add_hide_placeholder_args_list() {
  return hide_placeholder_args_list_.Add();
}
inline ::TSK::IdPlacementOperationArgs* MixedIdOperationArgs::add_hide_placeholder_args_list() {
  ::TSK::IdPlacementOperationArgs* _add = _internal_add_hide_placeholder_args_list();
  // @@protoc_insertion_point(field_add:KN.MixedIdOperationArgs.hide_placeholder_args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
MixedIdOperationArgs::hide_placeholder_args_list() const {
  // @@protoc_insertion_point(field_list:KN.MixedIdOperationArgs.hide_placeholder_args_list)
  return hide_placeholder_args_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KN

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType>() {
  return ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor();
}
template <> struct is_proto_enum< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType>() {
  return ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributeValueArchive_BuildAttributeValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributeValueArchive_BuildAttributeValueType>() {
  return ::KN::BuildAttributeValueArchive_BuildAttributeValueType_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesAcceleration> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesAcceleration>() {
  return ::KN::BuildAttributesArchive_BuildAttributesAcceleration_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesRotationDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesRotationDirection>() {
  return ::KN::BuildAttributesArchive_BuildAttributesRotationDirection_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesCurveStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesCurveStyle>() {
  return ::KN::BuildAttributesArchive_BuildAttributesCurveStyle_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesTextDelivery> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesTextDelivery>() {
  return ::KN::BuildAttributesArchive_BuildAttributesTextDelivery_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption>() {
  return ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity>() {
  return ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor();
}
template <> struct is_proto_enum< ::KN::PlaceholderArchive_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::PlaceholderArchive_Kind>() {
  return ::KN::PlaceholderArchive_Kind_descriptor();
}
template <> struct is_proto_enum< ::KN::DesktopUILayoutArchive_SidebarViewMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::DesktopUILayoutArchive_SidebarViewMode>() {
  return ::KN::DesktopUILayoutArchive_SidebarViewMode_descriptor();
}
template <> struct is_proto_enum< ::KN::DesktopUILayoutArchive_InspectorPaneViewMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::DesktopUILayoutArchive_InspectorPaneViewMode>() {
  return ::KN::DesktopUILayoutArchive_InspectorPaneViewMode_descriptor();
}
template <> struct is_proto_enum< ::KN::IOSSavedPlaybackStateArchive_PresentationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::IOSSavedPlaybackStateArchive_PresentationType>() {
  return ::KN::IOSSavedPlaybackStateArchive_PresentationType_descriptor();
}
template <> struct is_proto_enum< ::KN::ShowArchive_KNShowMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::ShowArchive_KNShowMode>() {
  return ::KN::ShowArchive_KNShowMode_descriptor();
}
template <> struct is_proto_enum< ::KN::RecordingArchive_RecordingSyncStateEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::RecordingArchive_RecordingSyncStateEnum>() {
  return ::KN::RecordingArchive_RecordingSyncStateEnum_descriptor();
}
template <> struct is_proto_enum< ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase>() {
  return ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor();
}
template <> struct is_proto_enum< ::KN::RecordingPauseEventArchive_RecordingPauseEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::RecordingPauseEventArchive_RecordingPauseEventType>() {
  return ::KN::RecordingPauseEventArchive_RecordingPauseEventType_descriptor();
}
template <> struct is_proto_enum< ::KN::RecordingMovieEventArchive_RecordingMovieEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::RecordingMovieEventArchive_RecordingMovieEventType>() {
  return ::KN::RecordingMovieEventArchive_RecordingMovieEventType_descriptor();
}
template <> struct is_proto_enum< ::KN::Soundtrack_SoundtrackMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::Soundtrack_SoundtrackMode>() {
  return ::KN::Soundtrack_SoundtrackMode_descriptor();
}
template <> struct is_proto_enum< ::KN::MixedIdOperationArgs_ArgsListKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::MixedIdOperationArgs_ArgsListKind>() {
  return ::KN::MixedIdOperationArgs_ArgsListKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KNArchives_2eproto
